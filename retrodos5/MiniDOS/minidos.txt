     1                                  ; ****************************************************************************
     2                                  ; MINIDOS.S (PCDOS 7.1 - MiniDOS 1.0 Kernel) - ERDOGAN TAN - 03/03/2025
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Modified from Retro DOS v5.0 'retrodos5.s' (17/07/2024) ((PCDOS 7.1 Kernel))
     5                                  ;
     6                                  ; Last Update: 11/05/2025  (Previous: 24/04/2025)
     7                                  ;
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.15
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	   ((nasm minidos.s -l minidos.txt -o PCDOS.SYS -Z error.txt))
    12                                  ; ---------------------------------------------------------------------------- 
    13                                  ; Included binary file: KERNEL.BIN (MiniDOS 1.0 - Kernel file) 
    14                                  ; ****************************************************************************
    15                                  
    16                                  ; 18/03/2025 - MiniDOS v1.0
    17                                  ; ----------------------------------------------------------------------------
    18                                  ; MiniDOS 1.0 'IBMBIO.COM' modifications:
    19                                  ; ---------------------------------------
    20                                  ; 1) "DOSDATA=" configuration removed
    21                                  ; 2) "SWITCHES=" configuration removed
    22                                  ; 3) "FCBS=" configuration removed ; 24/03/2025
    23                                  ; ---------------------------------------------------------------------------- 
    24                                  
    25                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    26                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    27                                  ; as below:
    28                                  ;
    29                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    30                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    31                                  ;
    32                                  ;    2) Labels, names, comments, explanations and structure definitions
    33                                  ;	about procedures and code details are almost entirely taken from
    34                                  ;	the original MSDOS 6.0 source code, except for the details that
    35                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    36                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    37                                  ;	the originality of the descriptions.)
    38                                  ;
    39                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    40                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    41                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    42                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    43                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    44                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    45                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    46                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    47                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    48                                  ;	than the original PCDOS/MSDOS. It does not include 
    49                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    50                                  ;	files are almost identical except their INIT codes.)
    51                                  ;
    52                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    53                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    54                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    55                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    56                                  		
    57                                  ; ----------------------------------------------------------------------------
    58                                  
    59                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    60                                  ;
    61                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    62                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    63                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    64                                  ;
    65                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    66                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    67                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    68                                  ; 		
    69                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    70                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    71                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    72                                  
    73                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    74                                  ;     (as included binary, 'IOSYS5.BIN') 
    75                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    76                                  ;						        (except MSLOAD code)
    77                                        
    78                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    79                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    80                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    81                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    82                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    83                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    84                                  
    85                                  ; ----------------------------------------------------------------------------
    86                                  
    87                                  ;=============================================================================
    88                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    89                                  ; by Erdogan Tan, 10/09/2018
    90                                  ;=============================================================================
    91                                  
    92                                  ; MSBIO (IO.SYS 6.0) source files:
    93                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    94                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    95                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    96                                  
    97                                  ;=============================================================================
    98                                  ; MSBIO
    99                                  ;=============================================================================
   100                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
   101                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
   102                                  ;msend,msbio,msbio;
   103                                  
   104                                  ;=============================================================================
   105                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
   106                                  ;=============================================================================
   107                                  
   108                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
   109                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
   110                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
   111                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
   112                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
   113                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
   114                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
   115                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
   116                                  
   117                                  ;(*) unfinished, draft, canceled (failed in 2019)
   118                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
   119                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
   120                                  
   121                                  ;Disassembly: (reverse engineering via IDA Pro Free)
   122                                  
   123                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
   124                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
   125                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
   126                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
   127                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
   128                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
   129                                  
   130                                  ;-----------------------------------------------------------------------------
   131                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
   132                                  ;-----------------------------------------------------------------------------
   133                                  
   134                                  SECTOR_SIZE     equ     0200h		; size of a sector
   135                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
   136                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
   137                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
   138                                  KEYBUF          equ     041Eh		; keyboard buffer data
   139                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
   140                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
   141                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
   142                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
   143                                  
   144                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
   145                                  ; The following structure defines the disk parameter table
   146                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   147                                  
   148                                  struc	DISK_PARMS
   149 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   150 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   151 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   152 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   153 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   154 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   155 00000006 ??                      .DISK_DTL:	  resb	1
   156 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   157 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   158 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   159 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   160                                  .size:
   161                                  endstruc
   162                                  
   163                                  ; 09/03/2019 - Retro DOS v4.0
   164                                  ; -------------------------------------------------------------------------
   165                                  ; MSEQU.INC, MSDOS 6.0, 1991
   166                                  
   167                                  ftoobig 	equ	80h
   168                                  fbig		equ	40h
   169                                  ; 12/09/2023
   170                                  fbigbig		equ	20h  ; Retro DOS 5.0 ; PCDOS 7.1 ; FAT32 FS flag
   171                                  romstatus	equ	1
   172                                  romread 	equ	2
   173                                  romwrite	equ	3
   174                                  romverify	equ	4
   175                                  romformat	equ	5
   176                                  
   177                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   178                                  ; -------------------------------------------------------------------------
   179                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   180                                  ;
   181                                  ;  BDS is the Bios Data Structure.
   182                                  ;
   183                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   184                                  ;  are linked together in a list with the pointer to the first BDS being
   185                                  ;  found in START_BDS. The BDS hold various values important to the disk
   186                                  ;  drive. For example there is a field for last time accesses. As actions
   187                                  ;  take place in the system the BDS are update to reflect the actions.
   188                                  ;  For example is there is a read to a disk the last access field for the
   189                                  ;  BDS for that drive is update to the current time.
   190                                  ;
   191                                  ; Values for various flags in BDS.flags.
   192                                  ;
   193                                  
   194                                  fnon_removable	    equ     01h 	;For non-removable media
   195                                  fchangeline	    equ     02h 	;If changeline supported on drive
   196                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   197                                  					; just return the fake one
   198                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   199                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   200                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   201                                  fchanged	    equ     40h 	;Indicates media changed
   202                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   203                                  fchanged_by_format  equ    100h		;Media changed by format
   204                                  ; MSDOS 6.0
   205                                  unformatted_media   equ    200h 	;Fixed disk only
   206                                  
   207                                  ;
   208                                  ; Various form factors to describe media
   209                                  ;
   210                                  
   211                                  ff48tpi 	    equ     0
   212                                  ff96tpi 	    equ     1
   213                                  ffSmall 	    equ     2
   214                                  ffHardFile	    equ     5
   215                                  ffOther 	    equ     7
   216                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   217                                  ff288		    equ     9	; 2.88 MB drive
   218                                  ; Retro DOS v4.0 feature only !
   219                                  ;ff144		    equ	   10	; 1.44 MB drive
   220                                  
   221                                  ; 12/09/2023
   222                                  ; Retro DOS v4 (MDOS 5.0-6.22) BDS structure
   223                                  ; -------------------------------------------------------------------------
   224                                  ; 100 bytes
   225                                   
   226                                  %if 0
   227                                  
   228                                  ; 26/05/2019
   229                                  
   230                                  struc	BDS	; BDS_Type
   231                                  .link:		resd 1		; Link to next BDS
   232                                  .drivenum:	resb 1		; Physical drive number
   233                                  .drivelet:	resb 1		; DOS drive number
   234                                  
   235                                  	;We want to embed a BPB declaration here, but we can't initialize
   236                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   237                                  	;of the BPB declaration.
   238                                  .BPB:	
   239                                  .bytespersec:	resw 1		; bytes per sectors ; def = 512
   240                                  .secperclus:	resb 1		; sectors per cluster
   241                                  .resectors:	resw 1		; reserved sectors
   242                                  .fats:		resb 1		; number of fats
   243                                  .direntries:	resw 1		; number of root directory entries
   244                                  .totalsecs16:	resw 1		; total sectors on medium
   245                                  .media:		resb 1		; media descriptor byte ; def = 0F8h
   246                                  .fatsecs: 	resw 1		; number of fat sectors
   247                                  .secpertrack:	resw 1		; sectors per track
   248                                  .heads:		resw 1		; number of heads
   249                                  ;.hiddensecs:	resw 1		; hidden sectors
   250                                  ; MSDOS 6.0
   251                                  .hiddensecs:	resd 1		; hidden sectors
   252                                  .totalsecs32:	resd 1		; big total sectors
   253                                  ;
   254                                  .fatsiz:	resb 1		; flags...
   255                                  .opcnt:		resw 1		; open ref. count
   256                                  ;.volid:	resb 12		; volume ID of medium
   257                                  .formfactor:	resb 1		; form factor index
   258                                  .flags:		resw 1		; various flags ; def: 0020h
   259                                  .cylinders:	resw 1		; number of cylinders
   260                                  ;
   261                                  .R_BPB:  			; recommended BPB
   262                                  .rbytespersec:	resw 1
   263                                  .rsecperclus:	resb 1
   264                                  .rresectors: 	resw 1
   265                                  .rfats:		resb 1
   266                                  .rdirentries:	resw 1
   267                                  .rtotalsecs16:	resw 1
   268                                  .rmedia: 	resb 1
   269                                  .rfatsecs:	resw 1
   270                                  .rsecpertrack: 	resw 1
   271                                  .rheads:	resw 1
   272                                  .rhidsecs: 	resd 1
   273                                  .rtotalsecs32: 	resd 1
   274                                  .rreserved:	resb 6		; not used (reserved)
   275                                  ;
   276                                  .track:		resb 1		; last track accessed on drive
   277                                  .bdsm_ismini:
   278                                  .tim_lo:	resw 1		; time of last access. keep
   279                                  .bdsm_hidden_trks:
   280                                  .tim_hi:	resw 1		; these contiguous.
   281                                  .volid:		resb 12		; volume id of medium
   282                                  	       ;db "NO NAME    ",0
   283                                  .vol_serial:	resd 1	; current volume serial number from boot record
   284                                  .filesys_id:	resb 9	; current file system id from boot record
   285                                  	       ;db "FAT12   ",0
   286                                  .size:	
   287                                  endstruc
   288                                  
   289                                  %endif
   290                                  
   291                                  ; 12/09/2023 - Retro DOS 5.0 - PCDOS 7.1 (FAT32 compatible) BDS structure
   292                                  ; -------------------------------------------------------------------------
   293                                  ; 150 bytes
   294                                  
   295                                  %if 1
   296                                  
   297                                  struc	BDS	; BDS_Type
   298 00000000 ????????                .link:		resd 1		; Link to next BDS
   299 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   300 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   301                                  
   302                                  	;We want to embed a BPB declaration here, but we can't initialize
   303                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   304                                  	;of the BPB declaration.
   305                                  .BPB:	
   306 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   307 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   308 00000009 ????                    .resectors:	resw 1		; reserved sectors
   309 0000000B ??                      .fats:		resb 1		; number of fats
   310 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   311 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   312 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   313 00000011 ????                    .fatsecs16: 	resw 1		; number of fat sectors
   314 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   315 00000015 ????                    .heads:		resw 1		; number of heads
   316 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors
   317 0000001B ????????                .totalsecs32:	resd 1		; big total sectors
   318                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0 -----------
   319 0000001F ????????                .fatsecs32:	resd 1		; BPB_FATSz32   ; FAT32 FAT size in sectors
   320 00000023 ????                    .extflags:	resw 1		; BPB_ExtFlags  ; FAT32 Extended Flags
   321 00000025 ????                    .fsver:		resw 1		; BPB_FSVer	; FAT32 volume version number
   322 00000027 ????????                .rootdirclust:	resd 1		; BPB_RootClus  ; FAT32 root dir's 1st clust num
   323 0000002B ????                    .fsinfo:	resw 1		; BPB_FSInfo	; FAT32 FSINFO sector number
   324 0000002D ????                    .bkbootsec:	resw 1		; BPB_BkBootSec ; FAT32 backup boot sector number
   325 0000002F <res Ch>                .reserved:	resb 12		; BPB_Reserved	; FAT32 reserved field = 0, 12 bytes
   326                                  ; -----------------------------------------------
   327 0000003B ??                      .fatsiz:	resb 1		; flags...
   328 0000003C ????                    .opcnt:		resw 1		; open ref. count
   329 0000003E ??                      .formfactor:	resb 1		; form factor index
   330 0000003F ????                    .flags:		resw 1		; various flags ; def: 0020h
   331 00000041 ????                    .cylinders:	resw 1		; number of cylinders
   332                                  ;
   333                                  .R_BPB:  			; recommended BPB
   334 00000043 ????                    .rbytespersec:	resw 1		
   335 00000045 ??                      .rsecperclus:	resb 1
   336 00000046 ????                    .rresectors: 	resw 1
   337 00000048 ??                      .rfats:		resb 1
   338 00000049 ????                    .rdirentries:	resw 1
   339 0000004B ????                    .rtotalsecs16:	resw 1
   340 0000004D ??                      .rmedia: 	resb 1
   341 0000004E ????                    .rfatsecs:	resw 1
   342 00000050 ????                    .rsecpertrack: 	resw 1
   343 00000052 ????                    .rheads:	resw 1
   344 00000054 ????????                .rhidsecs: 	resd 1
   345 00000058 ????????                .rtotalsecs32: 	resd 1
   346                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0
   347 0000005C ????????                .rfatsecs32:	resd 1		; 
   348 00000060 ????                    .rextflags:	resw 1		; 
   349 00000062 ????                    .rfsver:	resw 1		; 
   350 00000064 ????????                .rrootdirclust:	resd 1		; 
   351 00000068 ????                    .rfsinfo:	resw 1		; default/initial value = -1
   352 0000006A ????                    .rbkbootsec:	resw 1		; default/initial value = -1
   353 0000006C <res Ch>                .rreserved:	resb 12		; default value = 0
   354                                  ; -----------------------------------------------
   355                                  ;
   356 00000078 ??                      .track:		resb 1		; last track accessed on drive (def=-1)
   357                                  .bdsm_ismini:
   358 00000079 ????                    .tim_lo:	resw 1		; time of last access. keep
   359                                  .bdsm_hidden_trks:
   360 0000007B ????                    .tim_hi:	resw 1		; these contiguous.
   361 0000007D <res Ch>                .volid:		resb 12		; volume id of medium
   362                                  	       ;db "NO NAME    ",0
   363 00000089 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   364 0000008D <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   365                                  	       ;db "FAT12   ",0
   366                                  .size:
   367                                  endstruc
   368                                  
   369                                  %endif
   370                                  ; -------------------------------------------------------------------------
   371                                  
   372                                  ;The assembler will generate bad data for "size bds_volid",
   373                                  ;so we'll define an equate here.
   374                                  
   375                                  VOLID_SIZ	equ	12
   376                                  
   377                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   378                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   379                                  
   380                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   381                                  
   382                                  ; 29/12/2018
   383                                  ; Retro DOS v4.0
   384                                  ;
   385                                  ; MSDOS 6.0 - BOOTFORM.INC
   386                                  
   387                                  BOOT_SIZE	    EQU	 512
   388                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   389                                  
   390                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   391                                  
   392                                  struc EBPB ; EXT_BPB_INFO
   393 00000000 ????                    .BYTESPERSECTOR:    resw 1
   394 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   395 00000003 ????                    .RESERVEDSECTORS:   resw 1
   396 00000005 ??                      .NUMBEROFFATS:	    resb 1
   397 00000006 ????                    .ROOTENTRIES:	    resw 1
   398 00000008 ????                    .TOTALSECTORS:	    resw 1
   399 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   400 0000000B ????                    .SECTORSPERFAT:	    resw 1
   401 0000000D ????                    .SECTORSPERTRACK:   resw 1
   402 0000000F ????                    .HEADS:		    resw 1
   403 00000011 ????????                .HIDDENSECTORS:	    resd 1
   404 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   405                                  .size:
   406                                  endstruc
   407                                  
   408                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   409                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   410 00000000 ??????                  .JUMP:		resb 3
   411 00000003 ????????????????        .OEM:		resb 8
   412 0000000B <res 19h>               .BPB:		resb EBPB.size ; 25 bytes
   413 00000024 ??                      .PHYDRV:	resb 1
   414 00000025 ??                      .CURHD:		resb 1
   415 00000026 ??                      .SIG:		resb 1
   416 00000027 ????????                .SERIAL:	resd 1
   417 0000002B <res Bh>                .VOL_LABEL:	resb 11
   418 00000036 ????????????????        .SYSTEM_ID:	resb 8
   419                                  .size:
   420                                  endstruc
   421                                  
   422                                  ; 12/09/2023
   423                                  ; ----------------------------
   424                                  ; Retro DOS v5.0 (PCDOS 7.1) - FAT32 Boot Sector Parameters
   425                                  
   426                                  struc XBPB ; FAT32_BPB_INFO ; 12/09/2023
   427 00000000 ????                    .BYTESPERSECTOR:    resw 1
   428 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   429 00000003 ????                    .RESERVEDSECTORS:   resw 1
   430 00000005 ??                      .NUMBEROFFATS:	    resb 1
   431 00000006 ????                    .ROOTENTRIES:	    resw 1
   432 00000008 ????                    .TOTALSECTORS:	    resw 1
   433 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   434 0000000B ????                    .SECTORSPERFAT:	    resw 1
   435 0000000D ????                    .SECTORSPERTRACK:   resw 1
   436 0000000F ????                    .HEADS:		    resw 1
   437 00000011 ????????                .HIDDENSECTORS:	    resd 1
   438 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   439                                  ;............ FAT32 ......  + 28
   440 00000019 ????????                .FATSIZE32:	    resd 1
   441 0000001D ????                    .EXTFLAGS:	    resw 1
   442 0000001F ????                    .FSVER:		    resw 1
   443 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   444 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   445 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   446 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   447                                  .size:
   448                                  endstruc
   449                                  
   450                                  struc FAT32_EXT_BOOT ; FAT32_IBMBOOT_HEADER ; 12/09/2023
   451 00000000 ??????                  .JUMP:		resb 3
   452 00000003 ????????????????        .OEM:		resb 8
   453 0000000B <res 35h>               .BPB:		resb XBPB.size ; 53 bytes (25+28)
   454 00000040 ??                      .PHYDRV:	resb 1
   455 00000041 ??                      .CURHD:		resb 1
   456 00000042 ??                      .SIG:		resb 1
   457 00000043 ????????                .SERIAL:	resd 1
   458 00000047 <res Bh>                .VOL_LABEL:	resb 11
   459 00000052 ????????????????        .SYSTEM_ID:	resb 8
   460                                  .size:
   461                                  endstruc
   462                                  
   463                                  ; ----------------------------
   464                                  
   465                                  ; 23/03/2018
   466                                  
   467                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   468                                  STRUC SRHEAD
   469 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   470 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   471 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   472 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   473 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   474                                  .size:
   475                                  endstruc
   476                                  
   477                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   478                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   479                                  ;
   480                                  struc IOCTL_REQ
   481 00000000 <res Dh>                		resb SRHEAD.size	
   482                                  			    	;GENERIC IOCTL ADDITION.
   483 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   484 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   485 0000000F ????                    .REG_SI:	resw 1
   486 00000011 ????                    .REG_DI:	resw 1
   487 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   488                                  endstruc
   489                                  
   490                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   491                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   492                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   493                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   494                                  IOC_SC		EQU	3	; SCREEN CONTROL
   495                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   496                                  IOC_PC		EQU	5	; PRINTER CONTROL
   497                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   498                                  
   499                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   500                                  GEN_IOCTL_WRT_TRK   EQU   40H
   501                                  GEN_IOCTL_RD_TRK    EQU   60H
   502                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   503                                  
   504                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   505                                  ;.RC_COUNT:	resw 	1
   506                                  ;endstruc
   507                                  
   508                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   509                                  
   510                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   511                                  
   512                                  ;struc SYSDEV
   513                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   514                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   515                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   516                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   517                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   518                                  ; .size:
   519                                  ;endstruc
   520                                  
   521                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   522                                  
   523                                  ;
   524                                  ; ATTRIBUTE BIT MASKS
   525                                  ;
   526                                  ; CHARACTER DEVICES:
   527                                  ;
   528                                  ; BIT 15 -> MUST BE 1
   529                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   530                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   531                                  ;     12 -> UNUSED
   532                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   533                                  ;     10 -> MUST BE 0
   534                                  ;      9 -> MUST BE 0
   535                                  ;      8 -> UNUSED
   536                                  ;      7 -> UNUSED
   537                                  ;      6 -> UNUSED
   538                                  ;      5 -> UNUSED
   539                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   540                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   541                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   542                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   543                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   544                                  ;
   545                                  ; BLOCK DEVICES:
   546                                  ;
   547                                  ; BIT 15 -> MUST BE 0
   548                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   549                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   550                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   551                                  ;	    THE SAME PLACE.
   552                                  ;     12 -> UNUSED
   553                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   554                                  ;     10 -> MUST BE 0
   555                                  ;      9 -> MUST BE 0
   556                                  ;      8 -> UNUSED
   557                                  ;      7 -> UNUSED
   558                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   559                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   560                                  ;      5 -> UNUSED
   561                                  ;      4 -> UNUSED
   562                                  ;      3 -> UNUSED
   563                                  ;      2 -> UNUSED
   564                                  ;      1 -> UNUSED
   565                                  ;      0 -> UNUSED
   566                                  ;
   567                                  
   568                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   569                                  CHARDEV        EQU   8000H
   570                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   571                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   572                                  				    ;  COMP MEDIA.
   573                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   574                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   575                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   576                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   577                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   578                                  				    ;  ENTRY POINTS, 0 IF NOT
   579                                  
   580                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   581                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   582                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   583                                  				    ;  ITS CURRENT FORM.
   584                                  
   585                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   586                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   587                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   588                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   589                                  
   590                                  ; 18/03/2019 - Retro DOS v4.0
   591                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   592                                  
   593                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   594                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   595                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   596                                  				    ;GENERIC IOCTL CALLS.
   597                                  				    ;FOR CHARACTER DEVICES, THIS
   598                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   599                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   600                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   601                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   602                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   603                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   604                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   605                                  ; 23/07/2019 - Retro DOS v4.0
   606                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   607                                  
   608                                  ; 27/05/2018 - Retro DOS v3.0 
   609                                  ; [MSDOS 3.3, MSDISK.ASM]
   610                                  
   611                                  struc INT13FRAME
   612 00000000 ????                    .oldbp:	resw 1
   613 00000002 ????                    .oldax:	resw 1
   614 00000004 ????                    .oldbx:	resw 1
   615 00000006 ????                    .oldcx:	resw 1
   616 00000008 ????                    .olddx:	resw 1
   617 0000000A ????????                .olddd:	resd 1
   618 0000000E ????                    .oldf:	resw 1
   619                                  .size:
   620                                  endstruc
   621                                  
   622                                  ; 02/06/2018 - Retro DOS v3.0
   623                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   624                                  
   625                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   626 00000000 ????                    .bios_sd_leng:		resw 1				  
   627 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   628                                  .bios_sd_scnd_modelbyte: 
   629 00000003 ??                      			resb 1					  
   630 00000004 ??                      			resb 1					  
   631 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   632 00000006 ????????                			resb 4					  
   633                                  endstruc
   634                                  
   635                                  ;-----------------------------------------------------------------------------
   636                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   637                                  ;-----------------------------------------------------------------------------
   638                                  ; 11/03/2019 - Retro DOS v4.0
   639                                  
   640                                  ; 18/03/2019
   641                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   642                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   643                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   644                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   645                                  					  ; or system turns
   646                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   647                                  ; ............................................................................
   648                                  
   649                                  ;*** J.K.
   650                                  ;General Guide -
   651                                  ;Category Code:
   652                                  ; 0... .... DOS Defined
   653                                  ; 1... .... User defined
   654                                  ; .xxx xxxx Code
   655                                  
   656                                  ;Function Code:
   657                                  ; 0... .... Return error if unsupported
   658                                  ; 1... .... Ignore if unsupported
   659                                  ; .0.. .... Intercepted by DOS
   660                                  ; .1.. .... Passed to driver
   661                                  ; ..0. .... Sends data/commands to device
   662                                  ; ..1. .... Quries data/info from device
   663                                  ; ...x .... Subfunction
   664                                  ;
   665                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   666                                  ; function set.  It plays no critical role; some functions may contain both
   667                                  ; command and query elements. The convention is that such commands are
   668                                  ; defined as "sends data".
   669                                  
   670                                  ;*****************************;*
   671                                  ; BLOCK DRIVERS 	      ;*
   672                                  ;*****************************;*
   673                                  
   674                                  ; IOCTL SUB-FUNCTIONS
   675                                  IOCTL_GET_DEVICE_INFO	EQU	0
   676                                  IOCTL_SET_DEVICE_INFO	EQU	1
   677                                  IOCTL_READ_HANDLE	EQU	2
   678                                  IOCTL_WRITE_HANDLE	EQU	3
   679                                  IOCTL_READ_DRIVE	EQU	4
   680                                  IOCTL_WRITE_DRIVE	EQU	5
   681                                  IOCTL_GET_INPUT_STATUS	EQU	6
   682                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   683                                  IOCTL_CHANGEABLE?	EQU	8
   684                                  IOCTL_DeviceLocOrRem?	EQU	9
   685                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   686                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   687                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   688                                  GENERIC_IOCTL		EQU	0Dh   ;13
   689                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   690                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   691                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   692                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   693                                  
   694                                  ; GENERIC IOCTL SUB-FUNCTIONS
   695                                  RAWIO			EQU	8
   696                                  
   697                                  ; RAWIO SUB-FUNCTIONS
   698                                  GET_DEVICE_PARAMETERS	EQU	60H
   699                                  SET_DEVICE_PARAMETERS	EQU	40H
   700                                  READ_TRACK		EQU	61H
   701                                  WRITE_TRACK		EQU	41H
   702                                  VERIFY_TRACK		EQU	62H
   703                                  FORMAT_TRACK		EQU	42H
   704                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   705                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   706                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   707                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   708                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   709                                  
   710                                  
   711                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   712                                  BUILD_DEVICE_BPB	EQU	000000001B
   713                                  
   714                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   715                                  INSTALL_FAKE_BPB	EQU	000000001B
   716                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   717                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   718                                  
   719                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   720                                  STATUS_FOR_FORMAT	EQU	000000001B
   721                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   722                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   723                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   724                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   725                                  
   726                                  ; DEVICETYPE VALUES
   727                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   728                                  DEV_5INCH		EQU	0
   729                                  DEV_5INCH96TPI		EQU	1
   730                                  DEV_3INCH720KB		EQU	2
   731                                  DEV_8INCHSS		EQU	3
   732                                  DEV_8INCHDS		EQU	4
   733                                  DEV_HARDDISK		EQU	5
   734                                  DEV_OTHER		EQU	7
   735                                  ;DEV_3INCH1440KB	EQU	7
   736                                  DEV_3INCH2880KB		EQU	9
   737                                  ; Retro DOS v2.0 - 26/03/2018
   738                                  ;;DEV_TAPE		EQU	6
   739                                  ;;DEV_ERIMO		EQU	8
   740                                  ;DEV_3INCH2880KB	EQU	9
   741                                  DEV_3INCH1440KB		EQU	10
   742                                  
   743                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   744                                  					; CURRENTLY SUPPORT.
   745                                  MAX_DEV_TYPE		EQU	10
   746                                  
   747                                  struc A_SECTORTABLE
   748 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   749 00000002 ????                    .ST_SECTORSIZE:		resw	1
   750                                  .size:
   751                                  endstruc
   752                                  
   753                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
   754                                  
   755                                  ; MSDOS 6.0 - BPB.INC - 1991
   756                                  ; ####
   757                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   758                                  ;
   759                                  ;	The BPB contains information about the disk structure.  It dates
   760                                  ;	back to the earliest FAT systems and so FAT information is
   761                                  ;	intermingled with physical driver information.
   762                                  ;
   763                                  ;	A boot sector contains a BPB for its device; for other disks
   764                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   765                                  ;	information in the DPB.
   766                                  ;
   767                                  ;	The BDS structure contains a BPB within it.
   768                                  
   769                                  ; 01/01/2024
   770                                  %if 0
   771                                  
   772                                  struc A_BPB
   773                                  .BPB_BYTESPERSECTOR:	resw	1
   774                                  .BPB_SECTORSPERCLUSTER:	resb	1
   775                                  .BPB_RESERVEDSECTORS:	resw	1
   776                                  .BPB_NUMBEROFFATS:	resb	1
   777                                  .BPB_ROOTENTRIES: 	resw	1
   778                                  .BPB_TOTALSECTORS:	resw	1
   779                                  .BPB_MEDIADESCRIPTOR:	resb	1
   780                                  .BPB_SECTORSPERFAT:	resw	1
   781                                  .BPB_SECTORSPERTRACK:	resw	1
   782                                  .BPB_HEADS:		resw	1
   783                                  .BPB_HIDDENSECTORS:	resw	1
   784                                  			resw	1
   785                                  .BPB_BIGTOTALSECTORS:	resw	1
   786                                  			resw	1
   787                                  			resb	6	; NOTE:  many times these
   788                                  ;					; 	 6 bytes are omitted
   789                                  ;					;	 when BPB manipulations
   790                                  ;					;	 are performed!
   791                                  .size:
   792                                  endstruc
   793                                  
   794                                  %else
   795                                  
   796                                  ; 14/04/2024
   797                                  ; 01/01/2024 - Retro DOS v5.0
   798                                  
   799                                  struc A_BPB
   800 00000000 ????                    .BYTESPERSECTOR:    resw 1
   801 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   802 00000003 ????                    .RESERVEDSECTORS:   resw 1
   803 00000005 ??                      .NUMBEROFFATS:	    resb 1
   804 00000006 ????                    .ROOTENTRIES:	    resw 1
   805 00000008 ????                    .TOTALSECTORS:	    resw 1
   806 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   807 0000000B ????                    .SECTORSPERFAT:	    resw 1
   808 0000000D ????                    .SECTORSPERTRACK:   resw 1
   809 0000000F ????                    .HEADS:		    resw 1
   810 00000011 ????????                .HIDDENSECTORS:	    resd 1
   811 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   812                                  ;............ FAT32 ......  + 28
   813 00000019 ????????                .FATSIZE32:	    resd 1
   814 0000001D ????                    .EXTFLAGS:	    resw 1
   815 0000001F ????                    .FSVER:		    resw 1
   816 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   817 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   818 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   819 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   820                                  		; 14/04/2024
   821 00000035 ????????????            		    resb 6  ; A_BPB.size must be 59
   822                                  .size:
   823                                  endstruc
   824                                  
   825                                  %endif
   826                                  
   827                                  struc A_DEVICEPARAMETERS
   828 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   829 00000001 ??                      .DP_DEVICETYPE:		resb	1
   830 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   831 00000004 ????                    .DP_CYLINDERS:		resw	1
   832 00000006 ??                      .DP_MEDIATYPE:		resb	1
   833 00000007 <res 3Bh>               .DP_BPB:		resb	A_BPB.size
   834 00000042 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   835 00000044 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   836                                  endstruc
   837                                  
   838                                  struc A_TRACKREADWRITEPACKET
   839 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   840 00000001 ????                    .TRWP_HEAD:		resw	1
   841 00000003 ????                    .TRWP_CYLINDER:		resw	1
   842 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   843 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   844 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   845                                  endstruc
   846                                  
   847                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   848                                  struc A_FORMATPACKET
   849 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   850 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   851 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   852 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   853                                  endstruc
   854                                  
   855                                  struc A_VERIFYPACKET
   856 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   857 00000001 ????                    .VP_HEAD: 		resw	1
   858 00000003 ????                    .VP_CYLINDER:		resw	1
   859                                  endstruc
   860                                  
   861                                  struc A_MEDIA_ID_INFO
   862 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   863 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   864 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   865 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   866                                  endstruc
   867                                  
   868                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   869 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   870 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   871                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   872                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   873                                  
   874                                  
   875                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   876 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   877 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   878 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   879 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   880                                  endstruc
   881                                  
   882                                  ;********************************;*
   883                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   884                                  ;********************************;*
   885                                  
   886                                  ;RAWIO SUB-FUNCTIONS
   887                                  GET_RETRY_COUNT 	EQU	65H
   888                                  SET_RETRY_COUNT 	EQU	45H
   889                                  
   890                                  struc A_RETRYCOUNT
   891 00000000 ????                    .RC_COUNT:		resw 1
   892                                  endstruc
   893                                  
   894                                  ;********************************;*		;J.K. 4/29/86
   895                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   896                                  ;********************************;*		;J.K. 4/29/86
   897                                  ;
   898                                  ;SC_MODE_INFO	 struc
   899                                  ;SC_INFO_LENGTH 	 DW	 9
   900                                  ;SC_MODE		 DB	 0
   901                                  ;SC_COLORS		 DW	 0
   902                                  ;SC_WIDTH		 DW	 0
   903                                  ;SC_LENGTH		 DW	 0
   904                                  ;SC_MODE_INFO	 ends
   905                                  ;
   906                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   907                                  
   908                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   909                                  ;GET_SC_MODE		 EQU	 60h
   910                                  ;SET_SC_MODE		 EQU	 40h
   911                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   912                                  ;console devices. - J.K. 4/29/86
   913                                  ;Get_active_codepage	 equ	 6Ah
   914                                  ;Invoke_active_codepage  equ	 4Ah
   915                                  ;Start_designate_codepage equ	 4Ch
   916                                  ;End_designate_codepage  equ	 4Dh
   917                                  ;Get_list_of_designated_codepage equ 6Bh
   918                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   919                                  
   920                                  ;-----------------------------------------------------------------------------
   921                                  ; MULT.INC - MSDOS 6.0 - 1991
   922                                  ;-----------------------------------------------------------------------------
   923                                  ; 18/03/2019
   924                                  
   925                                  ; The current set of defined multiplex channels is (* means documented):
   926                                  ;
   927                                  ;   Channel(h)  Issuer          Receiver    Function
   928                                  ;      00       server          PSPRINT     print job control
   929                                  ;     *01       print/apps      PRINT       Queueing of files
   930                                  ;      02       BIOS            REDIR       signal open/close of printers
   931                                  ;
   932                                  ;      05       command         REDIR       obtain text of net int 24 message
   933                                  ;     *06       server/assign   ASSIGN      Install check
   934                                  ;
   935                                  ;      08       external driver IBMBIO      interface to internal routines
   936                                  ;
   937                                  ;      10       sharer/server   Sharer      install check
   938                                  ;      11       DOS/server      Redir       install check/redirection funcs
   939                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   940                                  ;      13       MSNET           MSNET       movement of NCBs
   941                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   942                                  ;                                           of alternative INT_13 drivers after
   943                                  ;                                           boot_up
   944                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   945                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   946                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   947                                  ;      16       WIN386          WIN386      Windows communications
   948                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   949                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   950                                  ;      19       Shell
   951                                  ;      1A       Ansi.sys
   952                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   953                                  ;
   954                                  ;      40h      OS/2
   955                                  ;      41h      Lanman
   956                                  ;      42h      Lanman
   957                                  ;      43h      Himem
   958                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   959                                  ;                               AL = 30h    reserved for Himem external A20 code
   960                                  ;      44h      Dosextender
   961                                  ;      45H      Windows profiler
   962                                  ;      46h      Windows/286 DOS extender
   963                                  ;      47h      Basic Compiler Vn. 7.0
   964                                  ;      48h      Doskey
   965                                  ;      49h      DOS 5.x install 
   966                                  ;      4Ah      Multi Purpose
   967                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   968                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   969                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   970                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   971                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   972                                  ;
   973                                  ;                multSmartdrv           10h
   974                                  ;                multMagicdrv           11h
   975                                  ;      4Bh      Task Switcher API
   976                                  ;
   977                                  ;      4Ch      APPS            APM             Advanced power management
   978                                  ;      4Dh      Kana Kanji Converter, MSKK
   979                                  ;
   980                                  ;      51h      ODI real mode support driver (for Chicago)
   981                                  ;
   982                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   983                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   984                                  ;
   985                                  ;      55h      COMMAND.COM
   986                                  ;                multCOMFIRST           0 - API to determine whether 1st
   987                                  ;                                           instance of command.com
   988                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   989                                  ;                                           instance of ROM COMMAND
   990                                  ;      56h      Sewell Development
   991                                  ;               INTERLNK
   992                                  ;
   993                                  ;      57h      Iomega Corp.
   994                                  ;
   995                                  ;      AB       Unspecified IBM use
   996                                  ;      AC       Graphics
   997                                  ;      AD       NLS (toronto)
   998                                  ;      AE
   999                                  ;      AF       Mode
  1000                                  ;      B0       GRAFTABL        GRAFTABL
  1001                                  ;
  1002                                  ;      D7       Banyan VINES
  1003                                  
  1004                                  multMULT	  equ	4Ah
  1005                                  
  1006                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
  1007                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
  1008                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
  1009                                  multMULTTASKSHELL equ	5	; Shell/switcher API
  1010                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
  1011                                  
  1012                                  ;-----------------------------------------------------------------------------
  1013                                  ; WIN386.INC - MSDOS 6.0 - 1991
  1014                                  ;-----------------------------------------------------------------------------
  1015                                  ; 18/03/2019
  1016                                  
  1017                                  ; WIN386.INC
  1018                                  ;
  1019                                  ;  Symbols and structures relating to WIN386 support.
  1020                                  ;
  1021                                  ;  Used by files in both the DOS and the BIOS.
  1022                                  ;
  1023                                  ;  Created: 7-13-89 by MRW
  1024                                  ;
  1025                                  
  1026                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  1027                                  
  1028                                  MultWin386		equ     16h	; Int 2f multiplex number
  1029                                  
  1030                                  Win386_Init		equ	05h	; Win386 initialization
  1031                                  Win386_Exit		equ	06h	; Win386 exit
  1032                                  Win386_Devcall		equ	07h	; Win386 device call out
  1033                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  1034                                  
  1035                                  ; ============================================================================
  1036                                  
  1037                                  ;-----------------------------------------------------------------------------
  1038                                  ;
  1039                                  ; +-------------------------------------------------------------------------+
  1040                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
  1041                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
  1042                                  ; |			 Licensed to: Freeware version			    |
  1043                                  ; +-------------------------------------------------------------------------+
  1044                                  ;
  1045                                  ;-----------------------------------------------------------------------------
  1046                                  
  1047                                  ;		.386
  1048                                  ;		.model flat
  1049                                  
  1050                                  ; ============================================================================
  1051                                  
  1052                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1053                                  ; 10/12/2022
  1054                                  ; 09/12/2022
  1055                                  ; 21/10/2022
  1056                                  ; 19/10/2022
  1057                                  ; 17/10/2022, 18/10/2022
  1058                                  ; 15/10/2022, 16/10/2022
  1059                                  ; 03/10/2022
  1060                                  ; 02/10/2022
  1061                                  ; 01/10/2022 - Erdogan Tan
  1062                                  
  1063                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
  1064                                  
  1065                                  ;-----------------------------------------------------------------------------
  1066                                  ; Start of PC-DOS 7.1 IBMBIO.COM  (IO.SYS)
  1067                                  ;-----------------------------------------------------------------------------
  1068                                  
  1069                                  		; [ORG 0]		; segment 0x0070h
  1070                                  
  1071                                  ;=============================================================================
  1072                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  1073                                  ;=============================================================================
  1074                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  1075                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  1076                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  1077                                  
  1078                                  section .BIOSDATA vstart=0
  1079                                  
  1080                                  ;--- DOSBIOS data segment ----------------------------------------------------
  1081                                  ;-----------------------------------------------------------------------------
  1082                                  
  1083                                  ;Bios_Data segment
  1084                                  
  1085                                  BData_start:
  1086 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  1087                                  ; ----------------------------------------------------------------------------
  1088                                  
  1089 00000003 0000                    DosDataSg:	dw 0
  1090                                  
  1091                                  ; DOS's int 2f handler will exit via a jump through here.
  1092                                  ; This is how the BIOS hooks int2f
  1093                                  
  1094                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  1095                                  			
  1096 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  1097                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1098                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  1099                                  		;dw int_2f
  1100                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  1101 00000006 [2B16]                  		dw i2f_handler
  1102                                  bios_i2f_seg:	; 10/08/2023
  1103 00000008 0203                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  1104                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  1105                                  
  1106 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  1107                                  					; This is to maintain binary compatibility
  1108                                  					; with DISK based DOS 5.0
  1109                                  
  1110                                  ; This is a byte used for special key handling in the resident
  1111                                  ; console device driver. It must be here so that it can be included
  1112                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  1113                                  
  1114 0000000C 00                      altah:		db 0			; special key handling
  1115                                  			
  1116 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  1117 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  1118                                  
  1119                                  ; PTRSAV - pointer save
  1120                                  ;
  1121                                  ; This variable holds the pointer to the Request Header passed by a program
  1122                                  ; wishing to use a device driver. When the strategy routine is called it 
  1123                                  ; puts the address of the Request header in this variable and returns.
  1124                                  		
  1125 00000012 00000000                ptrsav:		dd 0			
  1126                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  1127 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  1128 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  1129 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  1130 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  1131 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  1132 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  1133                                  
  1134                                  ;-----------------------------------------------------------------------------
  1135                                  
  1136                                  res_dev_list:
  1137                                  
  1138                                  ; Device Header for the CON Device Driver
  1139                                  
  1140                                  CONHeader:				; HEADER FOR DEVICE "CON"
  1141 00000023 [3500]                  		dw auxdev2
  1142 00000025 7000                    		dw 70h	
  1143 00000027 1380                    word_727:	dw 8013h
  1144 00000029 [1506]                  		dw strategy
  1145 0000002B [2006]                  		dw con_entry
  1146 0000002D 434F4E2020202020        aCon:		db 'CON     '
  1147 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  1148 00000037 7000                    		dw 70h
  1149 00000039 0080                    		dw 8000h
  1150 0000003B [1506]                  		dw strategy
  1151 0000003D [4106]                  		dw aux0_entry
  1152 0000003F 4155582020202020        aAux:		db 'AUX     '
  1153 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  1154 00000049 7000                    		dw 70h
  1155 0000004B C0A0                    word_74B:	dw 0A0C0h
  1156 0000004D [1506]                  		dw strategy
  1157 0000004F [2506]                  		dw prn0_entry
  1158 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  1159 00000059 [6B00]                  timdev:		dw dskdev
  1160 0000005B 7000                    		dw 70h
  1161 0000005D 0880                    		dw 8008h
  1162 0000005F [1506]                  		dw strategy
  1163 00000061 [5906]                  		dw tim_entry
  1164 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  1165 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  1166 0000006D 7000                    		dw 70h
  1167                                  		;dw 8C2h
  1168                                  		; 02/10/2023 - Retro DOS v5.0
  1169 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  1170                                  		;dw offset strategy
  1171                                  		;dw offset dsk_entry
  1172                                  		; 19/10/2022
  1173 00000071 [1506]                  		dw strategy
  1174 00000073 [5E06]                  		dw dsk_entry
  1175                                  
  1176                                  ; maximum number of drives
  1177                                  
  1178 00000075 04                      drvmax:		db 4
  1179 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  1180 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  1181                                  					; 96tpi support		
  1182 00000078 00                      single:		db 0			; used to detect single drive systems
  1183 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  1184                                  					; used by console driver.
  1185 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  1186                                  					; drive. (examined by checksingle).
  1187                                  		
  1188 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  1189 0000007D 7000                    		dw 70h
  1190 0000007F 0080                    		dw 8000h
  1191 00000081 [1506]                  		dw strategy
  1192 00000083 [4106]                  		dw aux0_entry
  1193 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  1194 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  1195 0000008F 7000                    		dw 70h
  1196 00000091 C0A0                    		dw 0A0C0h
  1197 00000093 [1506]                  		dw strategy
  1198 00000095 [2C06]                  		dw prn1_entry
  1199 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1200 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  1201 000000A1 7000                    		dw 70h
  1202 000000A3 C0A0                    		dw 0A0C0h
  1203 000000A5 [1506]                  		dw strategy
  1204 000000A7 [3306]                  		dw prn2_entry
  1205 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1205 000000B2 0000               
  1206                                  
  1207                                  ;M058; Start of changes
  1208                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1209                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1210                                  ;cannot change for them to work. Even ProComm does this.
  1211                                  
  1212 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  1213                                  
  1214 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1215 000000BA 7000                    		dw 70h
  1216 000000BC C0A0                    		dw 0A0C0h
  1217 000000BE [1506]                  		dw strategy
  1218 000000C0 [3A06]                  		dw prn3_entry
  1219 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1220 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1221 000000CC 7000                    		dw 70h
  1222 000000CE 0080                    		dw 8000h
  1223 000000D0 [1506]                  		dw strategy
  1224 000000D2 [4706]                  		dw aux1_entry
  1225                                  		; 19/10/2022
  1226 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1227                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1228 000000DC [EE00]                  		dw com4dev
  1229 000000DE 7000                    		dw 70h
  1230 000000E0 0080                    		dw 8000h
  1231                                  		;dw offset strategy
  1232                                  		;dw offset aux2_entry
  1233 000000E2 [1506]                  		dw strategy
  1234 000000E4 [4D06]                  		dw aux2_entry	
  1235 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1236 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  1237 000000F0 7000                    		dw 70h
  1238 000000F2 0080                    		dw 8000h
  1239 000000F4 [1506]                  		dw strategy
  1240 000000F6 [5306]                  		dw aux3_entry
  1241 000000F8 434F4D3420202020        		db 'COM4    '
  1242                                  
  1243                                  ;-----------------------------------------------------------------------------
  1244                                  
  1245 00000100 10                      RomVectors:	db 10h			
  1246 00000101 00000000                Old10:		dd 0
  1247 00000105 13                      		db 13h
  1248 00000106 00000000                Old13:		dd 0			
  1249 0000010A 15                      		db 15h
  1250 0000010B 00000000                Old15:		dd 0			
  1251 0000010F 19                      		db 19h
  1252 00000110 00000000                Old19:		dd 0
  1253 00000114 1B                      		db 1Bh
  1254 00000115 00000000                Old1B:		dd 0
  1255                                  
  1256                                  ;EndRomVectors	equ $
  1257                                  
  1258                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1259                                  
  1260                                  ;-----------------------------------------------------------------------------
  1261                                  
  1262 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1263 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1264                                  
  1265                                  ; (MSDOS 3.3) NOTE:
  1266                                  ; Some floppy drives do not have changeline support. The result is a
  1267                                  ; large amount of inefficiency in the code. A media-check always returns
  1268                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1269                                  ; always discard any cached data.
  1270                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1271                                  ; The following three items are used to do this. The logical door latch is
  1272                                  ; based on the premise that it is not physically possible to change floppy
  1273                                  ; disks in a drive in under two seconds (most people take about 10). The
  1274                                  ; logical door latch is implemented by saving the time of the last successful
  1275                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1276                                  ; current time is compared to the saved time. If less than two seconds have
  1277                                  ; passed then the value "No Change" is returned. If more than two seconds
  1278                                  ; have passed the value "Don't Know" is returned.
  1279                                  ;    There is one complecation to this algorithm. Some programs change the
  1280                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1281                                  ; This possibility is detected by counting the number of disk operations
  1282                                  ; which occur without any time passing. If this count exceeds the value of
  1283                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1284                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1285                                  ; of disk operation which occur without the time changing.
  1286                                  
  1287 0000011D 00                      accesscount:	db 0			
  1288 0000011E FF                      tim_drv:	db 0FFh			
  1289 0000011F 00                      medbyt:		db 0
  1290                                  wrtverify:	; 15/10/2022			
  1291 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1292 00000121 00                      verify:		db 0			; 1 if verify after write
  1293 00000122 0000                    seccnt:		dw 0			
  1294 00000124 00                      		db 0			; -- pad where hardnum was
  1295 00000125 01                      dsktnum:	db 1			; number of diskette drives
  1296                                  
  1297                                  ; (MSDOS 3.3) NOTE:
  1298                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1299                                  ; have to be made to read the diskette. Consequently a large head settle
  1300                                  ; time was always used in the I/O operations. To get around this problem
  1301                                  ; we need to continually adjust the head settle time. The following
  1302                                  ; algorithm is used:
  1303                                  ;
  1304                                  ;   Get the current head settle value.
  1305                                  ;   If it is 1, then
  1306                                  ;	set slow = 15
  1307                                  ;   else
  1308                                  ;	set slow = value
  1309                                  ;   ...
  1310                                  ;   if we are seeking and writing then
  1311                                  ;	use slow
  1312                                  ;   else
  1313                                  ;	use fast
  1314                                  ;   ...
  1315                                  ;   restore current head settle value
  1316                                  
  1317 00000126 00                      motorstartup:	db 0			; value from table
  1318 00000127 00                      settlecurrent:	db 0			; value from table
  1319 00000128 00                      settleslow:	db 0			; slow settle value
  1320 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1321 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1322 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1323 0000012C 09                      eot:		db 9			
  1324 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1325 00000131 00                      cursec:		db 0			; current sector
  1326 00000132 00                      curhd:		db 0			; current head
  1327 00000133 0000                    curtrk:		dw 0			; current track
  1328 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1329 00000137 08                      formt_eot:	db 8			; eot used for format
  1330 00000138 00                      hdnum:		db 0			; head number
  1331 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1332 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1333                                  
  1334                                  ;-----------------------------------------------------------------------------
  1335                                  
  1336                                  ; disk errors returned from the IBM rom
  1337                                  
  1338 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  1339 0000013D 80                      		db 80h			; write fault (hard disk)
  1340 0000013E 40                      		db 40h			; seek failed
  1341 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  1342 00000140 08                      		db 8			; dma overrun
  1343 00000141 06                      		db 6			; disk changed (floppy)
  1344 00000142 04                      		db 4			; sector not found/read error
  1345 00000143 03                      		db 3			; disk write-protected
  1346                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  1347 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  1348 00000145 B2                      		db 0B2h			; volume not removable	
  1349                                  		;
  1350 00000146 00                      lsterr:		db 0			; all other errors
  1351                                  
  1352                                  ; returned error codes corresponding to above
  1353                                  
  1354 00000147 0A                      errout:		db 10			; write	fault error
  1355 00000148 02                      		db 2			; no response (timeout)
  1356 00000149 06                      		db 6			; seek failure
  1357 0000014A 04                      		db 4			; bad crc
  1358 0000014B 04                      		db 4			; dma overrun
  1359 0000014C 0F                      		db 15			; invalid media	change
  1360 0000014D 08                      		db 8			; sector not found
  1361 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  1362                                  		; 02/10/2023
  1363 0000014F 03                      		db 3			; unknown command error
  1364 00000150 03                      		db 3			; unknown command error
  1365                                  		;
  1366 00000151 0C                      		db 12			; general error
  1367                                  
  1368                                  ;-----------------------------------------------------------------------------
  1369                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  1370                                  
  1371                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1372                                  %if 1
  1373                                  disksector:	;times 174 db 0
  1374                                  NUM174 equ 512-$
  1375 00000152 00<rep AEh>             		times NUM174 db 0
  1376                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  1377 00000200 4A                      		dec	dx
  1378 00000201 42                      		inc	dx	
  1379 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  1380                                  
  1381 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  1381 0000020E 30312E323030332E62-
  1381 00000217 75696C645F312E3332-
  1381 00000220 23402049424D42494F-
  1381 00000229 2E434F4D2855534129-
  1381 00000232 00                 
  1382                                  		
  1383                                  		;times 287 db 0
  1384 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  1385                                  %endif
  1386                                  
  1387                                  ;-----------------------------------------------------------------------------
  1388                                  
  1389                                  ; 30/12/2018 - Retro DOS v4.0
  1390                                  
  1391                                  ; read in boot sector here, read done in readboot.
  1392                                  ; also read sector for dma check for hard disk.
  1393                                  ;
  1394                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1395                                  ; in them which causes the byte after the buffer to be trashed
  1396                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1397                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1398                                  ; makes that system more-or-less work.
  1399                                  
  1400                                  ; 02/10/2023
  1401                                  %if 0
  1402                                  
  1403                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1404                                  		; 19/10/2022
  1405                                  		times 512 db 0
  1406                                  %endif
  1407                                  
  1408                                  ;-----------------------------------------------------------------------------
  1409                                  
  1410                                  ; 02/10/2023 - Retro DOS v5.0
  1411                                  ; 30/12/2018 - Retro DOS v4.0
  1412                                  ;-----------------------------------------------------------------------------
  1413                                  ; 25/05/2018 (04/04/2018)
  1414                                  ;*****************************************************************************
  1415                                  ;	"bds" contains information for each drive in the system.
  1416                                  ;	various values are patched whenever actions are performed.
  1417                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1418                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1419                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1420                                  ;	that the parameters have not been set.
  1421                                  
  1422                                  bds1:		;dw offset bds2
  1423 00000352 [E803]                  		dw bds2	; 19/10/2022
  1424 00000354 7000                    		dw 70h			; dword	link to	next structure
  1425 00000356 00                      		db 0			; int 13h drive	number
  1426 00000357 00                      		db 0			; logical drive	letter
  1427 00000358 0002                    fdrive1:	dw 512			
  1428                                  					; physical sector size in bytes
  1429 0000035A FF                      		db 0FFh			; sectors/allocation unit
  1430 0000035B 0100                    		dw 1			; reserved sectors for dos
  1431 0000035D 02                      		db 2			; no of	file allocation	tables
  1432 0000035E 4000                    		dw 64			; number of root directory entries
  1433 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  1434 00000362 00                      		db 0			; media	descriptor, initially 0
  1435 00000363 0200                    		dw 2			; number of fat	sectors
  1436 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  1437 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  1438                                  		;
  1439                                  		; 02/10/2023
  1440                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  1441                                  		;dw 0			; hidden sector	count (low word)
  1442                                  		;dw 0			; hidden sector	(high)
  1443                                  		;dw 0			; number sectors (low)
  1444                                  		;dw 0			; number sectors (high)
  1445                                  		;db 0			; true => large	fats
  1446                                  		; 02/10/2023
  1447                                  		; PCDOS 7.1 (FAT32 support)
  1448 00000369 00000000                		dd 0			; hidden sector count
  1449 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  1450 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  1451                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  1452                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  1453                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  1454                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  1455 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  1456 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  1457 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  1458 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  1459 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  1460 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  1461 0000038D 00                      		db 0			; true => large	fats
  1462                                  		;
  1463 0000038E 0000                    		dw 0			; open ref. count
  1464 00000390 03                      		db 3			; form factor
  1465 00000391 2000                    		dw 20h			; various flags
  1466 00000393 2800                    		dw 40			; number of cylinders
  1467 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1468 00000397 01                      		db 1
  1469 00000398 0100                    		dw 1
  1470 0000039A 02                      		db 2
  1471 0000039B E000                    		dw 224			; number of root directory entries
  1472 0000039D 6801                    		dw 360
  1473 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1474 000003A0 0200                    		dw 2
  1475 000003A2 0900                    		dw 9
  1476 000003A4 0200                    		dw 2
  1477                                  		;
  1478                                  		; 02/10/2023
  1479                                  		;dw 0
  1480                                  		;dw 0
  1481                                  		;dw 0
  1482                                  		;dw 0
  1483                                  		;;db 6 dup(0)
  1484                                  		;times 6 db 0		; 19/10/2022
  1485 000003A6 00000000                		dd 0
  1486 000003AA 00000000                		dd 0
  1487 000003AE 00000000                		dd 0
  1488 000003B2 0000                    		dw 0
  1489 000003B4 0000                    		dw 0
  1490 000003B6 00000000                		dd 0
  1491 000003BA FFFF                    		dw 0FFFFh
  1492 000003BC FFFF                    		dw 0FFFFh	
  1493                                  		;db 12 dup(0)
  1494 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  1495                                  		;
  1496 000003CA FF                      		db 0FFh			; last track accessed on this drive
  1497 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1498 000003CD FFFF                    		dw 0FFFFh
  1499 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1499 000003D8 202000             
  1500 000003DB 00000000                		dd 0			; current volume serial	from boot record
  1501 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1502                                  ; ----
  1503                                  
  1504                                  ; 02/10/2023
  1505                                  ; PCDOS 7.1
  1506                                  %if 1
  1507                                  
  1508                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1509 000003E8 FFFF                    		dw 0FFFFh ; -1
  1510 000003EA 7000                    		dw 70h
  1511 000003EC 00                      		db 0
  1512 000003ED 00                      		db 0
  1513 000003EE 0002                    fdrive2:	dw 512
  1514 000003F0 FF                      		db 0FFh
  1515 000003F1 0100                    		dw 1
  1516 000003F3 02                      		db 2
  1517 000003F4 4000                    		dw 64
  1518 000003F6 6801                    		dw 360
  1519 000003F8 00                      		db 0
  1520 000003F9 0200                    		dw 2
  1521 000003FB 0900                    		dw 9
  1522 000003FD 0100                    		dw 1
  1523 000003FF 00000000<rep 5h>        		times 5 dd 0
  1524 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  1525 00000417 00000000<rep 3h>        		times 3 dd 0
  1526 00000423 00                      		db 0
  1527 00000424 0000                    		dw 0
  1528 00000426 03                      		db 3
  1529 00000427 2000                    		dw 20h
  1530 00000429 2800                    		dw 40
  1531                                  recbpb2:
  1532 0000042B 0002                    		dw 512
  1533 0000042D 01                                      db 1
  1534 0000042E 0100                                    dw 1
  1535 00000430 02                                      db 2
  1536 00000431 E000                                    dw 224
  1537 00000433 6801                                    dw 360
  1538 00000435 F0                                      db 0F0h
  1539 00000436 0200                                    dw 2
  1540 00000438 0900                                    dw 9
  1541 0000043A 0200                                    dw 2
  1542 0000043C 00000000<rep 5h>        		times 5 dd 0
  1543 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  1544 00000454 00000000<rep 3h>                        times 3 dd 0
  1545 00000460 FF                                      db 0FFh
  1546 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  1547 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  1547 0000046E 202000             
  1548 00000471 00000000                                dd 0
  1549 00000475 464154313220202000                      db 'FAT12   ',0
  1550                                  %endif
  1551                                  
  1552                                  ; ----
  1553                                  
  1554                                  ; 02/10/2023
  1555                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  1556                                  %if 0
  1557                                  
  1558                                  bds2:		dw bds3
  1559                                  		dw 70h
  1560                                  		db 0
  1561                                  		db 0
  1562                                  fdrive2:	dw 512			
  1563                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1564                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1565                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1566                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1567                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1568                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1569                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1570                                  
  1571                                  bds3:		dw bds4
  1572                                  		dw 70h
  1573                                  		db 0
  1574                                  		db 0
  1575                                  fdrive3:	dw 512			
  1576                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1577                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1578                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1579                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1580                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1581                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1582                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1583                                  ; ----
  1584                                  
  1585                                  bds4:		dw 0FFFFh
  1586                                  		dw 70h
  1587                                  		db 0
  1588                                  		db 0
  1589                                  fdrive4:	dw 512			
  1590                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1591                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1592                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1593                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1594                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1595                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1596                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1597                                  
  1598                                  ;-----------------------------------------------------------------------------
  1599                                  
  1600                                  sm92:		db 3			; .spf
  1601                                  		db 9			; .spt
  1602                                  		db 112	; 70h		; .cdire
  1603                                  		dw 1440	; 2*9*80	; .csec
  1604                                  		db 2			; .spau
  1605                                  		db 2			; .chead
  1606                                  
  1607                                  %endif
  1608                                  
  1609 0000047E 00                      keyrd_func:	db 0			
  1610 0000047F 01                      keysts_func:	db 1			
  1611 00000480 00                      printdev:	db 0			; printer device index
  1612                                  
  1613                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1614 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1615                                  
  1616 00000489 0000                    daycnt:		dw 0			
  1617 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  1618 0000048C 00                      havecmosclock:	db 0			
  1619 0000048D 13                      base_century:	db 19			
  1620 0000048E 50                      base_year:	db 80			
  1621                                  
  1622 0000048F 1F                      month_tab:	db 31
  1623 00000490 1C                      february:	db 28 ; 08/08/2023
  1624 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1624 0000049A 1F                 
  1625                                  
  1626                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1627                                  %if 0  
  1628                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1629                                  		dw 70h ; 17/10/2022	
  1630                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1631                                  		dw 70h ; 17/10/2022
  1632                                  %endif
  1633                                  
  1634 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  1635                                  
  1636                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1637                                  ;fat_12_id:	db 'FAT12   ',0         
  1638                                  ;fat_16_id:	db 'FAT16   ',0         
  1639                                  ;vol_no_name:	db 'NO NAME    ',0      
  1640                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  1641                                  
  1642 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  1643 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  1644 000004A0 0000                    multrk_flag:	dw 0			
  1645 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1646 000004A3 0000                    vretry_cnt:	dw 0			
  1647 000004A5 0000                    soft_ecc_cnt:	dw 0			
  1648 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1649 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1650                                  
  1651                                  ; variables for msdioctl.asm module
  1652                                  
  1653                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1654                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1655                                  ;	n	bytes per sector
  1656                                  ;      ---	----------------
  1657                                  ;	0	      128
  1658                                  ;	1	      256
  1659                                  ;	2	      512
  1660                                  ;	3	     1024
  1661                                  
  1662                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1663                                  ;					; we support (was 40 in dos 3.2)
  1664                                  
  1665 000004AA 2400                    sectorspertrack: dw 36
  1666 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  1667 000004B0 00000202                		db 0, 0, 2, 2
  1668 000004B4 00000302                		db 0, 0, 3, 2
  1669 000004B8 00000402                		db 0, 0, 4, 2
  1670 000004BC 00000502                		db 0, 0, 5, 2
  1671 000004C0 00000602                		db 0, 0, 6, 2
  1672 000004C4 00000702                		db 0, 0, 7, 2
  1673 000004C8 00000802                		db 0, 0, 8, 2
  1674 000004CC 00000902                		db 0, 0, 9, 2
  1675 000004D0 00000A02                		db 0, 0, 10, 2
  1676 000004D4 00000B02                		db 0, 0, 11, 2
  1677 000004D8 00000C02                		db 0, 0, 12, 2
  1678 000004DC 00000D02                		db 0, 0, 13, 2
  1679 000004E0 00000E02                		db 0, 0, 14, 2
  1680 000004E4 00000F02                		db 0, 0, 15, 2
  1681 000004E8 00001002                		db 0, 0, 16, 2
  1682 000004EC 00001102                		db 0, 0, 17, 2
  1683 000004F0 00001202                		db 0, 0, 18, 2
  1684 000004F4 00001302                		db 0, 0, 19, 2
  1685 000004F8 00001402                		db 0, 0, 20, 2
  1686 000004FC 00001502                		db 0, 0, 21, 2
  1687 00000500 00001602                		db 0, 0, 22, 2
  1688 00000504 00001702                		db 0, 0, 23, 2
  1689 00000508 00001802                		db 0, 0, 24, 2
  1690 0000050C 00001902                		db 0, 0, 25, 2
  1691 00000510 00001A02                		db 0, 0, 26, 2
  1692 00000514 00001B02                		db 0, 0, 27, 2
  1693 00000518 00001C02                		db 0, 0, 28, 2
  1694 0000051C 00001D02                		db 0, 0, 29, 2
  1695 00000520 00001E02                		db 0, 0, 30, 2
  1696 00000524 00001F02                		db 0, 0, 31, 2
  1697 00000528 00002002                		db 0, 0, 32, 2
  1698 0000052C 00002102                		db 0, 0, 33, 2
  1699 00000530 00002202                		db 0, 0, 34, 2
  1700 00000534 00002302                		db 0, 0, 35, 2
  1701 00000538 00002402                		db 0, 0, 36, 2
  1702                                  
  1703                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1704                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  1705                                  
  1706                                  		;times 108 db 0		; 19/10/2022
  1707                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1708                                  					; times	((4*63)	- 144) db 0
  1709                                  dskdrvs:	
  1710 0000053C [5803]                  		dw fdrive1
  1711 0000053E [EE03]                  		dw fdrive2 
  1712                                  	
  1713                                  		;dw 52 dup(0)
  1714 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  1715                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  1716                                  
  1717                                  ;-----------------------------------------------------------------------------
  1718                                  
  1719                                  ; this is a real ugly place to put this
  1720                                  ; it should really go in the bds
  1721                                  
  1722 000005A8 00                      mediatype:	db 0
  1723 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1724                                  					; type for format call
  1725 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  1726                                  					; failed.
  1727                                  
  1728                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1729                                  ; the one passed by "new roms" before we perform a format operation. the old
  1730                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1731                                  ; this table does not contain the previously saved dpt.
  1732                                  		
  1733 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1734 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  1735 000005B0 00                      secondary_model_byte: db 0
  1736                                  		
  1737 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  1738                                  					; initialization is complete
  1739                                  		
  1740                                  ;; we assume the following remain contiguous and their order doesn't change
  1741                                  ;i19_lst:
  1742                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1743                                  ;	public	int19old&aa
  1744                                  ;		db	aa&h	; store the number as a byte
  1745                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1746                                  ;	endm
  1747                                  
  1748                                  ; 21/10/2022
  1749                                  
  1750 000005B2 02                      i19_lst:	db 2
  1751                                  					; Int19old&aa
  1752 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1753 000005B7 08                      		db 8
  1754 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1755 000005BC 09                      		db 9
  1756 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1757 000005C1 0A                      		db 0Ah
  1758 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1759 000005C6 0B                      		db 0Bh
  1760 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1761 000005CB 0C                      		db 0Ch
  1762 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1763 000005D0 0D                      		db 0Dh
  1764 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1765 000005D5 0E                      		db 0Eh
  1766 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1767 000005DA 70                      		db 70h
  1768 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1769 000005DF 72                      		db 72h
  1770 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1771 000005E4 73                      		db 73h
  1772 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1773 000005E9 74                      		db 74h
  1774 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1775 000005EE 76                      		db 76h
  1776 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1777 000005F3 77                      		db 77h
  1778 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1779                                  
  1780                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1781                                  
  1782                                  ;-----------------------------------------------------------------------------
  1783                                  
  1784                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1785                                  ; 
  1786                                  ;dskdrvs:	dw fdrive1
  1787                                  ;		dw fdrive2
  1788                                  ;		dw fdrive3
  1789                                  ;		dw fdrive4
  1790                                  ;
  1791                                  ;;M011 -- made all hard drive stuff variable
  1792                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  1793                                  ;		times 22 dw 0	; 19/10/2022
  1794                                  
  1795                                  ;-----------------------------------------------------------------------------
  1796                                  
  1797                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1798                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1799                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1800                                  
  1801                                  ;variables for dynamic relocatable modules
  1802                                  ;these should be stay resident.
  1803                                  
  1804 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1805                                  					; for p12 machine
  1806                                  
  1807                                  ; data structures for real-time date and time
  1808                                  			
  1809 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1810                                  
  1811                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1812                                  %if 0
  1813                                  month_table:	dw 0			; january
  1814                                  		dw 31			; february
  1815                                  		dw 59
  1816                                  		dw 90
  1817                                  		dw 120
  1818                                  		dw 151
  1819                                  		dw 181
  1820                                  		dw 212
  1821                                  		dw 243
  1822                                  		dw 273
  1823                                  		dw 304
  1824                                  		dw 334			; december
  1825                                  %endif
  1826                                  
  1827 00000600 0000                    daycnt2:	dw 0
  1828                                  ; 08/08/2023
  1829                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1830                                  
  1831                                  ;-----------------------------------------------------------------------------
  1832                                  ;
  1833                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1834                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1835                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  ;************************************************************************
  1840                                  ;*									*
  1841                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1842                                  ;*	  are plugged in by seg_reinit.					*
  1843                                  ;*									*
  1844                                  ;************************************************************************
  1845                                  
  1846                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1847                                  ; BIOSCODE_SEGMENT equ 2C7h
  1848                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1849                                  
  1850                                  ; 01/10/2022 - Erdogan Tan
  1851                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1852                                  ;  addresses, they will be changed to table labels later)
  1853                                  
  1854                                  ; 09/12/2022
  1855                                  %if 0
  1856                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1857                                  					; at 2C7h:43h =	70h:25B3h
  1858                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1859                                  					; at 2C7h:396h = 70h:2906h
  1860                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1861                                  					; at 2C7h:1302h	= 70h:3872h
  1862                                  i13x:		dw 154Bh, 2C7h		; i13z
  1863                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1864                                  %endif
  1865                                  
  1866                                  ; 30/12/2022
  1867                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1868                                  
  1869                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1870                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  1871                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  1872                                  
  1873                                  ; 09/12/2022
  1874 00000602 [4700]0203              cdev:		dw chardev_entry, IOSYSCODESEG
  1875 00000606 [A003]0203              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1876                                  ; 07/08/2023
  1877                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1878 0000060A [5718]0203              i13x:		dw i13z, IOSYSCODESEG
  1879                                  
  1880                                  end_BC_entries:	; 15/10/2022
  1881                                  
  1882                                  ;************************************************************************
  1883                                  ;*									*
  1884                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1885                                  ;*									*
  1886                                  ;************************************************************************
  1887                                  
  1888                                  cbreak:					
  1889 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1890                                  					; indicate break key set
  1891                                  intret:					
  1892 00000614 CF                      		iret
  1893                                  
  1894                                  ; =============== S U B	R O U T	I N E ========================================
  1895                                  
  1896                                  
  1897                                  ;************************************************************************
  1898                                  ;*									*
  1899                                  ;*	strategy - store es:bx (device driver request packet)		*
  1900                                  ;*		     away at [ptrsav] for next driver function call	*
  1901                                  ;*									*
  1902                                  ;************************************************************************
  1903                                  
  1904                                  strategy:	; proc far		
  1905 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1906                                  					; away at [ptrsav] for next driver function call
  1907 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1908 0000061F CB                      		retf
  1909                                  
  1910                                  ; ----------------------------------------------------------------------------
  1911                                  
  1912                                  ;************************************************************************
  1913                                  ;*									*
  1914                                  ;*	device driver entry points. these are the initial		*
  1915                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1916                                  ;*	  in the case of our resident drivers, they'll just		*
  1917                                  ;*	  stick a fake return address on the stack which		*
  1918                                  ;*	  points to dispatch tables and possibly some unit		*
  1919                                  ;*	  numbers, and then call through a common entry point		*
  1920                                  ;*	  which can take care of a20 switching				*
  1921                                  ;*									*
  1922                                  ;************************************************************************
  1923                                  
  1924                                  ; 01/10/2022 - Erdogan Tan
  1925                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1926                                  ;  addresses, they will be changed to table labels later)
  1927                                  
  1928                                  ; 09/12/2022
  1929                                  
  1930                                  ; 02/10/2023 - Retro DOS v5.0
  1931                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  1932                                  
  1933                                  con_entry:				
  1934 00000620 E84000                  		call	cdev_entry
  1935                                  ; ----------------------------------------------------------------------------
  1936                                  		;dw 0E4h		; con_table
  1937 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  1938                                  					; 2C7h:0E4h = 70h:2654h
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  prn0_entry:				
  1942 00000625 E83B00                  		call	cdev_entry
  1943                                  ; ----------------------------------------------------------------------------
  1944                                  		;dw 0FBh		; prn_table
  1945 00000628 [FB00]                  		dw prn_table
  1946                                  					; 2C7h:0FBh = 70h:266Bh
  1947 0000062A 0000                    		db 0, 0
  1948                                  ; ----------------------------------------------------------------------------
  1949                                  
  1950                                  prn1_entry:				
  1951 0000062C E83400                  		call	cdev_entry
  1952                                  ; ----------------------------------------------------------------------------
  1953                                  		;dw 0FBh		; prn_table
  1954 0000062F [FB00]                  		dw prn_table
  1955                                  					; 2C7h:0FBh = 70h:266Bh
  1956 00000631 0001                    		db 0, 1
  1957                                  ; ----------------------------------------------------------------------------
  1958                                  
  1959                                  prn2_entry:				
  1960 00000633 E82D00                  		call	cdev_entry
  1961                                  ; ----------------------------------------------------------------------------
  1962                                  		;dw 0FBh		; prn_table
  1963 00000636 [FB00]                  		dw prn_table
  1964                                  					; 2C7h:0FBh = 70h:266Bh
  1965 00000638 0102                    		db 1, 2
  1966                                  ; ----------------------------------------------------------------------------
  1967                                  
  1968                                  prn3_entry:				
  1969 0000063A E82600                  		call	cdev_entry
  1970                                  ; ----------------------------------------------------------------------------
  1971                                  		;dw 0FBh		; prn_table
  1972 0000063D [FB00]                  		dw prn_table
  1973                                  					; 2C7h:0FBh = 70h:266Bh
  1974 0000063F 0203                    		db 2, 3
  1975                                  ; ----------------------------------------------------------------------------
  1976                                  
  1977                                  aux0_entry:				
  1978 00000641 E81F00                  		call	cdev_entry
  1979                                  ; ----------------------------------------------------------------------------
  1980                                  		;dw 130h		; aux_table
  1981 00000644 [3001]                  		dw aux_table
  1982                                  					; 2C7h:130h = 70h:26A0h
  1983 00000646 00                      		db 0
  1984                                  ; ----------------------------------------------------------------------------
  1985                                  
  1986                                  aux1_entry:				
  1987 00000647 E81900                  		call	cdev_entry
  1988                                  ; ----------------------------------------------------------------------------
  1989                                  		;dw 130h		; aux_table
  1990 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  1991                                  					; 2C7h:130h = 70h:26A0h
  1992 0000064C 01                      		db 1
  1993                                  ; ----------------------------------------------------------------------------
  1994                                  
  1995                                  aux2_entry:				
  1996 0000064D E81300                  		call	cdev_entry
  1997                                  ; ----------------------------------------------------------------------------
  1998                                  		;dw 130h		; aux_table
  1999 00000650 [3001]                  		dw aux_table
  2000                                  					; 2C7h:130h = 70h:26A0h
  2001 00000652 02                      		db 2
  2002                                  ; ----------------------------------------------------------------------------
  2003                                  
  2004                                  aux3_entry:				
  2005 00000653 E80D00                  		call	cdev_entry
  2006                                  ; ----------------------------------------------------------------------------
  2007                                  		;dw 130h		; aux_table
  2008 00000656 [3001]                  		dw aux_table
  2009                                  					; 2C7h:130h = 70h:26A0h
  2010 00000658 03                      		db 3
  2011                                  ; ----------------------------------------------------------------------------
  2012                                  
  2013                                  tim_entry:				
  2014 00000659 E80700                  		call	cdev_entry
  2015                                  ; ----------------------------------------------------------------------------
  2016                                  		;dw 147h		; tim_table
  2017 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  2018                                  					; 2C7h:147h = 70h:26B7h
  2019                                  ; ----------------------------------------------------------------------------
  2020                                  
  2021                                  ; 15/10/2022
  2022                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  2023                                  ; 09/12/2022
  2024                                  DSKTBL equ dsktbl
  2025                                  
  2026                                  dsk_entry:				
  2027 0000065E E80200                  		call	cdev_entry
  2028                                  ; ----------------------------------------------------------------------------
  2029                                  		;dw 4A2h		; dsktbl
  2030 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  2031                                  					; 2C7h:4A2h = 70h:2A12h
  2032                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  2033                                  					; 364h:579h = 70h:34B9h
  2034                                  
  2035                                  ; =============== S U B	R O U T	I N E ========================================
  2036                                  
  2037                                  ;************************************************************************
  2038                                  ;*									*
  2039                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  2040                                  ;*	This code assumes that if Segment of Device request packet is	*
  2041                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  2042                                  ;*	A20 is already on.						*
  2043                                  ;*									*
  2044                                  ;************************************************************************
  2045                                  
  2046                                  cdev_entry:	; proc near		
  2047 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2048 00000669 740D                    		jz	short ce_enter_codeseg
  2049                                  				; optimized for DOS in HMA
  2050 0000066B 50                      		push	ax
  2051 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  2052 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  2053 00000675 58                      		pop	ax
  2054 00000676 7505                    		jnz	short not_from_dos
  2055                                  				; jump is coded this way to fall thru
  2056                                  				; in 99.99% of the cases
  2057                                  ce_enter_codeseg:
  2058 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  2059                                  		;jmp	dword ptr cs:cdev
  2060                                  ;-----------------------------------------------------------------------------
  2061                                  
  2062                                  not_from_dos:				
  2063 0000067D E8AA00                  		call	EnsureA20On
  2064 00000680 EBF6                    		jmp	short ce_enter_codeseg
  2065                                  
  2066                                  ;************************************************************************
  2067                                  ;*									*
  2068                                  ;*	outchr - this is our int 29h handler. it writes the		*
  2069                                  ;*	   character in al on the display using int 10h ttywrite	*
  2070                                  ;*									*
  2071                                  ;************************************************************************
  2072                                  
  2073                                  	; 17/07/2024
  2074                                  	; 02/10/2023
  2075                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  2076                                  outchr:
  2077 00000682 50                      		push	ax		; int 29h handler
  2078 00000683 56                      		push	si
  2079 00000684 57                      		push	di
  2080 00000685 55                      		push	bp
  2081 00000686 53                      		push	bx
  2082                                  		;;;
  2083                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  2084                                  		;mov	ah,0Eh
  2085                                  		;mov	bx,7
  2086                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2087                                  		;		; AL = character, BH = display page (alpha modes)
  2088                                  		;		; BL = foreground color	(graphics modes)
  2089                                  		; 17/07/2024
  2090                                  		; 02/10/2023
  2091 00000687 1E                      		push	ds ; *
  2092 00000688 31DB                    		xor	bx,bx ; 0
  2093 0000068A 8EDB                    		mov	ds,bx ; 0
  2094 0000068C B40E                    		mov	ah,0Eh
  2095 0000068E B307                    		mov	bl,7
  2096 00000690 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  2097                                  		; 17/07/2024
  2098                                  		;jnz	short win_outchr ; *
  2099                                  		;push	ds ; *
  2100                                  		;mov	ds,bx ; 0
  2101                                  		;mov	ah,0Eh
  2102                                  		;mov	bl,7
  2103 00000695 7508                    		jnz	short win_outchr ; Running on Windows
  2104 00000697 9C                      		pushf			; far call (simulate INT)
  2105 00000698 FA                      		cli	; disable interrupts
  2106 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  2107                                  		; 17/07/2024
  2108                                  		;pop	ds ; *
  2109 0000069D EB02                    		jmp	short outchr_ok
  2110                                  win_outchr:
  2111 0000069F CD10                    		int	10h
  2112                                  outchr_ok:
  2113                                  		; 17/07/2024
  2114 000006A1 1F                      		pop	ds ; *
  2115                                  		;;;
  2116 000006A2 5B                      		pop	bx
  2117 000006A3 5D                      		pop	bp
  2118 000006A4 5F                      		pop	di
  2119 000006A5 5E                      		pop	si
  2120 000006A6 58                      		pop	ax
  2121 000006A7 CF                      		iret
  2122                                  
  2123                                  ;-----------------------------------------------------------------------------
  2124                                  
  2125                                  	; 02/10/2023 - Retro DOS v5.0
  2126                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  2127                                  
  2128 000006A8 50                      		db 50h ; P		; 'PCI' signature
  2129 000006A9 43                      		db 43h ; C
  2130 000006AA 49                      		db 49h ; I
  2131                                  
  2132 000006AB 00000000                Orig1A:		dd 0
  2133                                  
  2134                                  ; =============== S U B R O U T I N E =======================================
  2135                                  
  2136                                  	; 02/10/2023 - Retro DOS v5.0
  2137                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  2138                                  
  2139                                  Int1A:
  2140 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  2141 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  2142 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  2143                                  int1a_1:
  2144 000006B9 55                      		push	bp
  2145                                  int1a_2:
  2146 000006BA 89E5                    		mov	bp,sp
  2147 000006BC 55                      		push	bp
  2148 000006BD 9C                      		pushf
  2149 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2150 000006C3 7220                    		jc	short int1a_4
  2151                                  
  2152                                  		;cmp	cl,0		; Year (BCD)
  2153                                  		; 02/10/2023
  2154 000006C5 08C9                    		or	cl,cl
  2155 000006C7 7515                    		jnz	short int1a_3
  2156 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  2157 000006CC 7510                    		jne	short int1a_3
  2158 000006CE B520                    		mov	ch,20h
  2159 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  2160 000006D2 51                        		push	cx
  2161 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  2162 000006D4 9C                      		pushf
  2163 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2164 000006DA 5A                      		pop	dx
  2165 000006DB 59                      		pop	cx
  2166 000006DC 7207                    		jc	short int1a_4
  2167                                  int1a_3:
  2168 000006DE 5D                      		pop	bp
  2169 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  2170 000006E3 EB05                                    jmp	short int1a_5
  2171                                  int1a_4:
  2172 000006E5 5D                      		pop	bp
  2173 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  2174                                  int1a_5:
  2175 000006EA 5D                      		pop	bp
  2176 000006EB CF                      		iret
  2177                                  
  2178                                  		; 02/10/2023
  2179 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  2180                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  2181                                  	
  2182                                  ;-----------------------------------------------------------------------------
  2183                                  
  2184                                  ;************************************************************************
  2185                                  ;*									*
  2186                                  ;*	block13 - our int13 hooker					*
  2187                                  ;*									*
  2188                                  ;************************************************************************
  2189                                  
  2190                                  	; 02/10/2023 - Retro DOS v5.0
  2191                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  2192                                  
  2193                                  block13:				
  2194 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2195 000006F3 7403                    		jz	short skipa20
  2196                                  		
  2197                                  		;call	IsA20Off	; A20 Off?
  2198                                  		;jnz	short skipa20
  2199                                  		;call	EnableA20	; assure a20 enabled
  2200                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  2201 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  2202                                  skipa20:				
  2203 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  2204 000006FD 9C                      		pushf			; fake interrupt
  2205 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  2206                                  		;call	dword ptr cs:i13x
  2207                                  					; call through Bios_Code entry table
  2208 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  2209 00000708 CA0200                  		retf	2
  2210                                  
  2211                                  ; =============== S U B	R O U T	I N E =======================================
  2212                                  
  2213                                  ; the int13 hook calls back here to call-through to the ROM
  2214                                  ; this is necessary because some people have extended their
  2215                                  ; ROM BIOSs to use ds as a parameter/result register and
  2216                                  ; our int13 hook relies heavily on ds to access Bios_Data
  2217                                  
  2218                                  call_orig13:	; proc far		
  2219 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  2220 0000070F 9C                      		pushf			; simulate an int13
  2221 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  2222                                  		;call	cs:Orig13
  2223 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  2224 0000071A 0E                      		push	cs
  2225 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  2226                                  
  2227 0000071C 9C                      		pushf
  2228                                  		; 10/12/2022
  2229                                  		; ds = cs
  2230 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  2231                                  		;cmp	byte [cs:inHMA],0
  2232 00000722 7403                    		jz	short corig13_popf_retf
  2233                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2234                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  2235                                  		;call	IsA20Off
  2236                                  		;jnz	short corig13_popf_retf
  2237                                  		;call	EnableA20
  2238 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  2239                                  corig13_popf_retf:	
  2240 00000727 9D                      		popf
  2241                                  		; 20/09/2023
  2242                                  re_init:	; 07/08/2023
  2243 00000728 CB                      		retf
  2244                                  
  2245                                  		; 02/10/2023
  2246 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  2247                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  2248                                  
  2249                                  ;-----------------------------------------------------------------------------
  2250                                  
  2251                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  2252                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  2253                                  
  2254                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2255                                  ;HiMem:		dd 0FFFF0090h		
  2256                                  ;LoMem:		dd 80h
  2257                                  
  2258                                  ; ----------------------------------------------------------------------------			
  2259                                  
  2260                                  ; =============== S U B	R O U T	I N E ========================================
  2261                                  
  2262                                  
  2263                                  ;************************************************************************
  2264                                  ;*									*
  2265                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  2266                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  2267                                  ;*									*
  2268                                  ;************************************************************************
  2269                                  
  2270                                  EnsureA20On:	; proc near
  2271 0000072A E80E00                  		call	IsA20Off
  2272                                  		;jz	short EnableA20
  2273                                  		;retn
  2274                                  		; 18/12/2022
  2275 0000072D 750B                    		jnz	short A20On_retn
  2276                                  
  2277                                  ; =============== S U B	R O U T	I N E ========================================
  2278                                  
  2279                                  
  2280                                  EnableA20:	; proc near
  2281 0000072F 50                      		push	ax
  2282 00000730 53                      		push	bx
  2283 00000731 B405                    		mov	ah,5	 ; local enable a20
  2284                                  		;call	cs:xms
  2285 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  2286 00000738 5B                      		pop	bx
  2287 00000739 58                      		pop	ax
  2288                                  A20On_retn:	; 18/12/2022
  2289 0000073A C3                      		retn
  2290                                  
  2291                                  ; =============== S U B	R O U T	I N E ========================================
  2292                                  
  2293                                  
  2294                                  IsA20Off:	; proc near
  2295 0000073B 1E                      		push	ds
  2296 0000073C 06                      		push	es
  2297 0000073D 51                      		push	cx
  2298 0000073E 56                      		push	si
  2299 0000073F 57                      		push	di
  2300                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2301                                  		;lds	si,[cs:HiMem]
  2302                                  		;les	di,[cs:LoMem]
  2303                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  2304 00000740 31FF                    		xor	di,di
  2305 00000742 8EC7                    		mov	es,di
  2306 00000744 4F                      		dec	di
  2307 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  2308 00000748 8EDF                    		mov	ds,di
  2309 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  2310                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  2311                                  		; (following cpu instructions will be modified by 'SYSIN'
  2312                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  2313                                  cpu386_cmpsd:
  2314 0000074D 90                      		nop
  2315 0000074E B90800                  		mov	cx,8
  2316 00000751 F3A7                    		repe cmpsw
  2317                                  				; zf = 0 -> A20 line is ON
  2318                                  				; zf = 1 -> A20 line is OFF
  2319 00000753 5F                      		pop	di
  2320 00000754 5E                      		pop	si
  2321 00000755 59                      		pop	cx
  2322 00000756 07                      		pop	es
  2323 00000757 1F                      		pop	ds
  2324 00000758 C3                      		retn
  2325                                  
  2326                                  ; ----------------------------------------------------------------------------
  2327                                  
  2328                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2329                                  %if 0
  2330                                  DisableA20:
  2331                                  		push	ax
  2332                                  		push	bx
  2333                                  		mov	ah,6		; local disable A20
  2334                                  		call	far [cs:xms]
  2335                                  		;call	cs:xms
  2336                                  		pop	bx
  2337                                  		pop	ax
  2338                                  		retn
  2339                                  %endif
  2340                                  
  2341                                  ; ----------------------------------------------------------------------------
  2342                                  
  2343                                  ;************************************************************************
  2344                                  ;*									*
  2345                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  2346                                  ;*	  interrupt vectors before resuming the original int19 code	*
  2347                                  ;*									*
  2348                                  ;************************************************************************
  2349                                  
  2350                                  		; 02/10/2023 - Retro DOS v5.0
  2351                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  2352                                  int19:
  2353 00000759 0E                      		push	cs
  2354 0000075A 1F                      		pop	ds
  2355                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2356                                  		;mov	es,[zeroseg]	; 16/10/2022
  2357                                  		;mov	cx,5		; NUMROMVECTORS
  2358 0000075B 31C9                    		xor	cx,cx
  2359 0000075D 8EC1                    		mov	es,cx
  2360 0000075F B105                    		mov	cl,5
  2361                                  		;mov	si,offset RomVectors
  2362 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  2363                                  next_int:
  2364 00000764 AC                      		lodsb			; get int number
  2365 00000765 98                      		cbw			; assume < 128
  2366 00000766 D1E0                    		shl	ax,1
  2367 00000768 D1E0                    		shl	ax,1		; int *	4
  2368                                  		; 07/08/2023
  2369                                  		;mov	di,ax
  2370                                  		;lodsw
  2371                                  		;stosw
  2372                                  		;lodsw
  2373                                  		;stosw			; install the saved vector
  2374                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  2375 0000076A 97                      		xchg	ax,di
  2376 0000076B A5                      		movsw
  2377 0000076C A5                      		movsw
  2378 0000076D E2F5                    		loop	next_int
  2379                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  2380 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  2381 00000773 7419                    		jz	short doint19
  2382 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  2383                                  					; stkinit in sysinit1 will initialize int19oldxx values
  2384                                  		;mov	cx,14		; num_i19
  2385                                  		; 07/08/2023
  2386 00000778 B10E                    		mov	cl,14
  2387                                  i19_restore_loop:
  2388 0000077A AC                      		lodsb			; get interrupt	number
  2389 0000077B 98                      		cbw			; assume < 128
  2390                                  		;mov	di,ax
  2391                                  		;lodsw			; get original vector offset
  2392                                  		;mov	bx,ax		; save it
  2393                                  		;lodsw
  2394                                  		; 07/08/2023
  2395 0000077C 97                      		xchg	ax,di
  2396 0000077D AD                      		lodsw
  2397 0000077E 93                      		xchg	ax,bx
  2398 0000077F AD                      		lodsw
  2399                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  2400 00000780 43                      		inc	bx ; 07/08/2023
  2401 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  2402                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  2403                                  		;jz	short i19_restor_1
  2404 00000783 4B                      		dec	bx ; 07/08/2023
  2405 00000784 01FF                    		add	di,di
  2406 00000786 01FF                    		add	di,di
  2407 00000788 93                      		xchg	ax,bx
  2408 00000789 AB                      		stosw
  2409 0000078A 93                      		xchg	ax,bx
  2410 0000078B AB                      		stosw			; put the vector back
  2411                                  i19_restor_1:
  2412 0000078C E2EC                    		loop	i19_restore_loop
  2413                                  doint19:
  2414                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  2415 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  2416 00000792 7403                    		jz	short SkipVDisk
  2417 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  2418                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  2419                                  					; the memory above 1MB during a	warm boot.
  2420                                  SkipVDisk:
  2421 00000797 CD19                    		int	19h		; DISK BOOT
  2422                                  					; causes reboot	of disk	system
  2423                                  
  2424                                  ; =============== S U B	R O U T	I N E ========================================
  2425                                  
  2426                                  ;-----------------------------------------------------------------------------
  2427                                  ;
  2428                                  ; procedure : int15
  2429                                  ;
  2430                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  2431                                  ;		If it recognizes ctrl-alt-del and if DOS was
  2432                                  ;		is running high, it Erases the VDISK header
  2433                                  ;		present at 1MB boundary
  2434                                  ;
  2435                                  ;-----------------------------------------------------------------------------
  2436                                  
  2437                                  ; 16/10/2022
  2438                                  ;DELKEY		equ	53h
  2439                                  ;ROMDATASEG	equ	40h
  2440                                  KBFLAG		equ	17h
  2441                                  ;CTRLSTATE	equ	04h
  2442                                  ;ALTSTATE	equ	08h
  2443                                  
  2444                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  2445                                  Int15:
  2446                                  		;cmp	ax,4F00h+DELKEY
  2447 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  2448                                  		; 02/10/2023 - Retro DOS v5.0
  2449                                  		; 07/08/2023
  2450 0000079C 7405                    		jz	short int15_1
  2451                                  		;jnz	short Old15_j	; 07/08/2023 
  2452                                  Old15_j:
  2453 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2454                                  
  2455                                  ; ----------------------------------------------------------------------------
  2456                                  int15_1:
  2457 000007A3 1E                      		push	ds
  2458 000007A4 50                      		push	ax
  2459                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2460                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2461                                  		;mov	ax,40h		; ROMDATASEG
  2462                                  		;mov	ds,ax
  2463                                  		;;mov	al,ds:17h	; [KBFLAG]
  2464                                  		;; 16/10/2022
  2465                                  		;mov	al,[KBFLAG]
  2466 000007A5 31C0                    		xor	ax,ax
  2467 000007A7 8ED8                    		mov	ds,ax
  2468 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2469 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2470 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2471 000007B0 750A                    		jnz	short int15_2
  2472                                  		; 07/08/2023
  2473                                  		;push	cs
  2474                                  		;pop	ds
  2475                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  2476 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  2477 000007B7 7403                    		jz	short int15_2
  2478 000007B9 E80500                  		call	EraseVDiskHead
  2479                                  int15_2:
  2480 000007BC 58                      		pop	ax
  2481 000007BD 1F                      		pop	ds
  2482 000007BE F9                      		stc
  2483                                  		; 02/10/2023 - Retro DOS v5.0
  2484 000007BF EBDD                    		jmp	short Old15_j
  2485                                  
  2486                                  		; 02/10/2023
  2487                                  ;Old15_j:	; 07/08/2023
  2488                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  2489                                  ;		;jmp	cs:Old15
  2490                                  	
  2491                                  ; =============== S U B	R O U T	I N E ========================================
  2492                                  
  2493                                  ;-----------------------------------------------------------------------------
  2494                                  ;
  2495                                  ; procedure : EraseVDiskHead
  2496                                  ;
  2497                                  ;		Erases the VDisk Header present in the 1MB boundary
  2498                                  ;
  2499                                  ;-----------------------------------------------------------------------------
  2500                                  
  2501                                  EraseVDiskHead:	; proc near
  2502                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2503                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2504                                  		;push	ax
  2505 000007C1 51                      		push	cx
  2506 000007C2 57                      		push	di
  2507 000007C3 06                      		push	es
  2508 000007C4 E863FF                  		call	EnsureA20On
  2509                                  		;mov	ax,0FFFFh	; HMA seg
  2510                                  		;mov	es,ax
  2511                                  		; 03/10/2023 - Retro DOS v5.0
  2512 000007C7 6AFF                    		push	0FFFFh
  2513 000007C9 07                      		pop	es
  2514 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  2515                                  		; 07/08/2023
  2516                                  		;mov	cx,10h		; size of vdisk	header
  2517 000007CD 89F9                    		mov	cx,di ; 16
  2518                                  		; 03/10/2023
  2519 000007CF 31C0                    		xor	ax,ax
  2520                                  		;inc	ax ; ax = 0
  2521 000007D1 F3AB                    		rep stosw		; clear	it
  2522 000007D3 07                      		pop	es
  2523 000007D4 5F                      		pop	di
  2524 000007D5 59                      		pop	cx
  2525                                  		;pop	ax ; 07/08/2023
  2526 000007D6 C3                      		retn
  2527                                  
  2528                                  ; ----------------------------------------------------------------------------
  2529                                  
  2530                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2531                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2532                                  
  2533                                  ; 09/12/2022
  2534                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2535                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2536                                  ; (followings are in sysinit segment)
  2537                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2538                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2539                                  ;DEVICELIST	equ 273h
  2540                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2541                                  ;MEMORYSIZE	equ 292h	
  2542                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2543                                  ;DEFAULTDRIVE	equ 296h
  2544                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2545                                  ;;currentdoslocation equ 271h
  2546                                  ;CURRENTDOSLOCATION equ 271h
  2547                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2548                                  ;SYSINITSTART	equ 267h
  2549                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2550                                  ; 18/10/2022
  2551                                  ;toomanydrivesflag equ 3FFh 
  2552                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2553                                  
  2554                                  ; ----------------------------------------------------------------------------
  2555                                  
  2556                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2557                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  2558                                  
  2559                                  %if 1
  2560                                  
  2561 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2562                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2563                                  					; (procedure in	SYSINIT	segment)
  2564                                  ; 17/10/2022
  2565 000007D9 [C60A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2566 000007DB D904                    		dw SYSINITSEG		; 08/08/2023
  2567                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2568                                  					; 0473h for MSDOS 6.21 IO.SYS
  2569                                  ;SR;
  2570                                  ; A communication block has been setup between the DOS and the BIOS. All
  2571                                  ;the data starting from SysinitPresent will be part of the data block. 
  2572                                  ;Right now, this is the only data being communicated. It can be expanded 
  2573                                  ;later to add more stuff
  2574                                  
  2575 000007DD 00                      SysinitPresent:	db 0
  2576                                  
  2577                                  %endif
  2578                                  
  2579                                  ; ----------------------------------------------------------------------------
  2580                                  
  2581                                  ;************************************************************************
  2582                                  ;*									*
  2583                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2584                                  ;*	  it returns through one of the three functions that follow.	*
  2585                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2586                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2587                                  ;*									*
  2588                                  ;************************************************************************
  2589                                  
  2590                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2591                                  %if 0	; 20/09/2023
  2592                                  int_2f:		
  2593                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2594                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2595                                  
  2596                                  ; ----------------------------------------------------------------------------
  2597                                  
  2598                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2599                                  ; note:  is it really necessary to transiton out and then back in?
  2600                                  ;	 It's not as if this is a really speed critical function.
  2601                                  ;	 might as well do whatever's most compact.
  2602                                  
  2603                                  i2f_dskentry:
  2604                                  		jmp	dsk_entry
  2605                                  
  2606                                  ; ----------------------------------------------------------------------------
  2607                                  
  2608                                  ;************************************************************************
  2609                                  ;*									*
  2610                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2611                                  ;*		is done. presently does nothing. affects no		*
  2612                                  ;*		registers!						*
  2613                                  ;*									*
  2614                                  ;************************************************************************
  2615                                  
  2616                                  ; 09/12/2022
  2617                                  ; re_init_:
  2618                                  re_init:				; called back by sysinit after
  2619                                  		retf			; a bunch of stuff is done.
  2620                                  					; presently does nothing
  2621                                  %endif
  2622                                  
  2623                                  ; ----------------------------------------------------------------------------
  2624                                  
  2625                                  ;SR; WIN386 support
  2626                                  
  2627                                  ; WIN386 instance data structure
  2628                                  ;
  2629                                  ; Here is a Win386 startup info structure which we set up and to which
  2630                                  ; we return a pointer when Win386 initializes.
  2631                                  
  2632 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  2633                                  					; Startup Info for Win386
  2634 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  2635 000007E4 00000000                		dd 0			; a field we don't need
  2636 000007E8 00000000                		dd 0			; another field	we don't need
  2637 000007EC [F007]                  SI_Instance:	dw Instance_Table
  2638 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2639                                  
  2640                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2641                                  ; areas. Note that the address and size of the hardware stacks must
  2642                                  ; be calculated and inserted at boot time.
  2643                                  
  2644 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  2645 000007F4 0200                    		dw 2			; ... 2	bytes
  2646 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  2647 000007FA 1400                    		dw 14h			; ... 14H bytes
  2648 000007FC [0C00]                  		dw altah		; a con	device buffer...
  2649 000007FE 7000                    		dw 70h			; Bios_Data segment
  2650 00000800 0100                    		dw 1			; ... 1 byte
  2651                                  
  2652                                  NextStack:
  2653                                  
  2654                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2655                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2656                                  ;	That's just fine as long as these are the last items
  2657                                  ;	in the instance list since the first item is initialized
  2658                                  ;	to 0000 at load time.
  2659                                  
  2660 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  2661 00000806 0200                    		dw 2			; ... 2 bytes
  2662 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2663 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2664 0000080E 00000000                		dd 0			; terminate the	instance table
  2665                                  
  2666                                  					;SR;
  2667 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  2668                                  					; Win386 is running or not
  2669                                  ;-----------------------------------------------------------------------------
  2670                                  
  2671                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2672                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  2673                                  
  2674                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2675                                  ;when we call it including checking of A20. The code being only about 
  2676                                  ;30 bytes, we might as well put it in BIOS_DATA
  2677                                  
  2678                                  V86_Crit_SetFocus:			
  2679 00000813 57                      		push	di
  2680 00000814 06                      		push	es
  2681 00000815 53                      		push	bx
  2682 00000816 50                      		push	ax
  2683 00000817 31FF                    		xor	di,di
  2684 00000819 8EC7                    		mov	es,di
  2685 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  2686 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  2687 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2688                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2689                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2690 00000823 8CC0                    		mov	ax, es
  2691 00000825 09F8                    		or	ax, di
  2692 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2693                                  					; Set up stack frame to	simulate a call.
  2694 00000829 0E                      		push	cs
  2695                                  		;;mov	ax,offset Skip
  2696                                  		;mov	ax,Skip
  2697                                  		;push	ax
  2698                                  		; 03/10/2023 - Retro DOS v5.0
  2699 0000082A 68[3308]                		push	Skip
  2700 0000082D 06                      		push	es
  2701 0000082E 57                      		push	di		; API far call address
  2702 0000082F B80100                  		mov	ax,1		; SetFocus function number
  2703 00000832 CB                      		retf			; do the call
  2704                                  ;-----------------------------------------------------------------------------
  2705                                  
  2706                                  Skip:					
  2707 00000833 58                      		pop	ax
  2708 00000834 5B                      		pop	bx
  2709 00000835 07                      		pop	es
  2710 00000836 5F                      		pop	di
  2711 00000837 CB                      		retf
  2712                                  
  2713                                  ;End WIN386 support
  2714                                  
  2715                                  ; ----------------------------------------------------------------------------
  2716                                  
  2717                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2718                                  %if 0
  2719                                  
  2720                                  FreeHMAPtr:	dw 0FFFFh		
  2721                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2722                                  					; (procedure in	SYSINIT	segment)
  2723                                  ; 17/10/2022
  2724                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2725                                  		dw SYSINITSEG		; 08/08/2023
  2726                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2727                                  					; 0473h for MSDOS 6.21 IO.SYS
  2728                                  ;SR;
  2729                                  ; A communication block has been setup between the DOS and the BIOS. All
  2730                                  ;the data starting from SysinitPresent will be part of the data block. 
  2731                                  ;Right now, this is the only data being communicated. It can be expanded 
  2732                                  ;later to add more stuff
  2733                                  
  2734                                  SysinitPresent:	db 0
  2735                                  		
  2736                                  endfloppy:	db 0, 0
  2737                                  
  2738                                  %endif
  2739                                  	
  2740                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2741                                  
  2742                                  	endfloppy:
  2743 00000838 00                      		db 0
  2744                                  
  2745                                  	; 03/10/2023
  2746                                  
  2747                                  numxdiv	equ ($-BData_start)
  2748                                  numxmod	equ (numxdiv % 16)
  2749                                  
  2750                                  %if (numxmod>0) & (numxmod<16)
  2751 00000839 00<rep 7h>              		times (16-numxmod) db 0
  2752                                  %endif
  2753                                  
  2754                                  ; ----------------------------------------------------------------------------			
  2755                                  
  2756                                  ; Bios_Data ends
  2757                                  	
  2758                                  ; Possibly disposable BIOS data
  2759                                  ; This data follows the	regular	BIOS data,
  2760                                  ; and is part of the same group.
  2761                                  
  2762                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2763                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  2764                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  2765                                  
  2766                                  ; 03/10/2023
  2767 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  2767 00000849 2020               
  2768                                  
  2769 0000084B 80                      harddrv:	db 80h			
  2770                                  
  2771                                  end96tpi:
  2772                                  
  2773                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2774                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  2775                                  
  2776                                  ;;*********************************************************************
  2777                                  ;;memory allocation for bdss
  2778                                  ;;*********************************************************************
  2779                                  ;
  2780                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2781                                  ;
  2782                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2783                                  ;
  2784                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2785                                  
  2786                                  
  2787                                  ; 09/12/2023
  2788                                  %if 1
  2789                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  2790                                  
  2791 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  2792                                  					; max_mini_dsk_num equ 23
  2793                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  2794                                  					; currently max. 25
  2795                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  2796                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  2797                                  					; BDS.link
  2798 0000084E 0000                    		dw 0
  2799 00000850 50                      		db 80			; BDS.drivenum
  2800 00000851 03                      		db 3			; BDS.drivelet
  2801 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  2802                                  					; 53 bytes BPB for FAT32 fs
  2803                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  2804                                  					; .bytespersec
  2805 00000854 01                      		db 1			; .secperclus
  2806 00000855 0100                    		dw 1			; .resectors
  2807 00000857 02                      		db 2			; .fats
  2808 00000858 1000                    		dw 16			; .direntries
  2809 0000085A 0000                    		dw 0			; .totalsec16
  2810 0000085C F8                      		db 0F8h			; .media
  2811 0000085D 0100                    		dw 1			; .fatsecs16
  2812 0000085F 0000                    		dw 0			; .secpertrack
  2813 00000861 0000                    		dw 0			; .heads
  2814 00000863 00000000                		dd 0			; .hiddensectors
  2815 00000867 00000000                		dd 0			; .totalsecs32
  2816                                  					; (End of FAT12/FAT16 BPB)
  2817                                  					;
  2818                                  					; FAT32 extensions to BDS
  2819 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  2820 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  2821 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  2822 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  2823 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  2824 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  2825 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  2826 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  2827 00000888 0000                    		dw 0			; BDS.opcnt
  2828 0000088A 03                      		db 3
  2829 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  2830 0000088D 2800                    		dw 40
  2831 0000088F 00<rep 25h>             		times 37 db 0
  2832 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  2833 000008B8 00<rep Ch>              		times 12 db 0
  2834 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  2835 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  2836 000008C7 0000                    		dw 0			; BDS.tim_hi
  2837 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  2837 000008D2 202000             
  2838 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  2839 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  2840 000008E2 FFFF                    bds_1:		dw 0FFFFh
  2841 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2841 000008ED 0210000000F8       
  2842 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2842 000008FC 000000000000000000 
  2843 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2843 0000090E FFFFFF0000         
  2844 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2844 0000091C 0000000003200028   
  2845 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2845 0000092D 000000000000000000 
  2846 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2846 0000093F 000000000000000000 
  2847 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2847 00000951 0000000000         
  2848 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2848 0000095F 4E4F204E41         
  2849 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2849 0000096D 00004641           
  2850 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2851 00000978 FFFF                    bds_2:		dw 0FFFFh
  2852 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2852 00000983 0210000000F8       
  2853 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2853 00000992 000000000000000000 
  2854 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2854 000009A4 FFFFFF0000         
  2855 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2855 000009B2 0000000003200028   
  2856 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2856 000009C3 000000000000000000 
  2857 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2857 000009D5 000000000000000000 
  2858 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2858 000009E7 0000000000         
  2859 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2859 000009F5 4E4F204E41         
  2860 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2860 00000A03 00004641           
  2861 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2862 00000A0E FFFF                    bds_3:		dw 0FFFFh
  2863 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2863 00000A19 0210000000F8       
  2864 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2864 00000A28 000000000000000000 
  2865 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2865 00000A3A FFFFFF0000         
  2866 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2866 00000A48 0000000003200028   
  2867 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2867 00000A59 000000000000000000 
  2868 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2868 00000A6B 000000000000000000 
  2869 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2869 00000A7D 0000000000         
  2870 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2870 00000A8B 4E4F204E41         
  2871 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2871 00000A99 00004641           
  2872 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2873 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  2874 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2874 00000AAF 0210000000F8       
  2875 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2875 00000ABE 000000000000000000 
  2876 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2876 00000AD0 FFFFFF0000         
  2877 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2877 00000ADE 0000000003200028   
  2878 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2878 00000AEF 000000000000000000 
  2879 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2879 00000B01 000000000000000000 
  2880 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2880 00000B13 0000000000         
  2881 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2881 00000B21 4E4F204E41         
  2882 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2882 00000B2F 00004641           
  2883 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2884 00000B3A FFFF                    		dw 0FFFFh
  2885 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2885 00000B45 0210000000F8       
  2886 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2886 00000B54 000000000000000000 
  2887 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2887 00000B66 FFFFFF0000         
  2888 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2888 00000B74 0000000003200028   
  2889 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2889 00000B85 000000000000000000 
  2890 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2890 00000B97 000000000000000000 
  2891 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2891 00000BA9 0000000000         
  2892 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2892 00000BB7 4E4F204E41         
  2893 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2893 00000BC5 00004641           
  2894 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2895 00000BD0 FFFF                    		dw 0FFFFh
  2896 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2896 00000BDB 0210000000F8       
  2897 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2897 00000BEA 000000000000000000 
  2898 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2898 00000BFC FFFFFF0000         
  2899 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2899 00000C0A 0000000003200028   
  2900 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2900 00000C1B 000000000000000000 
  2901 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2901 00000C2D 000000000000000000 
  2902 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2902 00000C3F 0000000000         
  2903 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2903 00000C4D 4E4F204E41         
  2904 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2904 00000C5B 00004641           
  2905 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2906 00000C66 FFFF                    		dw 0FFFFh
  2907 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2907 00000C71 0210000000F8       
  2908 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2908 00000C80 000000000000000000 
  2909 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2909 00000C92 FFFFFF0000         
  2910 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2910 00000CA0 0000000003200028   
  2911 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2911 00000CB1 000000000000000000 
  2912 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2912 00000CC3 000000000000000000 
  2913 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2913 00000CD5 0000000000         
  2914 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2914 00000CE3 4E4F204E41         
  2915 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2915 00000CF1 00004641           
  2916 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2917 00000CFC FFFF                    		dw 0FFFFh
  2918 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2918 00000D07 0210000000F8       
  2919 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2919 00000D16 000000000000000000 
  2920 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2920 00000D28 FFFFFF0000         
  2921 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2921 00000D36 0000000003200028   
  2922 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2922 00000D47 000000000000000000 
  2923 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2923 00000D59 000000000000000000 
  2924 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2924 00000D6B 0000000000         
  2925 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2925 00000D79 4E4F204E41         
  2926 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2926 00000D87 00004641           
  2927 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2928 00000D92 FFFF                    		dw 0FFFFh
  2929 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2929 00000D9D 0210000000F8       
  2930 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2930 00000DAC 000000000000000000 
  2931 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2931 00000DBE FFFFFF0000         
  2932 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2932 00000DCC 0000000003200028   
  2933 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2933 00000DDD 000000000000000000 
  2934 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2934 00000DEF 000000000000000000 
  2935 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2935 00000E01 0000000000         
  2936 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2936 00000E0F 4E4F204E41         
  2937 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2937 00000E1D 00004641           
  2938 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2939 00000E28 FFFF                    		dw 0FFFFh
  2940 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2940 00000E33 0210000000F8       
  2941 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2941 00000E42 000000000000000000 
  2942 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2942 00000E54 FFFFFF0000         
  2943 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2943 00000E62 0000000003200028   
  2944 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2944 00000E73 000000000000000000 
  2945 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2945 00000E85 000000000000000000 
  2946 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2946 00000E97 0000000000         
  2947 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2947 00000EA5 4E4F204E41         
  2948 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2948 00000EB3 00004641           
  2949 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2950 00000EBE FFFF                    		dw 0FFFFh
  2951 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2951 00000EC9 0210000000F8       
  2952 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2952 00000ED8 000000000000000000 
  2953 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2953 00000EEA FFFFFF0000         
  2954 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2954 00000EF8 0000000003200028   
  2955 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2955 00000F09 000000000000000000 
  2956 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2956 00000F1B 000000000000000000 
  2957 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2957 00000F2D 0000000000         
  2958 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2958 00000F3B 4E4F204E41         
  2959 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2959 00000F49 00004641           
  2960 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2961 00000F54 FFFF                    		dw 0FFFFh
  2962 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2962 00000F5F 0210000000F8       
  2963 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2963 00000F6E 000000000000000000 
  2964 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2964 00000F80 FFFFFF0000         
  2965 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2965 00000F8E 0000000003200028   
  2966 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2966 00000F9F 000000000000000000 
  2967 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2967 00000FB1 000000000000000000 
  2968 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2968 00000FC3 0000000000         
  2969 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2969 00000FD1 4E4F204E41         
  2970 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2970 00000FDF 00004641           
  2971 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2972 00000FEA FFFF                    		dw 0FFFFh
  2973 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2973 00000FF5 0210000000F8       
  2974 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2974 00001004 000000000000000000 
  2975 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2975 00001016 FFFFFF0000         
  2976 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2976 00001024 0000000003200028   
  2977 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2977 00001035 000000000000000000 
  2978 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2978 00001047 000000000000000000 
  2979 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2979 00001059 0000000000         
  2980 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2980 00001067 4E4F204E41         
  2981 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2981 00001075 00004641           
  2982 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2983 00001080 FFFF                    		dw 0FFFFh
  2984 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2984 0000108B 0210000000F8       
  2985 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2985 0000109A 000000000000000000 
  2986 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2986 000010AC FFFFFF0000         
  2987 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2987 000010BA 0000000003200028   
  2988 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2988 000010CB 000000000000000000 
  2989 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2989 000010DD 000000000000000000 
  2990 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2990 000010EF 0000000000         
  2991 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2991 000010FD 4E4F204E41         
  2992 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2992 0000110B 00004641           
  2993 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2994 00001116 FFFF                    		dw 0FFFFh
  2995 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2995 00001121 0210000000F8       
  2996 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2996 00001130 000000000000000000 
  2997 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2997 00001142 FFFFFF0000         
  2998 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2998 00001150 0000000003200028   
  2999 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2999 00001161 000000000000000000 
  3000 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3000 00001173 000000000000000000 
  3001 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3001 00001185 0000000000         
  3002 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3002 00001193 4E4F204E41         
  3003 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3003 000011A1 00004641           
  3004 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3005 000011AC FFFF                    		dw 0FFFFh
  3006 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3006 000011B7 0210000000F8       
  3007 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3007 000011C6 000000000000000000 
  3008 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3008 000011D8 FFFFFF0000         
  3009 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3009 000011E6 0000000003200028   
  3010 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3010 000011F7 000000000000000000 
  3011 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3011 00001209 000000000000000000 
  3012 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3012 0000121B 0000000000         
  3013 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3013 00001229 4E4F204E41         
  3014 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3014 00001237 00004641           
  3015 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3016 00001242 FFFF                    		dw 0FFFFh
  3017 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3017 0000124D 0210000000F8       
  3018 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3018 0000125C 000000000000000000 
  3019 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3019 0000126E FFFFFF0000         
  3020 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3020 0000127C 0000000003200028   
  3021 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3021 0000128D 000000000000000000 
  3022 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3022 0000129F 000000000000000000 
  3023 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3023 000012B1 0000000000         
  3024 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3024 000012BF 4E4F204E41         
  3025 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3025 000012CD 00004641           
  3026 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3027 000012D8 FFFF                    		dw 0FFFFh
  3028 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3028 000012E3 0210000000F8       
  3029 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3029 000012F2 000000000000000000 
  3030 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3030 00001304 FFFFFF0000         
  3031 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3031 00001312 0000000003200028   
  3032 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3032 00001323 000000000000000000 
  3033 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3033 00001335 000000000000000000 
  3034 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3034 00001347 0000000000         
  3035 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3035 00001355 4E4F204E41         
  3036 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3036 00001363 00004641           
  3037 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3038 0000136E FFFF                    		dw 0FFFFh
  3039 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3039 00001379 0210000000F8       
  3040 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3040 00001388 000000000000000000 
  3041 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3041 0000139A FFFFFF0000         
  3042 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3042 000013A8 0000000003200028   
  3043 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3043 000013B9 000000000000000000 
  3044 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3044 000013CB 000000000000000000 
  3045 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3045 000013DD 0000000000         
  3046 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3046 000013EB 4E4F204E41         
  3047 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3047 000013F9 00004641           
  3048 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3049 00001404 FFFF                    		dw 0FFFFh
  3050 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3050 0000140F 0210000000F8       
  3051 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3051 0000141E 000000000000000000 
  3052 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3052 00001430 FFFFFF0000         
  3053 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3053 0000143E 0000000003200028   
  3054 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3054 0000144F 000000000000000000 
  3055 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3055 00001461 000000000000000000 
  3056 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3056 00001473 0000000000         
  3057 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3057 00001481 4E4F204E41         
  3058 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3058 0000148F 00004641           
  3059 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3060 0000149A FFFF                    		dw 0FFFFh
  3061 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3061 000014A5 0210000000F8       
  3062 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3062 000014B4 000000000000000000 
  3063 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3063 000014C6 FFFFFF0000         
  3064 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3064 000014D4 0000000003200028   
  3065 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3065 000014E5 000000000000000000 
  3066 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3066 000014F7 000000000000000000 
  3067 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3067 00001509 0000000000         
  3068 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3068 00001517 4E4F204E41         
  3069 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3069 00001525 00004641           
  3070 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3071 00001530 FFFF                    		dw 0FFFFh
  3072 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3072 0000153B 0210000000F8       
  3073 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3073 0000154A 000000000000000000 
  3074 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3074 0000155C FFFFFF0000         
  3075 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3075 0000156A 0000000003200028   
  3076 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3076 0000157B 000000000000000000 
  3077 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3077 0000158D 000000000000000000 
  3078 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3078 0000159F 0000000000         
  3079 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3079 000015AD 4E4F204E41         
  3080 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3080 000015BB 00004641           
  3081 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3082 000015C6 FFFF                    		dw 0FFFFh
  3083 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3083 000015D1 0210000000F8       
  3084 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3084 000015E0 000000000000000000 
  3085 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3085 000015F2 FFFFFF0000         
  3086 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3086 00001600 0000000003200028   
  3087 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3087 00001611 000000000000000000 
  3088 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3088 00001623 000000000000000000 
  3089 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3089 00001635 0000000000         
  3090 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3090 00001643 4E4F204E41         
  3091 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3091 00001651 00004641           
  3092 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3093 0000165C FFFF                    bds_24:		dw 0FFFFh
  3094 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3094 00001667 0210000000F8       
  3095 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3095 00001676 000000000000000000 
  3096 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3096 00001688 FFFFFF0000         
  3097 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3097 00001696 0000000003200028   
  3098 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3098 000016A7 000000000000000000 
  3099 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3099 000016B9 000000000000000000 
  3100 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3100 000016CB 0000000000         
  3101 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3101 000016D9 4E4F204E41         
  3102 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3102 000016E7 00004641           
  3103 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3104                                  
  3105                                  %endif
  3106                                  
  3107                                  ; 09/12/2023
  3108                                  %if 0
  3109                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  3110                                  
  3111                                  bdss:		dw 0FFFFh		
  3112                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3113                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3114                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3115                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3116                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3117                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3118                                  		db 32h,	20h, 20h, 20h, 0
  3119                                  		dw 0FFFFh
  3120                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3121                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3122                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3123                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3124                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3125                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3126                                  		db 32h,	20h, 20h, 20h, 0
  3127                                  		dw 0FFFFh
  3128                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3129                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3130                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3131                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3132                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3133                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3134                                  		db 32h,	20h, 20h, 20h, 0
  3135                                  		dw 0FFFFh
  3136                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3137                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3138                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3139                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3140                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3141                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3142                                  		db 32h,	20h, 20h, 20h, 0
  3143                                  		dw 0FFFFh
  3144                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3145                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3146                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3147                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3148                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3149                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3150                                  		db 32h,	20h, 20h, 20h, 0
  3151                                  		dw 0FFFFh
  3152                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3153                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3154                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3155                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3156                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3157                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3158                                  		db 32h,	20h, 20h, 20h, 0
  3159                                  		dw 0FFFFh
  3160                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3161                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3162                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3163                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3164                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3165                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3166                                  		db 32h,	20h, 20h, 20h, 0
  3167                                  		dw 0FFFFh
  3168                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3169                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3170                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3171                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3172                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3173                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3174                                  		db 32h,	20h, 20h, 20h, 0
  3175                                  		dw 0FFFFh
  3176                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3177                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3178                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3179                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3180                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3181                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3182                                  		db 32h,	20h, 20h, 20h, 0
  3183                                  		dw 0FFFFh
  3184                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3185                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3186                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3187                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3188                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3189                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3190                                  		db 32h,	20h, 20h, 20h, 0
  3191                                  		dw 0FFFFh
  3192                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3193                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3194                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3195                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3196                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3197                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3198                                  		db 32h,	20h, 20h, 20h, 0
  3199                                  		dw 0FFFFh
  3200                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3201                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3202                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3203                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3204                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3205                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3206                                  		db 32h,	20h, 20h, 20h, 0
  3207                                  		dw 0FFFFh
  3208                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3209                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3210                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3211                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3212                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3213                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3214                                  		db 32h,	20h, 20h, 20h, 0
  3215                                  		dw 0FFFFh
  3216                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3217                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3218                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3219                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3220                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3221                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3222                                  		db 32h,	20h, 20h, 20h, 0
  3223                                  		dw 0FFFFh
  3224                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3225                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3226                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3227                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3228                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3229                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3230                                  		db 32h,	20h, 20h, 20h, 0
  3231                                  		dw 0FFFFh
  3232                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3233                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3234                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3235                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3236                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3237                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3238                                  		db 32h,	20h, 20h, 20h, 0
  3239                                  		dw 0FFFFh
  3240                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3241                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3242                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3243                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3244                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3245                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3246                                  		db 32h,	20h, 20h, 20h, 0
  3247                                  		dw 0FFFFh
  3248                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3249                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3250                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3251                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3252                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3253                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3254                                  		db 32h,	20h, 20h, 20h, 0
  3255                                  		dw 0FFFFh
  3256                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3257                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3258                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3259                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3260                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3261                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3262                                  		db 32h,	20h, 20h, 20h, 0
  3263                                  		dw 0FFFFh
  3264                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3265                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3266                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3267                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3268                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3269                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3270                                  		db 32h,	20h, 20h, 20h, 0
  3271                                  		dw 0FFFFh
  3272                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3273                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3274                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3275                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3276                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3277                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3278                                  		db 32h,	20h, 20h, 20h, 0
  3279                                  		dw 0FFFFh
  3280                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3281                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3282                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3283                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3284                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3285                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3286                                  		db 32h,	20h, 20h, 20h, 0
  3287                                  		dw 0FFFFh
  3288                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3289                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3290                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3291                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3292                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3293                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3294                                  		db 32h,	20h, 20h, 20h, 0
  3295                                  		dw 0FFFFh
  3296                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3297                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3298                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3299                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3300                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3301                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3302                                  		db 32h,	20h, 20h, 20h, 0
  3303                                  		dw 0FFFFh
  3304                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3305                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3306                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3307                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3308                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3309                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3310                                  		db 32h,	20h, 20h, 20h, 0
  3311                                  		db 0
  3312                                  %endif
  3313                                  
  3314                                  ;---------------------------------------------------------------------------
  3315                                  ; Possibly disposable data, goes at end of data group
  3316                                  ;***************************************************************************
  3317                                  
  3318                                  ; Possibly disposable data, goes at end of data group
  3319                                  
  3320                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  3321                                  ;
  3322                                  ;	entry:	(ah) = function, 02 or 0a for read.
  3323                                  ;		(dl) = drive number (80h or 81h).
  3324                                  ;		(dh) = head number.
  3325                                  ;		(ch) = cylinder number.
  3326                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  3327                                  ;		(al) = number of sectors.
  3328                                  ;		(es:bx) = address of read buffer.
  3329                                  ;		for more on register contents see rom bios listing.
  3330                                  ;		stack set up for return by an iret.
  3331                                  ;
  3332                                  ;	exit:	(ah) = status of current operation.
  3333                                  ;		(cy) = 1 if failed, 0 if successful.
  3334                                  ;		for other register contents see rom bios listing.
  3335                                  ;
  3336                                  ;	uses:	
  3337                                  ;
  3338                                  ;
  3339                                  ;	warning: uses old13 vector for non-read calls.
  3340                                  ;		does direct calls to the at rom.
  3341                                  ;		does segment arithmatic.
  3342                                  ;
  3343                                  ;	effects: performs disk i/o operation.
  3344                                  
  3345                                  ; 16/10/2022
  3346                                  ; 28/05/2019
  3347                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  3348                                  
  3349                                  ;* offsets into cmd_block for registers
  3350                                  
  3351                                  pre_comp equ 0	;write pre-compensation
  3352                                  sec_cnt	 equ 1	;sector count
  3353                                  sec_num	 equ 2	;sector number
  3354                                  cyl_low	 equ 3	;cylinder number, low part
  3355                                  cyl_high equ 4	;cylinder number, high part
  3356                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  3357                                  		;            bit 4 = drive number, bits 3-0 have head number)
  3358                                  cmd_reg  equ 6	;command register
  3359                                  
  3360                                  ; 01/10/2022
  3361                                  disk_status1	equ 74h
  3362                                  hf_num		equ 75h
  3363                                  control_byte	equ 76h
  3364                                  
  3365                                  ibm_disk_io:				
  3366 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  3367 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  3368 000016F7 80FC02                  		cmp	ah, 2
  3369 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  3370 000016FC 80FC0A                  		cmp	ah, 0Ah
  3371 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  3372                                  atd1:
  3373 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  3374                                  		;jmp	cs:Old13	; use rom int 13h handler
  3375                                  ;-----------------------------------------------------------------------------
  3376                                  
  3377                                  atd2:					
  3378 00001706 53                      		push	bx
  3379 00001707 51                      		push	cx
  3380 00001708 52                      		push	dx
  3381 00001709 57                      		push	di
  3382 0000170A 1E                      		push	ds
  3383 0000170B 06                      		push	es
  3384 0000170C 50                      		push	ax
  3385 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  3386                                  					; establish bios segment addressing
  3387 00001710 8ED8                    		mov	ds, ax
  3388                                  		; 16/10/2022
  3389 00001712 C606740000              		mov	byte [disk_status1], 0
  3390                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  3391                                  					; initially no error code.
  3392 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  3393 0000171A 3A167500                		cmp	dl, [hf_num]
  3394                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  3395 0000171E 7207                    		jb	short atd3	; disk number in range
  3396                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  3397 00001720 C606740001              		mov	byte [disk_status1], 1
  3398 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  3399                                  					; return
  3400                                  ; ----------------------------------------------------------------------------
  3401                                  
  3402                                  atd3:					
  3403 00001727 53                      		push	bx
  3404 00001728 8CC0                    		mov	ax, es
  3405 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  3406 0000172D 01D8                    		add	ax, bx
  3407 0000172F 8EC0                    		mov	es, ax
  3408 00001731 5B                      		pop	bx
  3409 00001732 83E30F                  		and	bx, 0Fh
  3410 00001735 0E                      		push	cs
  3411 00001736 E8DF00                  		call	check_dma
  3412 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  3413 0000173B 58                      		pop	ax
  3414 0000173C 50                      		push	ax
  3415 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  3416 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  3417 00001743 EE                      		out	dx, al		; write out command modifier
  3418 00001744 E86B00                  		call	docmd		; carry out command
  3419                                  ; ----------------------------------------------------------------------------
  3420                                  
  3421                                  atd4:	
  3422                                  
  3423                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  3424                                  ;	      and save a couple bytes while were at it.
  3425                                  				
  3426 00001747 58                      		pop	ax
  3427                                  		;mov	ah, ds:74h	; [disk_status1]
  3428 00001748 8A267400                		mov	ah, [disk_status1]
  3429 0000174C 08E4                    		or	ah, ah
  3430 0000174E 7401                    		jz	short atd5
  3431 00001750 F9                      		stc
  3432                                  atd5:					
  3433 00001751 07                      		pop	es
  3434 00001752 1F                      		pop	ds
  3435 00001753 5F                      		pop	di
  3436 00001754 5A                      		pop	dx
  3437 00001755 59                      		pop	cx
  3438 00001756 5B                      		pop	bx
  3439 00001757 CA0200                  		retf	2		; far return, dropping flags
  3440                                  
  3441                                  ; =============== S U B	R O U T	I N E ========================================
  3442                                  
  3443                                  ;***	setcmd - set up cmd_block for the disk operation
  3444                                  ;
  3445                                  ;	entry:	(ds) = bios data segment.
  3446                                  ;		(es:bx) in seg:000x form.
  3447                                  ;		other registers as in int 13h call
  3448                                  ;	
  3449                                  ;	exit:	cmd_block set up for disk read call.
  3450                                  ;		control_byte set up for disk operation.
  3451                                  ;		(al) = control byte modifier
  3452                                  ;
  3453                                  ;	sets the fields of cmd_block using the register contents
  3454                                  ;	and the contents of the disk parameter block for the given drive.
  3455                                  ;
  3456                                  ;	warning: (ax) destroyed.
  3457                                  ;		does direct calls to the at rom.
  3458                                  
  3459                                  setcmd:		; proc near		
  3460                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  3461                                  		; 16/10/2022
  3462 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  3463                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  3464 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  3465 00001762 80FC02                  		cmp	ah, 2
  3466 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  3467 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  3468                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  3469                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  3470                                  setc1:					
  3471 0000176C 88C8                    		mov	al, cl
  3472 0000176E 243F                    		and	al, 3Fh		; mask sector number
  3473                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  3474                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  3475 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  3476 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  3477 00001777 88C8                    		mov	al, cl
  3478 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  3479                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  3480 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  3481 0000177F 89D0                    		mov	ax, dx
  3482 00001781 C0E004                  		shl	al, 4		; drive	number
  3483 00001784 80E40F                  		and	ah, 0Fh
  3484 00001787 08E0                    		or	al, ah		; head number
  3485 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  3486                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  3487 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  3488 0000178E 06                      		push	es
  3489 0000178F 53                      		push	bx
  3490 00001790 0E                      		push	cs
  3491 00001791 E85C00                  		call	get_vec
  3492 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  3493                                  			 		; write pre-comp from disk parameters
  3494 00001798 C1E802                  		shr	ax, 2
  3495                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  3496 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  3497                                  					; only use low part
  3498 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  3499                                  					; control byte modifier
  3500 000017A2 5B                      		pop	bx
  3501 000017A3 07                      		pop	es
  3502                                  		;mov	ah, ds:76h	; [control_byte]
  3503 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  3504 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  3505 000017AB 08C4                    		or	ah, al
  3506                                  		;mov	ds:76h,	ah
  3507 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  3508 000017B1 C3                      		retn
  3509                                  
  3510                                  ; =============== S U B	R O U T	I N E ========================================
  3511                                  
  3512                                  ;***	docmd - carry out read operation to at hard disk
  3513                                  ;
  3514                                  ;	entry:	(es:bx) = address for read in data.
  3515                                  ;		cmd_block set up for disk read.
  3516                                  ;
  3517                                  ;	exit:	buffer at (es:bx) contains data read.
  3518                                  ;		disk_status1 set to error code (0 if success).
  3519                                  ;
  3520                                  ;	
  3521                                  ;
  3522                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  3523                                  ;		no check is made for dma boundary overrun.
  3524                                  ;
  3525                                  ;	effects: programs disk controller.
  3526                                  ;		performs disk input.
  3527                                  
  3528                                  docmd:		; proc near		
  3529 000017B2 89DF                    		mov	di, bx
  3530 000017B4 0E                      		push	cs
  3531 000017B5 E84000                  		call	command
  3532 000017B8 7535                    		jnz	short doc3
  3533                                  doc1:					
  3534 000017BA 0E                      		push	cs
  3535 000017BB E84200                  		call	waitt		; wait for controller to complete read
  3536 000017BE 752F                    		jnz	short doc3
  3537 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  3538 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  3539 000017C6 FC                      		cld			; string op goes up
  3540 000017C7 FA                      		cli			; disable interrupts
  3541                                  					; (bug was forgetting this)
  3542                                  
  3543                                  ;	M062 -- some of these old machines have intermittent failures
  3544                                  ;		when the read is done at full speed. Instead of using
  3545                                  ;		a string rep instruction, we'll use a loop. There is
  3546                                  ;		a slight performance hit, but it only affects these
  3547                                  ;		very old machines with an exact date code match, and
  3548                                  ;		it makes said machines more reliable
  3549                                  ;
  3550                                  ;M062	repz	insw		;read in sector
  3551                                  
  3552                                  rsct_loop:				
  3553 000017C8 6D                      		insw
  3554 000017C9 E2FD                    		loop	rsct_loop
  3555 000017CB FB                      		sti
  3556                                  		; 16/10/2022
  3557 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  3558                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  3559                                  					; (ds =	40h)
  3560 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  3561 000017D3 0E                      		push	cs
  3562 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  3563 000017D7 7216                    		jb	short doc3
  3564 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  3565 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  3566 000017DF FA                      		cli
  3567 000017E0 F36C                    		rep insb		; read in ecc
  3568 000017E2 FB                      		sti
  3569                                  doc2:					
  3570 000017E3 0E                      		push	cs
  3571 000017E4 E82900                  		call	check_status
  3572 000017E7 7506                    		jnz	short doc3	; operation failed
  3573                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  3574 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  3575 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  3576                                  doc3:					
  3577 000017EF C3                      		retn
  3578                                  
  3579                                  ; =============== S U B	R O U T	I N E ========================================
  3580                                  
  3581                                  ;***	define where the rom routines are actually located
  3582                                  ;	   in the buggy old AT BIOS that we might need to
  3583                                  ;	   install a special level of int13 handler for
  3584                                  
  3585                                  ; 16/10/2022
  3586                                  
  3587                                  romsegment 	equ 0F000h  ; segment
  3588                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  3589                                  romwait		equ 2E7Fh   ; offset in romsegment
  3590                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  3591                                  romcheck_status equ 2EF8h   ; offset in romsegment
  3592                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  3593                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  3594                                  romfret		equ 0FF65h  ; far return in rom	
  3595                                  
  3596                                  ;***	get_vec - get pointer to hard disk parameters.
  3597                                  ;
  3598                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  3599                                  ;
  3600                                  ;	exit:	(es:bx) = address of disk parameters table.
  3601                                  ;
  3602                                  ;	uses:	ax for segment computation.
  3603                                  ;
  3604                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  3605                                  ;	or 70h (disk 1).
  3606                                  ;	
  3607                                  ;	warning: (ax) destroyed.
  3608                                  ;		this does a direct call to the at rom.
  3609                                  
  3610                                  get_vec:	; proc near		
  3611                                  		;push	0FF65h		; romfret ; far	return in rom
  3612                                  		;jmp	far ptr	0F000h:2F8Eh
  3613                                  		; 16/10/2022
  3614 000017F0 6865FF                  		push	romfret		; far return in rom
  3615 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  3616                                  
  3617                                  ; =============== S U B	R O U T	I N E ========================================
  3618                                  
  3619                                  ;***	command - send contents of cmd_block to disk controller.
  3620                                  ;
  3621                                  ;	entry:	control_byte 
  3622                                  ;		cmd_block - set up with values for hard disk controller.
  3623                                  ;
  3624                                  ;	exit:	disk_status1 = error code.
  3625                                  ;		nz if error, zr for no error.
  3626                                  ;
  3627                                  ;
  3628                                  ;	warning: (ax), (cx), (dx) destroyed.
  3629                                  ;		does a direct call to the at rom.
  3630                                  ;
  3631                                  ;	effects: programs disk controller.
  3632                                  
  3633                                  command:	; proc near		
  3634                                  		;push	0FF65h		; romfret ; far	return in rom
  3635                                  		;jmp	far ptr	0F000h:2E1Eh
  3636                                  		; 16/10/2022
  3637 000017F8 6865FF                  		push	romfret		; far return in rom
  3638 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  3639                                  
  3640                                  ; =============== S U B	R O U T	I N E ========================================
  3641                                  
  3642                                  ;***	waitt - wait for disk interrupt
  3643                                  ;
  3644                                  ;	entry:	nothing.
  3645                                  ;
  3646                                  ;	exit:	disk_status1 = error code.
  3647                                  ;		nz if error, zr if no error.
  3648                                  ;
  3649                                  ;
  3650                                  ;	warning: (ax), (bl), (cx) destroyed.
  3651                                  ;		does a direct call to the at rom.
  3652                                  ;		
  3653                                  ;	effects: calls int 15h, function 9000h.
  3654                                  
  3655                                  waitt:		; proc near		
  3656                                  		;push	0FF65h		; romfret ; far	return in rom
  3657                                  		;jmp	far ptr	0F000h:2E7Fh
  3658                                  		; 16/10/2022
  3659 00001800 6865FF                  		push	romfret		; far return in rom
  3660 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  3661                                  
  3662                                  ; =============== S U B	R O U T	I N E ========================================
  3663                                  
  3664                                  ;***	wait_drq - wait for data request.
  3665                                  ;
  3666                                  ;	entry:	nothing.
  3667                                  ;
  3668                                  ;	exit:	disk_status1 = error code.
  3669                                  ;		cy if error, nc if no error.
  3670                                  ;
  3671                                  ;	warning: (al), (cx), (dx) destroyed.
  3672                                  ;		does a direct call to the at rom.
  3673                                  
  3674                                  wait_drq:	; proc near		
  3675                                  		;push	0FF65h		; romfret ; far	return in rom
  3676                                  		;jmp	far ptr	0F000h:2EE2h
  3677                                  		; 16/10/2022
  3678 00001808 6865FF                  		push	romfret		; far return in rom
  3679 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  3680                                  
  3681                                  ; =============== S U B	R O U T	I N E ========================================
  3682                                  
  3683                                  ;***	check_status - check hard disk status.
  3684                                  ;
  3685                                  ;	entry:	nothing.
  3686                                  ;
  3687                                  ;	exit:	disk_status1 = error code.
  3688                                  ;		nz if error, zr if no error.
  3689                                  ;
  3690                                  ;	warning: (ax), (cx), (dx) destroyed.
  3691                                  ;		does a direct call to the at rom.
  3692                                  
  3693                                  check_status:	; proc near		
  3694                                  		;push	0FF65h		; romfret ; far	return in rom
  3695                                  		;jmp	far ptr	0F000h:2EF8h
  3696                                  		; 16/10/2022
  3697 00001810 6865FF                  		push	romfret		; far return in rom
  3698 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  3699                                  
  3700                                  ; =============== S U B	R O U T	I N E ========================================
  3701                                  
  3702                                  ;***	check_dma - check for dma overrun 64k segment.
  3703                                  ;
  3704                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  3705                                  ;		cmd_block set up for operation.
  3706                                  ;
  3707                                  ;	exit:	disk_status1 - error code.
  3708                                  ;		cy if error, nc if no error.
  3709                                  ;
  3710                                  ;	warning: does a direct call to the at rom.
  3711                                  
  3712                                  check_dma:	; proc near		
  3713                                  		;push	0FF65h		; romfret ; far	return in rom
  3714                                  		;jmp	far ptr	0F000h:2F69h
  3715                                  		; 16/10/2022
  3716 00001818 6865FF                  		push	romfret		; far return in rom
  3717 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  3718                                  
  3719                                  ;-----------------------------------------------------------------------------
  3720                                  
  3721                                  endatrom:
  3722                                  
  3723                                  ; ----------------------------------------------------------------------------
  3724                                  
  3725                                  ;; M015 -- begin changes
  3726                                  ;;
  3727                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  3728                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  3729                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  3730                                  ;; If our init code detects this error, it will install this
  3731                                  ;; special Int13 hook through the same mechanism that was set
  3732                                  ;; up for the IBM patch above. This code is also dynamically
  3733                                  ;; relocated by MSINIT.
  3734                                  
  3735                                  compaq_disk_io:
  3736 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  3737                                  					;
  3738                                  					; the following	label defines the end of the at	rom patch.
  3739                                  					; this is used at configuration	time.
  3740                                  					;
  3741                                  					; warning!!!
  3742                                  					; this code will be dynamically	relocated by msinit
  3743 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  3744                                  no_hookit:				
  3745                                  		;jmp	cs:Old13
  3746                                  		; 16/10/2022
  3747 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  3748                                  
  3749                                  ; ----------------------------------------------------------------------------
  3750                                  
  3751                                  mebbe_hookit:
  3752 0000182A 80FA80                  		cmp	dl, 80h
  3753 0000182D 72F6                    		jb	short no_hookit
  3754 0000182F 1E                      		push	ds
  3755                                  		
  3756                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3757                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  3758                                  		;push	ax
  3759                                  		;mov	ax, 40h
  3760                                  		;mov	ds, ax
  3761                                  		;pop	ax
  3762 00001830 6A40                    		push	40h
  3763 00001832 1F                      		pop	ds
  3764                                  
  3765 00001833 9C                      		pushf
  3766                                  		;call	cs:Old13
  3767                                  		; 16/10/2022
  3768 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  3769 00001839 1F                      		pop	ds
  3770 0000183A CA0200                  		retf	2
  3771                                  
  3772                                  ; ----------------------------------------------------------------------------
  3773                                  
  3774 0000183D 00                      end_compaq_i13hook: db 0			
  3775                                  
  3776                                  ; =============== S U B	R O U T	I N E ========================================
  3777                                  
  3778                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3779                                  %if 0  
  3780                                  
  3781                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  3782                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  3783                                  
  3784                                  daycnt_to_day:	; proc far
  3785                                  
  3786                                  ; entry: [daycnt] = number of days since 1-1-80
  3787                                  ;
  3788                                  ; return: ch - century in bcd
  3789                                  ;	  cl - year in bcd
  3790                                  ;	  dh - month in bcd
  3791                                  ;	  dl - day in bcd
  3792                                  
  3793                                  		; 16/10/2022		
  3794                                  		push	word [cs:daycnt] ; save daycnt
  3795                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  3796                                  					; # days from 1-1-1980 to 1-1-2000
  3797                                  		jnb	short century20
  3798                                  		mov	byte [cs:base_century], 19
  3799                                  		mov	byte [cs:base_year], 80
  3800                                  		jmp	short years
  3801                                  ; ----------------------------------------------------------------------------
  3802                                  		
  3803                                  century20:				
  3804                                  		mov	byte [cs:base_century], 20
  3805                                  		mov	byte [cs:base_year], 0
  3806                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  3807                                  					; adjust daycnt
  3808                                  years:					
  3809                                  		xor	dx, dx
  3810                                  		mov	ax, [cs:daycnt]
  3811                                  		mov	bx, 1461	; (366+365*3)
  3812                                  					; # of days in a Leap year block
  3813                                  		div	bx		; AX = # of leap block,	DX = daycnt
  3814                                  		mov	[cs:daycnt], dx	; save daycnt left
  3815                                  		mov	bl, 4
  3816                                  		mul	bl		; AX = # of years. Less	than 100
  3817                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  3818                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  3819                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  3820                                  		jbe	short leapyear	; within 366+355+355+355 days.
  3821                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  3822                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  3823                                  		mov	cx, 3		; And next three years are normal
  3824                                  regularyear:				
  3825                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  3826                                  		jbe	short yeardone	; {if (daycnt >	365)
  3827                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  3828                                  		sub	word [cs:daycnt], 365	;   }
  3829                                  		loop	regularyear	; }
  3830                                  					;
  3831                                  					; should never fall through loop
  3832                                  leapyear:				
  3833                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  3834                                  					; change month table.
  3835                                  yeardone:				
  3836                                  		xor	bx, bx
  3837                                  		xor	dx, dx
  3838                                  		mov	ax, [cs:daycnt]
  3839                                  		;mov	si, offset month_tab
  3840                                  		mov	si, month_tab	; 19/10/2022
  3841                                  		mov	cx, 12
  3842                                  months:					
  3843                                  		inc	bl
  3844                                  
  3845                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3846                                  		;mov	dl, [cs:si]
  3847                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3848                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3849                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3850                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3851                                  		
  3852                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3853                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3854                                  					; dh=0
  3855                                  		jbe	short month_done
  3856                                  		inc	si		; next month
  3857                                  		sub	ax, dx		; adjust daycnt
  3858                                  		loop	months		;
  3859                                  					; should never fall through loop
  3860                                  month_done:				
  3861                                  		mov	byte [cs:month_tab+1], 28
  3862                                  					; restore month table value
  3863                                  		mov	dl, bl
  3864                                  		mov	dh, [cs:base_year]
  3865                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3866                                  		call	far [cs:bintobcd]
  3867                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3868                                  					; dl = bcd day,	al = month
  3869                                  		xchg	dl, al
  3870                                  		call	far [cs:bintobcd]
  3871                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3872                                  		xchg	dh, al
  3873                                  		call	far [cs:bintobcd]
  3874                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3875                                  		xchg	cl, al
  3876                                  		call	far [cs:bintobcd]
  3877                                  		;call	cs:bintobcd	; ch = bcd century
  3878                                  		mov	ch, al
  3879                                  		pop	word [cs:daycnt] ; restore original value
  3880                                  		retf
  3881                                  
  3882                                  enddaycnttoday:	
  3883                                  
  3884                                  %endif
  3885                                  
  3886                                  ; =============== S U B	R O U T	I N E ========================================
  3887                                  
  3888                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3889                                  %if 0  
  3890                                  
  3891                                  bin_to_bcd:	; proc far		; real time clock support
  3892                                  
  3893                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3894                                  ;into a bcd value in al. ah destroyed.	
  3895                                  		
  3896                                  		push	cx		
  3897                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3898                                  		mov	cl, 4
  3899                                  		shl	ah, cl		; mov the high digit to	high nibble
  3900                                  		or	al, ah
  3901                                  		pop	cx
  3902                                  		retf
  3903                                  %endif
  3904                                  
  3905                                  ; ----------------------------------------------------------------------------
  3906                                  
  3907                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3908                                  ; resume facility. the system clock needs to be reset after resume.
  3909                                  
  3910                                  ; the following routine is executed at resume time when the system
  3911                                  ; powered on after suspension. it reads the real time clock and
  3912                                  ; resets the system time and date, and then irets.
  3913                                  
  3914                                  ; warning!!! this code will be dynamically relocated by msinit.
  3915                                  
  3916                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3917                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3918                                  int_6Ch:
  3919 0000183E 0E                      		push	cs
  3920 0000183F 1F                      		pop	ds
  3921                                  		;cmp	byte [cs:inHMA], 0  
  3922 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  3923 00001845 7405                    		jz      short int6c
  3924 00001847 BB[2A07]                		mov     bx, EnsureA20On
  3925 0000184A FFD3                    		call    bx
  3926                                  int6c:					
  3927                                  		;push	cs
  3928                                  		;pop	ds
  3929 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  3930 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  3931 00001854 9D                      		popf
  3932 00001855 E81300                  		call	read_real_date	; get the date from the clock
  3933 00001858 FA                      		cli
  3934 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  3935 0000185D FB                      		sti
  3936 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  3937 00001861 FA                      		cli
  3938 00001862 B401                    		mov	ah, 1
  3939 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3940                                  					; CX:DX	= clock	count
  3941                                  					; Return: time of day set
  3942 00001866 FB                      		sti
  3943                                  		;jmp	int6c_ret_addr	; long jump
  3944                                  		; 16/10/2022
  3945 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  3946                                  
  3947                                  ; =============== S U B	R O U T	I N E ========================================
  3948                                  
  3949                                  ;   read_real_date reads real-time clock for date and returns the number
  3950                                  ;   of days elapsed since 1-1-80 in si
  3951                                  
  3952                                  read_real_date:	; proc near		
  3953 0000186B 50                      		push	ax
  3954 0000186C 51                      		push	cx
  3955 0000186D 52                      		push	dx
  3956 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3957 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3958                                  					; Return: CX:DX	= clock	count
  3959                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3960                                  					; midnight
  3961                                  					; Otherwise, AL	> 0
  3962 00001872 5A                      		pop	dx
  3963 00001873 59                      		pop	cx
  3964 00001874 58                      		pop	ax
  3965 00001875 50                      		push	ax
  3966 00001876 53                      		push	bx
  3967 00001877 51                      		push	cx
  3968 00001878 52                      		push	dx
  3969                                  		;mov	word [cs:daycnt2], 1
  3970                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3971                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3972 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  3973                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3974 0000187F B404                    		mov	ah, 4
  3975 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3976                                  					; Return: DL = day in BCD
  3977                                  					; DH = month in	BCD
  3978                                  					; CL = year in BCD
  3979                                  					; CH = century (19h or 20h)
  3980 00001883 7303                    		jnb	short read_ok
  3981 00001885 E98300                  		jmp	r_d_ret
  3982                                  ;-----------------------------------------------------------------------------
  3983                                  
  3984                                  read_ok:
  3985 00001888 882E[FC05]              		mov	[bin_date_time], ch
  3986 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  3987 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  3988 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  3989                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3990                                  		; 08/08/2023
  3991                                  		;mov	byte [daycnt2], 2
  3992 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  3993 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  3994 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  3995                                  		;mov	word [cs:daycnt2], 3
  3996                                  		; 08/08/2023
  3997                                  		;mov	byte [daycnt2], 3
  3998 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  3999 000018A5 E8DB00                  		call	date_verify
  4000 000018A8 7261                    		jb	short r_d_ret
  4001                                  		;mov	word [cs:daycnt2], 0
  4002                                  		; 08/08/2023
  4003 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  4004 000018AF E8A100                  		call	in_bin
  4005 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  4006 000018B5 98                      		cbw
  4007 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  4008 000018BB 7503                    		jnz	short century_19 ; no
  4009 000018BD 83C064                  		add	ax, 100		; add in a century
  4010                                  century_19:				
  4011 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  4012 000018C3 B104                    		mov	cl, 4		; leap year every 4
  4013 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  4014 000018C7 88E3                    		mov	bl, ah		; save odd years
  4015 000018C9 98                      		cbw			; zero ah
  4016 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  4017                                  					; # of days in leap year blocks
  4018 000018CD F7E1                    		mul	cx
  4019                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  4020                                  		; 08/08/2023
  4021 000018CF A3[0006]                		mov	[daycnt2], ax
  4022 000018D2 88D8                    		mov	al, bl		; get odd years	count
  4023 000018D4 98                      		cbw
  4024 000018D5 09C0                    		or	ax, ax
  4025 000018D7 740B                    		jz	short leap_year
  4026 000018D9 B96D01                  		mov	cx, 365		; days in year
  4027 000018DC F7E1                    		mul	cx
  4028                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  4029                                  		; 08/08/2023
  4030 000018DE 0106[0006]              		add	[daycnt2], ax
  4031 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  4032                                  					; possibly account for a leap day
  4033                                  ;-----------------------------------------------------------------------------
  4034                                  
  4035                                  leap_year:
  4036 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  4037 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  4038                                  leap_adjustment:
  4039                                  		;inc	word [cs:daycnt2] ; account for leap day
  4040                                  		; 08/08/2023
  4041 000018EB FF06[0006]              		inc	word [daycnt2]
  4042                                  no_leap_adjustment:			
  4043 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  4044 000018F3 30ED                    		xor	ch, ch
  4045 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  4046                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  4047                                  		; 08/08/2023
  4048 000018F6 010E[0006]              		add	[daycnt2], cx
  4049 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  4050                                  		; 08/08/2023
  4051                                  		;xor	ch, ch
  4052 000018FE 49                      		dec	cx		; january starts at offset 0
  4053                                  		
  4054                                  		; 08/08/2023
  4055                                  		;shl	cx, 1		; word offset
  4056                                  		;;mov	si, month_table
  4057                                  		;add	si, cx
  4058                                  		;; 16/10/2022
  4059                                  		;; ds must be same with cs here, if so..
  4060                                  		;; what for cs: prefixes are used !?)
  4061                                  		;; mov	ax, [cs:si]
  4062                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  4063                                  		;mov	ax, [si]	; mov ax, [cs:si]
  4064                                  		;			; get #	days in	previous months
  4065                                  		;add	[cs:daycnt2], ax
  4066                                  
  4067                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  4068                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  4069 000018FF B400                    		mov	ah, 0
  4070 00001901 BE[8F04]                		mov	si, month_tab
  4071                                  r_d_sum_loop:
  4072 00001904 AC                      		lodsb
  4073 00001905 0106[0006]              		add	[daycnt2], ax
  4074 00001909 E2F9                    		loop	r_d_sum_loop
  4075                                  r_d_ret:
  4076                                  		;mov	si, [cs:daycnt2]
  4077                                  		; 08/08/2023
  4078 0000190B 8B36[0006]              		mov	si, [daycnt2]
  4079 0000190F 5A                      		pop	dx
  4080 00001910 59                      		pop	cx
  4081 00001911 5B                      		pop	bx
  4082 00001912 58                      		pop	ax
  4083 00001913 C3                      		retn
  4084                                  
  4085                                  ;-----------------------------------------------------------------------------
  4086                                  
  4087                                  r_t_retj:				
  4088 00001914 31C9                    		xor	cx, cx
  4089 00001916 31D2                    		xor	dx, dx
  4090 00001918 EB38                    		jmp	short r_t_ret
  4091                                  
  4092                                  ; =============== S U B	R O U T	I N E ========================================
  4093                                  
  4094                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  4095                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  4096                                  
  4097                                  read_real_time:	; proc near		
  4098 0000191A B402                    		mov	ah, 2
  4099 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  4100                                  					; Return: CH = hours in	BCD
  4101                                  					; CL = minutes in BCD
  4102                                  					; DH = seconds in BCD
  4103 0000191E 72F4                    		jb	short r_t_retj
  4104 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  4105 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  4106 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  4107 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  4108 00001931 E89F00                  		call	bcd_verify
  4109 00001934 72DE                    		jb	short r_t_retj
  4110 00001936 E88500                  		call	time_verify
  4111 00001939 72D9                    		jb	short r_t_retj
  4112 0000193B E81500                  		call	in_bin		; from bcd to bin
  4113 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  4114 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  4115 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  4116 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  4117                                  		; 16/10/2022
  4118                                  		; 17/09/2022
  4119                                  		; 31/05/2019
  4120 0000194E FF1E[0606]              		call	far [ttticks] 
  4121                                  		;call	dword ptr ttticks ; note: indirect far call
  4122                                  					; cx:dx	= number of ticks
  4123                                  					; (at 18.2 ticks per sec.)
  4124                                  r_t_ret:				
  4125 00001952 C3                      		retn
  4126                                  
  4127                                  ; =============== S U B	R O U T	I N E =======================================
  4128                                  
  4129                                  ;   in_bin converts bin_date_time values from bcd to bin
  4130                                  
  4131                                  in_bin:		; proc near
  4132 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  4133 00001956 E81F00                  		call	bcd_to_bin
  4134 00001959 A2[FC05]                		mov	[bin_date_time], al
  4135 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  4136 0000195F E81600                  		call	bcd_to_bin
  4137 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  4138 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  4139 00001968 E80D00                  		call	bcd_to_bin
  4140 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  4141 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  4142 00001971 E80400                  		call	bcd_to_bin
  4143 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  4144 00001977 C3                      		retn
  4145                                  
  4146                                  ; =============== S U B	R O U T	I N E =======================================
  4147                                  
  4148                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  4149                                  ;   a binary representation in al
  4150                                  ;   ah is destroyed
  4151                                  
  4152                                  bcd_to_bin:	; proc near
  4153 00001978 88C4                    		mov	ah, al
  4154 0000197A 240F                    		and	al, 0Fh
  4155 0000197C B104                    		mov	cl, 4
  4156 0000197E D2EC                    		shr	ah, cl
  4157 00001980 D50A                    		aad
  4158 00001982 C3                      		retn
  4159                                  
  4160                                  ; =============== S U B	R O U T	I N E ========================================
  4161                                  
  4162                                  ;   date_verify loosely checks bcd date values to be in range
  4163                                  ;   in bin_date_time
  4164                                  
  4165                                  date_verify:	; proc near
  4166 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  4167 00001988 7732                    		ja	short date_error
  4168 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  4169 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  4170                                  		;jb	short date_error
  4171                                  		; 12/12/2022
  4172 00001991 722A                    		jb	short date_err2
  4173 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  4174                                  		;jb	short date_error
  4175                                  		; 12/12/2022
  4176 00001998 7223                    		jb	short date_err2
  4177                                  century_20:
  4178 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  4179 0000199F 771B                    		ja	short date_error
  4180 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  4181 000019A6 7714                    		ja	short date_error
  4182 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  4183                                  		;jbe	short date_error
  4184 000019AD 760D                    		jna	short date_error
  4185 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  4186 000019B4 7706                    		ja	short date_error
  4187                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  4188                                  		;;jbe	short date_error
  4189                                  		;jna	short date_error
  4190                                  		; 12/12/2022
  4191                                  		; cf=0
  4192                                  		;clc
  4193                                  		; 12/12/2022
  4194 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  4195 000019BB C3                      		retn
  4196                                  ;-----------------------------------------------------------------------------
  4197                                  
  4198                                  date_error:
  4199 000019BC F9                      		stc
  4200                                  date_err2:
  4201 000019BD C3                      		retn
  4202                                  
  4203                                  ; =============== S U B	R O U T	I N E ========================================
  4204                                  
  4205                                  ; time_verify very loosely checks bcd date values to be in range
  4206                                  ; in bin_date_time
  4207                                  
  4208                                  time_verify:	; proc near
  4209 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  4210 000019C3 770C                    		ja	short time_error
  4211 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  4212 000019CA 7705                    		ja	short time_error
  4213                                  		; 12/12/2022h
  4214                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  4215                                  		;ja	short time_error
  4216                                  		;clc
  4217                                  		;retn
  4218                                  		; 12/12/2022
  4219 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  4220                                  time_error:
  4221                                  bv_error:
  4222 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  4223 000019D2 C3                      		retn
  4224                                  
  4225                                  ; ----------------------------------------------------------------------------
  4226                                  
  4227                                  ;time_error:				
  4228                                  		;stc
  4229                                  		;retn
  4230                                  
  4231                                  ; =============== S U B	R O U T	I N E ========================================
  4232                                  
  4233                                  ;   bcd_verify checks values in bin_date_time to be valid
  4234                                  ;   bcd numerals.  carry set if any nibble out of range
  4235                                  
  4236                                  bcd_verify:	; proc near
  4237 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  4238 000019D6 BB[FC05]                		mov	bx, bin_date_time
  4239                                  bv_loop:
  4240 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  4241 000019DB 88C4                    		mov	ah, al
  4242 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  4243                                  					; is 1's place in range?
  4244 000019E0 3C0A                    		cmp	al, 10
  4245 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  4246 000019E4 D0EC                    		shr	ah, 1
  4247 000019E6 D0EC                    		shr	ah, 1
  4248 000019E8 D0EC                    		shr	ah, 1
  4249 000019EA D0EC                    		shr	ah, 1
  4250 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  4251 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  4252 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  4253 000019F4 43                      		inc	bx		; next byte
  4254 000019F5 49                      		dec	cx
  4255 000019F6 75E1                    		jnz	short bv_loop
  4256 000019F8 F8                      		clc			; set success flag
  4257 000019F9 C3                      		retn
  4258                                  ; ----------------------------------------------------------------------------
  4259                                  
  4260                                  		; 12/12/2022
  4261                                  ;bv_error:
  4262                                  		;stc			; set error flag
  4263                                  		;retn
  4264                                  
  4265                                  ; ----------------------------------------------------------------------------
  4266                                  
  4267                                  endk09:
  4268                                  
  4269                                  ; ----------------------------------------------------------------------------
  4270                                  
  4271                                  ;------------------------------------------------------------------------
  4272                                  ;									:
  4273                                  ;	System initialization						:
  4274                                  ;									:
  4275                                  ;	The entry conditions are established by the bootstrap		:
  4276                                  ;	loader and are considered unknown. The following jobs		:
  4277                                  ;	will be performed by this module:				:
  4278                                  ;									:
  4279                                  ;	1.	All device initialization is performed			:
  4280                                  ;	2.	A local stack is set up and DS:SI are set		:
  4281                                  ;		to point to an initialization table. Then		:
  4282                                  ;		an inter-segment call is made to the first		:
  4283                                  ;		byte of the dos 					:
  4284                                  ;	3.	Once the dos returns from this call the ds		:
  4285                                  ;		register has been set up to point to the start		:
  4286                                  ;		of free memory. The initialization will then		:
  4287                                  ;		load the command program into this area 		:
  4288                                  ;		beginning at 100 hex and transfer control to		:
  4289                                  ;		this program.						:
  4290                                  ;									:
  4291                                  ;------------------------------------------------------------------------
  4292                                  
  4293                                  ; 01/10/2022
  4294                                  ; 08/01/2018 - Retro DOS v4.0
  4295                                  
  4296                                  ; drvfat must be the first location of freeable space!
  4297                                  
  4298                                  align 2
  4299                                  		;db 90h
  4300                                  
  4301                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4302                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  4303                                  
  4304                                  ; 30/12/2022
  4305                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  4306                                  	
  4307 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  4308                                  ; 09/12/2023
  4309                                  ;bios_l:	dw 0			; first	sector of data (low word)
  4310                                  ;bios_h:	dw 0			; first	sector of data (high word)
  4311                                  First_Data_Sector:
  4312 000019FC 0000                    		dw 0
  4313 000019FE 0000                    		dw 0
  4314 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  4315                                  ;fbigfat:	db 0			; flags	for drive
  4316 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  4317 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  4318                                  ; 09/12/2023
  4319 00001A06 00                      fbigfat:	db 0			; flags	for drive
  4320 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  4321 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  4322                                  ; 12/12/2023
  4323                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  4324 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  4325                                  
  4326                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  4327                                  ; call to determine drive parameters.
  4328                                  
  4329 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  4330 00001A0D 00                      		db 0	; 09/12/2023
  4331                                  ;sec_trk:	db 9			; sec/trk returned by rom
  4332 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  4333 00001A0F 00                      		db 0	; 09/12/2023
  4334                                  ; 09/12/2023
  4335 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  4336 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  4337                                  
  4338                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4339                                  Orig_Int1Eh_Table:
  4340 00001A12 0000                    		dw 0
  4341 00001A14 0000                    		dw 0
  4342                                  
  4343                                  ; ----------------------------------------------------------------------------
  4344                                  
  4345                                  ; 09/12/2023
  4346                                  %if 0
  4347                                  
  4348                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  4349                                  		dw 2048, 0201h, 112, 0
  4350                                  		dw 8192, 0402h, 256, 0
  4351                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  4352                                  		dw 65535, 1004h, 1024, 0
  4353                                  					; default disktable under
  4354                                  					; the assumption of total fat size <= 128 kb,
  4355                                  					; and the maximum size of fat entry = 16 bit.
  4356                                  %endif
  4357                                  
  4358                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4359                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  4360                                  
  4361                                  		; 09/12/2023
  4362                                  		; 08/08/2023
  4363                                  		; disktable.totalsectors: resw 1 ; high word
  4364                                  		;			  resw 1 ; low word
  4365                                  		; disktable.shiftcount:   resb 1
  4366                                  		; disktable.secperclus:   resb 1
  4367                                  		; disktable.rdirentries:  resw 1
  4368                                  		; disktable.bigflag:      resw 1
  4369 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  4369 00001A1F 00                 
  4370                                  					   ; (32680 sectors, 16340 KB)
  4371 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  4371 00001A29 00                 
  4372                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  4373 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  4373 00001A33 00                 
  4374 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  4374 00001A3D 00                 
  4375 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  4375 00001A47 00                 
  4376 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  4376 00001A51 00                 
  4377                                  		; 09/12/2023
  4378                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  4379 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  4379 00001A5B 00                 
  4380                                  					   ; (fbig and fbigbig flags are set)			
  4381                                  			
  4382                                  ; ----------------------------------------------------------------------------
  4383                                  
  4384                                  ;******************************************************
  4385                                  ;variables for mini disk initialization
  4386                                  ;******************************************************
  4387                                  
  4388                                  ; 01/10/2022
  4389                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  4390                                  
  4391 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  4392 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  4393 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  4394 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  4395                                  					; of bds table. needed to figure out
  4396                                  					; the dosdatasg address.
  4397 00001A62 0000                    mini_hdlim:	dw 0			
  4398 00001A64 0000                    mini_seclim:	dw 0
  4399                                  
  4400                                  ; 19/12/2023
  4401                                  ; 09/12/2023
  4402                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  4403                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  4404                                  
  4405                                  ;end of mini disk init variables **********************
  4406                                  
  4407                                  ; ----------------------------------------------------------------------------
  4408                                  			
  4409 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  4410                                  
  4411                                  ; 13/12/2022
  4412                                  %if 0
  4413                                  
  4414                                  ;align 2
  4415                                  		db  90h	
  4416                                  
  4417                                  ; the following are the recommended bpbs for the media that we know of so far.
  4418                                  
  4419                                  ;struc bpbx
  4420                                  ;   resw 1 ; 512
  4421                                  ;   resb 1
  4422                                  ;   resw 1 ; 1
  4423                                  ;   resb 1 ; 2
  4424                                  ;   resw 1
  4425                                  ;   resw 1
  4426                                  ;   resb 1
  4427                                  ;   resw 1
  4428                                  ;   resw 1
  4429                                  ;   resw 1 ; 2
  4430                                  ;   resw 1
  4431                                  ;   resw 1 ; hidden sector high
  4432                                  ;   resd 1 ; extended total sectors
  4433                                  ;.size:
  4434                                  ;endstruc
  4435                                  
  4436                                  ; 08/01/2019 - Retro DOS v4.0
  4437                                  
  4438                                  ; 20/04/2019
  4439                                  
  4440                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  4441                                  
  4442                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4443                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  4444                                  
  4445                                  ; 09/12/2022
  4446                                  BPB48T:
  4447                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  4448                                  		; 48 tpi diskettes	;
  4449                                  		dw	512		; physical sector size in bytes
  4450                                  		db	2		; sectors/allocation unit
  4451                                  		dw	1		; reserved sectors for dos
  4452                                  		db	2		; number of allocation tables
  4453                                  		dw	112		; number of directory entries
  4454                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  4455                                  		db	0FDh		; media descriptor
  4456                                  		dw	2		; number of fat sectors
  4457                                  		dw	9		; sectors per track
  4458                                  		dw	2		; heads
  4459                                  		dw	0		; hidden sector count (low word)
  4460                                  		dw	0		; hidden sector (high)
  4461                                  		dw	0		; number of sectors (low)
  4462                                  		dw	0		; number of sectors (high)
  4463                                  		; 09/12/2023
  4464                                  		; FAT32 extensions (to BDS)
  4465                                  		times	28 db 0
  4466                                  		;
  4467                                  		db 90h
  4468                                  ;align 2
  4469                                  BPB96T:
  4470                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  4471                                  		; 96 tpi diskettes	;
  4472                                  		dw	512		; physical sector size in bytes
  4473                                  		db	1		; sectors/allocation unit
  4474                                  		dw	1		; reserved sectors for dos
  4475                                  		db	2		; number of allocation tables
  4476                                  		dw	224		; number of directory entries
  4477                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  4478                                  		db	0F9h		; media descriptor
  4479                                  		dw	7		; number of fat sectors
  4480                                  		dw	15		; sectors per track
  4481                                  		dw	2		; heads
  4482                                  		dw	0		; hidden sector count (low word)
  4483                                  		dw	0		; hidden sector (high)
  4484                                  		dw	0		; number of sectors (low)
  4485                                  		dw	0		; number of sectors (high)
  4486                                  		; 09/12/2023
  4487                                  		; FAT32 extensions (to BDS)
  4488                                  		times	28 db 0
  4489                                  		;
  4490                                  		db 90h
  4491                                  ;align 2
  4492                                  BPB35:
  4493                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  4494                                  		; 3.5" diskettes - 720 KB ;		
  4495                                  		dw	512		; physical sector size in bytes
  4496                                  		db	2		; sectors/allocation unit
  4497                                  		dw	1		; reserved sectors for dos
  4498                                  		db	2		; number of allocation tables
  4499                                  		dw	112		; number of directory entries
  4500                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  4501                                  		db	0F9h		; media descriptor
  4502                                  		dw	3		; number of fat sectors
  4503                                  		dw	9		; sectors per track
  4504                                  		dw	2		; heads
  4505                                  		dw	0		; hidden sector count (low word)
  4506                                  		dw	0		; hidden sector (high)
  4507                                  		dw	0		; number of sectors (low)
  4508                                  		dw	0		; number of sectors (high)
  4509                                  		; 09/12/2023
  4510                                  		; FAT32 extensions (to BDS)
  4511                                  		times	28 db 0
  4512                                  		;
  4513                                  		db 90h
  4514                                  ;align 2
  4515                                  
  4516                                  ;align 2
  4517                                  ;BPB144:
  4518                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  4519                                  ;
  4520                                  ;		dw	512		; physical sector size in bytes
  4521                                  ;		db	1		; sectors/allocation unit
  4522                                  ;		dw	1		; reserved sectors for dos
  4523                                  ;		db	2		; number of allocation tables
  4524                                  ;		dw	224		; number of directory entries
  4525                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  4526                                  ;		db	0F0h		; media descriptor
  4527                                  ;		dw	9		; number of fat sectors
  4528                                  ;		dw	18		; sectors per track
  4529                                  ;		dw	2		; heads
  4530                                  ;		dw	0		; hidden sector count (low word)
  4531                                  ;		dw	0		; hidden sector (high)
  4532                                  ;		dw	0		; number of sectors (low)
  4533                                  ;		dw	0		; number of sectors (high)
  4534                                  ;
  4535                                  ;		db 90h
  4536                                  ;align 2
  4537                                  
  4538                                  BPB288:
  4539                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  4540                                  		; 3.5" diskettes - 2.88 MB ;	 
  4541                                  		dw	512		; physical sector size in bytes
  4542                                  		db	2		; sectors/allocation unit
  4543                                  		dw	1		; reserved sectors for dos
  4544                                  		db	2		; number of allocation tables
  4545                                  		dw	240		; number of directory entries
  4546                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  4547                                  		db	0F0h		; media descriptor
  4548                                  		dw	3		; number of fat sectors
  4549                                  		dw	9		; sectors per track
  4550                                  		dw	2		; heads
  4551                                  		dw	0		; hidden sector count (low word)
  4552                                  		dw	0		; hidden sector (high)
  4553                                  		dw	0		; number of sectors (low)
  4554                                  		dw	0		; number of sectors (high)
  4555                                  		; 09/12/2023
  4556                                  		; FAT32 extensions (to BDS)
  4557                                  		times	28 db 0
  4558                                  		;
  4559                                  		db 90h
  4560                                  ;align 2
  4561                                  
  4562                                  %endif
  4563                                  
  4564                                  ; ----------------------------------------------------------------------------
  4565                                  					; align	2
  4566                                  ; 09/12/2022
  4567                                  %if 0
  4568                                  bpbtable:	dw bpb48t		; 48tpi	drives
  4569                                  		dw bpb96t		; 96tpi	drives
  4570                                  		dw bpb35		; 3.5" drives
  4571                                  		dw bpb35		; unused 8" diskette
  4572                                  		dw bpb35		; unused 8" diskette
  4573                                  		dw bpb35		; used for hard	disk
  4574                                  		dw bpb35		; used for tape	drive
  4575                                  		dw bpb35		; FFOTHER
  4576                                  		dw bpb35		; ERIMO
  4577                                  		dw bpb288		; 2.88MB drive
  4578                                  		;
  4579                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  4580                                  %endif
  4581                                  
  4582                                  ; 13/12/2022
  4583                                  %if 0
  4584                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  4585                                  		dw BPB96T		; 96tpi	drives
  4586                                  		dw BPB35		; 3.5" drives
  4587                                  		dw BPB35		; unused 8" diskette
  4588                                  		dw BPB35		; unused 8" diskette
  4589                                  		dw BPB35		; used for hard	disk
  4590                                  		dw BPB35		; used for tape	drive
  4591                                  		dw BPB35		; FFOTHER
  4592                                  		dw BPB35		; ERIMO
  4593                                  		dw BPB288		; 2.88MB drive
  4594                                  		;
  4595                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  4596                                  
  4597                                  %endif
  4598                                  
  4599                                  ; ----------------------------------------------------------------------------
  4600                                  
  4601                                  ;	entry point to call utility functions in Bios_Code. At this time,
  4602                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  4603                                  ;	  will not yet be moved to its final resting place, so we know
  4604                                  ;	  it'll be low.
  4605                                  ;
  4606                                  ;	to use this function, do a "push cs" and load bp with the offset of
  4607                                  ;	  the function you want to call in Bios_Code. This routine will
  4608                                  ;	  push the address of a retf in Bios_Code onto the stack which
  4609                                  ;	  will get executed when the utility function finishes. It will
  4610                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  4611                                  ;	  and a retf
  4612                                  
  4613                                  ; 16/10/2022
  4614                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  4615                                  ; 09/12/2022
  4616                                  BC_RETF equ bc_retf
  4617                                  
  4618                                  ; 09/12/2023
  4619                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  4620                                  
  4621                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  4622                                  					; 2C7h:0C8h = 70h:2638h
  4623                                  					; 09/12/2023
  4624                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  4625 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  4626                                  
  4627                                  ; ----------------------------------------------------------------------------
  4628                                  
  4629                                  call_bios_code:	; proc far			
  4630 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  4631                                  					; set up near return to far return
  4632 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  4633 00001A7B 55                      		push	bp		; save offset of utility function
  4634 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  4635                                  
  4636                                  ; ----------------------------------------------------------------------------
  4637                                  
  4638                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  4639                                  		; 20/12/2022
  4640 00001A7D 00                      flp_drvs:	db 0
  4641                                  		; 11/12/2023
  4642                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  4643                                  firstcluster_hw: 
  4644 00001A7E 0000                    		dw 0	; 06/04/2024
  4645 00001A80 00                      Boot_Drv:	db 0
  4646                                  
  4647                                  ; ----------------------------------------------------------------------------
  4648                                  
  4649                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4650                                  ;-----------------------------------------------------------------------------
  4651                                  ; PCDOS 7.1 CD BOOT option code 
  4652                                  ;-----------------------------------------------------------------------------
  4653                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  4654                                  
  4655                                  cd_boot_option:
  4656 00001A81 50                      		push	ax
  4657 00001A82 1E                      		push	ds
  4658 00001A83 06                      		push	es
  4659 00001A84 52                      		push	dx
  4660                                  cdbo_1:
  4661 00001A85 B401                    		mov	ah, 1
  4662 00001A87 CD16                    		int	16h			; KEYBOARD - status
  4663 00001A89 7406                    		jz	short cdbo_2
  4664 00001A8B 30E4                    		xor	ah, ah
  4665 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4666                                  						; Return: AH = scan code, AL = character
  4667 00001A8F EBF4                    		jmp	short cdbo_1
  4668                                  cdbo_2:
  4669 00001A91 0E                      		push	cs
  4670 00001A92 1F                      		pop	ds
  4671 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  4672 00001A96 AC                      		lodsb
  4673                                  cdbo_3:
  4674 00001A97 BB0700                  		mov	bx, 7
  4675 00001A9A B40E                    		mov	ah, 0Eh
  4676 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4677                                  						; AL = character, BH = display page (alpha modes)
  4678                                  						; BL = foreground color (graphics modes)
  4679 00001A9E AC                      		lodsb
  4680 00001A9F 08C0                    		or	al, al
  4681 00001AA1 75F4                    		jnz	short cdbo_3
  4682 00001AA3 B84000                  		mov	ax, 40h
  4683 00001AA6 8ED8                    		mov	ds, ax
  4684                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  4685                                  		; 09/12/2023
  4686 00001AA8 8B166C00                		mov	dx, [6Ch]
  4687 00001AAC 8B366E00                		mov	si, [6Eh]
  4688                                  wait_for_key:
  4689                                  		;push	bx
  4690                                  		;mov	bx, 7
  4691                                  		; bx = 7
  4692 00001AB0 B8080E                  		mov	ax, 0E08h
  4693 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4694                                  						; AL = character, BH = display page (alpha modes)
  4695                                  						; BL = foreground color (graphics modes)
  4696 00001AB5 B8200E                  		mov	ax, 0E20h
  4697 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4698                                  						; AL = character, BH = display page (alpha modes)
  4699                                  						; BL = foreground color (graphics modes)
  4700 00001ABA B8080E                  		mov	ax, 0E08h
  4701 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4702                                  						; AL = character, BH = display page (alpha modes)
  4703                                  						; BL = foreground color (graphics modes)
  4704                                  		;pop	bx
  4705                                  		;add	bx, 18			; 18.2 ticks per second
  4706                                  		; 09/12/2023
  4707 00001ABF 83C212                  		add	dx, 18
  4708 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  4709                                  continue_to_wait:
  4710 00001AC5 B401                    		mov	ah, 1
  4711 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  4712 00001AC9 741B                    		jz	short cdbo_5
  4713 00001ACB B400                    		mov	ah, 0
  4714 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4715                                  						; Return: AH = scan code, AL = character
  4716                                  
  4717                                  		; 09/12/2023
  4718                                  		;cmp	ax, 11Bh ; ESC key
  4719                                  		;jz	short cdb0_7
  4720                                  ;cdbo_4:
  4721                                  		;push	ax ; *
  4722 00001ACF 89C2                    		mov	dx, ax ; *
  4723                                  
  4724                                  		; CRLF (next line)
  4725                                  		;mov	bx, 7
  4726                                  		; bx = 7
  4727 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  4728 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4729                                  						; AL = character, BH = display page (alpha modes)
  4730                                  						; BL = foreground color (graphics modes)
  4731 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  4732 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4733                                  						; AL = character, BH = display page (alpha modes)
  4734                                  						; BL = foreground color (graphics modes)
  4735                                  		; 09/12/2023
  4736                                  		;pop	ax ; *
  4737                                  			
  4738 00001ADB 81FA1B01                		cmp	dx, 11Bh
  4739                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  4740 00001ADF 7418                    		je	short cdbo_7
  4741                                  
  4742                                  cdbo_4:		; 10/12/2023
  4743 00001AE1 5A                      		pop	dx
  4744 00001AE2 07                      		pop	es
  4745 00001AE3 1F                      		pop	ds
  4746 00001AE4 58                      		pop	ax
  4747 00001AE5 C3                      		retn
  4748                                  cdbo_5:
  4749 00001AE6 3B366E00                		cmp	si, [6Eh]
  4750 00001AEA 7504                    		jnz	short cdbo_6
  4751                                  		; 09/12/2023
  4752 00001AEC 3B166C00                		cmp	dx, [6Ch]
  4753                                  		;cmp	bx, [6Ch]
  4754                                  cdbo_6:
  4755 00001AF0 73D3                    		jnb	short continue_to_wait
  4756 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  4757 00001AF7 75B7                    		jnz	short wait_for_key
  4758                                  cdbo_7:
  4759                                  		; 09/12/2023
  4760                                  		; CRLF (next line)
  4761                                  		;
  4762                                  		;mov	bx, 7
  4763                                  		;mov	ax, 0E0Dh
  4764                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4765                                  		;				; AL = character, BH = display page (alpha modes)
  4766                                  		;				; BL = foreground color (graphics modes)
  4767                                  		;mov	ax, 0E0Ah
  4768                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4769                                  		;				; AL = character, BH = display page (alpha modes)
  4770                                  		;				; BL = foreground color (graphics modes)
  4771                                  		
  4772 00001AF9 0E                      		push	cs
  4773 00001AFA 1F                      		pop	ds
  4774                                  		; 09/12/2023
  4775 00001AFB 1E                      		push	ds
  4776 00001AFC 07                      		pop	es
  4777                                  		; es = ds = cs
  4778                                  
  4779 00001AFD B8004B                  		mov	ax, 4B00h
  4780                                  		;xor	dl, dl
  4781                                  		; 09/12/2023
  4782 00001B00 31D2                    		xor	dx, dx
  4783                                  		; dl = disk drive = 0  ; fd
  4784                                  		;mov	si, 1C93h
  4785 00001B02 BE[571B]                		mov	si, empty_dap_buff
  4786 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4787                                  		; DS:SI = Specification packet filled		
  4788                                  
  4789                                  		;mov	dx, 80h
  4790                                  		;xor	ax, ax
  4791                                  		; 09/12/2023
  4792 00001B07 B81300                  		mov	ax, 19
  4793 00001B0A 89F7                    		mov	di, si	
  4794                                  		;mov	byte [si], 13h
  4795                                  		;mov	[si+1], al
  4796 00001B0C AB                      		stosw	
  4797                                  		;mov	[si+2], dx
  4798 00001B0D B080                    		mov	al, 80h
  4799 00001B0F AB                      		stosw
  4800 00001B10 89C2                    		mov	dx, ax
  4801                                  		;mov	[si+4], ax
  4802                                  		;mov	[si+6], ax
  4803                                  		;mov	[si+8], ax
  4804                                  		;mov	[si+0Ah], ax
  4805                                  		;mov	[si+0Ch], ax
  4806                                  		;mov	[si+0Eh], ax
  4807                                  		;mov	[si+10h], al
  4808                                  		;mov	[si+11h], al
  4809                                  		;mov	[si+12h], al
  4810 00001B12 B90F00                  		mov	cx, 15
  4811 00001B15 F3AA                    		rep	stosb
  4812                                  		; dl = disk drive = 80h ; hd
  4813 00001B17 B8004B                  		mov	ax, 4B00h
  4814 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4815 00001B1C 31C0                    		xor	ax, ax
  4816                                  		; 09/12/2023
  4817                                  		;mov	dx, 80h
  4818                                  		; dx = 80h
  4819 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  4820                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  4821                                  		; 09/12/2023
  4822                                  		;push	cs
  4823                                  		;pop	es
  4824                                  		; es = ds = cs		
  4825                                  
  4826 00001B20 B80102                  		mov	ax, 201h
  4827                                  		;mov	bx, 152h
  4828 00001B23 BB[5201]                		mov	bx, disksector
  4829                                  		;mov	cx, 1
  4830                                  		; 09/12/2023
  4831 00001B26 41                      		inc	cx ; cx = 1
  4832                                  		;mov	dx, 80h
  4833                                  		; dx = 80h
  4834 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  4835                                  						; AL = number of sectors to read, CH = track, CL = sector
  4836                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  4837                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  4838                                  		;jc	short cdbo_8
  4839                                  		; 10/12/2023
  4840 00001B29 72B6                    		jc	short cdbo_4
  4841                                  
  4842 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  4843                                  		;jz 	short cdbo_9
  4844                                  		; 10/12/2023
  4845 00001B32 75AD                    		jnz	short cdbo_4
  4846                                  ;cdbo_8:
  4847                                  		;jmp	short cdbo_4
  4848                                  ;cdbo_9:
  4849                                  		; 10/12/2023
  4850                                  		; (stack clearing -pop- is not necessary here, 
  4851                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  4852                                  		;pop	ax ; near call return address
  4853                                  		;pop	cx ; +++ ; ch = [MediaByte]
  4854                                  
  4855                                  		; 09/12/2023
  4856                                  		;push	cs
  4857                                  		;pop	ds
  4858                                  		; ds = cs
  4859 00001B34 31C0                    		xor	ax, ax	; 0
  4860 00001B36 BF007C                  		mov	di, 7C00h
  4861 00001B39 8EC0                    		mov	es, ax
  4862 00001B3B 89DE                    		mov	si, bx
  4863 00001B3D 06                      		push	es
  4864 00001B3E 57                      		push	di
  4865 00001B3F B90001                  		mov	cx, 100h ; 256
  4866                                  		; 10/12/2023
  4867                                  		;cld	; not necessary (direction flag is already cleared) 
  4868 00001B42 F3A5                    		rep movsw
  4869 00001B44 8ED8                    		mov	ds, ax
  4870 00001B46 BE7800                  		mov	si, 78h
  4871 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  4872 00001B4D 8904                    		mov	[si], ax
  4873 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  4874 00001B53 894402                  		mov	[si+2], ax
  4875 00001B56 CB                      		retf
  4876                                  
  4877                                  ; ----------------------------------------------------------------------------
  4878                                  dap_buffer: ; 16/12/2023
  4879                                  
  4880 00001B57 13                      empty_dap_buff:	db 19
  4881                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  4882 00001B58 00<rep 12h>             		times 18 db 0
  4883 00001B6A 05                      time_counter:	db 5	; 5 seconds
  4884 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  4885                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  4886                                  		; 09/12/2023
  4887 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  4887 00001B76 206B657920746F2062-
  4887 00001B7F 6F6F742066726F6D20-
  4887 00001B88 4344206F7220445644-
  4887 00001B91 202E2E2E00         
  4888                                  
  4889                                  ; ----------------------------------------------------------------------------
  4890                                  
  4891                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  4892                                  
  4893                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  4894                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  4895                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  4896                                  
  4897                                  ;-----------------------------------------------------------------------------
  4898                                  ; entry point from boot sector
  4899                                  ;-----------------------------------------------------------------------------
  4900                                  
  4901                                  init:		; 27/12/2018
  4902                                  		; MSDOS 6.0 (MSINIT.ASM)
  4903                                  		;=============================================================
  4904                                  		;
  4905                                  		; entry from boot sector. the register contents are:
  4906                                  		;
  4907                                  		;   dl = int 13 drive number we booted from
  4908                                  		;   ch = media byte
  4909                                  		;   bx = first data sector on disk.
  4910                                  		;   ax = first data sector (high)
  4911                                  		;   di = sectors/fat for the boot media.
  4912                                  
  4913                                  		; 10/12/2023
  4914                                  		; Retro DOS v5.0 (IBMBIO.COM)
  4915                                  		;=============================================================
  4916                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  4917                                                  ; DL = [BootDrive]
  4918                                  		; CH = [MediaByte]
  4919                                  		; AX:BX = First data Sector
  4920                                  		; DS:SI = Original INT 1Eh table address
  4921                                  		;
  4922                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  4923                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  4924                                  		; DI = 78h !not used!
  4925                                  
  4926                                  		; 07/04/2018
  4927                                  		;=============================================================
  4928                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  4929                                                  ; DL = [bsDriveNumber]
  4930                                  		; DH = [bsMedia]
  4931                                  		; AX = [bsSectors] ; Total sectors
  4932                                  		; DS = 0, SS = 0
  4933                                  		; BP = 7C00h
  4934                                  
  4935                                  		; 29/09/2023
  4936                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  4937                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  4938                                  
  4939                                  		; 10/12/2023 - Retro DOS v5.0
  4940                                  		; ------------------------------------------------------------
  4941                                  		; INPUT (registers from Retro DOS v4-v5 boot sector):
  4942                                  		;  DL = [bsDriveNumber]
  4943                                  		;  DH = [bsMedia]
  4944                                  		;  SS = 0
  4945                                  		;  BP = 7C00h (boot sector address)
  4946                                  		;
  4947                                  		; If the boot drive is a CD (CDROM) or DVD
  4948                                  		;    and CD boot option is enabled/requested:
  4949                                  		;    AX = 'CD'
  4950                                  		; If the boot drive is a FD or HD 
  4951                                  		;    or CD boot option is not enabled/requested:
  4952                                  		;    AX <> 'CD'
  4953                                  
  4954                                  ; 20/12/2022
  4955                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  4956                                  %if 0	
  4957                                  		cli
  4958                                  
  4959                                  		push	ax
  4960                                  		xor	ax, ax
  4961                                  		mov	ds, ax
  4962                                  		pop	ax
  4963                                  %endif
  4964                                  
  4965                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  4966                                  ; 10/12/2023 - Retro DOS v5.0 (combined kernel)
  4967                                  
  4968                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  4969                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  4970                                  
  4971                                  ;-----------------------------------------------------------------------------
  4972                                  ; initialization - stage 1
  4973                                  ;-----------------------------------------------------------------------------
  4974                                  ; 02/06/2018 - Retro DOS v3.0
  4975                                  
  4976                                  		; 10/12/2023
  4977 00001B96 FC                      		cld	; may not be necessary
  4978                                  		
  4979                                  		; 21/12/2022
  4980                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  4981                                  		;mov	bx, 60h
  4982                                  		;mov	es, bx
  4983                                  		;mov	si, bp
  4984                                  		;sub	di, di
  4985                                  		;mov	cx, 35 ; 70 bytes, 35 words
  4986                                  		;;mov	cl, 35
  4987                                  		;rep	movsw
  4988                                  
  4989                                  		; 10/12/2023 - Retro DOS v5.0
  4990 00001B97 3D4344                  		cmp	ax, 'CD' ; is CD boot option enabled or not ?
  4991 00001B9A 7503                    		jne	short init0
  4992                                  
  4993 00001B9C E8E2FE                  		call	cd_boot_option
  4994                                  init0:
  4995 00001B9F 0E                      		push	cs
  4996 00001BA0 1F                      		pop	ds
  4997                                  
  4998                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4999                                  		;mov	[Boot_Drv], dl
  5000                                  
  5001                                  		; 20/03/2019 - Retro DOS v4.0
  5002                                  		;cli		; turn interrupts off while manupulating stack
  5003                                  		;mov	ss, cx	; set stack segment register
  5004                                  
  5005 00001BA1 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  5006                                  
  5007                                  		;sti		; turn interrupts on
  5008                                  
  5009                                  		; 27/03/2018
  5010                                  		;mov	cx, KERNEL_SIZE	; words !
  5011                                  
  5012                                  		; 20/03/2019
  5013 00001BA4 B90080                  		mov	cx, 32768 ; 65536 bytes
  5014                                  
  5015                                  		; 21/12/2022
  5016                                  		; 07/04/2018
  5017 00001BA7 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  5018                                  		;mov	bl, KERNEL_SEGMENT
  5019 00001BAA 8EC3                    		mov	es, bx
  5020 00001BAC 31FF                    		xor	di, di
  5021 00001BAE 89FE                    		mov	si, di
  5022                                  		
  5023                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  5024                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  5025 00001BB0 F3A5                    		rep	movsw
  5026                                  
  5027                                  		; 20/03/2019 - Retro DOS v4.0
  5028 00001BB2 53                      		push	bx
  5029                                  		;push	init0
  5030 00001BB3 68[B71B]                		push	init1	; 10/12/2023
  5031 00001BB6 CB                      		retf
  5032                                  ;init0:
  5033                                  		; 10/12/2023 - Retro DOS 5.0	
  5034                                  init1:
  5035                                  		; 20/12/2022
  5036                                  		; (combined kernel file > 64KB)
  5037                                  
  5038                                  		; 20/03/2019
  5039 00001BB7 B520                    		mov	ch, 20h
  5040 00001BB9 8ED9                    		mov	ds, cx ; 2000h
  5041                                  		;mov	cx, 1070h
  5042 00001BBB B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  5043 00001BBE 8EC1                    		mov	es, cx
  5044                                  		
  5045                                  		; 21/12/2022
  5046                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  5047                                  		; 28/09/2023
  5048                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  5049                                  
  5050                                  		;mov	cx, KERNEL_SIZE - 32768
  5051                                  		; 28/09/2023 (BugFix)
  5052 00001BC0 B91416                  		mov	cx, NXWORDCOUNT
  5053                                  		;mov	cx, NXBYTECOUNT
  5054                                  		;shr	cx, 1 ; 28/09/2023
  5055                                  		;xor	si, si
  5056                                  		;xor	di, di
  5057 00001BC3 F3A5                    		rep	movsw
  5058                                  
  5059                                  		; 28/09/2023
  5060                                  		;; 17/06/2018 
  5061                                  		;mov	ds, bx
  5062                                  		;; 21/03/2019
  5063                                  		;mov	es, bx
  5064                                  ;init0:
  5065                                  ;		;push	es
  5066                                  ;		push	bx ; 20/03/2019
  5067                                  ;		push	init1 ; 07/04/2018
  5068                                  ;		retf	; jump to 0070h:init1
  5069                                  ;init:
  5070                                  ;init1:
  5071                                  		; 10/12/2023
  5072                                  init2:
  5073                                  		; 20/12/2022
  5074                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  5075                                  		; for full MSDOS compatibility.
  5076                                  
  5077                                  		; 10/12/2023
  5078                                  		;cli	; not necessary for INT 1Eh
  5079                                  
  5080 00001BC5 8EC1                    		mov	es, cx ; 0
  5081 00001BC7 8ED9                    		mov	ds, cx ; 0
  5082                                  
  5083 00001BC9 B82205                  		mov	ax, SEC9
  5084                                  
  5085                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  5086 00001BCC B378                    		mov	bl, 1Eh*4
  5087                                  				; INT 1Eh points to diskette parms table
  5088                                  
  5089                                  		; check if the table is already at 0:SEC9 (0:0522h)
  5090                                   		; (do not move the DPT if is not original ROMBIOS table)
  5091                                  
  5092                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  5093                                  		;;jnz	short mov_dpt
  5094                                  
  5095                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  5096                                  		;je	short dont_mov_dpt
  5097                                  
  5098                                  		;mov	si, [bx] ; [1Eh*4]		
  5099                                  ;mov_dpt:
  5100                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  5101 00001BCE C537                    		lds	si, [bx]
  5102                                  		
  5103                                  		; 10/12/2023 - Retro DOS v5.0
  5104                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  5105                                  		;mov	[cs:Orig_Int1Eh_Table], si
  5106                                  
  5107 00001BD0 89C7                    		mov	di, ax  ; SEC9
  5108 00001BD2 B10B                    		mov	cl, 11
  5109                                  		;cld
  5110 00001BD4 F3A4                    		rep	movsb
  5111                                  
  5112                                  		; Set INT 1Eh vector/pointer to the new DPT address
  5113 00001BD6 8ED9                    		mov	ds, cx ; 0
  5114 00001BD8 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  5115 00001BDA 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  5116                                  ;dont_mov_dpt:
  5117                                  
  5118                                  ; 20/12/2022 - Retro DOS v4.0
  5119                                  %if 0
  5120                                  		; 27/12/2018 - Retro DOS v4.0
  5121                                  		; 'Starting MS-DOS...' message
  5122                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  5123                                  		; (0070h:96A3h)
  5124                                  
  5125                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  5126                                  		mov     ah, 0Eh
  5127                                  		;bh = 0
  5128                                          	mov     bl, 7		; "normal" attribute and page
  5129                                  startmsg_nxt_chr:  
  5130                                  		lodsb
  5131                                  		or	al, al
  5132                                          	jz	short startmsg_ok
  5133                                         
  5134                                  		int	10h		; video write
  5135                                          	jmp	short startmsg_nxt_chr
  5136                                  
  5137                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  5138                                  
  5139                                  startmsg_ok:
  5140                                  
  5141                                  %endif
  5142                                  
  5143                                  ;-----------------------------------------------------------------------------
  5144                                  ; initialization - stage 2
  5145                                  ;-----------------------------------------------------------------------------
  5146                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  5147                                  
  5148                                  
  5149                                  ; 19/03/2018
  5150                                  ; Retro DOS v2.0 (24/02/2018)
  5151                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  5152                                  
  5153                                  ;------------------------------------------------------------------------
  5154                                  ;									:
  5155                                  ;	System initialization						:
  5156                                  ;									:
  5157                                  ;	The entry conditions are established by the bootstrap		:
  5158                                  ;	loader and are considered unknown. The following jobs		:
  5159                                  ;	will be performed by this module:				:
  5160                                  ;									:
  5161                                  ;	1.	All device initialization is performed			:
  5162                                  ;	2.	A local stack is set up and DS:SI are set		:
  5163                                  ;		to point to an initialization table. Then		:
  5164                                  ;		an inter-segment call is made to the first		:
  5165                                  ;		byte of the dos 					:
  5166                                  ;	3.	Once the dos returns from this call the ds		:
  5167                                  ;		register has been set up to point to the start		:
  5168                                  ;		of free memory. The initialization will then		:
  5169                                  ;		load the command program into this area 		:
  5170                                  ;		beginning at 100 hex and transfer control to		:
  5171                                  ;		this program.						:
  5172                                  ;									:
  5173                                  ;------------------------------------------------------------------------
  5174                                  		
  5175                                  		; 20/12/2022
  5176                                  		; ----------------------
  5177                                  		; Registers
  5178                                  		; ----------------------
  5179                                  		; DL = [bsDriveNumber]
  5180                                  		; DH = [bsMedia]
  5181                                  		; DS = 0, ES = 0, SS = 0
  5182                                  		; BP = 7C00h
  5183                                  		; SP = 700h
  5184                                  		; ----------------------
  5185                                  		; CX = 0				
  5186                                  
  5187                                  ; 02/10/2022 - 20/12/2022
  5188                                  ; ------------------------------------------------------------------------------
  5189                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  5190                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  5191                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  5192                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  5193                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  5194                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  5195                                  ; ------------------------------------------------------------------------------
  5196                                  
  5197                                  ; msload will check the extended boot record and set ax, bx accordingly.
  5198                                  ;
  5199                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  5200                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  5201                                  ;;	data sector of the bios.
  5202                                  ;
  5203                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  5204                                  ;		mov	[cs:bios_l], bx
  5205                                  
  5206                                  ; with the following information from msload, we don't need the
  5207                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  5208                                  ;     limitation of msbio.com file.
  5209                                  
  5210                                  		; 10/12/2023
  5211                                  		; 21/12/2022
  5212                                  		;cli
  5213                                  
  5214 00001BDD 0E                      		push	cs		; Save a peck of interrupt vectors...
  5215 00001BDE 07                      		pop	es
  5216                                  		;push	cx
  5217                                  		;push	di
  5218                                  
  5219                                  		; 20/12/2022
  5220 00001BDF B105                    		mov	cl, 5
  5221                                  		;mov	cx, 5		; NUMROMVECTORS
  5222                                  					; no. of rom vectors to	be saved
  5223                                  		;mov	si, offset RomVectors ; point to list of int vectors
  5224 00001BE1 BE[0001]                		mov	si, RomVectors
  5225                                  
  5226                                  		; 10/12/2023
  5227 00001BE4 FA                      		cli
  5228                                  next_int_:		
  5229 00001BE5 2E                      		cs	; 16/10/2022
  5230 00001BE6 AC                      		lodsb		
  5231                                  		;lods	byte ptr cs:[si] ; cs lodsb
  5232 00001BE7 98                      		cbw			; ax = interrupt number
  5233 00001BE8 D1E0                    		shl	ax, 1
  5234 00001BEA D1E0                    		shl	ax, 1		; int no * 4
  5235 00001BEC 89C7                    		mov	di, ax		; interrupt vector address
  5236 00001BEE 87FE                    		xchg	si, di		; rombios interrupt vector address in si
  5237                                  					; saving address in di
  5238                                  		;lodsw			; movsw
  5239                                  		;stosw
  5240                                  		;lodsw			; movsw
  5241                                  		;stosw			; save the vector
  5242                                  		; 20/12/2022
  5243 00001BF0 A5                      		movsw
  5244 00001BF1 A5                      		movsw		
  5245                                  
  5246 00001BF2 87FE                    		xchg	si, di
  5247 00001BF4 E2EF                    		loop	next_int_
  5248                                  		
  5249                                  		;pop	di
  5250                                  		;pop	cx
  5251                                  
  5252                                  ; we need to save int13 in two places in case we are running on an at.
  5253                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  5254                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  5255                                  ; rom int13 routine, we must have that rom address also stored away.
  5256                                  
  5257                                  		; 20/12/2022
  5258                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  5259                                  		;mov	[cs:Orig13], ax
  5260                                  		;mov	ax, [cs:Old13+2]
  5261                                  		;mov	[cs:Orig13+2], ax
  5262                                  
  5263                                  		; 10/12/2023
  5264                                  		;cli
  5265                                  
  5266                                  		; 16/10/2022
  5267 00001BF6 C7064C00[ED06]          		mov	word [13h*4], block13
  5268                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  5269                                  					; set up int 13	for new	action
  5270 00001BFC 8C0E4E00                		mov	[13h*4+2], cs
  5271                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  5272 00001C00 C7065400[9907]          		mov	word [15h*4], Int15
  5273                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  5274                                  					; set up int 15	for new	action
  5275 00001C06 8C0E5600                		mov	[15h*4+2], cs
  5276                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  5277 00001C0A C7066400[5907]          		mov	word [19h*4], int19
  5278                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  5279                                  					; set up int 19	for new	action
  5280 00001C10 8C0E6600                		mov	[19h*4+2], cs
  5281                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  5282                                  
  5283                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5284 00001C14 A16800                  		mov	ax, [68h]	 ; 1Ah*4
  5285 00001C17 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  5286 00001C1B C7066800[AF06]          		mov	word [68h], Int1A
  5287 00001C21 8C0E6A00                		mov	[6Ah], cs
  5288                                  
  5289                                  		; 20/12/2022
  5290 00001C25 0E                      		push	cs
  5291 00001C26 1F                      		pop	ds
  5292                                  		
  5293                                  		; 10/12/2023
  5294 00001C27 A3[AB06]                		mov	[Orig1A], ax
  5295 00001C2A 893E[AD06]              		mov	[Orig1A+2], di
  5296                                  
  5297 00001C2E A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  5298 00001C31 A3[B400]                		mov	[Orig13], ax
  5299 00001C34 A1[0801]                		mov	ax, [Old13+2]
  5300 00001C37 A3[B600]                		mov	[Orig13+2], ax
  5301                                  					; ;
  5302 00001C3A FB                      		sti
  5303 00001C3B CD11                    		int	11h		; EQUIPMENT DETERMINATION
  5304                                  					; Return: AX = equipment flag bits
  5305                                  		; 10/12/2023
  5306                                  		;jmp	short chk_fd_count
  5307                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  5308                                  		; ((signature))
  5309                                  		;push	dx		; 52h ; 'R'
  5310                                  		;push	ax		; 50h ; 'P'
  5311                                  		;push	bx		; 53h ; 'S'
  5312                                  
  5313                                  ; we have to support a system that does not have any diskette
  5314                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  5315                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  5316                                  ; otherwise, the system has only hardfiles.
  5317                                  ;
  5318                                  ; important thing is that still, for compatibility reason, the drive letter
  5319                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  5320                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  5321                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  5322                                  ; drives will get "invalid drive letter ..." message. we are going to
  5323                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  5324                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  5325                                  
  5326                                  ; check the register returned by the equipment determination interrupt
  5327                                  ; we have to handle the case of no diskettes in the system by faking
  5328                                  ; two dummy drives.
  5329                                  ;
  5330                                  ; if the register indicates that we do have floppy drives we don't need
  5331                                  ; to do anything special.
  5332                                  ;
  5333                                  ; if the register indicates that we don't have any floppy drives then
  5334                                  ; what we need to do is set the fakefloppydrv variable, change the
  5335                                  ; register to say that we do have floppy drives and then go to execute
  5336                                  ; the code which starts at notsingle. this is because we can skip the
  5337                                  ; code given below which tries to find if there are one or two drives
  5338                                  ; since we already know about this.
  5339                                  
  5340                                  chk_fd_count:	; 10/12/2023
  5341                                  		;or	ax, 1	; *!!*
  5342                                  
  5343                                  		; 06/05/2019 - Retro DOS v4.0
  5344 00001C3D 88C1                    		mov	cl, al
  5345                                  
  5346                                  		; 12/12/2022
  5347 00001C3F A801                    		test	al, 1
  5348                                  		;test	ax, 1		; floppy drives	present	?
  5349 00001C41 751E                    		jnz	short normalfloppydrv ;	yes.
  5350                                  
  5351                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  5352                                  ; whether it is an old ROM BIOS or a new one
  5353                                  ;
  5354                                  ; WARNING !!!
  5355                                  ;
  5356                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  5357                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  5358                                  
  5359                                  		; 20/12/2022
  5360                                  		;push	ax
  5361                                  		;push	bx
  5362                                  		;push	cx
  5363 00001C43 52                      		push	dx
  5364                                  		;push	di
  5365 00001C44 06                      		push	es
  5366                                  
  5367 00001C45 B408                    		mov	ah, 8
  5368 00001C47 B200                    		mov	dl, 0
  5369 00001C49 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5370                                  					; DL = drive number
  5371                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5372                                  					; DL = number of consecutive drives
  5373                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5374 00001C4B 7202                    		jc	short _gdskp_error
  5375                                  		;;mov	[cs:flp_drvs], dl
  5376                                  		; 20/12/2022
  5377                                  		; ds = cs
  5378                                  		;mov	[flp_drvs], dl
  5379 00001C4D 88D1                    		mov	cl, dl
  5380                                  _gdskp_error:	
  5381                                  		; 20/12/2022			
  5382 00001C4F 07                      		pop	es
  5383                                  		;pop	di
  5384 00001C50 5A                      		pop	dx
  5385                                  		;pop	cx
  5386                                  		;pop	bx
  5387                                  		;pop	ax
  5388                                  		
  5389 00001C51 720E                    		jc	short normalfloppydrv
  5390                                  					; if error it is an old ROM BIOS
  5391                                  					; so, lets assume that ROM BIOS lied
  5392                                  		; 20/12/2022
  5393                                  		; ds = cs
  5394                                  		;cmp	byte [flp_drvs], 0
  5395                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  5396                                  		;jz	short _set_fake_flpdrv
  5397                                  		;;mov	al, [cs:flp_drvs]
  5398                                  		;mov	al, [flp_drvs]
  5399                                  		;;dec	al		; make it zero based
  5400                                  		;; 18/12/2022
  5401                                  		;dec	ax
  5402                                  		;jmp	short got_num_flp_drvs
  5403                                  		
  5404                                  		; 20/12/2022
  5405 00001C53 08C9                    		or	cl, cl ; [flp_drvs]
  5406 00001C55 7403                    		jz	short _set_fake_flpdrv		
  5407 00001C57 49                      		dec	cx	
  5408 00001C58 EB0B                    		jmp	short got_num_flp_drvs
  5409                                  ; ----------------------------------------------------------------------------
  5410                                  
  5411                                  _set_fake_flpdrv:
  5412                                  		; 20/12/2022
  5413                                  		; ds = cs
  5414                                  		;inc	cl	; cl = 1
  5415                                  		; 10/12/2023
  5416 00001C5A 41                      		inc	cx	; cl = 1
  5417 00001C5B 880E[111A]              		mov	[fakefloppydrv], cl ; 1
  5418                                  		;mov	byte [fakefloppydrv], 1		
  5419                                  		;;mov	byte [cs:fakefloppydrv], 1
  5420                                  					; we don't have any floppy drives.
  5421                                  		; 20/12/2022
  5422                                  		;mov	ax, 1
  5423 00001C5F EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  5424                                  ; ----------------------------------------------------------------------------
  5425                                  
  5426                                  normalfloppydrv:			; yes, bit 0 is 1.			
  5427                                  		; 20/12/2022
  5428                                  		;rol	al, 1		; there	exist floppy drives.
  5429                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  5430 00001C61 D0C1                    		rol	cl, 1
  5431 00001C63 D0C1                    		rol	cl, 1
  5432                                  got_num_flp_drvs:			
  5433                                  		;;and	ax, 3		; only look at bits 0 &	1
  5434                                  		; 18/12/2022
  5435                                  		;and	al, 3
  5436                                  		; 20/12/2022
  5437 00001C65 80E103                  		and	cl, 3
  5438 00001C68 7505                    		jnz	short notsingle	; zero means single drive system
  5439                                  		; 20/12/2022
  5440 00001C6A 41                      		inc	cx
  5441                                  		;inc	ax		; pretend it's a two drive system
  5442                                  settwodrive:				; set this to two fakedrives
  5443                                  		; 20/12/2022
  5444                                  		; ds = cs
  5445 00001C6B FE06[7800]              		inc	byte [single]
  5446                                  		;inc	byte [cs:single] ; remember this
  5447                                  notsingle:	
  5448                                  		; 20/12/2022			
  5449                                  		;inc	ax		; ax has number	of drives, 2-4
  5450                                  		;			; is also 0 indexed boot drive if we
  5451                                  		;			; booted off hard file
  5452                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  5453                                  		
  5454                                  		; 20/12/2022
  5455                                  		;inc	cl	; cl >= 2
  5456                                  		; 10/12/2023
  5457 00001C6F 41                      		inc	cx	; cl >= 2
  5458                                  
  5459                                  ; 16/10/2022
  5460                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  5461                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  5462                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  5463                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  5464                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  5465                                  SEC9	EQU	522h	; address of disk parameters
  5466                                  CHROUT	EQU	29h
  5467                                  LSTDRV	EQU     504h
  5468                                  
  5469                                  ; determine whether we booted from floppy or hard disk...
  5470                                  
  5471                                  		; 20/12/2022
  5472 00001C70 88C8                    		mov	al, cl	; 26/05/2019
  5473                                  
  5474 00001C72 F6C280                  		test	dl, 80h		; boot from floppy ?
  5475 00001C75 7502                    		jnz	short gothrd	; no.
  5476 00001C77 31C0                    		xor	ax, ax		; indicate boot	from drive a
  5477                                  		; 10/12/2023
  5478                                  		;mov	[Boot_Drv], al
  5479                                  gothrd:
  5480                                  
  5481                                  ; MSDOS 6.0
  5482                                  ;   ax = 0-based drive we booted from
  5483                                  ;   bios_l, bios_h set.
  5484                                  ;   cl = number of floppies including fake one
  5485                                  ;   ch = media byte
  5486                                  
  5487                                  ; Retro DOS 4.0 - 27/12/2018 
  5488                                  ;  (from Retro DOS v2.0 boot sector)
  5489                                  ;   dl = int 13 drive number we booted from
  5490                                  ;   dh = media byte
  5491                                  
  5492                                  		; 20/12/2022
  5493 00001C79 88F5                    		mov	ch, dh		; 01/07/2018
  5494                                  
  5495                                  		; cl = number of floppies
  5496                                  		; ch = media byte
  5497                                  
  5498                                  		; set up local stack
  5499                                  
  5500                                  		; 20/12/2022
  5501                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  5502                                  					; bios_l, bios_h set.
  5503                                  					; cl = number of floppies including fake one
  5504                                  					; ch = media byte
  5505                                  		; 20/12/2022
  5506                                  		; es = ds = cs
  5507                                  		; ss = 0
  5508                                  		; sp = 700h
  5509                                  
  5510                                  		; 20/12/2022
  5511                                  		;cli
  5512                                  		;mov	ss, dx		; set stack segment and stack pointer
  5513                                  		;mov	sp, 700h
  5514                                  		;sti
  5515                                  
  5516 00001C7B 51                      		push	cx ; (***) 	; save number of floppies and media byte
  5517                                  		
  5518 00001C7C 88EC                    		mov	ah, ch		; FAT ID to AH
  5519 00001C7E 50                      		push	ax ; (**)	; save boot drive number and media byte
  5520                                  		
  5521                                  ; let model_byte, secondary_model_byte be set here!!!
  5522                                  
  5523 00001C7F B4C0                    		mov	ah, 0C0h
  5524 00001C81 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  5525 00001C83 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  5526 00001C85 80FC00                  		cmp	ah, 0
  5527 00001C88 7510                    		jnz	short no_rom_system_conf
  5528                                  
  5529                                  ;		; 20/12/2022
  5530                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  5531                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  5532                                  ;
  5533                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  5534                                  ;
  5535                                  ;		on return:
  5536                                  ;		CF = 0 if successful
  5537                                  ;		   = 1 if error
  5538                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  5539                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  5540                                  ;
  5541                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  5542                                  ;
  5543                                  ;		Offset Size	     Description
  5544                                  ;
  5545                                  ;		  00   word   length of descriptor (8 minimum)
  5546                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  5547                                  ;		  03   byte   secondary model byte
  5548                                  ;		  04   byte   BIOS revision level (zero based)
  5549                                  ;		  05   byte   feature information, see below
  5550                                  ;		  06   dword  reserved
  5551                                  
  5552                                  		; 20/12/2022
  5553                                  		; ds = cs
  5554 00001C8A 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  5555 00001C8E A2[AF05]                		mov	[model_byte], al
  5556                                  		;mov	[cs:model_byte], al
  5557                                  					; get/save model byte
  5558 00001C91 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  5559 00001C95 A2[B005]                		mov	[secondary_model_byte], al
  5560                                  		;mov	[cs:secondary_model_byte], al
  5561                                  					; get/save secondary model byte
  5562 00001C98 EB0C                    		jmp	short turn_timer_on
  5563                                  ;-----------------------------------------------------------------------------
  5564                                  
  5565                                  no_rom_system_conf:			
  5566 00001C9A BEFFFF                  		mov	si, 0FFFFh
  5567 00001C9D 8EC6                    		mov	es, si
  5568                                  		; 20/12/2022
  5569 00001C9F 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  5570 00001CA3 A2[AF05]                		mov	[model_byte], al
  5571                                  		;mov	[cs:model_byte], al ; save model byte
  5572                                  turn_timer_on:				
  5573 00001CA6 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  5574 00001CA8 E620                    		out	20h, al		; Interrupt controller,	8259A.
  5575                                  					; AKPORT
  5576                                  
  5577                                  ; some olivetti m24 machines have an 8530 serial communications
  5578                                  ; chip installed at io address 50h and 52h. if we're running
  5579                                  ; on one of those, we must inhibit the normal aux port initialization
  5580                                  
  5581                                  		; 20/12/2022
  5582                                  		; ds = cs
  5583 00001CAA 803E[AF05]00            		cmp	byte [model_byte], 0
  5584                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  5585 00001CAF 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  5586                                  					; (except olivetti m24)
  5587 00001CB1 E466                    		in	al, 66h		; is 8530 installed?
  5588 00001CB3 A820                    		test	al, 20h
  5589 00001CB5 740A                    		jz	short not_olivetti_m24 ; we're done if not
  5590 00001CB7 B00F                    		mov	al, 0Fh		; double check
  5591 00001CB9 E650                    		out	50h, al
  5592 00001CBB E450                    		in	al, 50h
  5593 00001CBD A801                    		test	al, 1		; this test was	copied from olivetti
  5594 00001CBF 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  5595                                  
  5596                                  not_olivetti_m24:
  5597 00001CC1 B003                    		mov	al, 3		; init com4
  5598 00001CC3 E8DB09                  		call	aux_init
  5599 00001CC6 B002                    		mov	al, 2		; init com3
  5600 00001CC8 E8D609                  		call	aux_init
  5601 00001CCB B001                    		mov	al, 1		; init com2
  5602 00001CCD E8D109                  		call	aux_init
  5603 00001CD0 30C0                    		xor	al, al		; init com1
  5604 00001CD2 E8CC09                  		call	aux_init
  5605                                  
  5606                                  skip_aux_port_init:
  5607 00001CD5 B002                    		mov	al, 2		; init lpt3
  5608 00001CD7 E8BF09                  		call	print_init
  5609 00001CDA B001                    		mov	al, 1		; init lpt2
  5610 00001CDC E8BA09                  		call	print_init
  5611 00001CDF 30C0                    		xor	al, al		; init lpt1
  5612 00001CE1 E8B509                  		call	print_init
  5613                                  
  5614                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5615                                  		;mov	di, 534h	; offset INITSPOT
  5616                                  		;;mov	di, INITSPOT	; 0534h
  5617                                  		;			; IBMDOS.COM's first cluster - high word
  5618                                  		;			; 520h (the 2nd entry of root dir) + 14h
  5619                                  		;mov	ax, [di]
  5620                                  		;mov	[firstcluster_hw], ax
  5621                                  
  5622 00001CE4 31D2                    		xor	dx, dx	; 0
  5623 00001CE6 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  5624 00001CE8 8EC2                    		mov	es, dx
  5625 00001CEA 31C0                    		xor	ax, ax
  5626                                  		; 16/10/2022
  5627 00001CEC BF3405                  		mov	di, INITSPOT	; 0534h
  5628                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  5629                                  					; IBM wants 4 zeros here
  5630 00001CEF AB                      		stosw
  5631 00001CF0 AB                      		stosw
  5632 00001CF1 8CC8                    		mov	ax, cs		; fetch	segment
  5633 00001CF3 C7066C00[0E06]          		mov	word [BRKADR], cbreak
  5634                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  5635                                  					; break	entry point
  5636 00001CF9 A36E00                  		mov	[BRKADR+2], ax		
  5637                                  		;mov	ds:6Eh,	ax	; vector for break
  5638 00001CFC C706A400[8206]          		mov	word [CHROUT*4], outchr
  5639                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  5640 00001D02 A3A600                  		mov	[CHROUT*4+2], ax
  5641                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  5642                                  
  5643 00001D05 BF0400                  		mov	di, 4
  5644 00001D08 BB[1406]                		mov	bx, intret ; 19/10/2022
  5645                                  		;mov	bx, offset intret ; intret (cs:intret)
  5646                                  					; will initialize rest of interrupts
  5647 00001D0B 93                      		xchg	ax, bx
  5648 00001D0C AB                      		stosw			; location 4
  5649 00001D0D 93                      		xchg	ax, bx		; cs:
  5650 00001D0E AB                      		stosw			; int 1	; location 6
  5651 00001D0F 83C704                  		add	di, 4
  5652 00001D12 93                      		xchg	ax, bx
  5653 00001D13 AB                      		stosw			; location 12
  5654 00001D14 93                      		xchg	ax, bx		; cs:
  5655 00001D15 AB                      		stosw			; int 3	; location 14
  5656 00001D16 93                      		xchg	ax, bx
  5657 00001D17 AB                      		stosw			; location 16
  5658 00001D18 93                      		xchg	ax, bx		; cs:
  5659 00001D19 AB                      		stosw			; int 4	; location 18
  5660                                  
  5661                                  ;		; 20/12/2022
  5662                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  5663                                  ;		Address Size	Description	(BIOS/DOS Data Area)
  5664                                  ;	
  5665                                  ;		50:00	byte	Print screen status byte
  5666                                  ;				 00 = PrtSc not active,
  5667                                  ;				 01 = PrtSc in progress
  5668                                  ;				 FF = error
  5669                                  ;		50:01  3 bytes	Used by BASIC
  5670                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  5671                                  ;		50:05  10bytes	POST work area
  5672                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  5673                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  5674                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  5675                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  5676                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  5677                                  ;		50:20	word	DOS dynamic storage
  5678                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  5679                                  ;		50:30	4bytes	MODE command
  5680                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  5681                                  
  5682 00001D1A 89160005                		mov	[0500h], dx ; 0
  5683                                  		;mov	ds:500h, dx	; set print screen & break = 0
  5684 00001D1E 89160405                		mov	[LSTDRV], dx	; [0504h]
  5685                                  		;mov	ds:504h, dx	; clean	out last drive spec
  5686                                  
  5687                                  ; we need to initialize the cs:motorstartup variable from the disk
  5688                                  ; parameter table at sec9. the offsets in this table are defined in
  5689                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  5690                                  
  5691 00001D22 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  5692                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  5693                                  					; [522h+0Ah]
  5694                                  		; 20/12/2022
  5695                                  		; ds = 0
  5696                                  
  5697 00001D25 2EA2[2601]              		mov	[cs:motorstartup], al
  5698 00001D29 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  5699 00001D2F 720B                    		jb	short no_diddle	; no
  5700 00001D31 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  5701                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  5702                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  5703 00001D37 C6062205DF              		mov	byte [SEC9+0], 0DFh
  5704                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  5705                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  5706                                  no_diddle:
  5707 00001D3C CD12                    		int	12h		; MEMORY SIZE -
  5708                                  					; Return: AX = number of contiguous 1K blocks of memory
  5709 00001D3E B106                    		mov	cl, 6
  5710 00001D40 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  5711                                  		
  5712                                  		; 20/12/2022
  5713                                  		; 03/07/2018 - 27/12/2018
  5714                                  		;pop	cx ; (**)
  5715                                  		;mov	[cs:drvfat], cx
  5716                                  		
  5717 00001D42 50                      		push	ax ; (*)	; save real top	of memory
  5718                                  
  5719                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  5720                                  
  5721                                  ;M068 - BEGIN
  5722                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  5723                                  
  5724                                  		; 20/12/2022
  5725                                  		; ds = 0
  5726                                  
  5727                                  		;push	ds
  5728                                  		;push	bx		; pushes not required but since this
  5729                                  					; happens to be a last minute change
  5730                                  					; & since it is only init code.
  5731                                  		;xor	bx, bx
  5732                                  		;mov	ds, bx
  5733                                  		
  5734                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  5735                                  		;mov	bx, [2Fh*4]
  5736                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  5737                                  		;mov	ds, [2Fh*4+2]
  5738                                  		; 29/09/2023
  5739 00001D43 C51EBC00                		lds	bx, [2Fh*4]
  5740                                  
  5741 00001D47 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  5742                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  5743 00001D4C 750F                    		jnz	short SkipRPL
  5744 00001D4E 807F054C                		cmp	byte [bx+5], 'L'
  5745                                  		;cmp	byte ptr [bx+5], 'L'
  5746 00001D52 7509                    		jnz	short SkipRPL
  5747 00001D54 89C2                    		mov	dx, ax		; get TOM into DX
  5748 00001D56 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  5749 00001D59 CD2F                    		int	2Fh		; Get new TOM from any RPL
  5750 00001D5B 89D0                    		mov	ax, dx
  5751                                  SkipRPL:	
  5752                                  		; 20/12/2022		
  5753                                  		;pop	bx
  5754                                  		;pop	ds
  5755                                  
  5756                                  ;M068 - END
  5757                                  		; 20/12/2022
  5758                                  		; 27/12/2018
  5759 00001D5D 0E                      		push	cs
  5760 00001D5E 1F                      		pop	ds
  5761                                  
  5762                                  		; 18/03/2019 - Retro DOS v4.0
  5763                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  5764                                  		;mov	[cs:fatloc], ax	; location to read fat
  5765                                  
  5766                                  		; 01/07/2018
  5767                                  		; 08/04/2018
  5768                                  		; 28/03/2018
  5769                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  5770 00001D5F 83E840                  		sub	ax, 64
  5771 00001D62 A3[041A]                		mov	[init_bootseg], ax ; 20/12/2022
  5772                                  		;mov	[cs:init_bootseg], ax
  5773                                  
  5774                                  		; 27/12/2018 - Retro DOS v4.0
  5775                                  		;;pop	ax ; (*)	; get back real top of memory
  5776                                  		;pop	dx ; (*)
  5777                                  		; 29/09/2023 - Retro DOS v4.2 (BugFix)
  5778 00001D65 58                      		pop	ax ; (*)	; get back real top of memory		
  5779                                  
  5780                                  
  5781                                  		; 20/12/2022
  5782                                  		; 27/12/2018
  5783 00001D66 59                      		pop	cx ; (**)
  5784 00001D67 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  5785                                  
  5786                                  		; 20/12/2022
  5787                                  
  5788                                  		;mov	dx, 46Dh	; SYSINIT segment
  5789                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)
  5790 00001D6B BAD904                  		mov	dx, SYSINITSEG	; 17/10/2022
  5791 00001D6E 8EDA                    		mov	ds, dx
  5792                                  
  5793                                  ; set pointer to resident device driver chain
  5794                                  
  5795                                  		; 17/10/2022
  5796 00001D70 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  5797                                  		;mov	word [273h], res_dev_list
  5798                                  		;;mov	word ptr ds:273h, offset res_dev_list
  5799                                  					; [SYSINIT+DEVICE_LIST]
  5800 00001D76 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  5801                                  		;mov	[275h], cs
  5802                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  5803                                  
  5804 00001D7A A3[9202]                		mov	[MEMORYSIZE], ax
  5805                                  		;mov	[292h], ax
  5806                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  5807                                  
  5808 00001D7D FEC1                    		inc	cl
  5809 00001D7F 880E[9602]              		mov	[DEFAULTDRIVE], cl
  5810                                  		;mov	[296h], cl
  5811                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  5812                                  
  5813                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  5814 00001D83 C706[7302]AE09          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  5815                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  5816                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  5817                                  					; dos_load_seg
  5818                                  
  5819                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  5820                                  ; printer cards. we initialize this value to point to an iret only if
  5821                                  ;
  5822                                  ; 1) the original segment points to storage inside valid ram.
  5823                                  ;
  5824                                  ; 2) the original segment is 0F000:xxxx
  5825                                  
  5826                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  5827                                  		;;mov	ax, 544h	; 10/12/2023
  5828                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  5829                                  		;mov	es, ax
  5830                                  		; 20/12/2022
  5831                                  		;push	ds ; SYSINITSEG
  5832                                  		;pop	es
  5833 00001D89 8EC2                    		mov	es, dx ; SYSINITSEG
  5834 00001D8B 31C0                    		xor	ax, ax ; 0
  5835 00001D8D 8ED8                    		mov	ds, ax		; segment 0
  5836                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  5837 00001D8F A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  5838                                  		; 18/10/2022
  5839 00001D92 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  5840                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  5841 00001D97 7605                    		jbe	short resetintf
  5842 00001D99 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  5843 00001D9C 750A                    		jnz	short keepintf
  5844                                  resetintf:	
  5845 00001D9E C7063C00[1406]          		mov	word [0Fh*4], intret			
  5846                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  5847 00001DA4 8C0E3E00                		mov	word [0Fh*4+2], cs
  5848                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  5849                                  keepintf:				
  5850                                  ; end important
  5851                                  
  5852                                  ; 17/10/2022
  5853                                  ; 28/12/2018 - Retro DOS v4.0
  5854                                  
  5855                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  5856                                  ;
  5857                                  ; we will check if the system has ibm extended keyboard by
  5858                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  5859                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  5860                                  ; for the extended keyboard function. use cx as the temporary register.
  5861                                  
  5862                                  		; 20/12/2022
  5863                                  		; ds = 0
  5864                                  		;xor	cx, cx
  5865                                  		;mov	ds, cx
  5866                                  
  5867 00001DA8 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  5868                                  
  5869                                  		; 20/12/2022
  5870                                  		; 20/03/2019
  5871 00001DAC 0E                      		push	cs
  5872 00001DAD 1F                      		pop	ds
  5873                                  
  5874                                  		;test	cl, 00010000b ; 10h
  5875 00001DAE F6C110                  		test	cl, 10h		; extended keyboard ?
  5876 00001DB1 740A                    		jz	short org_key	; no, original keyboard
  5877                                  
  5878                                  		; 20/12/2022
  5879                                  		;  ds = cs
  5880 00001DB3 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  5881 00001DB8 C606[7F04]11            		mov	byte [keysts_func], 11h
  5882                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  5883                                  		;mov	byte [cs:keysts_func], 11h
  5884                                  					; change for extended keyboard functions
  5885                                  org_key:
  5886                                  
  5887                                  ; 02/06/2018 - Retro DOS v3.0
  5888                                  
  5889                                  ;**************************************************************
  5890                                  ;	will initialize the number of drives
  5891                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  5892                                  ;	the indications are as follows:
  5893                                  ;
  5894                                  ;	bits	7	6	drives
  5895                                  ;		0	0	1
  5896                                  ;		0	1	2
  5897                                  ;		1	0	3
  5898                                  ;		1	1	4
  5899                                  ;**************************************************************
  5900                                  		
  5901                                  		; 20/12/2022
  5902                                  		; ds = cs
  5903                                  		;push	cs
  5904                                  		;pop	ds
  5905                                  		; 21/12/2022
  5906                                  		;push	cs
  5907                                  		;pop	es
  5908                                  
  5909 00001DBD E8C20A                  		call	cmos_clock_read	; If cmos clock	exists,
  5910                                  					; then set the system time according to	that.
  5911                                  					; also,	reset the cmos clock rate.
  5912                                  		; 18/10/2022
  5913                                  		;mov	word ptr BData_start, offset harddrv ;
  5914                                  					; set up pointer to hdrive
  5915                                  		; 02/10/2022
  5916 00001DC0 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  5917                                  
  5918                                  		; 20/12/2022
  5919                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  5920 00001DC6 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  5921                                  
  5922 00001DC7 30E4                    		xor	ah, ah		; chuck	fat id byte
  5923 00001DC9 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  5924 00001DCC A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  5925 00001DCF D1E0                    		shl	ax, 1
  5926 00001DD1 0106[5E1A]              		add	[last_dskdrv_table], ax
  5927                                  
  5928                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  5929                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  5930                                  		; ........
  5931 00001DD5 1E                      		push    ds
  5932 00001DD6 B800F0                  		mov     ax, 0F000h
  5933 00001DD9 8ED8                    		mov     ds, ax
  5934                                  
  5935 00001DDB 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  5936 00001DE1 751F                    		jne	short skip_mode2
  5937 00001DE3 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  5938 00001DE9 7517                    		jne	short skip_mode2
  5939 00001DEB 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  5940 00001DF1 750F                    		jne	short skip_mode2
  5941                                  
  5942 00001DF3 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  5943 00001DF6 CD15                    		int	15h
  5944 00001DF8 7208                    		jc	short skip_mode2
  5945                                  		; 10/12/2023
  5946                                  		; PCDOS 7.1 IBMBIO.COM
  5947                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  5948                                  					; (MSDOS 6.0)
  5949                                  		; MSDOS 6.22 IO.SYS
  5950 00001DFA 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  5951 00001DFD B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  5952 00001E00 CD15                    		int	15h
  5953                                  skip_mode2:
  5954 00001E02 1F                      		pop	ds
  5955                                  		; ........
  5956                                  
  5957 00001E03 B280                    		mov	dl, 80h
  5958 00001E05 B408                    		mov	ah, 8
  5959 00001E07 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5960                                  					; DL = drive number
  5961                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5962                                  					; DL = number of consecutive drives
  5963                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5964 00001E09 7204                    		jc	short enddrv
  5965 00001E0B 8816[5D1A]              		mov	[hnum], dl	; save number of hard disk drives
  5966                                  enddrv:
  5967                                  		; 21/12/2022
  5968 00001E0F 0E                      		push	cs
  5969 00001E10 07                      		pop	es
  5970                                  
  5971                                  ; scan the list of drives to determine their type. we have three flavors of
  5972                                  ; diskette drives:
  5973                                  ;
  5974                                  ;   48tpi drives    we do nothing special for them
  5975                                  ;   96tpi drives    mark the fact that they have changeline support.
  5976                                  ;   3.5"  drives    mark changeline support and small.
  5977                                  ;
  5978                                  ; the following code uses registers for certain values:
  5979                                  ;
  5980                                  ;   dl - physical drive
  5981                                  ;   ds:di - points to current bds
  5982                                  ;   cx - flag bits for bds
  5983                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  5984                                  					
  5985 00001E11 30D2                    		xor	dl, dl
  5986                                  
  5987                                  		; 20/12/2022
  5988                                  		; ds = cs
  5989                                  		; 17/06/2018		 
  5990                                  		;push	cs
  5991                                  		;pop	ds
  5992                                  
  5993 00001E13 C606[2C01]09            		mov	byte [eot], 9
  5994 00001E18 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  5995                                  					; to set aside two bdss	for the	two fake floppy	drives
  5996                                  
  5997                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  5998                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  5999                                  
  6000                                  ; check to see if we are faking floppy drives. if not we don't
  6001                                  ; do anything special. if we are faking floppy drives we need
  6002                                  ; to set aside two bdss for the two fake floppy drives. we
  6003                                  ; don't need to initalise any fields though. so starting at start_bds
  6004                                  ; use the link field in the bds structure to go to the second bds
  6005                                  ; in the list and initalise it's link field to -1 to set the end of
  6006                                  ; the list. then jump to the routine at dohard to allocate/initialise
  6007                                  ; the bds for harddrives.
  6008                                  
  6009 00001E1B 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  6010 00001E20 750B                    		jnz	short loop_drive
  6011 00001E22 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6012                                  					; di <-	first bds link
  6013 00001E24 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6014                                  					; di <-	second bds link
  6015 00001E26 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  6016 00001E2A E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  6017                                  ;-----------------------------------------------------------------------------
  6018                                  
  6019                                  loop_drive:				
  6020 00001E2D 3A16[7500]              		cmp	dl, [drvmax]
  6021 00001E31 7203                    		jb	short got_more
  6022 00001E33 E97B01                  		jmp	done_drives
  6023                                  ;-----------------------------------------------------------------------------
  6024                                  
  6025                                  got_more:	
  6026                                  		; 12/12/2023
  6027                                  		;xor	cx, cx		; zero all flags
  6028 00001E36 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6029                                  					; get next bds
  6030                                  		; ........
  6031                                  		; 10/12/2023 - Retro DOS v5.0
  6032                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  6033 00001E38 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  6034 00001E3B 7516                    		jne	short not_last_bds
  6035 00001E3D 88D0                    		mov	al, dl          ; drive number (0 based)
  6036 00001E3F 98                      		cbw
  6037 00001E40 01C0                    		add	ax, ax
  6038 00001E42 05[3C05]                		add	ax, dskdrvs
  6039 00001E45 A3[5E1A]                		mov	[last_dskdrv_table], ax
  6040 00001E48 8B3E[601A]              		mov	di, [end_of_bdss]
  6041 00001E4C E8FD09                  		call	xinstall_bds
  6042 00001E4F FE0E[7500]              		dec	byte [drvmax]
  6043                                  not_last_bds:
  6044                                  		; ........
  6045                                  
  6046 00001E53 B600                    		mov	dh, 0		; ff48tpi
  6047                                  					; set form factor to 48	tpi
  6048 00001E55 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  6049                                  		
  6050                                  		; 20/12/2022
  6051                                  		;push	ds ; 11/05/2019	
  6052 00001E5A 57                      		push	di
  6053 00001E5B 52                      		push	dx
  6054                                  		;push	cx ; not necessary (10/12/2023)
  6055 00001E5C 06                      		push	es ; ((*)) ; 20/12/2022
  6056                                  
  6057                                  		; ...........
  6058                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6059                                  		;xor	bx, bx
  6060                                  		;xor	cx, cx
  6061 00001E5D 52                      		push	dx  ; dl = drive number	
  6062                                  		
  6063 00001E5E B408                    		mov	ah, 8
  6064 00001E60 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6065                                  					; DL = drive number
  6066                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6067                                  					; DL = number of consecutive drives
  6068                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6069                                  		;jc	short noparmsfromrom
  6070                                  		; 10/12/2023
  6071 00001E62 58                      		pop	ax  ; al = drive number
  6072 00001E63 7303                    		jnc	short chk_drv_type
  6073 00001E65 E9E600                  		jmp	noparmsfromrom
  6074                                  
  6075                                  chk_drv_type:
  6076                                  		; 10/12/2023
  6077                                  		; ch = low eight bits of maximum cylinder number
  6078                                  		; cl = maximum sector number (bits 5-0)
  6079                                  		;      high two bits of maximum cylinder number (bits 7-6)
  6080                                  		;
  6081 00001E68 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  6082 00001E6B 7554                    		jne	short not_atapi_removable
  6083                                  		
  6084                                  		; save ds:si
  6085 00001E6D 1E                      		push	ds
  6086                                  		;push	si	; not necessary (10/12/2023)
  6087                                  		
  6088 00001E6E 88C2                    		mov	dl, al
  6089 00001E70 83EC1A                  		sub	sp, 26
  6090 00001E73 31C0                    		xor	ax, ax ; 0
  6091 00001E75 50                      		push	ax
  6092 00001E76 B81E00                  		mov	ax, 30
  6093 00001E79 50                      		push	ax
  6094 00001E7A 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  6095 00001E7C 16                      		push	ss
  6096 00001E7D 1F                      		pop	ds
  6097 00001E7E B448                    		mov	ah, 48h
  6098 00001E80 CD13                    		int	13h		; DISK - IBM/MS Extension
  6099                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  6100 00001E82 7239                    		jb	short ext_gdp_err
  6101 00001E84 8B4408                  		mov	ax, [si+8]	; physical number of heads
  6102 00001E87 A3[0C1A]                		mov	[num_heads], ax
  6103 00001E8A 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  6104 00001E8D A3[0E1A]                		mov	[num_cyln], ax
  6105 00001E90 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  6106 00001E93 A2[101A]                		mov	[sec_trk], al
  6107 00001E96 3A06[2C01]              		cmp	al, [eot]
  6108 00001E9A 7603                    		jbe	short _eotok
  6109 00001E9C A2[2C01]                		mov	[eot], al
  6110                                  
  6111                                  _eotok:		; 10/12/2023
  6112                                  		;xor	al, al
  6113 00001E9F 31C9                    		xor	cx, cx ; 0
  6114 00001EA1 F6440210                		test	byte [si+2], 10h ; information flags
  6115                                  					; bit 4 = Device has change line support
  6116 00001EA5 7403                    		jz	short not_chgline_sup
  6117                                  		;or	al, 2		; change line support
  6118 00001EA7 80C902                  		or	cl, 2
  6119                                  not_chgline_sup:
  6120 00001EAA 83C41E                  		add	sp, 30
  6121                                  		;pop	si	; (10/12/2023)
  6122 00001EAD 1F                      		pop	ds
  6123                                  		;
  6124 00001EAE 07                      		pop	es	; es=cs=ds (21/12/2022)
  6125                                  		;pop	cx	; (10/12/2023)
  6126 00001EAF 5A                      		pop	dx
  6127 00001EB0 5F                      		pop	di
  6128                                  		;pop	ds	; (21/12/2022)
  6129                                  
  6130                                  		; 10/12/2023
  6131 00001EB1 F6C102                  		test	cl, 2
  6132                                  		;test	al, 2
  6133                                  		;jz	short gotother_j
  6134 00001EB4 7450                    		jz	short gotother
  6135                                  		;or	cl, al
  6136 00001EB6 C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  6137                                  gotother_j:
  6138 00001EBB EB49                    		jmp	short gotother
  6139                                  ext_gdp_err:
  6140 00001EBD 83C41E                  		add	sp, 30
  6141                                  		;pop	si	; (10/12/2023)
  6142 00001EC0 1F                      		pop	ds
  6143                                  
  6144                                  		; 10/12/2023
  6145                                  not_atapi_removable:
  6146                                  		; ...........
  6147                                  
  6148                                  
  6149                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  6150                                  ; in this case, we are going to put bogus informations to bds table.
  6151                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  6152                                  ; they are calculated at the later time. this is just for the diagnostic
  6153                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  6154                                  ; this should only happen with drive b.
  6155                                  
  6156 00001EC1 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  6157 00001EC4 7505                    		jnz	short pfr_ok
  6158                                  
  6159                                  		;mov	ch, 39		; rom gave wrong info.
  6160                                  		;mov	cl, 9		; let's default to 360k.
  6161                                  		; 20/12/2022
  6162 00001EC6 B90927                  		mov	cx, 2709h
  6163                                  
  6164 00001EC9 B601                    		mov	dh, 1
  6165                                  pfr_ok:					
  6166                                  		;inc	dh		; make number of heads 1-based
  6167                                  		;mov	[num_heads], dh	; save parms returned by rom
  6168                                  		; 10/12/2023
  6169 00001ECB 86F2                    		xchg	dl, dh
  6170 00001ECD 30F6                    		xor	dh, dh
  6171 00001ECF 42                      		inc	dx		; make number of heads 1-based
  6172 00001ED0 8916[0C1A]              		mov	[num_heads], dx
  6173                                  
  6174                                  		;inc	ch		; make number of cylinders 1-based
  6175                                  		;and	cl, 3Fh
  6176                                  		;mov	[sec_trk], cl
  6177                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  6178                                  		; 10/12/2023
  6179 00001ED4 88CA                    		mov	dl, cl
  6180 00001ED6 80E23F                  		and	dl, 3Fh
  6181 00001ED9 8816[101A]              		mov	[sec_trk], dl
  6182 00001EDD 86E9                    		xchg	cl, ch
  6183 00001EDF D0C5                    		rol	ch, 1
  6184 00001EE1 D0C5                    		rol	ch, 1
  6185 00001EE3 80E503                  		and	ch, 3
  6186 00001EE6 41                      		inc	cx		; make number of cylinders 1-based
  6187 00001EE7 890E[0E1A]              		mov	[num_cyln], cx
  6188                                  
  6189                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  6190                                  
  6191                                  		;mov	cl, [sec_trk] ; 10/12/2023
  6192                                  		;cmp	cl, [eot]	; may set carry
  6193                                  		;;jbe	short eot_ok
  6194                                  		;; 09/12/2022
  6195                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  6196                                  		;; 14/08/2023
  6197                                  		;jbe	short eotok
  6198                                  		;mov	[eot], cl
  6199                                  		; 10/12/2023
  6200 00001EEB 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  6201 00001EEF 7604                    		jbe	short eotok
  6202 00001EF1 8816[2C01]              		mov	[eot], dl
  6203                                  ;eot_ok:
  6204                                  eotok:
  6205                                  		; 10/12/2023
  6206                                  		; !!!
  6207                                  		; (following pops are moved to 'chk_changeline' procedure)
  6208                                  		;
  6209                                  		; 20/12/2022
  6210                                  		;pop	es ; ((*)) es = cs = ds
  6211                                  		;;pop	cx	; 10/12/2023
  6212                                  		;pop	dx
  6213                                  		;pop	di
  6214                                  
  6215                                  		; 20/12/2022
  6216                                  		;pop	ds
  6217                                  
  6218                                  ; Check	for presence of	changeline
  6219                                  
  6220                                  ; 10/12/2023
  6221                                  %if 0
  6222                                  		; 10/12/2023
  6223                                  		;xor	cx, cx	; 0
  6224                                  		;push	cx
  6225                                  		push	dx
  6226                                  
  6227                                  		mov	ah, 15h
  6228                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6229                                  					; DL = drive ID
  6230                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6231                                  					; CX:DX	= number of sectors on the media
  6232                                  		; 10/12/2023
  6233                                  		pop	dx
  6234                                  		;pop	cx
  6235                                  		mov	cx, 0 ; 12/12/2023
  6236                                  		jc	short changeline_done
  6237                                  		cmp	ah, 2		; check	for presence of	changeline
  6238                                  		jnz	short changeline_done
  6239                                  
  6240                                  ; we have a drive with change line support.
  6241                                  
  6242                                  		or	cl, 2		; fchangeline
  6243                                  					; signal type
  6244                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  6245                                  %endif
  6246                                  		; 10/12/2023
  6247 00001EF5 E83800                  		call	chk_changeline
  6248                                  		;jc	short changeline_done
  6249                                  
  6250                                  ; we now try to set up the form factor for the types of media that we know
  6251                                  ; and can recognise. for the rest, we set the form factor as "other".
  6252                                  
  6253                                  changeline_done:
  6254                                  
  6255                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  6256                                  			
  6257 00001EF8 803E[0E1A]28            		cmp	byte [num_cyln], 40
  6258 00001EFD 750B                    		jnz	short try_80
  6259 00001EFF 803E[101A]09            		cmp	byte [sec_trk], 9
  6260 00001F04 765F                    		jbe	short nextdrive
  6261                                  gotother:
  6262                                  		; 10/12/2023
  6263                                  		; ch = 0, cl = 2 or 0
  6264                                  				
  6265 00001F06 B607                    		mov	dh, 7 		; ffOther
  6266                                  					; we have a "strange" medium 
  6267 00001F08 EB5B                    		jmp	short nextdrive
  6268                                  ;-----------------------------------------------------------------------------
  6269                                  
  6270                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  6271                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  6272                                  
  6273                                  try_80:					
  6274 00001F0A 803E[0E1A]50            		cmp	byte [num_cyln], 80
  6275 00001F0F 75F5                    		jnz	short gotother
  6276 00001F11 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  6277 00001F13 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it ?
  6278 00001F18 744B                    		jz	short nextdrive	; yeah,	go update
  6279                                  
  6280                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  6281                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  6282                                  		;mov	dh, ff144
  6283                                  		;cmp	byte [sec_trk], 18
  6284                                  		;je	short nextdrive
  6285                                  
  6286 00001F1A 803E[101A]0F            		cmp	byte [sec_trk], 15
  6287 00001F1F 740B                    		jz	short got96
  6288                                  		
  6289 00001F21 803E[101A]09            		cmp	byte [sec_trk], 9
  6290 00001F26 75DE                    		jnz	short gotother
  6291                                  		
  6292 00001F28 B602                    		mov	dh, 2 		; ffSmall
  6293 00001F2A EB39                    		jmp	short nextdrive
  6294                                  ; ----------------------------------------------------------------------------
  6295                                  
  6296                                  got96:					
  6297 00001F2C B601                    		mov	dh, 1		; ff96tpi
  6298 00001F2E EB35                    		jmp	short nextdrive
  6299                                  
  6300                                  ; ----------------------------------------------------------------------------
  6301                                  		
  6302                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6303                                  		; check change line feature (and set fhave96 if there is)
  6304                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  6305                                  chk_changeline:
  6306 00001F30 59                      		pop	cx ; near call return address
  6307                                  
  6308                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  6309 00001F31 07                      		pop	es ; es=cs=ds ; 21/12/2022
  6310                                  		;pop	cx	; (10/12/2023)
  6311 00001F32 5A                      		pop	dx
  6312 00001F33 5F                      		pop	di ; BDS address/offset
  6313                                  		
  6314 00001F34 51                      		push	cx ; near call return address
  6315                                  
  6316                                  		;xor	cx, cx ; 0
  6317                                  		;push	cx
  6318 00001F35 52                      		push	dx
  6319                                  
  6320 00001F36 B415                    		mov	ah, 15h
  6321 00001F38 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6322                                  					; DL = drive ID
  6323                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6324                                  					; CX:DX	= number of sectors on the media
  6325 00001F3A 5A                      		pop	dx
  6326                                  		;pop	cx
  6327 00001F3B B90000                  		mov	cx, 0
  6328 00001F3E 720D                    		jc	short chk_chgl_1
  6329                                  
  6330 00001F40 80FC02                  		cmp	ah, 2		; is there changeline?
  6331 00001F43 7508                    		jne	short chk_chgl_2 ; *
  6332                                  
  6333 00001F45 80C902                  		or	cl, 2
  6334                                  		;or	cl, ah ; 2
  6335 00001F48 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  6336                                  		; cf = 0
  6337                                  chk_chgl_1:
  6338                                  chk_chgl_2:
  6339 00001F4D C3                      		retn
  6340                                  
  6341                                  ;chk_chgl_2:	; *
  6342                                  ;		; 10/12/2023
  6343                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  6344                                  ;		;stc
  6345                                  ;		; cf = 1
  6346                                  ;		retn
  6347                                  
  6348                                  ; ----------------------------------------------------------------------------
  6349                                  
  6350                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  6351                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  6352                                  
  6353                                  noparmsfromrom:
  6354                                  		; 10/12/2023
  6355                                  		; !!!
  6356                                  		; (following pops are moved to 'chk_changeline' procedure)
  6357                                  		;
  6358                                  		; 20/12/2022
  6359                                  		;pop	es ; ((*))
  6360                                  		;;pop	cx	; (10/12/2023)
  6361                                  		;pop	dx
  6362                                  		;pop	di
  6363                                  		
  6364                                  		; 20/12/2022
  6365                                  		;pop	ds
  6366                                  ; 10/12/2023
  6367                                  %if 0
  6368                                  		; 10/12/2023
  6369                                  		;xor	cx, cx ; 0
  6370                                  		;push	cx
  6371                                  		push	dx
  6372                                  
  6373                                  
  6374                                  		mov	ah, 15h
  6375                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6376                                  					; DL = drive ID
  6377                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6378                                  					; CX:DX	= number of sectors on the media
  6379                                  		; 10/12/2023
  6380                                  		pop	dx
  6381                                  		;pop	cx
  6382                                  		mov	cx, 0 ; 12/12/2023
  6383                                  		jc	short nextdrive
  6384                                  
  6385                                  		cmp	ah, 2		; is there changeline?
  6386                                  		jnz	short nextdrive
  6387                                  
  6388                                  		or	cl, 2
  6389                                  		mov	byte [fhave96], 1 ; fchangeline
  6390                                  %endif
  6391                                  		; 10/12/2023
  6392 00001F4E E8DFFF                  		call	chk_changeline
  6393 00001F51 7212                    		jc	short nextdrive
  6394                                  		
  6395                                  		; change line support, [fhave96] = 1
  6396                                  		
  6397 00001F53 C606[0E1A]50            		mov	byte [num_cyln], 80
  6398 00001F58 B601                    		mov	dh, 1		; ff96tpi
  6399 00001F5A B00F                    		mov	al, 15
  6400 00001F5C 3A06[2C01]              		cmp	al, [eot]
  6401 00001F60 7603                    		jbe	short nextdrive
  6402 00001F62 A2[2C01]                		mov	[eot], al
  6403                                  ; ----------------------------------------------------------------------------
  6404                                  
  6405                                  ;eot_ok2:
  6406                                  nextdrive:
  6407                                  		; 10/12/2023
  6408                                  		; ch = 0, cl = 2 or 0	
  6409                                  				
  6410 00001F65 80C920                  		or	cl, 20h	; fi_own_physical
  6411                                  					; set this true	for all	drives
  6412 00001F68 88D7                    		mov	bh, dl		; save int13 drive number
  6413                                  
  6414                                  ; we need to do special things if we have a single drive system and are setting
  6415                                  ; up a logical drive. it needs to have the same int13 drive number as its
  6416                                  ; counterpart, but the next drive letter. also reset ownership flag.
  6417                                  ; we detect the presence of this situation by examining the flag single for the
  6418                                  ; value 2.
  6419 00001F6A 803E[7800]02            		cmp	byte [single], 2
  6420 00001F6F 7505                    		jnz	short not_special
  6421 00001F71 FECF                    		dec	bh		; int13	drive number same for logical drive
  6422 00001F73 80F120                  		xor	cl, 20h	; fi_own_physical
  6423                                  					; reset	ownership flag for logical drive
  6424                                  not_special:
  6425                                  
  6426                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  6427                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  6428                                  ; form factor is of type "ffother".
  6429                                  				
  6430                                  		;xor	ax, ax		; fill BDS for drive
  6431                                  		;mov	al, [num_heads]
  6432                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  6433 00001F76 A1[0C1A]                		mov	ax, [num_heads]
  6434                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  6435 00001F79 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  6436 00001F7C 31C0                    		xor	ax, ax		; *
  6437 00001F7E A0[101A]                		mov	al, [sec_trk]
  6438                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  6439 00001F81 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  6440                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  6441 00001F84 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  6442                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  6443 00001F87 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  6444 00001F8A 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  6445 00001F8D 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  6446                                  		;mov	bl, [num_cyln]
  6447                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  6448                                  		; 10/12/2023
  6449 00001F90 A1[0E1A]                		mov	ax, [num_cyln]
  6450 00001F93 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  6451                                  
  6452 00001F96 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  6453 00001F9B 7510                    		jnz	short no_single
  6454                                  		;mov	byte [single], 2 ; Don't forget we have
  6455                                  					; single drive system
  6456                                  		; 10/12/2023
  6457 00001F9D FE06[7800]              		inc	byte [single]	; [single] = 2
  6458                                  		; 18/12/2022
  6459 00001FA1 80C910                  		or	cl, 10h
  6460                                  		;or	cx, 10h		; fi_am_mult
  6461                                  					; set that this	is one of several drives
  6462                                  		;or	[di+23h], cx	; [di+BDS.flags]
  6463 00001FA4 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  6464                                  					; save flags
  6465 00001FA7 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6466                                  					; move to next BDS in list
  6467 00001FA9 FEC2                    		inc	dl		; add a	number
  6468 00001FAB EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  6469                                  ; ----------------------------------------------------------------------------
  6470                                  
  6471                                  no_single:				
  6472                                  		;inc	dl
  6473                                  		; 18/12/2022
  6474 00001FAD 42                      		inc	dx
  6475 00001FAE E97CFE                  		jmp	loop_drive
  6476                                  ; ----------------------------------------------------------------------------
  6477                                  
  6478                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6479                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  6480                                  done_drives:	
  6481                                  		;mov	word [di+BDS.link], -1
  6482 00001FB1 C705FFFF                		mov	word [di], -1	; set link to null
  6483                                  
  6484                                  ; set up all the hard drives in	the system
  6485                                  
  6486                                  		; 20/12/2022
  6487                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6488                                  dohard:					
  6489 00001FB5 8A36[5D1A]              		mov	dh, [hnum]
  6490 00001FB9 08F6                    		or	dh, dh		; done if no hardfiles
  6491 00001FBB 7459                    		jz	short static_configure
  6492 00001FBD B280                    		mov	dl, 80h
  6493                                  dohard1:				
  6494 00001FBF 52                      		push	dx
  6495 00001FC0 8B3E[601A]              		mov	di, [end_of_bdss]
  6496 00001FC4 8A1E[7500]              		mov	bl, [drvmax]
  6497 00001FC8 B700                    		mov	bh, 0		; first	primary	partition (or active)
  6498 00001FCA E89A01                  		call	sethard
  6499 00001FCD 7208                    		jb	short hardfile_err
  6500 00001FCF E86508                  		call	dmax_check	; error	if already 26 drives
  6501 00001FD2 7303                    		jnb	short hardfile_err
  6502 00001FD4 E87508                  		call	xinstall_bds	; insert new bds into linked list
  6503                                  hardfile_err:				
  6504 00001FD7 5A                      		pop	dx
  6505                                  		;inc	dl		; next hard drive
  6506                                  		; 12/12/2023
  6507 00001FD8 42                      		inc	dx
  6508 00001FD9 FECE                    		dec	dh
  6509 00001FDB 75E2                    		jnz	short dohard1
  6510                                  
  6511                                  ; end of physical drive	initialization
  6512                                  
  6513                                  ; *** do not change the position of the following statement.
  6514                                  ; *** domini routine will use [drvmax] value for the start of the logical
  6515                                  ; *** drive number of mini disk(s).
  6516                                  					
  6517 00001FDD E8CA06                  		call	domini		; for setting up mini disks, if found
  6518                                  
  6519                                  ; -- begin added section
  6520                                  
  6521 00001FE0 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  6522 00001FE4 B280                    		mov	dl, 80h
  6523                                  dohardx1:				
  6524 00001FE6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  6525                                  dohardx2:				
  6526 00001FE8 52                      		push	dx
  6527 00001FE9 53                      		push	bx
  6528 00001FEA 8B3E[601A]              		mov	di, [end_of_bdss]
  6529 00001FEE 8A1E[7500]              		mov	bl, [drvmax]
  6530 00001FF2 E87201                  		call	sethard
  6531 00001FF5 720E                    		jb	short dohardx4	; move to next hardfile if error
  6532 00001FF7 E83D08                  		call	dmax_check	; make sure <=26 drives
  6533 00001FFA 7309                    		jnb	short dohardx4	; skip if error
  6534 00001FFC E84D08                  		call	xinstall_bds	; insert new bds into linked list
  6535 00001FFF 5B                      		pop	bx		; get partition number
  6536 00002000 5A                      		pop	dx		; restore physical drive counts
  6537 00002001 FEC7                    		inc	bh
  6538 00002003 EBE3                    		jmp	short dohardx2	; keep looping until we fail
  6539                                  ; ----------------------------------------------------------------------------
  6540                                  
  6541                                  dohardx4:				
  6542 00002005 5B                      		pop	bx		; unjunk partition number from stack
  6543 00002006 5A                      		pop	dx		; restore physical drive counts
  6544                                  		;inc	dl		; next hard drive
  6545                                  		; 12/12/2023
  6546 00002007 42                      		inc	dx
  6547 00002008 FECE                    		dec	dh
  6548 0000200A 75DA                    		jnz	short dohardx1
  6549                                  
  6550                                  ; -- end changed section
  6551                                  
  6552                                  ;******************************************************************************
  6553                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  6554                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  6555                                  ; than two diskette drives
  6556                                  ;
  6557                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  6558                                  ;		as usual and then rescan the bds chain to adjust the  drive
  6559                                  ;		letters. to do this, scan for disk drives and assign logical
  6560                                  ;		drive number starting from 2 and then rescan diskette drives
  6561                                  ;		and assign next to the last logical drive number of last disk
  6562                                  ;		drive to the 3rd and 4th diskette drives.
  6563                                  ;******************************************************************************
  6564                                  
  6565 0000200C 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  6566                                  		;jbe	short static_configure ; no - no need for remapping
  6567 00002011 7603                    		jbe	short no_remap
  6568 00002013 E8D500                  		call	remap		; remap	bds chain to adjust driver letters
  6569                                  no_remap:
  6570                                  
  6571                                  ; End of drive initialization.
  6572                                  
  6573                                  ; ----------------------------------------------------------------------------
  6574                                  
  6575                                  ;we now decide, based on the configurations available so far, what
  6576                                  ;code or data we need to keep as a stay resident code. the following table
  6577                                  ;shows the configurations under consideration. they are listed in the order
  6578                                  ;of their current position memory.
  6579                                  ;
  6580                                  ;configuration will be done in two ways:
  6581                                  ;
  6582                                  ;first, we are going to set "static configuration". static configuration will
  6583                                  ;consider from basic configuration to endof96tpi configuration. the result
  6584                                  ;of static configuration will be the address the dynamic configuration will
  6585                                  ;use to start with.
  6586                                  ;
  6587                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  6588                                  ;involves possible relocation of code or data. dynamic configuration routine
  6589                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  6590                                  ;code individually. after these operation, [dosdatasg] will be set.
  6591                                  ;this will be the place sysinit routine will relocate msdos module for good.
  6592                                  
  6593                                  ; -- begin changed section
  6594                                  ;
  6595                                  ;   1.	 basic configuration for msbio (endfloppy)
  6596                                  ;   2.   end96tpi	; a system that supports "change line error"
  6597                                  ;   3.	 end of bdss	; end of bdss for hard disks
  6598                                  ;   4.	 endatrom	;some of at rom fix module.
  6599                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  6600                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  6601                                  ;
  6602                                  
  6603                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  6604                                  
  6605                                  static_configure:			
  6606 00002016 8B3E[601A]              		mov	di, [end_of_bdss]
  6607 0000201A 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  6608                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  6609 0000201E 750D                    		jnz	short dynamic_configure	; that's the end, then
  6610                                  		; 18/10/2022
  6611 00002020 BF[4C08]                		mov	di, end96tpi
  6612                                  		;mov	di, offset harddrv ; end96tpi
  6613                                  					; keep everything up to end96tpi
  6614 00002023 803E[7700]00            		cmp	byte [fhave96], 0
  6615 00002028 7503                    		jnz	short dynamic_configure
  6616                                  		
  6617 0000202A BF[3808]                		mov	di, endfloppy
  6618                                  dynamic_configure:
  6619                                  		; 20/12/2022
  6620                                  		;push	cs
  6621                                  		;pop	es
  6622                                  		
  6623                                  		; 10/12/2023
  6624 0000202D FC                      		cld	; clear direction flag is not necessary here !?
  6625                                  			; because there will not be a running program
  6626                                  			; which will set direction flag as backward (std)
  6627                                  
  6628                                  ; -- end changed section
  6629                                  
  6630                                  		; 20/12/2022
  6631                                  		; ds = cs <> es
  6632                                  		; ss = 0
  6633                                  		; sp = 700h
  6634                                  
  6635                                  		; 13/12/2023
  6636 0000202E BE00F0                  		mov	si, 0F000h
  6637 00002031 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  6638                                  
  6639 00002033 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  6640                                  		;jnz	short checkcmosclock
  6641                                  		; 10/12/2023
  6642 00002038 751E                    		jnz	short checkcompaqbug ; no
  6643 0000203A 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  6644                                  		;jz	short checkcmosclock
  6645 0000203F 7417                    		jz	short checkcompaqbug
  6646 00002041 97                      		xchg	ax, di		; save allocation pointer in ax
  6647                                  		; 13/12/2023
  6648                                  		;mov	si, 0F000h
  6649                                  		;mov	es, si		; ES ->	ROM BIOS segment
  6650 00002042 BE[661A]                		mov	si, bios_date	; "01/10/84"
  6651 00002045 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  6652 00002048 B90900                  		mov	cx, 9		; bdate_l
  6653                                  					; Only patch ROM for bios 01/10/84
  6654 0000204B F3A6                    		repe cmpsb		; check	for date + zero	on end
  6655 0000204D 97                      		xchg	ax, di		; restore allocation pointer
  6656                                  
  6657                                  ; M015 -- begin changes
  6658                                  
  6659                                  		;jnz	short checkcmosclock
  6660                                  		; 02/10/2022
  6661 0000204E 7508                    		jnz	short checkcompaqbug
  6662                                  
  6663                                  ; install at rom fix
  6664                                  
  6665                                  		; 19/10/2022
  6666                                  		;mov	cx, offset endatrom
  6667 00002050 B9[2018]                		mov	cx, endatrom
  6668                                  		;mov	si, offset ibm_disk_io
  6669 00002053 BE[F216]                		mov	si, ibm_disk_io
  6670 00002056 EB46                    		jmp	short install_int13_patch
  6671                                  ; ----------------------------------------------------------------------------
  6672                                  
  6673                                  ; M065 -- begin changes
  6674                                  ;
  6675                                  ; On certain systems with Western Digital disk controllers, the
  6676                                  ; following detection scheme caused an unpredictable and serious
  6677                                  ; failure. In particular, they've implemented a nonstandard
  6678                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  6679                                  ; what happens to be at es:[bx] and other memory locations indexed
  6680                                  ; off of it.
  6681                                  ;
  6682                                  ; Compaq was unable to tell us exactly which kind of systems have
  6683                                  ; the bug, except that they guarantee that the bug was fixed in
  6684                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  6685                                  ; string, and then look for date codes before 08/04/86 to decide
  6686                                  ; when to install the hook.
  6687                                  
  6688                                  ;checkcmosclock:
  6689                                  ; 02/10/2022				
  6690                                  checkcompaqbug:
  6691                                  		; 20/12/2022
  6692                                  		; es = 0F000h
  6693                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  6694                                  		;mov	es, ax
  6695                                  
  6696                                  		; 19/10/2022
  6697 00002058 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  6698                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  6699 0000205F 754B                    		jnz	short not_compaq_patch
  6700 00002061 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  6701                                  		;cmp	word ptr es:0FFECh, 'PM'
  6702 00002068 7542                    		jnz	short not_compaq_patch
  6703 0000206A 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  6704                                  		;cmp	word ptr es:0FFEEh, 'QA'
  6705 00002071 7539                    		jnz	short not_compaq_patch
  6706                                  
  6707                                  ; We're running on a COMPAQ. Now look at the date code.
  6708                                  
  6709 00002073 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  6710 00002077 86C4                    		xchg	ah, al
  6711                                  
  6712                                  ; 11/12/2023
  6713                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  6714                                  %if 0
  6715                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  6716                                  		ja	short not_compaq_patch
  6717                                  		jz	short chkcompaqbug1
  6718                                  		cmp	ax, 3739h       ; '97'
  6719                                  		jbe	short not_compaq_patch
  6720                                  		stc
  6721                                  chkcompaqbug1:
  6722                                  		jb	short do_compaq_patch
  6723                                  		mov	ax, [es:0FFF5h]
  6724                                  		xchg	ah, al
  6725                                  		cmp	ax, 3038h       ; '80'
  6726                                  		ja	short not_compaq_patch
  6727                                  		jb	short do_compaq_patch
  6728                                  		mov	ax, [es:0FFF8h]
  6729                                  		xchg	ah, al
  6730                                  		cmp	ax, 3034h       ; '40'
  6731                                  		jnb	short not_compaq_patch
  6732                                  do_compaq_patch:
  6733                                  %endif
  6734                                  		; 11/12/2023
  6735                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  6736                                  
  6737 00002079 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  6738                                  		;cmp	ax, '86'        ; 3836h
  6739                                  					; is it	86?
  6740 0000207C 772E                    		ja	short not_compaq_patch
  6741 0000207E 7218                    		jb	short do_compaq_patch
  6742 00002080 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  6743 00002084 86C4                    		xchg	ah, al
  6744 00002086 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  6745                                  		;cmp	ax, '08'        ; 3038h
  6746                                  					; is it	08?
  6747 00002089 7721                    		ja	short not_compaq_patch
  6748 0000208B 720B                    		jb	short do_compaq_patch
  6749 0000208D 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  6750 00002091 86C4                    		xchg	ah, al
  6751 00002093 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  6752                                  		;cmp	ax, '04'        ; 3034h
  6753                                  					; is it	04?
  6754 00002096 7314                    		jnb	short not_compaq_patch
  6755                                  
  6756                                  do_compaq_patch:			
  6757 00002098 B9[3D18]                		mov	cx, end_compaq_i13hook
  6758                                  		;mov	si, endatrom
  6759                                  		; 11/12/2023
  6760 0000209B BE[2018]                		mov	si, compaq_disk_io ; endatrom
  6761                                  
  6762                                  install_int13_patch:			
  6763 0000209E 0E                      		push	cs
  6764 0000209F 07                      		pop	es
  6765                                  		; 18/10/2022
  6766 000020A0 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  6767 000020A4 8C0E[B600]              		mov	[Orig13+2], cs
  6768 000020A8 29F1                    		sub	cx, si		; size of rom fix module
  6769 000020AA F3A4                    		rep movsb		; relocate it
  6770                                  
  6771                                  ; M065 -- end changes
  6772                                  
  6773                                  ; ----------------------------------------------------------------------------
  6774                                  not_compaq_patch:			; M065
  6775                                  		; 17/10/2022
  6776                                  checkcmosclock:	
  6777                                  		; 18/10/2022		
  6778 000020AC 0E                      		push	cs
  6779 000020AD 07                      		pop	es
  6780                                  
  6781                                  		; 20/12/2022
  6782                                  		; ds = cs = es
  6783                                  		; ss = 0
  6784                                  		; sp = 700h
  6785                                  
  6786                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6787                                  %if 0
  6788                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  6789                                  		jnz	short checkk09	; no
  6790                                  
  6791                                  		mov	word [daycnttoday], di
  6792                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  6793                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  6794                                  		mov	si, daycnt_to_day
  6795                                  		rep movsb
  6796                                  		mov	word [bintobcd], di
  6797                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  6798                                  					; let original segment stay
  6799                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  6800                                  		; 08/08/2023
  6801                                  		mov	cl, 11
  6802                                  		mov	si, bin_to_bcd
  6803                                  		rep movsb
  6804                                  %endif
  6805                                  
  6806                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6807                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  6808                                  		;push	cs
  6809                                  		;pop	es
  6810                                  checkk09:				
  6811 000020AE 57                      		push	di ; ? ; save ? ; 21/12/2022
  6812                                  
  6813                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  6814                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  6815                                  %if 0		
  6816                                  
  6817                                  		mov	ax, 4101h	; wait for bh=es:[di]
  6818                                  		mov	bl, 1		; wait for 1 clock tick
  6819                                  		mov	bh, [es:di]
  6820                                  		stc			; Assume we will fail
  6821                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  6822                                  					; AL = condition type, BH = condition compare or mask value
  6823                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  6824                                  					; DX = I/O port	address	if AL bit 4 set
  6825                                  					; 11/12/2023
  6826                                  					; ES:DI = user byte if AL bit 4 clear
  6827                                  %endif
  6828                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  6829                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  6830                                  	
  6831                                  		; ........
  6832                                  
  6833 000020AF B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  6834 000020B2 B304                    		mov	bl, 4		; wait for 4 clock ticks
  6835 000020B4 F9                      		stc			; Assume we will fail
  6836 000020B5 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  6837                                  					; AL = condition type, BH = condition compare or mask value
  6838                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  6839                                  					; DX = I/O port address if AL bit 4 set
  6840                                  		; ........
  6841                                  
  6842 000020B7 5F                      		pop	di ; ?
  6843 000020B8 721B                    		jc	short configdone ; 21/12/2022
  6844                                  
  6845 000020BA C606[7900]01            		mov	byte [fhavek09], 1
  6846                                  					; remember we have a k09 type
  6847 000020BF 1E                      		push	ds
  6848 000020C0 31C0                    		xor	ax, ax
  6849 000020C2 8ED8                    		mov	ds, ax
  6850                                  		
  6851 000020C4 893EB001                		mov	[6Ch*4], di
  6852                                  		;mov	ds:1B0h, di	; [6Ch*4]
  6853                                  					; new int 6Ch handler
  6854                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  6855 000020C8 8C0EB201                		mov	word [6Ch*4+2], cs
  6856 000020CC 1F                      		pop	ds
  6857                                  		; 20/12/2022
  6858                                  		; ds = cs = es
  6859                                  		;mov	si, int6c
  6860                                  		;mov	cx, endk09-int6c ; 459
  6861                                  		;;mov	cx, 459		; endk09 - int6c
  6862                                  					; size of k09 routine
  6863                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6864                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  6865 000020CD BE[3E18]                		mov	si, int_6Ch
  6866 000020D0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  6867 000020D3 F3A4                    		rep movsb		;
  6868                                  					; set up config	stuff for sysinit
  6869                                  ; ----------------------------------------------------------------------------
  6870                                  ; Set up config stuff for SYSINIT
  6871                                  
  6872                                  ; 17/10/2022
  6873                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  6874                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  6875                                  ; 09/12/2022
  6876                                  SETDRIVE equ SetDrive
  6877                                  GETBP equ GetBp
  6878                                  		
  6879                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6880                                  configdone:	
  6881                                  		; 21/12/2022			
  6882                                  		; 20/03/2019
  6883                                  		;push	cs		; di is	final ending address of	msbio.
  6884                                  		;pop	ds
  6885                                  		
  6886 000020D5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  6887                                  		; 10/12/2022
  6888                                  		;shr	di, 1
  6889                                  		;shr	di, 1
  6890                                  		;shr	di, 1
  6891                                  		;shr	di, 1
  6892 000020D8 B104                    		mov	cl, 4
  6893 000020DA D3EF                    		shr	di, cl		
  6894                                  		; 10/12/2022
  6895 000020DC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  6896                                  		; 19/10/2022 - Temporary !
  6897                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  6898 000020DF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  6899                                  
  6900                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  6901                                  
  6902                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  6903                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  6904                                  	     
  6905                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  6906                                  
  6907                                  ; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 combined/single kernel file)
  6908                                  
  6909                                  	     ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  6910                                  
  6911                                  	     ; (("IBMDOS.COM" kernel file reading code here, below...))	
  6912                                  
  6913                                  ; ----------------------------------------------------------------------------
  6914                                  ; ----------------------------------------------------------------------------
  6915                                  %if 0
  6916                                  		mov	ax, [drvfat]	; get drive and	fat id
  6917                                  		; 22/12/2022
  6918                                  		; Note: SETDRIVES uses AL (drive number) only
  6919                                  		mov	bp, SETDRIVE
  6920                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6921                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  6922                                  					; at 2C7h:4D7h = 70h:2A47h
  6923                                  		push	cs		; simulate far call
  6924                                  		call	call_bios_code	; get bds for drive
  6925                                  		mov	bp, GETBP	; ensure valid bpb is present
  6926                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6927                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  6928                                  		push	cs
  6929                                  		call	call_bios_code
  6930                                  
  6931                                  	; resort to funky old segment definitions for now
  6932                                  
  6933                                  		; 22/12/2022
  6934                                  		;push	es		; copy bds to ds:di
  6935                                  		;pop	ds
  6936                                  
  6937                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  6938                                  	;
  6939                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  6940                                  	;	  back. Apparently it was what actually setup es: for the following
  6941                                  	; cas----
  6942                                  
  6943                                  		; 22/12/2022
  6944                                  		;xor	di, di
  6945                                  		;mov	al, [es:di]	; get fat id byte
  6946                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  6947                                  		;mov	[es:drvfat+1], al
  6948                                  		;mov	ax, [es:drvfat]
  6949                                  		
  6950                                  		; 22/12/2022
  6951                                  		; ds = cs
  6952                                  	;;;	mov	al, [drvfat]
  6953                                  
  6954                                  	; cas -- why do a SECOND setdrive here???
  6955                                  
  6956                                  		; 22/12/2022
  6957                                  		;push	es		; save whatever's in es
  6958                                  		;push	ds		; copy bds to es:di
  6959                                  		;pop	es
  6960                                  		;push	cs		; copy Bios_Data to ds
  6961                                  		;pop	ds
  6962                                  	
  6963                                  	; 22/12/2022
  6964                                  	;;;	mov	bp, SETDRIVE
  6965                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  6966                                  	;;;	push	cs		; simulate far call
  6967                                  	;;;	call	call_bios_code	; get correct bds for this drive
  6968                                  	
  6969                                  		; 22/12/2022
  6970                                  		;push	es		; copy bds back to ds:di
  6971                                  		;pop	ds
  6972                                  		;pop	es		; pop whatever was in es
  6973                                  
  6974                                  	; Now we load in the MSDOS.SYS file
  6975                                  
  6976                                  	; 22/12/2022
  6977                                  	; -----
  6978                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6979                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  6980                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  6981                                  	;				; get size of fat on media
  6982                                  	;	;mov	es:16DEh, bl
  6983                                  	;	mov	[es:fbigfat], bl
  6984                                  	;	mov	cl, [di+8]
  6985                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6986                                  	;	;sub	es:16D8h, ax
  6987                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  6988                                  	;				; need a logical sector number that will
  6989                                  	;				; be used by getclus(diskrd procedure)
  6990                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  6991                                  	;	;sbb	es:16DAh, ax
  6992                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  6993                                  	; -----
  6994                                  		
  6995                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6996                                  	; -----	; 22/12/2022
  6997                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6998                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  6999                                  		; 11/12/2023 ; *
  7000                                  		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  7001                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  7002                                  					; get size of fat on media
  7003                                  		mov	[fbigfat], bl
  7004                                  		mov	cl, [es:di+8]
  7005                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  7006                                  		sub	[First_Data_Sector], ax ; *
  7007                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  7008                                  					; need a logical sector number that will
  7009                                  					; be used by getclus(diskrd procedure)
  7010                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7011                                  		sbb	[First_Data_Sector+2], ax ; *
  7012                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  7013                                  	; ------
  7014                                  
  7015                                  		xor	ch, ch	 ; cx = sectors/cluster
  7016                                  
  7017                                  	; the boot program has left the directory at 0:500h
  7018                                  
  7019                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7020                                  		;push	di
  7021                                  		push	ds
  7022                                  		;xor	di, di
  7023                                  		;mov	ds, di
  7024                                  		xor	bx, bx ; 0
  7025                                  		mov	ds, bx
  7026                                  		mov	bx, [53Ah]
  7027                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  7028                                  				   	; of root directory in the buffer at 500h)
  7029                                  		pop	ds
  7030                                  		mov     si, [firstcluster_hw] ; 11/12/2023 
  7031                                  				   	; (32 bit cluster number for FAT32 fs)
  7032                                  		;pop	ds
  7033                                  		;pop	di
  7034                                  
  7035                                  		; 12/12/2023
  7036                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  7037                                  		; ...........
  7038                                  		; ds = cs
  7039                                  		mov	al, [fbigfat]
  7040                                  		push	ax              ; (*) save fbigfat flags
  7041                                  		mov	al, [drvfat]
  7042                                  		or	al, [Boot_Drv]
  7043                                  		jnz	short boot_drv_fixed ; hard disk
  7044                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  7045                                  		push	bx              ; for removable drives
  7046                                  		push	cx
  7047                                  		; 28/12/2023
  7048                                  		;push	dx ; (not necessary)
  7049                                  	
  7050                                  		; 12/12/2023
  7051                                  		push	es
  7052                                  		pop	ds
  7053                                  
  7054                                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  7055                                  		xor	dx, dx
  7056                                  		or	ax, ax
  7057                                  		jnz	short prep_totalsecs_ok
  7058                                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  7059                                  		mov	dx, [di+1Dh]
  7060                                  prep_totalsecs_ok:
  7061                                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  7062                                  		sbb	dx, 0
  7063                                  		push	ax
  7064                                  		push	dx
  7065                                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  7066                                  		xor	ax, ax
  7067                                  		or	bx, bx
  7068                                  		jnz	short prep_fatsecs_ok
  7069                                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  7070                                  		mov	ax, [di+21h]
  7071                                  prep_fatsecs_ok:
  7072                                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  7073                                  				        ; [di+BDS.fats]
  7074                                  		xor	ch, ch
  7075                                  		mul	cx
  7076                                  		xchg	ax, cx
  7077                                  		mul	bx
  7078                                  		add	cx, dx
  7079                                  		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  7080                                  		pop	dx
  7081                                  		pop	ax              ; dx:ax = totals sectors - reserved sectors
  7082                                  		sub	ax, bx
  7083                                  		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  7084                                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  7085                                  		add	bx, 15          ; 16 directory entries per sector
  7086                                  				        ; (round up sector count by adding 15)
  7087                                  		mov	cl, 4           ; (rounded) dir entries / 16
  7088                                  		shr	bx, cl
  7089                                  		xor	cx, cx
  7090                                  		sub	ax, bx
  7091                                  		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  7092                                  					; (will be used for cluster count calculation)
  7093                                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  7094                                  
  7095                                  		; 12/12/2023
  7096                                  		push	cs
  7097                                  		pop	ds
  7098                                  
  7099                                  		push	ax              ; 32 bit division (data sectors / sector per cluster)
  7100                                  		mov	ax, dx
  7101                                  		xor	dx, dx
  7102                                  		div	cx
  7103                                  		mov	bx, ax
  7104                                  		pop	ax
  7105                                  		div	cx
  7106                                  		or	bx, bx          ; 32 bit cluster count if bx > 0
  7107                                  		jnz	short set_fbigbig_flag ; too big cluster number
  7108                                  		cmp	ax, 0FFF6h
  7109                                  		jb	short set_fbig_flag
  7110                                  set_fbigbig_flag:
  7111                                  		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  7112                                  		jmp	short set_fbig_flag_ok
  7113                                  ; ---------------------------------------------------------------------------
  7114                                  
  7115                                  set_fbig_flag:
  7116                                  		cmp	ax, 0FF6h       ; 4096-10
  7117                                  				        ; is this 16-bit fat?
  7118                                  		jb	short set_fbig_flag_ok ; no, small fat
  7119                                  		or	byte [fbigfat], 40h ; FAT16 ; fbig
  7120                                  set_fbig_flag_ok:
  7121                                  		; 28/12/2023
  7122                                  		;pop	dx
  7123                                  		pop	cx
  7124                                  		pop	bx
  7125                                  boot_drv_fixed:
  7126                                  		xor	di, di
  7127                                  
  7128                                  		; cx = sectors/cluster
  7129                                  		; si:bx = first cluster
  7130                                  		; di = 0
  7131                                  
  7132                                  		; ...........
  7133                                  loadit:
  7134                                  		mov	ax, SYSINITSEG	; 46Dh
  7135                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  7136                                  		;;mov	ax, 46Dh	; sysinit segment
  7137                                  		mov	es, ax
  7138                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  7139                                  		;mov	es, [es:271h]
  7140                                  
  7141                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  7142                                  
  7143                                  ; ----------------------------------------------------------------------------
  7144                                  
  7145                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7146                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  7147                                  
  7148                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7149                                  		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7150                                  		jz	short iseof
  7151                                  
  7152                                  eofbigbig:	; si:bx = 32 bit cluster number
  7153                                  		cmp	si, 0FFFh
  7154                                  		jnz	short iseofx
  7155                                  		cmp	bx, 0FFF7h
  7156                                  		jmp	short iseofx
  7157                                  
  7158                                  ; ----------------------------------------------------------------------------
  7159                                  		; 13/12/2023
  7160                                  iseof:
  7161                                  		;;test	byte [cs:fbigfat], fbig
  7162                                  		;test	byte [cs:fbigfat], 40h ; fbig
  7163                                  		; 12/12/2023
  7164                                  		; ds = cs
  7165                                  		test	byte [fbigfat], 40h ; fbig
  7166                                  		jnz	short eofbig
  7167                                  		cmp	bx, 0FF7h
  7168                                  		jmp	short iseofx
  7169                                  ; ----------------------------------------------------------------------------
  7170                                  
  7171                                  eofbig:
  7172                                  		cmp	bx, 0FFF7h
  7173                                  iseofx:
  7174                                  		jb	short loadit	; keep loading until cluster = eof
  7175                                  
  7176                                  ; ----------------------------------------------------------------------------
  7177                                  
  7178                                  		; 19/04/2024
  7179                                  		; 28/12/2023
  7180                                  		pop	ax		; (*) restore fbigfat flags
  7181                                  					; (after loading DOS kernel)
  7182                                  		; 06/04/2024
  7183                                  		;mov	[cs:fbigfat], al
  7184                                  		mov	[fbigfat], al
  7185                                  %endif
  7186                                  ; ----------------------------------------------------------------------------
  7187                                  ; ----------------------------------------------------------------------------
  7188                                  	
  7189                                  		; 19/04/2024
  7190                                  
  7191 000020E3 E8FE04                  		call	setdrvparms
  7192                                  
  7193                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  7194                                  		;;jmp	far 46Dh:267h
  7195                                  		; 12/12/2023
  7196                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  7197                                  
  7198 000020E6 EA[6902]D904            		jmp	SYSINITSEG:SYSINITSTART
  7199                                  
  7200                                  ; =============== S U B	R O U T	I N E ========================================
  7201                                  
  7202                                  ; Following are subroutines to support resident device driver initialization
  7203                                  ;
  7204                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  7205                                  
  7206                                  ;	M035 -- begin changed section
  7207                                  
  7208                                  ;******************************************************************************
  7209                                  ; module name: remap
  7210                                  ;
  7211                                  ; descriptive name: all the code for himem that could be separated from msbio
  7212                                  ;
  7213                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  7214                                  ;	     letters) if more than two diskette drives on the system.
  7215                                  ;
  7216                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  7217                                  ;	       as usual and then rescan the bds chain to adjust the drive
  7218                                  ;	       letters. to do this, scan for disk drives and assign logical
  7219                                  ;	       drive number starting from 2 and then rescan diskette drives
  7220                                  ;	       and assign next to the last logical drive number of last disk
  7221                                  ;	       drive to the 3rd and 4th diskette drives.
  7222                                  
  7223                                  ; input:       none
  7224                                  ; exit:	drive letters have been remapped in bds chain
  7225                                  ; exit error:  none
  7226                                  ; called from: msinit
  7227                                  ;
  7228                                  ; notes:  this function  will be called only if more than 2 diskettes are
  7229                                  ;	  found in the system
  7230                                  ;	  this function assumes that there are no more than 26 drives assigned
  7231                                  ;	    this is guaranteed by the code that creates bdss for partitions
  7232                                  ;	  this function assumes that the first entries in the chain are
  7233                                  ;	   floppy drives, and all the rest are hard drives
  7234                                  ;	  will alter the boot drive if necessary to reflect remapping
  7235                                  ;
  7236                                  ;******************************************************************************
  7237                                  
  7238                                  ; 17/10/2022
  7239                                  ; 02/10/2022
  7240                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7241                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  7242                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  7243                                  
  7244                                  remap:		; proc near
  7245                                  
  7246                                  		; 15/12/2023
  7247                                  		; ds = cs
  7248                                  		;mov	di, [cs:start_bds] ; get first bds
  7249 000020EB 8B3E[1901]              		mov	di, [start_bds]
  7250                                  
  7251                                  ; search for 1st fixed disk physical drive num
  7252                                  
  7253                                  drive_loop:
  7254 000020EF 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  7255                                  					; first	hard disk??
  7256 000020F3 7409                    		jz	short fdrv_found ; yes,	continue
  7257 000020F5 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7258                                  					; get next bds,	assume segment
  7259 000020F7 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  7260 000020FA 75F3                    		jnz	short drive_loop ; loop	if not
  7261 000020FC EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  7262                                  
  7263                                  ;------------------------------------------------------------------------------
  7264                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  7265                                  ;logical drive nums to 3, 4, 5 etc.
  7266                                  ;------------------------------------------------------------------------------
  7267                                  
  7268                                  fdrv_found:
  7269 000020FE B002                    		mov	al, 2		; start	with logical drv num=2
  7270                                  fdrv_loop:
  7271 00002100 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7272 00002103 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7273                                  					; ds:di--> next	bds
  7274                                  		;inc	al		; set num for next drive
  7275                                  		; 18/12/2022
  7276 00002105 40                      		inc	ax
  7277 00002106 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  7278 00002109 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  7279                                  
  7280                                  ;------------------------------------------------------------------------------
  7281                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  7282                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  7283                                  ; any more.
  7284                                  ;------------------------------------------------------------------------------
  7285                                  
  7286                                  		;mov	di, [cs:start_bds] ; [start_bds]
  7287                                  		; 15/12/2023
  7288 0000210B 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  7289 0000210F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7290                                  					; ds:di-->bds2
  7291                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  7292 00002111 8A26[2501]              		mov	ah, [dsktnum]
  7293 00002115 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  7294                                  remap_loop1:
  7295 00002118 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7296                                  					; set new num to next floppy
  7297 0000211A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7298 0000211D FEC0                    		inc	al		; new number for next floppy
  7299 0000211F FECC                    		dec	ah		; count down extra floppies
  7300 00002121 75F5                    		jnz	short remap_loop1
  7301                                  
  7302                                  ; now we've got to adjust the boot drive if we reassigned it
  7303                                  
  7304                                  		; 15/12/2023
  7305                                  		;mov	al, [cs:drvfat]
  7306 00002123 A0[FA19]                		mov	al, [drvfat]
  7307 00002126 3C02                    		cmp	al, 2		; is it	a: or b: ?
  7308 00002128 721D                    		jb	short rmap_exit
  7309                                  		;sub	al, [cs:dsktnum]
  7310 0000212A 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  7311 0000212E 7204                    		jb	short remap_boot_flop ;	brif so
  7312                                  
  7313                                  ; we've got to remap the boot hard drive
  7314                                  ; subtract the number of EXTRA floppies from it
  7315                                  
  7316 00002130 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  7317 00002132 EB04                    		jmp	short remap_change_boot_drv
  7318                                  ; ---------------------------------------------------------------------------
  7319                                  
  7320                                  ; we've got to remap the boot floppy.
  7321                                  ; add the number of hard drive partitions to it
  7322                                  
  7323                                  remap_boot_flop:
  7324                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  7325                                  		; 15/12/2023
  7326 00002134 0206[7500]              		add	al, [drvmax]
  7327                                  remap_change_boot_drv:			
  7328                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  7329 00002138 A2[FA19]                		mov	[drvfat], al
  7330 0000213B FEC0                    		inc	al
  7331 0000213D 1E                      		push	ds
  7332 0000213E BFD904                  		mov	di, SYSINITSEG	; 46Dh
  7333                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  7334                                  		;;mov	di, 46Dh	; SYSINIT segment
  7335 00002141 8EDF                    		mov	ds, di
  7336 00002143 A2[9602]                		mov	[DEFAULTDRIVE], al
  7337                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  7338                                  					; pass it to sysinit as	well
  7339 00002146 1F                      		pop	ds ; ds = cs
  7340                                  rmap_exit:
  7341 00002147 C3                      		retn
  7342                                  
  7343                                  ; =============== S U B	R O U T	I N E =======================================
  7344                                  
  7345                                  ; 17/10/2022
  7346                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  7347                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  7348                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  7349                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  7350                                  ;**************************************************
  7351                                  ; getboot - get the boot sector for a hard disk
  7352                                  ;
  7353                                  ; Reads the boot sector from a specified drive into
  7354                                  ; a buffer at the top of memory.
  7355                                  ;
  7356                                  ; dl = int13 drive number to read boot sector for
  7357                                  ;**************************************************
  7358                                  
  7359                                  ; 17/10/2022
  7360                                  bootbias equ 200h
  7361                                  
  7362                                  getboot:	; proc near
  7363                                  
  7364                                  		; 15/12/2023 - Retro DOS v5.0 
  7365                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  7366                                  		; ds = cs
  7367                                  		
  7368                                  		; 08/04/2018
  7369                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  7370                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  7371                                  		; 02/10/2022 - Retro DOS v4.0
  7372                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  7373                                  
  7374                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  7375                                  		; 15/12/2023
  7376 00002148 A1[041A]                		mov	ax, [init_bootseg]
  7377 0000214B 8EC0                    		mov	es, ax
  7378                                  
  7379                                  		; 17/10/2022
  7380 0000214D BB0002                  		mov	bx, bootbias ; 200h
  7381                                  		;mov	bx, 200h	; bootbias
  7382                                  					; load BX, ES:BX is where sector goes
  7383 00002150 B80102                  		mov	ax, 201h
  7384 00002153 30F6                    		xor	dh, dh
  7385 00002155 B90100                  		mov	cx, 1
  7386 00002158 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7387                                  					; AL = number of sectors to read, CH = track, CL = sector
  7388                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7389                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7390 0000215A 7209                    		jc	short erret
  7391                                  		; 17/10/2022
  7392 0000215C 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  7393                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  7394                                  					; Dave Litton magic word?
  7395 00002163 7401                    		jz	short norm_ret	; yes
  7396                                  erret:
  7397 00002165 F9                      		stc
  7398                                  norm_ret:
  7399 00002166 C3                      		retn
  7400                                  
  7401                                  ; =============== S U B	R O U T	I N E =======================================
  7402                                  
  7403                                  ; 28/12/2018 - Retro DOS v4.0 
  7404                                  
  7405                                  ;***************************************************************************
  7406                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  7407                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  7408                                  ;   our own logical sectors start. we also read in our boot sector to
  7409                                  ;   determine version number
  7410                                  ;
  7411                                  ;   inputs:	dl is rom drive number (80...)
  7412                                  ;		bh is partition number (0....) 
  7413                                  ;		ds:di points to bds
  7414                                  ;   outputs:	carry clear -> bpb is filled in
  7415                                  ;		carry set   -> bpb is left uninitialized due to error
  7416                                  ;	trashes (at least) si, cx
  7417                                  ;	MUST PRESERVE ES:!!!!
  7418                                  ;***************************************************************************
  7419                                  
  7420                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7421                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  7422                                  
  7423                                  sethard:	; proc near
  7424                                  		; 12/08/2023
  7425                                  		; ds = cs = BIOSDATA
  7426 00002167 57                      		push	di
  7427 00002168 53                      		push	bx
  7428                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  7429 00002169 06                      		push	es
  7430 0000216A 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  7431 0000216D 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  7432                                  		; 16/12/2023
  7433 00002170 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  7434                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  7435                                  					; fnon_removable
  7436 00002174 C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  7437                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7438                                  					; ffHardFile
  7439 00002178 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  7440 0000217D 88FE                    		mov	dh, bh		; partition number
  7441 0000217F 52                      		push	dx
  7442 00002180 B408                    		mov	ah, 8
  7443 00002182 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7444                                  					; DL = drive number
  7445                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7446                                  					; DL = number of consecutive drives
  7447                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7448                                  		;inc	dh
  7449                                  		; 16/12/2023 - Retro DOS v5.0
  7450 00002184 88F2                    		mov	dl, dh
  7451 00002186 B600                    		mov	dh, 0
  7452 00002188 42                      		inc	dx
  7453                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  7454 00002189 895515                  		mov	[di+15h], dx
  7455 0000218C 5A                      		pop	dx
  7456 0000218D 7253                    		jc	short setret	; error	if no hard disk
  7457                                  		; 16/12/2023
  7458                                  		;jc	short setret_j
  7459                                  		
  7460 0000218F 80E13F                  		and	cl, 3Fh
  7461 00002192 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  7462 00002195 52                      		push	dx		; save partition number
  7463 00002196 E8AFFF                  		call	getboot
  7464 00002199 5A                      		pop	dx		; restore partition number
  7465 0000219A 7246                    		jc	short setret
  7466                                  		; 16/12/2023
  7467                                  		;jnc	short chk_act_part
  7468                                  ;setret_j:
  7469                                  		;jmp	setret
  7470                                  
  7471                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7472                                  chk_act_part:
  7473 0000219C 31DB                    		xor	bx, bx ; 0
  7474                                  		;;mov	[cs:ep_start_sector], bx
  7475                                  		;;mov	[cs:ep_start_sector+2], bx
  7476                                  		;mov	[cs:ep_hidden_secs], bx
  7477                                  		;mov	[cs:ep_hidden_secs+2], bx
  7478                                  		; 16/12/2023
  7479                                  		; ds = cs
  7480                                  		; 20/12/2023
  7481                                  		;mov	[ep_start_sector], bx
  7482                                  		;mov	[ep_start_sector+2], bx
  7483 0000219E 891E[0422]              		mov	[ep_hidden_secs], bx
  7484 000021A2 891E[0622]              		mov	[ep_hidden_secs+2], bx
  7485                                  		
  7486 000021A6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7487                                  
  7488                                  ; The first 'active' partition is 00, the second is 01....
  7489                                  ;   then the remainder of the 'primary' but non-active partitions
  7490                                  
  7491                                  act_part:
  7492 000021A9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  7493 000021AE 740B                    		jz	short no_act	; no
  7494                                  ; 16/12/2023
  7495                                  %if 0		
  7496                                  		; 16/12/2023
  7497                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7498                                  		cmp	byte [es:bx], 1 ; FAT12
  7499                                  		jz	short got_good_act
  7500                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7501                                  		jz	short got_good_act
  7502                                  		
  7503                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7504                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7505                                  		jz	short got_good_act
  7506                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7507                                  		jz	short got_good_act
  7508                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7509                                  		jz	short got_good_act
  7510                                  
  7511                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7512                                  		jnz	short no_act
  7513                                  ;%else
  7514                                  		; 16/12/2023
  7515                                  		mov	al, [es:bx]	 ; partition type
  7516                                  
  7517                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7518                                  		cmp	al, 1		; FAT12
  7519                                  		je	short got_good_act
  7520                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7521                                  		je	short got_good_act
  7522                                  		
  7523                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7524                                  		cmp	al, 0Bh		; FAT32 CHS
  7525                                  		je	short got_good_act
  7526                                  		cmp	al, 0Ch		; FAT32 LBA
  7527                                  		je	short got_good_act
  7528                                  		cmp	al, 0Eh		; FAT16 LBA
  7529                                  		je	short got_good_act
  7530                                  
  7531                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7532                                  		jne	short no_act
  7533                                  %endif		
  7534                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7535                                  		; check if it is a primary dos partition
  7536                                  
  7537 000021B0 E83300                  		call	chk_partition_type
  7538 000021B3 7506                    		jne	short no_act
  7539                                  
  7540                                  got_good_act:				; 11/08/2023
  7541 000021B5 08F6                    		or	dh, dh		; is this our target partition #?
  7542                                  					; (0 = first primary dos or active partition)
  7543 000021B7 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  7544 000021B9 FECE                    		dec	dh		; count	down
  7545                                  no_act:					
  7546 000021BB 83C310                  		add	bx, 16
  7547 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7548                                  					; last entry done?
  7549 000021C2 75E5                    		jnz	short act_part	; no, process next entry
  7550                                  
  7551 000021C4 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7552                                  					; restore original value of bx
  7553                                  
  7554                                  ; Now scan the non-active partitions
  7555                                  
  7556                                  get_primary:
  7557 000021C7 26F647FC80              		test	byte [es:bx-4], 80h
  7558 000021CC 750B                    		jnz	short not_prim	; we've already scanned
  7559                                  					; the ACTIVE ones
  7560                                  ; 16/12/2023
  7561                                  %if 0
  7562                                  		; 16/12/2023
  7563                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7564                                  		cmp	byte [es:bx], 1	; FAT12
  7565                                  		jz	short got_prim
  7566                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7567                                  		jz	short got_prim
  7568                                  
  7569                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7570                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7571                                  		jz	short got_prim
  7572                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7573                                  		jz	short got_prim
  7574                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7575                                  		jz	short got_prim
  7576                                  
  7577                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7578                                  		jnz	short not_prim
  7579                                  ;%else
  7580                                  		; 16/12/2023
  7581                                  		mov	al, [es:bx]	 ; partition type
  7582                                  
  7583                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7584                                  		cmp	al, 1		; FAT12
  7585                                  		je	short got_prim
  7586                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7587                                  		je	short got_prim
  7588                                  		
  7589                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7590                                  		cmp	al, 0Bh		; FAT32 CHS
  7591                                  		je	short got_prim
  7592                                  		cmp	al, 0Ch		; FAT32 LBA
  7593                                  		je	short got_prim
  7594                                  		cmp	al, 0Eh		; FAT16 LBA
  7595                                  		je	short got_prim
  7596                                  
  7597                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7598                                  		jne	short not_prim
  7599                                  %endif
  7600                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7601                                  		; check if it is a primary dos partition
  7602                                  
  7603 000021CE E81500                  		call	chk_partition_type
  7604 000021D1 7506                    		jne	short not_prim
  7605                                  
  7606                                  got_prim:
  7607 000021D3 08F6                    		or	dh, dh		; is this our target partition?
  7608 000021D5 7431                    		jz	short set2
  7609 000021D7 FECE                    		dec	dh
  7610                                  not_prim:
  7611 000021D9 83C310                  		add	bx, 16
  7612 000021DC 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7613 000021E0 75E5                    		jnz	short get_primary ; loop till we've gone through table
  7614                                  setret:					
  7615 000021E2 F9                      		stc			; error	return
  7616 000021E3 E9C703                  		jmp	ret_hard_err
  7617                                  
  7618                                  ; ---------------------------------------------------------------------------
  7619                                  		
  7620                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7621                                  
  7622                                  chk_partition_type:
  7623                                  		; 16/12/2023
  7624 000021E6 268A07                  		mov	al, [es:bx]	 ; partition type
  7625                                  
  7626                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7627 000021E9 3C01                    		cmp	al, 1		; FAT12
  7628 000021EB 7412                    		je	short chk_ptype_retn
  7629 000021ED 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7630 000021EF 740E                    		je	short chk_ptype_retn
  7631                                  		
  7632                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7633 000021F1 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  7634 000021F3 740A                    		je	short chk_ptype_retn
  7635 000021F5 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  7636 000021F7 7406                    		je	short chk_ptype_retn
  7637 000021F9 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  7638 000021FB 7402                    		je	short chk_ptype_retn
  7639                                  
  7640 000021FD 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7641                                  chk_ptype_retn:
  7642                                  		; zf = 1 -> primary DOS partition
  7643                                  		; zf = 0 -> not a primary DOS partition
  7644 000021FF C3                      		retn
  7645                                  
  7646                                  ; ---------------------------------------------------------------------------
  7647                                  
  7648                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7649                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  7650                                  ep_start_sector:
  7651 00002200 00000000                		dd 0
  7652 00002204 00000000                ep_hidden_secs:	dd 0
  7653                                  
  7654                                  ; ---------------------------------------------------------------------------
  7655                                  
  7656                                  ;  until we get the real logical boot record and get the bpb,
  7657                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  7658                                  ;  for the convenience of the computation.
  7659                                  ;
  7660                                  ;  at the end of this procedure, if a bpb information is gotten from
  7661                                  ;  the valid boot record, then we are going to use those bpb information
  7662                                  ;  without change.
  7663                                  ;
  7664                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  7665                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  7666                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  7667                                  
  7668                                  set2:		
  7669                                  		; 12/08/2023
  7670                                  		; ds = cs = BIOSDATA segment (0070h)
  7671 00002208 8816[071A]              		mov	[rom_drv_num], dl
  7672                                  		;mov	[cs:rom_drv_num], dl
  7673                                  			; save the rom bios drive number we are handling now.
  7674 0000220C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  7675 00002210 268B5706                		mov	dx, [es:bx+6]
  7676                                  
  7677                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  7678                                  ; sectors should be allowed	
  7679                                  
  7680 00002214 83E801                  		sub	ax, 1
  7681 00002217 83DA00                  		sbb	dx, 0
  7682 0000221A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  7683 0000221E 2613570A                		adc	dx, [es:bx+10]
  7684 00002222 7305                    		jnc	short okdrive
  7685 00002224 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7686                                  
  7687                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7688                                  		;;;
  7689                                  okdrive:
  7690                                  		;add	ax, [cs:ep_hidden_secs]
  7691                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7692                                  		; ds = cs
  7693 00002229 0306[0422]              		add	ax, [ep_hidden_secs]
  7694 0000222D 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7695 00002231 7305                    		jnc	short okdrive_1
  7696 00002233 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7697                                  okdrive_1:
  7698 00002238 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  7699 0000223C 7418                    		je	short set_lba_flag
  7700 0000223E 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  7701 00002242 7412                    		je	short set_lba_flag
  7702 00002244 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  7703 00002247 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  7704 00002249 F77513                  		div	word [di+13h]
  7705 0000224C 31D2                    		xor	dx, dx
  7706 0000224E F77515                  		div	word [di+15h]
  7707 00002251 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  7708                                  					;  set LBA r/w flag
  7709 00002254 7204                     		jb	short set3
  7710                                  set_lba_flag:
  7711 00002256 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  7712                                  		;;;
  7713                                  ;okdrive:
  7714                                  		; 16/12/2023
  7715                                  set3:		
  7716                                  		;mov	ax, [es:bx+4]
  7717                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7718                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  7719                                  		;mov	ax, [es:bx+6]
  7720                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  7721                                  
  7722                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7723                                  		;;;
  7724 0000225A 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  7725 0000225E 268B5706                		mov	dx, [es:bx+6]
  7726                                  		;add	ax, [cs:ep_hidden_secs]
  7727                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7728                                  		; ds = cs
  7729 00002262 0306[0422]              		add	ax, [ep_hidden_secs]
  7730                                  					; + hidden secs of the extd dos partion
  7731 00002266 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7732 0000226A 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7733 0000226D 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  7734 00002270 31C0                    		xor	ax, ax ; 0
  7735 00002272 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  7736 00002275 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  7737                                  		;;;
  7738                                  
  7739 00002278 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  7740 0000227C 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  7741 00002280 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  7742 00002283 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  7743                                  					; bpb->maxsec =	p->partitionlength
  7744                                  		;cmp	dx, 0
  7745                                  		;ja	short okdrive_1
  7746                                  		; 16/12/2023
  7747 00002286 09D2                    		or	dx, dx
  7748 00002288 7505                    		jnz	short set3_read
  7749 0000228A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  7750                                  		;jb	short setret	; return -1;
  7751 0000228D 7264                    		jb	short set3_err
  7752                                  ;okdrive_1:
  7753                                  		; 16/12/2023
  7754                                  set3_read:
  7755 0000228F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  7756 00002292 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  7757 00002295 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  7758                                  					; usually equal	to the # of sec/trk.
  7759 00002297 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  7760 0000229A 50                      		push	ax
  7761 0000229B 89D0                    		mov	ax, dx
  7762 0000229D 31D2                    		xor	dx, dx
  7763 0000229F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  7764                                  					; (track)temp_h:ax + (sector)dx
  7765                                  ; 16/12/2023
  7766                                  %if 0
  7767                                  		; 17/10/2022
  7768                                  		;mov	[cs:temp_h], ax
  7769                                  		; 12/08/2023 (ds=cs)
  7770                                  		mov	[temp_h], ax
  7771                                  		pop	ax
  7772                                  		div	bx
  7773                                  		mov	cl, dl
  7774                                  		inc	cl
  7775                                  		xor	bx, bx
  7776                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  7777                                  		push	ax
  7778                                  		xor	dx, dx
  7779                                  		;mov	ax, [cs:temp_h]
  7780                                  		mov	ax, [temp_h] ; 12/08/2023
  7781                                  		div	bx
  7782                                  		;mov	[cs:temp_h], ax
  7783                                  		mov	[temp_h], ax ; 12/08/2023
  7784                                  		pop	ax
  7785                                  		div	bx		; dl is head, ax is cylinder
  7786                                  		; 12/08/2023 (ds=cs)
  7787                                  		cmp	word [temp_h], 0
  7788                                  		;cmp	word [cs:temp_h], 0
  7789                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7790                                  		cmp	ax, 1024
  7791                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7792                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  7793                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  7794                                  			; ('ja' must be 'jnb')
  7795                                  okdrive_2:
  7796                                   		; 28/07/2019
  7797                                  ; dl is head.
  7798                                  ; ax is cylinder
  7799                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  7800                                  
  7801                                  ;*** for mini disks ***
  7802                                  
  7803                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7804                                  					; check for mini disk
  7805                                  		jnz	short oknotmini	; not mini disk.
  7806                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  7807                                  					; set the physical track number
  7808                                  oknotmini:
  7809                                  %endif
  7810                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7811                                  		;;;
  7812                                  		;mov	[cs:saved_word], ax
  7813 000022A1 A3[9E04]                		mov	[saved_word], ax
  7814 000022A4 58                      		pop	ax
  7815 000022A5 F7F3                    		div	bx
  7816 000022A7 88D1                    		mov	cl, dl
  7817 000022A9 FEC1                    		inc	cl
  7818 000022AB 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  7819 000022AE 50                      		push	ax
  7820 000022AF 31D2                    		xor	dx, dx
  7821                                  		;mov	ax, [cs:saved_word]
  7822 000022B1 A1[9E04]                		mov	ax, [saved_word]
  7823 000022B4 F7F3                    		div	bx
  7824                                  		;mov	[cs:saved_word], ax
  7825 000022B6 A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  7826 000022B9 58                      		pop	ax
  7827 000022BA F7F3                    		div	bx		; dl is head, ax is cylinder
  7828                                  		; 16/12/2023
  7829 000022BC 0E                      		push	cs
  7830 000022BD 07                      		pop	es ; (*)
  7831 000022BE BB[5201]                		mov	bx, disksector ; (**)
  7832                                  		;
  7833 000022C1 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  7834 000022C5 742F                    		jz	short set3_chs_read
  7835                                  set3_lba_read:
  7836                                  
  7837                                  ; 16/12/2023
  7838                                  %if 0
  7839                                  		;push	cs
  7840                                  		;pop	es ; (*)
  7841                                  		;mov	bx, disksector ; (**)
  7842                                  
  7843                                  		;push	ds
  7844                                  		;push	si
  7845                                  		xor	ax, ax	; 0
  7846                                  		push	ax
  7847                                  		push	ax
  7848                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  7849                                  		push	ax
  7850                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  7851                                  		push	ax
  7852                                  		push	es		; buffer address
  7853                                  		push	bx
  7854                                  		mov	ax, 1		; sector (read) count
  7855                                  		push	ax
  7856                                  		;mov	ax, 16		; DAP size
  7857                                  		mov	al, 16
  7858                                  		push	ax
  7859                                  		mov	dl, [rom_drv_num] ; ds = cs
  7860                                  		mov	ax, ss
  7861                                  		mov	ds, ax ; ds = ss
  7862                                  		mov	si, sp
  7863                                  		;mov	dl, [cs:rom_drv_num]
  7864                                  		mov	ah, 42h
  7865                                  		int	13h		; DISK - IBM/MS Extension
  7866                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7867                                  		;pop	si
  7868                                  		;pop	ds
  7869                                  		jnc	short set3_lba_read_ok
  7870                                  		add	sp, 16
  7871                                  		;pop	si
  7872                                  		;pop	ds
  7873                                  set3_err:
  7874                                  		;jmp	setret
  7875                                  		jmp	ret_hard_err
  7876                                  
  7877                                  set3_lba_read_ok
  7878                                  		add	sp, 16
  7879                                  		;pop	si
  7880                                  		;pop	ds
  7881                                  		jmp	short set3_read_ok
  7882                                  %else
  7883                                  		; 16/12/2023
  7884                                  		;push	si ; * ; (not necessary)
  7885                                  		;mov	si, empty_dap_buff ; dap_buffer
  7886 000022C7 BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  7887 000022CA 56                      		push	si
  7888 000022CB 87FE                    		xchg	si, di
  7889                                  		; si = BDS
  7890                                  		; di = DAP buffer
  7891 000022CD B81000                  		mov	ax, 16
  7892 000022D0 AB                      		stosw		; DAP size
  7893 000022D1 B001                    		mov	al, 1
  7894 000022D3 AB                      		stosw		; sector (read) count
  7895                                  		; buffer address
  7896 000022D4 89D8                    		mov	ax, bx	; offset disksector
  7897 000022D6 AB                      		stosw
  7898 000022D7 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  7899 000022D9 AB                      		stosw
  7900                                  		; sector address (bits 0 to 31)	
  7901 000022DA 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  7902 000022DD AB                      		stosw
  7903 000022DE 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  7904 000022E1 AB                      		stosw
  7905                                  		; sector address bits 32 to 63 (0)
  7906 000022E2 31C0                    		xor	ax, ax ; 0
  7907 000022E4 AB                      		stosw
  7908 000022E5 AB                      		stosw
  7909                                  		;xchg	di, si
  7910 000022E6 89F7                    		mov	di, si
  7911                                  		; di = BDS
  7912 000022E8 5E                      		pop	si ; DAP buffer address	
  7913                                  		
  7914 000022E9 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  7915 000022ED B442                    		mov	ah, 42h
  7916 000022EF CD13                    		int	13h		; DISK - IBM/MS Extension
  7917                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7918                                  		;pop	si ; *
  7919 000022F1 7324                    		jnc	short set3_read_ok
  7920                                  set3_err:
  7921                                  		;jmp	setret
  7922 000022F3 E9B702                  		jmp	ret_hard_err
  7923                                  %endif
  7924                                  
  7925                                  set3_chs_read:
  7926 000022F6 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  7927 000022FA 7503                    		jnz	short oknotmini
  7928 000022FC 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  7929                                  		;;;
  7930                                  
  7931                                  oknotmini:
  7932                                  ;*** end of added logic for mini disk
  7933                                  				
  7934 000022FF D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  7935 00002301 D0CC                    		ror	ah, 1		; two bits of upper byte
  7936 00002303 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  7937 00002306 08E1                    		or	cl, ah		; move two bits to correct spot
  7938 00002308 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  7939                                  					; cl is sector + 2 high bits of cylinder
  7940 0000230A 88D6                    		mov	dh, dl		; dh is	head
  7941                                  		
  7942                                  		; 12/08/2023 (ds=cs)
  7943 0000230C 8A16[071A]              		mov	dl, [rom_drv_num]
  7944                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  7945                                  
  7946                                  ; cl is sector + 2 high bits of cylinder
  7947                                  ; ch is low 8 bits of cylinder
  7948                                  ; dh is head
  7949                                  ; dl is drive
  7950                                  
  7951                                  ; for convenience, we are going to read the logical boot sector
  7952                                  ; into cs:disksector area.
  7953                                  
  7954                                  ; read in boot sector using bios disk interrupt. the buffer where it
  7955                                  ; is to be read in is cs:disksector.
  7956                                  
  7957                                  		; 16/12/2023
  7958                                  		; es=ds=cs = BIOSDATA segment
  7959                                  		; bx = disksector ; (**)
  7960                                  
  7961                                  		;push	cs
  7962                                  		;pop	es ; (*)
  7963                                  		
  7964                                  		;mov	bx, disksector	; for convenience,
  7965                                  					; we are going to read the logical boot sector
  7966                                  					; into cs:disksector area.
  7967 00002310 B80102                  		mov	ax, 201h
  7968 00002313 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7969                                  					; AL = number of sectors to read, CH = track, CL = sector
  7970                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7971                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7972                                  		; 16/12/2023
  7973 00002315 72DC                    		jc	short set3_err
  7974                                  
  7975                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  7976                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  7977                                  ; media if we recognize the version number.
  7978                                  
  7979                                  set3_read_ok:
  7980                                  		; 11/08/2023
  7981                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  7982                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  7983                                  		; 18/12/2023
  7984                                  		;push	bx ; +
  7985                                  		;push	ax ; (not necessary)
  7986                                  
  7987                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7988                                  		;;;
  7989 00002317 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  7990 0000231D 7541                    		jne	short invalid_boot_record
  7991                                  		; 16/12/2023
  7992                                  		; 12/08/2023
  7993                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  7994 0000231F 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  7995 00002322 740B                    		je	short check_1_ok ; yes
  7996 00002324 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  7997 00002327 7537                    		jne	short invalid_boot_record ; no
  7998 00002329 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  7999 0000232D 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8000                                  check_1_ok:
  8001 0000232F 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  8002                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  8003                                  		; 16/12/2023
  8004 00002333 740E                    		jz	short check_2	; FAT32 bs
  8005                                  
  8006                                  		; FAT16 or FAT12 bs
  8007                                  
  8008                                  		;push	ds
  8009                                  		;push	si  ; (not necessary)
  8010 00002335 57                      		push	di
  8011                                  		; es=ds=cs = BIOSDATA segment
  8012                                  		;push	es
  8013                                  		;pop	ds
  8014                                  
  8015                                  		;mov	cx, 28
  8016 00002336 B90E00                  		mov	cx, 14 ; *
  8017 00002339 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  8018                                  					;      to offset 64 (28 bytes)
  8019 0000233C 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  8020 0000233F FC                      		cld	; (not necessary, 'std' is not used before here)
  8021                                  		;rep movsb
  8022 00002340 F3A5                    		rep movsw ; *
  8023 00002342 5F                      		pop	di
  8024                                  		;pop	si
  8025                                  		;pop	ds
  8026                                  		;;;
  8027                                  ; 16/12/2023
  8028                                  %if 0
  8029                                  ;check_1:
  8030                                  		; 12/08/2023
  8031                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  8032                                  		cmp	byte [bx], 0E9h
  8033                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  8034                                  		je	short check_1_ok ; yes
  8035                                  		cmp	byte [bx], 0EBh
  8036                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  8037                                  		jne	short invalid_boot_record ; no
  8038                                  		cmp	byte [bx+2], 90h
  8039                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  8040                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8041                                  check_1_ok:
  8042                                  %endif
  8043                                  
  8044                                  ; 18/12/2023
  8045                                  %if 0
  8046                                  		; 14/08/2023
  8047                                  check_2:
  8048                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  8049                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  8050                                  					; point to the bpb in the boot record
  8051                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  8052                                  		mov	al, [bx+10] ; 12/08/2023 
  8053                                  					; get the mediadescriptor byte
  8054                                  		and	al, 0F0h	; mask off low nibble
  8055                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  8056                                  		jne	short invalid_boot_record ; no, invalid boot record
  8057                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  8058                                  		cmp	word [bx], 512 ; 12/08/2023
  8059                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8060                                  
  8061                                  check2_ok:				; yes, mediadescriptor ok.
  8062                                  		mov	al, [bx+2] ; 12/08/2023
  8063                                  		;mov	al, [cs:bx+2]	; now make sure that
  8064                                  					; the sectorspercluster is
  8065                                  					; a power of 2
  8066                                  					;
  8067                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  8068                                  					; get the sectorspercluster
  8069                                  %endif
  8070                                  		;;;
  8071                                  check_2:
  8072                                  		; 18/12/2023
  8073                                  		; bx = disksector
  8074 00002343 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  8075                                  					; get the mediadescriptor byte
  8076 00002346 24F0                    		and	al, 0F0h	; mask off low nibble
  8077 00002348 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  8078 0000234A 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  8079 0000234C 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  8080 00002351 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8081                                  
  8082                                  check2_ok:	; yes, mediadescriptor ok.
  8083 00002353 8A470D                  		mov	al, [bx+13]	; now make sure that
  8084                                  					; the sectorspercluster is
  8085                                  					; a power of 2
  8086                                  					;
  8087                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  8088                                  					; get the sectorspercluster
  8089                                  		;;;
  8090                                  
  8091 00002356 08C0                    		or	al, al		; is it zero?
  8092 00002358 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  8093                                  
  8094                                  ck_power_of_two:
  8095 0000235A D0E8                    		shr	al, 1		; shift until first bit emerges
  8096 0000235C 73FC                    		jnc	short ck_power_of_two
  8097 0000235E 7406                    		jz	short valid_boot_record
  8098                                  
  8099                                  invalid_boot_record:
  8100                                  		; 18/12/2023
  8101                                  		;pop	ax
  8102                                  		;pop	bx ; +
  8103 00002360 E96001                  		jmp	unknown		; jump to invalid boot record
  8104                                  					; unformatted or illegal media.
  8105                                  ; 16/12/2023
  8106                                  ; ---------------------------------------------------------------------------
  8107                                  ;	; 12/08/2023
  8108                                  ;setret_brdg:
  8109                                  ;		jmp	setret
  8110                                  ; ---------------------------------------------------------------------------
  8111                                  
  8112                                  unknown3_0_j:
  8113 00002363 E96101                  		jmp	unknown3_0	; legally formatted media,
  8114                                  					; although, content might be bad.
  8115                                  ; ---------------------------------------------------------------------------
  8116                                  
  8117                                  valid_boot_record:
  8118                                  		; 18/12/2023
  8119                                  		;pop	ax
  8120                                  		;pop	bx ; +
  8121                                  		
  8122                                  		; 18/12/2023
  8123                                  		; bx = offset disksector ; +
  8124                                  
  8125                                  ; Signature found. Now check version.
  8126                                  
  8127                                  		; 14/08/2023
  8128 00002366 817F08322E              		cmp	word [bx+8], '2.'
  8129                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  8130                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  8131 0000236B 7506                    		jne	short try5
  8132 0000236D 807F0A30                		cmp	byte [bx+10], '0'
  8133                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  8134                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  8135                                  		; 12/08/2023
  8136                                  		;jnz	short try5
  8137                                  		;jmp	short copybpb
  8138 00002371 7425                    		je	short copybpb
  8139                                  
  8140                                  ;; --------------------------------------------------------------------------
  8141                                  ;;	; 12/08/2023
  8142                                  ;;setret_brdg:
  8143                                  ;;		jmp	setret
  8144                                  ;; --------------------------------------------------------------------------
  8145                                  ;
  8146                                  ;unknown3_0_j:
  8147                                  ;		jmp	unknown3_0	; legally formatted media,
  8148                                  ;					; although, content might be bad.
  8149                                  ; ---------------------------------------------------------------------------
  8150                                  
  8151                                  try5:
  8152 00002373 E83B02                  		call	cover_fdisk_bug
  8153                                  
  8154                                  ; see if it is an os2 signature
  8155                                  
  8156                                  		; 12/08/2023
  8157                                  		; ds = cs = BIOSDATA segment
  8158 00002376 817F08302E              		cmp	word [bx+8], '0.'
  8159                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  8160                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  8161 0000237B 750C                    		jne	short no_os2
  8162 0000237D 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  8163                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  8164 00002380 2C31                    		sub	al, '1'
  8165                                  		;sub	al, 31h		; '1'
  8166 00002382 24FE                    		and	al, 0FEh
  8167 00002384 7412                    		jz	short copybpb	; accept either	'1' or '2'
  8168 00002386 E93A01                  		jmp	unknown
  8169                                  ; ---------------------------------------------------------------------------
  8170                                  
  8171                                  ; no os2 signature, this is to check for real dos versions
  8172                                  
  8173                                  no_os2:
  8174                                  		; 12/08/2023
  8175                                  		; ds = cs = BIOSDATA
  8176 00002389 817F08332E              		cmp	word [bx+8], '3.'			
  8177                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  8178                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  8179 0000238E 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  8180                                  					; do not trust it, but still legal.
  8181 00002390 7506                    		jnz	short copybpb	; honor	os2 boot record
  8182                                  					; or dos 4.0 version
  8183 00002392 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  8184                                  		;cmp	byte [cs:bx+10], '1'
  8185                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  8186 00002396 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  8187                                  copybpb:
  8188                                  
  8189                                  ; 03/10/2022
  8190                                  
  8191                                  ; we have a valid boot sector. use the bpb in it to build the
  8192                                  ; bpb in bios. it is assumed that only
  8193                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  8194                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  8195                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  8196                                  ; need to be set (all other values in already). fbigfat is also set.
  8197                                  
  8198                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  8199                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  8200                                  ; and system id according to the boot record.
  8201                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  8202                                  
  8203                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8204                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  8205                                  		;;;
  8206                                  		; 17/12/2023
  8207 00002398 BE[5D01]                		mov	si, disksector+11
  8208                                  		;sub	ch, ch ; ; (ch may be > 0)
  8209 0000239B 29C9                    		sub	cx, cx ; 0 
  8210                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  8211 0000239D 8A4C05                  		mov	cl, [si+5] ; number of FATs
  8212                                  
  8213                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  8214                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  8215                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  8216                                  
  8217                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  8218                                  		;cmp	word [disksector+4Dh], 0
  8219                                  		;jnz	short check_3
  8220                                  
  8221                                  		; 17/12/2023
  8222                                  		; check extended boot signature (0x29)
  8223                                  		;
  8224                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  8225                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  8226                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  8227                                  		
  8228                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  8229 000023A0 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  8230                                  		;jmp	short check_4
  8231                                  check_3:
  8232                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  8233                                  		;cmp	byte [disksector+26h], 29h ; (***)
  8234                                  check_4:
  8235 000023A5 7538                    		jnz	short copybpb_fat	; conventional fat system
  8236                                  
  8237                                  ; 17/12/2023
  8238                                  %if 0
  8239                                  		; 10/12/2022
  8240                                  		; (number of FATs optimization)
  8241                                  		mov	si, disksector+11 ; disksector+0Bh
  8242                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  8243                                  		;mov	cl, [cs:si+05h]
  8244                                  		; 12/08/2023
  8245                                  		; ds = cs = BIOSDATA segment (0070h)
  8246                                  		mov	cl, [si+05h] ; number of FATs
  8247                                  
  8248                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  8249                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  8250                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  8251                                  					; [disksector+EXT_BOOT.SIG]
  8252                                  					; EXT_BOOT_SIGNATURE
  8253                                  		jnz	short copybpb_fat ; conventional fat system
  8254                                  
  8255                                  		; 03/10/2022
  8256                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  8257                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  8258                                  		;	     number of FATs must be 2 ; =*?=
  8259                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  8260                                  		;
  8261                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  8262                                  
  8263                                  		; 10/12/2022
  8264                                  		;cmp	byte [cs:disksector+10h], 0
  8265                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  8266                                  		;jnz	short copybpb_fat ; a fat system.
  8267                                  		or	cl, cl	 ; [cs:disksector+10h]
  8268                                  		jnz	short copybpb_fat ; a fat system.
  8269                                  %endif
  8270                                  
  8271                                  		; 17/12/2023 - Retro DOS v5.0
  8272                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  8273                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  8274                                  		;jnz	short copybpb_fat ; a fat system
  8275                                  		; 17/12/2023
  8276                                  		; cl = [disksector+10h]
  8277 000023A7 20C9                    		and	cl, cl ; 0 ?
  8278 000023A9 7534                    		jnz	short copybpb_fat ; a fat system
  8279                                  
  8280                                  ; non fat based	media.
  8281                                  
  8282 000023AB 57                      		push	di  ; BDS
  8283                                  		; 12/08/2023
  8284                                  		;push	ds  ; ds = cs = BIOSDATA segment
  8285                                  		
  8286                                  		; 17/12/2023
  8287                                  		; es = ds = cs
  8288                                  		;push	ds
  8289                                  		;pop	es
  8290                                  
  8291                                  		; 12/08/2023
  8292                                  		; ds = cs
  8293                                  		;push	cs
  8294                                  		;pop	ds
  8295                                  
  8296                                  		; 10/12/2022
  8297                                  		; (number of FATs optimization)
  8298                                  		; SI = disksector+11
  8299                                  		; 17/10/2022
  8300                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8301                                  		;mov	si, disksector+11
  8302 000023AC 83C706                  		add	di, 6		; add di,BDS.BPB
  8303                                  
  8304                                  ; just for completeness, we'll make sure that total_sectors and
  8305                                  ; big_total_sectors aren't both zero. I've seen examples of
  8306                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  8307                                  ; got that way. If it occurs, then use the values from the
  8308                                  ; partition table.
  8309                                  
  8310                                  		; 17/12/2023
  8311                                  		; cx = 0
  8312                                  		; 18/12/2022
  8313                                  		;sub	cx, cx
  8314                                  
  8315                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  8316                                  		;jnz	short already_nonz 
  8317                                  		;			; how about big_total?
  8318                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  8319                                  		;jnz	short already_nonz ; we're okay if any are != 0
  8320                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8321                                  		;jnz	short already_nonz
  8322                                  
  8323                                  		; 12/08/2023
  8324                                  		; ds = cs = BIOSDATA segment (0070h)
  8325                                  
  8326                                  		; 17/12/2023
  8327                                  		; 12/08/2023
  8328 000023AF 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  8329 000023B2 751C                    		jnz	short already_nonz
  8330                                  				    	; how about big_total?
  8331 000023B4 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  8332 000023B7 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  8333 000023B9 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  8334 000023BC 7512                    		jnz	short already_nonz
  8335                                  
  8336                                  ; now let's copy the values from the partition table (now in the BDS)
  8337                                  ; into the BPB in the boot sector buffer, before they get copied back.
  8338                                  
  8339 000023BE 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  8340                                  		; 12/08/2023
  8341                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  8342 000023C1 894408                  		mov	[si+8], ax
  8343 000023C4 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  8344                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  8345 000023C7 894415                  		mov	[si+15h], ax
  8346 000023CA 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  8347                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8348 000023CD 894417                  		mov	[si+17h], ax
  8349                                  
  8350                                  already_nonz:
  8351                                  		; 18/12/2022
  8352                                  		; cx = 0
  8353                                  		;mov	cl, 25
  8354                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  8355                                  		; 17/12/2023 - Retro DOS v5.0
  8356 000023D0 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  8357                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  8358 000023D2 F3A4                    		rep movsb
  8359                                  		;pop	ds
  8360                                  		; 12/08/2023
  8361                                  		; ds = cs
  8362                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  8363 000023D4 5F                      		pop	di  ; BDS
  8364                                  		;push	es
  8365                                  		;push	ds
  8366                                  		;pop	es
  8367                                  		;push	cs
  8368                                  		;pop	ds
  8369                                  		; 12/08/2023
  8370                                  		;mov	es, bp
  8371                                  		; ds = cs = es
  8372                                  		
  8373                                  		; 14/08/2023
  8374 000023D5 BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  8375                                  		; 18/12/2022
  8376                                  		;mov	bp, mov_media_ids
  8377                                  		;;mov	bp, 751h	; mov_media_ids
  8378                                  					; at 2C7h:751h = 70h:2CC1h
  8379                                  					; set volume id, systemid, serial.
  8380 000023D8 0E                      		push	cs		; simulate far call
  8381 000023D9 E895F6                  		call	call_bios_code
  8382                                  		; 12/08/2023
  8383                                  		; ds = cs = es
  8384                                  		;push	es
  8385                                  		;pop	ds
  8386                                  		;pop	es
  8387 000023DC E9C701                  		jmp	goodret
  8388                                  
  8389                                  ; ---------------------------------------------------------------------------
  8390                                  
  8391                                  ; ****** cas ---
  8392                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  8393                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  8394                                  ; happens with some frequency -- perhaps through some OS/2 setup
  8395                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  8396                                  ; from the boot sector into the DPB anyway, we've just been using
  8397                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  8398                                  ; we'll go ahead and copy it into the DPB, except in the case
  8399                                  ; that it equals zero, in which case we just use the values in
  8400                                  ; the DPB from the partition table.
  8401                                  
  8402                                  ; 17/10/2022
  8403                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  8404                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  8405                                  ; 09/12/2022
  8406                                  MOVMEDIAIDS equ mov_media_ids
  8407                                  CLEARIDS equ clear_ids
  8408                                  ; 11/09/2023
  8409                                  CLEARIDS_X equ clear_ids_x
  8410                                  
  8411                                  copybpb_fat:
  8412                                  		; 17/12/2023
  8413                                  		; ch = 0, cl = number of FATs
  8414                                  		; 10/12/2022
  8415                                  		; (number of FATs optimization)
  8416                                  		; SI = disksector+11
  8417                                  		; 17/10/2022
  8418                                  		;mov	si, disksector+11
  8419                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8420                                  					; cs:si	-> bpb in boot
  8421                                  		; 17/12/2023
  8422                                  		; dx = 0
  8423                                  		; 08/05/2024
  8424                                  		; 18/04/2024 (BugFix)
  8425 000023DF 31D2                    		xor	dx, dx
  8426                                  
  8427                                  		; 12/08/2023
  8428                                  		; ds = cs = BIOSDATA segment (0070h)
  8429 000023E1 8B4408                  		mov	ax, [si+8]
  8430                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  8431                                  					; get totsec from boot sec
  8432 000023E4 09C0                    		or	ax, ax
  8433 000023E6 7514                    		jnz	short copy_totsec ; if non zero, use that
  8434 000023E8 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  8435                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  8436                                  					; get the big version
  8437                                  					; (32 bit total	sectors)
  8438 000023EB 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  8439                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8440                                  		; 10/12/2022
  8441                                  		; (number of FATs optimization)
  8442                                  		; CL = number of FATs (2 or 1) 
  8443 000023EE 89D3                    		mov	bx, dx		; see if it is a big zero
  8444 000023F0 09C3                    		or	bx, ax
  8445 000023F2 7508                    		jnz	short copy_totsec
  8446                                  			; screw it. it was bogus.
  8447 000023F4 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8448 000023F7 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8449 000023FA EB06                    		jmp	short fat_big_small
  8450                                  
  8451                                  		;mov	cx, dx
  8452                                  		;or	cx, ax		; see if it is a big zero
  8453                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  8454                                  copy_totsec:				
  8455 000023FC 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8456                                  					; make DPB match boot sec
  8457 000023FF 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8458                                  
  8459                                  		; 10/12/2022
  8460                                  ;totsec_already_set:			
  8461                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8462                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8463                                  
  8464                                  ; determine fat entry size.
  8465                                  
  8466                                  fat_big_small:
  8467                                  
  8468                                  ;at this moment dx;ax = total sector number
  8469                                  
  8470                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  8471                                  ;from the BPB on the disk
  8472                                  		
  8473                                  		; 12/08/2023
  8474                                  		; ds = cs = BIOSDATA segment (0070h)
  8475                                  				
  8476 00002402 8B5C03                  		mov	bx, [si+3]
  8477                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  8478                                  					; get #reserved_sectors	from BPB
  8479 00002405 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  8480                                  					; update BDS field
  8481 00002408 29D8                    		sub	ax, bx
  8482 0000240A 83DA00                  		sbb	dx, 0		; update the count
  8483                                  		; 12/08/2023
  8484 0000240D 8B5C0B                  		mov	bx, [si+0Bh]
  8485                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  8486                                  					; bx = sectors/fat
  8487 00002410 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  8488                                  					; set in bds bpb
  8489                                  		; 17/12/2023 - Retro DOS v5.0
  8490                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8491 00002413 53                      		push	bx ; FAT sectors
  8492 00002414 09DB                    		or	bx, bx
  8493 00002416 753A                    		jnz	short fat_16bit	
  8494                                  
  8495                                  ; 17/12/2023
  8496                                  %if 0		
  8497                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  8498                                  					; BPB.FATSz32
  8499                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  8500                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  8501                                  		mov	bx, [si+19h]	; BPB.FATSz32
  8502                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8503                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8504                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8505                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8506                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8507                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8508                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8509                                  		mov	bx, [si+21h]	; BPB.RootClus
  8510                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8511                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8512                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8513                                  		mov	bx, [si+25h]	; BPB.FSInfo
  8514                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8515                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8516                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8517                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  8518                                  					; correct code (would be):
  8519                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  8520                                  					; sub_fat32_size:
  8521                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  8522                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  8523                                  					;   dec cl
  8524                                  					;   jg short sub_fat32_size
  8525                                  					;   jmp short fat_32bit
  8526                                  %endif
  8527                                  		; 17/12/2023
  8528                                  		; cl = BPB_NumFATs (2 or 1)
  8529                                  		; ch = 0
  8530 00002418 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  8531                                  sub_fat32_size:
  8532 0000241B 29D8                    		sub	ax, bx
  8533 0000241D 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  8534                                  		;dec	cl
  8535 00002420 49                      		dec	cx
  8536 00002421 7FF8                    		jg	short sub_fat32_size
  8537                                  
  8538 00002423 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8539 00002426 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8540 00002429 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8541                                  
  8542 0000242C 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8543 0000242F 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8544 00002432 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8545 00002435 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8546 00002438 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  8547 0000243B 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8548 0000243E 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8549 00002441 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8550 00002444 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  8551 00002447 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8552 0000244A 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8553 0000244D 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8554 00002450 EB08                    		jmp	short fat_32bit
  8555                                  		
  8556                                  fat_16bit:
  8557                                  		; 17/12/2023 - Retro DOS v5.0
  8558                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8559                                  		; 10/12/2022
  8560                                  		; (number of FATs optimization)
  8561                                  		; CL = number of FATs (2 or 1)
  8562                                  		; CH = 0 ; 17/12/2023 
  8563                                  		;dec	cl ; *
  8564                                  		; 18/12/2022
  8565 00002452 49                      		dec	cx ; *
  8566 00002453 D3E3                    		shl	bx, cl
  8567                                  		;shl	bx, 1	; =*?=	; always 2 fats
  8568                                  		
  8569 00002455 29D8                    		sub	ax, bx		; sub #	fat sectors
  8570 00002457 83DA00                  		sbb	dx, 0
  8571                                  fat_32bit:	
  8572                                  		; 17/12/2023
  8573 0000245A 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  8574                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  8575                                  					; # root entries
  8576 0000245D 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  8577                                  					; set in bds bpb
  8578 00002460 B104                    		mov	cl, 4
  8579 00002462 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  8580 00002464 29D8                    		sub	ax, bx		; sub #	dir sectors
  8581 00002466 83DA00                  		sbb	dx, 0		;
  8582                                  					; dx:ax	now contains the
  8583                                  					; # of data sectors
  8584                                  		; 17/12/2023
  8585                                  		; ch = 0
  8586                                  		;xor	cx, cx ; *
  8587 00002469 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  8588                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  8589                                  					; sectors per cluster
  8590 0000246C 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  8591                                  					; set in bios bpb
  8592 0000246F 50                      		push	ax
  8593 00002470 89D0                    		mov	ax, dx
  8594 00002472 31D2                    		xor	dx, dx
  8595 00002474 F7F1                    		div	cx		; cx = sectors per cluster
  8596                                  		; 12/08/2023 (ds=cs)
  8597                                  		;mov	[temp_h], ax
  8598                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  8599                                  					; # clusters.
  8600                                  		; 17/12/2023
  8601 00002476 A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  8602 00002479 58                      		pop	ax
  8603 0000247A F7F1                    		div	cx
  8604                                  		; 17/12/2023
  8605                                  		;;cmp	word [cs:temp_h], 0
  8606                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  8607                                  		;cmp	word [saved_word], 0 ; (*)
  8608                                  		;ja	short toobig_ret ; too big cluster number
  8609                                  
  8610                                  		; 17/12/2023
  8611                                  		;;;
  8612 0000247C 5B                      		pop	bx ; FAT sectors (16 bit)
  8613                                  		;and	bx, bx ; 0 ?
  8614 0000247D 09DB                    		or	bx, bx ; 0 ?
  8615 0000247F 751F                    		jnz	short chk_clnum_hw
  8616                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  8617                                  
  8618 00002481 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  8619 00002487 7503                    		jne	short fat32_clust_limit
  8620 00002489 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  8621                                  fat32_clust_limit:
  8622 0000248C 772D                    		ja	short short toobig_ret ; too big cluster number
  8623 0000248E 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  8624                                  	 	;jnz	short fat16_clust_limit
  8625 00002492 7505                    		jnz	short set_fbigbig_flag ; 17/12/2023
  8626                                  fat16_clust_limit:	; 17/12/2023
  8627 00002494 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  8628                                  ;fat16_clust_limit:
  8629 00002497 760E                    		jna     short fat12_clust_limit ; jbe
  8630                                  set_fbigbig_flag:	; 17/12/2023
  8631 00002499 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  8632 0000249E EB11                    		jmp	short copymediaid
  8633                                  chk_clnum_hw:
  8634 000024A0 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  8635 000024A5 7714                    		ja	short toobig_ret ; too big cluster number
  8636                                  		;;;
  8637                                  fat12_clust_limit:
  8638 000024A7 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  8639                                  					; is this 16-bit fat?
  8640 000024AA 7205                    		jb	short copymediaid ; no,	small fat
  8641                                  		; 17/10/2022
  8642 000024AC 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  8643                                  		;or	ds:fbigfat, 40h	; fbig
  8644                                  					; 16 bit fat
  8645                                  copymediaid:
  8646                                  		; 17/12/2023
  8647                                  		; es = ds = cs
  8648                                  		
  8649                                  		;push	es
  8650                                  		;push	ds
  8651                                  		;pop	es
  8652                                  		
  8653                                  		; 12/08/2023
  8654                                  		; ds = cs = BIOSDATA
  8655                                  		;push	cs
  8656                                  		;pop	ds
  8657                                  		; 17/10/2022
  8658 000024B1 BD[4F08]                		mov	bp, MOVMEDIAIDS
  8659                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  8660                                  		;;mov	bp, 751h	; mov_media_ids
  8661                                  					; at 2C7h:751h = 70h:2CC1h
  8662                                  					; copy filesys_id, volume label
  8663 000024B4 0E                      		push	cs		; simulate far call
  8664 000024B5 E8B9F5                  		call	call_bios_code
  8665                                  
  8666                                  		; 12/08/2023
  8667                                  		;push	es
  8668                                  		;pop	ds
  8669                                  		; 17/12/2023	
  8670                                  		;pop	es
  8671                                  
  8672 000024B8 E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  8673                                  					; and return.
  8674                                  ; ---------------------------------------------------------------------------
  8675                                  
  8676                                  toobig_ret:
  8677                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  8678 000024BB 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8679                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  8680                                  					; too big (32 bit clust #) for FAT16
  8681 000024C0 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  8682                                  					; but useless. to big for
  8683                                  					; current pc dos fat file system
  8684                                  ; ---------------------------------------------------------------------------
  8685                                  
  8686                                  unknown:
  8687                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8688 000024C3 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  8689                                  					 ; unformatted_media
  8690                                  		; 12/12/2022
  8691                                  		;or	byte [di+24h], 02h
  8692                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  8693                                  					; unformatted_media
  8694                                  					; Set unformatted media	flag.
  8695                                  
  8696                                  ; the boot signature may not be	recognizable,
  8697                                  ; but we should	try and	read it	anyway.
  8698                                  
  8699                                  unknown3_0:
  8700 000024C7 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  8701                                  					; [di+BDS.totalsecs32+2]
  8702 000024CA 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8703 000024CD BE[161A]                		mov	si, disktable2
  8704                                  scan:					; 08/08/2023
  8705                                  		;cmp	dx, [cs:si]	; total sectors hw
  8706                                  		; 12/08/2023 (ds=cs)
  8707 000024D0 3B14                    		cmp	dx, [si] 
  8708 000024D2 720C                     		jb	short gotparm
  8709 000024D4 7705                    		ja	short scan_next
  8710                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  8711 000024D6 3B4402                  		cmp	ax, [si+2]
  8712 000024D9 7605                    		jbe	short gotparm
  8713                                  scan_next:				
  8714 000024DB 83C60A                  		add	si, 10		; 5*2
  8715 000024DE EBF0                    		jmp	short scan	; covers upto 512 mb media
  8716                                  ; ---------------------------------------------------------------------------
  8717                                  
  8718                                  gotparm:
  8719 000024E0 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  8720                                  		;or	ds:fbigfat, cl
  8721                                  		; 17/10/2022
  8722 000024E3 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  8723                                  		; 12/08/2023
  8724                                  		; ds = cs = BIOSDATA
  8725 000024E7 8B4C04                  		mov	cx, [si+4]
  8726                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  8727                                  					; cl = log base 2 of ch
  8728 000024EA 8B5406                  		mov	dx, [si+6]
  8729                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  8730                                  
  8731                                  ; now calculate size of fat table
  8732                                  
  8733 000024ED 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  8734                                  					; save number of (root)	dir entries
  8735 000024F0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8736 000024F3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8737 000024F6 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  8738                                  					; save sectors per cluster
  8739                                  		
  8740                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8741 000024F9 F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  8742                                  		; 11/09/2023
  8743                                  		; 17/10/2022
  8744                                  		;test	byte [fbigfat], 40h
  8745                                  		;;test	ds:fbigfat, 40h	; fbig
  8746                                  					; if (fbigfat)
  8747 000024FE 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  8748                                  
  8749                                  ; we don't need to change "small fat" logic since it is guaranteed
  8750                                  ; that double word total sector will not use 12 bit fat (unless
  8751                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  8752                                  ; so in this case we assume dx = 0 !!
  8753                                  
  8754 00002500 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  8755 00002502 88EB                    		mov	bl, ch
  8756 00002504 4B                      		dec	bx
  8757 00002505 01C3                    		add	bx, ax		; dx=0
  8758 00002507 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  8759 00002509 43                      		inc	bx		; BDS.secperclus
  8760 0000250A 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  8761 0000250D 89DE                    		mov	si, bx
  8762 0000250F D1EB                    		shr	bx, 1
  8763 00002511 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  8764 00002513 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  8765 00002517 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  8766 00002519 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  8767                                  					; save number of fat sectors
  8768 0000251C EB6A                    		jmp	short massage_bpb
  8769                                  ; ---------------------------------------------------------------------------
  8770                                  
  8771                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  8772                                  
  8773                                  dobig:					
  8774 0000251E B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  8775 00002520 52                      		push	dx		; save total sectors (high)
  8776 00002521 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  8777 00002524 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  8778 00002526 29D0                    		sub	ax, dx
  8779 00002528 5A                      		pop	dx
  8780 00002529 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  8781 0000252C 83E801                  		sub	ax, 1
  8782 0000252F 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  8783                                  					; total	secs - reserved	secs - root dir	secs
  8784 00002532 B302                    		mov	bl, 2
  8785 00002534 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  8786                                  					; bx = 256 * BDS.secperclus + 2
  8787                                  
  8788                                  ; I don't understand why to add bx here!!!
  8789                                  
  8790                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  8791                                  		; 27/09/2022
  8792                                  		; (Microsoft FAT32 File	System Specification,
  8793                                  		; December 2000, Page 21)
  8794                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  8795                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  8796                                  		; 8/8/2023 (Retro DOS v5.0)
  8797                                  		; If(FATType == FAT32)
  8798                                  		;   TmpVal2 = TmpVal2 / 2;
  8799                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  8800                                  		; 8/8/2023 (Retro DOS v5.0)
  8801                                  		; If(FATType == FAT32) {
  8802                                  		;   BPB_FATSz16 = 0;
  8803                                  		;   BPB_FATSz32 = FATSz;
  8804                                  		;} else {
  8805                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  8806                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  8807                                  		;}
  8808                                  					; dx:ax = TmpVal1, bx = TmpVal2
  8809 00002537 01D8                    		add	ax, bx		; 
  8810 00002539 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  8811 0000253C 83E801                  		sub	ax, 1		
  8812 0000253F 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  8813                                  
  8814                                  		;;;
  8815                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8816 00002542 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  8817 00002547 740D                    		jz      short dobig1
  8818                                  
  8819 00002549 D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  8820                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  8821 0000254B 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  8822 0000254E 83DA00                  		sbb	dx, 0
  8823 00002551 29D8                    		sub	ax, bx
  8824 00002553 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  8825                                  					;       = TmpVal1+(TmpVal2-1)
  8826                                  dobig1:
  8827 00002556 50                      		push	ax		; save lw of dividend
  8828 00002557 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  8829 00002559 31D2                    		xor	dx, dx
  8830 0000255B F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  8831                                  					; remainder in dx is hw of 2nd stage dividend
  8832 0000255D 89C5                    		mov	bp, ax		; hw of quotient
  8833 0000255F 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  8834                                  		;;;
  8835                                  
  8836                                  ; assuming dx in the table will never be bigger than bx.
  8837                                  
  8838 00002560 F7F3                    		div	bx		; BDS.fatsecs =
  8839                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  8840 00002562 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  8841                                  					; number of fat	sectors
  8842                                  		;;;
  8843                                  		
  8844                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8845 00002565 8A1E[061A]              		mov	bl, [fbigfat]
  8846 00002569 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  8847                                  		
  8848 0000256C F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  8849 0000256F 7410                    		jz	short dobig2	; not FAT32
  8850                                  
  8851 00002571 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  8852 00002574 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  8853 00002577 C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  8854                                  					; clear 16 bit FAT size field
  8855 0000257C C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  8856                                  					; set reserved sectors to 32 (FAT32 de facto)
  8857                                  dobig2:
  8858                                  		;;;
  8859                                  
  8860                                  ; now, set the default filesys_id, volume label, serial number
  8861                                  
  8862                                  		; 05/08/2023
  8863                                  		; [di+1Fh] = [fbigfat]
  8864                                  		;
  8865                                  		;;mov	bl, ds:fbigfat
  8866                                  		;; 17/10/2022
  8867                                  		;mov	bl, [fbigfat]
  8868                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  8869                                  
  8870                                  		; 12/08/2023
  8871                                  		;push	ds ; ds = cs = BIOSDATA
  8872                                  		
  8873                                  		; 17/12/2023
  8874                                  		; es = ds = cs
  8875                                  		;push	ds
  8876                                  		;pop	es
  8877                                  
  8878                                  		; 12/08/2023 
  8879                                  		; ds = cs = BIOSDATA
  8880                                  		;push	cs
  8881                                  		;pop	ds
  8882                                  
  8883                                  		; 18/12/2023 - Retro DOS v5.0
  8884                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  8885                                  		; 11/09/2023
  8886                                  		;mov	al, [fbigfat]
  8887 00002581 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  8888                                  		; 17/10/2022
  8889                                  		;mov	bp, CLEARIDS
  8890                                  		;;mov	bp, 5D9h	; clear_ids
  8891                                  					; at 2C7h:5D9h = 70h:2B49h
  8892                                  					; at BIOSCODE:06ABh
  8893                                  					;	in PCDOS 7.1 IBMBIO.COM
  8894 00002584 0E                      		push	cs
  8895 00002585 E8E9F4                  		call	call_bios_code
  8896                                  
  8897                                  		; 12/08/2023
  8898                                  		;pop	ds ; ds = cs = BIOSDATA
  8899                                  
  8900                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  8901                                  ; set according to the partition information. we are going to
  8902                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  8903                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  8904                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  8905                                  ; we don't do this for the bpb information from the boot record. we
  8906                                  ; are not going to change the bpb information from the boot record.
  8907                                  
  8908                                  massage_bpb:
  8909                                  		; 05/08/2023
  8910                                  		; [di+1Fh] = [fbigfat]
  8911                                  		;
  8912                                  		;; 12/12/2022
  8913                                  		;mov	bl, [fbigfat]
  8914                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8915                                  		;			; set size of fat on media
  8916                                  		;
  8917 00002588 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8918 0000258B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8919                                  		; 11/09/2023
  8920 0000258E 09D2                    		or	dx, dx
  8921 00002590 7514                    		jnz	short goodret	
  8922                                  		;cmp	dx, 0		; double word total sectors?
  8923                                  		;;ja	short goodret	; don't have to change it.
  8924                                  		;; 12/12/2022
  8925                                  		;ja	short short goodret2
  8926                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  8927                                  		;ja	short goodret	; don't have to change it.
  8928                                  		; 12/12/2022
  8929 00002592 395519                  		cmp	[di+19h], dx ; 0
  8930                                  		;ja	short goodret2
  8931 00002595 770F                    		ja	short goodret	; 11/09/2023
  8932 00002597 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  8933                                  		;jb	short goodret
  8934                                  		; 12/12/2022
  8935                                  		;jc	short goodret
  8936 0000259A 7209                    		jc	short goodret_clc ; 11/09/2023
  8937 0000259C 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8938 0000259F 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  8939                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  8940                                  		; 12/12/2022
  8941 000025A2 89551B                  		mov	[di+1Bh], dx ; 0
  8942                                  goodret_clc:
  8943                                  		; 11/09/2023
  8944 000025A5 F8                      		clc 
  8945                                  goodret:
  8946                                  		;mov	bl, ds:fbigfat
  8947                                  		; 11/09/2023
  8948                                  		; 12/12/2022
  8949                                  		; 17/10/2022
  8950 000025A6 8A1E[061A]              		mov	bl, [fbigfat]
  8951                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8952 000025AA 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  8953                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8954                                  					; set size of fat on media
  8955                                  		; 11/09/2023
  8956                                  		;clc
  8957                                  ret_hard_err:
  8958                                  		; 12/12/2022
  8959                                  goodret2:
  8960 000025AD 07                      		pop	es
  8961                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  8962 000025AE 5B                      		pop	bx
  8963 000025AF 5F                      		pop	di
  8964 000025B0 C3                      		retn
  8965                                  
  8966                                  ; =============== S U B	R O U T	I N E =======================================
  8967                                  
  8968                                  ; 15/10/2022
  8969                                  
  8970                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  8971                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  8972                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  8973                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  8974                                  ;then subtract 1 from BPB_TOTALSECTORS.
  8975                                  
  8976                                  		; 17/10/2022
  8977                                  cover_fdisk_bug:
  8978                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8979                                  		; ds = cs
  8980                                  
  8981                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8982                                  		; (optimization)
  8983                                  		;push	ax
  8984                                  		;push	dx
  8985                                  		;push	si
  8986                                  
  8987                                  		; 18/12/2023
  8988                                  		; bx = offset disksector
  8989                                  
  8990                                  		; 18/12/2023
  8991 000025B1 807F2629                		cmp	byte [bx+26h], 29h
  8992                                  		; 12/08/2023
  8993                                  		;cmp	byte [disksector+26h], 29h
  8994                                  		;;cmp	byte [cs:disksector+26h], 29h
  8995                                  					; [disksector+EXT_BOOT.SIG],
  8996                                  					; EXT_BOOT_SIGNATURE
  8997 000025B5 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  8998                                  		
  8999 000025B7 817F073130              		cmp	word [bx+7], 3031h
  9000                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  9001 000025BC 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
  9002 000025BE 807F0A30                		cmp	byte [bx+10], '0'
  9003                                  		;cmp	byte [cs:bx+10], '0'
  9004 000025C2 7519                    		jne	short cfb_retit
  9005                                  
  9006                                  cfb_chk_totalsecs:
  9007                                  		; 11/08/2023
  9008                                  ; 18/12/2023
  9009                                  %if 0
  9010                                  		; 17/10/2022		
  9011                                  		mov	si, disksector+11 ; 14Eh+0Bh
  9012                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9013                                  		; 12/08/2023
  9014                                  		cmp	word [si+8], 0
  9015                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  9016                                  					; just to make sure.
  9017                                  		jz	short cfb_retit
  9018                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9019                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  9020                                  		; 12/08/2023
  9021                                  		mov	ax, [si+8]
  9022                                  		add	ax, [si+11h]
  9023                                  
  9024                                  		jnb	short cfb_retit
  9025                                  		jnz	short cfb_retit
  9026                                  					; if carry set and ax=0
  9027                                  		dec	word [si+8]
  9028                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  9029                                  					; then decrease	BPB_TOTALSECTORS by 1
  9030                                  %endif
  9031                                  		; 18/12/2023
  9032                                  		;cmp	word [bx+19], 0
  9033 000025C4 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  9034 000025C7 21C0                    		and	ax, ax ; 0 ?
  9035 000025C9 7412                    		jz	short cfb_retit
  9036                                  
  9037                                  		;mov	ax, [bx+19]
  9038 000025CB 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  9039 000025CE 730D                    		jnc	short cfb_retit
  9040 000025D0 750B                    		jnz	short cfb_retit
  9041                                  		; ax = 0		; 0 -> 0FFFFh
  9042 000025D2 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  9043                                  
  9044 000025D5 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  9045 000025D9 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  9046                                  cfb_retit:	
  9047                                  		; 18/12/2023
  9048                                  		;pop	si
  9049                                  		;pop	dx
  9050                                  		;pop	ax
  9051                                  		
  9052 000025DD C3                      		retn
  9053                                  
  9054                                  ; ---------------------------------------------------------------------------
  9055                                  
  9056 000025DE 0200                    word2:		dw 2
  9057 000025E0 0300                    word3:		dw 3
  9058 000025E2 0002                    word512:	dw 512
  9059                                  
  9060                                  ; =============== S U B	R O U T	I N E =======================================
  9061                                  
  9062                                  ; 15/10/2022
  9063                                  
  9064                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  9065                                  ; the form factor. it is assumed that the bpbs for the various form factors
  9066                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  9067                                  ; as the bpb on the drive.
  9068                                  ;
  9069                                  ; no attempt is made to preserve registers since we are going to jump to
  9070                                  ; sysinit straight after this routine.
  9071                                  
  9072                                  		; 18/12/2023 - Retro DOS v5.0 
  9073                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
  9074                                  setdrvparms:
  9075                                  		; 12/12/2023
  9076                                  		; ds = cs
  9077 000025E4 31DB                    		xor	bx, bx
  9078                                  		; 18/10/2022
  9079 000025E6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  9080                                  _next_bds:
  9081 000025EA 06                      		push	es
  9082 000025EB 57                      		push	di
  9083                                  
  9084                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9085 000025EC 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
  9086                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  9087                                  
  9088 000025F0 80FB05                  		cmp	bl, 5		; ffHardFile
  9089 000025F3 753A                    		jnz	short nothardff
  9090 000025F5 31D2                    		xor	dx, dx
  9091 000025F7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9092 000025FB 09C0                    		or	ax, ax
  9093 000025FD 7508                    		jnz	short get_ccyl
  9094 000025FF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9095 00002603 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9096                                  get_ccyl:
  9097 00002607 52                      		push	dx
  9098 00002608 50                      		push	ax
  9099 00002609 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  9100 0000260D 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9101                                  					; assume sectors per cyl. < 64k.
  9102 00002611 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  9103 00002613 58                      		pop	ax
  9104 00002614 5A                      		pop	dx		; dx:ax	= total	sectors
  9105 00002615 50                      		push	ax
  9106 00002616 89D0                    		mov	ax, dx
  9107 00002618 31D2                    		xor	dx, dx
  9108 0000261A F7F1                    		div	cx
  9109                                  		; 12/12/2023  ; !*!
  9110                                  		; (data segment may not be same with code segment here)
  9111                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
  9112                                  		; 18/12/2023 - Retro DOS v5.0
  9113                                  		;mov	[cs:saved_word], ax
  9114 0000261C 58                      		pop	ax
  9115 0000261D F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  9116 0000261F 09D2                    		or	dx, dx
  9117 00002621 7401                    		jz	short no_cyl_rnd ; came out even
  9118 00002623 40                      		inc	ax		; round	up
  9119                                  no_cyl_rnd:
  9120                                  		; 18/12/2023 - Retro DOS v5.0
  9121 00002624 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
  9122                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  9123                                  		
  9124 00002628 06                      		push	es
  9125 00002629 1F                      		pop	ds  ; !*! ; 12/12/2023
  9126                                  
  9127 0000262A 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  9128                                  					; ds:si	-> bpb for hard	file
  9129 0000262D EB55                    		jmp	short set_recbpb
  9130                                  ; ---------------------------------------------------------------------------
  9131                                  
  9132                                  nothardff:				
  9133 0000262F 0E                      		push	cs
  9134 00002630 1F                      		pop	ds
  9135                                  
  9136                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  9137                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  9138                                  
  9139                                  		; 10/12/2022
  9140                                  		; ds = cs
  9141                                  		; 17/10/2022 (ds=cs)
  9142 00002631 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  9143                                  		;cmp	byte [cs:fakefloppydrv], 1
  9144 00002636 7454                    		jz	short go_to_next_bds
  9145 00002638 80FB07                  		cmp	bl, 7		; ffother
  9146                                  					; special case "other" type of medium
  9147 0000263B 753D                    		jnz	short not_process_other
  9148                                  process_other:
  9149 0000263D 31D2                    		xor	dx, dx
  9150                                  
  9151                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
  9152                                  		;mul	word [di+36h]	; [di+BDS.rheads]
  9153                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
  9154                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  9155                                  		;			; have the total number of sectors
  9156                                  		; 18/12/2023 - Retro DOS v5.0
  9157 0000263F 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
  9158 00002642 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
  9159 00002645 F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
  9160 00002648 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
  9161                                  					; have the total number of sectors
  9162 0000264B 48                      		dec	ax
  9163 0000264C B201                    		mov	dl, 1
  9164                                  _again:					
  9165 0000264E 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9166 00002651 7206                    		jb	short _@@
  9167 00002653 D1E8                    		shr	ax, 1
  9168 00002655 D0E2                    		shl	dl, 1
  9169 00002657 EBF5                    		jmp	short _again
  9170                                  ; ---------------------------------------------------------------------------
  9171                                  
  9172                                  _@@:
  9173 00002659 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  9174 0000265C 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  9175                                  
  9176                                  		; 18/12/2023 - Retro DOS v5.0
  9177 0000265E C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
  9178                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  9179                                  __@@:
  9180                                  		; 18/12/2023 - Retro DOS v5.0
  9181 00002663 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
  9182                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
  9183                                  
  9184                                  ; logic to get the sectors/fat area.
  9185                                  ; fat entry is assumed to be 1.5 bytes!!!
  9186                                  
  9187                                  		; 10/12/2022
  9188                                  		; ds = cs
  9189                                  		; 17/10/2022 (ds=cs)
  9190 00002666 F726[E025]              		mul	word [word3]	; * 3
  9191 0000266A F736[DE25]              		div	word [word2]	; / 2
  9192 0000266E 31D2                    		xor	dx, dx
  9193 00002670 F736[E225]              		div	word [word512]	; / 512
  9194                                  		;
  9195                                  		; 10/12/2022
  9196                                  		;mul	word [cs:word3]	; * 3
  9197                                  		;div	word [cs:word2]	; / 2
  9198                                  		;xor	dx, dx
  9199                                  		;div	word [cs:word512] ; / 512
  9200                                  		;
  9201 00002674 40                      		inc	ax		; + 1
  9202                                  no_round_up:
  9203                                  		; 18/12/2023 - Retro DOS v5.0
  9204 00002675 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
  9205                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
  9206                                  
  9207 00002678 EB12                    		jmp	short go_to_next_bds
  9208                                  ; ---------------------------------------------------------------------------
  9209                                  
  9210                                  not_process_other:
  9211 0000267A D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  9212                                  		
  9213                                  		;mov	si, bpbtable
  9214                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  9215                                  		; 09/12/2022
  9216                                  		;mov	si, BPBTABLE
  9217                                  		;mov	si, [bx+si]	; get address of bpb
  9218                                  		; 10/12/2022
  9219                                  		;mov	si, [BPBTABLE+bx]
  9220                                  		; 13/12/2022
  9221                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  9222                                  		
  9223                                  		; 14/08/2023
  9224                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  9225                                  							; correct offset
  9226 0000267C 8BB7[0490]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  9227                                  		
  9228                                  		; 18/12/2023 
  9229                                  		; si = address of the requested disk(ette) parameter block
  9230                                  		;	! as offset from SYSINIT segment !
  9231                                  
  9232                                  		; 28/08/2023
  9233 00002680 81C69046                		add	si, SYSINIT_OFFSET
  9234                                  			; + displacement from BIOSDATA segment ; 18/12/2023
  9235                                  set_recbpb:
  9236                                  		; 18/12/2023
  9237                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
  9238                                  		;			; es:di	-> recbpb
  9239                                  		;mov	cx, 25		; bpbx.size
  9240                                  		;rep movsb		; move (size bpbx) bytes
  9241                                  		
  9242                                  		; 18/12/2023 - Retro DOS v5.0
  9243 00002684 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
  9244                                  					; es:di	-> recbpb
  9245 00002687 B93500                  		mov	cx, 53		; bpbx.size
  9246 0000268A F3A4                    		rep movsb		; move (size bpbx) byte
  9247                                  go_to_next_bds:
  9248 0000268C 5F                      		pop	di
  9249 0000268D 07                      		pop	es		; restore pointer to bds
  9250 0000268E 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  9251 00002691 83FFFF                  		cmp	di, 0FFFFh	; -1
  9252 00002694 740A                    		jz	short got_end_of_bds_chain
  9253 00002696 E951FF                  		jmp	_next_bds
  9254                                  
  9255                                  ; ---------------------------------------------------------------------------
  9256                                  
  9257                                  		; 18/12/2022
  9258                                  ;got_end_of_bds_chain:
  9259                                  		;retn
  9260                                  
  9261                                  ; =============== S U B	R O U T	I N E =======================================
  9262                                  
  9263                                  ; 15/10/2022
  9264                                  ; 30/12/2018 - Retro DOS v4.0
  9265                                  
  9266                                  ; al = device number
  9267                                  
  9268                                  print_init:	
  9269 00002699 98                      		cbw
  9270 0000269A 89C2                    		mov	dx, ax
  9271 0000269C B401                    		mov	ah, 1
  9272 0000269E CD17                    		int	17h		; PRINTER - INITIALIZE
  9273                                  					; DX = printer port (0-3)
  9274                                  					; Return: AH = status
  9275                                  got_end_of_bds_chain:	; 18/12/2022
  9276 000026A0 C3                      		retn
  9277                                  
  9278                                  ; =============== S U B	R O U T	I N E =======================================
  9279                                  
  9280                                  ; al = device number
  9281                                  
  9282                                  aux_init:
  9283 000026A1 98                      		cbw
  9284 000026A2 89C2                    		mov	dx, ax
  9285                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  9286                                  					; 2400,n,1,8 (msequ.inc)
  9287                                  		;mov	ah, 0
  9288                                  		; 10/12/2022
  9289 000026A4 B8A300                  		mov	ax, 00A3h
  9290 000026A7 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  9291                                  					; 	AL = initializing parameters,
  9292                                  					;	DX = port number (0-3)
  9293                                  					; Return: AH = RS-232 status code bits,
  9294                                  					;	  AL = modem status bits
  9295 000026A9 C3                      		retn
  9296                                  
  9297                                  ; =============== S U B	R O U T	I N E =======================================
  9298                                  
  9299                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9300                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
  9301                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
  9302                                  ; 30/12/2018 - Retro DOS v4.0
  9303                                  ; 03/06/2018 - Retro DOS v3.0
  9304                                  ; (19/03/2018 - Retro DOS v2.0)
  9305                                  
  9306                                  ; domini **********************************************************************
  9307                                  ;
  9308                                  ;mini disk initialization routine. called right after dohard
  9309                                  ;modified for >2 hardfile support
  9310                                  ;
  9311                                  ; **cs=ds=es=datagrp
  9312                                  ;
  9313                                  ; **domini will search for every extended partition in the system, and
  9314                                  ;   initialize it.
  9315                                  ;
  9316                                  ; **bdsm stands for bds table for mini disk and located right after the label
  9317                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  9318                                  ;   address of bdsm table.
  9319                                  ;
  9320                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  9321                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  9322                                  ;   right now, they are called as ismini, hidden_trks respectively.
  9323                                  ;
  9324                                  ; **domini will use the same routine in sethard routine after label set2 to
  9325                                  ;   save coding.
  9326                                  ;
  9327                                  ; **drvmax determined in dohard routine will be used for the next
  9328                                  ;   available logical mini disk drive number.
  9329                                  ;
  9330                                  ; input: drvmax, dskdrvs
  9331                                  ;
  9332                                  ; output: minidisk installed. bdsm table established and installed to bds.
  9333                                  ;	  end_of_bdsm - ending offset address of bdsm.
  9334                                  ;
  9335                                  ; called modules:
  9336                                  ;		  getboot
  9337                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  9338                                  ;
  9339                                  ;		  setmini (new, it will use set2 routine)
  9340                                  ;
  9341                                  ; variables used: end_of_bdsm
  9342                                  ;		  rom_minidisk_num
  9343                                  ;		  mini_hdlim, mini_seclim
  9344                                  ;		  BDS_STRUC, start_bds
  9345                                  ;
  9346                                  ;******************************************************************************
  9347                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  9348                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
  9349                                  
  9350                                  		; 19/10/2022
  9351                                  domini:
  9352 000026AA 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
  9353                                  		; 10/12/2022
  9354 000026AE 20F6                    		and	dh, dh
  9355                                  		;cmp	dh, 0
  9356 000026B0 743C                    		jz	short dominiret	; no hard file?	then exit.
  9357 000026B2 B280                    		mov	dl, 80h		; start	with hardfile 80h
  9358                                  domini_loop:
  9359                                  		; 18/12/2023 - Retro DOS v5.0
  9360 000026B4 31C0                    		xor	ax, ax ; 0
  9361                                  		; ds = cs
  9362                                  		;mov	[cs:ep_start_sector], ax
  9363                                  		;mov	[cs:ep_start_sector+2], ax
  9364                                  		;mov	[cs:ep_hidden_secs], ax
  9365                                  		;mov	[cs:ep_hidden_secs+2], ax
  9366 000026B6 A3[0022]                		mov	[ep_start_sector], ax
  9367 000026B9 A3[0222]                		mov	[ep_start_sector+2], ax
  9368 000026BC A3[0422]                		mov	[ep_hidden_secs], ax
  9369 000026BF A3[0622]                		mov	[ep_hidden_secs+2], ax
  9370                                  		;
  9371 000026C2 52                      		push	dx
  9372 000026C3 8816[5C1A]              		mov	[rom_minidisk_num], dl
  9373 000026C7 B408                    		mov	ah, 8
  9374 000026C9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  9375                                  					; DL = drive number
  9376                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  9377                                  					; DL = number of consecutive drives
  9378                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  9379                                  		
  9380                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9381                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  9382                                  		;inc	dh
  9383                                  		;xor	ax, ax
  9384                                  		;mov	al, dh
  9385 000026CB 31C0                    		xor	ax, ax
  9386 000026CD 88F0                    		mov	al, dh	; <= 255
  9387 000026CF 40                      		inc	ax	; (0FFh -> 100h)
  9388 000026D0 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
  9389                                  		;and	cl, 3Fh
  9390                                  		;mov	al, cl
  9391                                  		; 08/08/2023
  9392 000026D3 88C8                    		mov	al, cl
  9393 000026D5 83E03F                  		and	ax, 3Fh
  9394 000026D8 A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
  9395                                  		
  9396                                  		; 18/12/2023
  9397                                  		;push	es ; * ; not necessary
  9398 000026DB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9399 000026DF E866FA                  		call	getboot		; read master boot record into
  9400                                  					; initbootsegment:bootbias
  9401 000026E2 7203                    		jc	short domininext
  9402 000026E4 E80800                  		call	find_mini_partition
  9403                                  domininext:
  9404                                  		;pop	es ; *
  9405 000026E7 5A                      		pop	dx
  9406 000026E8 FEC2                    		inc	dl		; next hard file
  9407 000026EA FECE                    		dec	dh
  9408 000026EC 75C6                    		jnz	short domini_loop
  9409                                  dominiret:
  9410 000026EE C3                      		retn
  9411                                  
  9412                                  ; =============== S U B	R O U T	I N E =======================================
  9413                                  
  9414                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  9415                                  ; 30/12/2018 - Retro DOS v4.0
  9416                                  
  9417                                  ;find_mini_partition tries to find every extended partition on a disk.
  9418                                  ;at entry:	di -> bdsm entry
  9419                                  ;		es:bx -> 07c0:bootbias - master boot record
  9420                                  ;		rom_minidisk_num - rom drive number
  9421                                  ;		drvmax - logical drive number
  9422                                  ;		mini_hdlim, mini_seclim
  9423                                  ;
  9424                                  ;called routine: setmini which uses set2 (in sethard routine)
  9425                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  9426                                  
  9427                                  
  9428                                  		; 19/12/2023 - Retro DOS v5.0 
  9429                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
  9430                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
  9431                                  
  9432                                  find_mini_partition:	
  9433 000026EF 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  9434                                  
  9435                                  		; 19/12/2023
  9436                                  		; PCDOS 7.1 IBMBIO.COM
  9437                                  		;mov	word [ld_p_number], 26
  9438                                  fmpnext:
  9439                                  		;add	word [ld_p_number], 16
  9440                                  		;cmp	word [ld_p_number], 4122
  9441                                  		;		; 64 logical disk partitions (64 EBRs)
  9442                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
  9443                                  		;jg	short fmpnextfound
  9444                                  				
  9445 000026F3 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
  9446 000026F7 7410                    		je	short fmpgot ; Extended DOS CHS
  9447                                  		
  9448                                  		; 19/12/2023 - Retro DOS v5.0
  9449 000026F9 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
  9450 000026FD 740A                    		je	short fmpgot
  9451                                  
  9452 000026FF 83C310                  		add	bx, 16
  9453 00002702 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9454 00002706 75EB                    		jnz	short fmpnext
  9455                                  		;jmp	short fmpnextfound ; extended partition	not found
  9456                                  		; 18/12/2022
  9457                                  fmpnextfound:
  9458 00002708 C3                      		retn
  9459                                  
  9460                                  ;		; 30/07/2019 - Retro DOS v3.2
  9461                                  ;		jb	short fmpnext
  9462                                  ;fmpret:
  9463                                  ;		retn	; 29/05/2019
  9464                                  
  9465                                  ; ---------------------------------------------------------------------------
  9466                                  
  9467                                  		; 19/10/2022
  9468                                  fmpgot:					; found my partition.
  9469 00002709 E82B01                  		call	dmax_check	; check	for drvmax already 26
  9470 0000270C 73FA                    		jnb	short fmpnextfound ; done if too many
  9471                                  
  9472 0000270E 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
  9473                                  
  9474                                  		; 19/12/2023
  9475                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  9476                                  		;; 10/12/2022
  9477                                  		;or	byte [di+23h], 1
  9478                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
  9479                                  		;			; fNon_Removable
  9480                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  9481                                  		;			; ffHardFile
  9482                                  		; 19/12/2023 - Retro DOS v5.0
  9483 00002712 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
  9484 00002717 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
  9485 0000271B C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
  9486                                  
  9487 0000271F C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  9488 00002724 A1[621A]                		mov	ax, [mini_hdlim]
  9489 00002727 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  9490 0000272A A1[641A]                		mov	ax, [mini_seclim]
  9491 0000272D 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  9492 00002730 A0[5C1A]                		mov	al, [rom_minidisk_num]
  9493 00002733 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  9494                                  					; set physical number
  9495 00002736 A0[7500]                		mov	al, [drvmax]
  9496 00002739 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  9497                                  					; set logical number
  9498 0000273C 26837F0A00              		cmp	word [es:bx+10], 0
  9499                                  		;ja	short fmpgot_cont
  9500 00002741 7707                    		ja	short fmpgot1	; 19/12/2023
  9501 00002743 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  9502                                  					; only lower word is meaningful.
  9503 00002748 72BE                    		jb	short fmpnextfound
  9504                                  					; should be bigger than 64 sectors at least
  9505                                  fmpgot1:	; 19/12/2023
  9506                                  ;fmpgot_cont:				
  9507 0000274A 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  9508 0000274D 268A7702                		mov	dh, [es:bx+2]	; cylinder
  9509 00002751 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  9510 00002754 D0C6                    		rol	dh, 1
  9511 00002756 D0C6                    		rol	dh, 1
  9512 00002758 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  9513                                  		; 19/12/2023 - Retro DOS v5.0
  9514 0000275C 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
  9515                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  9516                                  					; set hidden trks
  9517                                  		; 19/12/2023
  9518                                  		;push	bx ; * ; PCDOS 7.1	
  9519                                  		;;;
  9520 0000275F 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
  9521 00002763 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
  9522 00002767 030E[0022]              		add	cx, [ep_start_sector]
  9523 0000276B 1306[0222]              		adc	ax, [ep_start_sector+2]
  9524 0000276F 31D2                    		xor	dx, dx ; 19/12/2023
  9525 00002771 3916[0022]              		cmp	[ep_start_sector], dx ; 0
  9526                                  		;cmp	word [ep_start_sector], 0
  9527 00002775 750D                    		jnz	short fmpgot2
  9528 00002777 3916[0222]              		cmp	[ep_start_sector+2], dx ; 0
  9529                                  		;cmp	word [ep_start_sector+2], 0
  9530 0000277B 7507                    		jnz	short fmpgot2
  9531 0000277D 890E[0022]              		mov	[ep_start_sector], cx
  9532 00002781 A3[0222]                		mov	[ep_start_sector+2], ax
  9533                                  fmpgot2:
  9534 00002784 890E[0422]              		mov	[ep_hidden_secs], cx
  9535 00002788 A3[0622]                		mov	[ep_hidden_secs+2], ax
  9536                                  		
  9537                                  		; convert start sector address to CHS
  9538                                  	
  9539                                  		; 19/12/2023
  9540                                  		; dx = 0
  9541                                  		;push	bx ; * ; not necessary
  9542                                  
  9543                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
  9544 0000278B 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
  9545                                  		;xor	dx, dx  ; dx = 0
  9546                                  		;div	bx
  9547 0000278E F7F6                    		div	si
  9548 00002790 91                      		xchg	ax, cx
  9549                                  		;div	bx
  9550 00002791 F7F6                    		div	si
  9551                                  		;mov	bx, [di+15h]	; [di+BDS.heads]
  9552                                  		; 07/05/2024
  9553                                  		; 17/04/2024 (BugFix)
  9554 00002793 8B7515                  		mov	si, [di+15h]	; [di+BDS.heads]
  9555 00002796 91                      		xchg	ax, cx
  9556 00002797 31D2                    		xor	dx, dx
  9557                                  		;div	bx
  9558 00002799 F7F6                    		div	si
  9559 0000279B 91                      		xchg	ax, cx
  9560                                  		;div	bx
  9561 0000279C F7F6                    		div	si
  9562                                  
  9563                                  		;pop	bx ; *
  9564                                  
  9565 0000279E 09C9                    		or	cx, cx
  9566 000027A0 7505                    		jnz	short fmpgot_lba_rd
  9567 000027A2 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
  9568 000027A5 7235                    		jb	short fmpgot_chs_rd
  9569                                  fmpgot_lba_rd:
  9570 000027A7 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
  9571 000027AB 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9572 000027AF 1E                      		push	ds
  9573                                  		; 19/12/2023
  9574                                  		;push	si ; ** ; not necessary 
  9575 000027B0 31C0                    		xor	ax, ax		; push bp
  9576                                  				        ; mov bp, sp ; (*)
  9577 000027B2 50                      		push	ax ; 0
  9578 000027B3 50                      		push	ax ; 0
  9579 000027B4 FF36[0622]              		push	word [ep_hidden_secs+2]
  9580 000027B8 FF36[0422]              		push	word [ep_hidden_secs]
  9581 000027BC B80002                  		mov	ax, bootbias ; 200h	
  9582                                  		;mov	ax, 200h	; bootbias (buffer offset)
  9583 000027BF 06                      		push	es		; buffer segment
  9584 000027C0 50                      		push	ax
  9585 000027C1 B80100                  		mov	ax, 1
  9586 000027C4 50                      		push	ax		; read count
  9587 000027C5 B81000                  		mov	ax, 10h		; DAP size = 16
  9588 000027C8 50                      		push	ax
  9589 000027C9 8CD0                    		mov	ax, ss
  9590 000027CB 8ED8                    		mov	ds, ax
  9591 000027CD 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
  9592                                  		
  9593 000027CF B442                    		mov	ah, 42h		; LBA read
  9594 000027D1 CD13                    		int	13h		; DISK - IBM/MS Extension
  9595                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  9596                                  		; 19/12/2023	
  9597                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
  9598                                  		;add	sp, 16
  9599                                  		;popf		; BUG!
  9600                                  					; mov sp, bp ; (*)
  9601                                  					; pop bp
  9602                                  		; 19/12/2023
  9603 000027D3 9F                      		lahf		; load status flags into AH
  9604 000027D4 83C410                  		add	sp, 16
  9605 000027D7 9E                      		sahf		; store AH into flags
  9606                                  		
  9607                                  		;pop	si ; ** ; 19/12/2023
  9608 000027D8 1F                      		pop	ds
  9609 000027D9 7317                    		jnc	short fmpgot3
  9610                                  fmpnotfound:	; 19/12/2023
  9611 000027DB C3                      		retn
  9612                                  		;jmp	short fmpgot3 
  9613                                  		;;;
  9614                                  
  9615                                  		; 19/12/2023
  9616                                  fmpgot_chs_rd:
  9617 000027DC 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  9618 000027E0 268A7701                		mov	dh, [es:bx+1]	; head
  9619 000027E4 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9620 000027E8 BB0002                  		mov	bx, 200h	; bootbias
  9621 000027EB B80102                  		mov	ax, 201h
  9622 000027EE CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9623                                  					; AL = number of sectors to read, CH = track, CL = sector
  9624                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9625                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9626                                  ;fmpgot3:	; 19/12/2023
  9627                                  		;jc	short fmpnextfound
  9628 000027F0 72E9                    		jc	short fmpnotfound
  9629                                  fmpgot3:	
  9630 000027F2 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  9631                                  
  9632                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9633                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  9634 000027F5 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  9635                                  		;jne	short fmpnextfound ; not a valid boot sector !
  9636                                  		; 19/12/2023
  9637 000027FB 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
  9638                                  
  9639                                  		; 13/08/2023
  9640                                  		;push	es
  9641 000027FD E80800                  		call	setmini		; install a mini disk.
  9642                                  					; bx value saved.
  9643                                  		;pop	es  ; 13/08/2023
  9644 00002800 7203                    		jc	short fmpnextchain
  9645 00002802 E84700                  		call	xinstall_bds	; -- install the bdsm into table
  9646                                  fmpnextchain:
  9647 00002805 E9EBFE                  		jmp	fmpnext		; let's find out
  9648                                  					; if we	have any chained partition
  9649                                  ; ---------------------------------------------------------------------------
  9650                                  
  9651                                  		; 18/12/2022
  9652                                  ;fmpnextfound:
  9653                                  		;retn
  9654                                  
  9655                                  ; =============== S U B	R O U T	I N E =======================================
  9656                                  
  9657                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9658                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  9659                                  
  9660                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9661                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
  9662                                  
  9663                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  9664                                  	
  9665 00002808 57                      		push	di
  9666 00002809 53                      		push	bx
  9667                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9668                                  		; ds = cs = BIOSDATA segment
  9669                                  		;push	ds
  9670 0000280A 06                      		push	es
  9671                                  setmini_1:
  9672                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
  9673                                  		;je	short setmini_2
  9674                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
  9675                                  		;je	short setmini_2
  9676                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
  9677                                  		;je	short setmini_2
  9678                                  		;
  9679                                  		; 19/12/2023 - Retro DOS v5.0
  9680                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
  9681                                  		;je	short setmini_2
  9682                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
  9683                                  		;je	short setmini_2
  9684                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
  9685                                  		;je	short setmini_2
  9686                                  
  9687                                  		; 19/12/2023
  9688 0000280B 268A07                  		mov 	al, [es:bx]
  9689 0000280E 3C01                    		cmp	al, 1 		; FAT12 partition
  9690 00002810 7422                    		je	short setmini_2
  9691 00002812 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
  9692 00002814 741E                    		je	short setmini_2
  9693 00002816 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
  9694 00002818 741A                    		je	short setmini_2
  9695 0000281A 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
  9696 0000281C 7416                    		je	short setmini_2
  9697 0000281E 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
  9698 00002820 7412                    		je	short setmini_2
  9699 00002822 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
  9700 00002824 740E                    		je	short setmini_2
  9701                                  
  9702 00002826 83C310                  		add	bx, 16
  9703 00002829 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9704                                  		;jne	short setmini_1
  9705 0000282D 72DC                    		jb	short setmini_1 ; 19/12/2023
  9706 0000282F F9                      		stc
  9707 00002830 07                      		pop	es
  9708                                  		; 12/08/2023
  9709                                  		;pop	ds
  9710 00002831 5B                      		pop	bx
  9711 00002832 5F                      		pop	di
  9712 00002833 C3                      		retn
  9713                                  
  9714                                  ; ---------------------------------------------------------------------------
  9715                                  setmini_2:
  9716 00002834 E9D1F9                  		jmp	set2		; branch into middle of sethard
  9717                                  
  9718                                  ; =============== S U B	R O U T	I N E =======================================
  9719                                  
  9720                                  ; 30/12/2022 - Retro DOS v4.2
  9721                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
  9722                                  
  9723                                  ; 15/10/2022
  9724                                  ; 28/12/2018 - Retro DOS v4.0
  9725                                  ;
  9726                                  ; dmax_check -- call this when we want to install a new drive.
  9727                                  ;		it checks for drvmax < 26 to see if there is
  9728                                  ;		a drive letter left.
  9729                                  ;
  9730                                  ;	drvmax < 26 : carry SET!
  9731                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  9732                                  ;			trash ax
  9733                                  
  9734                                  		; 19/12/2023 - Retro DOS v5.0
  9735                                  dmax_check:
  9736 00002837 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  9737 0000283C 720D                    		jb	short dmax_ok	; return with carry if okay
  9738 0000283E 06                      		push	es
  9739                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  9740                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
  9741 0000283F B8D904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  9742 00002842 8EC0                    		mov	es, ax
  9743                                  		; 18/10/2022
  9744 00002844 26C606[7F03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  9745                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  9746                                  					; set message flag
  9747                                  					; [SYSINIT+toomanydrivesflag]
  9748 0000284A 07                      		pop	es
  9749                                  
  9750                                  		;;push	es
  9751                                  		;;mov	ax,SYSINIT_SEG
  9752                                  		;;mov	es,ax
  9753                                  		;;mov	byte [es:toomanydrivesflag],1
  9754                                  					; set message flag
  9755                                  		;;pop	es
  9756                                  		;
  9757                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  9758                                  dmax_ok:
  9759 0000284B C3                      		retn
  9760                                  
  9761                                  ; =============== S U B	R O U T	I N E =======================================
  9762                                  
  9763                                  ; 18/10/2022
  9764                                  ; 15/10/2022
  9765                                  ; 28/12/2018 - Retro DOS v4.0
  9766                                  ;
  9767                                  ;	link next bds (at ds:di) into the chain. assume that the
  9768                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  9769                                  ;	  dskdrv_table, and end_of_bdss.	
  9770                                  
  9771                                  		; 19/12/2023 - Retro DOS v5.0
  9772                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
  9773                                  xinstall_bds:
  9774 0000284C 56                      		push	si
  9775 0000284D 53                      		push	bx
  9776 0000284E 8B36[1901]              		mov	si, [start_bds]	; get first bds
  9777                                  xinstall_bds_1:
  9778 00002852 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  9779 00002855 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  9780                                  		;mov	si, [si+BDS.link]
  9781 00002857 8B34                    		mov	si, [si]	; chain	through	list
  9782 00002859 EBF7                    		jmp	short xinstall_bds_1
  9783                                  
  9784                                  xinstall_bds_2:
  9785                                  		;mov	[si+BDS.link], di
  9786 0000285B 893C                    		mov	[si], di
  9787                                  		;mov	[si+BDS.link+2], ds
  9788 0000285D 8C5C02                  		mov	[si+2], ds
  9789                                  		;mov	word [di+BDS.link], -1
  9790 00002860 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  9791                                  		;mov	[di+BDS.link+2], ds
  9792 00002864 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  9793                                  		; 20/03/2019 - Retro DOS v4.0
  9794                                  		;lea	bx, [di+BDS.BPB]
  9795 00002867 8D5D06                  		lea	bx, [di+6]
  9796 0000286A 8B36[5E1A]              		mov	si, [last_dskdrv_table]
  9797 0000286E 891C                    		mov	[si], bx
  9798 00002870 8306[5E1A]02            		add	word [last_dskdrv_table], 2
  9799 00002875 FE06[7500]              		inc	byte [drvmax]
  9800                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
  9801                                  		; 19/12/2023 - Retro DOS v5.0
  9802 00002879 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
  9803 0000287F 5B                      		pop	bx
  9804 00002880 5E                      		pop	si
  9805 00002881 C3                      		retn
  9806                                  
  9807                                  ; =============== S U B	R O U T	I N E =======================================
  9808                                  
  9809                                  ; 17/10/2022
  9810                                  ; 15/10/2022
  9811                                  ; 28/12/2018 - Retro DOS v4.0
  9812                                  ; 03/06/2018 - Retro DOS v3.0
  9813                                  
  9814                                  		; 19/12/2023 - Retro DOS v5.0
  9815                                  cmos_clock_read:
  9816 00002882 50                      		push	ax
  9817 00002883 51                      		push	cx
  9818 00002884 52                      		push	dx
  9819 00002885 55                      		push	bp
  9820 00002886 31ED                    		xor	bp, bp
  9821                                  loop_clock:
  9822 00002888 31C9                    		xor	cx, cx
  9823 0000288A 31D2                    		xor	dx, dx
  9824 0000288C B402                    		mov	ah, 2
  9825 0000288E CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  9826                                  					; Return: CH = hours in	BCD
  9827                                  					; CL = minutes in BCD
  9828                                  					; DH = seconds in BCD
  9829                                  		; 19/12/2023
  9830                                  		;cmp	cx, 0
  9831 00002890 21C9                    		and	cx, cx
  9832 00002892 750F                    		jnz	short clock_present
  9833                                  		;cmp	dx, 0
  9834 00002894 09D2                    		or	dx, dx
  9835 00002896 750B                    		jnz	short clock_present
  9836                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
  9837                                  		;je	short no_readdate ; was	at zero	setting.
  9838 00002898 21ED                    		and	bp, bp
  9839 0000289A 751A                    		jnz	short no_readdate
  9840 0000289C 45                      		inc	bp		; only perform delay once.
  9841                                  		;mov	cx, 4000h	; 16384
  9842                                  		; 19/12/2023
  9843 0000289D B540                    		mov	ch, 40h ; cx = 4000h ; 16384
  9844                                  delay:					
  9845 0000289F E2FE                    		loop	delay
  9846 000028A1 EBE5                    		jmp	short loop_clock
  9847                                  ; ---------------------------------------------------------------------------
  9848                                  
  9849                                  clock_present:
  9850                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  9851                                  		; 19/12/2023
  9852                                  		; ds = cs
  9853 000028A3 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  9854                                  		
  9855 000028A8 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  9856                                  					; possibly destroyed by	cp dos and
  9857                                  					; post routine did not restore that.
  9858 000028AB 56                      		push	si
  9859 000028AC E8BCEF                  		call	read_real_date	; read real-time clock for date
  9860 000028AF FA                      		cli
  9861                                  		;mov	ds:daycnt, si	; set system date
  9862 000028B0 8936[8904]              		mov	[daycnt], si
  9863 000028B4 FB                      		sti
  9864 000028B5 5E                      		pop	si
  9865                                  no_readdate:
  9866 000028B6 5D                      		pop	bp
  9867 000028B7 5A                      		pop	dx
  9868 000028B8 59                      		pop	cx
  9869 000028B9 58                      		pop	ax
  9870                                  
  9871                                  cmosck9:	; 19/12/2023
  9872 000028BA C3                      		retn
  9873                                  
  9874                                  ; ---------------------------------------------------------------------------
  9875                                  
  9876                                  ; the following code is written by jack gulley in engineering group.
  9877                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  9878                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  9879                                  ; the cmos clock rate are still slow which slow down disk operations
  9880                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  9881                                  ; to fix this problem at the request of cp dos.
  9882                                  ;
  9883                                  ; the program is modified to be run on msinit. equates are defined
  9884                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  9885                                  ;
  9886                                  ;  the following code cmosck is used to insure that the cmos has not
  9887                                  ;	had its rate controls left in an invalid state on older at's.
  9888                                  ;
  9889                                  ;	it checks for an at model byte "fc" with a submodel type of
  9890                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  9891                                  ;	bits in case post has not done it. this initilization routine
  9892                                  ;	is only needed once when dos loads. it should be run as soon
  9893                                  ;	as possible to prevent slow diskette access.
  9894                                  ;
  9895                                  ;	this code exposes one to dos clearing cmos setup done by a
  9896                                  ;	resident program that hides and re-boots the system.
  9897                                  
  9898                                  cmosck:					; check and reset rtc rate bits
  9899                                  
  9900                                  ;model byte and submodel byte were already determined in msinit.
  9901                                  
  9902                                  	; 16/06/2018 - Retro DOS v3.0
  9903                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  9904                                  
  9905                                  	; 19/12/2023 - Retro DOS v5.0
  9906                                  	
  9907                                  		; 19/12/2023
  9908                                  		; ds = cs
  9909                                  		;push	ax ; not necessary ; 19/12/2023
  9910                                  		;
  9911 000028BB 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
  9912                                  		;cmp	byte [cs:model_byte], 0FCh
  9913 000028C0 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  9914 000028C2 803E[B005]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  9915                                  		;cmp	byte [cs:secondary_model_byte], 6
  9916                                  					; Is it 06 for the industral AT ?
  9917 000028C7 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  9918 000028C9 803E[B005]04            		cmp	byte [secondary_model_byte], 4
  9919                                  		;cmp	byte [cs:secondary_model_byte], 4
  9920                                  					; Is it 00, 01, 02, or 03 ?
  9921 000028CE 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  9922                                  					; Also,Secondary_model_byte = 0
  9923                                  					;   when AH=0C0h, int 15h failed.
  9924                                  					;	RESET THE CMOS PERIODIC RATE
  9925                                  					;  Model=FC submodel=00,01,02,03 or 06
  9926                                  cmosck4:
  9927 000028D0 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  9928                                  					; NMI disabled on return
  9929 000028D2 B426                    		mov	ah, 26h		; 00100110b
  9930                                  					; Set divider & rate selection
  9931 000028D4 E80B00                  		call	cmos_write
  9932 000028D7 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  9933                                  					; NMI disabled on return
  9934 000028D9 E82000                  		call	cmos_read
  9935 000028DC 2407                    		and	al, 7		; 00000111b
  9936                                  					; clear SET,PIE,AIE,UIE,SQWE
  9937 000028DE 88C4                    		mov	ah, al
  9938 000028E0 B00B                    		mov	al, 0Bh		; cmos_reg_b
  9939                                  					; NMI enabled on return
  9940                                  		; 19/12/2023
  9941                                  		;call	cmos_write
  9942                                  ;cmosck9:
  9943                                  		;pop	ax ; 19/12/2023
  9944                                  		;retn
  9945                                  
  9946                                  		; 19/12/2023
  9947                                  		;jmp	short cmos_write
  9948                                  
  9949                                  ; =============== S U B	R O U T	I N E =======================================
  9950                                  
  9951                                  ;--- cmos_write ----------------------------------------------------------------
  9952                                  ;		write byte to cmos system clock configuration table	       :
  9953                                  ;									       :
  9954                                  ; input: (al)=	cmos table address to be written to			       :
  9955                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9956                                  ;		bits 6-0 = address of table location to write		       :
  9957                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  9958                                  ;									       :
  9959                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  9960                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  9961                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9962                                  ;		the cmos address register is pointed to a default value and    :
  9963                                  ;		the interrupt flag restored to the entry state on return.      :
  9964                                  ;		only the cmos location and the nmi state is changed.	       :
  9965                                  ;-------------------------------------------------------------------------------
  9966                                  
  9967                                  cmos_write:				; write (ah) to location (al)
  9968 000028E2 9C                      		pushf			;
  9969 000028E3 50                      		push	ax		; save work register values
  9970 000028E4 FA                      		cli
  9971 000028E5 50                      		push	ax		; save user nmi	state
  9972 000028E6 0C80                    		or	al, 80h		; disable nmi for us
  9973 000028E8 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9974                                  					; RTC Seconds
  9975 000028EA 90                      		nop
  9976 000028EB 88E0                    		mov	al, ah
  9977 000028ED E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  9978 000028EF 58                      		pop	ax		; get user nmi
  9979 000028F0 2480                    		and	al, 80h
  9980 000028F2 0C0F                    		or	al, 0Fh
  9981 000028F4 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9982                                  					; RTC Seconds
  9983 000028F6 90                      		nop
  9984 000028F7 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  9985 000028F9 58                      		pop	ax		; restore work registers
  9986                                  
  9987                                  		; 19/12/2023
  9988                                  		;push	cs		; *place code segment in stack and
  9989                                  		;call	cmos_popf	; *handle popf for b- level 80286
  9990                                  		;retn
  9991 000028FA EB18                    		jmp	short cmos_rw_popf
  9992                                  
  9993                                  ; =============== S U B	R O U T	I N E =======================================
  9994                                  
  9995                                  ;--- CMOS_READ -----------------------------------------------------------------
  9996                                  ;		read byte from cmos system clock configuration table	       :
  9997                                  ;									       :
  9998                                  ; input: (al)=	cmos table address to be read				       :
  9999                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 10000                                  ;		bits 6-0 = address of table location to read		       :
 10001                                  ;									       :
 10002                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
 10003                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
 10004                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 10005                                  ;		the cmos address register is pointed to a default value and    :
 10006                                  ;		the interrupt flag restored to the entry state on return.      :
 10007                                  ;		only the (al) register and the nmi state is changed.	       :
 10008                                  ;-------------------------------------------------------------------------------
 10009                                  
 10010                                  cmos_read:				; read location (al) into (al)
 10011 000028FC 9C                      		pushf
 10012 000028FD FA                      		cli
 10013 000028FE 53                      		push	bx
 10014                                  		;push	ax ; *		; AL = cmos table address to be read
 10015                                  		; 19/12/2023
 10016 000028FF 89C3                    		mov	bx, ax ; * ; input
 10017 00002901 0C80                    		or	al, 80h
 10018 00002903 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10019                                  					; RTC Seconds
 10020 00002905 90                      		nop			; (undocumented delay needed)
 10021 00002906 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10022                                  		
 10023                                  		;mov	bx, ax ; output
 10024                                  		;pop	ax ; * ; input
 10025                                  
 10026                                  		; 19/12/2023
 10027                                  		; al = output, bl = input
 10028 00002908 93                      		xchg	ax, bx ; *
 10029                                  		; bl = output, al = input
 10030                                  	
 10031 00002909 2480                    		and	al, 80h
 10032 0000290B 0C0F                    		or	al, 0Fh
 10033 0000290D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10034                                  					; RTC Seconds
 10035 0000290F 90                      		nop
 10036 00002910 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10037                                  		;mov	ax, bx ; * ; output
 10038                                  		; 19/12/2023
 10039 00002912 93                      		xchg	ax, bx
 10040 00002913 5B                      		pop	bx
 10041                                  
 10042                                  		; 19/12/2023
 10043                                  cmos_rw_popf:
 10044 00002914 0E                      		push	cs		; *place code segment in stack and
 10045 00002915 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 10046 00002918 C3                      		retn			; return with flags restored
 10047                                  
 10048                                  ; ---------------------------------------------------------------------------
 10049                                  
 10050                                  cmos_popf:				
 10051 00002919 CF                      		iret			; popf for level b- parts
 10052                                  					; return far and restore flags
 10053                                  
 10054                                  ; 21/12/2022
 10055                                  ; ---------------------------------------------------------------------------
 10056                                  ; ---------------------------------------------------------------------------
 10057                                  %if 0
 10058                                  
 10059                                  ; ---------------------------------------------------------------------------
 10060                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 10061                                  ; ---------------------------------------------------------------------------
 10062                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 10063                                  ; ---------------------------------------------------------------------------
 10064                                  
 10065                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10066                                  ;
 10067                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 10068                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 10069                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 10070                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
 10071                                  
 10072                                  ; =============== S U B	R O U T	I N E =======================================
 10073                                  
 10074                                  ; GetClus, read in a cluster at a specified address
 10075                                  ;
 10076                                  ;  bx = cluster to read
 10077                                  ;  cx = sectors per cluster
 10078                                  ;  es:di = load location
 10079                                  
 10080                                  ; 17/10/2022
 10081                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 10082                                  ; 09/12/2022
 10083                                  DISKRD equ diskrd
 10084                                  
 10085                                  		; 29/12/2023
 10086                                  		; 20/12/2023 - Retro DOS v5.0
 10087                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 10088                                  
 10089                                  		; si:bx = (32 bit) cluster to read
 10090                                  		; cx = sectors per cluster
 10091                                  		; es:di = load location
 10092                                  
 10093                                  		; 17/10/2022
 10094                                  getclus:
 10095                                  		; 12/12/2023
 10096                                  		; ds = cs
 10097                                  		
 10098                                  		push	cx ; 1*
 10099                                  		push	di ; 2*
 10100                                  		;mov	[cs:doscnt], cx
 10101                                  		mov	[doscnt], cx ; 12/12/2023
 10102                                  
 10103                                  		; 20/12/2023
 10104                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 10105                                  		;mov	[ClusterH], si ; high word of cluster number
 10106                                  		mov	bp, si
 10107                                  
 10108                                  		mov	ax, bx
 10109                                  
 10110                                  		;dec	ax
 10111                                  		;dec	ax
 10112                                  		; 20/12/2023
 10113                                  		sub	ax, 2
 10114                                  
 10115                                  		;;sbb	[cs:ClusterH], 0
 10116                                  		;sbb	[ClusterH], 0
 10117                                  		sbb	bp, 0		
 10118                                  
 10119                                  		; 20/12/2023
 10120                                  		;;xchg	ax, [cs:ClusterH]
 10121                                  		;xchg	ax, [ClusterH]
 10122                                  		xchg	ax, bp
 10123                                  
 10124                                  		mul	cx
 10125                                  
 10126                                  		;;xchg	ax, [cs:ClusterH]
 10127                                  		;xchg	ax, [ClusterH]
 10128                                  		xchg	ax, bp ; (+)
 10129                                  		;
 10130                                  		mul	cx		;; convert to logical sector
 10131                                  					;; dx:ax = matching logical sector number
 10132                                  					;;	  starting from the data sector
 10133                                  		;;add	ax, [cs:bios_l]
 10134                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 10135                                  		; 12/12/2023
 10136                                  		;add	ax, [bios_l]
 10137                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 10138                                  
 10139                                  		; 20/12/2023
 10140                                  		;;add	dx, [cs:ClusterH]
 10141                                  		;add	ax, [cs:First_Data_Sector]
 10142                                  		;adc	dx, [cs:First_Data_Sector+2]
 10143                                  		add	dx, bp ; (+)
 10144                                  		;add	dx, [ClusterH]	; convert to logical sector
 10145                                  					; dx:ax	= matching logical sector number
 10146                                  					;	  starting from the data sector
 10147                                  		add	ax, [First_Data_Sector]
 10148                                  		adc	dx, [First_Data_Sector+2]
 10149                                  					; dx:ax = first logical sector to read
 10150                                  unpack:
 10151                                  		; 20/12/2023
 10152                                  		push	ds ; 3* ; ds = cs ; 12/12/2023
 10153                                  		push	dx ; 4* ; * ; 12/12/2023
 10154                                  		push	ax ; 5*
 10155                                  		; 29/12/2023
 10156                                  		push	si ; 6* 
 10157                                  		push	bx ; 7*
 10158                                  
 10159                                  		;;mov	si, [cs:fatloc]
 10160                                  		;mov	si, [fatloc] ; 12/12/2023
 10161                                  		;mov	ds, si
 10162                                  		; 20/12/2023
 10163                                  		;mov	ax, [fatloc]
 10164                                  		;mov	ds, ax
 10165                                  		push	bx ; 8*
 10166                                  		push	word [fatloc] ; 9*
 10167                                  
 10168                                  		;test	byte [cs:fbigfat], 20h
 10169                                  		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 10170                                  		pop	ds ; 9* ; ds = [fatloc]
 10171                                  		jz      short not_32bit_cluster ; no
 10172                                  unpack32:
 10173                                  		;push	dx
 10174                                  		mov	dx, si
 10175                                  		;mov	si, bx
 10176                                  		pop	si ; 8* ; si = bx
 10177                                  		add	si, si
 10178                                  		adc	dx, dx
 10179                                  		add	si, si
 10180                                  		adc	dx, dx 
 10181                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 10182                                  		call	get_fat_sector
 10183                                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 10184                                  		mov	bx, [bx]	; low word of the FAT32 cluster number
 10185                                  		;pop	dx
 10186                                  		jmp	short getcl1
 10187                                  
 10188                                  not_32bit_cluster:
 10189                                  		;mov	si, bx		; next cluster
 10190                                  		pop	si ; 8* ; si = bx
 10191                                  		test	byte [cs:fbigfat], 40h	; fbig
 10192                                  					; 16 bit fat?
 10193                                  		jnz	short unpack16	; yes
 10194                                  unpack12:
 10195                                  		shr	si, 1		; 12 bit fat. si = si/2
 10196                                  					; si = clus + clus/2
 10197                                  		add	si, bx		;
 10198                                  					; (si =	byte offset of the cluster in the FAT)
 10199                                  		;push	dx ; 12/12/2023
 10200                                  		xor	dx, dx
 10201                                  		; 12/12/2023
 10202                                  		; ds = FAT buffer segment
 10203                                  		call	get_fat_sector
 10204                                  		;pop	dx ; 12/12/2023
 10205                                  
 10206                                  		mov	ax, [bx]	; save it into ax
 10207                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
 10208                                  		; 25/06/2023
 10209                                  		;mov	al, [bx]	; splitted fat
 10210                                  		
 10211                                  		; 12/12/2023
 10212                                  		;mov	[cs:temp_cluster], al
 10213                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 10214                                  
 10215                                   		inc	si		; (next	byte)
 10216                                  
 10217                                  		;push	dx ; 12/12/2023
 10218                                  		xor	dx, dx
 10219                                  		call	get_fat_sector
 10220                                  		;pop	dx ; 12/12/2023
 10221                                  
 10222                                  		;mov	al, ds:0
 10223                                  		; 12/12/2023
 10224                                  		; ds = FAT buffer segment
 10225                                  		;mov	al, [0] ; 19/10/2022
 10226                                  		;mov	[cs:temp_cluster+1], al
 10227                                  		;mov	ax, [cs:temp_cluster]
 10228                                  		; 12/12/2023
 10229                                  		;mov	al, [cs:temp_cluster]
 10230                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 10231                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 10232                                  even_odd:
 10233                                  		; 29/12/2023
 10234                                  		pop	bx ; 7*		; restore old fat entry	value
 10235                                  		push	bx		; save it right	away.
 10236                                  		shr	bx, 1		; was it even or odd?
 10237                                  		jnc	short havclus	; it was even.
 10238                                  		shr	ax, 1		; odd. massage fat value and keep
 10239                                  					; the highest 12 bits.
 10240                                  		shr	ax, 1
 10241                                  		shr	ax, 1
 10242                                  		shr	ax, 1
 10243                                  havclus:
 10244                                  		mov	bx, ax		; now bx = new fat entry.
 10245                                  		and	bx, 0FFFh	; keep low 12 bits.
 10246                                  		jmp	short unpackx
 10247                                  ; ---------------------------------------------------------------------------
 10248                                  
 10249                                  unpack16:
 10250                                  		;push	dx	; 12/12/2023
 10251                                  		xor	dx, dx ; 0
 10252                                  		shl	si, 1		; extend to 32 bit offset
 10253                                  		;adc	dx, 0
 10254                                  		; 12/12/2023
 10255                                  		rcl	dx, 1
 10256                                  
 10257                                  		; 12/12/2023
 10258                                  		; ds = FAT buffer segment
 10259                                  		call	get_fat_sector
 10260                                  		;pop	dx	; 12/12/2023
 10261                                  		mov	bx, [bx]	;
 10262                                  					; bx = new fat entry.
 10263                                  unpackx:
 10264                                  		; 20/12/2023
 10265                                  		xor	si, si		; high word of cluster number = 0
 10266                                  					; (FAT12 or FAT16)
 10267                                  getcl1:
 10268                                  		; 29/12/2023
 10269                                  		pop	ax	; 7* - cluster number lw
 10270                                  		;pop	word [cs:ClusterH]
 10271                                  		pop	dx	; 6* - cluster number hw
 10272                                  
 10273                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10274                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 10275                                  		; ((consequtive clusters --> consequtive sectors))
 10276                                  
 10277                                  		sub	ax, bx	; previous - current (or current - new)	
 10278                                  		;sbb	[cs:ClusterH], si
 10279                                  		sbb	dx, si
 10280                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 10281                                  		;cmp	dx, -1
 10282                                  		; 29/12/2023
 10283                                  		inc	dx ; -1 -> 0
 10284                                  		jnz	short not_consequental
 10285                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 10286                                  		inc	ax ; -1 -> 0
 10287                                  not_consequental:
 10288                                  		pop	ax ; 5* 	; restore logical sector (low)
 10289                                  		pop	dx ; 4* ; * ; 12/12/2023
 10290                                  		pop	ds ; 3*
 10291                                  
 10292                                  		;; 12/12/2023
 10293                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 10294                                  		;; ((consequtive clusters --> consequtive sectors))
 10295                                  		;; ds = cs
 10296                                  		;sub	si, bx
 10297                                  		;cmp	si, -1		; one apart? (consequtive?)
 10298                                  		;			; (current = previous+1)
 10299                                  
 10300                                  		jnz	short getcl2	; no, read [doscnt] sectors 
 10301                                  
 10302                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 10303                                  		add	[doscnt], cx ; 12/12/2023 ; add to read count
 10304                                  		jmp	unpack
 10305                                  ; ---------------------------------------------------------------------------
 10306                                  
 10307                                  getcl2:
 10308                                  		push	si ; 20/12/2023
 10309                                  		push	bx	
 10310                                  		; bx = low word of the new cluster number
 10311                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 10312                                  		; si = high word of the new cluster number
 10313                                  		push	dx		; sector to read (high word)
 10314                                  		push	ax		; sector to read (low word)
 10315                                  		
 10316                                  		; 12/12/2023
 10317                                  		; ds = cs
 10318                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 10319                                  		;mov	cx, [cs:doscnt]
 10320                                  		mov	ax, [drvfat]	; get drive and	fat spec
 10321                                  
 10322                                  		;;;
 10323                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10324                                  		;
 10325                                  		; dma and segment (64K boundary) overrun precaution
 10326                                  		; (sector count will be decreased if it is required)
 10327                                   		mov	cx, di
 10328                                  		not	cx		; cx = 65535 - cx
 10329                                  		shr	cx, 1		; cx = cx/2
 10330                                  		xor	cl, cl
 10331                                  		xchg	cl, ch		; cx = cx/256
 10332                                  		
 10333                                  		;cmp	cx, [cs:doscnt]	
 10334                                  				; if sector read count > cx, decrease it to cx
 10335                                  		cmp	cx, [doscnt]
 10336                                  		jbe	short getcl3
 10337                                  		;;;
 10338                                  		;mov	cx, [cs:doscnt]
 10339                                  		mov	cx, [doscnt]
 10340                                  getcl3:
 10341                                  		pop	dx		; sector to read for diskrd (low)
 10342                                  		;pop	word [cs:start_sec_h]
 10343                                  		; 12/12/2023
 10344                                  		pop	word [start_sec_h]
 10345                                  					; sector to read for diskrd (high)
 10346                                  		; 12/12/2023
 10347                                  		; ds = cs
 10348                                  		;push	ds
 10349                                  		;push	cs
 10350                                  		;pop	ds
 10351                                  		
 10352                                  		push	cs		; simulate far call
 10353                                  
 10354                                  		; 20/12/2023
 10355                                  		; 17/10/2022
 10356                                  		mov	bp, DISKRD	; offset diskrd
 10357                                  		;mov	bp, 0A2Bh	; 20/12/2023
 10358                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 10359                                  		;mov	bp, 8E5h	; 17/10/2022
 10360                                  					; 2C7h:8E5h = 70h:2E55h
 10361                                  
 10362                                  		call	call_bios_code	; read the clusters
 10363                                  		
 10364                                  		;pop	ds
 10365                                  		; 12/12/2023
 10366                                  		; ds = cs
 10367                                  		pop	bx		; lw of the new cluster number
 10368                                  		pop	si ; 20/12/2023 ; hw of the new cluster number
 10369                                  
 10370                                  		pop	di ; 2* - (kernel) load location (es:di)
 10371                                  
 10372                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
 10373                                  		; 12/12/2023
 10374                                  		mov	ax, [doscnt]
 10375                                  		xchg	ah, al		; multiply by 256
 10376                                  		shl	ax, 1		; times	2 equal	512
 10377                                  		add	di, ax		; update load location
 10378                                  
 10379                                  		pop	cx ; 1*		; restore sectors/cluster
 10380                                  
 10381                                  		retn
 10382                                  
 10383                                  ; =============== S U B	R O U T	I N E =======================================
 10384                                  
 10385                                  ;function: find and read the corresponding fat sector into ds:0
 10386                                  ;
 10387                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 10388                                  ;     ds - fatloc segment
 10389                                  ;     cs:drvfat - logical drive number, fat id
 10390                                  ;     cs:md_sectorsize
 10391                                  ;     cs:last_fat_secnum - last fat sector number read in.
 10392                                  ;
 10393                                  ;out). corresponding fat sector read in.
 10394                                  ;      bx = offset value from fatlog segment.
 10395                                  ;      other registers are saved.
 10396                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 10397                                  ;      starts at the last byte of the fat sector. in this case, the caller
 10398                                  ;      should save this byte, and read the next fat sector to get the rest
 10399                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 10400                                  
 10401                                  		; 17/10/2022
 10402                                  get_fat_sector:	
 10403                                  		; 12/12/2023
 10404                                  		; ds = fat buffer segment
 10405                                  
 10406                                  		; 12/12/2023
 10407                                  		;push	ax ; (not necessary)
 10408                                  		push	cx ; read count (sectors per cluster)
 10409                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 10410                                  		push	si ; FAT offset value (from fat entry 0)
 10411                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 10412                                  		push	ds ; FAT buffer segment
 10413                                  
 10414                                  		; 12/12/2023
 10415                                  		push	cs
 10416                                  		pop	ds
 10417                                  	
 10418                                  		mov	ax, si
 10419                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 10420                                  		; 12/12/2023
 10421                                  		;mov	cx, [md_sectorsize] ; 512
 10422                                  		;div	cx		; ax = sector number, dx = offset
 10423                                  		; 12/12/2023
 10424                                  		;nop
 10425                                  
 10426                                  		; 12/12/2023
 10427                                  		div	word [md_sectorsize] ; 512
 10428                                  
 10429                                  		; ax = FAT sector (sequence/index) number
 10430                                  		; dx = cluster number offset
 10431                                  
 10432                                  		; Get rid of the assumption that
 10433                                  		; there	is only	one reserved sector
 10434                                  
 10435                                  		; 12/12/2023 ; *
 10436                                  		;push	es ; *
 10437                                  		;push	ds ; *
 10438                                  		;push	di ; *
 10439                                  		push	ax
 10440                                  		;push	cs ; *
 10441                                  		;pop	ds ; *
 10442                                  
 10443                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 10444                                  		; 12/12/2023
 10445                                  		mov	ax, [drvfat]	; get drive # and FAT id 
 10446                                  		mov	bp, SETDRIVE
 10447                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 10448                                  		;;mov	bp, 4D7h	; setdrive
 10449                                  					; at 2C7h:4D7h = 70h:2A47h
 10450                                  		push	cs		; simulate far call
 10451                                  		call	call_bios_code	; get bds for drive
 10452                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
 10453                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 10454                                  					; add #reserved_sectors
 10455                                  		; 12/12/2023
 10456                                  		;pop	di ; *
 10457                                  		;pop	ds ; *
 10458                                  		;pop	es ; *
 10459                                  
 10460                                  		; 12/12/2023
 10461                                  		; ds = cs
 10462                                  		cmp	ax, [last_fat_sec_num]
 10463                                  		;cmp	ax, [cs:last_fat_sec_num]
 10464                                  		jz	short gfs_split_chk ; don't need to read it again.
 10465                                  		mov	[last_fat_sec_num], ax
 10466                                  		;mov	[cs:last_fat_sec_num], ax
 10467                                  					; sector number
 10468                                  					; (in the partition, without hidden sectors)
 10469                                  		; 13/12/2023
 10470                                  		pop	es ; FAT buffer segment (DS on top of the stack)
 10471                                  		push	es ; (put it on top of the stack again)
 10472                                  
 10473                                  		push	dx ; cluster number offset
 10474                                  
 10475                                  		; 12/12/2023
 10476                                  		xor	cx, cx
 10477                                  		mov	[start_sec_h], cx ;0 
 10478                                  		;mov	word [cs:start_sec_h], 0 
 10479                                  					; prepare to read the fat sector
 10480                                  					; start_sec_h is always	0 for fat sector.
 10481                                  		mov	dx, ax
 10482                                  		; 12/12/2023
 10483                                  		inc	cx ; cx = 1
 10484                                  		;mov	cx, 1		; 1 sector read
 10485                                  		;mov	ax, [cs:drvfat]
 10486                                  		mov	ax, [drvfat]
 10487                                  		;push	ds
 10488                                  		;pop	es
 10489                                  
 10490                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
 10491                                  		
 10492                                  		; 12/12/2023
 10493                                  		;push	ds
 10494                                  		;push	cs
 10495                                  		;pop	ds
 10496                                  		
 10497                                  		push	cs		; simulate far call
 10498                                  		mov	bp, DISKRD	; 8E5h
 10499                                  		;mov	bp, 8E5h	; offset diskrd
 10500                                  					; 2C7h:8E5h = 70h:2E55h
 10501                                  		call	call_bios_code
 10502                                  
 10503                                  		; 12/12/2023
 10504                                  		;pop	ds
 10505                                  		; ds = cs = biosdata segment
 10506                                  
 10507                                  		pop	dx ; cluster number offset 
 10508                                  
 10509                                  gfs_split_chk:
 10510                                  		; 13/12/2023
 10511                                  		;mov	cx, [cs:md_sectorsize] ; 512
 10512                                  		mov	cx, [md_sectorsize]
 10513                                  ;gfs_split_chk:					
 10514                                  		dec	cx		; 511
 10515                                  		cmp	dx, cx		; if offset points to the
 10516                                  					; last byte of this sector,
 10517                                  					; then splitted	entry.
 10518                                  		mov	bx, dx		; set bx to dx
 10519                                  		
 10520                                  		; 12/12/2023
 10521                                  		; bx = dx = cluster number offset in the FAT buffer
 10522                                  		pop	ds ; FAT buffer segment
 10523                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 10524                                  		pop	si ; FAT offset value (from fat entry 0)
 10525                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 10526                                  		pop	cx ; read count (sectors per cluster)
 10527                                  		;pop	ax
 10528                                  
 10529                                  		retn
 10530                                  ; 15/10/2022
 10531                                  ;Bios_Data_Init	ends
 10532                                  
 10533                                  %endif
 10534                                  ; ---------------------------------------------------------------------------
 10535                                  ; ---------------------------------------------------------------------------
 10536                                  
 10537                                  		; 09/12/2022
 10538                                  		;db 0
 10539                                  
 10540                                  numbertodiv	equ ($-BData_start)
 10541                                  numbertomod	equ (numbertodiv % 16)
 10542                                  
 10543                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
 10544 0000291A 00<rep 6h>              		times (16-numbertomod) db 0
 10545                                  %endif
 10546                                  
 10547                                  ;align 16
 10548                                  
 10549                                  ; 09/12/2022
 10550                                  IOSYSCODESEGOFF equ $ - BData_start
 10551                                  ; 29/09/2023
 10552                                  ;IOSYSCODESEGOFF equ $-$$
 10553                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 10554                                  
 10555                                  ; 28/09/2023
 10556                                  S1SIZE equ $-$$
 10557                                  
 10558                                  ;--- End of DOSBIOS data segment --------------------------------------------
 10559                                  ; ---------------------------------------------------------------------------
 10560                                  		;db 4 dup(0)
 10561                                  ; 09/12/2022		
 10562                                  ;		times 4 db 0	; 19/10/2022
 10563                                  ; ---------------------------------------------------------------------------
 10564                                  
 10565                                  ;============================================================================
 10566                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 10567                                  ;============================================================================
 10568                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10569                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 10570                                  
 10571                                  section .BIOSCODE vstart=0 
 10572                                  
 10573                                  ; 30/12/2022
 10574                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 10575                                  
 10576                                  BCode_start:	 ; 09/12/2022
 10577                                   
 10578                                  ; 02/10/2022
 10579                                  
 10580                                  ;--- DOSBIOS code segment ---------------------------------------------------
 10581                                  ;----------------------------------------------------------------------------
 10582                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 10583                                  ;----------------------------------------------------------------------------
 10584                                  
 10585                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 10586 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 10587 00000030 7000                    BiosDataWord:	dw 70h
 10588                                  
 10589                                  ; 15/10/2022
 10590                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 10591                                  ; 09/12/2022
 10592                                  BIOSDATAWORD	equ BiosDataWord
 10593                                  
 10594                                  ; ---------------------------------------------------------------------------
 10595                                  
 10596                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10597                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10598                                  
 10599                                  ;************************************************************************
 10600                                  ;*									*
 10601                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 10602                                  ;*	  trashes di, cx, es						*
 10603                                  ;*									*
 10604                                  ;*	cas -- should be made disposable!				*
 10605                                  ;*									*
 10606                                  ;************************************************************************
 10607                                  
 10608                                  	; 20/09/2023	
 10609                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10610                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 10611                                  
 10612                                  _seg_reinit:
 10613 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10614                                  					; at 2C7h:30h or 70h:25A0h
 10615                                  		;mov	di, (offset cdev+2)
 10616 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 10617                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 10618                                  		; 10/08/2023
 10619 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 10620                                  _seg_reinit_1:
 10621 0000003D AB                      		stosw			; modify Bios_Code entry points
 10622 0000003E 47                      		inc	di
 10623 0000003F 47                      		inc	di
 10624 00000040 E2FB                    		loop	_seg_reinit_1
 10625                                  		; 10/08/2023 (PCDOS 7.1)
 10626                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 10627                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 10628 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 10629                                  
 10630 00000046 CB                      		retf
 10631                                  
 10632                                  ; ---------------------------------------------------------------------------
 10633                                  
 10634                                  ; 15/10/2022
 10635                                  
 10636                                  ;************************************************************************
 10637                                  ;*									*
 10638                                  ;*	chardev_entry - main device driver dispatch routine		*
 10639                                  ;*	   called with a dummy parameter block on the stack		*
 10640                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 10641                                  ;*									*
 10642                                  ;*	will eventually take care of doing the transitions in		*
 10643                                  ;*	   out of Bios_Code						*
 10644                                  ;*									*
 10645                                  ;************************************************************************
 10646                                  
 10647                                  		; 20/09/2023
 10648                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 10649 00000047 56                      		push	si
 10650 00000048 50                      		push	ax
 10651 00000049 51                      		push	cx
 10652 0000004A 52                      		push	dx
 10653 0000004B 57                      		push	di
 10654 0000004C 55                      		push	bp
 10655 0000004D 1E                      		push	ds
 10656 0000004E 06                      		push	es
 10657 0000004F 53                      		push	bx
 10658 00000050 89E5                    		mov	bp, sp
 10659 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 10660                                  		;;mov	ds, word [cs:0030h]
 10661                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10662 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10663                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 10664 0000005A C434                    		les	si, [si]
 10665                                  		;mov	ax, [si+2]	; get the device number	if present
 10666 0000005C 8CC0                    		mov	ax, es
 10667 0000005E A2[2100]                		mov	[auxnum], al
 10668 00000061 8826[8004]              		mov	[printdev], ah
 10669                                  		;mov	si, [si]	; point	to the device dispatch table
 10670 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 10671 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 10672 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 10673 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 10674 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 10675                                  		; 17/10/2022
 10676 00000079 81FE[6F05]              		cmp	si, DSKTBL
 10677                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 10678                                  		;cmp	si, 4A2h	; dsktbl
 10679                                  					; at 2C7h:4A2h = 70h:2A12h
 10680 0000007D 7517                    		jnz	short no_sector32_mapping
 10681                                  
 10682                                  ; Special case for 32-bit start sector number:
 10683                                  ;   if (si==dsktbl) /* if this is a disk device call */
 10684                                  ;      set high 16 bits of secnum to 0
 10685                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 10686                                  ;
 10687                                  ; pass high word of sector number in start_sec_h, low word in dx
 10688                                  ;
 10689                                  ; note: start_l and start_h are the offsets within the io_request packet
 10690                                  ;	  which contain the low and hi words of the 32 bit start sector if
 10691                                  ;	  it has been used.
 10692                                  ;
 10693                                  ; note: remember not to destroy the registers which have been set up before
 10694                                  
 10695                                  		; 20/09/2023
 10696                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 10697 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 10698 00000085 83FAFF                  		cmp	dx, 0FFFFh
 10699 00000088 750C                    		jnz	short no_sector32_mapping
 10700 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 10701                                  					; 32 bits dsk req
 10702                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 10703 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 10704 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 10705                                  					; dx = packet.start_l
 10706                                  no_sector32_mapping:
 10707 00000096 97                      		xchg	ax, di
 10708 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 10709 0000009B 2E3A04                  		cmp	al, [cs:si]
 10710 0000009E 732B                    		jnb	short command_error
 10711 000000A0 98                      		cbw			; note that al <= 15 means ok
 10712 000000A1 D1E0                    		shl	ax, 1
 10713 000000A3 01C6                    		add	si, ax
 10714 000000A5 97                      		xchg	ax, di
 10715 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 10716 000000AA FC                      		cld
 10717                                  		; 17/10/2022
 10718 000000AB 2EFF5401                		call	near [cs:si+1]
 10719                                  		;call	word ptr cs:si+1
 10720 000000AF 7202                    		jb	short already_got_ah_status
 10721 000000B1 B401                    		mov	ah, 1
 10722                                  already_got_ah_status:
 10723                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 10724                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10725                                  					; cas note: shouldn't be needed!
 10726 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10727                                  		;lds	bx, ds:ptrsav
 10728 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 10729 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 10730                                  					; mark operation complete
 10731 000000BF 5B                      		pop	bx
 10732 000000C0 07                      		pop	es
 10733 000000C1 1F                      		pop	ds
 10734 000000C2 5D                      		pop	bp
 10735 000000C3 5F                      		pop	di
 10736 000000C4 5A                      		pop	dx
 10737 000000C5 59                      		pop	cx
 10738 000000C6 58                      		pop	ax
 10739 000000C7 5E                      		pop	si
 10740                                  		;add	sp, 2		; get rid of fake return address
 10741                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 10742 000000C8 44                      		inc	sp
 10743 000000C9 44                      		inc	sp	
 10744                                  
 10745                                  		; fall through into bc_retf
 10746                                  ; ---------------------------------------------------------------------------	
 10747                                  bc_retf:
 10748 000000CA CB                      		retf
 10749                                  ; ---------------------------------------------------------------------------
 10750                                  
 10751                                  command_error:				
 10752 000000CB E80700                  		call	bc_cmderr
 10753 000000CE EBE3                    		jmp	short already_got_ah_status
 10754                                  ; 15/10/2022
 10755                                  ; 01/05/2019
 10756                                  
 10757                                  ;----------------------------------------------------------------------------
 10758                                  ; The following piece of hack is for supporting CP/M compatibility
 10759                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 10760                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 10761                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 10762                                  ; high.
 10763                                  ;----------------------------------------------------------------------------
 10764                                  
 10765                                  		;db 7 dup(0)
 10766                                  
 10767                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 10768                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 10769                                  		; 15/10/2022
 10770                                  		;dw 0		; pad to bring offset to 0D0h
 10771                                  
 10772 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 10773                                  				;  which is the CP/M call 5 entry point
 10774                                  		
 10775                                  
 10776                                  ; ---------------------------------------------------------------------------
 10777                                  
 10778                                  ;	exit - all routines return through this path
 10779                                  
 10780                                  bc_cmderr:				
 10781 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 10782                                  					; unknown command error
 10783                                  
 10784                                  ; =============== S U B	R O U T	I N E =======================================
 10785                                  
 10786                                  ;	now zero the count field by subtracting its current value,
 10787                                  ;	  which is still in cx, from itself.
 10788                                  
 10789                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 10790                                  ;	  in order to return the number actually complete
 10791                                  
 10792                                  bc_err_cnt:	
 10793                                  		;les	bx, ds:ptrsav
 10794                                  		; 19/10/2022
 10795 000000D7 C41E[1200]              		les	bx, [ptrsav]
 10796 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 10797                                  					; # of successful i/o's
 10798 000000DF B481                    		mov	ah, 81h		; mark error return
 10799 000000E1 F9                      		stc			; indicate abnormal end
 10800 000000E2 C3                      		retn
 10801                                  
 10802                                  ; 15/10/2022
 10803                                  
 10804                                  ;Bios_Code ends
 10805                                  
 10806                                  ;----------------------------------------------------------------------------
 10807                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 10808                                  ;----------------------------------------------------------------------------
 10809                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10810                                  ; 10/01/2019 - Retro DOS v4.0
 10811                                  
 10812                                  ; 30/04/2019
 10813                                  
 10814                                  ;title	mschar - character and clock devices
 10815                                  
 10816                                  ;MODE_CTRLBRK	equ	0FFh
 10817                                  
 10818                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 10819                                  
 10820                                  ;************************************************************************
 10821                                  ;*									*
 10822                                  ;*	device driver dispatch tables					*
 10823                                  ;*									*
 10824                                  ;*	each table starts with a byte which lists the number of		*
 10825                                  ;*	legal functions, followed by that number of words. Each		*
 10826                                  ;*	word represents an offset of a routine in Bios_Code which	*
 10827                                  ;*	handles the function. The functions are terminated with		*
 10828                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 10829                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 10830                                  ;*	returned as abnormal completion status. Notice that ds		*
 10831                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 10832                                  ;*									*
 10833                                  ;************************************************************************
 10834                                  
 10835                                  		; 20/09/2023
 10836                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 10837                                  		; 13/12/2022
 10838 000000E3 00                      		db 0
 10839                                  
 10840                                  		; 13/12/2022
 10841 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 10842                                  					; 2C7h:0E4h = 70h:2654h
 10843 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 10844                                  					; 00 init
 10845 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 10846 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 10847 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 10848                                  					; 03
 10849 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 10850                                  					; 04
 10851 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 10852                                  					; 05
 10853 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 10854 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 10855                                  					; 07
 10856 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 10857                                  					; 08
 10858 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 10859 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 10860                                  con_table_end:
 10861 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 10862                                  					; 2C7h:0FBh = 70h:266Bh
 10863 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 10864 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10865 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10866 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 10867 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 10868                                  					; 04 indicate zero chars read
 10869 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10870                                  					; 05 read non-destructive
 10871 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10872 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10873 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 10874 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 10875 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 10876 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 10877 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 10878 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 10879 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 10880 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 10881 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 10882 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 10883 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 10884 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 10885 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 10886 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 10887 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 10888 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 10889 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 10890 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 10891                                  prn_table_end:
 10892 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 10893                                  					; 2C7h:130h = 70h:26A0h
 10894 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 10895 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10896 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10897 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10898 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 10899 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 10900 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10901 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 10902 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 10903 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 10904 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 10905                                  aux_table_end:
 10906 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 10907                                  					; 2C7h:147h = 70h:26B7h
 10908 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 10909 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10910 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10911 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10912 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 10913 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10914 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10915 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10916 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 10917 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 10918                                  tim_table_end:
 10919                                  
 10920                                  ; ---------------------------------------------------------------------------
 10921                                  
 10922                                  ;************************************************************************
 10923                                  ;*									*
 10924                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 10925                                  ;*									*
 10926                                  ;************************************************************************
 10927                                  
 10928                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 10929                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 10930 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 10931                                  con_loop:				
 10932 0000015E E80500                  		call	chrin		; get char in al
 10933 00000161 AA                      		stosb			; store	char at	es:di
 10934 00000162 E2FA                    		loop	con_loop
 10935                                  con_exit:				
 10936 00000164 F8                      		clc
 10937 00000165 C3                      		retn
 10938                                  
 10939                                  ; =============== S U B	R O U T	I N E =======================================
 10940                                  
 10941                                  ;************************************************************************
 10942                                  ;*									*
 10943                                  ;*	chrin - input single char from keyboard into al			*
 10944                                  ;*									*
 10945                                  ;*	  we are going to issue extended keyboard function, if		*
 10946                                  ;*	  supported. the returning value of the extended keystroke	*
 10947                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 10948                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 10949                                  ;*	  this creates a conflict when the user entered real		*
 10950                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 10951                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 10952                                  ;*	  in the following manner:					*
 10953                                  ;*									*
 10954                                  ;*	      ah = 16h							*
 10955                                  ;*	      int 16h							*
 10956                                  ;*	      if al == 0, then extended code (in ah)			*
 10957                                  ;*	      else if al == 0E0h, then					*
 10958                                  ;*	      if ah <> 0, then extended code (in ah)			*
 10959                                  ;*		else greek_alpha character.				*
 10960                                  ;*									*
 10961                                  ;*	also, for compatibility reason, if an extended code is		*
 10962                                  ;*	  detected, then we are going to change the value in al		*
 10963                                  ;*	  from 0E0h to 00h.						*
 10964                                  ;*									*
 10965                                  ;************************************************************************
 10966                                  
 10967                                  		; 19/10/2022
 10968                                  chrin:		
 10969 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 10970 0000016A 30C0                    		xor	al, al
 10971 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 10972 00000170 08C0                    		or	al, al
 10973 00000172 752A                    		jnz	short keyret
 10974 00000174 CD16                    		int	16h		; KEYBOARD -
 10975 00000176 09C0                    		or	ax, ax
 10976 00000178 74EC                    		jz	short chrin
 10977 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 10978 0000017D 7504                    		jnz	short alt_ext_chk
 10979 0000017F B010                    		mov	al, 10h
 10980 00000181 EB1B                    		jmp	short keyret
 10981                                  ; ---------------------------------------------------------------------------
 10982                                  
 10983                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 10984                                  ;    if character read was 0E0h then
 10985                                  ;      if extended byte was zero (i.e. ah == 0) then
 10986                                  ;	 goto keyret
 10987                                  ;      else
 10988                                  ;	 set al to zero
 10989                                  ;	 goto alt_save
 10990                                  ;      endif
 10991                                  ;    endif
 10992                                  ;  endif
 10993                                  
 10994                                  alt_ext_chk:
 10995 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 10996 00000188 740C                    		jz	short not_ext
 10997 0000018A 3CE0                    		cmp	al, 0E0h
 10998 0000018C 7508                    		jnz	short not_ext
 10999 0000018E 08E4                    		or	ah, ah
 11000 00000190 740C                    		jz	short keyret
 11001 00000192 30C0                    		xor	al, al
 11002 00000194 EB04                    		jmp	short alt_save
 11003                                  ; ---------------------------------------------------------------------------
 11004                                  
 11005                                  not_ext:				
 11006 00000196 08C0                    		or	al, al		; special case?
 11007 00000198 7504                    		jnz	short keyret
 11008                                  alt_save:				
 11009 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 11010                                  keyret:					
 11011 0000019E C3                      		retn
 11012                                  
 11013                                  ; ---------------------------------------------------------------------------
 11014                                  
 11015                                  ;************************************************************************
 11016                                  ;*									*
 11017                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 11018                                  ;*									*
 11019                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 11020                                  ;*	in the status word of the request packet, and there is no	*
 11021                                  ;*	character in the input buffer, the driver issues a system	*
 11022                                  ;*	wait request to the rom. on return from the rom, it returns	*
 11023                                  ;*	a 'char-not-found' to the dos.					*
 11024                                  ;*									*
 11025                                  ;************************************************************************
 11026                                  
 11027                                  		; 19/10/2022
 11028                                  con_rdnd:				
 11029 0000019F A0[0C00]                		mov	al, [altah]
 11030 000001A2 08C0                    		or	al, al
 11031 000001A4 754C                    		jnz	short rdexit
 11032 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 11033 000001AA CD16                    		int	16h		; KEYBOARD -
 11034 000001AC 751D                    		jnz	short gotchr
 11035 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 11036 000001B3 7412                    		jz	short z_bus_exit
 11037 000001B5 C41E[1200]              		les	bx, [ptrsav]
 11038                                  		; 12/12/2022
 11039 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 11040                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 11041 000001BE 7407                    		jz	short z_bus_exit
 11042 000001C0 B80041                  		mov	ax, 4100h
 11043 000001C3 30DB                    		xor	bl, bl
 11044 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 11045                                  					; AL = condition type, BH = condition compare or mask value
 11046                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 11047                                  					; DX = I/O port	address	if AL bit 4 set
 11048                                  z_bus_exit:				
 11049 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 11050 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 11051 000001CA C3                      		retn
 11052                                  ; ---------------------------------------------------------------------------
 11053                                  
 11054                                  gotchr:					
 11055 000001CB 09C0                    		or	ax, ax
 11056 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 11057 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 11058 000001D3 CD16                    		int	16h		; KEYBOARD -
 11059 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 11060                                  ; ---------------------------------------------------------------------------
 11061                                  
 11062                                  notbrk:					
 11063 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 11064 000001DA 7504                    		jnz	short rd_ext_chk
 11065 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 11066 000001DE EB12                    		jmp	short rdexit
 11067                                  ; ---------------------------------------------------------------------------
 11068                                  
 11069                                  rd_ext_chk:				
 11070 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 11071 000001E5 740B                    		jz	short rdexit
 11072 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 11073 000001E9 7507                    		jnz	short rdexit
 11074 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 11075 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 11076 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 11077                                  					; change it for	compatibility
 11078                                  rdexit:					
 11079 000001F2 C41E[1200]              		les	bx, [ptrsav]
 11080 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 11081                                  					; return keyboard character here
 11082                                  bc_exvec:				
 11083 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 11084                                  					; indicate normal termination
 11085 000001FB C3                      		retn
 11086                                  ; ---------------------------------------------------------------------------
 11087                                  
 11088                                  ;************************************************************************
 11089                                  ;*									*
 11090                                  ;*	con_write - console write routine				*
 11091                                  ;*									*
 11092                                  ;*	entry:	es:di -> buffer						*
 11093                                  ;*		cx    =  count						*
 11094                                  ;*									*
 11095                                  ;************************************************************************
 11096                                  
 11097                                  con_writ:
 11098                                  		;jcxz	short bc_exvec
 11099 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 11100                                  		; 12/12/2022
 11101                                  		;jcxz	cc_ret
 11102                                  con_lp:					
 11103 000001FE 268A05                  		mov	al, [es:di]
 11104 00000201 47                      		inc	di
 11105 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 11106                                  					; AL = character to display
 11107 00000204 E2F8                    		loop	con_lp
 11108                                  cc_ret:					
 11109 00000206 F8                      		clc
 11110 00000207 C3                      		retn
 11111                                  
 11112                                  ; =============== S U B	R O U T	I N E =======================================
 11113                                  
 11114                                  ;************************************************************************
 11115                                  ;*									*
 11116                                  ;*	con_flush - flush out keyboard queue				*
 11117                                  ;*									*
 11118                                  ;************************************************************************
 11119                                  
 11120                                  con_flush:
 11121 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 11122                                  flloop:					; while	(charavail()) charread();	
 11123 0000020D B401                    		mov	ah, 1
 11124 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 11125                                  					; Return: ZF clear if character	in buffer
 11126                                  					; AH = scan code, AL = character
 11127                                  					; ZF set if no character in buffer
 11128 00000211 74F3                    		jz	short cc_ret
 11129 00000213 30E4                    		xor	ah, ah
 11130 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 11131                                  					; Return: AH = scan code, AL = character
 11132 00000217 EBF4                    		jmp	short flloop
 11133                                  
 11134                                  ; ---------------------------------------------------------------------------
 11135                                  
 11136                                  ; 15/10/2022
 11137                                  
 11138                                  ;************************************************************************
 11139                                  ;*									*
 11140                                  ;*	some equates for rom bios printer i/o				*
 11141                                  ;*									*
 11142                                  ;************************************************************************
 11143                                  
 11144                                  ; ibm rom status bits (i don't trust them, neither should you)
 11145                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 11146                                  ; whole slew of bits, only one of which is correct.
 11147                                  
 11148                                  ;notbusystatus	equ 10000000b		; not busy
 11149                                  ;nopaperstatus	equ 00100000b		; no more paper
 11150                                  ;prnselected	equ 00010000b		; printer selected
 11151                                  ;ioerrstatus	equ 00001000b		; some kinda error
 11152                                  ;timeoutstatus	equ 00000001b		; time out.
 11153                                  ;
 11154                                  ;noprinter	equ 00110000b		; no printer attached
 11155                                  
 11156                                  ; 18/03/2019 - Retro DOS v4.0
 11157                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 11158                                  
 11159                                  ; ---------------------------------------------------------------------------
 11160                                  
 11161                                  ;************************************************************************
 11162                                  ;*									*
 11163                                  ;*	prn_input - return with no error but zero chars read		*
 11164                                  ;*									*
 11165                                  ;*	enter with cx = number of characters requested			*
 11166                                  ;*									*
 11167                                  ;************************************************************************
 11168                                  
 11169                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 11170 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 11171                                  					; (sub reqpkt.count,cx)
 11172                                  		; 12/12/2022
 11173                                  prn_done:
 11174 0000021C F8                      		clc			; but return with carry	reset for no error
 11175 0000021D C3                      		retn
 11176                                  ; ---------------------------------------------------------------------------
 11177                                  
 11178                                  ;************************************************************************
 11179                                  ;*									*
 11180                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 11181                                  ;*									*
 11182                                  ;*	auxnum has printer number					*
 11183                                  ;*									*
 11184                                  ;************************************************************************
 11185                                  
 11186                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 11187                                  		;jcxz	short prn_done	; no chars to output
 11188 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 11189                                  prn_loop:				
 11190 00000220 BB0200                  		mov	bx, 2		; retry	count
 11191                                  prn_out:				
 11192 00000223 E83600                  		call	prnstat		; get status
 11193 00000226 751D                    		jnz	short TestPrnError
 11194 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 11195 0000022B 30E4                    		xor	ah, ah
 11196 0000022D E82E00                  		call	prnop		; print	to printer
 11197 00000230 7419                    		jz	short prn_con	; no error - continue
 11198 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 11199 00000235 7509                    		jnz	short _prnwf
 11200 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 11201 00000239 C606[0C00]00            		mov	byte [altah], 0
 11202 0000023E EB08                    		jmp	short pmessg
 11203                                  ; ---------------------------------------------------------------------------
 11204                                  
 11205                                  _prnwf:					
 11206 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 11207 00000243 7406                    		jz	short prn_con
 11208                                  TestPrnError:				
 11209 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 11210 00000246 75DB                    		jnz	short prn_out
 11211                                  pmessg:					
 11212 00000248 E98CFE                  		jmp	bc_err_cnt
 11213                                  ; ---------------------------------------------------------------------------
 11214                                  
 11215                                  prn_con:				
 11216 0000024B 47                      		inc	di		; point	to next	char and continue
 11217 0000024C E2D2                    		loop	prn_loop
 11218                                  ;prn_done:				
 11219                                  		; 12/12/2022
 11220                                  prn_done2:
 11221                                  		;clc
 11222                                  		; cf=0
 11223 0000024E C3                      		retn
 11224                                  ; ---------------------------------------------------------------------------
 11225                                  
 11226                                  ;************************************************************************
 11227                                  ;*									*
 11228                                  ;*	prn_stat - device driver entry to return printer status		*
 11229                                  ;*									*
 11230                                  ;************************************************************************
 11231                                  
 11232                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 11233 0000024F E80A00                  		call	prnstat		; device in dx
 11234 00000252 75F4                    		jnz	short pmessg
 11235 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 11236                                  		;jnz	short prn_done
 11237                                  		; 12/12/2022
 11238 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 11239 00000259 E96BFF                  		jmp	z_bus_exit
 11240                                  ; ---------------------------------------------------------------------------
 11241                                  
 11242                                  ;************************************************************************
 11243                                  ;*									*
 11244                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 11245                                  ;*		 printer status. Return meaningful error code		*
 11246                                  ;*									*
 11247                                  ;************************************************************************
 11248                                  
 11249                                  prnstat:				
 11250 0000025C B402                    		mov	ah, 2		; set command for get status
 11251                                  					; PRINTER - GET	STATUS
 11252                                  					; DX = printer port (0-3)
 11253                                  					; Return: AH = status
 11254                                  
 11255                                  ; =============== S U B	R O U T	I N E =======================================
 11256                                  
 11257                                  ;************************************************************************
 11258                                  ;*									*
 11259                                  ;*	prnop - call ROM BIOS printer function in ah			*
 11260                                  ;*		return zero true if no error				*
 11261                                  ;*		return zero false if error, al = error code		*
 11262                                  ;*									*
 11263                                  ;************************************************************************
 11264                                  
 11265                                  prnop:
 11266                                  		; 20/12/2023 - Retro DOS v5.0
 11267                                  		; PCDOS 7.1 IBMBIO.COM
 11268                                  		
 11269                                  		;mov	dx, [auxnum]	; get printer number
 11270                                  		;int	17h
 11271                                  
 11272 0000025E 1E                      		push	ds
 11273 0000025F FF36[2100]              		push	word [auxnum]
 11274 00000263 31D2                    		xor	dx, dx ; 0
 11275 00000265 8EDA                    		mov	ds, dx
 11276 00000267 5A                      		pop	dx
 11277 00000268 9C                      		pushf			; simulate int 17h
 11278 00000269 FA                      		cli
 11279                                  		;call	dword ptr ds:5ghghCh
 11280 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 11281 0000026E 1F                      		pop	ds
 11282                                  
 11283                                  	; This check was added to see if this is a case of no
 11284                                  	; printer being installed. This tests checks to be sure
 11285                                  	; the error is noprinter (30h)
 11286                                  
 11287 0000026F 50                      		push	ax
 11288 00000270 80E430                  		and	ah, 30h
 11289 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 11290 00000276 58                      		pop	ax
 11291 00000277 7506                    		jnz	short NextTest
 11292 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 11293 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 11294                                  
 11295                                  ; examine the status bits to see if an error occurred. unfortunately, several
 11296                                  ; of the bits are set so we have to pick and choose. we must be extremely
 11297                                  ; careful about breaking basic.
 11298                                  
 11299                                  NextTest:				
 11300 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 11301                                  					; i/o error?
 11302 00000282 740A                    		jz	short checknotready ; no, try not ready
 11303                                  
 11304                                  ; at this point, we know we have an error. the converse is not true
 11305                                  
 11306 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 11307                                  					; first, assume	out of paper
 11308 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 11309 00000289 7502                    		jnz	short ret1	; yes, error is	set
 11310 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 11311                                  ret1:					
 11312 0000028D C3                      		retn
 11313                                  ; ---------------------------------------------------------------------------
 11314                                  
 11315                                  checknotready:				
 11316 0000028E B002                    		mov	al, 2		; assume not-ready
 11317 00000290 F6C401                  		test	ah, 1
 11318 00000293 C3                      		retn
 11319                                  
 11320                                  ; ---------------------------------------------------------------------------
 11321                                  
 11322                                  ;************************************************************************
 11323                                  ;*									*
 11324                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 11325                                  ;*		     this entry point should never block waiting for	*
 11326                                  ;*		     device to come ready.				*
 11327                                  ;*									*
 11328                                  ;*	inputs:	cx = count, es:di -> buffer				*
 11329                                  ;*	outputs: set the number of bytes transferred in the		*
 11330                                  ;*		 device driver request packet				*
 11331                                  ;*									*
 11332                                  ;************************************************************************
 11333                                  
 11334                                  		; 19/10/2022
 11335                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 11336 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 11337                                  prn_tilbloop:				
 11338 00000296 51                      		push	cx
 11339 00000297 53                      		push	bx
 11340 00000298 30FF                    		xor	bh, bh
 11341 0000029A 8A1E[8004]              		mov	bl, [printdev]
 11342 0000029E D1E3                    		shl	bx, 1
 11343                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 11344 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11345 000002A4 5B                      		pop	bx
 11346                                  prn_getstat:				
 11347 000002A5 E8B4FF                  		call	prnstat		; get status
 11348 000002A8 7514                    		jnz	short prn_bperr	; error
 11349 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 11350 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 11351 000002AF 59                      		pop	cx		; get original count
 11352 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 11353 000002B2 26                      		es
 11354 000002B3 AC                      		lodsb
 11355                                  		;lods	byte ptr es:[si] ; es
 11356                                  					; lodsb
 11357 000002B4 30E4                    		xor	ah, ah
 11358 000002B6 E8A5FF                  		call	prnop
 11359 000002B9 7504                    		jnz	short prn_berr	; error
 11360 000002BB E2D9                    		loop	prn_tilbloop
 11361                                  		; 12/12/2022
 11362                                  		; cf=0 (prnop)
 11363                                  		;clc			; normal no-error return
 11364 000002BD C3                      		retn			;   from device driver
 11365                                  
 11366                                  ; ---------------------------------------------------------------------------
 11367                                  
 11368                                  prn_bperr:				
 11369 000002BE 59                      		pop	cx		; restore transfer count from stack
 11370                                  prn_berr:				
 11371 000002BF E915FE                  		jmp	bc_err_cnt
 11372                                  ; ---------------------------------------------------------------------------
 11373                                  
 11374                                  ; 15/10/2022
 11375                                  
 11376                                  ;************************************************************************
 11377                                  ;*									*
 11378                                  ;*	prn_genioctl - get/set printer retry count			*
 11379                                  ;*									*
 11380                                  ;************************************************************************
 11381                                  
 11382                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 11383                                  ; 11/01/2019
 11384                                  
 11385                                  ;********************************;*
 11386                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 11387                                  ;********************************;*
 11388                                  
 11389                                  ;;RAWIO SUB-FUNCTIONS
 11390                                  ;;get_retry_count equ 65h
 11391                                  ;;set_retry_count equ 45h
 11392                                  
 11393                                  ;;struc A_RETRYCOUNT
 11394                                  ;;.rc_count: resw 1
 11395                                  ;;endstruc
 11396                                  
 11397                                  ;ioc_pc equ 5
 11398                                  
 11399                                  ; ---------------------------------------------------------------------------
 11400                                  
 11401                                  		; 19/10/2022
 11402                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 11403 000002C2 C43E[1200]              		les	di, [ptrsav]
 11404 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11405                                  					; ioc_pc
 11406 000002CB 7403                    		jz	short prnfunc_ok
 11407                                  
 11408                                  prnfuncerr:				
 11409 000002CD E905FE                  		jmp	bc_cmderr
 11410                                  ; ---------------------------------------------------------------------------
 11411                                  
 11412                                  prnfunc_ok:				
 11413 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11414 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 11415 000002D8 30FF                    		xor	bh, bh
 11416                                  		;mov	bl, ds:printdev	; get index into retry counts
 11417 000002DA 8A1E[8004]              		mov	bl, [printdev]
 11418 000002DE D1E3                    		shl	bx, 1
 11419                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 11420 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11421 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 11422 000002E6 7407                    		jz	short prngetcount
 11423 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 11424 000002EA 75E1                    		jnz	short prnfuncerr
 11425 000002EC 268B0D                  		mov	cx, [es:di]
 11426                                  prngetcount:				
 11427                                  		;mov	ds:wait_count[bx], cx
 11428 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 11429 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 11430                                  					; return current retry count
 11431                                  		; 12/12/2022
 11432                                  		; cf=0
 11433                                  		;clc
 11434 000002F6 C3                      		retn
 11435                                  ; ---------------------------------------------------------------------------
 11436                                  
 11437                                  ;************************************************************************
 11438                                  ;*									*
 11439                                  ;*  prn_ioctl_query							*
 11440                                  ;*									*
 11441                                  ;*  Added for 5.00							*
 11442                                  ;************************************************************************
 11443                                  
 11444                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 11445 000002F7 C43E[1200]              		les	di, [ptrsav]
 11446 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11447                                  					; ioc_pc
 11448 00000300 750D                    		jnz	short prn_query_err
 11449 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11450 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 11451 00000308 7404                    		jz	short IOCtlSupported
 11452 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 11453 0000030C 7501                    		jnz	short prn_query_err
 11454                                  IOCtlSupported:	
 11455                                  		; 12/12/2022
 11456                                  		; cf=0		
 11457                                  		;clc
 11458 0000030E C3                      		retn
 11459                                  ; ---------------------------------------------------------------------------
 11460                                  
 11461                                  prn_query_err:
 11462                                  		; 12/12/2022				
 11463                                  		;stc
 11464 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 11465                                  ; ---------------------------------------------------------------------------
 11466                                  
 11467                                  ;************************************************************************
 11468                                  ;*									*
 11469                                  ;*	aux port driver code -- "aux" == "com1"				*
 11470                                  ;*									*
 11471                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 11472                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 11473                                  ;*									*
 11474                                  ;************************************************************************
 11475                                  
 11476                                  ;	values in ah, requesting function of int 14h in rom bios
 11477                                  
 11478                                  ;auxfunc_send	 equ	1	;transmit
 11479                                  ;auxfunc_receive equ	2	;read
 11480                                  ;auxfunc_status	 equ	3	;request status
 11481                                  
 11482                                  ;	error flags, reported by int 14h, reported in ah:
 11483                                  
 11484                                  ;flag_data_ready equ	01h	;data ready
 11485                                  ;flag_overrun	 equ	02h	;overrun error
 11486                                  ;flag_parity	 equ	04h	;parity error
 11487                                  ;flag_frame	 equ	08h	;framing error
 11488                                  ;flag_break	 equ	10h	;break detect
 11489                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 11490                                  ;flag_timeout	 equ	80h	;timeout
 11491                                  
 11492                                  ;	these flags reported in al:
 11493                                  
 11494                                  ;flag_cts	 equ	10h	;clear to send
 11495                                  ;flag_dsr	 equ	20h	;data set ready
 11496                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 11497                                  
 11498                                  ; ---------------------------------------------------------------------------
 11499                                  
 11500                                  ;************************************************************************
 11501                                  ;*									*
 11502                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 11503                                  ;*		   at es:di						*
 11504                                  ;*									*
 11505                                  ;************************************************************************
 11506                                  
 11507                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 11508                                  		;jcxz	short exvec2
 11509 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 11510 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 11511 00000317 30C0                    		xor	al, al
 11512 00000319 8607                    		xchg	al, [bx]
 11513 0000031B 08C0                    		or	al, al
 11514 0000031D 7503                    		jnz	short aux2
 11515                                  aux1:					
 11516 0000031F E80500                  		call	auxin		; get character	from port
 11517                                  					; won't return if error
 11518                                  aux2:					
 11519 00000322 AA                      		stosb
 11520 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 11521                                  exvec2:					
 11522 00000325 F8                      		clc			; all done, successful exit
 11523                                  auxin_retn:	; 18/12/2022
 11524 00000326 C3                      		retn
 11525                                  ; ---------------------------------------------------------------------------
 11526                                  
 11527                                  ;************************************************************************
 11528                                  ;*									*
 11529                                  ;*	auxin - call rom bios to read character from aux port		*
 11530                                  ;*		if error occurs, map the error and return one		*
 11531                                  ;*		level up to device driver exit code, setting		*
 11532                                  ;*		the number of bytes transferred appropriately		*
 11533                                  ;*									*
 11534                                  ;************************************************************************
 11535                                  
 11536                                  auxin:					
 11537 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 11538 00000329 E83A00                  		call	auxop
 11539 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 11540                                  		;jnz	short arbad	; skip if any error bits set
 11541                                  		;retn
 11542                                  		; 25/06/2023 (BugFix)
 11543 0000032F 74F5                    		jz	short auxin_retn
 11544                                  ; ---------------------------------------------------------------------------
 11545                                  
 11546                                  arbad:					
 11547 00000331 58                      		pop	ax		; remove return	address	(near call)
 11548                                  		;xor	al, al
 11549                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 11550                                  		; 11/08/2023
 11551 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 11552 00000334 E9A0FD                  		jmp	bc_err_cnt
 11553                                  
 11554                                  ; ---------------------------------------------------------------------------
 11555                                  
 11556                                  ;************************************************************************
 11557                                  ;*									*
 11558                                  ;*	aux_rdnd - non-destructive aux port read			*
 11559                                  ;*									*
 11560                                  ;************************************************************************
 11561                                  
 11562                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 11563 00000337 E85D00                  		call	getbx
 11564 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 11565 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 11566 0000033E 7511                    		jnz	short auxdrx	; then return character
 11567 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 11568 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 11569 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 11570 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 11571 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 11572 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 11573 0000034F 8807                    		mov	[bx], al
 11574                                  auxdrx:					
 11575 00000351 E99EFE                  		jmp	rdexit		; return busy status
 11576                                  ; ---------------------------------------------------------------------------
 11577                                  
 11578                                  auxbus:					
 11579 00000354 E970FE                  		jmp	z_bus_exit
 11580                                  ; ---------------------------------------------------------------------------
 11581                                  
 11582                                  ;************************************************************************
 11583                                  ;*									*
 11584                                  ;*	aux_wrst - return aux port write status				*
 11585                                  ;*									*
 11586                                  ;************************************************************************
 11587                                  
 11588                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 11589 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 11590 0000035A A820                    		test	al, 20h		; test data set	ready
 11591 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 11592 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 11593 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 11594                                  		; 12/12/2022
 11595                                  		; cf=0	; (test instruction resets cf)
 11596                                  		;clc
 11597 00000363 C3                      		retn
 11598                                  ; ---------------------------------------------------------------------------
 11599                                  
 11600                                  ;************************************************************************
 11601                                  ;*									*
 11602                                  ;*	auxstat - call rom bios to determine aux port status		*
 11603                                  ;*									*
 11604                                  ;*	exit:	ax = status						*
 11605                                  ;*		dx = [auxnum]						*
 11606                                  ;*									*
 11607                                  ;************************************************************************
 11608                                  
 11609                                  auxstat:				
 11610 00000364 B403                    		mov	ah, 3		; auxfunc_status
 11611                                  
 11612                                  		; fall into auxop
 11613                                  
 11614                                  ; =============== S U B	R O U T	I N E =======================================
 11615                                  
 11616                                  ;************************************************************************
 11617                                  ;*									*
 11618                                  ;*	auxop - perform rom-biox aux port interrupt			*
 11619                                  ;*									*
 11620                                  ;*	entry:	ah = int 14h function number				*
 11621                                  ;*	exit:	ax = results						*
 11622                                  ;*		dx = [auxnum]						*
 11623                                  ;*									*
 11624                                  ;************************************************************************
 11625                                  
 11626                                  auxop:		; proc near
 11627                                  		; 20/12/2023 - Retro DOS v5.0
 11628                                  		;mov	dx, [auxnum]	; ah=function code
 11629                                  		;			; 0=init, 1=send, 2=receive, 3=status
 11630                                  		;			; get port number
 11631                                  		;
 11632                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 11633                                  		;			; DX = port number (0-3)
 11634                                  		;			; Return: AX = port status code
 11635                                  		; (PCDOS 7.1 IBMBIO.COM)
 11636 00000366 1E                      		push	ds
 11637 00000367 FF36[2100]              		push	word [auxnum]
 11638 0000036B 31D2                    		xor	dx, dx ; 0
 11639 0000036D 8EDA                    		mov	ds, dx
 11640 0000036F 5A                      		pop	dx
 11641 00000370 9C                      		pushf			; simulate INT 14h
 11642 00000371 FA                      		cli
 11643                                  		;call	dword ptr ds:50h
 11644 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 11645 00000376 1F                      		pop	ds
 11646 00000377 C3                      		retn
 11647                                  
 11648                                  ; ---------------------------------------------------------------------------
 11649                                  
 11650                                  ;************************************************************************
 11651                                  ;*									*
 11652                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 11653                                  ;*		   auxbuf [auxnum] to zero				*
 11654                                  ;*									*
 11655                                  ;*	cas - shouldn't this code call the rom bios input function	*
 11656                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 11657                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 11658                                  ;*	      which is providing interrupt-buffering of aux port?	*
 11659                                  ;*									*
 11660                                  ;************************************************************************
 11661                                  
 11662                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 11663 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 11664 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 11665                                  					; zero out buffer
 11666                                  		;clc			; all done, successful return
 11667                                  		; 12/12/2022
 11668                                  		; cf=0 ('add' instruction in 'getbx')
 11669 0000037E C3                      		retn
 11670                                  ; ---------------------------------------------------------------------------
 11671                                  
 11672                                  ;************************************************************************
 11673                                  ;*									*
 11674                                  ;*	aux_writ - write to aux device					*
 11675                                  ;*									*
 11676                                  ;************************************************************************
 11677                                  
 11678                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 11679                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 11680 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 11681                                  aux_loop:				
 11682 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 11683                                  					; move di pointer to next character
 11684 00000384 47                      		inc	di
 11685 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 11686 00000387 E8DCFF                  		call	auxop		; send character over aux port
 11687 0000038A F6C480                  		test	ah, 80h		; check	for error
 11688 0000038D 7405                    		jz	short awok	; then no error
 11689 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 11690 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 11691                                  ; ---------------------------------------------------------------------------
 11692                                  
 11693                                  awok:					
 11694 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 11695                                  					; still	more character to print
 11696                                  		;clc			; all done, successful return
 11697                                  		; 12/12/2022
 11698                                  		; cf=0 (test instruction above)	
 11699 00000396 C3                      		retn
 11700                                  
 11701                                  ; =============== S U B	R O U T	I N E =======================================
 11702                                  
 11703                                  ;************************************************************************
 11704                                  ;*									*
 11705                                  ;*	getbx - return bx -> single byte input buffer for		*
 11706                                  ;*		selected aux port ([auxnum])				*
 11707                                  ;*									*
 11708                                  ;************************************************************************
 11709                                  
 11710                                  getbx:	
 11711 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 11712                                  					; for selected aux port	([auxnum])
 11713                                  		;add	bx, offset auxbuf
 11714 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 11715                                  		; 12/12/2022
 11716                                  		; cf=0 (if [auxnum] is valid number) 
 11717 0000039F C3                      		retn
 11718                                  
 11719                                  ; ---------------------------------------------------------------------------
 11720                                  
 11721                                  ; 15/10/2022
 11722                                  
 11723                                  ;----------------------------------------------------------------
 11724                                  ;								:
 11725                                  ;		    clock device driver 			:
 11726                                  ;								:
 11727                                  ;								:
 11728                                  ;   this file contains the clock device driver. 		:
 11729                                  ;								:
 11730                                  ;   the routines in this files are:				:
 11731                                  ;								:
 11732                                  ;	routine 		function			:
 11733                                  ;	------- 		--------			:
 11734                                  ;	tim_writ		set the current time		:
 11735                                  ;	tim_read		read the current time		:
 11736                                  ;	time_to_ticks		convert time to corresponding	:
 11737                                  ;				  number of clock ticks 	:
 11738                                  ;								:
 11739                                  ; the clock ticks at the rate of:				:
 11740                                  ;								:
 11741                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 11742                                  ; see each routine for information on the use.			:
 11743                                  ;								:
 11744                                  ;----------------------------------------------------------------
 11745                                  
 11746                                  ; convert time to ticks
 11747                                  ; input : time in cx and dx
 11748                                  ; ticks returned in cx:dx
 11749                                  
 11750                                  ;19/07/2019
 11751                                  ;09/03/2019
 11752                                  
 11753                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 11754                                  
 11755                                  ; first convert from hour,min,sec,hund. to
 11756                                  ; total number of 100th of seconds
 11757                                  
 11758 000003A0 B03C                    		mov	al, 60
 11759 000003A2 F6E5                    		mul	ch		; hours	to minutes
 11760 000003A4 B500                    		mov	ch, 0
 11761 000003A6 01C8                    		add	ax, cx		; total	minutes
 11762 000003A8 B97017                  		mov	cx, 6000	; 60*100
 11763 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 11764 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 11765 000003AF 89C1                    		mov	cx, ax
 11766 000003B1 B064                    		mov	al, 100
 11767 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 11768 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 11769 000003B7 83D200                  		adc	dx, 0		; ripple carry
 11770 000003BA B700                    		mov	bh, 0
 11771 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 11772 000003BE 83D200                  		adc	dx, 0
 11773                                  
 11774                                  	; dx:cx is time in 1/100 sec
 11775                                  
 11776 000003C1 92                      		xchg	ax, dx
 11777 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 11778 000003C3 BB0BE9                  		mov	bx, 59659
 11779 000003C6 F7E3                    		mul	bx		; multiply low half
 11780 000003C8 87CA                    		xchg	dx, cx
 11781 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 11782 000003CB F7E3                    		mul	bx		; multiply high	half
 11783 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 11784 000003CF 83D200                  		adc	dx, 0
 11785 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 11786 000003D3 BB0500                  		mov	bx, 5
 11787 000003D6 F6F3                    		div	bl		; divide high half by 5
 11788 000003D8 88C1                    		mov	cl, al
 11789 000003DA B500                    		mov	ch, 0
 11790 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 11791 000003DE 98                      		cbw
 11792 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 11793 000003E0 F7F3                    		div	bx		; divide low half by 5
 11794 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 11795 000003E4 CB                      		retf			; far return
 11796                                  
 11797                                  ; ---------------------------------------------------------------------------
 11798                                  
 11799                                  ; 17/10/2022
 11800                                  ; 15/10/2022
 11801                                  
 11802                                  ;--------------------------------------------------------------------
 11803                                  ;
 11804                                  ; tim_writ sets the current time
 11805                                  ;
 11806                                  ; on entry es:[di] has the current time:
 11807                                  ;
 11808                                  ;	number of days since 1-1-80	(word)
 11809                                  ;	minutes (0-59)			(byte)
 11810                                  ;	hours (0-23)			(byte)
 11811                                  ;	hundredths of seconds (0-99)	(byte)
 11812                                  ;	seconds (0-59)			(byte)
 11813                                  ;
 11814                                  ; each number has been checked for the correct range.
 11815                                  ;
 11816                                  ;	NOTE: Any changes in this routine probably require corresponding
 11817                                  ;	changes in the version that is built with the power manager driver.
 11818                                  ;	See ptime.asm.
 11819                                  ;
 11820                                  ;--------------------------------------------------------------------
 11821                                  
 11822                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11823                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 11824                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 11825 000003E5 268B05                  		mov	ax, [es:di]
 11826 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 11827                                  					; end to avoid tick windows.
 11828 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11829                                  		;cmp	ds:havecmosclock, 0
 11830 000003EE 7423                    		jz	short no_cmos_1
 11831 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 11832                                  					; get binary hours
 11833                                  					; convert to bcd
 11834                                  		;call	far [bintobcd]
 11835                                  		;;call	ds:bintobcd	; call far [bintobcd]
 11836                                  		; 08/08/2023
 11837 000003F4 E8E800                  		call	bintobcd
 11838 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 11839 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 11840                                  		;call	far [bintobcd]
 11841                                  		;;call	ds:bintobcd	; convert to bcd
 11842 000003FD E8DF00                  		call	bintobcd
 11843 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 11844 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 11845                                  		;call	far [bintobcd]
 11846                                  		;;call	ds:bintobcd
 11847 00000406 E8D600                  		call	bintobcd
 11848                                  
 11849 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 11850 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 11851 0000040D FA                      		cli
 11852 0000040E B403                    		mov	ah, 3
 11853 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11854                                  					; CH = hours in	BCD, CL	= minutes in BCD
 11855                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 11856                                  					; Return: CMOS clock set
 11857 00000412 FB                      		sti
 11858                                  no_cmos_1:				
 11859 00000413 268B4D02                		mov	cx, [es:di+2]
 11860 00000417 268B5504                		mov	dx, [es:di+4]
 11861                                  		; 17/10/2022
 11862 0000041B FF1E[0606]              		call	far [ttticks]
 11863                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 11864                                  					; convert time to ticks
 11865                                  					; cx:dx	now has	time in	ticks
 11866 0000041F FA                      		cli			; turn off timer
 11867 00000420 B401                    		mov	ah, 1
 11868 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 11869                                  					; CX:DX	= clock	count
 11870                                  					; Return: time of day set
 11871                                  		;pop	ds:daycnt
 11872 00000424 8F06[8904]              		pop	word [daycnt]
 11873 00000428 FB                      		sti
 11874                                  		;cmp	ds:havecmosclock, 0
 11875 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11876 0000042E 7409                    		jz	short no_cmos_2
 11877                                  
 11878                                  		; 08/08/2023
 11879                                  		;call	far [daycnttoday]
 11880                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 11881                                  					; convert to bcd format
 11882 00000430 E80700                  		call	daycnttoday
 11883                                  
 11884 00000433 FA                      		cli
 11885 00000434 B405                    		mov	ah, 5
 11886 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11887                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 11888                                  					; CH = century (19h or 20h)
 11889                                  					; Return: CMOS clock set
 11890 00000438 FB                      		sti
 11891                                  no_cmos_2:
 11892                                  		; 12/12/2022
 11893                                  		; cf=0
 11894                                  		;clc
 11895 00000439 C3                      		retn
 11896                                  
 11897                                  ; ---------------------------------------------------------------------------
 11898                                  
 11899                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11900                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 11901                                  %if 1 
 11902                                  
 11903                                  ; CMOS Clock setting support routines used by MSCLOCK.
 11904                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 11905                                  
 11906                                  daycnttoday:	; proc near
 11907                                  
 11908                                  ; entry: [daycnt] = number of days since 1-1-80
 11909                                  ;
 11910                                  ; return: ch - century in bcd
 11911                                  ;	  cl - year in bcd
 11912                                  ;	  dh - month in bcd
 11913                                  ;	  dl - day in bcd
 11914                                  
 11915                                  		; 20/12/2023 - Retro DOS v5.0
 11916                                  
 11917                                  		; 08/08/2023 (ds:) (near proc)
 11918                                  		; 16/10/2022 (cs:) (far proc)		
 11919 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 11920 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 11921                                  					; # days from 1-1-1980 to 1-1-2000
 11922 00000444 7308                    		jnb	short century20
 11923                                  		;mov	byte [base_century], 19
 11924                                  		;mov	byte [base_year], 80
 11925                                  		; 08/08/2023
 11926 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 11927 0000044C EB0C                    		jmp	short years
 11928                                  ; ----------------------------------------------------------------------------
 11929                                  		
 11930                                  century20:				
 11931                                  		;mov	byte [base_century], 20
 11932                                  		;mov	byte [base_year], 0
 11933                                  		; 08/08/2023
 11934 0000044E C706[8D04]1400          		mov	word [base_century], 20
 11935 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 11936                                  					; adjust daycnt
 11937                                  years:					
 11938 0000045A 31D2                    		xor	dx, dx
 11939 0000045C A1[8904]                		mov	ax, [daycnt]
 11940 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 11941                                  					; # of days in a Leap year block
 11942 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 11943 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 11944 00000468 B304                    		mov	bl, 4
 11945 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 11946 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 11947 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 11948                                  		; 08/08/2023
 11949 00000474 BB6E01                  		mov	bx, 366
 11950 00000477 B90300                  		mov	cx, 3
 11951                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 11952 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 11953 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 11954 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 11955                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 11956 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 11957                                  		;mov	cx, 3		; And next three years are normal
 11958                                  		; 08/08/2023
 11959 00000488 4B                      		dec	bx ; 365
 11960                                  regularyear:	; 20/12/2023
 11961                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 11962 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 11963 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 11964 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 11965                                  		;sub	word [daycnt], 365 ; }
 11966 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 11967 00000497 E2F0                    		loop	regularyear	; }
 11968                                  					;
 11969                                  					; should never fall through loop
 11970                                  leapyear:	
 11971 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 11972                                  		;mov	byte [month_tab+1], 29 ; leap year.
 11973                                  					; change month table.
 11974                                  yeardone:				
 11975 0000049E 31DB                    		xor	bx, bx
 11976 000004A0 31D2                    		xor	dx, dx
 11977 000004A2 A1[8904]                		mov	ax, [daycnt]
 11978                                  		;mov	si, offset month_tab
 11979 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 11980                                  		;mov	cx, 12
 11981                                  		; 08/08/2023
 11982 000004A8 B10C                    		mov	cl, 12
 11983                                  months:					
 11984 000004AA FEC3                    		inc	bl
 11985                                  		; 08/08/2023
 11986 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 11987 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 11988                                  					; dh=0
 11989 000004B0 7605                    		jbe	short month_done
 11990 000004B2 46                      		inc	si		; next month
 11991 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 11992 000004B5 E2F3                    		loop	months		;
 11993                                  					; should never fall through loop
 11994                                  month_done:	
 11995 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 11996                                  		;mov	byte [month_tab+1], 28
 11997                                  					; restore month table value
 11998 000004BC 88DA                    		mov	dl, bl
 11999 000004BE 8A36[8E04]              		mov	dh, [base_year]
 12000 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 12001 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 12002                                  					; dl = bcd day,	al = month
 12003 000004C9 86C2                    		xchg	dl, al
 12004 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 12005 000004CE 86C6                    		xchg	dh, al
 12006 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 12007 000004D3 86C1                    		xchg	cl, al
 12008 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 12009 000004D8 88C5                    		mov	ch, al
 12010 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 12011 000004DE C3                      		retn
 12012                                  
 12013                                  ;----------------------------------------------------------------------------
 12014                                  
 12015                                  bintobcd:	; proc near		; real time clock support
 12016                                  
 12017                                  ;convert a binary input in al (less than 63h or 99 decimal)
 12018                                  ;into a bcd value in al. ah destroyed.	
 12019                                  		
 12020 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 12021 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 12022                                  					; AL = (AH*10H)+AL, AH = 0
 12023 000004E3 C3                      		retn
 12024                                  %endif
 12025                                  
 12026                                  ;----------------------------------------------------------------------------
 12027                                  
 12028                                  ; 15/10/2022
 12029                                  
 12030                                  ;----------------------------------------------------------------------------
 12031                                  ; gettime reads date and time
 12032                                  ; and returns the following information:
 12033                                  ;
 12034                                  ;	es:[di]  =count of days since 1-1-80
 12035                                  ;	es:[di+2]=hours
 12036                                  ;	es:[di+3]=minutes
 12037                                  ;	es:[di+4]=seconds
 12038                                  ;	es:[di+5]=hundredths of seconds
 12039                                  ;
 12040                                  ;	NOTE: Any changes in this routine probably require corresponding
 12041                                  ;	changes in the version that is built with the power manager driver.
 12042                                  ;	See ptime.asm.
 12043                                  ;----------------------------------------------------------------------------
 12044                                  
 12045                                  tim_read:				; 2C7h:435h = 70h:29A5h
 12046 000004E4 E84A00                  		call	GetTickCnt
 12047 000004E7 8B36[8904]              		mov	si, [daycnt]
 12048                                  
 12049                                  ; we now need to convert the time in tick to the time in 100th of
 12050                                  ; seconds. the relation between tick and seconds is:
 12051                                  ;
 12052                                  ;		 65,536 seconds
 12053                                  ;	       ----------------
 12054                                  ;		1,193,180 tick
 12055                                  ;
 12056                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 12057                                  ;
 12058                                  ;	ticks from clock  * 65,536 * 100
 12059                                  ;      --------------------------------- = time in 100th of seconds
 12060                                  ;		1,193,180
 12061                                  ;
 12062                                  ; fortunately this formula simplifies to:
 12063                                  ;
 12064                                  ;	ticks from clock * 5 * 65,536
 12065                                  ;      --------------------------------- = time in 100th of seconds
 12066                                  ;		59,659
 12067                                  ;
 12068                                  ; the calculation is done by first multipling tick by 5. next we divide by
 12069                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 12070                                  ; my 16 bits to the left.
 12071                                  ;
 12072                                  ; start with ticks in cx:dx
 12073                                  ; multiply by 5
 12074                                  
 12075 000004EB 89C8                    		mov	ax, cx
 12076 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 12077                                  					; multiply by 5
 12078 000004EF D1E2                    		shl	dx, 1
 12079 000004F1 D1D1                    		rcl	cx, 1		; times	2
 12080 000004F3 D1E2                    		shl	dx, 1
 12081 000004F5 D1D1                    		rcl	cx, 1		; times	4
 12082 000004F7 01DA                    		add	dx, bx
 12083 000004F9 11C8                    		adc	ax, cx		; times	5
 12084 000004FB 92                      		xchg	ax, dx
 12085                                  
 12086                                  ; now have ticks * 5 in	dx:ax
 12087                                  ; we now need to multiply by 65536 and divide by 59659 d.
 12088                                  
 12089 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 12090 000004FF F7F1                    		div	cx		; dx now has remainder
 12091                                  					; ax has high word of final quotient
 12092                                  
 12093                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12094                                  		;mov	bx, ax		; put high word	in safe	place
 12095 00000501 93                      		xchg	bx, ax
 12096 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 12097 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 12098                                  
 12099                                  ; rounding based on the	remainder may be added here
 12100                                  ; the result in	bx:ax is time in 1/100 second.
 12101                                  
 12102 00000506 89DA                    		mov	dx, bx		
 12103 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 12104                                  
 12105                                  ; division by 200 is necessary to ensure no overflow--max result
 12106                                  ; is number of seconds in a day/2 = 43200.
 12107                                  
 12108 0000050B F7F1                    		div	cx
 12109 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 12110 00000510 7203                    		jb	short noadj
 12111 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 12112                                  noadj:					
 12113 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 12114 00000516 88D3                    		mov	bl, dl		; save 1/100's
 12115                                  
 12116                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 12117                                  ; by two, shifting a one in if the remainder had exceeded 100.
 12118                                  
 12119 00000518 D1D0                    		rcl	ax, 1		
 12120 0000051A B200                    		mov	dl, 0
 12121 0000051C D1D2                    		rcl	dx, 1
 12122                                  		;mov	cx, 60		; divide out seconds
 12123                                  		; 20/12/2023
 12124 0000051E B13C                    		mov	cl, 60
 12125 00000520 F7F1                    		div	cx
 12126 00000522 88D7                    		mov	bh, dl		; save the seconds
 12127 00000524 F6F1                    		div	cl		; break	into hours and minutes
 12128 00000526 86E0                    		xchg	al, ah
 12129                                  
 12130                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 12131                                  
 12132                                  		; 08/08/2023
 12133                                  		;push	ax
 12134                                  		;mov	ax, si		; daycnt
 12135 00000528 96                      		xchg	ax, si
 12136 00000529 AB                      		stosw
 12137                                  		;pop	ax
 12138 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 12139 0000052B AB                      		stosw
 12140 0000052C 89D8                    		mov	ax, bx
 12141 0000052E AB                      		stosw
 12142 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 12143                                  					;   [es:di+2] = hours
 12144                                  					;   [es:di+3] = minutes
 12145                                  					;   [es:di+4] = seconds
 12146                                  					;   [es:di+5] = hundredths of seconds
 12147 00000530 C3                      		retn
 12148                                  
 12149                                  ; =============== S U B	R O U T	I N E =======================================
 12150                                  
 12151                                  ; 15/10/2022
 12152                                  
 12153                                  ;----------------------------------------------------------------------------
 12154                                  ;
 12155                                  ; procedure : GetTickCnt
 12156                                  ;
 12157                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 12158                                  ;		of rollover [except when power management driver is in use]. 
 12159                                  ;		Uses the following logic for updating Daycnt
 12160                                  ;
 12161                                  ;		if ( rollover ) {
 12162                                  ;			if ( t_switch )
 12163                                  ;				daycnt++ ;
 12164                                  ;			else
 12165                                  ;				daycnt += rollover ;
 12166                                  ;		}
 12167                                  ;
 12168                                  ; USES : AX
 12169                                  ;
 12170                                  ; RETURNS : CX:DX - tick count
 12171                                  ; MODIFIES : daycnt
 12172                                  ;
 12173                                  ;----------------------------------------------------------------------------
 12174                                  
 12175                                  		; 17/10/2022
 12176                                  GetTickCnt:
 12177 00000531 30E4                    		xor	ah, ah
 12178 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 12179                                  					; Return: CX:DX	= clock	count
 12180                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 12181                                  					; midnight
 12182                                  					; Otherwise, AL	> 0
 12183                                  		; 20/12/2023
 12184 00000535 30E4                    		xor	ah, ah
 12185 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 12186                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 12187 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 12188                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 12189                                  					; and not flag
 12190 0000053D 0106[8904]              		add	[daycnt], ax
 12191 00000541 C3                      		retn
 12192                                  ; ---------------------------------------------------------------------------
 12193                                  
 12194                                  inc_case:
 12195 00000542 08C0                    		or	al, al
 12196 00000544 7404                    		jz	short no_rollover
 12197 00000546 FF06[8904]              		inc	word [daycnt]
 12198                                  no_rollover:
 12199 0000054A C3                      		retn
 12200                                  
 12201                                  ; ---------------------------------------------------------------------------
 12202                                  ; ---------------------------------------------------------------------------
 12203                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12204                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 12205                                  
 12206                                  %if 1
 12207                                  
 12208 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 12209 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 12210 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 12211 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 12211 0000056C 2020               
 12212                                  
 12213                                  %endif
 12214                                  
 12215                                  ;----------------------------------------------------------------------------
 12216                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 12217                                  ;----------------------------------------------------------------------------
 12218                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12219                                  ; 09/03/2019 - Retro DOS v4.0
 12220                                  
 12221                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 12222                                  ; 26/05/2018 - Retro DOS v3.0
 12223                                  ; 23/03/2018 - Retro DOS v2.0
 12224                                  
 12225                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 12226                                  
 12227                                  ;struc BPB_TYPE
 12228                                  ;.SECSIZE:	resw 1
 12229                                  ;.SECALL:	resb 1
 12230                                  ;.RESNUM:	resw 1
 12231                                  ;.FATNUM:	resb 1
 12232                                  ;.DIRNUM:	resw 1
 12233                                  ;.SECNUM:	resw 1
 12234                                  ;.FATID:	resb 1
 12235                                  ;.FATSIZE:	resw 1
 12236                                  ;.SLIM:		resw 1
 12237                                  ;.HLIM:		resw 1
 12238                                  ;.HIDDEN:	resw 1
 12239                                  ;.size:
 12240                                  ;endstruc
 12241                                  
 12242                                  ;-----------------------------------------------------------------
 12243                                  ;	disk interface routines
 12244                                  ;-----------------------------------------------------------------
 12245                                  
 12246                                  ; device attribute bits:
 12247                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 12248                                  
 12249                                  ;MAXERR		equ	5
 12250                                  ;MAX_HD_FMT_ERR	equ	2
 12251                                  
 12252                                  ;LSTDRV	equ 504h
 12253                                  
 12254                                  ; some floppies do not have changeline. as a result, media-check would
 12255                                  ; normally return i-don't-know, the dos would continually reread the fat and
 12256                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 12257                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 12258                                  ; the time of the last successful disk operation and compare it with the current
 12259                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 12260                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 12261                                  ; since we cannot trust the timer to be always available, we record the number 
 12262                                  ; of media checks that have occurred when no apparent time has elapsed. while
 12263                                  ; this number is < a given threshold, we say no change. when it exceeds that
 12264                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 12265                                  ; the time of last successful access, if we see that time has passed too,
 12266                                  ; we reset the counter.
 12267                                  
 12268                                  accessmax	equ	5
 12269                                  
 12270                                  ; due to various bogosities, we need to continually adjust what the head
 12271                                  ; settle time is.  the following algorithm is used:
 12272                                  ;
 12273                                  ;   get the current head settle value.
 12274                                  ;   if it is 0, then
 12275                                  ;	set slow = 15
 12276                                  ;   else
 12277                                  ;	set slow = value
 12278                                  ;   ...
 12279                                  ;*********************************************
 12280                                  ;************ old algorithm ******************
 12281                                  ;*   if we are seeking and writing then
 12282                                  ;*	 use slow
 12283                                  ;*   else
 12284                                  ;*	 use fast
 12285                                  ;*********************************************
 12286                                  ;*********** ibm's requested logic ***********
 12287                                  ;   if we are seeking and writing and not on an at then
 12288                                  ;	use slow
 12289                                  ;   else
 12290                                  ;	use fast
 12291                                  ;   ...
 12292                                  ;   restore current head settle value
 12293                                  ;
 12294                                  ;
 12295                                  ;---------------------------------------
 12296                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 12297                                  					; it on after handling config.sys file as a
 12298                                  					; default value, if multrk_flag = multrk_off1.
 12299                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 12300                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 12301                                  
 12302                                  ; close data segment, open Bios_Code segment
 12303                                  
 12304                                  ; 15/10/2022
 12305                                  
 12306                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 12307                                  
 12308                                  ;-----------------------------------------------------------------
 12309                                  ;	command jump table
 12310                                  ;-----------------------------------------------------------------
 12311                                  
 12312 0000056E 00                      		db 0
 12313                                  
 12314                                  ; 11/12/2022
 12315                                  %if 0
 12316                                  
 12317                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 12318                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 12319                                  		dw 1742h		; dsk_init
 12320                                  		dw 4EBh			; media_chk
 12321                                  		dw 592h			; get_bpb
 12322                                  		dw 0D5h			; bc_cmderr
 12323                                  		dw 857h			; dsk_read
 12324                                  		dw 83Dh			; x_bus_exit
 12325                                  		dw 558h			; ret_carry_clear
 12326                                  		dw 558h			; ret_carry_clear
 12327                                  		dw 849h			; dsk_writ
 12328                                  		dw 841h			; dsk_writv
 12329                                  		dw 558h			; ret_carry_clear
 12330                                  		dw 558h			; ret_carry_clear
 12331                                  		dw 0D5h			; bc_cmderr
 12332                                  		dw 80Ah			; dsk_open
 12333                                  		dw 81Ah			; dsk_close
 12334                                  		dw 831h			; dsk_rem
 12335                                  		dw 558h			; ret_carry_clear
 12336                                  		dw 558h			; ret_carry_clear
 12337                                  		dw 558h			; ret_carry_clear
 12338                                  		dw 0C6Bh		; do_generic_ioctl
 12339                                  		dw 558h			; ret_carry_clear
 12340                                  		dw 558h			; ret_carry_clear
 12341                                  		dw 558h			; ret_carry_clear
 12342                                  		dw 1124h		; ioctl_getown
 12343                                  		dw 1142h		; ioctl_setown
 12344                                  		dw 129Ah		; ioctl_support_query
 12345                                  
 12346                                  ;dtbl_siz equ $-dsktbl
 12347                                  
 12348                                  %endif
 12349                                  
 12350                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12351                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 12352                                  
 12353                                  		; 21/12/2023 - Retro DOS v5.0
 12354                                  		; 11/12/2022
 12355 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 12356 00000570 [4A1A]                  		dw dsk_init
 12357 00000572 [B805]                  		dw media_chk
 12358 00000574 [5706]                  		dw get_bpb
 12359                                  		;dw bc_cmderr
 12360 00000576 [4A0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 12361 00000578 [7209]                  		dw dsk_read
 12362 0000057A [5809]                  		dw x_bus_exit
 12363 0000057C [2206]                  		dw ret_carry_clear
 12364 0000057E [2206]                  		dw ret_carry_clear
 12365 00000580 [6409]                  		dw dsk_writ
 12366 00000582 [5C09]                  		dw dsk_writv
 12367 00000584 [2206]                  		dw ret_carry_clear
 12368 00000586 [2206]                  		dw ret_carry_clear
 12369                                  		;dw bc_cmderr
 12370 00000588 [F70D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 12371 0000058A [2909]                  		dw dsk_open
 12372 0000058C [3809]                  		dw dsk_close
 12373 0000058E [4E09]                  		dw dsk_rem
 12374 00000590 [2206]                  		dw ret_carry_clear
 12375 00000592 [2206]                  		dw ret_carry_clear
 12376 00000594 [2206]                  		dw ret_carry_clear
 12377 00000596 [CC0E]                  		dw do_generic_ioctl
 12378 00000598 [2206]                  		dw ret_carry_clear
 12379 0000059A [2206]                  		dw ret_carry_clear
 12380 0000059C [2206]                  		dw ret_carry_clear
 12381 0000059E [A713]                  		dw ioctl_getown
 12382 000005A0 [C413]                  		dw ioctl_setown
 12383 000005A2 [1C15]                  		dw ioctl_support_query
 12384                                  
 12385                                  dtbl_siz equ $-dsktbl
 12386                                  
 12387                                  ; =============== S U B	R O U T	I N E =======================================
 12388                                  
 12389                                  ; ---------------------------------------------------------------------------
 12390                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 12391                                  ; the one that belongs to the drive specified. carry is set if none exists
 12392                                  ; for the drive. Pointer is returned in es:[di]
 12393                                  ;
 12394                                  ;  AL contains the logical drive number.
 12395                                  ; ---------------------------------------------------------------------------
 12396                                  
 12397                                  SetDrive:
 12398                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 12399 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 12400                                  X_Scan_Loop:
 12401 000005A8 26384505                		cmp	[es:di+5], al	
 12402 000005AC 7409                    		jz	short X_SetDrv
 12403 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 12404 000005B1 83FFFF                  		cmp	di, 0FFFFh
 12405 000005B4 75F2                    		jnz	short X_Scan_Loop
 12406 000005B6 F9                      		stc
 12407                                  X_SetDrv:
 12408 000005B7 C3                      		retn
 12409                                  
 12410                                  ; ---------------------------------------------------------------------------
 12411                                  
 12412                                  ; 15/10/2022
 12413                                  
 12414                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12415                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 12416                                  
 12417                                  ; ---------------------------------------------------------------------
 12418                                  ; if id is f9, have a 96tpi disk else
 12419                                  ; if bit 2 is 0 then media is not removable and could not have changed
 12420                                  ;  otherwise if within 2 secs of last disk operation media could not
 12421                                  ;    have changed, otherwise dont know if media has changed
 12422                                  ; ---------------------------------------------------------------------
 12423                                  
 12424                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 12425 000005B8 E8E9FF                  		call	SetDrive
 12426 000005BB BE0100                  		mov	si, 1
 12427                                  		; 21/12/2023
 12428 000005BE 26F6454001              		test	byte [es:di+40h], 1
 12429                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 12430                                  					; fchanged_by_format
 12431 000005C3 7415                    		jz	short WeAreNotFakingIt
 12432                                  		; 21/12/2023
 12433 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 12434                                  		; 12/12/2022
 12435                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 12436                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 12437                                  					; ~fchanged_by_format ;	reset flag
 12438 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12439                                  					; Ensure that we ask the rom if media has changed
 12440                                  		; 21/12/2023
 12441 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 12442                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12443                                  					; fnon_removable
 12444 000005D4 740B                    		jz	short wehaveafloppy
 12445                                  		;mov	si, 0FFFFh	; Indicate media changed
 12446                                  		; 11/08/2023
 12447 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 12448 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 12449                                  ; ---------------------------------------------------------------------------
 12450                                  
 12451                                  WeAreNotFakingIt:
 12452                                  		; 21/12/2023
 12453 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 12454                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 12455                                  		;test	byte [es:di+23h], 1
 12456 000005DF 7524                    		jnz	short Media_Done
 12457                                  wehaveafloppy:
 12458                                  		;xor	si, si ; 0	; Presume "I don't know"
 12459                                  		; 11/08/2023
 12460 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 12461                                  
 12462                                  		; If we have a floppy with changeline support, we ask the ROM
 12463                                  		; to determine if media has changed. We do not perform the
 12464                                  		; 2 second check for these drives.
 12465                                  
 12466 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 12467 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 12468 000005E9 E83615                  		call	mediacheck	;  Call	into removable routine
 12469 000005EC 7236                    		jb	short err_exitj
 12470 000005EE E89A16                  		call	haschange
 12471 000005F1 7512                    		jnz	short Media_Done
 12472                                  mChk_NoChangeLine:
 12473                                  		; If we come here, we have a floppy with no changeline support
 12474                                  			
 12475 000005F3 BE0100                  		mov	si, 1		; Presume no change
 12476 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 12477 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 12478                                  					; Is drive of last access the same?
 12479 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 12480 000005FF E82800                  		call	Check_Time_Of_Access
 12481 00000602 EB01                    		jmp	short Media_Done
 12482                                  ; ---------------------------------------------------------------------------
 12483                                  
 12484                                  Media_Unk:
 12485 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 12486                                  
 12487                                  		; SI now contains the correct value for media change.
 12488                                  		; Clean up the left overs
 12489                                  Media_Done:
 12490                                  		; 19/10/2022
 12491 00000605 06                      		push	es
 12492 00000606 C41E[1200]              		les	bx, [ptrsav]
 12493 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 12494 0000060E 07                      		pop	es
 12495 0000060F 09F6                    		or	si, si
 12496 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 12497 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 12498 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 12499 0000061A E80016                  		call	media_set_vid
 12500                                  mChk1_NoChangeLine:
 12501 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12502                                  					; Make sure we ask rom for media check
 12503                                  ret_carry_clear:			
 12504 00000622 F8                      		clc			; volidok
 12505 00000623 C3                      		retn
 12506                                  ; ---------------------------------------------------------------------------
 12507                                  
 12508                                  err_exitj:
 12509 00000624 E88207                  		call	maperror	; guaranteed to	set carry
 12510                                  ret81:					
 12511 00000627 B481                    		mov	ah, 81h		; return error status
 12512 00000629 C3                      		retn			; return with carry set
 12513                                  
 12514                                  ; =============== S U B	R O U T	I N E =======================================
 12515                                  
 12516                                  ; ---------------------------------------------------------------------------
 12517                                  ; perform a check on the time passed since the last access for this physical
 12518                                  ; drive.
 12519                                  ; we are accessing the same drive. if the time of last successful access was
 12520                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 12521                                  ; returns in si:
 12522                                  ;	0 - if time of last access was >= 2 seconds
 12523                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 12524                                  ; registers affected ax,cx,dx, flags.
 12525                                  ;
 12526                                  ;	assume es:di -> bds, ds->Bios_Data
 12527                                  ; ---------------------------------------------------------------------------
 12528                                  
 12529                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12530                                  		; 19/10/2022
 12531                                  Check_Time_Of_Access:
 12532 0000062A BE0100                  		mov	si, 1		; presume no change.
 12533 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 12534                                  		; 21/12/2023
 12535 00000630 268B4579                		mov	ax, [es:di+79h]
 12536                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 12537                                  					; get stored time
 12538 00000634 29C2                    		sub	dx, ax
 12539                                  		; 21/12/2023
 12540 00000636 268B457B                		mov	ax, [es:di+7Bh]
 12541                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 12542 0000063A 19C1                    		sbb	cx, ax
 12543                                  		; 11/08/2023
 12544                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 12545                                  		;mov	al, [accesscount]
 12546 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 12547 0000063E 09D2                    		or	dx, dx		; time must pass
 12548 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 12549                                  		; 11/08/2023
 12550                                  		;inc	al
 12551                                  		;cmp	al, 5
 12552                                  		;;inc	byte [accesscount]
 12553                                  		;;cmp	byte [accesscount], 5
 12554                                  		;			; if count is less than threshold, ok
 12555                                  		;jb	short timecheck_ret
 12556                                  		;;dec	byte [accesscount] ; don't let the count wrap
 12557                                  		; 11/08/2023
 12558                                  		;dec	al
 12559                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 12560                                  		; 11/08/2023
 12561 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 12562 00000647 730A                    		jnb	short timecheck_unk
 12563 00000649 FE06[1D01]              		inc	byte [accesscount]
 12564 0000064D C3                      		retn
 12565                                  
 12566                                  ; ---------------------------------------------------------------------------
 12567                                  
 12568                                  timepassed:
 12569 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 12570                                  					; min elapsed time? (2 seconds)
 12571 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 12572                                  
 12573                                  		; everything indicates that we do not know what has happened.
 12574                                  timecheck_unk:
 12575 00000653 4E                      		dec	si		; presume i don't know
 12576                                  timecheck_ret:
 12577                                  		; 11/08/2023
 12578                                  		;mov	[accesscount], al
 12579 00000654 C3                      		retn
 12580                                  
 12581                                  ; ---------------------------------------------------------------------------
 12582                                  ; 15/10/2022
 12583                                  Err_Exitj2:
 12584 00000655 EBCD                    		jmp	short err_exitj
 12585                                  
 12586                                  ; ---------------------------------------------------------------------------
 12587                                  
 12588                                  ; 15/10/2022
 12589                                  
 12590                                  ; ==========================================================================
 12591                                  ; Build a valid bpb for the disk in the drive.
 12592                                  ; ==========================================================================
 12593                                  
 12594                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12595                                  		; 19/10/2022
 12596                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 12597 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 12598 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 12599                                  		; 21/12/2023
 12600 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 12601                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12602                                  					; fnon_removable
 12603 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 12604                                  
 12605                                  		; let's set the default value for volid,vol_serial,
 12606                                  		; filesys_id in bds table
 12607                                  
 12608 00000664 E83600                  		call	clear_ids
 12609                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 12610 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 12611 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 12612 0000066F 72B6                    		jb	short ret81
 12613                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 12614 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 12615                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 12616 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 12617 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 12618                                  					; otherwise, conventional boot record
 12619                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 12620 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 12621 00000682 7403                    		jz	short already_gotbpb ; brif not
 12622 00000684 E80A16                  		call	set_volume_id
 12623                                  already_gotbpb:
 12624 00000687 83C706                  		add	di, 6		; BDS.BPB
 12625                                  					; return the bpb from the current bds
 12626                                  
 12627                                  ;		fall into setptrsav, es:di -> result
 12628                                  
 12629                                  ; ---------------------------------------------------------------------------
 12630                                  
 12631                                  ; 15/10/2022
 12632                                  
 12633                                  ; ==========================================================================
 12634                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 12635                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 12636                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 12637                                  ;It fails, for instance, when we install an external drive using driver.sys
 12638                                  ;because then the BDS segment is no longer Bios_Data. 
 12639                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 12640                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 12641                                  ;restored before returning to the caller.
 12642                                  ; ==========================================================================
 12643                                  
 12644                                  ; 21/12/2023
 12645                                  %if 0
 12646                                  		; 19/10/2022
 12647                                  SetPtrSav:	; return point for dsk_init
 12648                                  		mov	cx, es		; save es
 12649                                  		;les	bx, ds:ptrsav
 12650                                  		les	bx, [ptrsav]
 12651                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 12652                                  		mov	[es:bx+12h], di	; [es:bx+count]
 12653                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 12654                                  		clc
 12655                                  		retn
 12656                                  %endif
 12657                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12658                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 12659                                  SetPtrSav:	
 12660                                  		; return point for dsk_init
 12661 0000068A 1E                      		push	ds
 12662                                  		;lds	bx, ds:ptrsav
 12663 0000068B C51E[1200]              		lds	bx, [ptrsav]
 12664 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 12665 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 12666 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 12667 00000698 1E                      		push	ds
 12668 00000699 07                      		pop	es
 12669 0000069A 1F                      		pop	ds
 12670 0000069B F8                      		clc
 12671 0000069C C3                      		retn
 12672                                  
 12673                                  ; =============== S U B	R O U T	I N E =======================================
 12674                                  
 12675                                  ; 15/10/2022
 12676                                  
 12677                                  ; -----------------------------------------------------
 12678                                  ; clear ids in bds table. only applied for floppies.
 12679                                  ;input:  es:di -> bds table
 12680                                  ;	assumes ds: -> Bios_Data
 12681                                  ;output: volid set to "NO NAME    "
 12682                                  ;	 vol_serial set to 0.
 12683                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 12684                                  ;	   depending on the flag fatsize in bds.
 12685                                  ;
 12686                                  ;	trashes si, cx
 12687                                  ; -----------------------------------------------------
 12688                                  
 12689                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 12690                                  ;size_of_EXT_SYSTEM_ID equ 8
 12691                                  
 12692                                  ; 11/09/2023
 12693                                  ; 14/08/2023
 12694                                  ;BDS.fatsiz equ 1Fh
 12695                                  ; 21/12/2023
 12696                                  ;BDS.fatsiz equ 59
 12697                                  
 12698                                  		; 22/12/2023
 12699                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12700                                  clear_ids:
 12701                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 12702                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 12703 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 12704                                  clear_ids_x:
 12705                                  		; 21/12/2023 
 12706                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 12707                                  		; 11/09/2023		
 12708                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 12709 000006A1 57                      		push	di
 12710 000006A2 31C9                    		xor	cx, cx		; no serial number
 12711                                  		; 21/12/2023
 12712 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 12713 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 12714                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 12715                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 12716                                  
 12717                                  		; BUGBUG - there's a lot in common here and with
 12718                                  		; mov_media_ids.. see if we can save some space by
 12719                                  		; merging them... jgl
 12720                                  
 12721                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 12722                                  		; 10/12/2022
 12723 000006AE B10B                    		mov	cl, 11 ; cx = 11
 12724                                  
 12725                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 12726                                  		;mov	si, vol_no_name	; 19/10/2022
 12727                                  		; 22/12/2023
 12728                                  		;mov	si, offset nul_vid ; "NO NAME    "
 12729 000006B0 BE[6305]                		mov	si, nul_vid
 12730                                  
 12731                                  		; 21/12/2023
 12732 000006B3 83C77D                  		add	di, 125
 12733                                  		;add	di, 75		; BDS.volid
 12734                                  		
 12735                                  		;rep movsb
 12736                                  		; 21/12/2023
 12737                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 12738                                  		; 26/12/2023
 12739                                  		;cs	; vol_no_name is in BIOSCODE segment
 12740                                  		;rep movsb
 12741 000006B6 F3                      		rep
 12742 000006B7 2E                      		cs
 12743 000006B8 A4                      		movsb
 12744                                  
 12745                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 12746                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 12747                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 12748                                  		;test	byte [es:di+1Fh], 40h
 12749                                  		; 21/12/2023 - Retro DOS v5.0
 12750                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 12751                                  		;test	byte [es:di+59], 20h 
 12752                                  			; (here, es:di points to the BDS offset +136)
 12753                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 12754                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 12755                                  
 12756                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 12757                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 12758                                  			; Microsoft/IBM code has a bug here because the BDS's
 12759                                  			; .volid and .filesys_id fields will be reset
 12760                                  			; (to their default text) according to 'BDS.fatsiz' flags
 12761                                  			; at the BDS offset 59 but current (this) code checks flags
 12762                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 12763                                  			;; at the BDS offset 31 but current (this) code checks flags
 12764                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 12765                                  			;
 12766                                  			; Correct Code:
 12767                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 12768                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 12769                                  			; 11/09/2023
 12770                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 12771                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 12772                                  			;
 12773                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 12774                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 12775                                  
 12776                                  			;
 12777                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 12778                                  			; 'clear_ids' is used for floppy disks only and the default
 12779                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 12780                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 12781                                  
 12782                                  		; 21/12/2023 - Retro DOS v5.0
 12783                                  		;mov	si, offset fat_32_id ; "FAT32   "
 12784 000006B9 BE[5B05]                		mov	si, fat_32_id	
 12785                                  
 12786                                  		; 21/12/2023
 12787                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 12788                                  		;test	bl, fbigbig ; FAT32 flag
 12789 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 12790 000006BF 750B                    		jnz	short ci_bigfat
 12791                                  
 12792                                  		;mov	si, offset fat_16_id ; "FAT16	"
 12793 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 12794                                  		
 12795                                  		; 21/12/2023
 12796                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 12797                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 12798                                  		; BugFix ; *+
 12799                                  		;test	bl, fbig ; FAT16 flag
 12800 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 12801                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 12802 000006C7 7503                    		jnz	short ci_bigfat
 12803                                  
 12804                                  		;mov	si, offset fat_12_id ; "FAT12	"
 12805 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 12806                                  ci_bigfat:
 12807                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 12808                                  		; 10/12/2022
 12809 000006CC B108                    		mov	cl, 8 ; cx = 8 
 12810 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 12811                                  					; filesys_id field
 12812                                  		;rep movsb
 12813                                  		; 21/12/2023 - Retro DOS v5.0
 12814                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 12815                                  		; 26/12/2023
 12816                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 12817                                  		;rep movsb
 12818 000006D1 F3                      		rep
 12819 000006D2 2E                      		cs
 12820 000006D3 A4                      		movsb
 12821                                  
 12822 000006D4 5F                      		pop	di		; restore bds pointer
 12823                                  getret_exit:		; 21/12/2023
 12824 000006D5 C3                      		retn
 12825                                  
 12826                                  ; =============== S U B	R O U T	I N E =======================================
 12827                                  
 12828                                  ; 15/10/2022
 12829                                  
 12830                                  ; ---------------------------------------------------------------------------
 12831                                  ;	getbp - return bpb from the drive specified by the bds.
 12832                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 12833                                  ;	    note that we never come here for fixed disks.
 12834                                  ;	    for all other cases,
 12835                                  ;	      - it reads boot sector to pull out the bpb
 12836                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 12837                                  ;		to get the fat id byte to build the bpb from there.
 12838                                  ;
 12839                                  ;   inputs:	es:di point to correct bds.
 12840                                  ;
 12841                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 12842                                  ;		carry set, and al=7 if invalid disk.
 12843                                  ;		carry set and error code in al if other error.
 12844                                  ;		if failed to recognize the boot record, then will set the
 12845                                  ;		set_id_flag to 0.
 12846                                  ;		this routine will only work for a floppy diskette.
 12847                                  ;		     for a fixed disk, it will just return.
 12848                                  ;
 12849                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 12850                                  ;	  segment definitions. It should be migrated towards.
 12851                                  ;	   now es:di has the bds, ds: has Bios_Data
 12852                                  ; ---------------------------------------------------------------------------
 12853                                  
 12854                                  		; 29/12/2023
 12855                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12856                                  GetBp:
 12857                                  		; if returning fake bpb then return bpb as is.
 12858                                  		; 21/12/2023
 12859 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 12860                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 12861                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 12862                                  		;jz	short getbp1	; getbp1
 12863                                  		;jmp	getret_exit
 12864                                  		; 21/12/2023
 12865 000006DB 75F8                    		jnz	short getret_exit
 12866                                  ; ---------------------------------------------------------------------------
 12867                                  getbp1:	
 12868 000006DD 51                      		push	cx
 12869 000006DE 52                      		push	dx
 12870 000006DF 53                      		push	bx
 12871                                  
 12872                                  		; attempt to read in boot sector and determine bpb.
 12873                                  		; we assume that the 2.x and greater dos disks all
 12874                                  		; have a valid boot sector.
 12875                                  
 12876 000006E0 E8CF00                  		call	readbootsec
 12877 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 12878 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 12879 000006E7 7509                    		jnz	short dofatbpb
 12880 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 12881                                  		;jmp	short Has1
 12882                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 12883 000006EC E9B500                  		jmp	getret
 12884                                  ; ---------------------------------------------------------------------------
 12885                                  
 12886                                  getbp_err_ret_brdg:
 12887 000006EF E9B600                  		jmp	getbp_err_ret
 12888                                  ; ---------------------------------------------------------------------------
 12889                                  
 12890                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 12891                                  		; and fill in bpb from there.
 12892                                  dofatbpb:				
 12893 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 12894 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 12895                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 12896 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 12897 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 12898 000006FE E83115                  		call	hidensity	; may not return! May add sp, 2	and
 12899                                  					; jump to has1!!!!!! or	has720K
 12900                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 12901                                  		; 21/12/2023 - Retro DOS v5.0
 12902 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 12903                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12904                                  					; ffSmall
 12905 00000706 7512                    		jnz	short is_floppy
 12906 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 12907 0000070B 7512                    		jnz	short got_unknown_medium
 12908                                  Has720K:
 12909                                  		; 21/12/2023
 12910                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 12911                                  		;mov	bx, sm92	; 19/10/2022
 12912                                  
 12913                                  		; es points to segment of bds. the following should be modified
 12914                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 12915                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 12916                                  
 12917                                  		; 21/12/2023
 12918                                  		;; 10/12/2022
 12919                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 12920                                  		;; 21/12/2022
 12921                                  		;mov	al, [bx]
 12922                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 12923                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 12924                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 12925                                  		;; 19/10/2022 - Temporary !
 12926                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 12927                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 12928                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 12929                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 12930                                  
 12931                                  		; 21/12/2023 - Retro DOS v5.0
 12932 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 12933 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 12934 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 12935                                  					; dh = bpbtype.chead = 2
 12936 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 12937                                  					; bh = bpbtype.dire = 112
 12938 00000718 EB30                    		jmp	short Has1
 12939                                  ; ---------------------------------------------------------------------------
 12940                                  
 12941                                  is_floppy:			; must be a 5.25" floppy if we come here
 12942 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 12943                                  		;jb	short got_unknown_medium
 12944                                  		; 21/12/2023
 12945 0000071D 730A                    		jnb	short chk_160K
 12946                                  ; ---------------------------------------------------------------------------
 12947                                  		; 21/12/2023
 12948                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 12949                                  		; we do	not assume any type of bpb for this medium.
 12950                                  got_unknown_medium:
 12951                                  		;mov	ds:set_id_flag,	0
 12952 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 12953 00000724 B007                    		mov	al, 7
 12954 00000726 F9                      		stc
 12955 00000727 EB7B                    		jmp	short getret
 12956                                  ; ---------------------------------------------------------------------------
 12957                                  chk_160K:
 12958 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 12959 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 12960                                  					; set dir entries and sector max
 12961 0000072E B94001                  		mov	cx, 320		; 40*8
 12962                                  					; set size of drive
 12963 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 12964                                  					; set head limit and sec/all unit
 12965                                  		; 21/12/2023
 12966                                  		;mov	al, 1		; bpbtype.sbf = 1
 12967                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 12968                                  		;			; bh = bpbtype.dire = 64
 12969                                  		;mov	cx, 140h	; bpbtype.csec = 320
 12970                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 12971                                  		;			; dh = bpbtype.chead = 1
 12972                                  
 12973 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 12974 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 12975                                  		
 12976                                  		; 29/12/2023
 12977                                  		;inc	al	; 2 	; inc number of	fat sectors
 12978                                  		;inc	bl	; 9	; inc sector max
 12979 00000739 40                      		inc	ax
 12980 0000073A 43                      		inc	bx
 12981                                  
 12982                                  		;add	cx, 40		; increase size	(to 360)
 12983                                  		; 18/12/2022
 12984 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 12985                                  has8:
 12986 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 12987 00000741 7407                    		jz	short Has1	; jz = 1 head
 12988 00000743 01C9                    		add	cx, cx		; double size of disk
 12989 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 12990 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 12991                                  		; 29/12/2023
 12992                                  		;inc	dl	; 2	; inc head limit
 12993 00000749 42                      		inc	dx
 12994                                  Has1:
 12995                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 12996 0000074A 1E                      		push	ds
 12997 0000074B 06                      		push	es
 12998 0000074C 1F                      		pop	ds
 12999                                  
 13000                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 13001                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 13002                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 13003                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 13004                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 13005                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 13006                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 13007                                  
 13008 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 13009 00000750 30F6                    		xor	dh, dh
 13010 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 13011 00000755 88FA                    		mov	dl, bh
 13012 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 13013 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 13014 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 13015 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 13016 00000763 88C2                    		mov	dl, al
 13017 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 13018 00000768 88DA                    		mov	dl, bl
 13019 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 13020                                  
 13021                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 13022                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 13023                                  		; to 0 since this code is for floppies
 13024                                  
 13025                                  		; 18/12/2022
 13026                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 13027                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 13028                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 13029                                  		; 18/12/2022
 13030 0000076D 29C9                    		sub	cx, cx ; 0
 13031                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 13032                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 13033                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 13034                                  		
 13035                                  		; 02/09/2023
 13036 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 13037 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 13038 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 13039                                  
 13040                                  		; 21/12/2023 - Retro DOS v5.0
 13041 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 13042 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 13043 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 13044 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 13045 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 13046                                  					;     BPB_Reserved (12 zero bytes)
 13047 00000787 894D31                  		mov     [di+31h], cx
 13048 0000078A 894D33                  		mov     [di+33h], cx
 13049 0000078D 894D35                  		mov     [di+35h], cx
 13050 00000790 894D37                  		mov     [di+37h], cx
 13051 00000793 894D39                  		mov     [di+39h], cx
 13052 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 13053 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 13054                                  
 13055 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 13056 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 13057 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 13058                                  		
 13059 000007A3 1F                      		pop	ds ; 02/09/2023
 13060                                  getret:
 13061 000007A4 5B                      		pop	bx
 13062 000007A5 5A                      		pop	dx
 13063 000007A6 59                      		pop	cx
 13064                                  ;getret_exit:		; 21/12/2023
 13065 000007A7 C3                      		retn
 13066                                  ; ---------------------------------------------------------------------------
 13067                                  
 13068                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 13069                                  		;mov	ds:set_id_flag,	0
 13070                                  		; 19/10/2022
 13071 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 13072 000007AD E8F905                  		call	maperror
 13073 000007B0 EBF2                    		jmp	short getret
 13074                                  ; ---------------------------------------------------------------------------
 13075                                  ; 21/12/2023
 13076                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 13077                                  ;		; we do	not assume any type of bpb for this medium.
 13078                                  ;
 13079                                  ;got_unknown_medium:
 13080                                  ;		;mov	ds:set_id_flag,	0
 13081                                  ;		mov	byte [set_id_flag], 0
 13082                                  ;		mov	al, 7
 13083                                  ;		stc
 13084                                  ;		jmp	short getret
 13085                                  
 13086                                  ; =============== S U B	R O U T	I N E =======================================
 13087                                  
 13088                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 13089                                  
 13090                                  ; ----------------------------------------------------------------
 13091                                  ; read in the boot sector. set carry if error in reading sector.
 13092                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 13093                                  ;
 13094                                  ;	assumes es:di -> bds, ds-> Bios_Data
 13095                                  ; ----------------------------------------------------------------
 13096                                  
 13097                                  ; 10/03/2019 - Retro DOS v4.0
 13098                                  
 13099                                  ; 30/12/2022 - Retro DOS v4.2
 13100                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 13101                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 13102                                  
 13103                                  ; 22/12/2023 - Retro DOS v5.0
 13104                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 13105                                  
 13106                                  readbootsec:	
 13107 000007B2 B600                    		mov	dh, 0		; head 0
 13108 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 13109 000007B7 E8FC00                  		call	read_sector
 13110 000007BA 7243                    		jb	short err_ret
 13111 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 13112                                  
 13113                                  		; put a sanity check for the boot sector in here to detect
 13114                                  		; boot sectors that do not have valid bpbs. we examine the
 13115                                  		; first two bytes - they must contain a long jump (69h) or a
 13116                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 13117                                  		; (E9h). if this test is passed, we further check by examining
 13118                                  		; the signature at the end of the boot sector for the word
 13119                                  		; AA55h. if the signature is not present, we examine the media
 13120                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 13121                                  		; logic is modified a little bit. we are not going to check
 13122                                  		; signature. instead we are going to sanity check the media
 13123                                  		; byte in bpb regardless of the validity of signature. this is
 13124                                  		; to save the already developed commercial products that have
 13125                                  		; good jump instruction and signature but with the false bpb
 13126                                  		; informations
 13127                                  
 13128                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 13129                                  
 13130                                  		; 02/09/2023
 13131                                  		; 19/10/2022
 13132                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 13133                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 13134                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 13135                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 13136                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 13137                                  		;jnz	short invalidbootsec
 13138                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 13139                                  		;jnz	short invalidbootsec
 13140                                  
 13141                                  		; 02/09/2023 (PCDOS 7.1)
 13142 000007BE A0[5201]                		mov	al, [disksector]
 13143 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 13144 000007C3 740F                    		je	short check_bpb_mediabyte
 13145                                  					; don't need to find a nop
 13146 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 13147 000007C7 740B                    		je	short check_bpb_mediabyte
 13148                                  					; no need for nop
 13149 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 13150 000007CB 7530                    		jne	short invalidbootsec
 13151 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 13152 000007D2 7529                    		jne	short invalidbootsec
 13153                                  
 13154                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13155                                  ;
 13156                                  ;; 10/03/2019
 13157                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 13158                                  ;;
 13159                                  ;; Don't have to perform the following signature check since
 13160                                  ;; we need to check the media byte even with the good signatured diskette.
 13161                                  ;;
 13162                                  ;;check_signature:
 13163                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 13164                                  ;;							 ; disk or 1.x media.
 13165                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 13166                                  ;;					       ; may need some special handling
 13167                                  
 13168                                  ; check for non-ibm disks which do not have the signature AA55h at the
 13169                                  ; end of the boot sector, but still have a valid boot sector. this is done
 13170                                  ; by examining the media descriptor in the boot sector.
 13171                                  
 13172                                  		; 19/10/2022
 13173                                  check_bpb_mediabyte:
 13174 000007D4 A0[6701]                		mov	al, [disksector+15h]
 13175                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13176 000007D7 50                      		push	ax ; 02/09/2023
 13177 000007D8 24F0                    		and	al, 0F0h
 13178 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 13179 000007DC 58                      		pop	ax ; 02/09/2023
 13180 000007DD 751E                    		jnz	short invalidbootsec
 13181                                  
 13182                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 13183                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 13184                                  ; sectors. these are specifically diskettes that were formatted in drives
 13185                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 13186                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 13187                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 13188                                  ; help our build bpb routine to recognise these specific cases, and to
 13189                                  ; set up out copy of the bpb accordingly.
 13190                                  ; we do this by checking to see if the boot sector is off a diskette that
 13191                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 13192                                  ; sec/clus field to 1. if not, we carry on as normal.
 13193                                  
 13194                                  checksinglesided:
 13195                                  		;mov	al, [disksector+15h]
 13196                                  		; 02/09/2023
 13197                                  		; al = [disksector+15h]
 13198 000007DF 3CF0                    		cmp	al, 0F0h
 13199 000007E1 741B                    		jz	short gooddsk
 13200 000007E3 A801                    		test	al, 1
 13201 000007E5 7517                    		jnz	short gooddsk
 13202 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 13203 000007ED 7507                    		jnz	short mustbeearlier
 13204 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 13205 000007F4 7308                    		jnb	short gooddsk
 13206                                  
 13207                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 13208                                  
 13209                                  mustbeearlier:				
 13210 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 13211                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13212 000007FB EB01                    		jmp	short gooddsk
 13213                                  ; ---------------------------------------------------------------------------
 13214                                  
 13215                                  invalidbootsec:				
 13216 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 13217                                  		; 10/12/2022
 13218                                  movbpb_ret:
 13219                                  gooddsk:				
 13220 000007FE F8                      		clc
 13221                                  err_ret:
 13222 000007FF C3                      		retn
 13223                                  ; ---------------------------------------------------------------------------
 13224                                  
 13225                                  		; 10/12/2022
 13226                                  ;err_ret:				
 13227                                  		;retn
 13228                                  
 13229                                  ; =============== S U B	R O U T	I N E =======================================
 13230                                  
 13231                                  ; 15/10/2022
 13232                                  ; ---------------------------------------------------------------------------
 13233                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 13234                                  ; getbp routine at has1
 13235                                  ;
 13236                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 13237                                  ; serial number, volume label, file system id in bds according to
 13238                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 13239                                  ; to signal that volume label is set already from the extended boot record
 13240                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 13241                                  ; the volume label in the root directory.)
 13242                                  ; ---------------------------------------------------------------------------
 13243                                  
 13244                                  ; 10/03/2019 - Retro DOS v4.0
 13245                                  
 13246                                  ; 22/12/2023
 13247                                  %if 0
 13248                                  		; 19/10/2022
 13249                                  movbpb:
 13250                                  		mov	dh, [disksector+0Dh]
 13251                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13252                                  					; sectors per unit
 13253                                  		mov	bh, [disksector+11h]
 13254                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 13255                                  					; number of directory entries
 13256                                  		mov	cx, [disksector+13h]
 13257                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 13258                                  					; size of drive
 13259                                  		mov	ah, [disksector+15h]
 13260                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13261                                  					; media	descriptor
 13262                                  		mov	al, [disksector+16h];
 13263                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 13264                                  					; number of fat	sectors
 13265                                  		mov	bl, [disksector+18h]
 13266                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 13267                                  					; sectors per track
 13268                                  		mov	dl, [disksector+1Ah]
 13269                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 13270                                  					; number of heads
 13271                                  %else
 13272                                  		; 29/12/2023
 13273                                  		; 22/12/2023 - Retro DOS v5.0
 13274                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 13275                                  		;;;
 13276                                  movbpb:
 13277 00000800 57                      		push	di
 13278 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 13279 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 13280 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 13281                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 13282 0000080B FC                      		cld
 13283 0000080C F3A4                    		rep movsb
 13284 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 13285                                  					; disksektor+19 = BPB_TotSec16
 13286 00000811 31C0                    		xor	ax, ax
 13287 00000813 E308                    		jcxz	movbpb_bigdisk
 13288 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 13289                                  					; to 32 bit total sectors field
 13290 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 13291                                  movbpb_bigdisk:
 13292 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 13293 00000820 7410                    		jz	short movbpb_fat32
 13294                                  movbpb_fat:
 13295 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 13296                                  		; 29/12/2023
 13297 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 13298                                  					; (which are used only for FAT32 disks)
 13299 00000828 F3AA                    		rep stosb
 13300 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 13301 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 13302                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 13303 0000082C AB                      		stosw
 13304 0000082D 40                      		inc	ax		; ax = 0
 13305 0000082E B10C                    		mov	cl, 12		
 13306                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 13307                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 13308 00000830 F3AA                    		rep stosb
 13309                                  movbpb_fat32:
 13310 00000832 5F                      		pop	di
 13311                                  %endif
 13312                                  		;;;
 13313                                  
 13314 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 13315 00000838 75C4                    		jnz	short movbpb_ret
 13316 0000083A E81200                  		call	mov_media_ids
 13317 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 13318 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 13319                                  movbpb_conv:
 13320 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 13321 00000849 75B3                    		jnz	short movbpb_ret
 13322 0000084B E83714                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 13323                                  		; 10/12/2022
 13324                                  		; cf = 0
 13325                                  ;movbpb_ret:
 13326                                  		;clc
 13327 0000084E C3                      		retn
 13328                                  		
 13329                                  ; =============== S U B	R O U T	I N E =======================================
 13330                                  
 13331                                  ;copy the boot_serial number, volume id, and filesystem id from the
 13332                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 13333                                  ;by es:di.
 13334                                  
 13335                                  ;in.) es:di -> bds
 13336                                  ;     ds:disksector = valid extended boot record.
 13337                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 13338                                  ;      the boot record information.
 13339                                  ;     carry flag set if not an extended bpb.
 13340                                  ;     all registers saved except the flag.
 13341                                  
 13342                                  ; 22/12/2023
 13343                                  %if 0
 13344                                  		; 19/10/2022
 13345                                  mov_media_ids:		
 13346                                  		cmp	byte [disksector+26h], 29h
 13347                                  					; [disksector+EXT_BOOT.SIG],
 13348                                  					; EXT_BOOT_SIGNATURE
 13349                                  		jnz	short mmi_not_ext
 13350                                  		push	cx
 13351                                  		mov	cx, [disksector+27h]
 13352                                  					; [disksector+EXT_BOOT.SERIAL]
 13353                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13354                                  		mov	cx, [disksector+29h]
 13355                                  					; [disksector+EXT_BOOT.SERIAL+2]
 13356                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13357                                  		push	di
 13358                                  		push	si
 13359                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13360                                  		mov	si, disksector+2Bh
 13361                                  		;mov	si, (offset disksector+2Bh) ;
 13362                                  					; disksector+EXT_BOOT.VOL_LABEL
 13363                                  		add	di, 75		; BDS.volid
 13364                                  		rep movsb
 13365                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 13366                                  		; 10/12/2022
 13367                                  		mov	cl, 8 ; cx = 8
 13368                                  		mov	si, disksector+36h
 13369                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 13370                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 13371                                  		rep movsb
 13372                                  		pop	si
 13373                                  		pop	di
 13374                                  		pop	cx
 13375                                  		; 10/12/2022
 13376                                  		; cf = 0
 13377                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 13378                                  				; (20/09/2022)
 13379                                  		retn
 13380                                  %else
 13381                                  		; 22/12/2023 - Retro DOS v5.0
 13382                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 13383                                  		;;;		
 13384                                  mov_media_ids:
 13385 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13386 00000854 7507                    		jnz	short mmi_chk_fat
 13387 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 13388                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 13389                                  					; EXT_BOOT_SIGNATURE
 13390 0000085B EB05                    		jmp	short mmi_chk_fat32
 13391                                  mmi_chk_fat:
 13392 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 13393                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 13394                                  mmi_chk_fat32:
 13395 00000862 7543                    		jnz	short mmi_not_ext
 13396 00000864 51                      		push	cx
 13397 00000865 50                      		push	ax
 13398 00000866 57                      		push	di
 13399 00000867 56                      		push	si
 13400 00000868 1E                      		push	ds
 13401 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13402 0000086E 750C                    		jnz	short mmi_fat
 13403                                  
 13404                                  mmi_fat32:				; FAT32 file system
 13405                                  		;lds	cx, dword ptr ds:disksector+43h
 13406 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 13407 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 13408 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 13409 0000087A EB0A                    		jmp	short mmi_do
 13410                                  
 13411                                  mmi_fat:
 13412                                  		;lds	cx, dword ptr ds:disksector+27h
 13413 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 13414 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 13415 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 13416                                  mmi_do:
 13417 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13418                                  					; (BDS offset 137)
 13419 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 13420 00000890 1F                      		pop	ds
 13421 00000891 B90B00                  		mov	cx, 11
 13422 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 13423 00000897 F3A4                    		rep movsb
 13424 00000899 B108                    		mov	cl, 8		; di = di+136
 13425 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 13426 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 13427 000008A0 F3A4                    		rep movsb
 13428 000008A2 5E                      		pop	si
 13429 000008A3 5F                      		pop	di
 13430 000008A4 58                      		pop	ax
 13431 000008A5 59                      		pop	cx
 13432                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 13433                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 13434 000008A6 C3                      		retn
 13435                                  %endif
 13436                                  		;;;
 13437                                  	
 13438                                  ; ---------------------------------------------------------------------------
 13439                                  
 13440                                  mmi_not_ext:				
 13441 000008A7 F9                      		stc
 13442 000008A8 C3                      		retn
 13443                                  
 13444                                  ; =============== S U B	R O U T	I N E =======================================
 13445                                  
 13446                                  ; 15/10/2022
 13447                                  ; --------------------------------------------------------------
 13448                                  ; read in the fat sector and get the media byte from it.
 13449                                  ; input : es:di -> bds
 13450                                  ; output:
 13451                                  ;	  carry set if an error occurs, ax contains error code.
 13452                                  ;	  otherwise, ah contains media byte on exit
 13453                                  ; --------------------------------------------------------------
 13454                                  
 13455                                  readfat:	
 13456                                  		;mov	dh, 0
 13457                                  		; 10/12/2022
 13458 000008A9 30F6                    		xor	dh, dh
 13459 000008AB B90200                  		mov	cx, 2		; head 0
 13460                                  					; cylinder 0, sector 2
 13461 000008AE E80500                  		call	read_sector
 13462 000008B1 7202                    		jb	short bad_fat_ret
 13463 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 13464                                  bad_fat_ret:				
 13465 000008B5 C3                      		retn
 13466                                  
 13467                                  ; =============== S U B	R O U T	I N E =======================================
 13468                                  
 13469                                  ; 15/10/2022
 13470                                  
 13471                                  ; ---------------------------------------------------------------------------
 13472                                  ; read a single sector into the temp buffer.
 13473                                  ; perform three retries in case of error.
 13474                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 13475                                  ;		cx has sector and cylinder
 13476                                  ;		dh has head
 13477                                  ;		es:di has bds
 13478                                  ;		ds has Bios_Data
 13479                                  ;
 13480                                  ;   outputs:	carry clear
 13481                                  ;		    Bios_Data:bx point to sector
 13482                                  ;		       (note: some callers assume location of buffer)
 13483                                  ;
 13484                                  ;		carry set
 13485                                  ;		    ax has rom error code
 13486                                  ;
 13487                                  ; register bp is preserved.
 13488                                  ; ---------------------------------------------------------------------------
 13489                                  
 13490                                  ; 10/03/2019 - Retro DOS v4.0
 13491                                  ; 22/12/2023 - Retro DOS v5.0
 13492                                  
 13493                                  		; 19/10/2022
 13494                                  read_sector:
 13495 000008B6 55                      		push	bp
 13496 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 13497 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13498 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 13499                                  rd_ret:
 13500 000008C1 06                      		push	es
 13501 000008C2 1E                      		push	ds
 13502 000008C3 07                      		pop	es
 13503 000008C4 B80102                  		mov	ax, 201h
 13504 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13505                                  					; AL = number of sectors to read, CH = track, CL = sector
 13506                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13507                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13508 000008C9 07                      		pop	es
 13509 000008CA 734A                    		jnb	short okret2
 13510                                  rd_rty:
 13511 000008CC E81205                  		call	again		; reset	disk, decrement	bp, preserve ax
 13512 000008CF 7442                    		jz	short err_rd_ret
 13513                                  
 13514                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13515 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 13516                                  		;test	byte [es:di+23h], 1
 13517                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 13518                                  					; fnon_removable
 13519 000008D6 75E9                    		jnz	short rd_ret
 13520 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13521 000008DD 7510                    		jnz	short rd_skip1_dpt
 13522 000008DF 50                      		push	ax
 13523 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 13524 000008E1 C536[2D01]              		lds	si, [dpt]
 13525                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13526                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 13527                                  		;			; NORMSETTLE
 13528                                  		; 12/12/2022
 13529 000008E5 B00F                    		mov	al, 15
 13530 000008E7 864409                  		xchg	al, [si+9]
 13531                                  		; 
 13532 000008EA 1F                      		pop	ds
 13533 000008EB A2[2A01]                		mov	[save_head_sttl], al
 13534 000008EE 58                      		pop	ax
 13535                                  rd_skip1_dpt:
 13536 000008EF 06                      		push	es
 13537 000008F0 1E                      		push	ds
 13538 000008F1 07                      		pop	es
 13539 000008F2 B80102                  		mov	ax, 201h
 13540 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13541                                  					; AL = number of sectors to read, CH = track, CL = sector
 13542                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13543                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13544 000008F7 07                      		pop	es
 13545 000008F8 9C                      		pushf
 13546 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13547 000008FE 750E                    		jnz	short rd_skip2_dpt
 13548 00000900 50                      		push	ax
 13549 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 13550 00000904 1E                      		push	ds
 13551 00000905 C536[2D01]              		lds	si, [dpt]
 13552 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13553 0000090C 1F                      		pop	ds
 13554 0000090D 58                      		pop	ax
 13555                                  rd_skip2_dpt:
 13556 0000090E 9D                      		popf
 13557 0000090F 7305                    		jnb	short okret2
 13558 00000911 EBB9                    		jmp	short rd_rty
 13559                                  ; ---------------------------------------------------------------------------
 13560                                  
 13561                                  err_rd_ret:
 13562 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 13563                                  					; return error
 13564 00000915 F9                      		stc
 13565                                  
 13566                                  ; update information pertaining to last drive accessed, time of access, last
 13567                                  ; track accessed in that drive.
 13568                                  
 13569                                  okret2:
 13570 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 13571 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 13572                                  		
 13573                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13574 0000091E 26886D78                		mov	[es:di+78h], ch
 13575                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 13576                                  					; save last track accessed on this drive
 13577                                  					; preserve flags in case error occurred
 13578 00000922 9C                      		pushf
 13579 00000923 E89B04                  		call	set_tim
 13580 00000926 9D                      		popf			; restore flags
 13581 00000927 5D                      		pop	bp
 13582 00000928 C3                      		retn
 13583                                  
 13584                                  ;----------------------------------------------------------------------------
 13585                                  ;	disk open/close routines
 13586                                  ;----------------------------------------------------------------------------
 13587                                  
 13588                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 13589 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 13590 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 13591 00000930 E871FC                  		call	SetDrive	; get bds for drive
 13592                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13593 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 13594                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 13595                                  dsk_open_exit:
 13596                                  		; 10/12/2022
 13597                                  		; cf = 0			
 13598                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13599                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13600 00000937 C3                      		retn
 13601                                  ; ---------------------------------------------------------------------------
 13602                                  
 13603                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 13604 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 13605 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 13606 0000093F E862FC                  		call	SetDrive	; get bds for drive
 13607                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13608 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 13609                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13610 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 13611                                  		; 22/12/2023
 13612 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 13613                                  		;dec	word [es:di+20h]
 13614                                  exitjx:
 13615                                  		; 10/12/2022
 13616                                  		; cf = 0
 13617                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13618                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13619 0000094D C3                      		retn
 13620                                  
 13621                                  ;----------------------------------------------------------------------------
 13622                                  ;		disk removable routine
 13623                                  ;----------------------------------------------------------------------------
 13624                                  
 13625                                  		; al is	unit #
 13626                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 13627 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 13628                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13629                                  		;test	byte [es:di+BDS.flags], fnon_removable
 13630 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 13631 00000956 74F5                    		jz	short exitjx
 13632                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 13633                                  		;;jnz	short x_bus_exit ; non_rem
 13634                                  		;jnz	short non_rem	; 15/10/2022
 13635                                  		;; 10/12/2022
 13636                                  		;; cf = 0
 13637                                  		;;clc			; CF is already ZERO here
 13638                                  		;			; 15/10/2022
 13639                                  		;retn
 13640                                  ; ---------------------------------------------------------------------------
 13641                                  
 13642                                  non_rem:
 13643                                  x_bus_exit:
 13644 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 13645                                  					; return busy status
 13646 0000095A F9                      		stc
 13647                                  dsk_ret:
 13648 0000095B C3                      		retn
 13649                                  
 13650                                  ;----------------------------------------------------------------------------
 13651                                  ;		disk i/o routines
 13652                                  ;----------------------------------------------------------------------------
 13653                                  
 13654                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 13655                                  		;mov	word [wrtverify], 103h
 13656                                  		; 19/10/2022
 13657 0000095C C706[2001]0301          		mov	word [rflag], 103h
 13658                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 13659 00000962 EB06                    		jmp	short dsk_cl
 13660                                  ; ---------------------------------------------------------------------------
 13661                                  
 13662                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 13663                                  		;mov	word [wrtverify], 3
 13664                                  		; 19/10/2022
 13665 00000964 C706[2001]0300          		mov	word [rflag], 3
 13666                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 13667                                  dsk_cl:
 13668 0000096A E8A400                  		call	diskio		; romwrite
 13669                                  ; ---------------------------------------------------------------------------
 13670                                  
 13671                                  dsk_io:
 13672 0000096D 73EC                    		jnb	short dsk_ret
 13673 0000096F E965F7                  		jmp	bc_err_cnt
 13674                                  ; ---------------------------------------------------------------------------
 13675                                  
 13676                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 13677 00000972 E89700                  		call	diskrd
 13678 00000975 EBF6                    		jmp	short dsk_io
 13679                                  
 13680                                  ; =============== S U B	R O U T	I N E =======================================
 13681                                  
 13682                                  ; 15/10/2022
 13683                                  ; 10/03/2019 - Retro DOS v4.0
 13684                                  ; 22/12/2023 - Retro DOS v5.0
 13685                                  
 13686                                  ;-----------------------------------------------------------
 13687                                  ; miscellaneous odd jump routines. 
 13688                                  ; moved out of mainline for speed.
 13689                                  
 13690                                  ; if we have a system where we have virtual drives, we need 
 13691                                  ; to prompt the user to place the correct disk in the drive.
 13692                                  ;
 13693                                  ;	assume es:di -> bds, ds:->Bios_Data
 13694                                  ;-----------------------------------------------------------
 13695                                  
 13696                                  		; 19/10/2022
 13697                                  checksingle:
 13698 00000977 50                      		push	ax
 13699 00000978 53                      		push	bx
 13700                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13701 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 13702                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 13703                                  
 13704                                  ; if hard drive, cannot change disk.
 13705                                  ; if current owner of physical drive, no need to change diskette.
 13706                                  
 13707 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 13708 00000980 7573                    		jnz	short singleret
 13709 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 13710                                  					; is there a drive sharing this	physical drive?
 13711 00000985 746E                    		jz	short singleret
 13712                                  
 13713                                  ; look for the previous owner of this physical drive
 13714                                  ; and reset its ownership flag.
 13715                                  
 13716 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13717                                  					; get physical drive number
 13718 0000098B 06                      		push	es		; preserve pointer to current bds
 13719 0000098C 57                      		push	di
 13720 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 13721                                  scan_list:
 13722 00000991 26384504                		cmp	[es:di+4], al
 13723 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 13724 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 13725                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13726 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 13727                                  		;test	[es:di+23h], bl
 13728 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 13729 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 13730                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 13731 000009A3 5F                      		pop	di		; restore pointer to current bds
 13732 000009A4 07                      		pop	es
 13733 000009A5 26085D3F                		or	[es:di+3Fh], bl
 13734                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 13735                                  
 13736                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 13737                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 13738                                  ; in this case.
 13739 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 13740 000009AE 7517                    		jnz	short not_fsetowner
 13741                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 13742 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 13743 000009B5 753E                    		jnz	short singleret
 13744 000009B7 268A4505                		mov	al, [es:di+5]
 13745                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 13746                                  					; get the DOS drive letter
 13747 000009BB 06                      		push	es
 13748 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 13749 000009C0 26A20405                		mov	[es:LSTDRV], al
 13750                                  		;mov	es:504h, al	; [es:LSTDRV]
 13751                                  					; set up sdsb
 13752 000009C4 07                      		pop	es		; restore bds pointer
 13753 000009C5 EB2E                    		jmp	short singleret
 13754                                  ; ---------------------------------------------------------------------------
 13755                                  
 13756                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 13757                                  ; we now check to see if we are in a single drive system and the application
 13758                                  ; has "cleverly" diddled the sdsb
 13759                                  
 13760                                  not_fsetowner:
 13761 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 13762 000009CC 7517                    		jnz	short ignore_sdsb
 13763 000009CE 50                      		push	ax
 13764 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 13765 000009D3 88C4                    		mov	ah, al
 13766 000009D5 06                      		push	es
 13767 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 13768 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 13769                                  		;xchg	al, es:504h	; [es:LSTDRV]
 13770                                  					; then swap(curr_drv,req_drv)
 13771 000009DF 07                      		pop	es
 13772 000009E0 38C4                    		cmp	ah, al		; else
 13773 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 13774 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 13775                                  ignore_sdsb:
 13776 000009E5 E8B310                  		call	swpdsk
 13777 000009E8 EB0B                    		jmp	short singleret
 13778                                  ; ---------------------------------------------------------------------------
 13779                                  
 13780                                  scan_skip:
 13781 000009EA 26C43D                  		les	di, [es:di]
 13782                                  		;les	di, es:[di]	; [es:di+BDS.link]
 13783                                  					; go to	next bds
 13784 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 13785 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 13786 000009F2 F9                      		stc
 13787 000009F3 5F                      		pop	di		; restore current bds
 13788 000009F4 07                      		pop	es
 13789                                  singleret:
 13790 000009F5 5B                      		pop	bx
 13791 000009F6 58                      		pop	ax
 13792 000009F7 C3                      		retn
 13793                                  
 13794                                  ; 22/12/2023
 13795                                  %if 0
 13796                                  ; ---------------------------------------------------------------------------
 13797                                  
 13798                                  baddrive:
 13799                                  		mov	al, 8		; sector not found
 13800                                  		jmp	short baddrive_ret
 13801                                  %endif
 13802                                  
 13803                                  ; ---------------------------------------------------------------------------
 13804                                  
 13805                                  unformatteddrive:
 13806 000009F8 B007                    		mov	al, 7		; unknown media
 13807                                  ;baddrive_ret:
 13808 000009FA F9                      		stc
 13809                                  ; ---------------------------------------------------------------------------
 13810                                  
 13811                                  ioret:
 13812 000009FB C3                      		retn
 13813                                  
 13814                                  ; ---------------------------------------------------------------------------
 13815                                  		
 13816                                  		; 22/12/2023 - Retro DOS v5.0
 13817                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 13818                                  
 13819 000009FC 10                      LBA_Packet:	db 16			; ...
 13820                                  					; DAP buffer
 13821 000009FD 00                                      db 0
 13822 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 13823 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 13824 00000A04 00000000                dap_lba_value:	dd 0			; ...
 13825 00000A08 00000000                		dd 0
 13826                                  
 13827                                  ; ---------------------------------------------------------------------------
 13828                                  
 13829                                  ; 15/10/2022
 13830                                  
 13831                                  ; ---------------------------------------------------------------------------
 13832                                  ;	disk i/o handler
 13833                                  ;
 13834                                  ;	al = drive number (0-6)
 13835                                  ;	ah = media descriptor
 13836                                  ;	cx = sector count
 13837                                  ;	dx = first sector (low)
 13838                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 13839                                  ;	ds = cs
 13840                                  ;	es:di = transfer address
 13841                                  ;	[rflag]=operation (2=read, 3=write)
 13842                                  ;	[verify]=1 for verify after write
 13843                                  ;
 13844                                  ;	if successful carry flag = 0
 13845                                  ;	  else cf=1 and al contains error code
 13846                                  ; ---------------------------------------------------------------------------
 13847                                  
 13848                                  		; 12/12/2023
 13849                                  		; ds = biosdata segment (cs = bioscode segment)
 13850                                  diskrd:	
 13851                                  		;mov	ds:rflag, 2	; romread
 13852                                  		; 19/10/2022
 13853 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 13854                                  
 13855                                  ; =============== S U B	R O U T	I N E =======================================
 13856                                  
 13857                                  		; 22/12/2023 - Retro DOS v5.0
 13858                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 13859                                  ; 22/12/2023
 13860                                  %if 0
 13861                                  		; 19/10/2022
 13862                                  diskio:
 13863                                  		mov	bx, di		; es:bx	= transfer address
 13864                                  		mov	[xfer_seg], es	; save transfer	segment
 13865                                  		call	SetDrive
 13866                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 13867                                  		mov	[medbyt], al
 13868                                  		;jcxz	short ioret
 13869                                  		jcxz	ioret
 13870                                  
 13871                                  ; see if the media is formatted or not by checking the flags field in
 13872                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 13873                                  ; go to the error exit at label unformatteddrive.
 13874                                  
 13875                                  		test	byte [es:di+24h], 2
 13876                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 13877                                  					; unformatted_media
 13878                                  		jnz	short unformatteddrive
 13879                                  		mov	[seccnt], cx	; save sector count
 13880                                  		mov	[spsav], sp	; save sp
 13881                                  
 13882                                  ; ensure that we are trying to access valid sectors on the drive
 13883                                  
 13884                                  		mov	ax, dx
 13885                                  		xor	si, si ; 0
 13886                                  		add	dx, cx
 13887                                  		;adc	si, 0
 13888                                  		; 02/09/2023 (PCDOS 7.1)
 13889                                  		rcl	si, 1
 13890                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 13891                                  					; 32 bit sector ?
 13892                                  		jz	short sanity32
 13893                                  		;cmp	si, 0
 13894                                  		; 02/09/2023
 13895                                  		or	si, si
 13896                                  		jnz	short baddrive
 13897                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 13898                                  		ja	short baddrive
 13899                                  		jmp	short sanityok
 13900                                  ; ---------------------------------------------------------------------------
 13901                                  
 13902                                  sanity32:
 13903                                  		add	si, [start_sec_h]
 13904                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 13905                                  		jb	short sanityok
 13906                                  		ja	short baddrive
 13907                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 13908                                  		ja	short baddrive
 13909                                  sanityok:
 13910                                  		mov	dx, [start_sec_h]
 13911                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 13912                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 13913                                  
 13914                                  ; now dx;ax have the physical first sector.
 13915                                  ; since the following procedures is going to destroy ax, let's
 13916                                  ; save it temporarily to saved_word.
 13917                                  
 13918                                  		mov	[saved_word], ax ; save the sector number (low)
 13919                                  
 13920                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 13921                                  ; will do it because we will skip the set up stuff with hard disks.
 13922                                  
 13923                                  		push	es
 13924                                  		;mov	es, [zeroseg]
 13925                                  		; 02/09/2023
 13926                                  		xor	si, si ; 0
 13927                                  		mov	es, si
 13928                                  		les	si, [es:DSKADR]
 13929                                  		;les	si, es:78h	; [es:DSKADR]
 13930                                  					; current disk parm table
 13931                                  		mov	[dpt], si
 13932                                  		mov	[dpt+2], es
 13933                                  		pop	es
 13934                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13935                                  					; fnon_removable
 13936                                  		jnz	short skip_setup
 13937                                  		call	checksingle
 13938                                  
 13939                                  ; check to see if we have previously noted a change line. the routine
 13940                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 13941                                  ; the proper error code.
 13942                                  
 13943                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 13944                                  		jz	short diskio_nochangeline ; brif not
 13945                                  		call	checklatchio	; will do a sneaky pop stack return
 13946                                  					; if a disk error occurs
 13947                                  diskio_nochangeline:			
 13948                                  		call	iosetup		; set up tables	and variables for i/o
 13949                                  
 13950                                  ; now the settle values are correct for the following code
 13951                                  
 13952                                  skip_setup:
 13953                                  
 13954                                  ; 32 bit sector calculation.
 13955                                  ; dx:[saved_word] = starting sector number.
 13956                                  				
 13957                                  		mov	ax, dx
 13958                                  		xor	dx, dx
 13959                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13960                                  					 ; divide by sec per track
 13961                                  		; 02/09/2023
 13962                                  		mov	cx, [es:di+13h]
 13963                                  		div	cx
 13964                                  		mov	[temp_h], ax
 13965                                  		mov	ax, [saved_word]
 13966                                  		div	cx ; 02/09/2023
 13967                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13968                                  					; now, [temp_h]:ax = track #, dx = sector
 13969                                  		;inc	dl		; sector number	is 1 based.
 13970                                  		; 18/12/2022
 13971                                  		inc	dx
 13972                                  		mov	[cursec], dl	; save current sector
 13973                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 13974                                  					; get number of	heads
 13975                                  		push	ax
 13976                                  		xor	dx, dx
 13977                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 13978                                  		div	cx
 13979                                  		mov	[temp_h], ax
 13980                                  		pop	ax
 13981                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 13982                                  		cmp	word [temp_h], 0
 13983                                  		ja	short baddrive_brdg
 13984                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 13985                                  		ja	short baddrive_brdg
 13986                                  		mov	[curhd], dl	; save current head
 13987                                  		mov	[curtrk], ax	; save current track
 13988                                  
 13989                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 13990                                  ; violations here. not true. we perform the operation as if everything is
 13991                                  ; symmetric; let the int 13 handler worry about the dma violations.
 13992                                  
 13993                                  		mov	ax, [seccnt]
 13994                                  		call	block		; (cas - call/ret)
 13995                                  		;call	done
 13996                                  		;retn
 13997                                  		; 18/12/2022
 13998                                  		jmp	done
 13999                                  %else
 14000                                  		;;;	; 22/12/2023
 14001                                  diskio:
 14002 00000A11 89FB                    		mov	bx, di		; al = drive number
 14003                                  					; cx = sector count
 14004                                  					; dx = first sector (low)
 14005                                  					; [start_sec_h] = first sector (high)
 14006                                  					;
 14007                                  					; es:bx = transfer address
 14008 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 14009 00000A17 E88AFB                  		call	SetDrive
 14010 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 14011 00000A1E A2[1F01]                		mov	[medbyt], al
 14012 00000A21 E3D8                    		jcxz	ioret
 14013                                  
 14014                                  ; see if the media is formatted or not by checking the flags field in
 14015                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 14016                                  ; go to the error exit at label unformatteddrive.
 14017                                  
 14018 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 14019                                  					; unformatted_media
 14020 00000A28 75CE                    		jnz	short unformatteddrive
 14021 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 14022 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 14023                                  
 14024                                  ; ensure that we are trying to access valid sectors on the drive
 14025                                  
 14026 00000A32 89D0                    		mov	ax, dx
 14027 00000A34 31F6                    		xor	si, si ; 0
 14028 00000A36 01CA                    		add	dx, cx
 14029 00000A38 D1D6                    		rcl	si, 1
 14030 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14031                                  					; > 32 bit sector ?
 14032 00000A3F 740E                    		jz	short sanity32
 14033 00000A41 09F6                    		or	si, si
 14034 00000A43 7506                    		jnz	short baddrive
 14035 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14036                                  		;ja	short baddrive
 14037                                  		;jmp	short sanityok
 14038                                  		; 22/12/2023
 14039 00000A49 7616                    		jna	short sanityok
 14040                                  ; 29/12/2023
 14041                                  ; 22/12/2023
 14042                                  ;%if 1
 14043                                  ; ---------------------------------------------------------------------------
 14044                                  
 14045                                  baddrive:
 14046 00000A4B B008                    		mov	al, 8		; sector not found
 14047                                  		;jmp	short baddrive_ret
 14048                                  ; ---------------------------------------------------------------------------
 14049                                  ;unformatteddrive:
 14050                                  		;mov	al, 7		; unknown media
 14051                                  baddrive_ret:
 14052 00000A4D F9                      		stc
 14053                                  ;ioret:
 14054 00000A4E C3                      		retn
 14055                                  ;%endif
 14056                                  
 14057                                  ; ---------------------------------------------------------------------------
 14058                                  
 14059                                  sanity32:
 14060 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 14061 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 14062 00000A57 7208                    		jb	short sanityok
 14063 00000A59 77F0                    		ja	short baddrive
 14064 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 14065 00000A5F 77EA                    		ja	short baddrive
 14066                                  sanityok:
 14067 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 14068 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14069 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14070                                  
 14071                                  ; now dx;ax have the physical first sector.
 14072                                  ; since the following procedures is going to destroy ax, let's
 14073                                  ; save it temporarily to saved_word.
 14074                                  
 14075 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 14076                                  
 14077                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 14078                                  ; will do it because we will skip the set up stuff with hard disks.
 14079                                  
 14080 00000A70 06                      		push	es
 14081 00000A71 31F6                    		xor	si, si ; 0
 14082 00000A73 8EC6                    		mov	es, si
 14083                                  		;les	si, dword ptr es:78h
 14084 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 14085                                  					; [es:DSKADR] - current disk parm table
 14086 00000A7A 8936[2D01]              		mov	[dpt], si
 14087 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 14088 00000A82 07                      		pop	es
 14089 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14090 00000A88 7510                    		jnz	short chk_13h_ext_flag
 14091 00000A8A E8EAFE                  		call	checksingle
 14092                                  
 14093                                  ; check to see if we have previously noted a change line. the routine
 14094                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 14095                                  ; the proper error code.
 14096                                  
 14097 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 14098 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 14099 00000A94 E8D210                  		call	checklatchio	; will do a sneaky pop stack return
 14100                                  					; if a disk error occurs
 14101                                  diskio_nochangeline:
 14102 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 14103                                  
 14104                                  chk_13h_ext_flag:
 14105 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 14106                                  					; LBA read/write flag
 14107 00000A9F 7539                    		jnz	short set_lbarw_1
 14108                                  		;jmp	skip_setup
 14109                                  		; 22/12/2023
 14110                                  ; ---------------------------------------------------------------------------
 14111                                  
 14112                                  ; now the settle values are correct for the following code
 14113                                  
 14114                                  skip_setup:
 14115                                  
 14116                                  ; 32 bit sector calculation.
 14117                                  ; dx:[saved_word] = starting sector number.
 14118                                  
 14119                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 14120 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 14121 00000AA2 31D2                    		xor	dx, dx
 14122 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14123                                  					; divide by sec per track
 14124 00000AA8 F7F1                    		div	cx
 14125 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 14126 00000AAB A1[9E04]                		mov	ax, [saved_word]
 14127 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 14128                                  					; now, bp:ax = track #, dx = sector
 14129                                  					; sector number is 1 based.
 14130 00000AB0 42                      		inc	dx
 14131 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 14132 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 14133                                  					; get number of heads
 14134                                  		; 22/12/2023
 14135                                  		;push	ax ; *
 14136 00000AB9 31D2                    		xor	dx, dx
 14137 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 14138 00000ABC F7F1                    		div	cx
 14139 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 14140                                  		;pop	ax ; *
 14141 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 14142 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 14143                                  		;pop	bp ; ! ; 22/12/2023
 14144                                  		;jnz	short baddrive_brdg
 14145                                  		; 22/12/2023
 14146 00000AC3 7586                    		jnz	short baddrive
 14147                                  
 14148                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 14149                                  		;jnb	short baddrive_brdg
 14150                                  		; 22/12/2023
 14151 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 14152 00000AC8 7381                    		jnb	short baddrive 
 14153                                  
 14154 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 14155 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 14156                                  
 14157                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 14158                                  ; violations here. not true. we perform the operation as if everything is
 14159                                  ; symmetric; let the int 13 handler worry about the dma violations.
 14160                                  
 14161 00000AD1 A1[2201]                		mov	ax, [seccnt]
 14162 00000AD4 E81F01                  		call	block
 14163                                  		;call	done
 14164                                  		;retn
 14165                                  		; 22/12/2023
 14166 00000AD7 E9E500                  		jmp	done
 14167                                  		
 14168                                  ; ---------------------------------------------------------------------------
 14169                                  
 14170                                  set_lbarw_1:
 14171 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 14172                                  					 ; (logical dos drive/partition)
 14173 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 14174                                  					    ; logical dos partition
 14175 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 14176 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 14177 00000AE9 7408                    		jz	short set_lbarw_2
 14178 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14179 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14180                                  
 14181                                  set_lbarw_2:
 14182 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 14183 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 14184 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 14185 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 14186 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 14187 00000B08 A1[2201]                		mov	ax, [seccnt]
 14188 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 14189 00000B0F BD0500                  		mov	bp, 5
 14190 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14191 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 14192                                  
 14193                                  set_lbarw_3:
 14194 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14195 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14196 00000B22 80C440                  		add	ah, 40h
 14197 00000B25 30C0                    		xor	al, al
 14198 00000B27 1E                      		push	ds
 14199 00000B28 0E                      		push	cs
 14200 00000B29 1F                      		pop	ds
 14201 00000B2A BE[FC09]                		mov	si, LBA_Packet
 14202 00000B2D CD13                    		int	13h		; LBA read/write
 14203 00000B2F 1F                      		pop	ds
 14204 00000B30 731A                    		jnc	short set_lbarw_7
 14205 00000B32 E8AC02                  		call	again
 14206                                  set_lbarw_9:
 14207 00000B35 7503                    		jnz	short set_lbarw_4
 14208 00000B37 E92B02                  		jmp	harderr
 14209                                  ; ---------------------------------------------------------------------------
 14210                                  
 14211                                  set_lbarw_4:
 14212                                  ;set_lbarw_9:	; 22/12/2023
 14213 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 14214 00000B3D 7505                    		jnz	short set_lbarw_5
 14215 00000B3F BD0100                  		mov	bp, 1
 14216                                  		;jmp	short set_lbarw_6
 14217                                  		; 17/04/2024
 14218 00000B42 EBD6                    		jmp	short set_lbarw_3
 14219                                  ; ---------------------------------------------------------------------------
 14220                                  
 14221                                  set_lbarw_5:
 14222                                  set_lbarw_10:	; 22/12/2023
 14223 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14224                                  set_lbarw_6:
 14225                                  set_lbarw_11:
 14226 00000B4A EBCE                    		jmp	short set_lbarw_3
 14227                                  ; ---------------------------------------------------------------------------
 14228                                  
 14229                                  set_lbarw_7:
 14230 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 14231 00000B52 7523                    		jnz	short set_lbarw_12
 14232 00000B54 B444                    		mov	ah, 44h
 14233 00000B56 1E                      		push	ds
 14234 00000B57 0E                      		push	cs
 14235 00000B58 1F                      		pop	ds
 14236 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 14237                                  					;  (DL - drive, [SI - disk address packet)
 14238 00000B5B 1F                      		pop	ds
 14239 00000B5C 7319                    		jnc	short set_lbarw_12
 14240 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 14241 00000B61 7506                    		jnz	short set_lbarw_8
 14242 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14243                                  ;set_lbarw_8:
 14244 00000B67 740E                    		jz	short set_lbarw_12
 14245                                  set_lbarw_8:
 14246 00000B69 E8CF07                  		call	ResetDisk
 14247 00000B6C 80FC11                  		cmp	ah, 11h
 14248 00000B6F 74D9                    		jz	short set_lbarw_11
 14249 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 14250                                  		;jnz	short set_lbarw_9
 14251                                  		;jmp	harderr
 14252                                  		; 22/12/2023
 14253 00000B75 EBBE                    		jmp	short set_lbarw_9
 14254                                  
 14255                                  ; ---------------------------------------------------------------------------
 14256                                  ;		; 22/12/2023
 14257                                  ;set_lbarw_9:
 14258                                  ;		cmp	ah, 0CCh
 14259                                  ;		jnz	short set_lbarw_10
 14260                                  ;		mov	bp, 1
 14261                                  ;		jmp	short set_lbarw_11
 14262                                  ; ---------------------------------------------------------------------------
 14263                                  ;		; 22/12/2023
 14264                                  ;set_lbarw_10:
 14265                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14266                                  ;set_lbarw_11:
 14267                                  ;		jmp	short set_lbarw_3
 14268                                  ; ---------------------------------------------------------------------------
 14269                                  
 14270                                  set_lbarw_12:
 14271 00000B77 31C0                    		xor	ax, ax
 14272                                  skip_dpt_setting:	; 23/12/2023
 14273 00000B79 C3                      		retn
 14274                                  		;;;	; 22/12/2023
 14275                                  %endif
 14276                                  
 14277                                  ; ---------------------------------------------------------------------------
 14278                                  
 14279                                  		; 22/12/2023
 14280                                  ;baddrive_brdg:
 14281                                  		;jmp	baddrive
 14282                                  
 14283                                  ; =============== S U B	R O U T	I N E =======================================
 14284                                  
 14285                                  ;--------------------------------------------------------------
 14286                                  ; set the drive-last-accessed flag for diskette only.
 14287                                  ; we know that the hard disk will not be removed.
 14288                                  ; es:di -> current bds.
 14289                                  ; ds -> Bios_Data
 14290                                  ; ax,cx,si are destroyed.
 14291                                  ;--------------------------------------------------------------
 14292                                  
 14293                                  		; 23/12/2023 - Retro DOS v5.0
 14294                                  
 14295                                  		; 19/10/2022
 14296                                  iosetup:
 14297 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14298 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 14299                                  
 14300                                  ; determine proper head settle values
 14301                                  
 14302 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14303 00000B86 75F1                    		jnz	short skip_dpt_setting
 14304 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 14305 00000B8B 1E                      		push	ds
 14306 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14307 00000B90 884404                  		mov	[si+4],	al
 14308                                  		
 14309                                  		;; 23/12/2023
 14310                                  		;mov	ah, al
 14311                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14312                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 14313                                  		;pop	ds
 14314                                  		;mov	[motorstartup], al
 14315                                  		;mov	[save_eot], ah
 14316                                  		; 06/04/2024
 14317 00000B93 8A640A                  		mov	ah,[si+10]
 14318 00000B96 1F                      		pop	ds
 14319 00000B97 8826[2601]              		mov	[motorstartup], ah
 14320 00000B9B A2[2B01]                		mov	[save_eot], al
 14321                                  
 14322                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 14323                                  ; motor start time to 4. this checking for every i/o is going to affect
 14324                                  ; performance across the board, but is necessary!!
 14325                                  
 14326 00000B9E 1E                      		push	ds
 14327 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14328                                  		; 23/12/2023  - Retro DOS v5.0
 14329 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 14330                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14331                                  					; ffSmall
 14332 00000BA8 7505                    		jnz	short motor_start_ok
 14333 00000BAA B004                    		mov	al, 4
 14334 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14335                                  motor_start_ok:
 14336                                  
 14337                                  ; ds:si now points to disk parameter table.
 14338                                  ; get current settle and set fast settle
 14339                                  
 14340                                  		;xor	al, al
 14341                                  		;inc	al		; ibm wants fast settle	to be 1
 14342                                  		; 18/12/2022
 14343 00000BAF 31C0                    		xor	ax, ax
 14344 00000BB1 40                      		inc	ax
 14345 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14346                                  					; get settle and set up	for fast
 14347 00000BB5 1F                      		pop	ds
 14348 00000BB6 A2[2701]                		mov	[settlecurrent], al
 14349 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 14350                                  					; someone has diddled the settle
 14351 00000BBB A2[2801]                		mov	[settleslow], al
 14352                                  		; 23/12/2023
 14353                                  ;skip_dpt_setting:
 14354 00000BBE C3                      		retn
 14355                                  
 14356                                  ; =============== S U B	R O U T	I N E =======================================
 14357                                  
 14358                                  ;--------------------------------------------------------------
 14359                                  ; set time of last access, and reset default values in the dpt.
 14360                                  ;
 14361                                  ;	  note: trashes (at least) si
 14362                                  ;--------------------------------------------------------------
 14363                                  
 14364                                  		; 23/12/2023 - Retro DOS v5.0
 14365                                  
 14366                                  		; 19/10/2022
 14367                                  done:		
 14368                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14369                                  					; fnon_removable
 14370                                  		; 23/12/2023
 14371 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14372 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 14373 00000BC6 E8F801                  		call	set_tim
 14374                                  ;diddleback:
 14375                                  ; 09/12/2022
 14376                                  diddle_back:
 14377 00000BC9 9C                      		pushf
 14378 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14379 00000BCF 7523                    		jnz	short nodiddleback
 14380 00000BD1 50                      		push	ax
 14381 00000BD2 06                      		push	es
 14382 00000BD3 C436[2D01]              		les	si, [dpt]
 14383 00000BD7 A0[2B01]                		mov	al, [save_eot]
 14384 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 14385 00000BDE A0[2701]                		mov	al, [settlecurrent]
 14386 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 14387 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14388 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 14389 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 14390 00000BF2 07                      		pop	es
 14391 00000BF3 58                      		pop	ax
 14392                                  nodiddleback:
 14393 00000BF4 9D                      		popf
 14394                                  ddbx:
 14395 00000BF5 C3                      		retn
 14396                                  
 14397                                  ; =============== S U B	R O U T	I N E =======================================
 14398                                  
 14399                                  ;--------------------------------------------------------------
 14400                                  ;read the number of sectors specified in ax,
 14401                                  ;handling track boundaries
 14402                                  ;es:di -> bds for this drive
 14403                                  ;--------------------------------------------------------------
 14404                                  
 14405                                  		; 23/12/2023 - Retro DOS v5.0
 14406                                  
 14407                                  		; 19/10/2022
 14408                                  block:	
 14409 00000BF6 09C0                    		or	ax, ax
 14410 00000BF8 74FB                    		jz	short ddbx
 14411                                  		; 23/12/2023
 14412 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14413                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14414                                  					    ; fnon_removable
 14415 00000BFF 740D                    		jz	short block_floppy
 14416                                  
 14417                                  ; check	to see if multi	track operation	is allowed. if not
 14418                                  ; we have to go	to the block_floppy below to break up the operation.
 14419                                  
 14420 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 14421                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 14422 00000C06 7406                    		jz	short block_floppy
 14423 00000C08 E82800                  		call	Disk
 14424 00000C0B 31C0                    		xor	ax, ax
 14425 00000C0D C3                      		retn
 14426                                  ; ---------------------------------------------------------------------------
 14427                                  
 14428                                  block_floppy:
 14429                                  
 14430                                  ; read at most 1 track worth. perform minimization at sector / track
 14431                                  
 14432 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 14433                                  		;inc	cl
 14434                                  		; 23/12/2023
 14435 00000C12 41                      		inc	cx
 14436 00000C13 2A0E[3101]              		sub	cl, [cursec]
 14437 00000C17 30ED                    		xor	ch, ch
 14438 00000C19 39C8                    		cmp	ax, cx
 14439 00000C1B 7302                    		jnb	short gotmin
 14440 00000C1D 89C1                    		mov	cx, ax
 14441                                  gotmin:
 14442                                  
 14443                                  ; ax is the requested number of sectors to read
 14444                                  ; cx is the number that we can do on this track
 14445                                  
 14446 00000C1F 50                      		push	ax
 14447 00000C20 51                      		push	cx
 14448 00000C21 89C8                    		mov	ax, cx
 14449 00000C23 E80D00                  		call	Disk
 14450 00000C26 59                      		pop	cx
 14451 00000C27 58                      		pop	ax
 14452                                  
 14453                                  ; cx is the number of sectors just transferred
 14454                                  
 14455 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 14456 00000C2A D0E1                    		shl	cl, 1
 14457 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 14458 00000C2E EBC6                    		jmp	short block
 14459                                  dskerr_brdg:
 14460 00000C30 E9F400                  		jmp	dskerr
 14461                                  
 14462                                  ; =============== S U B	R O U T	I N E =======================================
 14463                                  
 14464                                  ; 15/10/2022
 14465                                  
 14466                                  ;--------------------------------------------------------------
 14467                                  ;perform disk i/o with retries
 14468                                  ; al = number of sectors (1-8, all on one track)
 14469                                  ; es:di point to drive parameters
 14470                                  ; xfer_seg:bx = transfer address 
 14471                                  ;		(must not cross a 64k physical boundary)
 14472                                  ; [rflag] = 2 if read, 3 if write
 14473                                  ; [verify] = 0 for normal, 1 for verify after write
 14474                                  ;--------------------------------------------------------------
 14475                                  
 14476                                  		; 18/04/2024
 14477                                  		; 23/12/2023 - Retro DOS v5.0
 14478                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 14479                                  
 14480                                  		; 19/10/2022
 14481                                  Disk:
 14482                                  
 14483                                  ; Check for hard disk format and
 14484                                  ; if TRUE then set max error count to 2
 14485                                  
 14486 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 14487                                  					; set up retry count
 14488                                  		; 18/04/2024
 14489                                  		;; 23/12/2023
 14490                                  		;mov	cl, [es:di+3Fh]
 14491                                  		;and	cx, 1
 14492 00000C36 26F6453F01              		test	byte [es:di+3Fh], 1
 14493                                  		;test	byte [es:di+23h], 1 
 14494                                  					; [es:di+BDS.flags], fnon_removable
 14495 00000C3B 7408                    		jz	short GetRdWrInd
 14496 00000C3D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 14497 00000C40 7403                    		jz	short GetRdWrInd
 14498 00000C42 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 14499                                  GetRdWrInd:				
 14500 00000C45 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14501 00000C49 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 14502 00000C4D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14503                                  ;retry:
 14504                                  ; 09/12/2022
 14505                                  _retry:
 14506 00000C51 50                      		push	ax
 14507 00000C52 8B16[3301]              		mov	dx, [curtrk]
 14508                                  		;; 23/12/2023
 14509                                  		;jcxz	disk_not_mini
 14510                                  		; 18/04/2024
 14511 00000C56 26F6453F01              		test	byte [es:di+3Fh], 1
 14512                                  		;test	byte [es:di+23h], 1
 14513 00000C5B 740B                    		jz	short disk_not_mini
 14514                                  
 14515                                  		; 23/12/2023
 14516 00000C5D 26837D7901              		cmp	word [es:di+79h], 1
 14517                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 14518                                  					; is this a mini disk? ((logical dos partition))
 14519 00000C62 7504                    		jnz	short disk_not_mini ; no. continue to next.
 14520                                  		; 23/12/2023
 14521 00000C64 2603557B                		add     dx, [es:di+7Bh]
 14522                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 14523                                  					; add hidden trks.
 14524                                  disk_not_mini:
 14525 00000C68 D0CE                    		ror	dh, 1
 14526 00000C6A D0CE                    		ror	dh, 1
 14527 00000C6C 0A36[3101]              		or	dh, [cursec]
 14528 00000C70 89D1                    		mov	cx, dx
 14529 00000C72 86CD                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 14530 00000C74 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 14531 00000C78 268A5504                		mov	dl, [es:di+4]	; physical drive number
 14532                                  					; [es:di+BDS.drivenum]
 14533                                  		; 23/12/2023
 14534 00000C7C 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 14535                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 14536 00000C81 7411                    		jz	short do_fast	; hard files use fast speed
 14537                                  
 14538                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 14539                                  ; this helps when we have just done a reset disk operation and the head has
 14540                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 14541                                  
 14542 00000C83 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 14543                                  		;jz	short do_writej
 14544                                  		; 23/12/2023
 14545 00000C88 746A                    		jz	short do_write
 14546 00000C8A 80FC02                  		cmp	ah, 2		; romread
 14547 00000C8D 7405                    		jz	short do_fast
 14548 00000C8F 80FC04                  		cmp	ah, 4		; romverify
 14549                                  		;jz	short do_fast
 14550                                  		; 23/12/2023
 14551 00000C92 7560                    		jnz	short do_write
 14552                                  ;do_writej:
 14553                                  
 14554                                  ; reads always fast, unless we have just done a disk reset operation
 14555                                  			
 14556                                  		;jmp	short do_write	; reads	always fast
 14557                                  ; ---------------------------------------------------------------------------
 14558                                  
 14559                                  do_fast:
 14560 00000C94 E80501                  		call	fastspeed	; change settle	mode
 14561                                  testerr:
 14562 00000C97 7297                    		jb	short dskerr_brdg
 14563                                  
 14564                                  		; 23/12/2023 Retro DOS v5.0
 14565                                  		; (PCDOS 7.1 IBMBIO.COM)
 14566 00000C99 83FD05                  		cmp	bp, 5		; is there retry ?
 14567 00000C9C 7505                    		jnz	short testerror	; yes
 14568 00000C9E 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 14569 00000CA1 748D                    		jz	short dskerr_brdg
 14570                                  testerror:
 14571                                  
 14572                                  ; set drive and track of last access
 14573                                  
 14574 00000CA3 8816[7600]              		mov	[step_drv], dl
 14575                                  		; 23/12/2023
 14576 00000CA7 26886D78                		mov	[es:di+78h], ch
 14577                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14578                                  no_set:
 14579                                  		;cmp	word [wrtverify], 103h
 14580 00000CAB 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 14581 00000CB1 7452                    		jz	short doverify
 14582                                  noverify:
 14583 00000CB3 58                      		pop	ax
 14584                                  
 14585                                  ; check the flags word in the bds to see if the drive is non removable
 14586                                  ; if not we needn't do anything special
 14587                                  ; if it is a hard disk then check to see if multi-track operation
 14588                                  ; is specified. if specified we don't have to calculate for the next
 14589                                  ; track since we are already done. so we can go to the exit of this routine.
 14590                                  
 14591                                  		; 23/12/2023
 14592 00000CB4 26F6453F01              		test	byte [es:di+3Fh], 1
 14593                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14594                                  					; fnon_removable
 14595 00000CB9 7407                    		jz	short its_removable
 14596 00000CBB F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 14597 00000CC0 7530                    		jnz	short disk_ret
 14598                                  its_removable:
 14599 00000CC2 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 14600 00000CC5 30E4                    		xor	ah, ah
 14601 00000CC7 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 14602 00000CCB 00C1                    		add	cl, al
 14603 00000CCD 880E[3101]              		mov	[cursec], cl
 14604 00000CD1 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 14605                                  					; see if sector/track limit reached
 14606 00000CD5 761B                    		jbe	short disk_ret
 14607 00000CD7 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 14608 00000CDC 8A36[3201]              		mov	dh, [curhd]
 14609 00000CE0 FEC6                    		inc	dh
 14610 00000CE2 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 14611 00000CE6 7206                    		jb	short noxor
 14612 00000CE8 30F6                    		xor	dh, dh
 14613 00000CEA FF06[3301]              		inc	word [curtrk]
 14614                                  noxor:
 14615 00000CEE 8836[3201]              		mov	[curhd], dh
 14616                                  disk_ret:
 14617 00000CF2 F8                      		clc
 14618 00000CF3 C3                      		retn
 14619                                  ; ---------------------------------------------------------------------------
 14620                                  
 14621                                  ; 15/10/2022
 14622                                  
 14623                                  ; 24/12/2023 - Retro DOS v5.0
 14624                                  
 14625                                  ;--------------------------------------------------------------
 14626                                  ; the request is for write. determine if we are talking about
 14627                                  ; the same track and drive. if so, use the fast speed.
 14628                                  ;--------------------------------------------------------------
 14629                                  
 14630                                  do_write:
 14631 00000CF4 3A16[7600]              		cmp	dl, [step_drv]
 14632 00000CF8 7506                    		jnz	short do_norm	; we have changed drives
 14633                                  		; 24/12/2023
 14634 00000CFA 263A6D78                		cmp	ch, [es:di+78h]
 14635                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 14636 00000CFE 7494                    		jz	short do_fast	; we are still on the same track
 14637                                  do_norm:
 14638 00000D00 E87500                  		call	normspeed
 14639 00000D03 EB92                    		jmp	short testerr
 14640                                  ; ---------------------------------------------------------------------------
 14641                                  
 14642                                  ;--------------------------------------------------------------
 14643                                  ; we have a verify request also. get state info and go verify
 14644                                  ;--------------------------------------------------------------
 14645                                  
 14646                                  doverify:
 14647 00000D05 58                      		pop	ax
 14648 00000D06 50                      		push	ax
 14649 00000D07 B404                    		mov	ah, 4
 14650 00000D09 E89000                  		call	fastspeed
 14651 00000D0C 73A5                    		jnb	short noverify
 14652                                  
 14653                                  ; check the error returned in ah to see if it is a soft ecc error.
 14654                                  ; if it is not we needn't do anything special. if it is a soft
 14655                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 14656                                  ; this retry count becomes 0 then we just ignore the error and go to
 14657                                  ; no_verify but if we can still try then we call the routine to reset
 14658                                  ; the disk and go to dskerr1 to retry the operation.
 14659                                  
 14660 00000D0E 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 14661 00000D11 750B                    		jnz	short not_softecc_err
 14662 00000D13 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14663 00000D17 749A                    		jz	short noverify	; no more retry
 14664 00000D19 E81F06                  		call	ResetDisk	; reset	disk
 14665 00000D1C EB3E                    		jmp	short dskerr1	; retry
 14666                                  ; ---------------------------------------------------------------------------
 14667                                  
 14668                                  not_softecc_err:			; other error.
 14669 00000D1E E81A06                  		call	ResetDisk
 14670 00000D21 FF0E[A304]              		dec	word [vretry_cnt]
 14671 00000D25 EB1C                    		jmp	short dskerr0
 14672                                  ; ---------------------------------------------------------------------------
 14673                                  
 14674                                  ;--------------------------------------------------------------
 14675                                  ; need to special case the change-line error ah=06h.
 14676                                  ; if we get this, we need to return it.
 14677                                  ;--------------------------------------------------------------
 14678                                  
 14679                                  dskerr:
 14680 00000D27 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 14681 00000D2C 7403                    		jz	short dskerr_nochangeline ; brif not
 14682 00000D2E E8BE0E                  		call	checkio
 14683                                  dskerr_nochangeline:
 14684 00000D31 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 14685 00000D36 7508                    		jnz	short dochkagain ; no more retry.
 14686 00000D38 BD0100                  		mov	bp, 1
 14687 00000D3B C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 14688                                  dochkagain:
 14689 00000D40 E89E00                  		call	again
 14690                                  dskerr0:
 14691 00000D43 7420                    		jz	short harderr
 14692                                  		; 24/12/2023
 14693 00000D45 26F6453F01              		test	byte [es:di+3Fh], 1
 14694                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14695                                  					; fnon_removable
 14696 00000D4A 7505                    		jnz	short skip_timeout_chk
 14697 00000D4C 80FC80                  		cmp	ah, 80h		; timeout?
 14698 00000D4F 7414                    		jz	short harderr
 14699                                  skip_timeout_chk:
 14700 00000D51 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 14701 00000D54 740A                    		jz	short write_fault_err ;	then, don't retry.
 14702 00000D56 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 14703                                  					; set soft_ecc_cnt back	to maxerr
 14704                                  dskerr1:
 14705 00000D5C 58                      		pop	ax		; restore sector count
 14706                                  		;jmp	retry
 14707                                  		; 09/12/2022
 14708 00000D5D E9F1FE                  		jmp	_retry
 14709                                  ; ---------------------------------------------------------------------------
 14710                                  
 14711                                  write_fault_err:
 14712 00000D60 BD0100                  		mov	bp, 1		; just retry only once
 14713                                  					; for write fault error.
 14714 00000D63 EBF7                    		jmp	short dskerr1
 14715                                  
 14716                                  		; fall into harderr
 14717                                  ; ---------------------------------------------------------------------------
 14718                                  
 14719                                  ; entry point for routines that call maperror themselves
 14720                                  
 14721                                  harderr:
 14722 00000D65 E84100                  		call	maperror
 14723                                  harderr2:
 14724 00000D68 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 14725                                  					; force a media check through rom
 14726 00000D6D 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 14727 00000D71 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 14728                                  
 14729                                  ; since we are performing a non-local goto, restore the disk parameters
 14730                                  
 14731                                  		;jmp	diddleback
 14732                                  		; 09/12/2022
 14733 00000D75 E951FE                  		jmp	diddle_back
 14734                                  
 14735                                  ; =============== S U B	R O U T	I N E =======================================
 14736                                  
 14737                                  ; change settle value from settlecurrent to whatever is appropriate
 14738                                  ; note that this routine is never called for a fixed disk.
 14739                                  
 14740                                  		; 19/10/2022
 14741                                  normspeed:
 14742 00000D78 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14743 00000D7D 751D                    		jnz	short fastspeed
 14744 00000D7F 06                      		push	es
 14745 00000D80 50                      		push	ax
 14746 00000D81 A0[2801]                		mov	al, [settleslow]
 14747 00000D84 C436[2D01]              		les	si, [dpt]	; current disk parm table
 14748 00000D88 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14749 00000D8C 58                      		pop	ax
 14750 00000D8D 07                      		pop	es
 14751 00000D8E E80B00                  		call	fastspeed
 14752                                  		; 24/12/2023
 14753                                  		;push	es
 14754                                  		;les	si, [dpt]
 14755                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14756                                  		;			; 1 is fast settle value
 14757                                  		;pop	es
 14758 00000D91 1E                      		push	ds
 14759 00000D92 C536[2D01]              		lds	si, [dpt]
 14760 00000D96 C6440901                		mov	byte [si+9], 1
 14761 00000D9A 1F                      		pop	ds
 14762                                  
 14763 00000D9B C3                      		retn
 14764                                  
 14765                                  ; =============== S U B	R O U T	I N E =======================================
 14766                                  
 14767                                  ; if the drive has been marked as too big (i.e. starting sector of the
 14768                                  ; partition is > 16 bits, then always return drive not ready.
 14769                                  
 14770                                  		; 24/12/2023 - Retro DOS v5.0
 14771                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 14772                                  fastspeed:
 14773                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 14774                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 14775                                  		;			; ftoobig
 14776                                  		;jnz	short notready
 14777 00000D9C 06                      		push	es
 14778 00000D9D 8E06[A804]              		mov	es, [xfer_seg]
 14779 00000DA1 CD13                    		int	13h		; DISK -
 14780 00000DA3 8C06[A804]              		mov	[xfer_seg], es
 14781 00000DA7 07                      		pop	es
 14782 00000DA8 C3                      		retn
 14783                                  ; ---------------------------------------------------------------------------
 14784                                  ;		; 24/12/2023
 14785                                  ;notready:
 14786                                  		;stc
 14787                                  		;mov	ah, 80h
 14788                                  		;retn
 14789                                  
 14790                                  ; =============== S U B	R O U T	I N E =======================================
 14791                                  
 14792                                  ; map error returned by rom in ah into corresponding code to be returned to
 14793                                  ; dos in al. trashes di. guaranteed to set carry.
 14794                                  
 14795                                  maperror:
 14796 00000DA9 51                      		push	cx
 14797 00000DAA 06                      		push	es
 14798 00000DAB 1E                      		push	ds		; set es=Bios_Data
 14799 00000DAC 07                      		pop	es
 14800 00000DAD 88E0                    		mov	al, ah		; put error code in al
 14801 00000DAF A2[4601]                		mov	[lsterr], al	; terminate list with error code
 14802                                  		; 24/12/2023
 14803 00000DB2 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 14804                                  		;mov	cx, 9		; numerr (= errout-errin)
 14805                                  					; number of possible error conditions
 14806 00000DB5 BF[3C01]                		mov	di, errin	; point to error conditions
 14807 00000DB8 F2AE                    		repne scasb
 14808                                  
 14809                                  		; 24/12/2023
 14810                                  		; 02/09/2023
 14811 00000DBA 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 14812                                  		; 10/12/2022
 14813                                  		;mov	al, [di+8]	; [di+numerr-1]
 14814                                  					; get translation
 14815                                  		; 19/10/2022 - Temporary ! 
 14816                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 14817 00000DBD 07                      		pop	es
 14818 00000DBE 59                      		pop	cx
 14819 00000DBF F9                      		stc			; flag error condition
 14820 00000DC0 C3                      		retn
 14821                                  
 14822                                  ; =============== S U B	R O U T	I N E =======================================
 14823                                  
 14824                                  ; set the time of last access for this drive.
 14825                                  ; this is done only for removable media. es:di -> bds
 14826                                  
 14827                                  set_tim:
 14828 00000DC1 50                      		push	ax
 14829 00000DC2 E86CF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 14830                                  
 14831                                  ; we have the new time. if we see that the time has passed,
 14832                                  ; then we reset the threshold counter...
 14833                                  
 14834                                  		; 24/12/2023 - Retro DOS v5.0
 14835 00000DC5 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 14836                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 14837 00000DC9 7506                    		jne	short setaccess
 14838                                  		; 24/12/2023
 14839 00000DCB 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 14840                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 14841                                  		;jz	short done_set
 14842                                  		; 12/12/2022
 14843 00000DCF 740E                    		je	short done_set2
 14844                                  setaccess:
 14845 00000DD1 C606[1D01]00            		mov	byte [accesscount], 0
 14846                                  		
 14847                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14848 00000DD6 26895579                		mov	[es:di+79h], dx
 14849 00000DDA 26894D7B                		mov	[es:di+7Bh], cx
 14850                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 14851                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 14852                                  done_set:
 14853 00000DDE F8                      		clc
 14854                                  done_set2:		; 12/12/2022
 14855 00000DDF 58                      		pop	ax
 14856 00000DE0 C3                      		retn
 14857                                  
 14858                                  ; =============== S U B	R O U T	I N E =======================================
 14859                                  
 14860                                  ; this routine is called if an error occurs while formatting or verifying.
 14861                                  ; it resets the drive,and decrements the retry count.
 14862                                  ; on entry - ds:di - points to bds for the drive
 14863                                  ;	     bp    - contains retry count
 14864                                  ; on exit    flags indicate result of decrementing retry count
 14865                                  
 14866                                  again:
 14867 00000DE1 E85705                  		call	ResetDisk
 14868 00000DE4 80FC06                  		cmp	ah, 6
 14869 00000DE7 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 14870                                  					; do not decrement retry count.
 14871 00000DE9 4D                      		dec	bp		; decrement retry count
 14872 00000DEA C3                      		retn
 14873                                  ; ---------------------------------------------------------------------------
 14874                                  
 14875                                  dont_dec_retry_count:
 14876 00000DEB 08E4                    		or	ah, ah
 14877 00000DED C3                      		retn
 14878                                  
 14879                                  ;----------------------------------------------------------------------------
 14880                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 14881                                  ;----------------------------------------------------------------------------
 14882                                  ; 24/12/2023 - Retro DOS v5.0
 14883                                  ;;;;
 14884                                  
 14885 00000DEE 00                      ioctl_drvnum:	db 0
 14886                                  
 14887                                  		; 24/12/2023
 14888                                  
 14889                                  ; =============== S U B R O U T I N E =======================================
 14890                                  
 14891                                  get_phy_drv_num:
 14892 00000DEF E8B2F7                  		call	SetDrive	; get physical drive number
 14893                                  					; INPUT: al = logical drive number (BDS.drivelet)
 14894                                  					; OUTPUT: physical drive number (BDS.drivenum)
 14895 00000DF2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14896 00000DF6 C3                      		retn
 14897                                  
 14898                                  ; =============== S U B R O U T I N E =======================================
 14899                                  
 14900                                  		; 24/12/2023
 14901                                  ioctl_output:
 14902 00000DF7 E8F5FF                  		call	get_phy_drv_num
 14903 00000DFA 2E8816[EE0D]            		mov	[cs:ioctl_drvnum], dl
 14904 00000DFF B441                    		mov	ah, 41h
 14905 00000E01 BBAA55                  		mov	bx, 55AAh
 14906 00000E04 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 14907                                  					; BX = 55AAh, DL = drive number
 14908                                  					; Return: CF set if not supported
 14909                                  					; AH = extensions version
 14910                                  					; BX = AA55h
 14911                                  					; CX = Interface support bit map
 14912 00000E06 7235                    		jc	short int13h_exts_err
 14913                                  ioctl_input_1:
 14914 00000E08 C43E[1200]              		les	di, [ptrsav]
 14915 00000E0C 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 14916 00000E10 723E                    		jc	short ioctl_input_2
 14917 00000E12 B80046                  		mov	ax, 4600h	; Eject removable media
 14918 00000E15 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 14919 00000E18 7417                    		je	short ioctl_output_1
 14920 00000E1A 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 14921 00000E1E 751B                    		jne	short ioctl_output_2
 14922 00000E20 B80145                  		mov	ax, 4501h	; Lock/unlock media
 14923                                  					; (al, 0 = lock, 1 = unlock)
 14924 00000E23 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 14925 00000E28 7407                    		jz	short ioctl_output_1
 14926 00000E2A 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 14927 00000E2E 750B                    		jne	short ioctl_output_2
 14928 00000E30 48                      		dec	ax
 14929                                  ioctl_output_1:
 14930 00000E31 2E8A16[EE0D]            		mov	dl, [cs:ioctl_drvnum]
 14931 00000E36 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14932 00000E38 7203                    		jc	short int13h_exts_err
 14933                                  ioctl_lock_err:
 14934                                  		; cf=0
 14935                                  ioctl_output_ret:
 14936                                  		;clc
 14937 00000E3A C3                      		retn
 14938                                  ; ---------------------------------------------------------------------------
 14939                                  
 14940                                  ioctl_output_2:
 14941 00000E3B B401                    		mov	ah, 1
 14942                                  int13h_exts_err:
 14943 00000E3D 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 14944 00000E40 74F8                    		je	short ioctl_lock_err
 14945 00000E42 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 14946 00000E45 74F3                    		je	short ioctl_lock_err
 14947 00000E47 E9DAF7                  		jmp	err_exitj
 14948                                  
 14949                                  ; =============== S U B R O U T I N E =======================================
 14950                                  
 14951                                  		; 24/12/2023
 14952                                  ioctl_input:
 14953 00000E4A E8A2FF                  		call	get_phy_drv_num
 14954 00000E4D F9                      		stc
 14955 00000E4E EBB8                    		jmp	short ioctl_input_1
 14956                                  ioctl_input_2:
 14957 00000E50 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 14958 00000E54 75E5                    		jne	short ioctl_output_2
 14959 00000E56 B80245                  		mov	ax, 4502h	; get lock status
 14960 00000E59 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14961 00000E5B 72E0                    		jc	short int13h_exts_err
 14962 00000E5D BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 14963 00000E60 3C00                    		cmp	al, 0		; not locked
 14964 00000E62 7402                    		jz	short ioctl_input_3
 14965 00000E64 B30E                    		mov	bl, 0Eh
 14966                                  ioctl_input_3:
 14967 00000E66 53                      		push	bx
 14968 00000E67 B404                    		mov	ah, 4
 14969 00000E69 B90101                  		mov	cx, 101h
 14970 00000E6C B601                    		mov	dh, 1
 14971 00000E6E CD13                    		int	13h		; DISK - VERIFY SECTORS
 14972                                  					; AL = number of sectors to verify, CH = track, CL = sector
 14973                                  					; DH = head, DL = drive
 14974                                  					; Return: CF set on error, AH = status
 14975                                  					; AL = number of sectors verified
 14976 00000E70 5B                      		pop	bx
 14977 00000E71 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 14978 00000E74 740B                    		je	short ioctl_input_5
 14979 00000E76 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 14980 00000E79 7406                    		je	short ioctl_input_5
 14981                                  ioctl_input_4:
 14982 00000E7B 26895D01                		mov	[es:di+1], bx
 14983 00000E7F EBB9                    		jmp	short ioctl_lock_err
 14984                                  ioctl_input_5:
 14985 00000E81 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 14986                                  					; bit 11 (not ready -removable media error- bit)
 14987                                  					; if bit 11 = 0, another error (except 31h and 80h)
 14988 00000E85 EBF4                    		jmp	short ioctl_input_4
 14989                                  
 14990                                  ; ---------------------------------------------------------------------------
 14991                                  ;;;;
 14992                                  
 14993                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14994                                  
 14995                                  ;----------------------------------------------------------------------------
 14996                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 14997                                  ;----------------------------------------------------------------------------
 14998                                  ; 11/03/2019 - Retro DOS v4.0
 14999                                  
 15000                                  ; 18/03/2019
 15001                                  
 15002                                  ; ==========================================================================
 15003                                  ;
 15004                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 15005                                  ;
 15006                                  ;      This function is intended to give the user to control the
 15007                                  ;      bds table flags of unformatted_media bit.
 15008                                  ;      GetAccessFlag will show the status -
 15009                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 15010                                  ;						1 disk i/o allowed
 15011                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 15012                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 15013                                  ;						1 disallow disk i/o
 15014                                  ; ==========================================================================
 15015                                  
 15016                                  		; generic ioctl dispatch tables
 15017                                  
 15018                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 15019                                  
 15020                                  ; 24/12/2023
 15021                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 15022                                  
 15023                                  ; ---------------------------------------------------------------------------
 15024                                  		; 24/12/2023
 15025                                  		;db 0
 15026                                  ; 09/12/2022 
 15027                                  %if 0
 15028                                  
 15029                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 15030                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 15031                                  		dw 0EE8h	; 61h	; ReadTrack
 15032                                  		dw 0E86h	; 62h	; VerifyTrack
 15033                                  		dw 0CA3h	 	; Cmd_Error_Proc
 15034                                  		dw 0CA3h		; Cmd_Error_Proc
 15035                                  		dw 0CA3h		; Cmd_Error_Proc
 15036                                  		dw 119Ah	; 66h	; GetMediaId
 15037                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 15038                                  		dw 12C1h	; 68h	; SenseMediaType
 15039                                  
 15040                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 15041                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 15042                                  		dw 0EEFh	; 41h	; WriteTrack
 15043                                  		dw 0DC1h	; 42h	; FormatTrack
 15044                                  		dw 0CA3h		; Cmd_Error_Proc
 15045                                  		dw 0CA3h		; Cmd_Error_Proc
 15046                                  		dw 0CA3h		; Cmd_Error_Proc
 15047                                  		dw 11D2h	; 46h	; SetMediaId
 15048                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 15049                                  
 15050                                  %endif
 15051                                  		; 24/12/2023 - Retro DOS v5.0
 15052                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 15053                                  
 15054                                  		; 09/12/2022
 15055                                  IoReadJumpTable:
 15056 00000E87 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 15057 00000E88 [1A0F]                  		dw GetDeviceParameters	; 60h
 15058 00000E8A [9311]                  		dw ReadTrack		; 61h
 15059 00000E8C [3311]                  		dw VerifyTrack		; 62h
 15060 00000E8E [160F]                  		dw Cmd_Error_Proc
 15061 00000E90 [160F]                  		dw Cmd_Error_Proc
 15062 00000E92 [160F]                  		dw Cmd_Error_Proc
 15063 00000E94 [1214]                  		dw GetMediaId		; 66h
 15064 00000E96 [EF14]                  		dw GetAccessFlag	; 67h ; unpublished function
 15065 00000E98 [4415]                  		dw SenseMediaType	; 68h
 15066                                  		; 24/12/2023
 15067                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15068 00000E9A [160F]                  		dw Cmd_Error_Proc	; 69h
 15069 00000E9C [160F]                  		dw Cmd_Error_Proc	; 6Ah
 15070 00000E9E [160F]                  		dw Cmd_Error_Proc
 15071 00000EA0 [160F]                  		dw Cmd_Error_Proc
 15072 00000EA2 [160F]                  		dw Cmd_Error_Proc
 15073 00000EA4 [160F]                  		dw Cmd_Error_Proc	; 6Eh
 15074 00000EA6 [C815]                  		dw GetDrvMapInfo	; 6Fh
 15075                                  
 15076                                  IoWriteJumpTable:
 15077 00000EA8 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 15078 00000EA9 [7A0F]                  		dw SetDeviceParameters	; 40h
 15079 00000EAB [9A11]                  		dw WriteTrack		; 41h
 15080 00000EAD [6D10]                  		dw FormatTrack		; 42h
 15081 00000EAF [160F]                  		dw Cmd_Error_Proc
 15082 00000EB1 [160F]                  		dw Cmd_Error_Proc
 15083 00000EB3 [160F]                  		dw Cmd_Error_Proc
 15084 00000EB5 [5214]                  		dw SetMediaId		; 46h
 15085 00000EB7 [0415]                  		dw SetAccessFlag	; 47h ; unpublished function
 15086                                  		; 24/12/2023
 15087                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15088 00000EB9 [8115]                  		dw SetLockState		; 48h
 15089 00000EBB [9815]                  		dw EjectMedia		; 49h	
 15090                                  		
 15091                                  ; ==========================================================================
 15092                                  ; IOC_DC_Table
 15093                                  ;
 15094                                  ; This table contains all of the valid generic IOCtl Minor codes for
 15095                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 15096                                  ; Added for 5.00
 15097                                  ; ==========================================================================
 15098                                  
 15099                                  		; 24/12/2023 - Retro DOS v5.0
 15100                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 15101                                  
 15102 00000EBD 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 15103 00000EBE 40                      		db 40h			; SET_DEVICE_PARAMETERS
 15104 00000EBF 61                      		db 61h			; READ_TRACK
 15105 00000EC0 41                      		db 41h			; WRITE_TRACK
 15106 00000EC1 62                      		db 62h			; VERIFY_TRACK
 15107 00000EC2 42                      		db 42h			; FORMAT_TRACK
 15108 00000EC3 66                      		db 66h			; GET_MEDIA_ID
 15109 00000EC4 46                      		db 46h			; SET_MEDIA_ID
 15110 00000EC5 67                      		db 67h			; GET_ACCESS_FLAG
 15111 00000EC6 47                      		db 47h			; SET_ACCESS_FLAG
 15112 00000EC7 68                      		db 68h			; SENSE_MEDIA_TYPE
 15113                                  		; 24/12/2023
 15114                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15115 00000EC8 48                      		db 48h			; SET_LOCK_STATE
 15116 00000EC9 49                      		db 49h			; EJECT_MEDIA
 15117 00000ECA 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 15118                                  
 15119                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 15120                                  
 15121                                  		; 24/12/2023 - Retro DOS v5.0
 15122                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 15123                                  
 15124 00000ECB 00                      new_genioctl:	db 0
 15125                                  
 15126                                  ; ---------------------------------------------------------------------------
 15127                                  
 15128                                  ; 16/10/2022
 15129                                  
 15130                                  ; ==========================================================================
 15131                                  ; Do_Generic_IOCtl: perform generic ioctl request
 15132                                  ;
 15133                                  ;    input: AL contains logical drive
 15134                                  ;
 15135                                  ;	functions are dispatched through a call. On return, carry indicates
 15136                                  ;	error code in al. Note::bES:b& ds undefined on return from
 15137                                  ;	subfunctions.
 15138                                  ;
 15139                                  ; ==========================================================================
 15140                                  
 15141                                  ; 11/03/2019
 15142                                  		; 24/12/2023 - Retro DOS v5.0
 15143                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 15144                                  
 15145                                  		; 19/10/2022
 15146                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 15147 00000ECC E8D5F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 15148                                  		
 15149                                  		; 24/12/2023
 15150                                  		;;;
 15151 00000ECF 2EC606[CB0E]00          		mov	byte [cs:new_genioctl], 0
 15152                                  					; 0, old generic ioctl function
 15153 00000ED5 06                      		push	es
 15154 00000ED6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 15155 00000EDA 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 15156                                  					; RAWIO
 15157                                  		; 24/12/2023
 15158                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15159                                  		;pop	es
 15160                                  		;jnz	short IoctlFuncErr
 15161 00000EDF 740A                    		jz	short chk_genioctl_minor
 15162 00000EE1 2EFE06[CB0E]            		inc	byte [cs:new_genioctl]
 15163                                  					; 1, new generic ioctl function (FAT32)
 15164 00000EE6 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 15165                                  				; (called only if bit 6 of attribute is set to 1)
 15166                                  chk_genioctl_minor:
 15167 00000EEB 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15168 00000EEF 07                      		pop	es
 15169 00000EF0 7525                    		jnz	short IoctlFuncErr
 15170                                  		;;;
 15171                                  
 15172                                  		; cas note: Could do the above two blocks in reverse order.
 15173                                  		; Would have to preserve al for SetDrive
 15174                                  
 15175                                  		; 10/12/2022
 15176 00000EF2 BE[870E]                		mov	si, IoReadJumpTable
 15177                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 15178                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 15179 00000EF5 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 15180 00000EF7 7503                    		jnz	short NotGenericWrite ; function is a read.
 15181                                  		; 10/12/2022
 15182 00000EF9 BE[A80E]                		mov	si, IoWriteJumpTable
 15183                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 15184                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 15185                                  NotGenericWrite:
 15186 00000EFC 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 15187 00000EFE 2C40                    		sub	al, 40h		; offset for base function
 15188 00000F00 2E3A04                  		cmp	al, [cs:si]
 15189 00000F03 7712                    		ja	short IoctlFuncErr
 15190 00000F05 98                      		cbw
 15191                                  		; 24/12/2023
 15192                                  		;shl	ax, 1
 15193 00000F06 01C0                    		add	ax, ax
 15194 00000F08 46                      		inc	si
 15195 00000F09 01C6                    		add	si, ax
 15196 00000F0B 2EFF14                  		call	near [cs:si]
 15197                                  		;call	word ptr cs:[si]
 15198 00000F0E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15199                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15200                                  					; 2C7h:30h = 70h:25A0h
 15201 00000F13 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 15202 00000F15 C3                      		retn			; Pass carry flag through to exit code
 15203                                  ; ---------------------------------------------------------------------------
 15204                                  
 15205                                  		; Cmd_Error_Proc is called as a procedure and also use
 15206                                  		; as a fall through from above
 15207                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 15208 00000F16 5A                      		pop	dx
 15209                                  IoctlFuncErr:
 15210 00000F17 E9BBF1                  		jmp	bc_cmderr
 15211                                  ; ---------------------------------------------------------------------------
 15212                                  
 15213                                  ; 16/10/2022
 15214                                  
 15215                                  ; ==========================================================================
 15216                                  ;**	GetDeviceParameters:
 15217                                  ;
 15218                                  ;	GetDeviceParameters implements the generic ioctl function:
 15219                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 15220                                  ;
 15221                                  ;	ENTRY	(ES:di) = BDS for drive
 15222                                  ;		PtrSav = long pointer to request header
 15223                                  ;	EXIT	??? BUGBUG
 15224                                  ;	USES	??? BUGBUG
 15225                                  ; ==========================================================================
 15226                                  
 15227                                  		; 24/12/2023 - Retro DOS v5.0
 15228                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 15229                                  
 15230                                  		; 19/10/2022
 15231                                  GetDeviceParameters:
 15232                                  		; Copy info from bds to the device parameters packet
 15233                                  
 15234 00000F1A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15235 00000F1E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15236                                  					; (DS:BX) = return buffer
 15237                                  		; 24/12/2023
 15238 00000F21 268A453E                		mov	al, [es:di+3Eh]
 15239                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 15240 00000F25 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15241                                  		; 24/12/2023
 15242 00000F28 268B453F                		mov	ax, [es:di+3Fh]
 15243                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 15244 00000F2C 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 15245                                  					; Mask off other bits
 15246 00000F2F 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15247                                  		; 24/12/2023
 15248 00000F32 268B4541                		mov     ax, [es:di+41h]
 15249                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 15250 00000F36 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15251 00000F39 30C0                    		xor	al, al		; Set media type to default
 15252 00000F3B 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15253                                  					
 15254                                  		; copy recommended bpb
 15255                                  
 15256                                  		; 24/12/2023
 15257 00000F3E 8D7543                  		lea     si, [di+43h]
 15258                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 15259 00000F41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15260                                  					; BUILD_DEVICE_BPB
 15261 00000F44 7412                    		jz	short UseBpbPresent
 15262 00000F46 1E                      		push	ds		; Save request packet segment
 15263 00000F47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15264                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15265                                  					; 2C7h:30h = 70h:25A0h
 15266                                  					; Point back to Bios_Data
 15267 00000F4C E828FA                  		call	checksingle
 15268 00000F4F E884F7                  		call	GetBp		; Build	the bpb	from scratch
 15269 00000F52 1F                      		pop	ds		; Restore request packet segment
 15270 00000F53 7224                    		jb	short GetParmRet
 15271 00000F55 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 15272                                  					; Use this subfield of bds instead
 15273                                  UseBpbPresent:				
 15274 00000F58 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15275                                  					; This is where	the result goes
 15276                                  		; 24/12/2023
 15277 00000F5B 31D2                    		xor	dx, dx ; 0
 15278                                  		
 15279                                  		; 24/12/2023
 15280 00000F5D B91F00                  		mov	cx, 31		; A_BPB.size = 31
 15281                                  		;mov	cx, 25		; A_BPB.size - 6
 15282                                  					; For now use 'small' bpb
 15283                                  		; 24/12/2023
 15284                                  		;;;
 15285 00000F60 2E3816[CB0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 15286 00000F65 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 15287                                  		;mov	cx, 53		; FAT32 BPB size
 15288                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 15289 00000F67 B135                    		mov	cl, 53
 15290 00000F69 B220                    		mov	dl, 32
 15291                                  gdp_1:
 15292                                  		;;;
 15293 00000F6B 1E                      		push	ds		; reverse segments for copy
 15294 00000F6C 06                      		push	es
 15295 00000F6D 1F                      		pop	ds
 15296 00000F6E 07                      		pop	es
 15297 00000F6F F3A4                    		rep movsb
 15298                                  
 15299                                  		; 24/12/2023
 15300                                  		;;;
 15301 00000F71 89D1                    		mov	cx, dx		; 0 or 32
 15302 00000F73 E304                    		jcxz	gdp_2
 15303 00000F75 30C0                    		xor	al, al		; 32 zeros
 15304 00000F77 F3AA                    		rep stosb
 15305                                  gdp_2:
 15306                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 15307                                  		;;;		
 15308                                  		
 15309                                  		; 12/12/2022
 15310                                  		; cf=0 (cmp instruction -above- resets cf) 	
 15311                                  		;clc
 15312                                  GetParmRet:				
 15313 00000F79 C3                      		retn
 15314                                  ; ---------------------------------------------------------------------------
 15315                                  
 15316                                  ; 17/10/2022
 15317                                  ; 16/10/2022
 15318                                  
 15319                                  ; ==========================================================================
 15320                                  ; SetDeviceParameters:
 15321                                  ;
 15322                                  ; input: ES:di points to bds for drive
 15323                                  ; ==========================================================================
 15324                                  
 15325                                  		; 24/12/2023 - Retro DOS v5.0
 15326                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 15327                                  
 15328                                  		; 19/10/2022
 15329                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 15330 00000F7A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15331 00000F7E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15332                                  		; 24/12/2023
 15333 00000F81 26814D3F4001            		or	word [es:di+3Fh], 140h
 15334                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 15335                                  					; fchanged_by_format|fchanged
 15336 00000F87 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15337                                  					; ONLY_SET_TRACKLAYOUT
 15338                                  		;jnz	short setTrackTable
 15339                                  		; 24/12/2023
 15340 00000F8A 7403                    		jz	short sdp_1
 15341 00000F8C E98000                  		jmp	setTrackTable
 15342                                  sdp_1:	
 15343 00000F8F 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15344                                  		; 24/12/2023
 15345 00000F92 2688453E                		mov	[es:di+3Eh], al
 15346                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 15347 00000F96 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15348                                  		; 24/12/2023
 15349 00000F99 26894541                		mov	[es:di+41h], ax
 15350                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 15351 00000F9D 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15352 00000FA0 1E                      		push	ds
 15353                                  		; 17/10/2022
 15354 00000FA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15355                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15356                                  					; 2C7h:30h = 70h:25A0h
 15357                                  		;cmp	byte [fhave96], 0
 15358 00000FA6 803E[7700]00            		cmp	byte [fhave96], 0
 15359 00000FAB 1F                      		pop	ds
 15360 00000FAC 7502                    		jnz	short HaveChange ; we have changeline support
 15361                                  		; 10/12/2022
 15362 00000FAE 24FD                    		and	al, 0FDh
 15363                                  		;and	ax, 0FFFDh	; ~fchangeline
 15364                                  
 15365                                  		; Ignore all bits except non_removable and changeline
 15366                                  HaveChange:
 15367 00000FB0 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 15368                                  		; 24/12/2023
 15369 00000FB3 268B4D3F                		mov	cx, [es:di+3Fh]
 15370                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 15371 00000FB7 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 15372 00000FBB 09C8                    		or	ax, cx
 15373                                  		; 24/12/2023
 15374 00000FBD 2689453F                		mov	[es:di+3Fh], ax
 15375                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 15376 00000FC1 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15377                                  					; Set media type
 15378 00000FC4 1E                      		push	ds
 15379 00000FC5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15380                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15381 00000FCA A2[A805]                		mov	[mediatype], al
 15382                                  		;mov	ds:mediatype, al
 15383                                  
 15384                                  		; 24/12/2023
 15385                                  		;;;
 15386 00000FCD B93500                  		mov	cx, 53		; FAT32 BPB size
 15387 00000FD0 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15388 00000FD6 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 15389                                  		;mov	cx, 31		; A_BPB.size = 31
 15390 00000FD8 B11F                    		mov	cl, 31
 15391                                  sdp_2:
 15392                                  		;;;	
 15393 00000FDA 1F                      		pop	ds
 15394                                  
 15395                                  		; The media changed (maybe) so we will have to do a set dasd
 15396                                  		; the next time we format a track
 15397                                  
 15398                                  		; 24/12/2023
 15399 00000FDB 26804D3F80              		or	byte [es:di+3Fh], 80h
 15400                                  		; 10/12/2022
 15401                                  		;or	byte [es:di+35], 80h
 15402                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 15403                                  					; set_dasd_true
 15404 00000FE0 57                      		push	di		; Save bds pointer
 15405                                  
 15406                                  		; Figure out what we are supposed to do with the bpb
 15407                                  		; were we asked to install a fake bpb?
 15408                                  
 15409 00000FE1 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15410                                  					; INSTALL_FAKE_BPB
 15411 00000FE4 7511                    		jnz	short InstallFakeBpb
 15412                                  
 15413                                  		; were we returning a fake bpb when asked to build a bpb?
 15414                                  
 15415                                  		; 24/12/2023
 15416 00000FE6 26F6453F04              		test	byte [es:di+3Fh], 4
 15417                                  		; 10/12/2022
 15418                                  		;test	byte [es:di+35], 4
 15419                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 15420                                  					; return_fake_bpb
 15421 00000FEB 7405                    		jz	short InstallRecommendedBpb
 15422                                  
 15423                                  		; we were returning a fake bpb but we can stop now
 15424                                  
 15425                                  		; 24/12/2023
 15426 00000FED 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 15427                                  		; 10/12/2022
 15428                                  		;and	byte [es:di+35], 0FBh
 15429                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 15430                                  					; ~return_fake_bpb
 15431                                  InstallRecommendedBpb:
 15432                                  		; 24/12/2023
 15433                                  		;mov	cx, 31		; A_BPB.size
 15434                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 15435                                  		; cx = 53 or 31
 15436 00000FF2 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 15437 00000FF5 EB08                    		jmp	short CopyTheBpb
 15438                                  ; ---------------------------------------------------------------------------
 15439                                  
 15440                                  InstallFakeBpb:
 15441                                  		; 24/12/2023
 15442 00000FF7 26804D3F04              		or	byte [es:di+3Fh], 4
 15443                                  		; 10/12/2022
 15444                                  		;or	byte [es:di+35], 4
 15445                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 15446                                  					; return_fake_bpb
 15447                                  		; 24/12/2023
 15448                                  		; cx = 53 or 31
 15449                                  		;mov	cx, 25		; A_BPB.size - 6
 15450                                  					; move 'smaller' bpb
 15451 00000FFC 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 15452                                  CopyTheBpb:				
 15453 00000FFF 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15454 00001002 F3A4                    		rep movsb
 15455 00001004 1E                      		push	ds		; Save packet segment
 15456                                  		; 17/10/2022
 15457 00001005 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15458                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15459                                  					; Setup	for ds -> Bios_Data
 15460 0000100A E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 15461 0000100D 1F                      		pop	ds		; Restore packet segment
 15462 0000100E 5F                      		pop	di		; Restore bds pointer
 15463                                  setTrackTable:	
 15464                                  		; 24/12/2023
 15465                                  		;mov	cx, [bx+38]	; [bx+26h]
 15466                                  		;;;
 15467 0000100F 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15468                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 15469 00001012 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15470 00001018 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 15471 0000101A 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15472                                  					; offset 31+7 (A_BPB.size+7)
 15473                                  sdp_3:
 15474                                  		;;;
 15475                                  
 15476 0000101D 1E                      		push	ds
 15477 0000101E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15478 00001023 890E[AA04]              		mov	[sectorspertrack], cx
 15479 00001027 1F                      		pop	ds
 15480                                  		
 15481                                  		; 24/12/2023
 15482 00001028 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 15483                                  		; 10/12/2022
 15484                                  		;and	byte [es:di+35], 0F7h
 15485                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 15486                                  					; ~good_tracklayout
 15487 0000102D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15488                                  					; TRACKLAYOUT_IS_GOOD
 15489 00001030 7405                    		jz	short UglyTrackLayOut
 15490                                  		; 24/12/2023
 15491 00001032 26804D3F08              		or	byte [es:di+3Fh], 8
 15492                                  		; 10/12/2022
 15493                                  		;or	byte [es:di+35], 8
 15494                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 15495                                  					; good_tracklayout
 15496                                  UglyTrackLayOut:
 15497 00001037 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 15498 0000103A 772D                    		ja	short TooManyPerTrack
 15499                                  		;jcxz	short SectorInfoSaved
 15500 0000103C E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 15501                                  		
 15502 0000103E BF[AC04]                		mov	di, tracktable
 15503                                  
 15504                                  		; 24/12/2023
 15505                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15506                                  		;;;
 15507 00001041 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15508                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 15509 00001044 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15510 0000104A 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 15511 0000104C 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15512                                  					; offset 31+9 (A_BPB.size+9)
 15513                                  sdp_4:
 15514                                  		;;;
 15515                                  
 15516                                  		; 17/10/2022
 15517 0000104F 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 15518                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15519                                  					; Trash	our bds	pointer
 15520                                  StoreSectorInfo:
 15521 00001054 47                      		inc	di
 15522 00001055 47                      		inc	di		; Skip over cylinder and head
 15523 00001056 AD                      		lodsw			; Get sector id
 15524 00001057 AA                      		stosb			; Copy it
 15525 00001058 AD                      		lodsw			; Get sector size
 15526                                  		
 15527                                  		; 24/12/2023
 15528                                  		; 02/09/2023 (PCDOS 7.1)
 15529                                  		;call	SectSizeToSectIndex
 15530                                  		; 18/04/2024
 15531                                  		;cmp	ah, 3 ; 02/09/2023
 15532 00001059 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 15533                                  					; examine upper	byte only
 15534 0000105C 7704                    		ja	short OneK
 15535 0000105E 88E0                    		mov	al, ah		; value	in AH is the index!
 15536 00001060 EB02                    		jmp	short sdp_s
 15537                                  OneK:
 15538 00001062 B003                    		mov	al, 3		; 1024 bytes per sector
 15539                                  sdp_s:
 15540 00001064 AA                      		stosb			; Store	sector SIZE index
 15541 00001065 E2ED                    		loop	StoreSectorInfo
 15542                                  SectorInfoSaved:
 15543 00001067 F8                      		clc
 15544 00001068 C3                      		retn
 15545                                  ; ---------------------------------------------------------------------------
 15546                                  
 15547                                  TooManyPerTrack:
 15548 00001069 B00C                    		mov	al, 0Ch
 15549 0000106B F9                      		stc
 15550 0000106C C3                      		retn
 15551                                  ; ---------------------------------------------------------------------------
 15552                                  
 15553                                  ; 16/10/2022
 15554                                  
 15555                                  ; ==========================================================================
 15556                                  ; FormatTrack:
 15557                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 15558                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 15559                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 15560                                  ;
 15561                                  ; input: ES:di points to bds for drive
 15562                                  ;
 15563                                  ; output:
 15564                                  ;	for status call:
 15565                                  ;	specialfunction byte set to:
 15566                                  ;		0 - rom support + legal combination
 15567                                  ;		1 - no rom support
 15568                                  ;		2 - illegal combination
 15569                                  ;		3 - no media present
 15570                                  ;	carry cleared.
 15571                                  ;
 15572                                  ;	for format track:
 15573                                  ;		carry set if error
 15574                                  ;
 15575                                  ; ==========================================================================
 15576                                  
 15577                                  ; 16/03/2019
 15578                                  		; 24/12/2023 - Retro DOS 5.0
 15579                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 15580                                  
 15581                                  		; 19/10/2022
 15582                                  FormatTrack:
 15583 0000106D C51E[1200]              		lds	bx, [ptrsav]
 15584 00001071 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 15585 00001074 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15586                                  					; STATUS_FOR_FORMAT
 15587 00001077 740E                    		jz	short DoFormatTrack
 15588 00001079 1E                      		push	ds
 15589                                  		; 17/10/2022
 15590 0000107A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15591                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15592 0000107F E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15593 00001082 1F                      		pop	ds
 15594 00001083 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15595 00001085 F8                      		clc
 15596 00001086 C3                      		retn
 15597                                  ; ---------------------------------------------------------------------------
 15598                                  
 15599                                  DoFormatTrack:
 15600                                  		; 24/12/2023 - Retro DOS 5.0
 15601 00001087 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 15602                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 15603                                  					; DEV_HARDDISK
 15604 0000108C 7508                    		jnz	short DoFormatDiskette
 15605                                  		; 17/10/2022
 15606 0000108E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15607                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15608                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 15609 00001093 E99D00                  		jmp	VerifyTrack
 15610                                  ; ---------------------------------------------------------------------------
 15611                                  
 15612                                  DoFormatDiskette:
 15613 00001096 8B4F01                  		mov	cx, [bx+1]
 15614 00001099 8B5703                  		mov	dx, [bx+3]
 15615 0000109C F60702                  		test	byte [bx], 2
 15616                                  		; 17/10/2022
 15617 0000109F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15618                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15619                                  					; Setup	ds-> Bios_Data for verify
 15620 000010A4 7403                    		jz	short DoFormatDiskette_1
 15621 000010A6 E9E500                  		jmp	VerifyTrack_Err
 15622                                  ; ---------------------------------------------------------------------------
 15623                                  
 15624                                  DoFormatDiskette_1:
 15625 000010A9 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15626 000010AC 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 15627 000010AE 7406                    		jz	short NeedToSetDasd ; Old rom
 15628 000010B0 3C03                    		cmp	al, 3		; Time out error?
 15629 000010B2 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 15630                                  					; about	the illegal combination)
 15631 000010B4 EB68                    		jmp	short FormatFailed
 15632                                  ; ---------------------------------------------------------------------------
 15633                                  
 15634                                  NeedToSetDasd:
 15635 000010B6 52                      		push	dx
 15636 000010B7 E89001                  		call	SetDasd		; INT 13h, AH=17h
 15637 000010BA 5A                      		pop	dx
 15638                                  NoSetDasd:
 15639 000010BB E8B9F8                  		call	checksingle	; Do any needed	diskette swapping
 15640 000010BE 89D0                    		mov	ax, dx		; Get track from packet
 15641 000010C0 A3[3901]                		mov	[trknum], ax
 15642 000010C3 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 15643 000010C7 88CC                    		mov	ah, cl
 15644 000010C9 BB[AC04]                		mov	bx, tracktable
 15645 000010CC 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15646                                  		; 24/12/2023 - Retro DOS 5.0
 15647 000010D0 E307                    		jcxz	set_fmt_retry_count
 15648                                  StoreCylinderHead:
 15649 000010D2 8907                    		mov	[bx], ax	; Store	into TrackTable
 15650 000010D4 83C304                  		add	bx, 4		; Skip to next sector field
 15651 000010D7 E2F9                    		loop	StoreCylinderHead
 15652                                  set_fmt_retry_count:	; 24/12/2023
 15653                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 15654                                  		; 02/09/2023
 15655 000010D9 B105                    		mov	cl, 5
 15656                                  FormatRetry:
 15657 000010DB 51                      		push	cx
 15658 000010DC BB[AC04]                		mov	bx, tracktable
 15659 000010DF A0[AA04]                		mov	al, [sectorspertrack]
 15660 000010E2 B405                    		mov	ah, 5		; romformat
 15661 000010E4 8C1E[A804]              		mov	[xfer_seg], ds
 15662 000010E8 E86602                  		call	ToRom
 15663 000010EB 59                      		pop	cx
 15664 000010EC 7216                    		jb	short FormatError
 15665 000010EE 51                      		push	cx		; Now verify the sectors just formatted.
 15666                                  					; NOTE:	because	of bug in some BIOSes we have to
 15667                                  					;	set ES:BX to 00:00
 15668 000010EF 53                      		push	bx
 15669 000010F0 31DB                    		xor	bx, bx
 15670 000010F2 891E[A804]              		mov	[xfer_seg], bx
 15671 000010F6 A0[AA04]                		mov	al, [sectorspertrack]
 15672 000010F9 B404                    		mov	ah, 4		; romverify
 15673 000010FB B101                    		mov	cl, 1
 15674 000010FD E85102                  		call	ToRom
 15675 00001100 5B                      		pop	bx
 15676 00001101 59                      		pop	cx
 15677 00001102 7329                    		jnb	short FormatOk
 15678                                  FormatError:
 15679 00001104 E83402                  		call	ResetDisk
 15680 00001107 C606[AA05]01            		mov	byte [had_format_error], 1
 15681 0000110C 50                      		push	ax
 15682 0000110D 51                      		push	cx
 15683 0000110E 52                      		push	dx
 15684 0000110F E89501                  		call	SetMediaForFormat
 15685 00001112 3C01                    		cmp	al, 1
 15686 00001114 7503                    		jnz	short WhileErr
 15687 00001116 E83101                  		call	SetDasd
 15688                                  WhileErr:
 15689 00001119 5A                      		pop	dx
 15690 0000111A 59                      		pop	cx
 15691 0000111B 58                      		pop	ax
 15692 0000111C E2BD                    		loop	FormatRetry
 15693                                  FormatFailed:
 15694 0000111E C606[AA05]01            		mov	byte [had_format_error], 1
 15695                                  					; Set the format error flag
 15696 00001123 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 15697 00001126 7502                    		jnz	short DoMapIt	; Error	to time	out error
 15698 00001128 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 15699                                  DoMapIt:
 15700 0000112A E97CFC                  		jmp	maperror
 15701                                  ; ---------------------------------------------------------------------------
 15702                                  
 15703                                  FormatOk:
 15704 0000112D C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 15705 00001132 C3                      		retn
 15706                                  ; ---------------------------------------------------------------------------
 15707                                  
 15708                                  ; 16/10/2022
 15709                                  
 15710                                  ; ==========================================================================
 15711                                  ;
 15712                                  ; VerifyTrack:
 15713                                  ;
 15714                                  ; input: ES:di points to bds for drive
 15715                                  ; ==========================================================================
 15716                                  
 15717                                  		; 24/12/2023 - Retro DOS 5.0
 15718                                  VerifyTrack:
 15719 00001133 1E                      		push	ds
 15720 00001134 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 15721 00001138 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15722                                  
 15723                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 15724                                  
 15725 0000113B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 15726 0000113E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 15727 00001141 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 15728 00001144 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 15729                                  					; Get option flag word
 15730 00001146 1F                      		pop	ds
 15731 00001147 C606[2001]04            		mov	byte [rflag], 4	; romverify
 15732 0000114C 890E[3301]              		mov	[curtrk], cx
 15733 00001150 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 15734 00001153 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15735                                  
 15736                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 15737                                  		; specified if not we should go to the normal track verification
 15738                                  		; routine. If fast format has been specified we should get the
 15739                                  		; number of tracks to be verified and check it to see if it is
 15740                                  		; > 255. If it is then it is an error and we should go to
 15741                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 15742                                  		; sectors per track to get the total number of sectors to be
 15743                                  		; verified. This should also be less than equal to 255
 15744                                  		; otherwise we go to same error exit. If everything is okay
 15745                                  		; we initialise cx to the total sectors. use ax as a temporary
 15746                                  		; register.
 15747                                  
 15748                                  					; Special function requested?	
 15749 00001157 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 15750 0000115A 7421                    		jz	short NormVerifyTrack
 15751 0000115C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 15752 0000115E 08E4                    		or	ah, ah
 15753 00001160 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 15754 00001162 F6E1                    		mul	cl
 15755 00001164 08E4                    		or	ah, ah
 15756 00001166 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 15757 00001168 89C1                    		mov	cx, ax
 15758                                  		; 24/12/2023
 15759 0000116A 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15760                                  		; 10/12/2022
 15761                                  		;test	byte [es:di+35], 1
 15762                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15763                                  					; fnon_removable
 15764 0000116F 740C                    		jz	short NormVerifyTrack
 15765                                  					; Multitrack operation = on?
 15766                                  		; 10/12/2022
 15767                                  		; 19/10/2022
 15768 00001171 F606[A004]80            		test	byte [multrk_flag], 80h
 15769                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15770                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 15771 00001176 7405                    		jz	short NormVerifyTrack
 15772 00001178 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 15773                                  NormVerifyTrack:
 15774 0000117D 31C0                    		xor	ax, ax		; 1st sector
 15775 0000117F 31DB                    		xor	bx, bx
 15776 00001181 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 15777 00001185 E83F00                  		call	TrackIo
 15778 00001188 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 15779 0000118D C3                      		retn
 15780                                  ; ---------------------------------------------------------------------------
 15781                                  
 15782                                  VerifyTrack_Err:
 15783 0000118E B401                    		mov	ah, 1
 15784 00001190 E916FC                  		jmp	maperror
 15785                                  ; ---------------------------------------------------------------------------
 15786                                  
 15787                                  ; 16/10/2022
 15788                                  
 15789                                  ; ==========================================================================
 15790                                  ;
 15791                                  ; ReadTrack:
 15792                                  ;
 15793                                  ; input: ES:di points to bds for drive
 15794                                  ;
 15795                                  ; ==========================================================================
 15796                                  
 15797                                  ReadTrack:
 15798 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 15799 00001198 EB05                    		jmp	short ReadWriteTrack
 15800                                  ; ---------------------------------------------------------------------------
 15801                                  
 15802                                  WriteTrack:
 15803                                  
 15804                                  ; ==========================================================================
 15805                                  ;
 15806                                  ; WriteTrack:
 15807                                  ;
 15808                                  ; input: ES:di points to bds for drive
 15809                                  ;
 15810                                  ; ==========================================================================
 15811                                  				
 15812 0000119A C606[2001]03            		mov	byte [rflag], 3	; romwrite
 15813                                  
 15814                                  		; Fall into ReadWriteTrack
 15815                                  
 15816                                  ; ==========================================================================
 15817                                  ;
 15818                                  ; readWriteTrack:
 15819                                  ;
 15820                                  ; input:
 15821                                  ;    ES:di points to bds for drive
 15822                                  ;    rFlag - 2 for read,3 for write
 15823                                  ;
 15824                                  ; ==========================================================================
 15825                                  
 15826                                  ReadWriteTrack:	
 15827                                  		; save bds pointer segment so we can use it to access
 15828                                  		; our packet. Notice that this is not the standard register
 15829                                  		; assignment for accessing packets
 15830                                  		
 15831                                  		; 19/10/2022
 15832 0000119F 06                      		push	es
 15833 000011A0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 15834 000011A4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15835 000011A8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 15836 000011AC A3[3301]                		mov	[curtrk], ax
 15837 000011AF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 15838 000011B3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 15839 000011B6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 15840 000011BA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 15841 000011BE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 15842                                  					; Get transfer address
 15843                                  
 15844                                  		; we just trashed our packet address, but we no longer care
 15845                                  
 15846 000011C2 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 15847 000011C6 07                      		pop	es
 15848                                  
 15849                                  		; Fall into TrackIo
 15850                                  
 15851                                  ; =============== S U B	R O U T	I N E =======================================
 15852                                  
 15853                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15854                                  
 15855                                  ; ==========================================================================
 15856                                  ;
 15857                                  ; TrackIo:
 15858                                  ;    performs track read/write/verify
 15859                                  ;
 15860                                  ;   input:
 15861                                  ;      rFlag	- 2 = read
 15862                                  ;		  3 = write
 15863                                  ;		  4 = verify
 15864                                  ;      AX	- Index into track table of first sector to io
 15865                                  ;      CX	- Number of sectors to io
 15866                                  ;      Xfer_Seg:BX - Transfer address
 15867                                  ;      ES:DI	- Pointer to bds
 15868                                  ;      CurTrk	- Current cylinder
 15869                                  ;      CurHd	- Current head
 15870                                  ;
 15871                                  ; ==========================================================================
 15872                                  
 15873                                  ; 16/03/2019 - Retro DOS v4.0
 15874                                  
 15875                                  		; 24/12/2023 - Retro DOS 5.0		
 15876                                  
 15877                                  		; 19/10/2022
 15878                                  TrackIo:
 15879                                  					; Procedure `disk' will pop stack to
 15880 000011C7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 15881 000011CB E8A9F7                  		call	checksingle	; Ensure correct disk is in drv
 15882 000011CE 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15883                                  					; See if we have already set	disk
 15884 000011D3 7407                    		jz	short Dptalreadyset ; base table
 15885 000011D5 50                      		push	ax		; set up tables	and variables for i/o
 15886 000011D6 51                      		push	cx
 15887 000011D7 E8A0F9                  		call	iosetup
 15888 000011DA 59                      		pop	cx
 15889 000011DB 58                      		pop	ax
 15890                                  Dptalreadyset:				; Point si at the table entry of the			
 15891 000011DC BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 15892                                  		; 24/12/2023
 15893                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 15894                                  		;add	ax, ax
 15895 000011DF D1E0                    		shl	ax, 1
 15896 000011E1 D1E0                    		shl	ax, 1
 15897 000011E3 01C6                    		add	si, ax
 15898                                  
 15899                                  		; WE WANT:
 15900                                  		; CX to	be the number of times we have to loop
 15901                                  		; DX to	be the number of sectors we read on each iteration
 15902                                  		
 15903 000011E5 BA0100                  		mov	dx, 1
 15904                                  
 15905                                  		; 24/12/2023
 15906 000011E8 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 15907                                  		; 12/12/2022
 15908                                  		;test	byte [es:di+23h], 8
 15909                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 15910                                  					; good_tracklayout
 15911 000011ED 7402                    		jz	short ionextsector
 15912                                  		
 15913 000011EF 87CA                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 15914                                  ionextsector:
 15915 000011F1 51                      		push	cx
 15916 000011F2 52                      		push	dx
 15917 000011F3 46                      		inc	si
 15918 000011F4 46                      		inc	si		; Skip over the	cylinder and head in
 15919                                  					; the track table
 15920 000011F5 AC                      		lodsb			; Get sector ID	from track table
 15921 000011F6 A2[3101]                		mov	[cursec], al
 15922                                  
 15923                                  		; assumptions for a fixed disk multi-track disk	i/o
 15924                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 15925                                  		;     only CL is valid.
 15926                                  		; 2). Sector size should be set	to 512 bytes.
 15927                                  		; 3). Good track layout
 15928                                  		
 15929                                  		; 24/12/2023
 15930 000011F9 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15931                                  		; 12/12/2022
 15932                                  		;test	byte [es:di+23h], 1
 15933                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15934                                  					; fnon_removable ; Fixed disk?
 15935 000011FE 7414                    		jz	short IoRemovable ; No
 15936                                  
 15937                                  		; 12/12/2022
 15938 00001200 F606[A004]80            		test	byte [multrk_flag], 80h
 15939                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15940                                  						; Allow multi-track operation?
 15941 00001205 740D                    		jz	short IoRemovable ; No,don't do that.
 15942 00001207 8916[2201]              		mov	[seccnt], dx
 15943 0000120B 89D0                    		mov	ax, dx
 15944 0000120D E823FA                  		call	Disk
 15945 00001210 5A                      		pop	dx
 15946 00001211 59                      		pop	cx
 15947 00001212 F8                      		clc
 15948 00001213 C3                      		retn
 15949                                  ; ---------------------------------------------------------------------------
 15950                                  
 15951                                  IoRemovable:
 15952 00001214 AC                      		lodsb			; Get sector size index	from track
 15953                                  					; table	and save it
 15954 00001215 50                      		push	ax
 15955 00001216 56                      		push	si
 15956 00001217 1E                      		push	ds		; Save Bios_Data
 15957 00001218 50                      		push	ax
 15958 00001219 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 15959                                  					; Fetch	EOT while ds-> Bios_Data
 15960 0000121D C536[2D01]              		lds	si, [dpt]
 15961 00001221 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 15962 00001224 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 15963 00001227 58                      		pop	ax
 15964 00001228 1F                      		pop	ds
 15965 00001229 88D0                    		mov	al, dl
 15966 0000122B A3[2201]                		mov	[seccnt], ax
 15967 0000122E E802FA                  		call	Disk
 15968 00001231 5E                      		pop	si		; Advance buffer pointer by adding
 15969                                  					; sector size
 15970                                  		;pop	ax
 15971                                  		; 24/12/2023
 15972 00001232 59                      		pop	cx
 15973                                  
 15974                                  		; 02/09/2023 (PCDOS 7.1)
 15975                                  		;call	SectorSizeIndexToSectorSize
 15976                                  		;mov	cl, al	; 24/12/2023
 15977 00001233 B88000                  		mov	ax, 128
 15978 00001236 D3E0                    		shl	ax, cl
 15979                                  
 15980 00001238 01C3                    		add	bx, ax
 15981 0000123A 5A                      		pop	dx
 15982 0000123B 59                      		pop	cx
 15983 0000123C E2B3                    		loop	ionextsector
 15984 0000123E 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15985                                  		;jz	short NoNeedDone
 15986                                  		; 12/12/2022
 15987 00001243 7404                    		je	short NoNeedDone2
 15988 00001245 E877F9                  		call	done		; set time of last access, and reset
 15989                                  					; entries in Dpt.
 15990                                  NoNeedDone:
 15991 00001248 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 15992                                  NoNeedDone2:
 15993 00001249 C3                      		retn
 15994                                  
 15995                                  ; =============== S U B	R O U T	I N E =======================================
 15996                                  
 15997                                  ; ---------------------------------------------------------------------------
 15998                                  ;
 15999                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 16000                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 16001                                  ; are permissible.
 16002                                  ;
 16003                                  ; On Input   AX contains sector size in bytes
 16004                                  ; On Output  AL Contains index
 16005                                  ; All other registers preserved
 16006                                  ;
 16007                                  ; ---------------------------------------------------------------------------
 16008                                  
 16009                                  ; 02/09/2023
 16010                                  ;SectSizeToSectIndex:
 16011                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16012                                  ;					; examine upper	byte only
 16013                                  ;		ja	short OneK
 16014                                  ;		mov	al, ah		; value	in AH is the index!
 16015                                  ;		retn
 16016                                  
 16017                                  ; ---------------------------------------------------------------------------
 16018                                  ;
 16019                                  ;OneK:
 16020                                  ;		mov	al, 3
 16021                                  ;		retn
 16022                                  
 16023                                  ; =============== S U B	R O U T	I N E =======================================
 16024                                  
 16025                                  ; 02/09/2023
 16026                                  ;SectorSizeIndexToSectorSize:
 16027                                  ;		mov	cl, al
 16028                                  ;		mov	ax, 128
 16029                                  ;		shl	ax, cl
 16030                                  ;		retn
 16031                                  
 16032                                  ; =============== S U B	R O U T	I N E =======================================
 16033                                  
 16034                                  ; 16/10/2022
 16035                                  
 16036                                  ; ---------------------------------------------------------------------------
 16037                                  ;
 16038                                  ; SetDASD
 16039                                  ;
 16040                                  ; Set up the rom for formatting.
 16041                                  ; we have to tell the rom bios what type of disk is in the drive.
 16042                                  ;
 16043                                  ; On Input   - ES:di - Points to bds
 16044                                  ;
 16045                                  ; ---------------------------------------------------------------------------
 16046                                  
 16047                                  		; 24/12/2023 - Retro DOS 5.0
 16048                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 16049                                  
 16050                                  		; 19/10/2022
 16051                                  SetDasd:
 16052 0000124A 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 16053                                  					; See if we've previously set dasd type
 16054 0000124F 740C                    		jz	short DoSetDasd
 16055                                  		; 24/12/2023
 16056 00001251 26F6453F80              		test	byte [es:di+3Fh], 80h
 16057                                  		; 10/12/2022
 16058                                  		;test	byte [es:di+23h], 80h
 16059                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 16060                                  					; set_dasd_true
 16061 00001256 7446                    		jz	short DasdHasBeenSet
 16062                                  		; 24/12/2023
 16063 00001258 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 16064                                  		; 10/12/2022
 16065                                  		;and	byte [es:di+23h], 7Fh
 16066                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 16067                                  					; ~set_dasd_true
 16068                                  DoSetDasd:
 16069 0000125D C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 16070 00001262 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 16071 00001267 B004                    		mov	al, 4
 16072                                  		; 24/12/2023
 16073 00001269 268A653E                		mov	ah, [es:di+3Eh]
 16074                                  		; 02/09/2023
 16075                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 16076 0000126D 80FC02                  		cmp	ah, 2
 16077                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16078                                  					; DEV_3INCH720KB
 16079 00001270 7414                    		jz	short DoSet
 16080                                  		; 24/12/2023
 16081 00001272 B001                    		mov	al, 1
 16082                                  		;cmp	ah, 1
 16083 00001274 38C4                    		cmp	ah, al	; 1
 16084                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 16085                                  					; DEV_5INCH96TPI
 16086                                  		;jz	short GotBig
 16087                                  		; 24/12/2023
 16088                                  		;mov	al, 1
 16089                                  		;jmp	short DoSet
 16090                                  		; 02/09/2023
 16091 00001276 750E                    		jnz	short DoSet
 16092                                  GotBig:
 16093                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 16094                                  		; 02/09/2023
 16095 00001278 40                      		inc	ax  ; mov al, 2
 16096 00001279 803E[A805]00            		cmp	byte [mediatype], 0
 16097 0000127E 7506                    		jnz	short DoSet
 16098                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 16099                                  		; 10/12/2022
 16100                                  		;inc	al  ; al = 3
 16101                                  		; 18/12/2022
 16102 00001280 40                      		inc	ax  ; al = 3
 16103 00001281 C606[3B01]54            		mov	byte [gap_patch], 54h
 16104                                  DoSet:
 16105 00001286 1E                      		push	ds
 16106 00001287 56                      		push	si
 16107                                  
 16108                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 16109                                  		; 02/09/2023
 16110 00001288 31F6                    		xor	si, si
 16111 0000128A 8EDE                    		mov	ds, si	; 0
 16112                                  
 16113 0000128C C5367800                		lds	si, [DSKADR]
 16114                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 16115                                  		;;lds	si, ds:78h
 16116                                  
 16117 00001290 C644090F                		mov	byte [si+9], 0Fh ;
 16118                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 16119 00001294 5E                      		pop	si
 16120 00001295 1F                      		pop	ds
 16121 00001296 B417                    		mov	ah, 17h
 16122 00001298 268A5504                		mov	dl, [es:di+4]
 16123 0000129C CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 16124                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 16125                                  DasdHasBeenSet:
 16126 0000129E 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 16127 000012A2 8826[3701]              		mov	[formt_eot], ah
 16128 000012A6 C3                      		retn
 16129                                  
 16130                                  ; =============== S U B	R O U T	I N E =======================================
 16131                                  
 16132                                  ; 16/10/2022
 16133                                  
 16134                                  ; ---------------------------------------------------------------------------
 16135                                  ;
 16136                                  ; Set Media Type for Format
 16137                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 16138                                  ; BPB area in the BDS can be handled by the rom.
 16139                                  ; On Input, ES:DI -> current BDS.
 16140                                  ; The status of the operation is returned in AL
 16141                                  ;
 16142                                  ;	- 0 - if the support is available,and the combination is valid.
 16143                                  ;	- 1 - no rom support
 16144                                  ;	- 2 - illegal combination
 16145                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 16146                                  ;
 16147                                  ; Flags also may be altered. All other registers preserved.
 16148                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 16149                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 16150                                  ; to the one returned. the original pointer to the disk base table is stored
 16151                                  ; in TempDpt, until it is restored.
 16152                                  ;
 16153                                  ; ---------------------------------------------------------------------------
 16154                                  
 16155                                  		; 24/12/2023 - Retro DOS 5.0
 16156                                  
 16157                                  		; 19/10/2022
 16158                                  SetMediaForFormat:	
 16159 000012A7 51                      		push	cx
 16160 000012A8 52                      		push	dx
 16161                                  
 16162                                  		; If we have a format error, then do not change Dpt, TempDpt.
 16163                                  		; but we need to call int 13h, ah=18h again.
 16164                                  
 16165 000012A9 803E[AA05]01            		cmp	byte [had_format_error], 1
 16166 000012AE 7425                    		jz	short SkipSaveDskAdr
 16167 000012B0 30C0                    		xor	al, al		; If already done return 0
 16168 000012B2 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16169 000012B7 7502                    		jnz	short DoSetMediaForFormat
 16170 000012B9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 16171                                  ; ---------------------------------------------------------------------------
 16172                                  
 16173                                  DoSetMediaForFormat:
 16174 000012BB 06                      		push	es
 16175 000012BC 56                      		push	si
 16176                                  
 16177                                  		; 02/09/2023
 16178                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 16179 000012BD 31F6                    		xor	si, si ; 0
 16180 000012BF 8EC6                    		mov	es, si
 16181                                  
 16182 000012C1 26C4367800              		les	si, [es:DSKADR]
 16183                                  		;les	si, es:78h	; [es:DSKADR]
 16184                                  					; Get pointer to disk base table
 16185 000012C6 8936[2D01]              		mov	[dpt], si
 16186 000012CA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16187                                  
 16188                                  		; Initialize the head settle time to 0Fh. See the offsets
 16189                                  		; given in dskprm.inc.
 16190                                  
 16191 000012CE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16192 000012D3 5E                      		pop	si
 16193 000012D4 07                      		pop	es
 16194                                  SkipSaveDskAdr:
 16195                                  		; 24/12/2023
 16196 000012D5 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 16197                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 16198 000012D9 49                      		dec	cx
 16199 000012DA 80E503                  		and	ch, 3
 16200 000012DD D0CD                    		ror	ch, 1
 16201 000012DF D0CD                    		ror	ch, 1
 16202 000012E1 86CD                    		xchg	ch, cl
 16203 000012E3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 16204 000012E7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16205 000012EB 06                      		push	es
 16206 000012EC 1E                      		push	ds
 16207 000012ED 56                      		push	si
 16208 000012EE 57                      		push	di
 16209 000012EF B418                    		mov	ah, 18h
 16210 000012F1 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 16211                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 16212 000012F3 7231                    		jc	short FormaStatErr
 16213 000012F5 803E[AA05]01            		cmp	byte [had_format_error], 1
 16214 000012FA 7423                    		jz	short skip_disk_base_setting
 16215 000012FC 06                      		push	es		; Save segment returned	by the rom
 16216                                  
 16217                                  		; 02/09/2023
 16218                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 16219 000012FD 31F6                    		xor	si, si
 16220 000012FF 8EC6                    		mov	es, si ; 0
 16221 00001301 06                      		push	es ; * ; 02/09/2023
 16222                                  
 16223 00001302 26C4367800              		les	si, [es:DSKADR]
 16224                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 16225                                  					; Get current disk base	table
 16226 00001307 8936[AB05]              		mov	[tempdpt], si
 16227 0000130B 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 16228                                  
 16229                                  		; 02/09/2023
 16230                                  		;;mov	es, [zeroseg]
 16231                                  		;xor	si, si ; 0
 16232                                  		;mov	es, si
 16233 0000130F 07                      		pop	es ; * ; 02/09/2023
 16234                                  
 16235                                  		;mov	es:78h,	di
 16236 00001310 26893E7800              		mov	[es:DSKADR], di
 16237                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 16238 00001315 268F067A00              		pop	word [es:DSKADR+2]
 16239 0000131A C606[A905]01            		mov	byte [media_set_for_format], 1
 16240                                  skip_disk_base_setting:
 16241 0000131F 30C0                    		xor	al, al		; Legal	combination + rom support code
 16242                                  		;mov	ds:had_format_error, al	; Reset	the flag
 16243 00001321 A2[AA05]                		mov	[had_format_error], al
 16244 00001324 EB0E                    		jmp	short PopStatRet
 16245                                  ; ---------------------------------------------------------------------------
 16246                                  
 16247                                  FormaStatErr:
 16248                                  		; 10/12/2022
 16249 00001326 B003                    		mov	al, 3
 16250                                  
 16251 00001328 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 16252                                  					; Illegal combination =	0Ch
 16253 0000132B 7406                    		jz	short FormatStatIllegalComb
 16254 0000132D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 16255 00001330 7402                    		jz	short FormatStatTimeOut
 16256                                  		; 10/12/2022
 16257                                  		;dec	al
 16258                                  		; 18/12/2022
 16259 00001332 48                      		dec	ax
 16260                                  		; al = 2
 16261                                  		;mov	al, 1		; Function not supported.
 16262                                  		;jmp	short PopStatRet
 16263                                  ; ---------------------------------------------------------------------------
 16264                                  
 16265                                  FormatStatIllegalComb:
 16266                                  		; 10/12/2022
 16267                                  		;dec	al	; 3 -> 2 or 2 -> 1
 16268                                  		; 18/12/2022
 16269 00001333 48                      		dec	ax
 16270                                  		; al = 2
 16271                                  		;mov	al, 2		; Function supported, but
 16272                                  					; Illegal sect/trk,trk combination.
 16273                                  		; 10/12/2022
 16274                                  		;jmp	short PopStatRet
 16275                                  ; ---------------------------------------------------------------------------
 16276                                  
 16277                                  FormatStatTimeOut:
 16278                                  		; 10/12/2022
 16279                                  		; al = 3
 16280                                  		;mov	al, 3		; Function supported, but
 16281                                  					; Media	not present.
 16282                                  PopStatRet:
 16283 00001334 5F                      		pop	di
 16284 00001335 5E                      		pop	si
 16285 00001336 1F                      		pop	ds
 16286 00001337 07                      		pop	es
 16287                                  SetMediaRet:
 16288 00001338 5A                      		pop	dx
 16289 00001339 59                      		pop	cx
 16290 0000133A C3                      		retn
 16291                                  
 16292                                  ; =============== S U B	R O U T	I N E =======================================
 16293                                  
 16294                                  ; 16/10/2022
 16295                                  
 16296                                  ; ---------------------------------------------------------------------------
 16297                                  ;
 16298                                  ; RESET THE DRIVE
 16299                                  ;
 16300                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 16301                                  ; slow head settle time for the next operation. this is because the reset
 16302                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 16303                                  ; time around - there is a problem with 3.5" drives in that the head does
 16304                                  ; not settle down in time,even for read operations!!
 16305                                  ;
 16306                                  ; ---------------------------------------------------------------------------
 16307                                  
 16308                                  ResetDisk:
 16309 0000133B 50                      		push	ax
 16310                                  
 16311                                  		; 02/09/2023
 16312 0000133C B80100                  		mov	ax, 1 ; PCDOS 7.1
 16313 0000133F 3806[A905]              		cmp	[media_set_for_format], al ; 1
 16314                                  		;cmp	byte [media_set_for_format], 1
 16315                                  					; Reset while formatting?
 16316 00001343 7503                    		jnz	short ResetDisk_cont
 16317                                  					; Then verify operation in "fmt & vrfy"
 16318                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 16319 00001345 A2[AA05]                		mov	[had_format_error], al ; 1
 16320                                  ResetDisk_cont:
 16321                                  		; 02/09/2023 (ah=0)
 16322                                  		;xor	ah, ah		; So signals that we had a format error
 16323 00001348 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 16324                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 16325 0000134A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 16326                                  					; Zap up the speed
 16327 0000134F 58                      		pop	ax
 16328 00001350 C3                      		retn
 16329                                  
 16330                                  ; =============== S U B	R O U T	I N E =======================================
 16331                                  
 16332                                  ; 16/10/2022
 16333                                  
 16334                                  ; ---------------------------------------------------------------------------
 16335                                  ;
 16336                                  ; This routine sets up the drive parameter table with the values needed for
 16337                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 16338                                  ;
 16339                                  ; on entry  -	ES:DI - points to bds for the drive
 16340                                  ;		Xfer_Seg:BX - points to trkbuf
 16341                                  ;		AL    - number of sectors
 16342                                  ;		AH    - int 13 function code
 16343                                  ;		CL    - sector number for verify
 16344                                  ;		DS    - Bios_Data
 16345                                  ;
 16346                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 16347                                  ;		AX and flags are the results of the int 13
 16348                                  ;
 16349                                  ; ---------------------------------------------------------------------------
 16350                                  
 16351                                  		; 24/12/2023 - Retro DOS 5.0
 16352                                  
 16353                                  		; 19/10/2022
 16354                                  ToRom:
 16355 00001351 53                      		push	bx
 16356 00001352 56                      		push	si
 16357                                  
 16358                                  		; Compaq bug fix - check whether we are using new ROM
 16359                                  		; functionality to set up format, not merely if it exists.
 16360                                  		; This was formerly a check against [new_rom]
 16361                                  
 16362 00001353 F606[A905]01            		test	byte [media_set_for_format], 1
 16363 00001358 7534                    		jnz	short GotValidDpt
 16364 0000135A 50                      		push	ax
 16365 0000135B 06                      		push	es		; Save bds segment
 16366                                  		; 24/12/2023
 16367 0000135C 26807D3E02              		cmp	byte [es:di+3Eh], 2
 16368                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16369                                  					; ffSmall ; is it a 3.5" drive?
 16370                                  		; 24/12/2023
 16371                                  		;pushf	; not necessary	; (Save	the cmp	result)
 16372 00001361 8E06[1A00]              		mov	es, [zeroseg]
 16373                                  		;les	si, es:78h	; Get pointer to disk base table
 16374 00001365 26C4367800              		les	si, [es:DSKADR]
 16375                                  		;mov	word ptr ds:dpt, si
 16376                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 16377 0000136A 8936[2D01]              		mov	[dpt], si
 16378 0000136E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16379                                  		
 16380 00001372 A0[3701]                		mov	al, [formt_eot]
 16381 00001375 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 16382 00001379 A0[3B01]                		mov	al, [gap_patch]
 16383 0000137C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 16384                                  					; Important for	format
 16385 00001380 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16386                                  					; Assume we are	doing a	seek operation
 16387                                  					; Setup	motor start correctly for 3.5" drives
 16388                                  		; 24/12/2023
 16389                                  		;popf			; Get result of	earlier	cmp
 16390 00001385 7505                    		jnz	short MotorStrtOK
 16391 00001387 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 16392                                  MotorStrtOK:
 16393 0000138C 07                      		pop	es		; Restore bds segment
 16394 0000138D 58                      		pop	ax
 16395                                  GotValidDpt:
 16396 0000138E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 16397 00001392 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 16398 00001394 268A5504                		mov	dl, [es:di+4]	; Set drive number
 16399 00001398 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 16400 0000139C 06                      		push	es		; Save bds segment
 16401 0000139D 8E06[A804]              		mov	es, [xfer_seg]
 16402 000013A1 CD13                    		int	13h		; DISK -
 16403 000013A3 07                      		pop	es		; Restore bds segment
 16404 000013A4 5E                      		pop	si
 16405 000013A5 5B                      		pop	bx
 16406 000013A6 C3                      		retn
 16407                                  
 16408                                  ; ---------------------------------------------------------------------------
 16409                                  
 16410                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16411                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 16412                                  
 16413                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 16414                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 16415                                  
 16416                                  ; ==========================================================================
 16417                                  ;
 16418                                  ; get the owner of the physical drive represented by the logical drive in al.
 16419                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 16420                                  ; if this is not the case, the system may hang, just following the linked list.
 16421                                  ;
 16422                                  ; ==========================================================================
 16423                                  
 16424                                  		; 24/12/2023 - Retro DOS 5.0
 16425                                  
 16426                                  		; 19/10/2022
 16427                                  ioctl_getown:
 16428 000013A7 E8FAF1                  		call	SetDrive
 16429 000013AA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 16430                                  					; Get physical drive number
 16431 000013AE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 16432                                  ownloop:
 16433 000013B2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 16434 000013B6 7507                    		jnz	short getnextBDS
 16435                                  		; 24/12/2023
 16436 000013B8 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 16437                                  		; 10/12/2022
 16438                                  		;test	byte [es:di+23h], 20h
 16439                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 16440                                  					; fi_own_physical
 16441 000013BD 7514                    		jnz	short exitown
 16442                                  getnextBDS:
 16443 000013BF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 16444 000013C2 EBEE                    		jmp	short ownloop
 16445                                  ; ---------------------------------------------------------------------------
 16446                                  
 16447                                  ; ==========================================================================
 16448                                  ;
 16449                                  ; set the ownership of the physical drive represented by the logical drive
 16450                                  ; in al to al.
 16451                                  ;
 16452                                  ; ==========================================================================
 16453                                  
 16454                                  		; 24/12/2023 - Retro DOS 5.0
 16455                                  
 16456                                  		; 19/10/2022
 16457                                  ioctl_setown:
 16458 000013C4 E8DDF1                  		call	SetDrive
 16459 000013C7 C606[7A00]01            		mov	byte [fsetowner], 1
 16460                                  					; set flag for CheckSingle to look at.
 16461 000013CC E8A8F5                  		call	checksingle
 16462                                  		; 02/09/2023
 16463 000013CF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 16464                                  		;mov	byte [fsetowner], 0
 16465                                  					; set ownership	of drive reset flag
 16466                                  		; Fall into ExitOwn
 16467                                  
 16468                                  ; ==========================================================================
 16469                                  ;
 16470                                  ; if there is only one logical drive assigned to this physical drive, return
 16471                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 16472                                  ;
 16473                                  ; ==========================================================================
 16474                                  
 16475                                  		; 24/12/2023 - Retro DOS 5.0
 16476                                  exitown:
 16477 000013D3 30C9                    		xor	cl, cl
 16478                                  		; 24/12/2023
 16479 000013D5 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 16480                                  		; 12/12/2022
 16481                                  		;test	byte [es:di+23h], 10h
 16482                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 16483                                  					; fi_am_mult
 16484 000013DA 7406                    		jz	short exitnomult
 16485 000013DC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 16486                                  					; Get logical drive number
 16487                                  					; Get it 1-based
 16488 000013E0 FEC1                    		inc	cl
 16489                                  exitnomult:
 16490 000013E2 C51E[1200]              		lds	bx, [ptrsav]
 16491 000013E6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 16492                                  					; Exit normal termination
 16493                                  		; 12/12/2022
 16494                                  		; cf=0
 16495                                  		;clc
 16496 000013E9 C3                      		retn
 16497                                  
 16498                                  ; =============== S U B	R O U T	I N E =======================================
 16499                                  
 16500                                  ; 16/10/2022
 16501                                  
 16502                                  ; ---------------------------------------------------------------------------
 16503                                  ;
 16504                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 16505                                  ; only if the first byte of TempDpt is not -1.
 16506                                  ; all registers (including flags) are preserved.
 16507                                  ;
 16508                                  ; ---------------------------------------------------------------------------
 16509                                  
 16510                                  		; 24/12/2023
 16511                                  		; 19/10/2022
 16512                                  RestoreOldDpt:
 16513                                  		; if we have already restored the disk base table earlier,
 16514                                  		; do not do it again.
 16515                                  
 16516 000013EA 50                      		push	ax
 16517 000013EB 30C0                    		xor	al, al
 16518 000013ED A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 16519 000013F0 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 16520 000013F4 08C0                    		or	al, al
 16521 000013F6 7418                    		jz	short DontRestore
 16522 000013F8 56                      		push	si
 16523 000013F9 1E                      		push	ds
 16524 000013FA 06                      		push	es
 16525 000013FB C536[AB05]              		lds	si, [tempdpt]
 16526                                  
 16527                                  		; 17/10/2022
 16528                                  		;mov	es, [cs:BIOSDATAWORD]
 16529                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16530                                  		;mov	es, [es:zeroseg]
 16531                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 16532                                  
 16533                                  		; 24/12/2023
 16534 000013FF 31C0                    		xor	ax, ax
 16535 00001401 8EC0                    		mov	es, ax ; 0
 16536                                  
 16537                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 16538 00001403 2689367800              		mov	[es:DSKADR], si
 16539                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 16540 00001408 268C1E7A00              		mov	[es:DSKADR+2], ds
 16541 0000140D 07                      		pop	es
 16542 0000140E 1F                      		pop	ds
 16543 0000140F 5E                      		pop	si
 16544                                  DontRestore:
 16545 00001410 58                      		pop	ax
 16546                                  		; 12/12/2022
 16547                                  		; cf=0
 16548                                  		;clc			;  Clear carry
 16549 00001411 C3                      		retn
 16550                                  
 16551                                  ; ---------------------------------------------------------------------------
 16552                                  
 16553                                  ; 16/10/2022
 16554                                  
 16555                                  ; ==========================================================================
 16556                                  ;	get media id
 16557                                  ; ==========================================================================
 16558                                  ;
 16559                                  ; FUNCTION: get the volume label,the system id and the serial number from
 16560                                  ;	    the media that has the extended boot record.
 16561                                  ;	    for the conventional media,this routine will return "unknown
 16562                                  ;	    media type" error to dos.
 16563                                  ;
 16564                                  ; INPUT :   ES:di -> bds table for this drive.
 16565                                  ;
 16566                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 16567                                  ;	    if carry set,then al contains the device driver error number
 16568                                  ;	    that will be returned to dos.
 16569                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 16570                                  ;
 16571                                  ; SUBROUTINES TO BE CALLED:
 16572                                  ;	BootIo:NEAR
 16573                                  ;
 16574                                  ; LOGIC:
 16575                                  ;	to recognize the extended boot record,this logic will actually
 16576                                  ;	access the boot sector even if it is a hard disk.
 16577                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 16578                                  ;	field of bpb and the extended boot signature.
 16579                                  ;
 16580                                  ; {
 16581                                  ;	get logical drive number from bds table;
 16582                                  ;	rFlag = read operation;
 16583                                  ;	BootIo;		 /*get the media boot record into the buffer
 16584                                  ;	if (no error) then
 16585                                  ;	     if (extended boot record) then
 16586                                  ;		{ set volume label,volume serial number and system id
 16587                                  ;		  of the request packet to those of the boot record;
 16588                                  ;		};
 16589                                  ;	     else		  /*not an extended bpb */
 16590                                  ;		{ set register al to "unknown media.." error code;
 16591                                  ;		  set carry bit;
 16592                                  ;		};
 16593                                  ;	else
 16594                                  ;	     ret;	/*already error code is set in the register al
 16595                                  ;
 16596                                  ; ==========================================================================
 16597                                  
 16598                                  ;size_of_EXT_BOOT_SERIAL equ 4
 16599                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 16600                                  ;;size_of_EXT_SYSTEM_ID equ 8
 16601                                  
 16602                                  		; 24/12/2023 - Retro DOS 5.0
 16603                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 16604                                  
 16605                                  		; 19/10/2022
 16606                                  GetMediaId:
 16607 00001412 E8B000                  		call	ChangeLineChk
 16608 00001415 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 16609 00001419 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 16610 0000141E E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 16611 00001421 722E                    		jb	short IOCtl_If1
 16612                                  					; Valid? (0F0h-0FFh?)
 16613 00001423 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16614                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16615                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 16616                                  		; 24/12/2023
 16617 00001428 7225                    		jb	short IOCtl_If7		
 16618                                  
 16619                                  		; 24/12/2023
 16620                                  		; 10/12/2022
 16621                                  		;mov	si, disksector+26h
 16622                                  		;;;
 16623                                  		; 24/12/2023
 16624                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 16625 0000142A BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 16626 0000142D 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16627 00001432 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 16628 00001434 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 16629                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 16630                                  IOCtl_If3:
 16631                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16632                                  		;;;
 16633 00001437 803C29                  		cmp	byte [si], 29h
 16634                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16635                                  					; EXT_BOOT_SIGNATURE
 16636 0000143A 7512                    		jne	short IOCtl_If2	; not extended boot record
 16637 0000143C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 16638 00001440 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16639                                  		; 10/12/2022
 16640                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16641 00001444 46                      		inc	si
 16642                                  		; 24/12/2023
 16643                                  		; si = disksector+27h (BS_VolID)
 16644                                  		;      or disksector+43h (BS_FAT32_VolID)
 16645                                  
 16646 00001445 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16647                                  IOCtl_If4:		; 24/12/2023
 16648 00001448 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16649                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 16650                                  					; +size_of_EXT_SYSTEM_ID
 16651 0000144B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 16652                                  	
 16653                                  		; 10/12/2022
 16654                                  		; cf = 0
 16655                                  		;clc
 16656                                  
 16657 0000144D C3                      		retn
 16658                                  ; ---------------------------------------------------------------------------
 16659                                  
 16660                                  		; 24/12/2023
 16661                                  IOCtl_If2:
 16662 0000144E F9                      		stc	
 16663                                  IOCtl_If7:
 16664 0000144F B007                    		mov	al, 7		; error_unknown_media
 16665                                  		;stc
 16666                                  IOCtl_If6:
 16667                                  IOCtl_If1:
 16668 00001451 C3                      		retn
 16669                                  ; ---------------------------------------------------------------------------
 16670                                  
 16671                                  ; 16/10/2022
 16672                                  
 16673                                  ; ==========================================================================
 16674                                  ;  set media id
 16675                                  ; ==========================================================================
 16676                                  
 16677                                  ; function: set the volume label, the system id and the serial number of
 16678                                  ;	    the media that has the extended boot record.
 16679                                  ;	    for the conventional media, this routine will return "unknown
 16680                                  ;	    media.." error to dos.
 16681                                  ;	    this routine will also set the corresponding informations in
 16682                                  ;	    the bds table.
 16683                                  ;
 16684                                  ; input :   ES:di -> bds table for this drive.
 16685                                  ;
 16686                                  ; output:   the extended boot record in the media will be set according to
 16687                                  ;	    the request packet.
 16688                                  ;	    if carry set, then al contains the device driver error number
 16689                                  ;	    that will be returned to dos.
 16690                                  ;
 16691                                  ; subroutines to be called:
 16692                                  ;	BootIo:NEAR
 16693                                  ;
 16694                                  ; logic:
 16695                                  ;
 16696                                  ; {
 16697                                  ;	get drive_number from bds;
 16698                                  ;	rFlag = "read operation";
 16699                                  ;	BootIo;
 16700                                  ;	if (no error) then
 16701                                  ;	     if (extended boot record) then
 16702                                  ;		{ set volume label,volume serial number and system id
 16703                                  ;		  of the boot record to those of the request packet;
 16704                                  ;		  rFlag = "write operation";
 16705                                  ;		  get drive number from bds;
 16706                                  ;		  BootIo;	  /*write it back*/
 16707                                  ;		};
 16708                                  ;	     else		  /*not an extended bpb */
 16709                                  ;		{ set register al to "unknown media.." error code;
 16710                                  ;		  set carry bit;
 16711                                  ;		  ret;	 /*return back to caller */
 16712                                  ;		};
 16713                                  ;	else
 16714                                  ;	     ret;		 /*already error code is set */
 16715                                  ;
 16716                                  ; ==========================================================================
 16717                                  
 16718                                  		; 24/12/2023 - Retro DOS 5.0
 16719                                  
 16720                                  		; 19/10/2022
 16721                                  SetMediaId:
 16722 00001452 E87000                  		call	ChangeLineChk
 16723 00001455 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 16724                                  					; Logical drive	number
 16725 00001459 88C2                    		mov	dl, al
 16726 0000145B C606[2001]02            		mov	byte [rflag], 2	; romread
 16727 00001460 52                      		push	dx
 16728 00001461 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 16729 00001464 5A                      		pop	dx
 16730 00001465 72EA                    		jb	short IOCtl_If6
 16731                                  					; Valid? (0F0h-0FFh?)
 16732 00001467 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16733                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16734 0000146C 72E1                    		jb	short IOCtl_If7	; Brif not
 16735                                  
 16736                                  		; 24/12/2023
 16737                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16738                                  		;			; EXT_BOOT_SIGNATURE
 16739                                  		;jnz	short IOCtl_If7	; not extended boot record
 16740                                  		
 16741 0000146E 06                      		push	es		; Save BDS pointer
 16742 0000146F 57                      		push	di
 16743 00001470 1E                      		push	ds		; Point	ES To boot record
 16744 00001471 07                      		pop	es
 16745                                  
 16746                                  		; 24/12/2023
 16747                                  		;;;
 16748                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 16749 00001472 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 16750 00001475 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16751 0000147A 7403                    		jz      short IOCtl_If5	; FAT32 fs
 16752 0000147C 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 16753                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 16754                                  IOCtl_If5:
 16755                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16756 0000147F 803D29                  		cmp	byte [di], 29h
 16757 00001482 7404                    		je	short IOCtl_If8
 16758 00001484 5F                      		pop	di		; not extended boot record
 16759 00001485 07                      		pop	es
 16760                                  		;jmp	short IOCtl_If7
 16761                                  		; 24/12/2023
 16762 00001486 EBC6                    		jmp	short IOCtl_If2
 16763                                  IOCtl_If8:
 16764                                  		;;;
 16765                                  		; 24/12/2023
 16766                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16767 00001488 47                      		inc	di
 16768                                  		; di = disksector+27h (BS_VolID)
 16769                                  		;      or disksector+43h (BS_FAT32_VolID)
 16770                                  
 16771 00001489 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 16772 0000148D C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 16773 00001490 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16774                                  		
 16775                                  		; 24/12/2023
 16776                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16777                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 16778                                  		;			; +size_of_EXT_SYSTEM_ID
 16779                                  		;rep movsb
 16780 00001493 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 16781                                  
 16782 00001496 06                      		push	es		; point	ds back	to Bios_Data
 16783 00001497 1F                      		pop	ds
 16784 00001498 5F                      		pop	di		; restore bds pointer
 16785 00001499 07                      		pop	es
 16786 0000149A E8B2F3                  		call	mov_media_ids	; update the bds media id info.
 16787 0000149D 88D0                    		mov	al, dl
 16788 0000149F C606[2001]03            		mov	byte [rflag], 3	; romwrite
 16789 000014A4 E80600                  		call	BootIo		; write	it back.
 16790 000014A7 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 16791                                  					; make sure chk_media check the driver
 16792                                  					; return with error code from BootIo
 16793 000014AC C3                      		retn
 16794                                  ; ---------------------------------------------------------------------------
 16795                                  
 16796                                  		; 24/12/2023
 16797                                  ;IOCtl_If7:
 16798                                  ;		mov	al, 7		; error_unknown_media
 16799                                  ;		stc
 16800                                  ;IOCtl_If6:
 16801                                  ;		retn
 16802                                  
 16803                                  ; =============== S U B	R O U T	I N E =======================================
 16804                                  
 16805                                  ; 16/10/2022
 16806                                  
 16807                                  ; ---------------------------------------------------------------------------
 16808                                  ;	BootIo
 16809                                  ; ---------------------------------------------------------------------------
 16810                                  ;
 16811                                  ; function: read/write the boot record into boot sector.
 16812                                  ;
 16813                                  ; input :
 16814                                  ;	    al=logical drive number
 16815                                  ;	    rFlag = operation (read/write)
 16816                                  ;
 16817                                  ; output:   for read operation,the boot record of the drive specified in bds
 16818                                  ;	    be read into the DiskSector buffer.
 16819                                  ;	    for write operation,the DiskSector buffer image will be written
 16820                                  ;	    to the drive specified in bds.
 16821                                  ;	    if carry set,then al contains the device driver error number
 16822                                  ;	    that will be returned to dos.
 16823                                  ;	    AX,CX,DX register destroyed.
 16824                                  ;	    if carry set,then al will contain the error code from DiskIO.
 16825                                  ;
 16826                                  ; subroutines to be called:
 16827                                  ;	DiskIO:NEAR
 16828                                  ;
 16829                                  ; logic:
 16830                                  ;
 16831                                  ; {
 16832                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 16833                                  ;	sectorcount = 1;	 /*read 1 sector only */
 16834                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 16835                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 16836                                  ; }
 16837                                  ; ==========================================================================
 16838                                  
 16839                                  		; 19/10/2022
 16840                                  BootIo:	
 16841 000014AD 06                      		push	es
 16842 000014AE 57                      		push	di
 16843 000014AF 53                      		push	bx
 16844 000014B0 1E                      		push	ds
 16845 000014B1 07                      		pop	es		; Point ES: to Bios_Data
 16846                                  
 16847                                  		; Call DiskIO to read/write the boot sec. The parameters which
 16848                                  		; need to be initialized for this subroutine out here are
 16849                                  		; - Transfer address to Bios_Data:DiskSector
 16850                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 16851                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 16852                                  		; - Number of sectors <-- 1
 16853                                  
 16854 000014B2 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 16855 000014B5 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 16856 000014B7 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 16857 000014BB B90100                  		mov	cx, 1
 16858 000014BE E850F5                  		call	diskio
 16859 000014C1 5B                      		pop	bx
 16860 000014C2 5F                      		pop	di
 16861 000014C3 07                      		pop	es
 16862 000014C4 C3                      		retn
 16863                                  
 16864                                  ; =============== S U B	R O U T	I N E =======================================
 16865                                  
 16866                                  ; 16/10/2022
 16867                                  
 16868                                  ; ---------------------------------------------------------------------------
 16869                                  ;	ChangeLineChk
 16870                                  ; ---------------------------------------------------------------------------
 16871                                  ;
 16872                                  ; when the user calls get/set media id call before dos establishes the media
 16873                                  ; by calling "media_chk",the change line activity of the drive is going to be
 16874                                  ; lost.	this routine will check the change line activity and will save the
 16875                                  ; history in the flags.
 16876                                  ;
 16877                                  ; FUNCTION: check the change line error activity
 16878                                  ;
 16879                                  ; INPUT :  ES:di -> bds table.
 16880                                  ;
 16881                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 16882                                  ;
 16883                                  ; SUBROUTINES TO BE CALLED:
 16884                                  ;	Set_Changed_DL
 16885                                  ;
 16886                                  ; ---------------------------------------------------------------------------
 16887                                  
 16888                                  		; 24/12/2023 - Retro DOS 5.0
 16889                                  ChangeLineChk:	
 16890 000014C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16891 000014C9 08D2                    		or	dl, dl		; Fixed	disk?
 16892 000014CB 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 16893                                  		; 24/12/2023
 16894 000014CD 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 16895                                  		; 12/12/2022
 16896                                  		;test	byte [es:di+23h], 4
 16897                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 16898                                  					; return_fake_bpb
 16899 000014D2 751A                    		jnz	short ChangeLnChkRet
 16900 000014D4 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 16901 000014D9 7513                    		jnz	short ChangeLnChkRet
 16902 000014DB E8AD07                  		call	haschange	; This drive support change line?
 16903 000014DE 740E                    		jz	short ChangeLnChkRet ; Do nothing
 16904                                  
 16905                                  		; Execute the rom disk interrupt to check changeline activity.
 16906                                  
 16907 000014E0 B416                    		mov	ah, 16h
 16908 000014E2 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 16909                                  				; DL = drive to	check
 16910                                  				; Return: AH = disk change status
 16911 000014E4 7308                    		jnb	short ChangeLnChkRet
 16912 000014E6 53                      		push	bx
 16913 000014E7 BB4000                  		mov	bx, 40h		; fchanged
 16914                                  					; Update flag in BDS for this
 16915                                  					; physical drive
 16916 000014EA E87707                  		call	set_changed_dl
 16917 000014ED 5B                      		pop	bx
 16918                                  ChangeLnChkRet:				
 16919 000014EE C3                      		retn
 16920                                  
 16921                                  ; ---------------------------------------------------------------------------
 16922                                  
 16923                                  ; 16/10/2022
 16924                                  
 16925                                  ; ==========================================================================
 16926                                  ;	GetAccessFlag
 16927                                  ; ==========================================================================
 16928                                  ;
 16929                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 16930                                  ;
 16931                                  ; INPUT :
 16932                                  ;	    ES:di -> bds table
 16933                                  ;
 16934                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 16935                                  ;						 = 1 if disk i/o allowed.
 16936                                  ; ==========================================================================
 16937                                  
 16938                                  		; 24/12/2023 - Retro DOS 5.0
 16939                                  
 16940                                  		; 19/10/2022
 16941                                  GetAccessFlag:				
 16942 000014EF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16943 000014F3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16944                                  		;mov	al, 0		; Assume result	is unformatted
 16945                                  		; 10/12/2022
 16946 000014F6 28C0                    		sub	al, al
 16947                                  		; 24/12/2023
 16948 000014F8 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16949                                  		;test	word ptr es:[di+3Fh], 200h
 16950                                  		; 10/12/2022
 16951                                  		;test	byte [es:di+36], 02h
 16952                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 16953                                  					; unformatted_media
 16954 000014FD 7501                    		jnz	short GafDone	; Done if unformatted
 16955                                  		;inc	al		; Return true for formatted
 16956                                  		; 24/12/2023
 16957 000014FF 40                      		inc	ax
 16958                                  GafDone:				
 16959 00001500 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16960 00001503 C3                      		retn
 16961                                  ; ---------------------------------------------------------------------------
 16962                                  
 16963                                  ; 16/10/2022
 16964                                  
 16965                                  ; ==========================================================================
 16966                                  ;	SetAccessFlag
 16967                                  ; ==========================================================================
 16968                                  ;
 16969                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 16970                                  ;
 16971                                  ; input :
 16972                                  ;	    ES:di -> bds table
 16973                                  ;
 16974                                  ; output:   unformtted_media bit modified according to the user request
 16975                                  ; ==========================================================================
 16976                                  
 16977                                  		; 24/12/2023 - Retro DOS 5.0
 16978                                  
 16979                                  		; 19/10/2022
 16980                                  SetAccessFlag:				
 16981 00001504 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 16982 00001508 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16983                                  		; 24/12/2023
 16984 0000150B 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 16985                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 16986                                  		; 10/12/2022
 16987                                  		;and	byte [es:di+36], 0FDh
 16988                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 16989                                  					; ~unformatted_media
 16990 00001510 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16991 00001514 7505                    		jnz	short saf_Done
 16992                                  		; 24/12/2023
 16993 00001516 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16994                                  		;or	word ptr es:[di+3Fh], 200h
 16995                                  		; 15/04/2024
 16996                                  		; 10/12/2022
 16997                                  		;or	byte [es:di+36], 02h
 16998                                  		;;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 16999                                  					; unformatted_media
 17000                                  saf_Done:				
 17001 0000151B C3                      		retn
 17002                                  ; ---------------------------------------------------------------------------
 17003                                  
 17004                                  ; 16/10/2022
 17005                                  
 17006                                  ; ==========================================================================
 17007                                  ; Ioctl_Support_Query
 17008                                  ; ==========================================================================
 17009                                  ;
 17010                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 17011                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 17012                                  ; device attributes specifies if this function is supported.
 17013                                  ;
 17014                                  ; ==========================================================================
 17015                                  
 17016                                  		; 24/12/2023 - Retro DOS 5.0
 17017                                  
 17018                                  		; 19/10/2022
 17019                                  ioctl_support_query:
 17020 0000151C 06                      		push	es
 17021 0000151D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 17022 00001521 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 17023                                  					; AL ==	Major, AH == Minor
 17024                                  		; 24/12/2023
 17025                                  		; 02/09/2023 (PCDOS 7.1)
 17026 00001525 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 17027                                  					; new generic ioctl function (FAT32)
 17028 00001527 7404                    		je	short ioctl_support
 17029                                  
 17030 00001529 3C08                    		cmp	al, 8		; IOC_DC
 17031                                  					; See if major code is 8
 17032 0000152B 7513                    		jne	short nosupport
 17033                                  ioctl_support:
 17034 0000152D 0E                      		push	cs
 17035 0000152E 07                      		pop	es
 17036                                  		; 24/12/2023
 17037                                  		; 02/09/2023
 17038 0000152F B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 17039                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 17040                                  		; 10/12/2022
 17041 00001532 BF[BD0E]                		mov	di, IOC_DC_Table
 17042                                  		;mov	di, 0C60h	; IOC_DC_Table
 17043                                  					; at 2C7h:0C60h	= 70h:31D0h
 17044 00001535 86E0                    		xchg	al, ah		; Put minor code in AL
 17045 00001537 F2AE                    		repne scasb		; Scan for minor code in AL
 17046 00001539 7505                    		jnz	short nosupport	; it was not found
 17047 0000153B B80001                  		mov	ax, 100h
 17048                                  		; 10/12/2022
 17049                                  		; (jump to ioctlsupexit is not required)
 17050                                  		;jmp	short $+2	; ioctlsupexit
 17051                                  					; Signal ioctl is supported
 17052                                  		;;jmp	short ioctlsupexit
 17053                                  ; ---------------------------------------------------------------------------
 17054                                  ioctlsupexit:
 17055 0000153E 07                      		pop	es
 17056                                  		; 10/12/2022
 17057                                  		; cf = 0
 17058                                  		;clc
 17059 0000153F C3                      		retn
 17060                                  ; ---------------------------------------------------------------------------
 17061                                  nosupport:
 17062 00001540 07                      		pop	es
 17063 00001541 E991EB                  		jmp	bc_cmderr
 17064                                  ; ---------------------------------------------------------------------------
 17065                                  
 17066                                  ; 16/10/2022
 17067                                  
 17068                                  ; ==========================================================================
 17069                                  ;	GetMediaSenseStatus
 17070                                  ; ==========================================================================
 17071                                  ;
 17072                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 17073                                  ;	    diskette drive and whether the media is the default type
 17074                                  ;	    for that drive. (default type means the max size for that
 17075                                  ;	    drive)
 17076                                  ;
 17077                                  ; INPUT :   ES:DI -> BDS table
 17078                                  ; OUTPUT:   If carry clear
 17079                                  ;	    DS:BX -> Updated IOCtlPacket
 17080                                  ;
 17081                                  ;			 Special Function at offset 0:
 17082                                  ;				0	- Media detected is not default type
 17083                                  ;				1	- Media detected is default type
 17084                                  ;
 17085                                  ;			 Device Type at offset 1:
 17086                                  ;				2       - 720K 3.5" 80 tracks
 17087                                  ;				7	- 1.44M 3.5" 80 tracks
 17088                                  ;				9	- 2.88M 3.5" 80 tracks
 17089                                  ;
 17090                                  ; Error Codes returned in AX if carry set:
 17091                                  ;
 17092                                  ; 8102 - Drive not ready	- No disk is in the drive.
 17093                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 17094                                  ;				  the media is really unkown, any error
 17095                                  ;				  other than "media not present"
 17096                                  ; 
 17097                                  ; ==========================================================================
 17098                                  
 17099                                  		; 19/10/2022
 17100                                  SenseMediaType:
 17101 00001544 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 17102 00001548 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17103                                  		; 10/10/2022
 17104                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 17105 0000154B 31D2                    		xor	dx, dx
 17106 0000154D 8917                    		mov	[bx], dx ; 0
 17107                                  		;
 17108 0000154F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17109                                  					; Get int 13h drive number from	BDS
 17110                                  		; 10/12/2022
 17111                                  		;xor	dh, dh		; DX = physical	drive number
 17112 00001553 B420                    		mov	ah, 20h		; Get Media Type function
 17113                                  					; If no	carry media type in AL
 17114 00001555 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 17115 00001557 7216                    		jc	short MediaSenseEr ; error code	in AH
 17116 00001559 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 17117                                  DetermineMediaType:
 17118 0000155B FEC8                    		dec	al
 17119 0000155D 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 17120 0000155F 740A                    		jz	short GotMediaType
 17121 00001561 0404                    		add	al, 4
 17122 00001563 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 17123 00001565 7404                    		jz	short GotMediaType
 17124 00001567 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 17125 00001569 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 17126                                  GotMediaType:
 17127 0000156B 884701                  		mov	[bx+1],	al	; Save the return value
 17128                                  		; 10/12/2022
 17129                                  		; cf = 0
 17130                                  		;clc			; Signal success
 17131 0000156E C3                      		retn
 17132                                  ; ---------------------------------------------------------------------------
 17133                                  
 17134                                  MediaSenseEr:
 17135 0000156F 80FC32                  		cmp	ah, 32h		; See if not default media error
 17136 00001572 74E7                    		jz	short DetermineMediaType ; Not really an error
 17137 00001574 B002                    		mov	al, 2		; Now assume drive not ready
 17138 00001576 80FC31                  		cmp	ah, 31h		; See if media was present
 17139 00001579 7402                    		jz	short SenseErrExit ; Return drive not ready
 17140                                  UnknownMediaType:
 17141 0000157B B007                    		mov	al, 7		; Just don't know the media type
 17142                                  SenseErrExit:
 17143 0000157D B481                    		mov	ah, 81h		; Signal error return
 17144 0000157F F9                      		stc
 17145 00001580 C3                      		retn
 17146                                  
 17147                                  ; ----------------------------------------------------------------------------
 17148                                  		; 10/12/2022
 17149                                  		;db    0
 17150                                  ; ----------------------------------------------------------------------------
 17151                                  
 17152                                  ;-----------------------------------------------------------------------------
 17153                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 17154                                  ;-----------------------------------------------------------------------------
 17155                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 17156                                  
 17157                                  ; =============== S U B R O U T I N E =======================================
 17158                                  
 17159                                  SetLockState:
 17160 00001581 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 17161 00001585 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17162                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17163                                  		;call	check_int13h_exts_present
 17164                                  		; 26/12/2023
 17165 00001588 E82100                  		call	check_int13h_exts_p
 17166                                  		;mov	al, 3		; unknown command error
 17167 0000158B 721C                    		jc	short setlockst_ret
 17168 0000158D 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 17169 0000158F B445                    		mov	ah, 45h
 17170 00001591 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 17171                                  		; (DL - drive, [SI - disk address packet)
 17172 00001593 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 17173                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 17174                                  		
 17175                                  		; 26/12/2023
 17176 00001596 EB0A                    		jmp	short sls_em
 17177                                  
 17178                                  ;		jnc	short setlockst_ret
 17179                                  ;		mov	al, ah
 17180                                  ;		call	maperror
 17181                                  ;setlockst_ret:
 17182                                  ;		mov	ah, 81h		; Return this status in case of carry
 17183                                  ;		retn
 17184                                  
 17185                                  ; =============== S U B R O U T I N E =======================================
 17186                                  
 17187                                  EjectMedia:
 17188                                  		;mov	dl, [es:di+4]	; eject media in drive
 17189                                  		;			; [es:di+BDS.drivenum]
 17190                                  		;call	check_int13h_exts_present
 17191                                  		; 26/12/2023
 17192 00001598 E81100                  		call	check_int13h_exts_p
 17193                                  		;mov	al, 3		; unknown command error
 17194 0000159B 720C                    		jc	short ejectm_ret
 17195 0000159D B80046                  		mov	ax, 4600h
 17196 000015A0 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 17197                                  		; (DL - drive)
 17198                                  sls_em:			; 26/12/2023
 17199 000015A2 7305                    		jnc	short ejectm_ret
 17200 000015A4 88E0                    		mov	al, ah
 17201 000015A6 E800F8                  		call	maperror
 17202                                  setlockst_ret:		; 26/12/2023
 17203                                  ejectm_ret:
 17204 000015A9 B481                    		mov	ah, 81h		; Return this status in case of carry
 17205 000015AB C3                      		retn
 17206                                  
 17207                                  ; =============== S U B R O U T I N E =======================================
 17208                                  
 17209                                  		; 26/12/2023
 17210                                  check_int13h_exts_p:
 17211 000015AC 268A5504                		mov	dl, [es:di+4]
 17212                                  
 17213                                  check_int13h_exts_present:
 17214 000015B0 B441                    		mov	ah, 41h
 17215 000015B2 53                      		push	bx
 17216 000015B3 BBAA55                  		mov	bx, 55AAh
 17217 000015B6 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 17218                                  					; BX = 55AAh, DL = drive number
 17219                                  					; Return: CF set if not supported
 17220                                  					; AH = extensions version
 17221                                  					; BX = AA55h
 17222                                  					; CX = Interface support bit map
 17223 000015B8 81FB55AA                		cmp	bx, 0AA55h
 17224 000015BC 5B                      		pop	bx
 17225 000015BD 7505                    		jnz	short exts_notsupported
 17226 000015BF F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 17227 000015C2 7503                    		jnz	short exts_supported
 17228                                  exts_notsupported:
 17229                                  		; 26/12/2023
 17230 000015C4 B003                    		mov	al, 3
 17231                                  		;
 17232 000015C6 F9                      		stc
 17233                                  exts_supported:
 17234 000015C7 C3                      		retn
 17235                                  
 17236                                  ; =============== S U B R O U T I N E =======================================
 17237                                  
 17238                                  GetDrvMapInfo:
 17239 000015C8 8CD9                    		mov	cx, ds		; get drive map information
 17240                                  					;
 17241                                  					; es:di points to BDS which belongs to
 17242                                  					;	  the requested logical/dos drive number
 17243                                  					;
 17244                                  					; Format of parameter block:
 17245                                  					; Offset  Description (Table 01570)
 17246                                  					;  00h    (call) length of this buffer (in bytes)
 17247                                  					;  01h    (ret) number of bytes in parameter block
 17248                                  					;	    actually used
 17249                                  					;  02h    (ret) drive flags
 17250                                  					;  03h    (ret) physical drive number
 17251                                  					;	    00h-7Fh floppy
 17252                                  					;	    80h-FEh hard
 17253                                  					;	    FFh no physical drive
 17254                                  					;  04h    (ret) bitmap of logical drives associated with
 17255                                  					;	    physical drive
 17256                                  					;	    bit 0 = drive A:, etc.
 17257                                  					;  08h    (ret) relative block address of partition start
 17258                                  					;	    qword
 17259                                  					;
 17260                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 17261 000015CA C51E[1200]              		lds	bx, [ptrsav]
 17262 000015CE C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17263 000015D1 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 17264                                  					; al = unknown command error (03h)
 17265 000015D4 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 17266 000015D7 7251                    		jb	short gdmi_4
 17267 000015D9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17268 000015DD 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 17269 000015E0 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 17270 000015E4 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 17271 000015E8 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 17272 000015EB 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 17273 000015EF 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 17274 000015F2 31C0                    		xor	ax, ax ; 0
 17275 000015F4 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 17276 000015F7 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 17277 000015FA 89470E                  		mov	[bx+0Eh], ax
 17278 000015FD 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 17279                                  					; initialized as 0
 17280 00001600 894706                  		mov	[bx+6], ax ; 0
 17281 00001603 8EC1                    		mov	es, cx
 17282                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 17283 00001605 26C43E[1901]            		les	di, [es:start_bds]
 17284 0000160A B90100                  		mov	cx, 1		; bit 0 (drive A:)
 17285                                  gdmi_1:
 17286 0000160D 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 17287 00001610 7415                    		jz	short gdmi_3	; yes
 17288 00001612 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 17289                                  					; is it same physical drive ?
 17290 00001616 7506                    		jnz	short gdmi_2	; no
 17291 00001618 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 17292                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 17293 0000161B 094706                  		or	[bx+6], ax
 17294                                  gdmi_2:
 17295 0000161E D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 17296 00001620 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 17297 00001622 26C43D                  		les	di, [es:di]	; next BDS
 17298 00001625 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 17299                                  gdmi_3:
 17300 00001627 B80001                  		mov	ax, 100h	; success
 17301                                  gdmi_4:
 17302 0000162A C3                      		retn
 17303                                  
 17304                                  ;-----------------------------------------------------------------------------
 17305                                  
 17306                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17307                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17308                                  
 17309                                  ;-----------------------------------------------------------------------------
 17310                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 17311                                  ;-----------------------------------------------------------------------------
 17312                                  ; 16/03/2019 - Retro DOS v4.0
 17313                                  
 17314                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 17315                                  ;	after booting. this allows testing and implementation of custom int_13
 17316                                  ;	handlers, without giving up ms-dos error recovery
 17317                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 17318                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 17319                                  ;	exit:	orig13	== address of new int_13 handler
 17320                                  ;		ds:dx	== old orig13 value
 17321                                  ;		es:bx	== old old13  value
 17322                                  ;
 17323                                  ; int 2f handler for external block drivers to communicate with the internal
 17324                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 17325                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 17326                                  ; dsk_entry, the entry point for all disk requests.
 17327                                  ;
 17328                                  ; on exit from this driver, we will return to the external driver
 17329                                  ; that issued this int 2f, and can then remove the flags from the stack.
 17330                                  ; this scheme allows us to have a small external device driver, and makes
 17331                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 17332                                  ; since we only need to make changes in one place (most of the time).
 17333                                  ;
 17334                                  ;   ax=800h - check for installed handler - reserved
 17335                                  ;   ax=801h - install the bds into the linked list
 17336                                  ;   ax=802h - dos request
 17337                                  ;   ax=803h - return bds table starting pointer in ds:di
 17338                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 17339                                  ;	    problem. bds table is going to be used to get head/sector
 17340                                  ;	    informations without calling generic ioctl get device parm call.)
 17341                                  
 17342                                  ;BIOSSEGMENT equ 70h
 17343                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 17344                                  
 17345                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 17346                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 17347                                  
 17348                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 17349 0000162B 80FC13                  		cmp	ah, 13h
 17350 0000162E 7413                    		jz	short int2f_replace_int13
 17351 00001630 80FC08                  		cmp	ah, 8
 17352 00001633 7432                    		jz	short mine
 17353                                  
 17354                                  ; Check for WIN386 startup and return the BIOS instance data
 17355                                  
 17356 00001635 80FC16                  		cmp	ah, 16h		; MultWin386
 17357 00001638 746D                    		jz	short win386call
 17358 0000163A 80FC4A                  		cmp	ah, 4Ah		; multMULT
 17359 0000163D 7503                    		jnz	short i2f_handler_iret
 17360 0000163F E99800                  		jmp	handle_multmult
 17361                                  ; ---------------------------------------------------------------------------
 17362                                  
 17363                                  i2f_handler_iret:			
 17364 00001642 CF                      		iret
 17365                                  ; ---------------------------------------------------------------------------
 17366                                  
 17367                                  int2f_replace_int13:
 17368 00001643 FA                      		cli	; 26/12/2023
 17369 00001644 50                      		push	ax	; free up a register for caller's ds
 17370 00001645 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 17371                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 17372                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 17373                                  					; = [02C7h:0030h] = [0070h:25A0h]
 17374 00001647 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17375                                  		; 19/10/2022
 17376                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 17377                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 17378                                  		;push	word ptr ds:Old13	; return them to caller
 17379                                  		;push	word ptr ds:Old13+2
 17380                                  		
 17381                                  		; 02/09/2023 (PCDOS 7.1)
 17382                                  		;push	word [Orig13]
 17383 0000164C FF36[B600]              		push	word [Orig13+2]
 17384                                  		;push	word [Old13]
 17385 00001650 FF36[0801]              		push	word [Old13+2]
 17386                                  
 17387                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 17388                                  		;mov	word ptr ds:Orig13+2, ax
 17389                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 17390                                  		;mov	word ptr ds:Old13+2, es
 17391                                  		
 17392                                  		;mov	[Orig13], dx
 17393                                  		; 02/09/2023
 17394 00001654 8716[B400]              		xchg	dx, [Orig13]
 17395 00001658 A3[B600]                		mov	[Orig13+2], ax
 17396                                  		;mov	[Old13], bx
 17397                                  		; 02/09/2023
 17398 0000165B 871E[0601]              		xchg	bx, [Old13]
 17399 0000165F 8C06[0801]              		mov	[Old13+2], es
 17400                                  
 17401 00001663 07                      		pop	es			; es:bx := old old13 vector
 17402                                  		; 02/09/2023
 17403                                  		;pop	bx
 17404 00001664 1F                      		pop	ds			; ds:dx := old orig13 vector
 17405                                  		;pop	dx ; 02/09/2023
 17406 00001665 58                      		pop	ax
 17407                                  i2f_iret:
 17408 00001666 CF                      		iret
 17409                                  ; ---------------------------------------------------------------------------
 17410                                  
 17411                                  mine:
 17412 00001667 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 17413 00001669 73FB                    		jnb	short i2f_iret
 17414 0000166B 08C0                    		or	al, al			; a get installed state request?
 17415 0000166D 7503                    		jnz	short disp_func
 17416 0000166F B0FF                    		mov	al, 0FFh
 17417                                  		;jmp	short i2f_iret
 17418                                  		; 02/09/2023
 17419 00001671 CF                      		iret
 17420                                  ; ---------------------------------------------------------------------------
 17421                                  
 17422                                  disp_func:
 17423 00001672 3C01                    		cmp	al, 1			; request for installing bds?
 17424 00001674 7418                    		jz	short do_subfun_01
 17425 00001676 3C03                    		cmp	al, 3			; get bds vector?
 17426 00001678 7423                    		jz	short do_get_bds_vector
 17427                                  
 17428                                  ; set up pointer to request packet
 17429                                  
 17430 0000167A 1E                      		push	ds
 17431 0000167B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17432                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17433                                  					; = [0070h:25A0h] = [02C7h:0030h]
 17434                                  		; 19/10/2022
 17435                                  		;mov	word ptr ds:ptrsav, bx
 17436                                  		;mov	word ptr ds:ptrsav+2, es
 17437 00001680 891E[1200]              		mov	[ptrsav], bx
 17438 00001684 8C06[1400]              		mov	[ptrsav+2], es
 17439 00001688 1F                      		pop	ds
 17440                                  		;jmp	far ptr	i2f_dskentry
 17441                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 17442                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 17443 00001689 EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 17444                                  		;; 17/10/2022
 17445                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 17446                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 17447                                  					; NOTE: jump to a FAR function, not an
 17448                                  					;  IRET type function. Callers of
 17449                                  					;  this int2f subfunction will have
 17450                                  					;  to be careful to do a popf
 17451                                  
 17452                                  ; ---------------------------------------------------------------------------
 17453                                  
 17454                                  do_subfun_01:
 17455 0000168E 06                      		push	es
 17456 0000168F 1E                      		push	ds
 17457 00001690 1E                      		push	ds
 17458 00001691 07                      		pop	es
 17459                                  		; 17/10/2022
 17460 00001692 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17461                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17462                                  					; point	ds: -> Bios_Data
 17463 00001697 E8BC03                  		call	install_bds
 17464 0000169A 1F                      		pop	ds
 17465 0000169B 07                      		pop	es
 17466                                  		;jmp	short i2f_iret
 17467                                  		; 02/09/2023
 17468 0000169C CF                      		iret
 17469                                  ; ---------------------------------------------------------------------------
 17470                                  
 17471                                  do_get_bds_vector:
 17472                                  		; 17/10/2022
 17473 0000169D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17474                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17475 000016A2 C53E[1901]              		lds	di, [start_bds]
 17476                                  		;lds	di, ds:start_bds
 17477                                  ;ii2f_iret:	; 10/12/2022
 17478                                  		;jmp	short i2f_iret
 17479                                  		; 02/09/2023
 17480 000016A6 CF                      		iret
 17481                                  ; ---------------------------------------------------------------------------
 17482                                  
 17483                                  ; 17/10/2022
 17484                                  ; 16/10/2022
 17485                                  
 17486                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 17487                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 17488                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 17489                                  
 17490                                  win386call:
 17491 000016A7 1E                      		push	ds
 17492 000016A8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17493                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17494                                  					; at 2C7h:30h =	70h:25A0h
 17495 000016AD 3C05                    		cmp	al, 5		; Win386_Init
 17496                                  					; is it	win386 initializing?
 17497 000016AF 7410                    		jz	short Win386Init
 17498 000016B1 3C06                    		cmp	al, 6		; Win386_Exit
 17499                                  					; is it	win386 exiting?
 17500 000016B3 7523                    		jnz	short win_iret	; if not, continue int2f chain
 17501                                  		; 12/12/2022
 17502 000016B5 F6C201                  		test	dl, 1
 17503                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 17504 000016B8 751E                    		jnz	short win_iret	; if not win386, then continue
 17505                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 17506 000016BA 8026[1208]00            		and	byte [IsWin386], 0 
 17507 000016BF EB17                    		jmp	short win_iret
 17508                                  ; ---------------------------------------------------------------------------
 17509                                  
 17510                                  Win386Init:
 17511                                  		; 12/12/2022
 17512 000016C1 F6C201                  		test	dl, 1
 17513                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 17514 000016C4 7512                    		jnz	short win_iret	; if not win386, then continue
 17515                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 17516 000016C6 800E[1208]01            		or	byte [IsWin386], 1
 17517                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 17518                                  		;mov	word ptr ds:SI_Next+2, es
 17519 000016CB 891E[E007]              		mov	[SI_Next], bx
 17520 000016CF 8C06[E207]              		mov	[SI_Next+2], es
 17521                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 17522 000016D3 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 17523 000016D6 1E                      		push	ds
 17524 000016D7 07                      		pop	es
 17525                                  win_iret:
 17526 000016D8 1F                      		pop	ds
 17527                                  ii2f_iret:	; 10/12/2022
 17528                                  		;jmp	short i2f_iret	; return back up the chain
 17529                                  		; 02/09/2023
 17530 000016D9 CF                      		iret
 17531                                  ; ---------------------------------------------------------------------------
 17532                                  
 17533                                  handle_multmult:
 17534 000016DA 3C01                    		cmp	al, 1
 17535 000016DC 7514                    		jnz	short try_2
 17536 000016DE 1E                      		push	ds
 17537 000016DF E84500                  		call	HMAPtr		; get offset of free HMA
 17538                                  		; 10/12/2022
 17539                                  		;xor	bx, bx
 17540                                  		;dec	bx
 17541 000016E2 BBFFFF                  		mov	bx, 0FFFFh
 17542 000016E5 8EC3                    		mov	es, bx		; seg of HMA
 17543 000016E7 89FB                    		mov	bx, di
 17544 000016E9 F7D3                    		not	bx
 17545 000016EB 09DB                    		or	bx, bx
 17546 000016ED 7401                    		jz	short try_1
 17547 000016EF 43                      		inc	bx
 17548                                  try_1:
 17549 000016F0 1F                      		pop	ds
 17550                                  		;jmp	short ii2f_iret
 17551                                  		; 02/09/2023
 17552 000016F1 CF                      		iret
 17553                                  ; ---------------------------------------------------------------------------
 17554                                  
 17555                                  try_2:
 17556 000016F2 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 17557 000016F4 7530                    		jnz	short try_3
 17558 000016F6 1E                      		push	ds
 17559                                  		; 10/12/2022
 17560                                  		;xor	di, di
 17561                                  		;dec	di
 17562 000016F7 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 17563 000016FA 8EC7                    		mov	es, di
 17564 000016FC E82800                  		call	HMAPtr		; get offset of free HMA
 17565 000016FF 83FFFF                  		cmp	di, 0FFFFh
 17566 00001702 7421                    		jz	short InsuffHMA
 17567 00001704 F7DF                    		neg	di		; free space in HMA
 17568 00001706 39FB                    		cmp	bx, di
 17569 00001708 7605                    		jbe	short try_4
 17570                                  		; 10/12/2022
 17571                                  		;sub	di, di
 17572                                  		;dec	di
 17573 0000170A BFFFFF                  		mov	di, 0FFFFh
 17574                                  		;jmp	short InsuffHMA
 17575                                  		; 02/09/2023
 17576 0000170D 1F                      		pop	ds
 17577 0000170E CF                      		iret
 17578                                  ; ---------------------------------------------------------------------------
 17579                                  
 17580                                  try_4:
 17581                                  		;mov	di, ds:FreeHMAPtr
 17582 0000170F 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17583 00001713 83C30F                  		add	bx, 15
 17584                                  		;and	bx, 0FFF0h
 17585                                  		; 10/12/2022
 17586 00001716 80E3F0                  		and	bl, 0F0h
 17587                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 17588 00001719 011E[D707]              		add	[FreeHMAPtr], bx
 17589 0000171D 7506                    		jnz	short InsuffHMA
 17590 0000171F C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 17591                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 17592                                  					; no more HMA if we have wrapped
 17593                                  InsuffHMA:
 17594 00001725 1F                      		pop	ds
 17595                                  		; 10/12/2022
 17596                                  try_3:
 17597                                  		;jmp	short ii2f_iret
 17598                                  		; 02/09/2023
 17599 00001726 CF                      		iret
 17600                                  ; ---------------------------------------------------------------------------
 17601                                  
 17602                                  		; 10/12/2022
 17603                                  ;try_3:
 17604                                  		;jmp	ii2f_iret
 17605                                  
 17606                                  ; =============== S U B	R O U T	I N E =======================================
 17607                                  
 17608                                  ; 16/10/2022
 17609                                  
 17610                                  ;--------------------------------------------------------------------------
 17611                                  ;
 17612                                  ; procedure : HMAPtr
 17613                                  ;
 17614                                  ;		Gets the offset of the free HMA area ( with respect to
 17615                                  ;							seg ffff )
 17616                                  ;		If DOS has not moved high, tries to move DOS high.
 17617                                  ;		In the course of doing this, it will allocate all the HMA
 17618                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 17619                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 17620                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 17621                                  ;
 17622                                  ;	RETURNS : offset of free HMA in DI
 17623                                  ;		  BIOS_DATA, seg in DS
 17624                                  ;
 17625                                  ;--------------------------------------------------------------------------
 17626                                  
 17627                                  		; 17/10/2022
 17628                                  HMAPtr:
 17629 00001727 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17630                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17631 0000172C 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17632                                  		;mov	di, ds:FreeHMAPtr
 17633 00001730 83FFFF                  		cmp	di, 0FFFFh
 17634 00001733 750F                    		jnz	short HMAPtr_retn
 17635 00001735 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 17636                                  		;cmp	ds:SysinitPresent, 0
 17637 0000173A 7408                    		jz	short HMAPtr_retn
 17638 0000173C FF1E[D907]              		call	far [MoveDOSIntoHMA]
 17639                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 17640 00001740 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17641                                  		;mov	di, ds:FreeHMAPtr
 17642                                  HMAPtr_retn:
 17643 00001744 C3                      		retn
 17644                                  
 17645                                  ; =============== S U B	R O U T	I N E =======================================
 17646                                  
 17647                                  ; 16/10/2022
 17648                                  
 17649                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 17650                                  ; but go ahead and update direction flag, si, & di
 17651                                  
 17652                                  move_sector:
 17653                                  
 17654                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 17655                                  ; any segment to be a fault. Theoretically, this could be handled
 17656                                  ; by the fault handler and the behavior of an 8086 could be emulated
 17657                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 17658                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 17659                                  ; also handles the fault incorrectly in their ROM BIOS for real
 17660                                  ; mode. Their fault handler was only designed to deal with one
 17661                                  ; special case which occurred in a magazine benchmark, but didn't
 17662                                  ; handle the general case worth beans.
 17663                                  ;
 17664                                  ; Simply changing this code to do a byte loop would work okay but
 17665                                  ; would involve a general case performance hit. Therefore, we'll
 17666                                  ; check for either source or destination offsets being within one
 17667                                  ; sector of the end of their segments and only in that case fall
 17668                                  ; back to a byte move.
 17669                                  
 17670 00001745 FC                      		cld
 17671 00001746 51                      		push	cx
 17672 00001747 B90001                  		mov	cx, 256
 17673 0000174A 81FE00FE                		cmp	si, 0FE00h
 17674 0000174E 770A                    		ja	short movsec_bytes
 17675 00001750 81FF00FE                		cmp	di, 0FE00h
 17676 00001754 7704                    		ja	short movsec_bytes
 17677 00001756 F3A5                    		rep movsw
 17678 00001758 59                      		pop	cx
 17679 00001759 C3                      		retn
 17680                                  ; ---------------------------------------------------------------------------
 17681                                  
 17682                                  movsec_bytes:
 17683 0000175A D1E1                    		shl	cx, 1
 17684 0000175C F3A4                    		rep movsb
 17685 0000175E 59                      		pop	cx
 17686 0000175F C3                      		retn
 17687                                  
 17688                                  ; =============== S U B	R O U T	I N E =======================================
 17689                                  
 17690                                  ; 16/10/2022
 17691                                  
 17692                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 17693                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 17694                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 17695                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 17696                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 17697                                  ; but we break down a request when we get an ecc or dma error into several
 17698                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 17699                                  ; number of sectors on a track on the medium, and the request would fail.
 17700                                  ;
 17701                                  ; input conditions:
 17702                                  ;	all registers set up for an int 13 request.
 17703                                  ;
 17704                                  ; output:
 17705                                  ;	dh - contains starting head number for request
 17706                                  ;	cx - contains starting sector and cylinder numbers
 17707                                  ;	(the above may or may not have been changed, and are 0-based)
 17708                                  ;	all other registers preserved.
 17709                                  
 17710                                  		; 26/12/2023 - Retro DOS 5.0
 17711                                  check_wrap:	
 17712 00001760 50                      		push	ax
 17713 00001761 53                      		push	bx
 17714 00001762 06                      		push	es
 17715 00001763 57                      		push	di
 17716 00001764 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 17717 00001767 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 17718                                  		; 26/12/2023
 17719 00001769 26F6453F01              		test	byte [es:di+3Fh], 1
 17720                                  		; 12/12/2022
 17721                                  		;test	byte [es:di+23h], 1
 17722                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 17723 0000176E 7457                    		jz	short no_wrap	; no wrapping for removable media
 17724 00001770 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 17725 00001774 89C8                    		mov	ax, cx
 17726 00001776 83E03F                  		and	ax, 3Fh		; extract sector number
 17727 00001779 39D8                    		cmp	ax, bx		; are we going to wrap?
 17728 0000177B 764A                    		jbe	short no_wrap
 17729 0000177D F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 17730                                  
 17731                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 17732                                  ; last sector on that track.
 17733                                  
 17734 0000177F 08E4                    		or	ah, ah
 17735 00001781 7503                    		jnz	short not_on_bound
 17736                                  		; 18/12/2022
 17737 00001783 48                      		dec	ax ; *
 17738 00001784 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 17739                                  					; if on	boundary
 17740                                  		;dec	al ; *		; also decrement # of head wraps
 17741                                  not_on_bound:
 17742 00001786 80E1C0                  		and	cl, 0C0h	; zero out sector #
 17743 00001789 08E1                    		or	cl, ah		; or in	new sector #
 17744 0000178B 30E4                    		xor	ah, ah		; ax = # of head wraps
 17745 0000178D 40                      		inc	ax
 17746 0000178E 00F0                    		add	al, dh		; add in starting head #
 17747 00001790 80D400                  		adc	ah, 0		; catch	any carry
 17748                                  		; 02/09/2023
 17749 00001793 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17750 00001797 39D8                    		cmp	ax, bx
 17751                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 17752                                  					; are we going to wrap around a	head?
 17753 00001799 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 17754 0000179B 52                      		push	dx		; preserve drive number and head number
 17755 0000179C 31D2                    		xor	dx, dx
 17756                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17757 0000179E F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 17758                                  
 17759                                  ; careful here! if new head # is 0, then we are on the last head.
 17760                                  
 17761 000017A0 09D2                    		or	dx, dx
 17762 000017A2 7507                    		jnz	short no_head_bound
 17763 000017A4 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 17764                                  
 17765                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 17766                                  
 17767 000017A6 09C0                    		or	ax, ax
 17768 000017A8 7401                    		jz	short no_head_bound
 17769 000017AA 48                      		dec	ax		; reduce number	of cylinder wraps
 17770                                  no_head_bound:				
 17771 000017AB 88D7                    		mov	bh, dl		; bh has new head number
 17772 000017AD 5A                      		pop	dx		; restore drive number and head number
 17773 000017AE FECF                    		dec	bh		; get it 0-based
 17774 000017B0 88FE                    		mov	dh, bh		; set up new head number in dh
 17775 000017B2 88CF                    		mov	bh, cl
 17776 000017B4 80E73F                  		and	bh, 3Fh		; preserve sector number
 17777 000017B7 B306                    		mov	bl, 6
 17778 000017B9 86D9                    		xchg	cl, bl
 17779 000017BB D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 17780 000017BD 00C5                    		add	ch, al		; add in cylinder wrap
 17781 000017BF 10E3                    		adc	bl, ah		; add in high byte
 17782 000017C1 D2E3                    		shl	bl, cl		; move up to ms	end
 17783 000017C3 86CB                    		xchg	bl, cl		; restore cylinder bits	into cl
 17784 000017C5 08F9                    		or	cl, bh		; or in	sector number
 17785                                  no_wrap:				
 17786 000017C7 F8                      		clc
 17787 000017C8 5F                      		pop	di
 17788 000017C9 07                      		pop	es
 17789 000017CA 5B                      		pop	bx
 17790 000017CB 58                      		pop	ax
 17791 000017CC C3                      		retn
 17792                                  ; ---------------------------------------------------------------------------
 17793                                  
 17794                                  no_wrap_head:				
 17795 000017CD 88C6                    		mov	dh, al		; do not lose new head number
 17796 000017CF FECE                    		dec	dh		; get it 0-based
 17797 000017D1 EBF4                    		jmp	short no_wrap
 17798                                  
 17799                                  ; =============== S U B	R O U T	I N E =======================================
 17800                                  
 17801                                  ; 16/10/2022
 17802                                  
 17803                                  ; this is a special version of the bds lookup code which is
 17804                                  ; based on physical drives rather than the usual logical drives
 17805                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 17806                                  ; otherwise carry is clear
 17807                                  ;
 17808                                  ; guaranteed to trash no registers except es:di
 17809                                  
 17810                                  		; 19/10/2022
 17811                                  find_bds:	
 17812 000017D3 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 17813                                  fbds_1:					
 17814 000017D7 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 17815 000017DB 7409                    		jz	short fdbs_2
 17816 000017DD 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17817                                  					; go to next bds
 17818 000017E0 83FFFF                  		cmp	di, 0FFFFh
 17819 000017E3 75F2                    		jnz	short fbds_1
 17820 000017E5 F9                      		stc
 17821                                  fdbs_2:					
 17822 000017E6 C3                      		retn
 17823                                  
 17824                                  ; =============== S U B	R O U T	I N E =======================================
 17825                                  
 17826                                  ; 16/10/2022
 17827                                  		; 17/10/2022
 17828                                  doint:
 17829                                  		; 10/12/2022
 17830 000017E7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 17831                                  					; get physical drive number
 17832                                  		; 19/10/2022 - Temporary !
 17833                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 17834                                  		
 17835 000017EA 30E4                    		xor	ah, ah
 17836 000017EC 08C0                    		or	al, al
 17837 000017EE 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 17838                                  		; 10/12/2022
 17839 000017F0 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 17840                                  					; get request code
 17841                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 17842 000017F3 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17843                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 17844 000017F6 9D                      		popf
 17845                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 17846                                  		; 17/10/2022
 17847 000017F7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17848                                  		;;call	call_orig13	; call far 70h:797h
 17849                                  					; call far KERNEL_SEGMENT:call_orig13
 17850 000017FC 9C                      		pushf
 17851                                  		; 10/12/2022
 17852 000017FD 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17853                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 17854                                  dointdone:				
 17855 00001800 C3                      		retn
 17856                                  
 17857                                  ;----------------------------------------------------------------------------
 17858                                  
 17859                                  ; 16/10/2022
 17860                                  
 17861                                  ; this is the true int 13 handler. we parse the request to see if there is
 17862                                  ; a dma violation. if so, depending on the function, we:
 17863                                  ;   read/write break the request into three pieces and move the middle one
 17864                                  ;	       into our internal buffer.
 17865                                  ;
 17866                                  ;   format     copy the format table into the buffer
 17867                                  ;   verify     point the transfer address into the buffer
 17868                                  ;
 17869                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 17870                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 17871                                  ; the offending sector into the buffer below and do the i/o from there.
 17872                                  
 17873                                  ;struc INT13FRAME
 17874                                  ;.oldbp: resw
 17875                                  ;.oldax: resw 
 17876                                  ;.oldbx: resw
 17877                                  ;.oldcx: resw
 17878                                  ;.olddx: resw
 17879                                  ;.oldds: resw	; now we save caller's ds, too
 17880                                  ;.olddd: resd
 17881                                  ;.oldf:	resw
 17882                                  ;end struc
 17883                                  
 17884                                  ;----------------------------------------------------------------------------
 17885                                  
 17886                                  ;   entry conditions:
 17887                                  ;	ah = function
 17888                                  ;	al = number of sectors
 17889                                  ;	es:bx = dma address
 17890                                  ;	cx = packed track and sector
 17891                                  ;	dx = head and drive
 17892                                  ;   output conditions:
 17893                                  ;	no dma violation.
 17894                                  
 17895                                  ;	use extreme caution when working with this code. In general,
 17896                                  ;	  all registers are hot at all times.
 17897                                  ;
 17898                                  ;	question:  does this code handle cases where dma errors
 17899                                  ;	  occur during ecc retries, and where ecc errors occur during
 17900                                  ;	  dma breakdowns???? Hmmmmm.
 17901                                  
 17902                                  ;----------------------------------------------------------------------------
 17903                                  
 17904                                  ; ---------------------------------------------------------------------------
 17905                                  
 17906                                  		; 26/12/2023 - Retro DOS v5.0
 17907                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 17908                                  dtype_array:
 17909 00001801 90004000                		dd 400090h		; 40h:90h is drive type array addr
 17910                                  
 17911                                  ; 17/10/2022
 17912                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 17913                                  ; 09/12/2022
 17914                                  DTYPEARRAY equ dtype_array
 17915                                  
 17916                                  ; ---------------------------------------------------------------------------
 17917                                  
 17918                                  ; stick some special stuff out of mainline
 17919                                  
 17920                                  ; we know we're doing a format command. if we have changeline
 17921                                  ; support, then flag some special changed stuff and set changed
 17922                                  ; by format bit for all logical drives using this physical drive
 17923                                  
 17924                                  format_special_stuff:
 17925 00001805 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 17926 0000180A 7459                    		jz	short format_special_stuff_done ; brif not
 17927 0000180C 53                      		push	bx
 17928 0000180D BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 17929 00001810 E85104                  		call	set_changed_dl	; indicate that media changed by format
 17930 00001813 5B                      		pop	bx
 17931 00001814 EB4F                    		jmp	short format_special_stuff_done
 17932                                  ; ---------------------------------------------------------------------------
 17933                                  
 17934                                  ; 16/10/2022
 17935                                  
 17936                                  ; we know we've got ec35's on the system. Now see if we're doing
 17937                                  ; a floppy. If so, create a mask and see if this particular
 17938                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 17939                                  
 17940                                  		; 19/10/2022
 17941                                  ec35_special_stuff:
 17942 00001816 84D2                    		test	dl, dl		; floppy or hard disk?
 17943 00001818 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 17944 0000181A 50                      		push	ax		; see if this PARTICULAR drive is ec35
 17945 0000181B 51                      		push	cx
 17946 0000181C 88D1                    		mov	cl, dl		; turn drive number into bit map
 17947 0000181E B001                    		mov	al, 1		; assume drive 0
 17948 00001820 D2E0                    		shl	al, cl		; shift	over correct number of times
 17949 00001822 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 17950 00001826 59                      		pop	cx
 17951 00001827 58                      		pop	ax
 17952 00001828 7442                    		jz	short ec35_special_stuff_done
 17953                                  					; done if this floppy is not an	ec35
 17954 0000182A 53                      		push	bx		; free up a far	pointer	(es:bx)
 17955 0000182B 06                      		push	es
 17956                                  		; 17/10/2022
 17957 0000182C 2EC41E[0118]            		les	bx, [cs:DTYPEARRAY]
 17958                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 17959                                  					; 0070h:3A65h =	2C7h:14F5h
 17960 00001831 00D3                    		add	bl, dl
 17961 00001833 80D700                  		adc	bh, 0		; find entry for this drive
 17962 00001836 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 17963                                  					; (360k	disk in	360k drive,
 17964                                  					; no double-stepping, 250 kbs transfer rate)
 17965 0000183A 07                      		pop	es
 17966 0000183B 5B                      		pop	bx
 17967 0000183C EB2E                    		jmp	short ec35_special_stuff_done
 17968                                  ; ---------------------------------------------------------------------------
 17969                                  
 17970                                  ; 16/10/2022
 17971                                  
 17972                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 17973                                  ; this function does not reset the common buses after the execution.
 17974                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 17975                                  ; will issue ah=1 (read status) call to reset the buses.
 17976                                  
 17977                                  ps2_special_stuff:
 17978 0000183E 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 17979                                  					; read driver parm ?
 17980 00001843 7407                    		jz	short ps2_30_problem
 17981 00001845 803E[1E00]15            		cmp	byte [prevoper], 15h
 17982                                  					; apparently function 15h fails, too
 17983 0000184A 752D                    		jnz	short ps2_special_stuff_done
 17984                                  ps2_30_problem:
 17985 0000184C 50                      		push	ax
 17986 0000184D B401                    		mov	ah, 1
 17987                                  		; 26/12/2023
 17988                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 17989                                  		;		 ; call BIOSDATA:call_orig13	
 17990                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 17991                                  		; 17/10/2022
 17992 0000184F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17993                                  		;call	call_orig13	; call far 70:797h
 17994                                  					; call far KERNEL_SEGMENT:call_orig13
 17995 00001854 58                      		pop	ax
 17996 00001855 EB22                    		jmp	short ps2_special_stuff_done
 17997                                  ; ---------------------------------------------------------------------------
 17998                                  
 17999                                  ; 17/10/2022
 18000                                  ; 16/10/2022
 18001                                  
 18002                                  ; here is the actual int13 handler
 18003                                  
 18004                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 18005                                  
 18006                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 18007                                  ; vectoring up here from Bios_Data
 18008                                  
 18009                                  		; 19/10/2022
 18010 00001857 1E                      		push	ds		; save caller's ds register first thing
 18011                                  		;;mov	ds, word [cs:0030h]
 18012                                  					; and set up our own ds -> Bios_Data
 18013 00001858 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18014                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18015                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18016                                  
 18017                                  ; let the operation proceed. if there is a dma violation, then we do things
 18018                                  
 18019 0000185D A3[1E00]                		mov	[prevoper], ax	; save request
 18020 00001860 80FC05                  		cmp	ah, 5		; romformat
 18021 00001863 74A0                    		jz	short format_special_stuff
 18022                                  					; go do special stuff for format
 18023                                  format_special_stuff_done:
 18024 00001865 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 18025 0000186A 75AA                    		jnz	short ec35_special_stuff
 18026                                  					; go handle it out of line if so
 18027                                  ec35_special_stuff_done:
 18028                                  		; 26/12/2023
 18029                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 18030                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 18031 0000186C 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18032                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18033                                  		
 18034 00001871 9C                      		pushf			; save result flags
 18035                                  		
 18036 00001872 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 18037                                  					; mdl_ps2_30
 18038 00001877 74C5                    		jz	short ps2_special_stuff
 18039                                  					; exit mainline to address special
 18040                                  ps2_special_stuff_done:			; ps2/30 problem if so
 18041 00001879 9D                      		popf
 18042 0000187A 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 18043                                  ret_from_i13:
 18044 0000187C 1F                      		pop	ds
 18045 0000187D CA0200                  		retf	2		; restore ds &	iret w/flags
 18046                                  ; ---------------------------------------------------------------------------
 18047                                  
 18048                                  ; most of our code exits through here. If carry isn't set, then
 18049                                  ; just do a simple exit. Else doublecheck that we aren't getting
 18050                                  ; a changeline error.
 18051                                  
 18052                                  i13ret_ck_chglinerr:			
 18053 00001880 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 18054                                  i13_ret_error:				
 18055 00001882 80FC06                  		cmp	ah, 6		; did i	see a change event?
 18056 00001885 7513                    		jnz	short int13b	; skip if wrong	error
 18057 00001887 08D2                    		or	dl, dl		; is this for the hard disk?
 18058 00001889 780F                    		js	short int13b	; yes, ignore
 18059 0000188B 803E[7700]00            		cmp	byte [fhave96], 0
 18060 00001890 7408                    		jz	short int13b	; just in case ROM returned this
 18061                                  					; error	even though it told us it
 18062                                  					; never	would
 18063 00001892 53                      		push	bx
 18064 00001893 BB4000                  		mov	bx, 40h		; fchanged
 18065 00001896 E8CB03                  		call	set_changed_dl
 18066 00001899 5B                      		pop	bx
 18067                                  int13b:
 18068 0000189A F9                      		stc			; now return the error
 18069 0000189B EBDF                    		jmp	short ret_from_i13
 18070                                  ; ---------------------------------------------------------------------------
 18071                                  
 18072                                  ; some kind of error occurred. see if it is dma violation
 18073                                  
 18074                                  goterr13:
 18075 0000189D 80FC09                  		cmp	ah, 9		; dma error?
 18076 000018A0 747C                    		jz	short gotdmaerr
 18077                                  goterr13_xxxx:
 18078 000018A2 80FC11                  		cmp	ah, 11h		; ecc error?
 18079 000018A5 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 18080 000018A7 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 18081 000018AC 74D4                    		jz	short i13_ret_error
 18082                                  
 18083 000018AE 803E[1F00]02            		cmp	byte [prevoper+1], 2
 18084                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 18085                                  					; (2 = romread)
 18086                                  					; ECC correction only applies to reads
 18087 000018B3 75CD                    		jnz	short i13_ret_error
 18088                                  
 18089 000018B5 30E4                    		xor	ah, ah
 18090                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 18091                                  		; 17/10/2022
 18092 000018B7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18093                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18094                                  					; call far 70:797h
 18095 000018BC A1[1E00]                		mov	ax, [prevoper]
 18096 000018BF 30E4                    		xor	ah, ah		; return code =	no error
 18097 000018C1 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 18098 000018C3 74B7                    		jz	short ret_from_i13 ; return with carry clear
 18099 000018C5 53                      		push	bx
 18100 000018C6 51                      		push	cx
 18101 000018C7 52                      		push	dx
 18102 000018C8 A2[2000]                		mov	[number_of_sec], al
 18103                                  loop_ecc:
 18104 000018CB B80102                  		mov	ax, 201h	; read one sector
 18105                                  
 18106                                  ; we do reads one sector at a time. this ensures that we will eventually
 18107                                  ; finish the request since ecc errors on one sector do read in that sector.
 18108                                  ;
 18109                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 18110                                  ; that attempt to read more sectors than are available on a particular
 18111                                  ; track.
 18112                                  ;
 18113                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 18114                                  ; this request.
 18115                                  ;
 18116                                  ; at this point, all registers are set up for the call to orig13, except
 18117                                  ; that there may be a starting sector number that is bigger than the number
 18118                                  ; of sectors on a track.
 18119                                  ;
 18120 000018CE E88FFE                  		call	check_wrap	; get correct parameters for int 13
 18121                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 18122                                  		; 17/10/2022
 18123 000018D1 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18124                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18125 000018D6 730C                    		jnb	short ok11_op
 18126 000018D8 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 18127 000018DB 741B                    		jz	short handle_dma_during_ecc
 18128 000018DD 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 18129 000018E0 7510                    		jnz	short ok11_exit_err
 18130                                  		; 10/12/2022
 18131                                  		; xor ax ax -> ah = 0
 18132                                  		;mov	ah, 0		; ecc error. reset the system again.
 18133 000018E2 31C0                    		xor	ax, ax		; clear	the error code so that if this
 18134                                  					; was the last sector, no error	code
 18135                                  					; will be returned for the corrected
 18136                                  					; read.	(clear carry too.)
 18137                                  ok11_op:
 18138 000018E4 FE0E[2000]              		dec	byte [number_of_sec]
 18139 000018E8 7409                    		jz	short ok11_exit	; all done?
 18140 000018EA FEC1                    		inc	cl		; advance sector number
 18141                                  					; add 200h to address
 18142 000018EC FEC7                    		inc	bh
 18143 000018EE FEC7                    		inc	bh
 18144 000018F0 EBD9                    		jmp	short loop_ecc
 18145                                  ; ---------------------------------------------------------------------------
 18146                                  
 18147                                  ; locate error returns centrally
 18148                                  
 18149                                  ok11_exit_err:
 18150 000018F2 F9                      		stc			; set carry bit again.
 18151                                  ok11_exit:
 18152 000018F3 5A                      		pop	dx
 18153 000018F4 59                      		pop	cx
 18154 000018F5 5B                      		pop	bx
 18155 000018F6 EB88                    		jmp	short i13ret_ck_chglinerr
 18156                                  ; ---------------------------------------------------------------------------
 18157                                  
 18158                                  ; do the single sector read again, this time into our temporary
 18159                                  ; buffer, which is guaranteed not to have a DMA error, then
 18160                                  ; move the data to its proper location and proceed
 18161                                  
 18162                                  handle_dma_during_ecc:
 18163 000018F8 06                      		push	es
 18164 000018F9 53                      		push	bx
 18165 000018FA BB[5201]                		mov	bx, disksector
 18166 000018FD 1E                      		push	ds
 18167 000018FE 07                      		pop	es		; point es:bx to buffer
 18168 000018FF B80102                  		mov	ax, 201h	; read one sector
 18169                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 18170                                  		; 17/10/2022
 18171 00001902 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18172                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18173 00001907 5B                      		pop	bx
 18174 00001908 07                      		pop	es
 18175 00001909 7305                    		jnb	short handle_dma_during_ecc_noerr
 18176 0000190B 80FC11                  		cmp	ah, 11h
 18177 0000190E 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 18178                                  
 18179                                  ; now we're kosher. Copy the data to where it belongs and resume
 18180                                  ; the ECC looping code.
 18181                                  
 18182                                  handle_dma_during_ecc_noerr:
 18183 00001910 56                      		push	si
 18184 00001911 57                      		push	di
 18185 00001912 89DF                    		mov	di, bx
 18186 00001914 BE[5201]                		mov	si, disksector
 18187 00001917 E82BFE                  		call	move_sector
 18188 0000191A 5F                      		pop	di
 18189 0000191B 5E                      		pop	si
 18190 0000191C EBC6                    		jmp	short ok11_op
 18191                                  ; ---------------------------------------------------------------------------
 18192                                  
 18193                                  ; we truly have a dma violation. restore register ax and retry the
 18194                                  ; operation as best we can.
 18195                                  
 18196                                  gotdmaerr:
 18197 0000191E A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 18198 00001921 FB                      		sti
 18199 00001922 80FC02                  		cmp	ah, 2		; romread
 18200 00001925 723B                    		jb	short i13_done_dmaerr
 18201                                  					; just pass dma error thru for
 18202                                  					; functions we don't handle
 18203 00001927 80FC04                  		cmp	ah, 4		; romverify
 18204 0000192A 743C                    		jz	short intverify
 18205 0000192C 80FC05                  		cmp	ah, 5		; romformat
 18206 0000192F 7448                    		jz	short intformat
 18207 00001931 772F                    		ja	short i13_done_dmaerr
 18208                                  
 18209                                  ; we are doing a read/write call. check for dma problems
 18210                                  
 18211                                  ;	******** set up stack frame here!!! ********
 18212                                  
 18213 00001933 52                      		push	dx
 18214 00001934 51                      		push	cx
 18215 00001935 53                      		push	bx
 18216 00001936 50                      		push	ax
 18217 00001937 55                      		push	bp
 18218 00001938 89E5                    		mov	bp, sp
 18219 0000193A 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 18220                                  		; 26/12/2023
 18221                                  		;add	dx, dx
 18222                                  		;add	dx, dx
 18223                                  		;add	dx, dx
 18224                                  		;add	dx, dx		; dx = dx*16
 18225 0000193C D1E2                    		shl	dx, 1
 18226 0000193E D1E2                    		shl	dx, 1
 18227 00001940 D1E2                    		shl	dx, 1
 18228 00001942 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 18229 00001944 01DA                    		add	dx, bx		; combine with offset
 18230 00001946 81C2FF01                		add	dx, 511		; simulate a transfer
 18231                                  
 18232                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 18233                                  ; we skip the first transfer and perform the remaining buffering and transfer
 18234                                  
 18235 0000194A 7303                    		jnb	short no_skip_first
 18236 0000194C E98300                  		jmp	bufferx		; restore dh=head & do buffer
 18237                                  ; ---------------------------------------------------------------------------
 18238                                  
 18239                                  no_skip_first:
 18240 0000194F D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 18241 00001951 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 18242 00001953 28F4                    		sub	ah, dh
 18243                                  
 18244                                  ; ah is now the number of sectors that we can successfully write in this
 18245                                  ; segment. if this number is above or equal to the requested number, then we
 18246                                  ; continue the operation as normal. otherwise, we break it into pieces.
 18247                                  ;
 18248                                  ; wait a sec. this is goofy. the whole reason we got here in the
 18249                                  ; first place is because we got a dma error. so it's impossible
 18250                                  ; for the whole block to fit, unless the dma error was returned
 18251                                  ; in error.
 18252                                  
 18253 00001955 38C4                    		cmp	ah, al		; can we fit it	in?
 18254 00001957 7236                    		jb	short doblock	; no, perform blocking.
 18255                                  
 18256                                  ; yes, the request fits. let it happen.
 18257                                  
 18258 00001959 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18259                                  					; set up head number
 18260 0000195C E888FE                  		call	doint
 18261 0000195F E9D900                  		jmp	bad13		; and return from this place
 18262                                  ; ---------------------------------------------------------------------------
 18263                                  
 18264                                  i13_done_dmaerr:
 18265 00001962 B409                    		mov	ah, 9		; pass dma error thru to caller
 18266 00001964 F9                      		stc
 18267 00001965 E914FF                  		jmp	ret_from_i13	; return with error,
 18268                                  					; we know it's not a changeline error
 18269                                  ; ---------------------------------------------------------------------------
 18270                                  
 18271                                  ; verify the given sectors. place the buffer pointer into our space.
 18272                                  
 18273                                  intverify:
 18274 00001968 06                      		push	es		; save caller's dma address
 18275 00001969 53                      		push	bx
 18276 0000196A 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 18277 0000196B 07                      		pop	es
 18278                                  dosimple:
 18279 0000196C BB[5201]                		mov	bx, disksector
 18280                                  					; do the i/o from Bios_Data:disksector
 18281                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 18282                                  		; 17/10/2022
 18283 0000196F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18284                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18285 00001974 5B                      		pop	bx
 18286 00001975 07                      		pop	es
 18287 00001976 E907FF                  		jmp	i13ret_ck_chglinerr
 18288                                  ; ---------------------------------------------------------------------------
 18289                                  
 18290                                  ; format operation. copy the parameter table into Bios_Data:disksector
 18291                                  
 18292                                  intformat:
 18293 00001979 06                      		push	es
 18294 0000197A 53                      		push	bx
 18295 0000197B 56                      		push	si
 18296 0000197C 57                      		push	di
 18297 0000197D 1E                      		push	ds
 18298                                  
 18299                                  ; point ds to the caller's dma buffer, es to Bios_Data
 18300                                  ; in other words, swap (ds, es)
 18301                                  
 18302 0000197E 06                      		push	es
 18303 0000197F 1E                      		push	ds
 18304 00001980 07                      		pop	es
 18305 00001981 1F                      		pop	ds
 18306 00001982 89DE                    		mov	si, bx
 18307 00001984 BF[5201]                		mov	di, disksector
 18308 00001987 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 18309 0000198A 1F                      		pop	ds
 18310 0000198B 5F                      		pop	di
 18311 0000198C 5E                      		pop	si		; do the i/o from
 18312 0000198D EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 18313                                  ; ---------------------------------------------------------------------------
 18314                                  
 18315                                  ; we can't fit the request into the entire block. perform the operation on
 18316                                  ; the first block.
 18317                                  ;
 18318                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 18319                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 18320                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 18321                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 18322                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 18323                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 18324                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 18325                                  ; doblock will handle the first block of requested sectors within the
 18326                                  ; boundary of this safe value.
 18327                                  
 18328                                  		; 26/12/2023 - Retro DOS v5.0
 18329                                  doblock:
 18330                                  
 18331                                  ; try to get the # of sectors/track from bds via rom drive number.
 18332                                  ; for any mini disks installed, here we have to pray that they have the
 18333                                  ; same # of sector/track as the main dos partition disk drive.
 18334                                  				
 18335 0000198F 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 18336                                  					; get head #, drive #
 18337 00001992 51                      		push	cx
 18338 00001993 06                      		push	es
 18339 00001994 57                      		push	di		; ah - # of sectors before dma boundary
 18340                                  					; al - requested # of sectors for i/o.
 18341 00001995 E83BFE                  		call	find_bds
 18342 00001998 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18343                                  		; 26/12/2023
 18344 0000199C 26F6453F01              		test	byte [es:di+3Fh], 1
 18345                                  		; 12/12/2022
 18346                                  		;test	byte [es:di+23h], 1
 18347                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18348 000019A1 5F                      		pop	di
 18349 000019A2 07                      		pop	es
 18350 000019A3 88E0                    		mov	al, ah		; set al=ah for	floppies
 18351 000019A5 7404                    		jz	short doblockflop ; they are track by track operation
 18352 000019A7 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 18353 000019A9 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 18354                                  doblockflop:
 18355 000019AB 59                      		pop	cx
 18356                                  doblockcontinue:
 18357 000019AC 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 18358 000019AE 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 18359 000019B0 50                      		push	ax
 18360 000019B1 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 18361 000019B3 EB03                    		jmp	short doblockdoint
 18362                                  ; ---------------------------------------------------------------------------
 18363                                  
 18364                                  doblocklast:
 18365 000019B5 88C4                    		mov	ah, al
 18366 000019B7 50                      		push	ax
 18367                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 18368 000019B8 E82CFE                  		call	doint
 18369 000019BB 727E                    		jb	short bad13	; something happened, bye!
 18370 000019BD 58                      		pop	ax
 18371 000019BE 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 18372                                  					; decrement by the successful operation
 18373 000019C1 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 18374 000019C3 00E7                    		add	bh, ah		; advance dma addres
 18375 000019C5 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 18376 000019C7 38C4                    		cmp	ah, al		; check	the previous value
 18377 000019C9 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 18378                                  					; then we are done already.
 18379 000019CB 28E0                    		sub	al, ah		; otherwise,
 18380                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 18381 000019CD E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 18382 000019D0 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 18383                                  ; ---------------------------------------------------------------------------
 18384                                  
 18385                                  bufferx:
 18386 000019D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18387                                  					; set up head number
 18388                                  buffer:
 18389 000019D5 53                      		push	bx
 18390 000019D6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 18391 000019D9 80FC03                  		cmp	ah, 3		; romwrite
 18392 000019DC 7525                    		jnz	short doread	;
 18393                                  					
 18394                                  ; copy the offending sector into local buffer
 18395                                  
 18396 000019DE 06                      		push	es
 18397 000019DF 1E                      		push	ds
 18398 000019E0 56                      		push	si
 18399 000019E1 57                      		push	di
 18400 000019E2 1E                      		push	ds		; exchange segment registers
 18401 000019E3 06                      		push	es
 18402 000019E4 1F                      		pop	ds
 18403 000019E5 07                      		pop	es
 18404 000019E6 BF[5201]                		mov	di, disksector	; where to move
 18405 000019E9 57                      		push	di		; save it
 18406 000019EA 89DE                    		mov	si, bx		; source
 18407 000019EC E856FD                  		call	move_sector	; move sector into local buffer
 18408 000019EF 5B                      		pop	bx		; new transfer address
 18409                                  					; (es:bx = Bios_Data:diskbuffer)
 18410 000019F0 5F                      		pop	di		; restore caller's di & si
 18411 000019F1 5E                      		pop	si
 18412 000019F2 1F                      		pop	ds		; restore Bios_Data
 18413                                  
 18414                                  ; see if we are wrapping around a track or head
 18415                                  
 18416 000019F3 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 18417                                  					; get drive number
 18418 000019F5 8A5608                  		mov	dl, [bp+8]
 18419 000019F8 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 18420                                  					;
 18421                                  					; ah is	function
 18422                                  					; al is	1 for single sector transfer
 18423                                  					; es:bx	is local transfer addres
 18424                                  					; cx is	track/sector number
 18425                                  					; dx is	head/drive number
 18426                                  					; si,di	unchanged
 18427 000019FB E8E9FD                  		call	doint
 18428 000019FE 07                      		pop	es		; restore caller's dma segment
 18429 000019FF 723A                    		jb	short bad13	; go clean up
 18430 00001A01 EB22                    		jmp	short dotail
 18431                                  ; ---------------------------------------------------------------------------
 18432                                  
 18433                                  ; reading a sector. do int first, then move things around
 18434                                  
 18435                                  doread:
 18436 00001A03 06                      		push	es
 18437 00001A04 53                      		push	bx
 18438 00001A05 1E                      		push	ds		; es = Bios_Code
 18439 00001A06 07                      		pop	es
 18440 00001A07 BB[5201]                		mov	bx, disksector
 18441 00001A0A B001                    		mov	al, 1
 18442 00001A0C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18443                                  					; get drive number
 18444 00001A0F E84EFD                  		call	check_wrap	;
 18445                                  					; ah = function
 18446                                  					; al = 1 for single sector
 18447                                  					; es:bx	points to local	buffer
 18448                                  					; cx, dx are track/sector, head/drive
 18449 00001A12 E8D2FD                  		call	doint
 18450 00001A15 5B                      		pop	bx
 18451 00001A16 07                      		pop	es
 18452 00001A17 7222                    		jb	short bad13
 18453 00001A19 56                      		push	si
 18454 00001A1A 57                      		push	di
 18455 00001A1B 89DF                    		mov	di, bx
 18456 00001A1D BE[5201]                		mov	si, disksector
 18457 00001A20 E822FD                  		call	move_sector
 18458 00001A23 5F                      		pop	di
 18459 00001A24 5E                      		pop	si
 18460                                  
 18461                                  ; note the fact that we've done 1 more sector
 18462                                  
 18463                                  dotail:
 18464 00001A25 5B                      		pop	bx		; retrieve new dma area
 18465 00001A26 80C702                  		add	bh, 2		; advance over sector
 18466 00001A29 41                      		inc	cx
 18467 00001A2A 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 18468 00001A2D F8                      		clc
 18469 00001A2E FEC8                    		dec	al
 18470 00001A30 7409                    		jz	short bad13	; no more i/o
 18471                                  
 18472                                  ; see if we wrap around a track or head boundary with starting sector
 18473                                  ; we already have the correct head number to pass to check_wrap
 18474                                  
 18475 00001A32 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18476 00001A35 E828FD                  		call	check_wrap
 18477 00001A38 E8ACFD                  		call	doint
 18478                                  
 18479                                  ; we are done. ax has the final code; we throw away what we got before
 18480                                  
 18481                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 18482                                  ;	   or we've finished. If carry is set now, our only
 18483                                  ;	   hope for salvation is that it was a read operation
 18484                                  ;	   and the error code is ECC error. In that case, we'll
 18485                                  ;	   just pop the registers and go do the old ECC thing.
 18486                                  ;	   When the DMA error that got us here in the first
 18487                                  ;	   place occurs, it'll handle it.
 18488                                  
 18489                                  bad13:
 18490 00001A3B 89EC                    		mov	sp, bp
 18491 00001A3D 5D                      		pop	bp
 18492 00001A3E 5B                      		pop	bx
 18493 00001A3F 5B                      		pop	bx
 18494 00001A40 59                      		pop	cx
 18495 00001A41 5A                      		pop	dx
 18496 00001A42 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 18497 00001A44 E935FE                  		jmp	ret_from_i13	; non-error exit
 18498                                  ; ---------------------------------------------------------------------------
 18499                                  
 18500                                  xgoterr13_xxxx:	
 18501 00001A47 E958FE                  		jmp	goterr13_xxxx
 18502                                  
 18503                                  ; ---------------------------------------------------------------------------
 18504                                  		; 10/12/2022
 18505                                  		;db 	0
 18506                                  ; ---------------------------------------------------------------------------
 18507                                  
 18508                                  ;Bios_Code ends
 18509                                  
 18510                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18511                                  
 18512                                  ;-----------------------------------------------------------------------------
 18513                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 18514                                  ;-----------------------------------------------------------------------------
 18515                                  ; 17/03/2019 - Retro DOS v4.0
 18516                                  
 18517                                  		; 19/10/2022
 18518                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 18519 00001A4A 8A26[7500]              		mov	ah, [drvmax]
 18520 00001A4E BF[3C05]                		mov	di, dskdrvs
 18521 00001A51 1E                      		push	ds		; pass result in es:di
 18522 00001A52 07                      		pop	es
 18523 00001A53 E934EC                  		jmp	SetPtrSav
 18524                                  
 18525                                  ; =============== S U B	R O U T	I N E =======================================
 18526                                  
 18527                                  ;---------------------------------------------------------------------------
 18528                                  ; install_bds installs a bds at location es:di into the current linked list of
 18529                                  ; bds maintained by this device driver. it places the bds at the end of the
 18530                                  ; list. Trashes (at least) ax, bx, di, si
 18531                                  ;---------------------------------------------------------------------------
 18532                                  
 18533                                  		; 26/12/2023 - Retro DOS v5.0
 18534                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 18535                                  install_bds:
 18536 00001A56 1E                      		push	ds		; save Bios_Data segment
 18537 00001A57 BE[1901]                		mov	si, start_bds	; beginning of chain
 18538                                  
 18539                                  		; ds:si now points to link to first bds
 18540                                  		; assume bds list is non-empty
 18541                                  loop_next_bds:
 18542 00001A5A C534                    		lds	si, [si]	; [si+BDS.link]
 18543                                  					; fetch	next bds
 18544 00001A5C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 18545 00001A60 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 18546                                  					; drive	with new one?
 18547 00001A63 7518                    		jnz	short next_bds
 18548 00001A65 B310                    		mov	bl, 10h		; fi_am_mult
 18549                                  		; 26/12/2023
 18550 00001A67 26085D3F                		or	[es:di+3Fh], bl
 18551                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18552                                  					; set both of them to i_am_mult	if so
 18553 00001A6B 085C3F                  		or	[si+3Fh], bl
 18554                                  		;or	[si+23h], bl	; [si+BDS.flags]
 18555 00001A6E 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 18556                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 18557                                  					; we don't own it
 18558 00001A73 8A5C3F                  		mov	bl, [si+3Fh]
 18559                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 18560                                  					; determine if changeline available
 18561 00001A76 80E302                  		and	bl, 2		; fchangeline
 18562 00001A79 26085D3F                		or	[es:di+3Fh], bl
 18563                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18564                                  next_bds:
 18565                                  		; 02/09/2023 (PCDOS 7.1)
 18566 00001A7D B8FFFF                  		mov	ax, 0FFFFh	; -1
 18567 00001A80 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 18568                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 18569                                  					; are we at end	of list?
 18570 00001A82 75D6                    		jnz	short loop_next_bds
 18571 00001A84 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 18572                                  					; install bds
 18573 00001A87 893C                    		mov	[si], di
 18574 00001A89 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 18575                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 18576                                  					; set next pointer to null
 18577 00001A8C 1F                      		pop	ds
 18578                                  
 18579                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 18580                                  ; 16/10/2022 (MSDOS 6.0 Code)
 18581                                  
 18582                                  ; **** If the new drive has a higher EOT value, we must alter the
 18583                                  ;      'eot' variable appropriately.
 18584                                  
 18585                                  		; 26/12/2023
 18586 00001A8D 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 18587                                  		; 01/06/2019
 18588                                  		;mov	al,[es:di+52]
 18589                                  		; 22/07/2023
 18590                                  		;mov	al,[es:di+BDS.rsecpertrack]
 18591 00001A91 3A06[2C01]              		cmp	al,[eot]
 18592 00001A95 7603                    		jbe	short _eot_ok
 18593 00001A97 A2[2C01]                		mov	[eot],al
 18594                                  _eot_ok:
 18595 00001A9A C3                      		retn
 18596                                  
 18597                                  ; ---------------------------------------------------------------------------
 18598                                  
 18599                                  ; 17/10/2022
 18600                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 18601                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 18602                                  ; 09/12/2022
 18603                                  DRVLET equ drvlet
 18604                                  SNGMSG equ sngmsg
 18605                                  
 18606                                  ; 16/10/2022
 18607                                  
 18608                                  ;---------------------------------------------------------------------------
 18609                                  ;  ask to swap the disk in drive a:
 18610                                  ;	es:di -> bds
 18611                                  ;	ds -> Bios_Data
 18612                                  ;---------------------------------------------------------------------------
 18613                                  
 18614                                  		; 26/12/2023 - Retro DOS v5.0
 18615                                  
 18616                                  		; 19/10/2022
 18617 00001A9B F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 18618                                  		;test	ds:IsWin386, 1	; Is win386 present?
 18619 00001AA0 7405                    		jz	short no_win386	; no, skip SetFocus
 18620                                  		
 18621                                  		; set focus to the correct VM
 18622                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 18623                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 18624                                  		; 17/10/2022
 18625 00001AA2 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 18626                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 18627                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 18628                                  no_win386:
 18629 00001AA7 51                      		push	cx
 18630 00001AA8 52                      		push	dx
 18631 00001AA9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 18632                                  					; get the drive	letter
 18633                                  
 18634                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 18635                                  ;           then existing dsk is drive A & vice versa
 18636                                  
 18637 00001AAD 88D6                    		mov	dh, dl
 18638 00001AAF 80F601                  		xor	dh, 1
 18639 00001AB2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 18640 00001AB4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 18641                                  					; broad	cast code for swap disk
 18642                                  					; Broadcast it
 18643 00001AB7 CD2F                    		int	2Fh
 18644 00001AB9 41                      		inc	cx		; cx == -1 ?
 18645 00001ABA 741E                    		jz	short swpdsk9	; somebody has handled it
 18646                                  
 18647                                  ; using a different drive in a one drive system so request the user change disks
 18648                                  
 18649 00001ABC 80C241                  		add	dl, 'A'
 18650                                  		; 17/10/2022
 18651 00001ABF 2E8816[F91A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 18652                                  		; 16/10/2022
 18653                                  		;;mov	byte [cs:drvlet], dl
 18654                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 18655                                  					; 0070h:3D54h =	2C7h:17E4h
 18656 00001AC4 BE[DD1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 18657                                  		;mov	si, 17C8h	; sngmsg
 18658                                  					; 0070h:3D38h =	2C7h:17C8h
 18659 00001AC7 53                      		push	bx
 18660 00001AC8 2E                      		cs
 18661 00001AC9 AC                      		lodsb			; get the next character of the message
 18662                                  		;lods	byte ptr cs:[si]
 18663                                  wrmsg_loop:
 18664 00001ACA CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 18665                                  					; AL = character to display
 18666 00001ACC 2E                      		cs
 18667 00001ACD AC                      		lodsb
 18668                                  		;lods	byte ptr cs:[si] ; cs lodsb
 18669                                  					; get the next character of the	message
 18670 00001ACE 08C0                    		or	al, al
 18671 00001AD0 75F8                    		jnz	short wrmsg_loop
 18672 00001AD2 E833E7                  		call	con_flush	; flush out keyboard queue
 18673                                  					; call rom-bios
 18674 00001AD5 30E4                    		xor	ah, ah
 18675 00001AD7 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 18676                                  					; Return: AH = scan code, AL = character
 18677 00001AD9 5B                      		pop	bx
 18678                                  swpdsk9:
 18679 00001ADA 5A                      		pop	dx
 18680 00001ADB 59                      		pop	cx
 18681 00001ADC C3                      		retn
 18682                                  
 18683                                  ; ---------------------------------------------------------------------------
 18684                                  
 18685                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18686                                  
 18687                                  ;--------------------------------------------------------
 18688                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 18689                                  ;--------------------------------------------------------
 18690                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 18691                                  ;--------------------------------------------------------
 18692                                  ; 17/03/2019 - Retro DOS v4.0
 18693                                  ; 26/12/2023 - Retro DOS v5.0
 18694                                  
 18695                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 18696                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 18697 00001ADD 0D0A                    sngmsg:		db 0Dh,0Ah
 18698 00001ADF 496E73657274206469-     		db 'Insert diskette for drive '
 18698 00001AE8 736B6574746520666F-
 18698 00001AF1 7220647269766520   
 18699                                  
 18700                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 18701                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 18702 00001AF9 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 18702 00001B02 65737320616E79206B-
 18702 00001B0B 6579207768656E2072-
 18702 00001B14 656164790D0A       
 18703 00001B1A 0A00                    		db 0Ah,0
 18704                                  
 18705                                  ; =============== S U B	R O U T	I N E =======================================
 18706                                  
 18707                                  ;---------------------------------------------------------------------------
 18708                                  ; input : es:di points to current bds for drive.
 18709                                  ; return : zero set if no open files
 18710                                  ;	   zero reset if open files
 18711                                  ;---------------------------------------------------------------------------
 18712                                  
 18713                                  		; 26/12/2023 - Retro DOS v5.0
 18714                                  chkopcnt:	
 18715 00001B1C 26837D3C00              		cmp     word [es:di+3Ch], 0
 18716                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 18717 00001B21 C3                      		retn
 18718                                  
 18719                                  ; =============== S U B	R O U T	I N E =======================================
 18720                                  
 18721                                  ;---------------------------------------------------------------------------
 18722                                  ; at media check time, we need to really get down and check what the change is.
 18723                                  ; this is guaranteed to be expensive.
 18724                                  ;
 18725                                  ;	es:di -> bds, ds -> Bios_Data
 18726                                  ;---------------------------------------------------------------------------
 18727                                  
 18728                                  		; 26/12/2023 - Retro DOS v5.0
 18729                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 18730                                  mediacheck:
 18731 00001B22 E852EE                  		call	checksingle	; make sure correct disk is in place
 18732 00001B25 31F6                    		xor	si, si
 18733 00001B27 E86101                  		call	haschange
 18734 00001B2A 742F                    		jz	short mediaret
 18735                                  		; 26/12/2023
 18736                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 18737 00001B2C E85001                  		call	checkromchange
 18738 00001B2F 752B                    		jnz	short mediadovolid
 18739 00001B31 50                      		push	ax
 18740 00001B32 52                      		push	dx
 18741 00001B33 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18742                                  					; set logical drive number
 18743 00001B37 B416                    		mov	ah, 16h
 18744 00001B39 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18745                                  					; DL = drive to	check
 18746                                  					; Return: AH = disk change status
 18747 00001B3B 5A                      		pop	dx
 18748 00001B3C 58                      		pop	ax
 18749 00001B3D 721D                    		jb	short mediadovolid
 18750 00001B3F BE0100                  		mov	si, 1		; signal no change
 18751                                  
 18752                                  ; there are some drives with changeline that "lose" the changeline indication
 18753                                  ; if a different drive is accessed after the current one. in order to avoid
 18754                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 18755                                  ; is not active and we are accessing a different drive from the last one.
 18756                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 18757                                  ; status.
 18758                                  		; 19/10/2022
 18759 00001B42 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 18760 00001B46 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 18761                                  					; (If the last drive accessed is not current drive
 18762                                  					; media	change status may be incorrect.	So,
 18763                                  					; "I don't now" will be returned even if it is indicated
 18764                                  					; as media is not changed.)
 18765 00001B4A 740F                    		jz	short mediaret	; (same	drive,
 18766                                  					; media	changeline indication is reliable)
 18767                                  
 18768                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 18769                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 18770                                  ; "not changed" here since the 2 second test said no change.)
 18771                                  
 18772 00001B4C 50                      		push	ax
 18773 00001B4D 51                      		push	cx
 18774 00001B4E 52                      		push	dx
 18775 00001B4F E8D8EA                  		call	Check_Time_Of_Access
 18776 00001B52 5A                      		pop	dx
 18777 00001B53 59                      		pop	cx
 18778 00001B54 58                      		pop	ax
 18779 00001B55 09F6                    		or	si, si
 18780 00001B57 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 18781                                  					; (volume id will be checked)
 18782 00001B59 31F6                    		xor	si, si		; return "i don't know"
 18783                                  mediaret:
 18784 00001B5B C3                      		retn
 18785                                  ; ---------------------------------------------------------------------------
 18786                                  
 18787                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 18788                                  ; because this may be different since we only set medbyt when doing a read
 18789                                  ; or write.
 18790                                  
 18791                                  mediadovolid:
 18792 00001B5C E877EB                  		call	GetBp		; build	a new bpb in current bds
 18793 00001B5F 72FA                    		jb	short mediaret
 18794 00001B61 E82D00                  		call	check_vid
 18795 00001B64 73F5                    		jnb	short mediaret
 18796 00001B66 E940F2                  		jmp	maperror	; fix up al for	return to dos
 18797                                  ; ---------------------------------------------------------------------------
 18798                                  
 18799                                  ; simple, quick check of latched change. if no indication, then return
 18800                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 18801                                  ; return and set al = 15 (for invalid media change) which will be returned to
 18802                                  ; dos.
 18803                                  ;
 18804                                  ; for dos 3.3, this will work only for the drive that has changeline.
 18805                                  
 18806                                  ;	call with es:di -> bds, ds -> Bios_Data
 18807                                  ;	***** warning:  this routine will return one level up on the stack
 18808                                  ;			if an error occurs!
 18809                                  
 18810                                  checklatchio:
 18811                                  
 18812                                  ; if returning fake bpb then assume the disk has not changed
 18813                                  
 18814                                  		; 26/12/2023
 18815                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 18816 00001B69 E8B0FF                  		call	chkopcnt
 18817 00001B6C 741B                    		jz	short checkret	; done if zero
 18818                                  
 18819                                  ; check for past rom indications. if no rom change indicated, then return ok.
 18820                                  
 18821                                  		; 26/12/2023
 18822                                  		;test	word [es:di+3Fh], 40h
 18823                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 18824 00001B6E E80E01                  		call	checkromchange
 18825 00001B71 7416                    		jz	short checkret
 18826                                  
 18827                                  ; we now see that a change line has been seen in the past. let's do the
 18828                                  ; expensive verification.
 18829                                  
 18830 00001B73 E860EB                  		call	GetBp		; build	bpb in current bds
 18831 00001B76 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 18832 00001B78 E81600                  		call	check_vid
 18833 00001B7B 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 18834 00001B7D 09F6                    		or	si, si		; is changed for sure?
 18835 00001B7F 7908                    		jns	short checkret
 18836 00001B81 E88F00                  		call	returnvid
 18837                                  checklatchret:
 18838 00001B84 E822F2                  		call	maperror	; fix up al for	return to dos
 18839                                  ret_no_error_map:
 18840 00001B87 F9                      		stc
 18841 00001B88 5E                      		pop	si		; pop off return address
 18842                                  checkret:
 18843 00001B89 C3                      		retn
 18844                                  ; ---------------------------------------------------------------------------
 18845                                  
 18846                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 18847                                  ; only if there was a disk error. return that error code in ax.
 18848                                  ;
 18849                                  ;	called with es:di -> bds, ds -> Bios_Data
 18850                                  
 18851                                  checkfatvid:
 18852 00001B8A E8D101                  		call	fat_check	; check	the fat	and the	vid
 18853 00001B8D 09F6                    		or	si, si
 18854 00001B8F 7835                    		js	short changed_drv
 18855                                  
 18856                                  ; the fat was the same. fall into check_vid and check volume id.
 18857                                  
 18858                                  		; fall into check_vid
 18859                                  
 18860                                  ; =============== S U B	R O U T	I N E =======================================
 18861                                  
 18862                                  ; now with the extended boot record, the logic should be enhanced.
 18863                                  ;
 18864                                  ; if it is the extended boot record, then we check the volume serial
 18865                                  ; number instead of volume id. if it is different, then set si to -1.
 18866                                  ;
 18867                                  ; if it is same, then si= 1 (no change).
 18868                                  ;
 18869                                  ; if it is not the extended boot record, then just follows the old
 18870                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 18871                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 18872                                  ; should have already covered by extended boot structure checking.
 18873                                  ; so, we will return "i don't know" by setting si to 0.
 18874                                  ;
 18875                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 18876                                  ; (this will be gauranteed by a successful getbp call right before this
 18877                                  ; routine.)
 18878                                  ;
 18879                                  ;	called with es:di -> bds, ds -> bds
 18880                                  
 18881                                  		; 26/12/2023 - Retro DOS v5.0
 18882                                  		; 19/10/2022
 18883                                  check_vid:
 18884                                  
 18885                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 18886                                  ; boot signature. if it is set then go to do the extended
 18887                                  ; id check otherwise continue with code below
 18888                                  
 18889                                  		; 26/12/2023
 18890                                  		;;;
 18891 00001B91 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18892 00001B96 7507                    		jnz     short chk_vid_1
 18893 00001B98 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 18894                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 18895 00001B9D EB05                    		jmp     short chk_vid_2
 18896                                  chk_vid_1:
 18897                                  		;;;
 18898 00001B9F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 18899                                  					; [disksector+EXT_BOOT.SIG],
 18900                                  					; EXT_BOOT_SIGNATURE
 18901                                  chk_vid_2:		; 26/12/2023
 18902 00001BA4 7427                    		jz	short do_ext_check_id
 18903 00001BA6 E8E200                  		call	haschange
 18904 00001BA9 74DE                    		jz	short checkret
 18905 00001BAB 31F6                    		xor	si, si
 18906 00001BAD 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 18907                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 18908 00001BB2 7411                    		jz	short checkfatret ; don't read vol id
 18909                                  					; if not fat system
 18910 00001BB4 E8F400                  		call	read_volume_id
 18911 00001BB7 720C                    		jb	short checkfatret
 18912 00001BB9 E89901                  		call	check_volume_id
 18913 00001BBC BEFFFF                  		mov	si, 0FFFFh	; -1
 18914                                  					; definitely changed
 18915 00001BBF 7505                    		jnz	short changed_drv
 18916                                  
 18917 00001BC1 46                      		inc	si		; not changed
 18918                                  vid_no_changed:
 18919 00001BC2 E8C000                  		call	resetchanged
 18920                                  		; 12/12/2022
 18921                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 18922                                  		;clc
 18923                                  checkfatret:
 18924 00001BC5 C3                      		retn
 18925                                  ; ---------------------------------------------------------------------------
 18926                                  
 18927                                  		; 12/12/2022
 18928                                  changed_drv:
 18929 00001BC6 F8                      		clc			; cas -- return	no error
 18930 00001BC7 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 18931                                  					; ensure that we ask rom for media
 18932 00001BCC C3                      		retn			; check	next time round
 18933                                  ; ---------------------------------------------------------------------------
 18934                                  
 18935                                  ; extended id check
 18936                                  
 18937                                  ; 16/10/2022
 18938                                  
 18939                                  ; the code to check extended id is basically a check to see if the
 18940                                  ; volume serial number is still the same. the volume serial number
 18941                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 18942                                  ; ds:di points to the bds of the drive under consideration.
 18943                                  ; the bds has fields containing the high and low words 
 18944                                  ; of the volume serial number of the media in the drive.
 18945                                  ; compare these fields to the fields mentioned above. if these fields
 18946                                  ; do not match the media has changed and so we should jump to the code
 18947                                  ; starting at ext_changed else return "i don't know" status
 18948                                  ; in the register used for the changeline status and continue executing
 18949                                  ; the code given below. for temporary storage use the register which
 18950                                  ; has been saved and restored around this block.
 18951                                  ;
 18952                                  ; bds fields in inc\msbds.inc
 18953                                  
 18954                                  		; 26/12/2023 - Retro DOS v5.0
 18955                                  		; 19/10/2022
 18956                                  do_ext_check_id:
 18957                                  		; 26/12/2023
 18958                                  		;push	ax
 18959                                  		;;mov	ax, word ptr ds:disksector+27h
 18960                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 18961                                  		;mov	ax, [disksector+27h]
 18962                                  ; 26/12/2023
 18963                                  %if 1
 18964                                  		;;;
 18965 00001BCD 57                      		push	di
 18966 00001BCE BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 18967                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 18968 00001BD1 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18969 00001BD6 7403                    		jz	short chk_vid_3
 18970 00001BD8 83EE1C                  		sub	si, 28		; BS_VolID
 18971                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 18972                                  chk_vid_3:
 18973                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 18974 00001BDB 81C78900                		add	di, 137		; BDS.vol_serial
 18975 00001BDF A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 18976                                  			;		= [di+BDS.vol_serial] ?
 18977 00001BE0 7501                    		jnz	short chk_vid_4
 18978 00001BE2 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 18979                                  			;		= [di+BDS.vol_serial+2] ?
 18980                                  chk_vid_4:
 18981 00001BE3 5F                      		pop	di
 18982                                  		;pop	ax
 18983 00001BE4 7504                    		jnz	short ext_changed ; not equal/same
 18984 00001BE6 31F6                    		xor	si, si 		 ; 0 ; don't know
 18985 00001BE8 EBD8                    		jmp	short vid_no_changed ; reset the flag
 18986                                  		;;;
 18987                                  %else
 18988                                  		; 02/09/2023
 18989                                  		xor	si, si ; 0
 18990                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 18991                                  		jnz	short ext_changed
 18992                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 18993                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 18994                                  		jnz	short ext_changed
 18995                                  		;xor	si, si		; 0
 18996                                  					; don't know
 18997                                  		pop	ax
 18998                                  		jmp	short vid_no_changed
 18999                                  					; reset the flag
 19000                                  %endif
 19001                                  
 19002                                  ; ---------------------------------------------------------------------------
 19003                                  
 19004                                  ext_changed:
 19005                                  		; 26/12/2023
 19006                                  		;pop	ax
 19007                                  		; 02/09/2023
 19008                                  		;dec	si ; mov si, 0FFFFh ; -1
 19009 00001BEA BEFFFF                  		mov	si, 0FFFFh	; -1
 19010                                  					; disk changed!
 19011                                  		; 12/12/2022
 19012                                  		; ('changed_drv' clears cf)
 19013                                  		;clc
 19014 00001BED EBD7                    		jmp	short changed_drv
 19015                                  
 19016                                  ; ---------------------------------------------------------------------------
 19017                                  
 19018                                  ; at i/o time, we detected the error. now we need to determine whether the
 19019                                  ; media was truly changed or not. we return normally if media change unknown.
 19020                                  ; and we pop off the call and jmp to harderr if we see an error.
 19021                                  ;
 19022                                  ; es:di -> bds
 19023                                  
 19024                                  checkio:				
 19025 00001BEF 80FC06                  		cmp	ah, 6
 19026 00001BF2 75D1                    		jnz	short checkfatret
 19027 00001BF4 E825FF                  		call	chkopcnt
 19028 00001BF7 74CC                    		jz	short checkfatret
 19029 00001BF9 E8DAEA                  		call	GetBp
 19030 00001BFC 7212                    		jb	short no_error_map
 19031 00001BFE E889FF                  		call	checkfatvid
 19032 00001C01 7209                    		jb	short checkioret ; disk	error trying to	read in.
 19033 00001C03 09F6                    		or	si, si		; is changed for sure?
 19034 00001C05 7802                    		js	short checkioerr ; yes changed
 19035 00001C07 45                      		inc	bp		; allow	a retry
 19036 00001C08 C3                      		retn
 19037                                  ; ---------------------------------------------------------------------------
 19038                                  
 19039                                  checkioerr:				
 19040 00001C09 E80700                  		call	returnvid
 19041                                  
 19042                                  checkioret:				
 19043 00001C0C F9                      		stc			; make sure carry gets passed through
 19044 00001C0D E955F1                  		jmp	harderr
 19045                                  ; ---------------------------------------------------------------------------
 19046                                  
 19047                                  no_error_map:				
 19048 00001C10 E955F1                  		jmp	harderr2
 19049                                  
 19050                                  ; =============== S U B	R O U T	I N E =======================================
 19051                                  
 19052                                  ; return vid sets up the vid for a return to dos.
 19053                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 19054                                  ;  **** trashes si! ****
 19055                                  
 19056                                  returnvid:		
 19057 00001C13 BE1600                  		mov	si, 22		; extra
 19058                                  					; offset into pointer to return	value
 19059 00001C16 E80700                  		call	vid_into_packet
 19060 00001C19 B406                    		mov	ah, 6
 19061 00001C1B F9                      		stc
 19062 00001C1C C3                      		retn
 19063                                  
 19064                                  ; ---------------------------------------------------------------------------
 19065                                  
 19066                                  ; moves the pointer to the volid for the drive into the original request packet
 19067                                  ; no attempt is made to preserve registers.
 19068                                  ;
 19069                                  ; assumes es:di -> bds
 19070                                  ; **trashes si**
 19071                                  
 19072                                  media_set_vid:				
 19073 00001C1D BE0F00                  		mov	si, 15		; trans+1
 19074                                  					; return the value here	in packet
 19075                                  
 19076                                  		; fall into vid_into_packet
 19077                                  
 19078                                  ; =============== S U B	R O U T	I N E =======================================
 19079                                  
 19080                                  ; return pointer to vid in bds at es:di in packet[si]
 19081                                  
 19082                                  		; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 19083                                  		; 19/10/2022
 19084                                  vid_into_packet:
 19085 00001C20 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 19086 00001C21 C51E[1200]              		lds	bx, [ptrsav]
 19087                                  		;add	di, 75		; BDS.volid
 19088                                  		; 14/04/2024
 19089 00001C25 83C77D                  		add	di, 125	; (PCDOS 7.1)
 19090 00001C28 8938                    		mov	[bx+si], di
 19091                                  		;sub	di, 75		; BDS.volid
 19092 00001C2A 83EF7D                  		sub	di, 125
 19093 00001C2D 8C4002                  		mov	[bx+si+2], es
 19094 00001C30 1F                      		pop	ds
 19095                                  dofloppy:	; 18/12/2022
 19096 00001C31 C3                      		retn
 19097                                  
 19098                                  ; ---------------------------------------------------------------------------
 19099                                  
 19100                                  ;----------------------------------------------------------------------------
 19101                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 19102                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 19103                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 19104                                  ;   of getbp. for 3.5" media, we just return.
 19105                                  ;
 19106                                  ;   inputs:	es:di point to correct bds for this drive
 19107                                  ;		ah has media byte
 19108                                  ;
 19109                                  ;   outputs:	carry clear
 19110                                  ;		    no registers modified
 19111                                  ;		carry set
 19112                                  ;		    al = sectors/fat
 19113                                  ;		    bh = number of root directory entries
 19114                                  ;		    bl = sectors per track
 19115                                  ;		    cx = number of sectors
 19116                                  ;		    dh = sectors per allocation unit
 19117                                  ;		    dl = number of heads
 19118                                  ;
 19119                                  ;----------------------------------------------------------------------------
 19120                                  
 19121                                  		; 26/12/2023 - Retro DOS v5.0
 19122                                  hidensity:
 19123                                  
 19124                                  ; check for correct drive
 19125                                  		
 19126                                  		; 26/12/2023
 19127 00001C32 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 19128                                  		; 12/12/2022
 19129                                  		;test	byte [es:di+23h], 2
 19130                                  		;;test	word [es:di+23h], 2 ; is it special?
 19131                                  					; [es:di+BDS.flags], fchangeline
 19132 00001C37 74F8                    		jz	short dofloppy	; no, do normal floppy test
 19133                                  
 19134                                  ; we have a media byte that is pretty complex. examine drive information
 19135                                  ; table to see what kind it is.
 19136                                  
 19137                                  		; 26/12/2023
 19138 00001C39 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 19139                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 19140 00001C3E 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 19141                                  					; yes, use fatid...
 19142                                  ; 96 tpi drive?
 19143 00001C40 80FCF9                  		cmp	ah, 0F9h
 19144 00001C43 75EC                    		jnz	short dofloppy
 19145                                  
 19146                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 19147                                  ;------ a 720K diskette
 19148                                  
 19149                                  		; 02/09/2023 (PCDOS 7.1)
 19150                                  		; 26/12/2023
 19151 00001C45 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 19152                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 19153 00001C49 3C07                    		cmp	al, 7
 19154                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 19155                                  					; ffOther
 19156 00001C4B 7413                    		jz	short Is720K
 19157 00001C4D 3C09                    		cmp	al, 9
 19158                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 19159                                  					; ff288
 19160 00001C4F 740F                    		jz	short Is720K
 19161 00001C51 B007                    		mov	al, 7		; seven	sectors	/ fat
 19162 00001C53 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 19163                                  					; 224 root dir entries
 19164                                  					; & 0Fh sector max
 19165 00001C56 B96009                  		mov	cx, 2400	; 80*15*2
 19166                                  					; 80 tracks, 15 sectors/track,
 19167                                  					; 2 sides
 19168                                  		; 02/09/2023
 19169 00001C59 5A                      		pop	dx		; pop off return address
 19170 00001C5A BA0201                  		mov	dx, 258		; 1*256+2
 19171                                  					; sectors/allocation unit
 19172                                  					; & head max
 19173                                  		;add	sp, 2		; pop off return address
 19174 00001C5D E9EAEA                  		jmp	Has1		; return to tail of getbp
 19175                                  ; ---------------------------------------------------------------------------
 19176                                  
 19177                                  Is720K:
 19178                                  		; 02/09/2023
 19179 00001C60 5B                      		pop	bx		; pop off return address
 19180                                  		;add	sp, 2		; pop off return address
 19181 00001C61 E9A9EA                  		jmp	Has720K		; return to 720K code
 19182                                  ; ---------------------------------------------------------------------------
 19183                                  
 19184                                  		; 18/12/2022
 19185                                  ;dofloppy:
 19186                                  		;retn
 19187                                  
 19188                                  ; =============== S U B	R O U T	I N E =======================================
 19189                                  
 19190                                  ; 16/10/2022
 19191                                  
 19192                                  ;---------------------------------------------------------------------------
 19193                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 19194                                  ;		   essentially used to indicate changeline, or format.
 19195                                  ;
 19196                                  ;   inputs:	dl contains physical drive number
 19197                                  ;		bx contains bits to set in the flag field in the bdss
 19198                                  ;   outputs:	none
 19199                                  ;   registers modified: flags
 19200                                  ;
 19201                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 19202                                  ;
 19203                                  ; in the virtual drive system we *must* flag the other drives as being changed
 19204                                  ;---------------------------------------------------------------------------
 19205                                  
 19206                                  		; 26/12/2023 - Retro DOS v5.0
 19207                                  set_changed_dl:	
 19208 00001C64 06                      		push	es
 19209 00001C65 57                      		push	di
 19210                                  		;les	di, ds:start_bds
 19211                                  		; 19/10/2022
 19212 00001C66 C43E[1901]              		les	di, [start_bds]
 19213                                  
 19214                                  ; note: we assume that the list is non-empty
 19215                                  
 19216                                  scan_bds:
 19217 00001C6A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19218 00001C6E 7504                    		jnz	short get_next_bds
 19219                                  
 19220                                  ; someone may complain, but this *always* must be done when a disk change is
 19221                                  ; noted. there are *no* other compromising circumstances.
 19222                                  
 19223                                  		; 26/12/2023
 19224 00001C70 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 19225                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 19226                                  					; signal change	on other drive
 19227                                  get_next_bds:
 19228 00001C74 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19229                                  					; go to	next bds
 19230 00001C77 83FFFF                  		cmp	di, 0FFFFh
 19231 00001C7A 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 19232 00001C7C 5F                      		pop	di
 19233 00001C7D 07                      		pop	es
 19234 00001C7E C3                      		retn
 19235                                  
 19236                                  ; =============== S U B	R O U T	I N E =======================================
 19237                                  
 19238                                  ;---------------------------------------------------------------------------
 19239                                  ; checkromchange - see if external program has diddled rom change line.
 19240                                  ;
 19241                                  ;   inputs:	es:di points to current bds.
 19242                                  ;   outputs:	zero set - no change
 19243                                  ;		zero reset - change
 19244                                  ;   registers modified: none
 19245                                  ;---------------------------------------------------------------------------
 19246                                  
 19247                                  		; 26/12/2023 - Retro DOS v5.0
 19248                                  checkromchange:	
 19249                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 19250                                  		; 26/12/2023
 19251 00001C7F 26F6453F40              		test	byte [es:di+3Fh], 40h
 19252                                  		; 10/12/2022
 19253                                  		;test	byte [es:di+23h], 40h
 19254                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 19255                                  					; fchanged
 19256 00001C84 C3                      		retn
 19257                                  
 19258                                  ; =============== S U B	R O U T	I N E =======================================
 19259                                  
 19260                                  ;---------------------------------------------------------------------------
 19261                                  ; resetchanged - restore value of change line
 19262                                  ;
 19263                                  ;   inputs:	es:di points to current bds
 19264                                  ;   outputs:	none
 19265                                  ;   registers modified: none
 19266                                  ;---------------------------------------------------------------------------
 19267                                  
 19268                                  		; 26/12/2023 - Retro DOS v5.0
 19269                                  resetchanged:
 19270                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 19271                                  		; 26/12/2023
 19272 00001C85 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 19273                                  		; 10/12/2022
 19274                                  		;and	byte [es:di+23h], 0BFh
 19275                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 19276                                  					; ~fchanged
 19277 00001C8A C3                      		retn
 19278                                  
 19279                                  ; =============== S U B	R O U T	I N E =======================================
 19280                                  
 19281                                  ;---------------------------------------------------------------------------
 19282                                  ; haschange - see if drive can supply change line
 19283                                  ;
 19284                                  ;   inputs:	es:di points to current bds
 19285                                  ;   outputs:	zero set - no change line available
 19286                                  ;		zero reset - change line available
 19287                                  ;   registers modified: none
 19288                                  ;---------------------------------------------------------------------------
 19289                                  
 19290                                  		; 26/12/2023 - Retro DOS v5.0
 19291                                  haschange:
 19292                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 19293                                  		; 26/12/2023
 19294 00001C8B 26F6453F02              		test	byte [es:di+3Fh], 2
 19295                                  		; 10/12/2022
 19296                                  		;test	byte [es:di+23h], 2
 19297                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 19298                                  					; fchangeline
 19299 00001C90 C3                      		retn
 19300                                  
 19301                                  ; ---------------------------------------------------------------------------
 19302                                  
 19303                                  ; 16/10/2022
 19304                                  
 19305                                  ;-------------------------------------------------------------------------
 19306                                  ; set_volume_id      -	main routine, calls other routines.
 19307                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 19308                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 19309                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 19310                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 19311                                  ;-------------------------------------------------------------------------
 19312                                  
 19313                                  ; set_volume_id
 19314                                  ;   if drive has changeline support, read in and set the volume_id
 19315                                  ; and the last fat_id byte. if no change line support then do nothing.
 19316                                  ;
 19317                                  ;   on entry:
 19318                                  ;	es:di points to the bds for this disk.
 19319                                  ;	ah contains media byte
 19320                                  ;
 19321                                  ;   on exit:
 19322                                  ;	carry clear:
 19323                                  ;	   successful call
 19324                                  ;	carry set
 19325                                  ;	   error and ax has error code
 19326                                  
 19327                                  set_volume_id:
 19328 00001C91 52                      		push	dx		; save registers
 19329 00001C92 50                      		push	ax
 19330 00001C93 E8F5FF                  		call	haschange	; does drive have changeline support?
 19331 00001C96 740B                    		jz	short setvret	; no, get out
 19332 00001C98 E81000                  		call	read_volume_id
 19333 00001C9B 7209                    		jb	short seterr
 19334 00001C9D E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 19335 00001CA0 E8E2FF                  		call	resetchanged	; restore value	of change line
 19336                                  setvret:				
 19337                                  		; 10/12/2022
 19338                                  		; cf = 0
 19339                                  		;clc			; no error, clear carry flag
 19340 00001CA3 58                      		pop	ax		; restore registers
 19341 00001CA4 5A                      		pop	dx
 19342 00001CA5 C3                      		retn
 19343                                  ; ---------------------------------------------------------------------------
 19344                                  
 19345                                  seterr:
 19346 00001CA6 5A                      		pop	dx		; pop stack but don't overwrite ax
 19347 00001CA7 5A                      		pop	dx		; restore dx
 19348 00001CA8 C3                      		retn
 19349                                  ; ---------------------------------------------------------------------------
 19350 00001CA9 0000                    root_sec:	dw 0			; root sector #
 19351                                  
 19352                                  ; 16/10/2022
 19353                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 19354                                  ; 09/12/2022
 19355                                  ROOTSEC equ root_sec
 19356                                  
 19357                                  ; =============== S U B	R O U T	I N E =======================================
 19358                                  
 19359                                  ; 16/10/2022
 19360                                  
 19361                                  ; read_volume_id read the volume id and tells if it has been changed.
 19362                                  ;
 19363                                  ;   on entry:
 19364                                  ;	es:di points to current bds for drive.
 19365                                  ;
 19366                                  ;   on exit:
 19367                                  ;	carry clear
 19368                                  ;	    si = 1  no change
 19369                                  ;	    si = 0  ?
 19370                                  ;	    si = -1 change
 19371                                  ;
 19372                                  ;	carry set:
 19373                                  ;	    error and ax has error code.
 19374                                  
 19375                                  read_volume_id:
 19376 00001CAB 52                      		push	dx		; preserve registers
 19377 00001CAC 51                      		push	cx
 19378 00001CAD 53                      		push	bx
 19379 00001CAE 50                      		push	ax
 19380 00001CAF 06                      		push	es		; stack the bds last
 19381 00001CB0 57                      		push	di
 19382 00001CB1 1E                      		push	ds		; point es to Bios_Data
 19383 00001CB2 07                      		pop	es
 19384 00001CB3 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19385 00001CB6 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 19386                                  		; 26/12/2023
 19387 00001CB9 B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 19388                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 19389                                  		
 19390                                  		;rep	movsb
 19391                                  		; 26/12/2023
 19392                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 19393                                  		;db 0FBh,2Eh,0A4h 
 19394                                  		;cs	; nul_vid is in BIOSCODE segment 
 19395                                  		;rep movsb
 19396 00001CBC F3                      		rep
 19397 00001CBD 2E                      		cs
 19398 00001CBE A4                      		movsb	
 19399                                  		
 19400 00001CBF 5F                      		pop	di
 19401 00001CC0 07                      		pop	es
 19402 00001CC1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 19403                                  					; # of fats
 19404 00001CC5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 19405                                  					; sectors / fat
 19406 00001CC9 F6E1                    		mul	cl		; size taken by	fats
 19407 00001CCB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 19408                                  					; add on reserved sectors
 19409                                  					;
 19410                                  					; ax is	now sector # (0	based)
 19411                                  		; 17/10/2022
 19412 00001CCF 2EA3[A91C]              		mov	[cs:ROOTSEC], ax
 19413                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 19414                                  					; 0070h:3EFFh =	2C7h:198Fh
 19415 00001CD3 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 19416                                  					; # root dir entries
 19417 00001CD7 B104                    		mov	cl, 4		; 16 entries/sector
 19418 00001CD9 D3E8                    		shr	ax, cl		; divide by 16
 19419                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 19420                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 19421 00001CDB 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 19422                                  next_sec:
 19423 00001CDC 51                      		push	cx		; save outer loop counter
 19424 00001CDD 2EA1[A91C]              		mov	ax, [cs:ROOTSEC]
 19425                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 19426                                  					; get sector #
 19427 00001CE1 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 19428                                  					; sectors / track
 19429 00001CE5 31D2                    		xor	dx, dx
 19430 00001CE7 F7F1                    		div	cx
 19431                                  
 19432                                  ; set up registers for call to read_sector
 19433                                  
 19434 00001CE9 42                      		inc	dx		; dx= sectors into track
 19435                                  					; ax= track count from 0
 19436 00001CEA 88D1                    		mov	cl, dl		; sector to read
 19437 00001CEC 31D2                    		xor	dx, dx
 19438 00001CEE 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 19439                                  					; # heads on this disc
 19440 00001CF2 88D6                    		mov	dh, dl		; head number
 19441 00001CF4 88C5                    		mov	ch, al		; track	#
 19442 00001CF6 E8BDEB                  		call	read_sector	; get first sector of the root directory,
 19443                                  					; ds:bx	-> directory sector
 19444 00001CF9 723F                    		jb	short readviderr
 19445 00001CFB B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 19446 00001CFE B008                    		mov	al, 8		; volume label bit
 19447                                  fvid_loop:
 19448                                  		; 02/09/2023 (PCDOS 7.1)
 19449 00001D00 382F                    		cmp	[bx], ch ; 0				
 19450                                  		;cmp	byte [bx], 0 ; end of dir?
 19451 00001D02 7433                    		jz	short no_vid	; yes, no vol id
 19452 00001D04 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 19453 00001D07 7405                    		jz	short ent_loop	; yes, skip
 19454 00001D09 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 19455 00001D0C 750F                    		jnz	short found_vid	; jmp yes
 19456                                  ent_loop:
 19457 00001D0E 83C320                  		add	bx, 32		; add length of	directory entry
 19458 00001D11 E2ED                    		loop	fvid_loop
 19459 00001D13 59                      		pop	cx		; outer loop
 19460 00001D14 2EFF06[A91C]            		inc	word [cs:ROOTSEC]
 19461                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 19462                                  					; next sector
 19463 00001D19 E2C1                    		loop	next_sec	; continue
 19464                                  notfound:
 19465                                  		; 02/09/2023
 19466                                  		;xor	si, si
 19467 00001D1B EB13                    		jmp	short fvid_ret
 19468                                  ; ---------------------------------------------------------------------------
 19469                                  
 19470                                  found_vid:
 19471                                  		; 02/09/2023
 19472                                  		; cf = 0  ('test' instruction clears cf)
 19473 00001D1D 59                      		pop	cx		; clean stack of outer loop counter
 19474 00001D1E 89DE                    		mov	si, bx		; point	to volume_id
 19475 00001D20 06                      		push	es		; preserve current bds
 19476 00001D21 57                      		push	di
 19477 00001D22 1E                      		push	ds
 19478 00001D23 07                      		pop	es		; point es to Bios_Data
 19479 00001D24 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19480 00001D27 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 19481                                  					; length of string minus nul
 19482 00001D2A F3A4                    		rep movsb		; mov volume label to tmp_vid
 19483                                  		;xor	al, al
 19484                                  		; 02/09/2023
 19485 00001D2C 91                      		xchg	ax, cx		; ax = 0
 19486 00001D2D AA                      		stosb			; null terminate
 19487                                  		;;xor	si, si
 19488                                  		; 02/09/2023
 19489                                  		;xchg	ax, si		; si = 0
 19490 00001D2E 5F                      		pop	di		; restore current bds
 19491 00001D2F 07                      		pop	es
 19492                                  fvid_ret:
 19493                                  		; 02/09/2023
 19494 00001D30 31F6                    		xor	si, si ; 0
 19495                                  				
 19496 00001D32 58                      		pop	ax
 19497                                  		; 10/12/2022
 19498                                  		; cf = 0
 19499                                  		;clc
 19500                                  rvidret:
 19501 00001D33 5B                      		pop	bx		; restore registers
 19502 00001D34 59                      		pop	cx
 19503 00001D35 5A                      		pop	dx
 19504 00001D36 C3                      		retn
 19505                                  ; ---------------------------------------------------------------------------
 19506                                  
 19507                                  no_vid:
 19508 00001D37 59                      		pop	cx		; clean stack of outer loop counter
 19509                                  		;jmp	short notfound	; not found
 19510                                  		; 02/09/2023
 19511 00001D38 EBF6                    		jmp	short fvid_ret
 19512                                  ; ---------------------------------------------------------------------------
 19513                                  
 19514                                  readviderr:
 19515 00001D3A 5E                      		pop	si		; trash the outer loop counter
 19516 00001D3B 5E                      		pop	si		; caller's ax, return error code instead
 19517 00001D3C EBF5                    		jmp	short rvidret
 19518                                  
 19519                                  ; ---------------------------------------------------------------------------
 19520                                  		; 26/12/2023 - Retro DOS v5.0
 19521                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 19522                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 19523                                  preset_volid_addr:
 19524 00001D3E BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 19525                                  		; 26/12/2023
 19526                                  		; PCDOS 7.1
 19527 00001D41 83C77D                  		add	di, 125		; BDS.volid
 19528 00001D44 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 19529                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 19530                                  		;add	di, 75		; BDS.volid
 19531                                  		;mov	cx, 12		; VOLID_SIZ
 19532                                  		;
 19533 00001D47 FC                      		cld
 19534 00001D48 C3                      		retn
 19535                                  
 19536                                  ; =============== S U B	R O U T	I N E =======================================
 19537                                  
 19538                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 19539                                  ;
 19540                                  ; inputs:	es:di has current bds
 19541                                  ; outputs:	bds for drive has volume id from tmp
 19542                                  
 19543                                  		; 27/12/2023 - Retro DOS v5.0
 19544                                  transfer_volume_id:
 19545 00001D49 57                      		push	di		; copy the volume id from tmp to special drive
 19546                                  		;push	si
 19547 00001D4A 51                      		push	cx
 19548                                  		; 27/12/2023
 19549 00001D4B 56                      		push	si
 19550                                  
 19551                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19552                                  		;;add	di, BDS.volid
 19553                                  		;add	di, 75		; BDS.volid
 19554                                  		;;mov	cx, VOLID_SIZ
 19555                                  		;mov	cx, 12		; VOLID_SIZ
 19556                                  		;cld
 19557                                  		; 02/09/2023 (PCDOS 7.1)
 19558 00001D4C E8EFFF                  		call	preset_volid_addr
 19559                                  
 19560 00001D4F F3A4                    		rep movsb
 19561                                  		
 19562                                  		; 27/12/2023
 19563 00001D51 5E                      		pop	si
 19564                                  chk_volid_ok:
 19565 00001D52 59                      		pop	cx
 19566                                  		;pop	si
 19567 00001D53 5F                      		pop	di
 19568 00001D54 C3                      		retn
 19569                                  
 19570                                  ; =============== S U B	R O U T	I N E =======================================
 19571                                  
 19572                                  ;  check_volume_id - compare volume id in tmp area with
 19573                                  ;		     one expected for drive
 19574                                  ;
 19575                                  ;   inputs:	es:di has current bds for drive
 19576                                  ;   outputs:	zero true means it matched
 19577                                  
 19578                                  		; 27/12/2023 - Retro DOS v5.0
 19579                                  check_volume_id:
 19580 00001D55 57                      		push	di
 19581 00001D56 51                      		push	cx
 19582                                  		
 19583                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19584                                  		;;add	di, BDS.volid
 19585                                  		;add	di, 75		; BDS.volid
 19586                                  		;;mov	cx, VOLID_SIZ
 19587                                  		;mov	cx, 12		; VOLID_SIZ
 19588                                  		;cld
 19589                                  		; 02/09/2023 (PCDOS 7.1)
 19590 00001D57 E8E4FF                  		call	preset_volid_addr
 19591                                  
 19592 00001D5A F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 19593                                  		
 19594                                  		; 27/12/2023
 19595                                  		;pop	cx
 19596                                  		;pop	di
 19597                                  		;retn
 19598 00001D5C EBF4                    		jmp	short chk_volid_ok
 19599                                  
 19600                                  ; =============== S U B	R O U T	I N E =======================================
 19601                                  
 19602                                  ;   fat_check - see of the fatid has changed in the specified drive.
 19603                                  ;	      - uses the fat id obtained from the boot sector.
 19604                                  ;
 19605                                  ;   inputs:	medbyt is expected fat id
 19606                                  ;		es:di points to current bds
 19607                                  ;
 19608                                  ;   output:	si = -1 if fat id different,
 19609                                  ;		si = 0 otherwise
 19610                                  ;
 19611                                  ;   no other registers changed.
 19612                                  
 19613                                  fat_check:
 19614 00001D5E 50                      		push	ax
 19615 00001D5F 31F6                    		xor	si, si		; say fat id's are same.
 19616 00001D61 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 19617 00001D64 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 19618                                  					; compare it with the bds medbyte
 19619 00001D68 7401                    		jz	short okret1	; carry	clear
 19620 00001D6A 4E                      		dec	si
 19621                                  okret1:
 19622 00001D6B 58                      		pop	ax
 19623 00001D6C C3                      		retn
 19624                                  
 19625                                  ; ---------------------------------------------------------------------------
 19626                                  
 19627                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 19628                                  		;times 2 db 0
 19629                                  
 19630                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 19631                                  		;times 7 db 0
 19632                                  
 19633                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 19634                                  
 19635                                  		; 09/12/2022
 19636                                  		;times 4 db 0	; 17/10/2022
 19637                                  		;db 4 dup(0)	; times 4 db 0
 19638                                  
 19639                                  ; ---------------------------------------------------------------------------
 19640                                  
 19641                                  		; 09/12/2022
 19642                                  		;db 0
 19643                                  
 19644                                  number2div	equ ($-BCode_start)
 19645                                  number2mod	equ (number2div % 16)
 19646                                  
 19647                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 19648 00001D6D 00<rep 3h>              		times (16-number2mod) db 0
 19649                                  %endif
 19650                                  
 19651                                  ;align 16
 19652                                  
 19653                                  ; 09/12/2022
 19654                                  BCODE_END	equ $ - BCode_start
 19655                                  ; 29/09/2023
 19656                                  BCODEEND:
 19657                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 19658                                  ; 13/12/2022
 19659                                  SYSINITOFFSET	equ BCODE_END
 19660                                  ; 29/09/2023
 19661                                  ;SYSINITOFFSET	equ $-$$
 19662                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 19663                                  
 19664                                  ; 28/09/2023
 19665                                  S2SIZE equ $-$$
 19666                                  
 19667                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 19668                                  
 19669                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19670                                  ; 01/05/2019 - Retro DOS v4.0 
 19671                                  ; ============================================================================
 19672                                  ; end of BIOSCODE
 19673                                  
 19674                                  ; ----------------------------------------------------------------------------
 19675                                  ; %include sysinit5.s	; 09/12/2022
 19676                                  ; ----------------------------------------------------------------------------
 19677                                  
 19678                                  ;=============================================================================
 19679                                  ; (IO.SYS) SYSINIT SEGMENT 
 19680                                  ;=============================================================================
 19681                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19682                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19683                                  ;
 19684                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 19685                                  
 19686                                  section .SYSINIT vstart=0
 19687                                  
 19688                                  ; ****************************************************************************
 19689                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 19690                                  ; ----------------------------------------------------------------------------
 19691                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 19692                                  ; ----------------------------------------------------------------------------
 19693                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 19694                                  ; ----------------------------------------------------------------------------
 19695                                  ; Assembler: NASM version 2.15
 19696                                  ; ----------------------------------------------------------------------------
 19697                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 19698                                  ; ----------------------------------------------------------------------------
 19699                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 19700                                  ; ----------------------------------------------------------------------------
 19701                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 19702                                  ; source code by Microsoft, 1991 
 19703                                  ; ----------------------------------------------------------------------------
 19704                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 19705                                  ; by Microsoft, 12/10/1983
 19706                                  ; ****************************************************************************
 19707                                  ; main file: 'retrodos4.s'
 19708                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 19709                                  
 19710                                  ; 30/12/2022 - Retro DOS v4.2 
 19711                                  ; Retro DOS v4.0 - 2019
 19712                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 19713                                   
 19714                                  ; 21/10/2022
 19715                                  ; ----------------------------------------------------------------------------
 19716                                  ; This source code (version) is based on SYSINIT source code of disassembled
 19717                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 19718                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 19719                                  ; ----------------------------------------------------------------------------
 19720                                  ; Binary file splitter & joiner: FFSJ v3.3
 19721                                  
 19722                                  ;--------------------------------------------------------------
 19723                                  ; SYSINIT.TXT (27/01/1983)
 19724                                  ;--------------------------------------------------------------
 19725                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 19726                                  ;over  the  system  initialization  after  the  OEM  bios   has
 19727                                  ;performed any  initialization  it  needs  to  do.   Control is
 19728                                  ;transfered with a long jump to the external  variable  SYSINIT
 19729                                  ;
 19730                                  ;
 19731                                  ;   The OEM  has  the  following  variables declared external:
 19732                                  ;
 19733                                  ;   CURRENT_DOS_LOCATION    WORD
 19734                                  ;
 19735                                  ;This word  contains  the  segment  number of the DOS before it
 19736                                  ;is relocated.  The OEM bios must set this value.
 19737                                  ;
 19738                                  ;   FINAL_DOS_LOCATION      WORD
 19739                                  ;
 19740                                  ;This word contains the segment number of the DOS after SYSINIT
 19741                                  ;moves it.  The OEM bios must set this value.
 19742                                  ;
 19743                                  ;   DEVICE_LIST             DWORD
 19744                                  ;
 19745                                  ;This  double  word  pointer  points  to  the  linked  list  of
 19746                                  ;character and block device drivers.  The  OEM  must  set  this
 19747                                  ;value.
 19748                                  ;
 19749                                  ;   MEMORY_SIZE             WORD
 19750                                  ;
 19751                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 19752                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 19753                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 19754                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 19755                                  ;and read it back until it gets a mismatch.
 19756                                  ;
 19757                                  ;   DEFAULT_DRIVE           BYTE
 19758                                  ;
 19759                                  ;This is  the initial default drive when the system first comes
 19760                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 19761                                  ;it then drive a is assumed.
 19762                                  ;
 19763                                  ;   BUFFERS                 BYTE
 19764                                  ;
 19765                                  ;This is  the  default  number of buffers for the system.  This
 19766                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19767                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 19768                                  ;
 19769                                  ;   FILES                   BYTE
 19770                                  ;
 19771                                  ;This is  the  default  number  of  files for the system.  This
 19772                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19773                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 19774                                  ;
 19775                                  ;   SYSINIT                 FAR
 19776                                  ;
 19777                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 19778                                  ;this label at the end of its INIT code.
 19779                                  ;
 19780                                  ;   The OEM  has  the  following  variables declared public:
 19781                                  ;
 19782                                  ;   RE_INIT                 FAR
 19783                                  ;
 19784                                  ;This is an entry point which allows the BIOS to do some INIT
 19785                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 19786                                  ;PRESERVED.  On entry DS points to the first available memory
 19787                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 19788                                  ;prefix which represents  the  "program"  currently  running.
 19789                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 19790                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 19791                                  ;that  no  memory  is  allocated to it, it is running in free
 19792                                  ;memory.
 19793                                  ;NOTES:
 19794                                  ;     At the time this routine is called SYSINIT occupies the
 19795                                  ;highest 10K of memory ("highest" is determined by the  value
 19796                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 19797                                  ;     Since this is called AFTER DOS is initialized, you can
 19798                                  ;make system calls.  This also implies that the code for this
 19799                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 19800                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 19801                                  ;     If you don't want  anything done just set this to point
 19802                                  ;at a FAR RET instruction.
 19803                                  
 19804                                  ; ----------------------------------------------------------------------
 19805                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 19806                                  ; ----------------------------------------------------------------------
 19807                                  
 19808                                  ;include version.inc
 19809                                  ; ----------------------------------------------------------------------
 19810                                  
 19811                                  ;FALSE   EQU     0
 19812                                  ;TRUE    EQU     0FFFFh
 19813                                  
 19814                                  ;IBMVER	    EQU     TRUE
 19815                                  ;IBMCOPYRIGHT EQU   FALSE
 19816                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 19817                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 19818                                  ;MSVER      EQU     FALSE
 19819                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 19820                                  ;KANJI      EQU     FALSE
 19821                                  
 19822                                  ;(MSDOS 6.0, versiona.inc, 1991)
 19823                                  ; ----------------------------------------------------------------------
 19824                                  ;MAJOR_VERSION  EQU	6
 19825                                  ;;MINOR_VERSION	EQU	0	;6.00
 19826                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 19827                                  
 19828                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 19829                                  ; ----------------------------------------------------------------------
 19830                                  ;MAJOR_VERSION   EQU	5
 19831                                  ;MINOR_VERSION   EQU	0
 19832                                  
 19833                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 19834                                  ;MAJOR_VERSION   EQU	6
 19835                                  ;MINOR_VERSION   EQU	22
 19836                                  
 19837                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 19838                                  MAJOR_VERSION   EQU	7
 19839                                  MINOR_VERSION   EQU	10
 19840                                  
 19841                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 19842                                  
 19843                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 19844                                  				; currently 0.
 19845                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 19846                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 19847                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 19848                                  
 19849                                  ;      if1
 19850                                  ;      %OUT  ... for DOS Version 5.00 ...
 19851                                  ;      endif
 19852                                  
 19853                                         ;******************************
 19854                                         ;Each assembler program should:
 19855                                         ;  mov ah,030h                   ;DOS Get Version function
 19856                                         ;  int 021h                      ;Version ret. in AX,minor version first
 19857                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 19858                                         ;  jne error_handler             ; EXACT version match.
 19859                                         ;******************************
 19860                                  
 19861                                  ; ----------------------------------------------------------------------
 19862                                  ; device definitions
 19863                                  
 19864                                  ;Attribute bit masks
 19865                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 19866                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 19867                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 19868                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 19869                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 19870                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 19871                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 19872                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 19873                                  
 19874                                  ; The device table list has the form:
 19875                                  struc	SYSDEV
 19876 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 19877 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 19878 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 19879 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 19880 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 19881                                  .size:
 19882                                  endstruc
 19883                                  
 19884                                  ;Static Reguest Header
 19885                                  struc	SRHEAD
 19886 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 19887 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 19888 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 19889 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 19890 00000005 ????????????????                	resb 8		;Reserved for queue links
 19891                                  .size:
 19892                                  endstruc
 19893                                  
 19894                                  ;Status word masks
 19895                                  STERR   EQU     8000H           ;Bit 15 - Error
 19896                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 19897                                  STDON   EQU     0100H           ;Bit 8 - Done
 19898                                  STECODE EQU     00FFH           ;Error code
 19899                                  WRECODE EQU     0
 19900                                  
 19901                                  ;Function codes
 19902                                  DEVINIT EQU     0               ;Initialization
 19903                                  DINITHL EQU     26              ;Size of init header
 19904                                  DEVMDCH EQU     1               ;Media check
 19905                                  DMEDHL  EQU     15              ;Size of media check header
 19906                                  DEVBPB  EQU     2               ;Get BPB
 19907                                  DEVRDIOCTL EQU  3               ;IOCTL read
 19908                                  DBPBHL  EQU     22              ;Size of Get BPB header
 19909                                  DEVRD   EQU     4               ;Read
 19910                                  DRDWRHL EQU     22              ;Size of RD/WR header
 19911                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 19912                                  DRDNDHL EQU     14              ;Size of non destructive read header
 19913                                  DEVIST  EQU     6               ;Input status
 19914                                  DSTATHL EQU     13              ;Size of status header
 19915                                  DEVIFL  EQU     7               ;Input flush
 19916                                  ; 21/02/2024
 19917                                  ;DFLSHL EQU     15              ;Size of flush header
 19918                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 19919                                  DEVWRT  EQU     8               ;Write
 19920                                  DEVWRTV EQU     9               ;Write with verify
 19921                                  DEVOST  EQU     10              ;Output status
 19922                                  DEVOFL  EQU     11              ;Output flush
 19923                                  DEVWRIOCTL EQU  12              ;IOCTL write
 19924                                  
 19925                                  ; ----------------------------------------------------------------------
 19926                                  struc	SYS_FCB
 19927 00000000 ??                      .fcb_drive:	resb 1
 19928 00000001 ????????????????        .fcb_name:	resb 8
 19929 00000009 ??????                  .fcb_ext:	resb 3
 19930 0000000C ????                    .fcb_EXTENT:	resw 1
 19931 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 19932 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 19933                                                          ; word
 19934 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 19935 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 19936 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 19937 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 19938                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 19939                                                          ; If file, bit 6=0 if dirty
 19940                                                          ; If I/O device, bit 6=0 if EOF (input)
 19941                                                          ;               Bit 5=1 if Raw mode
 19942                                                          ;               Bit 0=1 if console input device
 19943                                                          ;               Bit 1=1 if console output device
 19944                                                          ;               Bit 2=1 if null device
 19945                                                          ;               Bit 3=1 if clock device
 19946 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 19947 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 19948 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 19949 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 19950 00000020 ??                      .fcb_NR:	resb 1	; Next record
 19951 00000021 ????????                .fcb_RR:	resb 4	; Random record
 19952                                  .size:
 19953                                  endstruc
 19954                                  
 19955                                  ; ----------------------------------------------------------------------
 19956                                  ; Field definition for I/O buffer information
 19957                                  
 19958                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 19959                                  
 19960                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 19961                                  
 19962                                  struc BUFFINFO
 19963 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 19964 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 19965 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 19966                                  				; SFT table index (bit 7 = 1)
 19967                                  				; = FFH if buffer free
 19968 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 19969                                  				;	= 0 if Local device buffer
 19970                                  				; Bit 6 = 1 if buffer dirty
 19971                                  				; Bit 5 = Reserved
 19972                                  				; Bit 4 = Search bit (bit 7 = 1)
 19973                                  				; Bit 3 = 1 if buffer is DATA
 19974                                  				; Bit 2 = 1 if buffer is DIR
 19975                                  				; Bit 1 = 1 if buffer is FAT
 19976                                  				; Bit 0 = Reserved
 19977 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 19978                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 19979 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 19980 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 19981 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19982                                  			   ; hw of sectors per FAT
 19983 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 19984 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 19985 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 19986 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19987                                  			   ; reserved word for dword boundary
 19988                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 19989                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 19990                                  endstruc
 19991                                  
 19992                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 19993                                  				;For buf_flags bit 7 = 1, this is the byte
 19994                                  				;offset of the start of the buffer in
 19995                                  				;the file pointed to by buf_ID. Thus
 19996                                  				;the buffer starts at location
 19997                                  				;buf_offset in the file and contains
 19998                                  				;buf_fill bytes.
 19999                                  
 20000                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 20001                                  
 20002                                  
 20003                                  buf_Free	equ	0FFh		; buf_id of free buffer
 20004                                  
 20005                                  ;Flag byte masks
 20006                                  buf_isnet	EQU	10000000B
 20007                                  buf_dirty	EQU	01000000B
 20008                                  ;***
 20009                                  buf_visit	EQU	00100000B
 20010                                  ;***
 20011                                  buf_snbuf	EQU	00010000B
 20012                                  
 20013                                  buf_isDATA	EQU	00001000B
 20014                                  buf_isDIR	EQU	00000100B
 20015                                  buf_isFAT	EQU	00000010B
 20016                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 20017                                  
 20018                                  buf_NetID	EQU	bufinsiz
 20019                                  
 20020                                  ; ----------------------------------------------------------------------
 20021                                  
 20022                                  ; ----------------------------------------------------------------------
 20023                                  ;**	DPB - Drive Parameter Block
 20024                                  
 20025                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 20026                                  
 20027                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 20028                                  ;	possibly inaccurate deductions from code study... - jgl
 20029                                  ;
 20030                                  ;	The DPB is DOS's main structure for describing block devices.
 20031                                  ;	It contains info about the "Drive" intermingled with info about
 20032                                  ;	the FAT file system which is presumably on the drive.  I don't know
 20033                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 20034                                  ;
 20035                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 20036                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 20037                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 20038                                  
 20039                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 20040                                  
 20041                                  ; 12/05/2019 - Retro DOS v4.0
 20042                                  
 20043                                  ; 01/01/2024
 20044                                  %if 0
 20045                                  
 20046                                  struc	DPB
 20047                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 20048                                  .UNIT:		resb 1		; Driver unit number of DPB
 20049                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 20050                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 20051                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 20052                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 20053                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 20054                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 20055                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 20056                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 20057                                  ; MSDOS 3.3
 20058                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 20059                                  ; MSDOS 6.0
 20060                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 20061                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 20062                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 20063                                  .MEDIA:		resb 1		; Media byte
 20064                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 20065                                  				; check the first time this DPB is used
 20066                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 20067                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 20068                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 20069                                  .size:
 20070                                  endstruc
 20071                                  
 20072                                  %else
 20073                                  
 20074                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 20075                                  
 20076                                  struc	DPB
 20077 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 20078 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 20079 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 20080 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 20081 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 20082 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 20083 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 20084 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 20085 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 20086 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 20087 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 20088 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 20089 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 20090 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 20091 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 20092                                  				; check the first time this DPB is used
 20093 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 20094 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 20095 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 20096                                  ; FAT32 fs ; 01/01/2024
 20097                                  ; ref: https://en.wikibooks.org/wiki/
 20098                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 20099                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 20100 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 20101 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 20102 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 20103 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 20104 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 20105 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 20106 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 20107 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 20108                                  ; 01/01/2024 - Retro DOS v5.0
 20109 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 20110                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 20111                                  endstruc
 20112                                  
 20113                                  %endif
 20114                                  
 20115                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 20116                                  
 20117                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 20118                                  
 20119                                  ; ----------------------------------------------------------------------
 20120                                  ; 26/03/2018
 20121                                  
 20122                                  ; IOCTL SUB-FUNCTIONS
 20123                                  IOCTL_GET_DEVICE_INFO	EQU	0
 20124                                  IOCTL_SET_DEVICE_INFO	EQU	1
 20125                                  IOCTL_READ_HANDLE	EQU	2
 20126                                  IOCTL_WRITE_HANDLE	EQU	3
 20127                                  IOCTL_READ_DRIVE	EQU	4
 20128                                  IOCTL_WRITE_DRIVE	EQU	5
 20129                                  IOCTL_GET_INPUT_STATUS	EQU	6
 20130                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 20131                                  IOCTL_CHANGEABLE?	EQU	8
 20132                                  IOCTL_SHARING_RETRY	EQU	11
 20133                                  GENERIC_IOCTL_HANDLE	EQU	12
 20134                                  GENERIC_IOCTL		EQU	13
 20135                                  
 20136                                  ; GENERIC IOCTL SUB-FUNCTIONS
 20137                                  RAWIO			EQU	8
 20138                                  
 20139                                  ; RAWIO SUB-FUNCTIONS
 20140                                  GET_DEVICE_PARAMETERS	EQU	60H
 20141                                  SET_DEVICE_PARAMETERS	EQU	40H
 20142                                  READ_TRACK		EQU	61H
 20143                                  WRITE_TRACK		EQU	41H
 20144                                  VERIFY_TRACK		EQU	62H
 20145                                  FORMAT_TRACK		EQU	42H
 20146                                  
 20147                                  ; DEVICETYPE VALUES
 20148                                  MAX_SECTORS_IN_TRACK	EQU	63
 20149                                  DEV_5INCH		EQU	0
 20150                                  DEV_5INCH96TPI		EQU	1
 20151                                  DEV_3INCH720KB		EQU	2
 20152                                  DEV_8INCHSS		EQU	3
 20153                                  DEV_8INCHDS		EQU	4
 20154                                  DEV_HARDDISK		EQU	5
 20155                                  DEV_OTHER		EQU	7
 20156                                  ;DEV_3INCH1440KB	EQU	7
 20157                                  DEV_3INCH2880KB		EQU	9
 20158                                  ; Retro DOS v2.0 - 26/03/2018
 20159                                  ;;DEV_TAPE		EQU	6
 20160                                  ;;DEV_ERIMO		EQU	8
 20161                                  ;DEV_3INCH2880KB	EQU	9
 20162                                  DEV_3INCH1440KB		EQU	10
 20163                                  
 20164                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 20165                                  					; CURRENTLY SUPPORT.
 20166                                  MAX_DEV_TYPE		EQU	10
 20167                                  
 20168                                  struc A_SECTORTABLE
 20169 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 20170 00000002 ????                    .ST_SECTORSIZE:		resw	1
 20171                                  .size:
 20172                                  endstruc
 20173                                  
 20174                                  ; ----------------------------------------------------------------------
 20175                                  ; structure, equates for devmark for mem command.
 20176                                  
 20177                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 20178                                  
 20179                                  struc devmark
 20180 00000000 ??                       .id:	    resb 1
 20181 00000001 ????                     .seg:	    resw 1
 20182 00000003 ????                     .size:	    resw 1
 20183 00000005 ??????                   .dum:	    resb 3
 20184 00000008 ????????????????         .filename: resb 8
 20185                                  endstruc
 20186                                  
 20187                                  devmark_stk	equ	'S'
 20188                                  devmark_device	equ	'D'
 20189                                  devmark_ifs	equ	'I'
 20190                                  devmark_buf	equ	'B'
 20191                                  devmark_cds	equ	'L' ; lastdrive
 20192                                  devmark_files	equ	'F'
 20193                                  devmark_fcbs	equ	'X'
 20194                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 20195                                  devmark_ems_stub equ	'E'
 20196                                  
 20197                                  setbrkdone	equ	00000001b
 20198                                  for_devmark	equ	00000010b
 20199                                  not_for_devmark equ	11111101b
 20200                                  
 20201                                  ; ----------------------------------------------------------------------
 20202                                  ; Memory arena structure
 20203                                  
 20204                                  ; 24/03/2019 - Retro DOS v4.0 
 20205                                  ; (MSDOS 6.0, ARENA.INC)
 20206                                  
 20207                                  ;** Arena Header
 20208                                  
 20209                                  struc ARENA
 20210 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 20211 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 20212 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 20213 00000005 ??????                  .RESERVED	resb 3		; reserved
 20214 00000008 ????????????????        .NAME:		resb 8		; owner file name
 20215                                  endstruc
 20216                                  
 20217                                  ; 12/04/2019
 20218                                  
 20219                                  arena_owner_system	EQU 0	; free block indication
 20220                                  
 20221                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 20222                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 20223                                  
 20224                                  ; ----------------------------------------------------------------------
 20225                                  ; Process data block (otherwise known as program header)
 20226                                  
 20227                                  ; 23/03/2019 - Retro DOS v4.0
 20228                                  
 20229                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 20230                                  
 20231                                  FILPERPROC	EQU     20
 20232                                  
 20233                                  struc PDB	; Process_data_block
 20234 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 20235 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 20236 00000004 ??                                      resb 1
 20237 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 20238 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 20239 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 20240 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 20241 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 20242 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 20243 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 20244 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 20245 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 20246 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 20247 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 20248 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 20249 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 20250 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 20251 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 20252 00000042 <res Eh>                .PAD1:		resb 14		; 	
 20253 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 20254 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 20255 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 20256 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 20257 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 20258 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 20259                                  ;.size:
 20260                                  endstruc
 20261                                  
 20262                                  ; ----------------------------------------------------------------------
 20263                                  ; <system call definitions>
 20264                                  
 20265                                  ; 23/03/2019 - Retro DOS v4.0
 20266                                  
 20267                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 20268                                  
 20269                                  ABORT                           EQU 0   ;  0      0
 20270                                  STD_CON_INPUT                   EQU 1   ;  1      1
 20271                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 20272                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 20273                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 20274                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 20275                                  RAW_CON_IO                      EQU 6   ;  6      6
 20276                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 20277                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 20278                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 20279                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 20280                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 20281                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 20282                                  DISK_RESET                      EQU 13  ; 13      D
 20283                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 20284                                  FCB_OPEN                        EQU 15  ; 15      F
 20285                                  FCB_CLOSE                       EQU 16  ; 16     10
 20286                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 20287                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 20288                                  FCB_DELETE                      EQU 19  ; 19     13
 20289                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 20290                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 20291                                  FCB_CREATE                      EQU 22  ; 22     16
 20292                                  FCB_RENAME                      EQU 23  ; 23     17
 20293                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 20294                                  SET_DMA                         EQU 26  ; 26     1A
 20295                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 20296                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 20297                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 20298                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 20299                                  GET_FCB_POSITION                EQU 36  ; 36     24
 20300                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 20301                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 20302                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 20303                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 20304                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 20305                                  GET_DATE                        EQU 42  ; 42     2A
 20306                                  SET_DATE                        EQU 43  ; 43     2B
 20307                                  GET_TIME                        EQU 44  ; 44     2C
 20308                                  SET_TIME                        EQU 45  ; 45     2D
 20309                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 20310                                  ; Extended functionality group
 20311                                  GET_DMA                         EQU 47  ; 47     2F
 20312                                  GET_VERSION                     EQU 48  ; 48     30
 20313                                  KEEP_PROCESS                    EQU 49  ; 49     31
 20314                                  GET_DPB                         EQU 50  ; 50     32
 20315                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 20316                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 20317                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 20318                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 20319                                  CHAR_OPER                       EQU 55  ; 55     37
 20320                                  INTERNATIONAL                   EQU 56  ; 56     38
 20321                                  ;   Directory Group
 20322                                  MKDIR                           EQU 57  ; 57     39
 20323                                  RMDIR                           EQU 58  ; 58     3A
 20324                                  CHDIR                           EQU 59  ; 59     3B
 20325                                  ;   File Group
 20326                                  CREAT                           EQU 60  ; 60     3C
 20327                                  OPEN                            EQU 61  ; 61     3D
 20328                                  CLOSE                           EQU 62  ; 62     3E
 20329                                  READ                            EQU 63  ; 63     3F
 20330                                  WRITE                           EQU 64  ; 64     40
 20331                                  UNLINK                          EQU 65  ; 65     41
 20332                                  LSEEK                           EQU 66  ; 66     42
 20333                                  CHMOD                           EQU 67  ; 67     43
 20334                                  IOCTL                           EQU 68  ; 68     44
 20335                                  XDUP                            EQU 69  ; 69     45
 20336                                  XDUP2                           EQU 70  ; 70     46
 20337                                  CURRENT_DIR                     EQU 71  ; 71     47
 20338                                  ;    Memory Group
 20339                                  ALLOC                           EQU 72  ; 72     48
 20340                                  DEALLOC                         EQU 73  ; 73     49
 20341                                  SETBLOCK                        EQU 74  ; 74     4A
 20342                                  ;    Process Group
 20343                                  EXEC                            EQU 75  ; 75     4B
 20344                                  EXIT                            EQU 76  ; 76     4C
 20345                                  WAITPROCESS			EQU 77  ; 77     4D
 20346                                  FIND_FIRST                      EQU 78  ; 78     4E
 20347                                  ;   Special Group
 20348                                  FIND_NEXT                       EQU 79  ; 79     4F
 20349                                  ; SPECIAL SYSTEM GROUP
 20350                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 20351                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 20352                                  GET_IN_VARS                     EQU 82  ; 82     52
 20353                                  SETDPB                          EQU 83  ; 83     53
 20354                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 20355                                  DUP_PDB                         EQU 85  ; 85     55
 20356                                  RENAME                          EQU 86  ; 86     56
 20357                                  FILE_TIMES                      EQU 87  ; 87     57
 20358                                  ;
 20359                                  ALLOCOPER			EQU 88	; 88     58	
 20360                                  ; Network extention system calls
 20361                                  GetExtendedError		EQU 89	; 89	 59
 20362                                  CreateTempFile			EQU 90	; 90	 5A
 20363                                  CreateNewFile			EQU 91	; 91	 5B
 20364                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 20365                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 20366                                  					;	    CloseByName, CloseUser,
 20367                                  					;	    CloseUserProcess,
 20368                                  					;	    GetOpenFileList
 20369                                  UserOper			EQU 94	; 94	 5E Get and Set
 20370                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 20371                                  xNameTrans			EQU 96	; 96	 60
 20372                                  PathParse			EQU 97	; 97	 61
 20373                                  GetCurrentPSP			EQU 98	; 98	 62
 20374                                  Hongeul 			EQU 99	; 99	 63
 20375                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 20376                                  Set_Printer_Flag		EQU 100 ; 100	 64
 20377                                  GetExtCntry			EQU 101 ; 101	 65
 20378                                  GetSetCdPg			EQU 102 ; 102	 66
 20379                                  ExtHandle			EQU 103 ; 103	 67
 20380                                  Commit				EQU 104 ; 104	 68
 20381                                  GetSetMediaID			EQU 105 ; 105	 69
 20382                                  IFS_IOCTL			EQU 107 ; 107	 6B
 20383                                  ExtOpen 			EQU 108 ; 108	 6C
 20384                                  ;
 20385                                  ;ifdef ROMEXEC
 20386                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 20387                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 20388                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 20389                                  ;endif
 20390                                  ;
 20391                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 20392                                  OEM_C1				EQU 249 ; 249	 F9
 20393                                  OEM_C2				EQU 250 ; 250	 FA
 20394                                  OEM_C3				EQU 251 ; 251	 FB
 20395                                  OEM_C4				EQU 252 ; 252	 FC
 20396                                  OEM_C5				EQU 253 ; 253	 FD
 20397                                  OEM_C6				EQU 254 ; 254	 FE
 20398                                  OEM_C7				EQU 255 ; 255	 FF
 20399                                  
 20400                                  ; ----------------------------------------------------------------------
 20401                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 20402                                  ; ----------------------------------------------------------------------
 20403                                  
 20404                                  ;;	IF	STACKSW
 20405                                  
 20406                                  ;;
 20407                                  ;; Internal Stack Parameters
 20408                                  ;EntrySize		equ	8
 20409                                  ;
 20410                                  ;MinCount		equ	8
 20411                                  ;DefaultCount		equ	9
 20412                                  ;MaxCount		equ	64
 20413                                  ;
 20414                                  ;MinSize 		equ	32
 20415                                  ;DefaultSize		equ	128
 20416                                  ;MaxSize 		equ	512
 20417                                  
 20418                                  ;;	ENDIF
 20419                                  
 20420                                  ; ----------------------------------------------------------------------
 20421                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 20422                                  ; ----------------------------------------------------------------------
 20423                                  					  ;;Rev 3.30 Modification
 20424                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 20425                                  									  
 20426                                  ;*******************************					  
 20427                                  ;System Service call ( Int 15h )					  
 20428                                  ;*******************************					  
 20429                                  ;Function AH = 0C0h, Return system configuration			  
 20430                                  ;For PC and PCJR on return:						  
 20431                                  ;	(AH)	= 80h							  
 20432                                  ;	(CY)	= 1							  
 20433                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 20434                                  ;	(AH)	= 86h							  
 20435                                  ;	(CY)	= 1							  
 20436                                  ;For all others:							  
 20437                                  ;	(AH)	= 0							  
 20438                                  ;	(CY)	= 0							  
 20439                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 20440                                  ; System descriptor :							  
 20441                                  ;	DW	xxxx		length of descriptor in bytes,		  
 20442                                  ;				minimum length = 8			  
 20443                                  ;	DB	xx		model byte				  
 20444                                  ;				0FFh	= PC				  
 20445                                  ;				0FEh	= PC/XT, Portable		  
 20446                                  ;				0FDh	= PC/JR 			  
 20447                                  ;				0FCh	= PC/AT				  
 20448                                  ;				0F9h	= Convertable			  
 20449                                  ;				0F8h	= Model 80			  
 20450                                  ;				0E0 thru 0EFh = reserved		  
 20451                                  ;									  
 20452                                  ;	DB	xx		secondary model byte			  
 20453                                  ;				000h	= PC1				  
 20454                                  ;				000h	= PC/XT, Portable		  
 20455                                  ;				000h	= PC/JR 			  
 20456                                  ;				000h	= PC/AT 			  
 20457                                  ;				001h	= PC/AT Model 339		  
 20458                                  ;				003h	= PC/RT				  
 20459                                  ;				000h	= Convertable			  
 20460                                  ;									  
 20461                                  ;	DB	xx		bios revision level			  
 20462                                  ;				00 for first release, subsequent release  
 20463                                  ;				of code with same model byte and	  
 20464                                  ;				secondary model byte require revison level
 20465                                  ;				to increase by one.			  
 20466                                  ;									  
 20467                                  ;	DB	xx		feature information byte 1		  
 20468                                  ;				X0000000 = 1, bios use DMA channel 3	  
 20469                                  ;					 = 0, DMA channel 3 not used	  
 20470                                  ;									  
 20471                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 20472                                  ;					 = 0, 2nd Interrupt chip not present
 20473                                  ;									  
 20474                                  ;				00X00000 = 1, Real Time Clock present	  
 20475                                  ;					 = 0, Real Time Clock not present 
 20476                                  ;									  
 20477                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 20478                                  ;						called in keyboard interrupt
 20479                                  ;						(Int 09h).		  
 20480                                  ;					 = 0, Keyboard escape sequence not
 20481                                  ;						called. 		  
 20482                                  ;				0000XXXX reserved			  
 20483                                  ;									  
 20484                                  ;	DB	xx		feature information byte 2 - reserved	  
 20485                                  ;									  
 20486                                  ;	DB	xx		feature information byte 2 - reserved	  
 20487                                  ;									  
 20488                                  ;	DB	xx		feature information byte 2 - reserved	  
 20489                                  ;									  
 20490                                  ;	DB	xx		feature information byte 2 - reserved	  
 20491                                  ;									  
 20492                                  
 20493                                  ; 22/03/2019
 20494                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 20495 00000000 ????                    .bios_sd_leng:		resw 1
 20496 00000002 ??                      .bios_sd_modelbyte:	resb 1
 20497                                  .bios_sd_scnd_modelbyte: 
 20498 00000003 ??                      			resb 1
 20499 00000004 ??                      			resb 1
 20500 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 20501 00000006 ????????                			resb 4
 20502                                  endstruc
 20503                                  
 20504                                  ;FeatureByte1	bit map equates
 20505                                  DMAchannel3		equ 10000000b
 20506                                  ScndIntController	equ 01000000b
 20507                                  RealTimeClock		equ 00100000b
 20508                                  KeyEscapeSeq		equ 00010000b
 20509                                  					;;End of Modification
 20510                                  
 20511                                  ; ----------------------------------------------------------------------
 20512                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 20513                                  ; ----------------------------------------------------------------------
 20514                                  ; 22/03/2019 - Retro DOS v4.0
 20515                                  
 20516                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 20517                                  
 20518                                  struc SysInitVars
 20519                                  ; MSDOS 3.3
 20520 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 20521 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 20522 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 20523 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 20524 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 20525 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 20526 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 20527 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 20528 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 20529 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 20530 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 20531 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 20532                                  ; MSDOS 6.0
 20533 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 20534 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 20535 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 20536 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 20537                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 20538 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 20539 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 20540 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 20541 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 20542 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 20543 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 20544 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 20545                                  .size:
 20546                                  endstruc
 20547                                  
 20548                                  ;This is added for more information exchage between DOS, BIOS.
 20549                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 20550                                  
 20551                                  ; 22/03/2019
 20552                                  struc SysInitVars_Ext
 20553 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 20554 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 20555                                  endstruc
 20556                                  
 20557                                  ; 09/06/2018
 20558                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 20559                                  SYSI_DPB    equ	0
 20560                                  SYSI_SFT    equ 4
 20561                                  SYSI_CLOCK  equ 8
 20562                                  SYSI_CON    equ 12
 20563                                  SYSI_MAXSEC equ 16
 20564                                  SYSI_BUF    equ 18
 20565                                  SYSI_CDS    equ 22
 20566                                  SYSI_FCB    equ 26
 20567                                  SYSI_KEEP   equ 30
 20568                                  SYSI_NUMIO  equ	32
 20569                                  SYSI_NCDS   equ	33
 20570                                  SYSI_DEV    equ 34
 20571                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 20572                                  SYSI_ATTR	  equ 38
 20573                                  SYSI_STRAT	  equ 40
 20574                                  SYSI_INTER	  equ 42
 20575                                  SYSI_NAME	  equ 44
 20576                                  SYSI_SPLICE	  equ 52
 20577                                  SYSI_IBMDOS_SIZE  equ 53
 20578                                  SYSI_IFS_DOSCALL@ equ 55
 20579                                  SYSI_IFS	  equ 59
 20580                                  SYSI_BUFFERS	  equ 63
 20581                                  SYSI_BOOT_DRIVE   equ 67
 20582                                  SYSI_DWMOVE	  equ 68
 20583                                  SYSI_EXT_MEM	  equ 69
 20584                                  
 20585                                  ;The SYSI_BUF of SysInitVars points to the following structure
 20586                                  
 20587                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 20588                                  
 20589                                  struc BUFFINF 	; BUFFINFO
 20590 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 20591 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 20592 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 20593 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 20594                                  
 20595 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 20596                                  				; are in HMA
 20597 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 20598                                  				;  used to read/write on disks
 20599 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 20600 00000015 ????                    .UU_EMS_NPA640:		resw 1
 20601 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 20602 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 20603 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 20604 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 20605 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 20606 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 20607 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 20608                                  .size:
 20609                                  endstruc
 20610                                  
 20611                                  ; ----------------------------------------------------------------------
 20612                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 20613                                  ; ----------------------------------------------------------------------
 20614                                  ; 22/03/2019 - Retro DOS v4.0
 20615                                  
 20616                                  ;**	CDS - Current Directory Structure
 20617                                  ;
 20618                                  ; CDS items are used bu the internal routines to store cluster numbers and
 20619                                  ; network identifiers for each logical name.  The ID field is used dually,
 20620                                  ; both as net ID and for a cluster number for local devices. In the case
 20621                                  ; of local devices, the cluster number will be -1 if there is a potential
 20622                                  ; of the disk being changed or if the path must be recracked.
 20623                                  ;
 20624                                  ;	Some pathnames have special preambles, such as
 20625                                  ;
 20626                                  ;		\\machine\sharename\...
 20627                                  ;	For these pathnames we can't allow ".." processing to back us
 20628                                  ;	up into the special front part of the name.  The CURDIR_END field
 20629                                  ;	holds the address of the seperator character which marks
 20630                                  ;	the split between the special preamble and the regular
 20631                                  ;	path list; ".." processing isn't allowed to back us up past
 20632                                  ;	(i.e., before) CURDIR_END
 20633                                  ;	For the root, it points at the leading /. For net
 20634                                  ;	assignments it points at the end (nul) of the initial assignment:
 20635                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 20636                                  ;	  ^		 ^		     ^
 20637                                  
 20638                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 20639                                  TEMPLEN 	EQU	DIRSTRLEN*2
 20640                                  
 20641                                  struc 		curdir_list
 20642                                  ; MSDOS 3.3
 20643 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 20644 00000043 ????                    .cdir_flags	resw	1		; various flags
 20645 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 20646 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 20647 0000004D ????                    .cdir_usr_word	resw	1
 20648 0000004F ????                    .cdir_end	resw	1		; end of assignment
 20649                                  ; MSDOS 6.0
 20650 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 20651 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 20652 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 20653                                  .size:
 20654                                  endstruc
 20655                                  
 20656                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 20657                                  						; ASM87 which doesn't allow
 20658                                  						; Size directive as a macro
 20659                                  						; argument
 20660                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 20661                                  
 20662                                  ;**	Flag values for CURDIR_FLAGS
 20663                                  
 20664                                  ;Flag word masks
 20665                                  curdir_isnet	EQU	1000000000000000B
 20666                                  curdir_isifs	EQU	1000000000000000B
 20667                                  curdir_inuse	EQU	0100000000000000B
 20668                                  curdir_splice	EQU	0010000000000000B
 20669                                  curdir_local	EQU	0001000000000000B
 20670                                  
 20671                                  ; ----------------------------------------------------------------------
 20672                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 20673                                  ; ----------------------------------------------------------------------
 20674                                  ; 25/03/2019 - Retro DOS v4.0
 20675                                  
 20676                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 20677                                  ; 09/04/2024 - Retro DOS v5.0
 20678                                  
 20679                                  ; system file table
 20680                                  
 20681                                  ;**	System File Table SuperStructure
 20682                                  ;
 20683                                  ;	The system file table entries are allocated in contiguous groups.
 20684                                  ;	There may be more than one such groups; the SF "superstructure"
 20685                                  ;	tracks the groups.
 20686                                  
 20687                                  struc	SF
 20688 00000000 ????????                .SFLink:	resd	1
 20689 00000004 ????                    .SFCount:	resw	1		; number of entries
 20690 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 20691                                  .size:
 20692                                  endstruc
 20693                                  
 20694                                  ;**	System file table entry
 20695                                  ;
 20696                                  ;	These are the structures which are at SFTABLE in the SF structure.
 20697                                  
 20698                                  struc	SF_ENTRY
 20699 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 20700                                  					;   if FCB then ref count
 20701 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 20702 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 20703 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 20704                                  					; Bit 15 = 1 if remote file
 20705                                  					;	 = 0 if local file or device
 20706                                  					; Bit 14 = 1 if date/time is not to be
 20707                                  					;   set from clock at CLOSE.  Set by
 20708                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 20709                                  					;   other reseters of the dirty bit
 20710                                  					;   (WRITE)
 20711                                  					; Bit 13 = Pipe bit (reserved)
 20712                                  					;
 20713                                  					; Bits 0-7 (old FCB_devid bits)
 20714                                  					; If remote file or local file, bit
 20715                                  					; 6=0 if dirty Device ID number, bits
 20716                                  					; 0-5 if local file.
 20717                                  					; bit 7=0 for local file, bit 7
 20718                                  					;      =1 for local I/O device
 20719                                  					; If local I/O device, bit 6=0 if EOF (input)
 20720                                  					;		Bit 5=1 if Raw mode
 20721                                  					;		Bit 0=1 if console input device
 20722                                  					;		Bit 1=1 if console output device
 20723                                  					;		Bit 2=1 if null device
 20724                                  					;		Bit 3=1 if clock device
 20725 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 20726                                  					; to device header if local device,
 20727                                  					; points to net device header if
 20728                                  					; remote
 20729 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 20730                                  ;.sf_lstclus:	resw	1 ; *	
 20731 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 20732 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 20733 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 20734 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 20735                                  ;
 20736                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 20737                                  ; ID
 20738                                  ;
 20739 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 20740 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 20741 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 20742                                  ;
 20743                                  ; End of 7 bytes of file-system specific info.
 20744                                  ;
 20745 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 20746                                  					; directory entry.  This is used by
 20747                                  					; close to detect file deleted and
 20748                                  					; disk changed errors.
 20749                                  ; SHARING INFO
 20750 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 20751 0000002F ????                    .sf_UID:	resw	1
 20752 00000031 ????                    .sf_PID:	resw	1
 20753 00000033 ????                    .sf_MFT:	resw	1
 20754 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 20755 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 20756                                  .size:
 20757                                  endstruc
 20758                                  
 20759                                  ; ----------------------------------------------------------------------
 20760                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 20761                                  ; ----------------------------------------------------------------------
 20762                                  ; 11/06/2018 - Retro DOS v3.0
 20763                                  
 20764                                  ;Equates for COUNTRY INFORMATION.
 20765                                  SetCountryInfo		EQU	1	;country info
 20766                                  SetUcase		EQU	2	;uppercase table
 20767                                  SetLcase		EQU	3	;lowercase table (Reserved)
 20768                                  SetUcaseFile		EQU	4	;uppercase file spec table
 20769                                  SetFileList		EQU	5	;valid file character list
 20770                                  SetCollate		EQU	6	;collating sequence
 20771                                  SetDBCS 		EQU	7	;double byte character set
 20772                                  SetALL			EQU	-1	;all the entries
 20773                                  
 20774                                  ;DOS country and code page information table structure.
 20775                                  ;Internally, IBMDOS gives a pointer to this table.
 20776                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 20777                                  ;this structure.
 20778                                  
 20779                                  struc country_cdpg_info ; DOS_country_cdpg_info
 20780 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 20781 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 20782 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 20783 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 20784 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 20785 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 20786                                  
 20787 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 20788 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 20789                                  
 20790 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 20791 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 20792                                  
 20793 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 20794 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 20795                                  
 20796 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 20797 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 20798 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 20799 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 20800 00000067 ????                    .ccDFormat:		resw	1	;date format
 20801 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 20802                                  					;5 byte of (currency symbol+0)
 20803 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 20804 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 20805 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 20806 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 20807 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 20808 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 20809 00000078 ??                      .ccTFormat:		resb	1	;time format
 20810 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 20811 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 20812 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 20813                                  .size:
 20814                                  endstruc
 20815                                  
 20816                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 20817                                  
 20818                                  ; ======================================================================
 20819                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 20820                                  ; ======================================================================
 20821                                  ; 21/03/2019 - Retro DOS v4.0
 20822                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20823                                  
 20824                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 20825                                  ; 21/10/2022
 20826                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 20827                                  ; 22/10/2022
 20828                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 20829                                  ; 09/12/2022
 20830                                  DOSBIOCODESEG equ IOSYSCODESEG
 20831                                  
 20832                                  ; Note: These offset addresses must be chanqed when the code 
 20833                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 20834                                  
 20835                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 20836                                  
 20837                                  ; 09/12/2022
 20838                                  %if 0
 20839                                  
 20840                                  ; 13/05/2019
 20841                                  
 20842                                  ;IsWin386         equ 08CFh
 20843                                  ;V86_Crit_SetFocus equ 08D0h
 20844                                  ; 21/10/2022
 20845                                  IsWin386          equ 08D0h
 20846                                  V86_Crit_SetFocus equ 08D1h 
 20847                                  
 20848                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 20849                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20850                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 20851                                  
 20852                                  ;SysinitPresent	  equ 08FCh
 20853                                  ; 21/10/2022
 20854                                  SysinitPresent	  equ 08FDh
 20855                                  
 20856                                  inHMA		  equ 000Dh
 20857                                  xms		  equ 000Eh
 20858                                  ;FreeHMAPtr	  equ 08F6h
 20859                                  ;multrk_flag	  equ 0533h
 20860                                  ;ec35_flag	  equ 0535h
 20861                                  ;EOT		  equ 012Eh
 20862                                  ; 21/10/2022
 20863                                  FreeHMAPtr	  equ 08F7h
 20864                                  multrk_flag	  equ 052Fh
 20865                                  ec35_flag	  equ 0531h
 20866                                  EOT		  equ 012Ch
 20867                                  
 20868                                  ;NextStack	  equ 08BFh
 20869                                  ;IT_StackLoc	  equ 08C5h
 20870                                  ;IT_StackSize	  equ 08C9h
 20871                                  ; 21/10/2022
 20872                                  NextStack	  equ 08C0h
 20873                                  IT_StackLoc	  equ 08C6h
 20874                                  IT_StackSize	  equ 08CAh
 20875                                  
 20876                                  ;MoveDOSIntoHMA	  equ 08F8h
 20877                                  ; 21/10/2022
 20878                                  MoveDOSIntoHMA	  equ 08F9h
 20879                                  
 20880                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 20881                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 20882                                  ; 21/10/2022
 20883                                  INT19SEM equ 0640h ; (iosys5.txt)
 20884                                  I19_LST  equ 0641h ; (iosys5.txt)
 20885                                  
 20886                                  %endif
 20887                                  
 20888                                  ; 09/12/2022
 20889                                  seg_reinit equ _seg_reinit
 20890                                  ec35_flag  equ ec35flag
 20891                                  INT19SEM   equ int19sem
 20892                                  I19_LST    equ i19_lst
 20893                                  
 20894                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 20895                                  INT19OLD08 equ I19_LST+6
 20896                                  INT19OLD09 equ I19_LST+11
 20897                                  INT19OLD0A equ I19_LST+16
 20898                                  INT19OLD0B equ I19_LST+21
 20899                                  INT19OLD0C equ I19_LST+26
 20900                                  INT19OLD0D equ I19_LST+31
 20901                                  INT19OLD0E equ I19_LST+36
 20902                                  INT19OLD70 equ I19_LST+41
 20903                                  INT19OLD72 equ I19_LST+46
 20904                                  INT19OLD73 equ I19_LST+51
 20905                                  INT19OLD74 equ I19_LST+56
 20906                                  INT19OLD76 equ I19_LST+61
 20907                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 20908                                  
 20909                                  ; 09/12/2022
 20910                                  %if 0
 20911                                  
 20912                                  ;keyrd_func	equ 04E9h
 20913                                  ;keysts_func	equ 04EAh
 20914                                  ;t_switch	equ 04F6h
 20915                                  ; 21/10/2022
 20916                                  keyrd_func	equ 04E5h
 20917                                  keysts_func	equ 04E6h
 20918                                  t_switch	equ 04F2h
 20919                                  
 20920                                  ; 22/10/2022
 20921                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 20922                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 20923                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 20924                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 20925                                  
 20926                                  %endif
 20927                                  
 20928                                  ; 09/12/2022
 20929                                  BCODESTART	equ BIOSDATAWORD
 20930                                  RE_INIT		equ re_init
 20931                                  
 20932                                  ; ----------------------------------------------------------------------
 20933                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 20934                                  ; ----------------------------------------------------------------------
 20935                                  ; 15/04/2019 - Retro DOS v4.0
 20936                                  
 20937                                  CONFIG_BEGIN        equ  '['
 20938                                  CONFIG_BREAK        equ  'C'
 20939                                  CONFIG_BUFFERS      equ  'B'
 20940                                  CONFIG_COMMENT      equ  'Y'
 20941                                  CONFIG_COUNTRY      equ  'Q'
 20942                                  CONFIG_DEVICE       equ  'D'
 20943                                  CONFIG_DEVICEHIGH   equ  'U'
 20944                                  CONFIG_DOS          equ  'H'
 20945                                  CONFIG_DRIVPARM     equ  'P'
 20946                                  CONFIG_FCBS         equ  'X'
 20947                                  CONFIG_FILES        equ  'F'
 20948                                  CONFIG_INCLUDE      equ  'J'
 20949                                  CONFIG_INSTALL      equ  'I'
 20950                                  CONFIG_INSTALLHIGH  equ  'W'
 20951                                  CONFIG_LASTDRIVE    equ  'L'
 20952                                  CONFIG_MENUCOLOR    equ  'R'
 20953                                  CONFIG_MENUDEFAULT  equ  'A'
 20954                                  CONFIG_MENUITEM     equ  'E'
 20955                                  CONFIG_MULTITRACK   equ  'M'
 20956                                  CONFIG_NUMLOCK      equ  'N'
 20957                                  CONFIG_REM          equ  '0'
 20958                                  CONFIG_SEMICOLON    equ  ';'
 20959                                  CONFIG_SET          equ  'V'
 20960                                  CONFIG_SHELL        equ  'S'
 20961                                  CONFIG_STACKS       equ  'K'
 20962                                  CONFIG_SUBMENU      equ  'O'
 20963                                  CONFIG_SWITCHES     equ  '1'
 20964                                  
 20965                                  CONFIG_UNKNOWN      equ  'Z'
 20966                                  
 20967                                  ; 18/03/2025 - MiniDOS v1.0
 20968                                  ; 13/05/2024 - Retro DOS v5.0 (PCDOS 71 IBMBIO.COM)
 20969                                  ;CONFIG_DOSDATA      equ  'T'
 20970                                  
 20971                                  CONFIG_OPTION_QUERY equ 80h
 20972                                  
 20973                                  ; ----------------------------------------------------------------------
 20974                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 20975                                  ; ----------------------------------------------------------------------
 20976                                  ; 21/03/2019 - Retro DOS v4.0
 20977                                  
 20978                                  true	equ	0FFFFh
 20979                                  false	equ	0
 20980                                  cr	equ	13
 20981                                  lf	equ	10
 20982                                  tab	equ	9
 20983                                  
 20984                                  multMULT	   equ	4Ah
 20985                                  multMULTGETHMAPTR  equ	1
 20986                                  multMULTALLOCHMA   equ	2
 20987                                  
 20988                                  ;NOEXEC    equ	FALSE
 20989                                  
 20990                                  stacksw    equ	true	;include switchable hardware stacks
 20991                                  mycds_size equ	88	;size of curdir_list. if it is not
 20992                                  			;the same, then will generate compile error.
 20993                                  
 20994                                  entrysize   equ     8
 20995                                  
 20996                                  mincount    equ     8
 20997                                  defaultcount equ    9
 20998                                  maxcount    equ     64
 20999                                  
 21000                                  minsize     equ     32
 21001                                  defaultsize equ     128
 21002                                  maxsize     equ     512
 21003                                  
 21004                                  ;%define allocbyte  byte [es:bp+0]
 21005                                  ;%define intlevel   byte [es:bp+1]
 21006                                  ;%define savedsp    word [es:bp+2]
 21007                                  ;%define savedss    word [es:bp+4]
 21008                                  ;%define newsp	    word [es:bp+6]
 21009                                  
 21010                                  allocbyte   equ     0
 21011                                  intlevel    equ     1
 21012                                  savedsp     equ     2
 21013                                  savedss     equ     4
 21014                                  newsp       equ     6
 21015                                  
 21016                                  free	    equ     0
 21017                                  allocated   equ     1
 21018                                  overflowed  equ     2
 21019                                  clobbered   equ     3
 21020                                  
 21021                                  ;---------------------------------------
 21022                                  ; external variable defined in ibmbio module for multi-track
 21023                                  
 21024                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 21025                                  			  ; it on after handling config.sys file as a
 21026                                  			  ; default value,if multrk_flag = multrk_off1.
 21027                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 21028                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 21029                                  
 21030                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 21031                                  
 21032                                  SYSINIT$:
 21033                                  	;IF	STACKSW 
 21034                                  	; include MSSTACK.INC	;Main stack program and data definitions
 21035                                  	; include STKMES.INC	;Fatal stack error message
 21036                                  	;   public Endstackcode
 21037                                  ;Endstackcode	label byte
 21038                                  	;ENDIF
 21039                                  
 21040                                  ; 05/07/2018
 21041                                  ; ----------------------------------------------------------------------
 21042                                  ; 04/06/2018 - Retro DOS v3.0
 21043                                  
 21044                                  ; ----------------------------------------------------------------------
 21045                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 21046                                  ; ----------------------------------------------------------------------
 21047                                  
 21048                                  ;	MSStack.inc
 21049                                  ;
 21050                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 21051                                  ;	should follow the standard Interrupt Sharing Scheme which has
 21052                                  ;	a standard header structure.
 21053                                  ;	Fyi, the following shows the relations between
 21054                                  ;	the interrupt vector and interrupt level.
 21055                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 21056                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 21057                                  ;	MSSTACK module modifies the following interrupt vectors
 21058                                  ;	to meet the standard Interrupt Sharing standard;
 21059                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 21060                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 21061                                  ;	should be initialized to indicat whether this interrupt handler is
 21062                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 21063                                  ;	program header is initialized in STKINIT.INC module.
 21064                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 21065                                  ;
 21066                                  
 21067                                  ;  User specifies the number of stack elements - default = 9
 21068                                  ;						 minimum = 8
 21069                                  ;						 maximum = 64
 21070                                  ;
 21071                                  ;  Intercepts Asynchronous Hardware Interrupts only
 21072                                  ;
 21073                                  ;  Picks a stack from pool of stacks and switches to it
 21074                                  ;
 21075                                  ;  Calls the previously saved interrupt vector after pushing flags
 21076                                  ;
 21077                                  ;  On return, returns the stack to the stack pool
 21078                                  ;
 21079                                  
 21080                                  ; This is a modification of STACKS:
 21081                                  ; 1. To fix a bug which was causing the program to take up too much space.
 21082                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 21083                                  ;    . Clobbers the stack that got too big instead of innocent stack
 21084                                  ;    . Allows system to work if the only stack that got too big was the most
 21085                                  ;      deeply nested one
 21086                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 21087                                  ; 4. Does not intercept any interrupts on a PCjr.
 21088                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 21089                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 21090                                  
 21091                                  		;EVEN
 21092                                  ;align 2
 21093                                  		; 21/10/2022
 21094                                  
 21095 00000000 0000                    		dw	0	; spare field but leave these in order
 21096 00000002 0000                    stackcount:	dw	0
 21097 00000004 0000                    stackat: 	dw	0
 21098 00000006 0000                    stacksize:	dw	0
 21099 00000008 0000                    stacks:		dw	0
 21100 0000000A 0000                    		dw	0
 21101                                  
 21102 0000000C [0800]                  firstentry:	dw	stacks
 21103 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21104 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21105                                  
 21106                                  ;***********************************************************************
 21107                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 21108                                  
 21109                                  ; ----------------------------------------------------------------------
 21110                                  
 21111 00000012 00000000                old02:	dd	0
 21112                                  
 21113                                  int02:
 21114                                  
 21115                                  ; *********************************************************************
 21116                                  ;
 21117                                  ; this is special support for the pc convertible / nmi handler
 21118                                  ;
 21119                                  ;	on the pc convertible, there is a situation where an nmi can be 
 21120                                  ;	caused by using the "out" instructions to certain ports. when this
 21121                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 21122                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 21123                                  ;	includes other type of interrupts (hardware and software), and
 21124                                  ;	also includes other type of nmi's. when any nmi has occured,
 21125                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 21126                                  ;	the software takes specific steps to allow further interrupting.
 21127                                  ;
 21128                                  ;	for pc convertible, the situation where the nmi is generated by the
 21129                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 21130                                  ;	otherwords, it is actually a "restartable exception". in this
 21131                                  ;	case, the software handler must be able to get to the stack in
 21132                                  ;	order to figure out what instruction caused the problem, where
 21133                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 21134                                  ;	we will not switch stacks in this situation. this situation is
 21135                                  ;	detected by interrogating port 62h, and checking for a bit value
 21136                                  ;	of 80h. if set, *****do not switch stacks*****.
 21137                                  ;
 21138                                  ; *********************************************************************
 21139                                  
 21140 00000016 50                      	push	ax
 21141 00000017 06                      	push	es
 21142 00000018 B800F0                  	mov	ax,0F000h
 21143 0000001B 8EC0                    	mov	es,ax
 21144                                  	; 02/11/2022
 21145 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 21146 00000023 07                      	pop	es
 21147 00000024 750C                    	jne	short normal02
 21148                                  
 21149 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 21150                                  				; 0-3: values of DIP switches
 21151                                  				; 5: 1=Timer 2 channel out
 21152                                  				; 6: 1=I/O channel check
 21153                                  				; 7: 1=RAM parity check error occurred.
 21154 00000028 A880                    	test	al,80h
 21155 0000002A 7406                    	jz	short normal02
 21156                                  special02:
 21157 0000002C 58                      	pop	ax
 21158 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 21159                                  normal02:
 21160 00000032 58                      	pop	ax
 21161 00000033 E81101                  	call	do_int_stacks
 21162 00000036 [1200]                  	dw	old02
 21163                                  
 21164                                  ; ----------------------------------------------------------------------
 21165                                  
 21166 00000038 00000000                old08:	dd	0
 21167                                  
 21168                                  int08:
 21169 0000003C E80801                  	call	do_int_stacks
 21170 0000003F [3800]                  	dw	old08
 21171                                  
 21172                                  ; ----------------------------------------------------------------------
 21173                                  
 21174 00000041 00000000                old09:	dd	0
 21175                                  
 21176                                  int09:
 21177                                  
 21178                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 21179                                  ; as its first instruction for compatibility reasons
 21180                                  
 21181 00000045 EB02                    	jmp	short keyboard_lbl
 21182 00000047 90                      	nop
 21183 00000048 00                      	db	0
 21184                                  
 21185                                  keyboard_lbl:
 21186 00000049 E8FB00                  	call	do_int_stacks
 21187 0000004C [4100]                  	dw	old09
 21188                                  
 21189                                  ; ----------------------------------------------------------------------
 21190                                  
 21191 0000004E 00000000                old70:	dd	0
 21192                                  
 21193                                  int70:
 21194 00000052 E8F200                  	call	do_int_stacks
 21195 00000055 [4E00]                  	dw	old70
 21196                                  
 21197                                  ; ----------------------------------------------------------------------
 21198                                  
 21199                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 21200                                  ;public	int&a
 21201                                  ;public	old&a
 21202                                  ;public	firstflag&a
 21203                                  ;int&a	proc	far
 21204                                  ;	jmp	short entry_int&a&_stk
 21205                                  ;old&a	dd	  0		;forward pointer
 21206                                  ;	dw	  424bh 	;compatible signature for int. sharing
 21207                                  ;firstflag&a db   0		;the firstly hooked.
 21208                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 21209                                  ;	db	7 dup (0)	;reserved for future.
 21210                                  ;entry_int&a&_stk:
 21211                                  ;	call	do_int_stacks
 21212                                  ;	dw	old&a
 21213                                  ;intret_&a:
 21214                                  ;	iret
 21215                                  ;int&a	endp
 21216                                  ;	endm
 21217                                  
 21218                                  ; ----------------------------------------------------------------------
 21219                                  
 21220                                  int0A:
 21221 00000057 EB10                    	jmp	short entry_int0A_stk
 21222 00000059 00000000                old0A:	dd	0	
 21223 0000005D 4B42                    	dw	424Bh
 21224                                  firstflag0A:
 21225 0000005F 00                      	db	0
 21226 00000060 EB0C                    	jmp	short intret_0A
 21227 00000062 00<rep 7h>              	times	7 db 0
 21228                                  
 21229                                  entry_int0A_stk:
 21230 00000069 E8DB00                  	call	do_int_stacks
 21231 0000006C [5900]                  	dw	old0A
 21232                                  intret_0A:
 21233 0000006E CF                      	iret
 21234                                  
 21235                                  ; ----------------------------------------------------------------------
 21236                                  
 21237                                  int0B:
 21238 0000006F EB10                    	jmp	short entry_int0B_stk
 21239 00000071 00000000                old0B:	dd	0	
 21240 00000075 4B42                    	dw	424Bh
 21241                                  firstflag0B:
 21242 00000077 00                      	db	0
 21243 00000078 EB0C                    	jmp	short intret_0B
 21244 0000007A 00<rep 7h>              	times	7 db 0
 21245                                  
 21246                                  entry_int0B_stk:
 21247 00000081 E8C300                  	call	do_int_stacks
 21248 00000084 [7100]                  	dw	old0B
 21249                                  intret_0B:
 21250 00000086 CF                      	iret
 21251                                  
 21252                                  ; ----------------------------------------------------------------------
 21253                                  
 21254                                  int0C:
 21255 00000087 EB10                    	jmp	short entry_int0C_stk
 21256 00000089 00000000                old0C:	dd	0	
 21257 0000008D 4B42                    	dw	424Bh
 21258                                  firstflag0C:
 21259 0000008F 00                      	db	0
 21260 00000090 EB0C                    	jmp	short intret_0C
 21261 00000092 00<rep 7h>              	times	7 db 0
 21262                                  
 21263                                  entry_int0C_stk:
 21264 00000099 E8AB00                  	call	do_int_stacks
 21265 0000009C [8900]                  	dw	old0C
 21266                                  intret_0C:
 21267 0000009E CF                      	iret
 21268                                  
 21269                                  ; ----------------------------------------------------------------------
 21270                                  
 21271                                  int0D:
 21272 0000009F EB10                    	jmp	short entry_int0D_stk
 21273 000000A1 00000000                old0D:	dd	0	
 21274 000000A5 4B42                    	dw	424Bh
 21275                                  firstflag0D:
 21276 000000A7 00                      	db	0
 21277 000000A8 EB0C                    	jmp	short intret_0D
 21278 000000AA 00<rep 7h>              	times	7 db 0
 21279                                  
 21280                                  entry_int0D_stk:
 21281 000000B1 E89300                  	call	do_int_stacks
 21282 000000B4 [A100]                  	dw	old0D
 21283                                  intret_0D:
 21284 000000B6 CF                      	iret
 21285                                  
 21286                                  ; ----------------------------------------------------------------------
 21287                                  
 21288                                  int0E:
 21289 000000B7 EB10                    	jmp	short entry_int0E_stk
 21290 000000B9 00000000                old0E:	dd	0	
 21291 000000BD 4B42                    	dw	424Bh
 21292                                  firstflag0E:
 21293 000000BF 00                      	db	0
 21294 000000C0 EB0C                    	jmp	short intret_0E
 21295 000000C2 00<rep 7h>              	times	7 db 0
 21296                                  
 21297                                  entry_int0E_stk:
 21298 000000C9 E87B00                  	call	do_int_stacks
 21299 000000CC [B900]                  	dw	old0E
 21300                                  intret_0E:
 21301 000000CE CF                      	iret
 21302                                  
 21303                                  ; ----------------------------------------------------------------------
 21304                                  
 21305                                  int72:
 21306 000000CF EB10                    	jmp	short entry_int72_stk
 21307 000000D1 00000000                old72:	dd	0	
 21308 000000D5 4B42                    	dw	424Bh
 21309                                  firstflag72:
 21310 000000D7 00                      	db	0
 21311 000000D8 EB0C                    	jmp	short intret_72
 21312 000000DA 00<rep 7h>              	times	7 db 0
 21313                                  
 21314                                  entry_int72_stk:
 21315 000000E1 E86300                  	call	do_int_stacks
 21316 000000E4 [D100]                  	dw	old72
 21317                                  intret_72:
 21318 000000E6 CF                      	iret
 21319                                  
 21320                                  ; ----------------------------------------------------------------------
 21321                                  
 21322                                  int73:
 21323 000000E7 EB10                    	jmp	short entry_int73_stk
 21324 000000E9 00000000                old73:	dd	0	
 21325 000000ED 4B42                    	dw	424Bh
 21326                                  firstflag73:
 21327 000000EF 00                      	db	0
 21328 000000F0 EB0C                    	jmp	short intret_73
 21329 000000F2 00<rep 7h>              	times	7 db 0
 21330                                  
 21331                                  entry_int73_stk:
 21332 000000F9 E84B00                  	call	do_int_stacks
 21333 000000FC [E900]                  	dw	old73
 21334                                  intret_73:
 21335 000000FE CF                      	iret
 21336                                  
 21337                                  ; ----------------------------------------------------------------------
 21338                                  
 21339                                  int74:
 21340 000000FF EB10                    	jmp	short entry_int74_stk
 21341 00000101 00000000                old74:	dd	0	
 21342 00000105 4B42                    	dw	424Bh
 21343                                  firstflag74:
 21344 00000107 00                      	db	0
 21345 00000108 EB0C                    	jmp	short intret_74
 21346 0000010A 00<rep 7h>              	times	7 db 0
 21347                                  
 21348                                  entry_int74_stk:
 21349 00000111 E83300                  	call	do_int_stacks
 21350 00000114 [0101]                  	dw	old74
 21351                                  intret_74:
 21352 00000116 CF                      	iret
 21353                                  
 21354                                  ; ----------------------------------------------------------------------
 21355                                  
 21356                                  int76:
 21357 00000117 EB10                    	jmp	short entry_int76_stk
 21358 00000119 00000000                old76:	dd	0	
 21359 0000011D 4B42                    	dw	424Bh
 21360                                  firstflag76:
 21361 0000011F 00                      	db	0
 21362 00000120 EB0C                    	jmp	short intret_76
 21363 00000122 00<rep 7h>              	times	7 db 0
 21364                                  
 21365                                  entry_int76_stk:
 21366 00000129 E81B00                  	call	do_int_stacks
 21367 0000012C [1901]                  	dw	old76
 21368                                  intret_76:
 21369 0000012E CF                      	iret
 21370                                  
 21371                                  ; ----------------------------------------------------------------------
 21372                                  
 21373                                  int77:
 21374 0000012F EB10                    	jmp	short entry_int77_stk
 21375 00000131 00000000                old77:	dd	0	
 21376 00000135 4B42                    	dw	424Bh
 21377                                  firstflag77:
 21378 00000137 00                      	db	0
 21379 00000138 EB0C                    	jmp	short intret_77
 21380 0000013A 00<rep 7h>              	times	7 db 0
 21381                                  
 21382                                  entry_int77_stk:
 21383 00000141 E80300                  	call	do_int_stacks
 21384 00000144 [3101]                  	dw	old77
 21385                                  intret_77:
 21386 00000146 CF                      	iret
 21387                                  
 21388                                  ; ----------------------------------------------------------------------
 21389                                  
 21390                                  ;********************************************************************
 21391                                  ;common routines
 21392                                  ;********************************************************************
 21393                                  
 21394                                  ; do interrupt stack switching. the fake return address holds
 21395                                  ; a pointer to the far-pointer of the actual interrupt
 21396                                  ; service routine
 21397                                  
 21398                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 21399                                  ; 21/03/2019 - Retro DOS v4.0
 21400                                  
 21401                                  ;allocbyte   equ 0
 21402                                  ;intlevel    equ 1
 21403                                  ;savedsp     equ 2
 21404                                  ;savedss     equ 4
 21405                                  ;newsp       equ 6
 21406                                  
 21407                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 21408                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 21409                                  
 21410                                  do_int_stacks:
 21411 00000147 50                      	push	ax
 21412 00000148 55                      	push	bp
 21413 00000149 06                      	push	es
 21414 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 21415 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 21416 00000154 B001                    	mov	al,allocated ; 1
 21417                                  	; 21/10/2022
 21418                                  	;xchg	[es:bp+allocbyte],al 
 21419                                  	; 11/12/2022
 21420 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 21421 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 21422 0000015C 7551                    	jne	short notfree02
 21423                                  
 21424 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 21425                                  
 21426                                  found02:
 21427 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 21428 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 21429                                  
 21430 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 21431                                  
 21432 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 21433                                  	; 21/10/2022
 21434                                  	;mov	bp,[es:bp+6]
 21435                                  	; 11/12/2022
 21436                                  	;cmp	[es:bp+0],ax	
 21437 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 21438 00000176 7544                    	jne	short foundbad02
 21439                                  
 21440                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 21441 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 21442 0000017A 8EC5                    	mov	es,bp
 21443 0000017C 89E5                    	mov	bp,sp
 21444 0000017E 8B6E06                  	mov	bp,[bp+6]
 21445 00000181 8ED0                    	mov	ss,ax
 21446 00000183 8CC4                    	mov	sp,es
 21447 00000185 8EC0                    	mov	es,ax
 21448 00000187 2E8B6E00                	mov	bp,[cs:bp]
 21449                                  
 21450                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 21451                                  	;push    bp
 21452                                  	;mov     bp,sp
 21453                                  	;mov     ax,[bp+8]
 21454                                  	;pop     bp
 21455                                  	;push    es
 21456                                  	;pop     ss
 21457                                  	;mov     sp,bp
 21458                                  	;mov     bp,ax
 21459                                  	; 11/12/2022
 21460                                  	;;mov	bp,[cs:bp+0]	
 21461                                  	;mov	bp,[cs:bp]	
 21462                                  
 21463 0000018B 9C                      	pushf				; go execute the real interrupt handler
 21464                                  	; 11/12/2022
 21465 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 21466                                  	; 21/10/2022
 21467                                  	;call	far [cs:bp+0]
 21468                                  
 21469 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 21470                                  	; 11/12/2022
 21471 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 21472                                  	; 21/10/2022
 21473                                  	;mov	bp,[es:bp+0]
 21474 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 21475 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 21476                                  
 21477                                  	; 11/12/2022
 21478                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 21479                                  	; 21/10/2022
 21480 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 21481 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 21482                                  
 21483 000001A8 07                      	pop	es
 21484 000001A9 5D                      	pop	bp			; saved on entry
 21485 000001AA 58                      	pop	ax			; saved on entry
 21486 000001AB 83C402                  	add	sp,2
 21487 000001AE CF                      	iret				; done with this interrupt
 21488                                  
 21489                                  notfree02:
 21490 000001AF 3C01                    	cmp	al,allocated		; error flag
 21491 000001B1 7404                    	je	short findnext02	;  no, continue
 21492                                  	; 11/12/2022
 21493                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 21494                                  	; 21/10/2022
 21495 000001B3 26864600                	xchg	[es:bp],al
 21496                                  
 21497                                  findnext02:
 21498 000001B7 E81200                  	call	longpath
 21499 000001BA EBA8                    	jmp	short found02
 21500                                  
 21501                                  foundbad02:
 21502 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21503 000001C1 72F4                    	jc	short findnext02
 21504 000001C3 89C5                    	mov	bp,ax			; flag this entry
 21505                                  	; 11/12/2022
 21506                                  	;mov	byte [es:bp+allocbyte],clobbered
 21507                                  	; 21/10/2022
 21508 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 21509 000001CA EBEB                    	jmp	short findnext02	; keep looking
 21510                                  
 21511                                  ; ----------------------------------------------------------------------
 21512                                  
 21513                                  ; Common routines
 21514                                  
 21515                                  longpath:
 21516                                  	; 21/03/2019
 21517 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 21518                                  lploopp:
 21519                                  	; 11/12/2022
 21520                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 21521                                  	; 21/10/2022
 21522 000001D1 26807E0000              	cmp	byte [es:bp],free
 21523 000001D6 7512                    	jne	short inuse		;  no, try next one
 21524                                  
 21525 000001D8 B001                    	mov	al,allocated
 21526                                  	; 11/12/2022
 21527                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 21528                                  	; 21/10/2022
 21529 000001DA 26864600                	xchg	[es:bp],al
 21530 000001DE 3C00                    	cmp	al,free 		; is it still free?
 21531 000001E0 7414                    	je	short found		;  yes, go use it
 21532                                  
 21533 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 21534 000001E4 7404                    	je	short inuse		;  no, check the next one
 21535                                  
 21536                                  	; 11/12/2022
 21537                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 21538                                  	; 21/10/2022
 21539 000001E6 26884600                	mov	[es:bp],al
 21540                                  inuse:
 21541 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21542 000001EF 7406                    	je	short fatal
 21543 000001F1 83ED08                  	sub	bp,entrysize
 21544 000001F4 EBDB                    	jmp	short lploopp
 21545                                  found:
 21546 000001F6 C3                      	retn
 21547                                  fatal:
 21548 000001F7 1E                      	push	ds
 21549 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 21550 000001FB 8ED8                    	mov	ds,ax
 21551 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21552 00000202 1F                      	pop	ds
 21553 00000203 7504                    	jne	short skip_nmis
 21554                                  
 21555 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 21556 00000207 E672                    	out	72h,al
 21557                                  
 21558                                  skip_nmis:
 21559 00000209 FA                      	cli				; disable and mask
 21560 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 21561 0000020C E621                    	out	021h,al
 21562 0000020E E6A1                    	out	0A1h,al
 21563                                  
 21564 00000210 8CCE                    	mov	si,cs
 21565 00000212 8EDE                    	mov	ds,si
 21566 00000214 BE[3B02]                	mov	si,fatal_msg
 21567                                  ;SR;
 21568                                  ;   We set all foci to this VM to issue the stack failure message
 21569                                  ;
 21570 00000217 50                      	push	ax
 21571 00000218 1E                      	push	ds
 21572                                  	;;mov	ax,Bios_Data ; 0070h
 21573                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 21574                                  	; 21/10/2022
 21575 00000219 B87000                  	mov	ax,DOSBIODATASEG
 21576 0000021C 8ED8                    	mov	ds,ax
 21577                                  
 21578                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 21579 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 21580 00000223 1F                      	pop	ds
 21581 00000224 58                      	pop	ax
 21582 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 21583                                  
 21584                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 21585                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 21586                                  	; 21/10/2022
 21587 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 21588                                  ;
 21589                                  ;SR; We do not bother about the returned status of this call. 
 21590                                  ;
 21591                                  fatal_loop:
 21592 0000022C AC                      	lodsb
 21593 0000022D 3C24                    	cmp	al,'$'
 21594 0000022F 7408                    	je	short fatal_done
 21595                                  
 21596 00000231 B307                    	mov	bl,7
 21597 00000233 B40E                    	mov	ah,14
 21598 00000235 CD10                    	int	10h			; whoops, this enables ints
 21599 00000237 EBF3                    	jmp	short fatal_loop
 21600                                  
 21601                                  fatal_done:
 21602 00000239 EBFE                    	jmp	short fatal_done
 21603                                  
 21604                                  
 21605                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 21606                                  ; ----------------------------------------------------------------------
 21607                                  ;	include msbio.cl5		; fatal stack error message
 21608                                  
 21609                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 21610                                  
 21611                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 21612                                  ; ----------------------------------------------------------------------
 21613                                  ; 04/06/2018 - Retro DOS v3.0
 21614                                  
 21615                                  fatal_msg:
 21616 0000023B 0D0A                    	db	0Dh,0Ah
 21617 0000023D 070D0A                  	db	7,0Dh,0Ah
 21618 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 21618 00000249 737461636B206F7665-
 21618 00000252 72666C6F770D0A     
 21619 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 21619 00000262 6C7465640D0A24     
 21620                                  
 21621                                  endstackcode:
 21622                                  
 21623                                  ; ----------------------------------------------------------------------
 21624                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 21625                                  ; ----------------------------------------------------------------------
 21626                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 21627                                  
 21628                                  ; 22/03/2019 - Retro DOS v4.0
 21629                                  
 21630                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 21631                                  
 21632                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 21633                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 21634                                  
 21635                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21636                                  ; ----------------------------------------------------------------------
 21637                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 21638                                  
 21639                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 21640                                  
 21641                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21642                                  ; ----------------------------------------------------------------------
 21643                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 21644                                  
 21645                                  SYSINIT:	
 21646 00000269 E99E01                          JMP	GOINIT
 21647                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 21648                                  
 21649                                  ; ----------------------------------------------------------------------
 21650                                  
 21651                                  struc DDHighInfo
 21652 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 21653 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 21654 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 21655                                  endstruc
 21656                                  
 21657                                  ; 22/03/2019 - Retro DOS v4.0
 21658                                  
 21659 0000026C 00                      runhigh: db	0
 21660                                  
 21661                                  ; 02/11/2022
 21662                                  ;align 4
 21663                                  
 21664                                  DOSINFO: 
 21665 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 21666                                  ;MSDOS:
 21667                                  dos_temp_location: ; dword ; MSDOS 6.0
 21668                                  dosinit:		; MSDOS 6.0
 21669 00000271 0000                    	dw	0
 21670                                  
 21671                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21672                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 21673                                  ;	dw	0
 21674                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 21675                                  
 21676                                  CURRENT_DOS_LOCATION:
 21677 00000273 0000                    	dw	0
 21678                                  
 21679                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 21680                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 21681                                  
 21682                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21683                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 21684                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 21685                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21686                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 21687                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 21688                                  
 21689                                  DEVICE_LIST:
 21690 00000275 00000000                	dd	0
 21691                                  
 21692                                  ; 04/06/2018 - Retro DOS v3.0
 21693                                  ; 28/03/2018
 21694                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 21695                                  ;
 21696                                  sysi_country:	
 21697 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 21698                                  
 21699                                  ; MSDOS 6.0
 21700 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 21701                                  
 21702                                  ;lo_doscod_size: dw	0	; dos code size when in low mem
 21703                                  ;hi_doscod_size: dw	0	; dos code size when in HMA
 21704                                  ; 08/03/2025 (MiniDOS)
 21705 00000281 0000                    dos_code_size:	dw	0
 21706                                  
 21707 00000283 0000                    def_php:	dw	0
 21708                                  
 21709                                  ; M022--
 21710                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 21711                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 21712                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 21713                                  ;  the new home.
 21714                                  
 21715                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 21716                                  ; 21/10/2022
 21717                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 21718                                  
 21719                                  ; 22/10/2022
 21720                                  seg_reinit_ptr:	; label dword
 21721 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 21722                                  temp_bcode_seg:
 21723                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 21724                                  		; 22/10/2022
 21725 00000287 0203                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 21726                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21727                                  fake_floppy_drv:
 21728 00000289 00                      		db	0	; set to 1 if this machine
 21729                                  				; does not have any floppies!!!
 21730                                  
 21731                                  ; Internal Stack Parameters
 21732                                  
 21733 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 21734 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 21735 0000028E 00000000                stack_addr:	dd	0
 21736                                  
 21737                                  ; 05/06/2018 - Retro DOS v3.0
 21738                                  
 21739                                  ; various default values
 21740                                  
 21741 00000292 0100                    MEMORY_SIZE:	dw	1
 21742                                  
 21743                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 21744                                  
 21745 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 21746 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 21747 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 21748 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 21749 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 21750                                  
 21751 0000029D 08                      FILES:	db	8	; enough files for pipe
 21752                                  ; 07/04/2025 - MiniDOS 1.0 
 21753                                  %if 0
 21754                                  FCBS:	db	4	; performance for recycling
 21755                                  KEEP:	db	0	; keep original set
 21756                                  %endif
 21757 0000029E 05                      NUM_CDS: db	5	; 5 net drives
 21758                                  
 21759                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 21760                                  ;;CONFBOT: dw	0
 21761                                  ;;ALLOCLIM: dw	0
 21762                                  ;CONFBOT: ; 02/11/2022
 21763                                  ;top_of_cdss: dw 0
 21764                                  
 21765                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 21766                                  ; (SYSINIT:02A3h)
 21767 0000029F 0000                    CONFBOT: dw	0
 21768 000002A1 0000                    ALLOCLIM: dw	0
 21769 000002A3 0000                    top_of_cdss: dw 0
 21770                                  
 21771                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 21772                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 21773                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 21774                                  
 21775 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 21776                                  
 21777                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 21778                                  %if 0
 21779                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21780                                  ; (SYSINIT:02A9h)
 21781                                  
 21782                                  command_line:
 21783                                  	db	2,0
 21784                                  	db	'P'
 21785                                  	db	0
 21786                                  	times	124 db 0 ; db 124 dup(0)
 21787                                  
 21788                                  %endif
 21789                                  
 21790                                  ; (SYSINIT:0329h)
 21791 000002A9 00                      ZERO:	db	0
 21792 000002AA 00                      sepchr:	db	0
 21793 000002AB 0000                    linecount: dw	0			; line count in config.sys
 21794 000002AD 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 21795 000002B5 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 21796                                  
 21797 000002B7 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 21798 000002B8 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 21799                                  
 21800 000002B9 0000                    buf_prev_off:	dw	0
 21801                                  
 21802                                          ;IF      NOT NOEXEC
 21803                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 21804                                          ;ENDIF
 21805                                  
 21806                                  ; 29/12/2023
 21807                                  ; 01/05/2018
 21808                                  COMEXE:
 21809 000002BB 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 21810 000002BD [1A45]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 21811 000002BF 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21812                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21813 000002C1 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 21814 000002C3 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21815 000002C5 [A902]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 21816 000002C7 0000                    		dw	0
 21817                                  
 21818                                  ; variables for install= command.
 21819                                  
 21820 000002C9 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 21821                                  					;  indicating the pass number
 21822                                  					; 0 - do scan for DOS=HIGH/LOW
 21823                                  					; 1 - load device drivers
 21824                                  					; 2 - was to load IFS
 21825                                  					;      now it is unused
 21826                                  					; 3 - do install=
 21827                                  					; >3 - nop
 21828 000002CA 0000                    install_flag:	dw	0
 21829                                  
 21830                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 21831                                  has_installed	equ	00000010b	; sysinit_base installed.
 21832                                  
 21833 000002CC 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 21834 000002CE 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 21835 000002D2 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 21836 000002D6 0000                    checksum:	dw	0		; used by sum_up
 21837                                  
 21838 000002D8 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 21839 000002EC 00                      ldexec_line:	db	0		;# of parm characters
 21840 000002ED 20                      ldexec_start:	db	' '
 21841 000002EE 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 21842                                  
 21843                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 21844                                  
 21845                                  instexe:
 21846 0000033E 0000                    iexec.environ:	dw	0		; seg addr of environment
 21847 00000340 [EC02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 21848 00000342 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21849                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21850 00000344 [D802]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 21851 00000346 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 21852 00000348 [D802]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 21853 0000034A 0000                    		dw	0
 21854                                  
 21855                                  ; variables for comment=
 21856                                  
 21857 0000034C 00                      com_level:	db	0		; level of " " in command line
 21858 0000034D 00                      cmmt:		db	0		; length of comment string token
 21859 0000034E 00                      cmmt1:		db	0		; token
 21860 0000034F 00                      cmmt2:		db	0		; token
 21861 00000350 00                      cmd_indicator:	db	0
 21862 00000351 00                      donotshownum:	db	0
 21863                                  
 21864 00000352 0000                    count:		dw	0
 21865 00000354 0000                    org_count:	dw	0
 21866 00000356 0000                    chrptr:		dw	0
 21867 00000358 0000                    cntryfilehandle: dw	0
 21868 0000035A 0000                    old_area:	dw	0
 21869 0000035C 0000                    impossible_owner_size: dw 0		; paragraph
 21870                                  
 21871                                  bucketptr: ; label dword
 21872                                  bufptr:	   ; label dword		; leave this stuff in order!
 21873 0000035E 0000                    memlo:	dw	0
 21874                                  prmblk:	   ; label word
 21875 00000360 0000                    memhi:	dw	0
 21876 00000362 0000                    ldoff:	dw	0
 21877 00000364 0000                    area:	dw	0
 21878                                  
 21879                                  ; 18/03/2025 - MiniDOS v1.0
 21880                                  %if 0
 21881                                  
 21882                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 21883                                  prev_memhi:	dw 0
 21884                                  prev_alloclim:	dw 0
 21885                                  dosdata_umb:	db 0
 21886                                  
 21887                                  %endif
 21888                                  
 21889                                  ; Following is the request packet used to call INIT routines for 
 21890                                  ; all device drivers. Some fields may be accessed individually in
 21891                                  ; the code, and hence have individual labels, but they should not
 21892                                  ; be separated.
 21893                                  
 21894 00000366 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 21895                                  	;db	24			; was 22
 21896 00000367 00                      	db	0
 21897 00000368 00                      	db	0			; initialize code
 21898 00000369 0000                    	dw	0
 21899 0000036B 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 21900                                  
 21901 00000373 00                      unitcount:	db	0
 21902 00000374 00000000                break_addr:	dd	0
 21903 00000378 00000000                bpb_addr:	dd	0
 21904                                  drivenumber:	; 22/10/2022
 21905 0000037C 00                      devdrivenum:	db	0 
 21906 0000037D 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 21907                                  
 21908                                  ; end of request packet
 21909                                  
 21910                                  ;drivenumber:	db	0  ; 22/03/2019
 21911                                  
 21912                                  toomanydrivesflag:
 21913 0000037F 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 21914                                  align 2
 21915                                  
 21916                                  BCodeSeg:	; 21/10/2022
 21917 00000380 0203                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 21918                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21919                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 21920                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 21921                                  
 21922                                  ; 30/12/2022
 21923                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 21924                                  ;
 21925                                  ; Magicbackdoor: dd 0
 21926                                  ; NullBackdoor: 
 21927                                  ;		retf
 21928                                  
 21929                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21930                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21931                                  ; 19/04/2019
 21932                                  _timer_lw_:
 21933 00000382 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 21934                                  
 21935                                  ; 29/12/2023 - Retro DOS v5.0
 21936                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 21937                                  
 21938 00000384 00                      F5_key:	db 0
 21939 00000385 00                      F8_key:	db 0
 21940                                  
 21941                                  ; 07/03/2025 (MiniDOS 1.0)
 21942                                  %if 0
 21943                                  MagicBackdoor:	dd 0
 21944                                  NullBackdoor:
 21945                                  		retf
 21946                                  %endif
 21947                                  
 21948                                  ;SR;
 21949                                  ; This is the communication block between the DOS and the BIOS. It starts at
 21950                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 21951                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 21952                                  ;is passed to DOS as part of the DOSINIT call.
 21953                                  ;
 21954                                  
 21955                                  BiosComBlock:
 21956                                  	;dd	Bios_Data:SysinitPresent 
 21957                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 21958 00000386 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 21959                                  	;dw	KERNEL_SEGMENT ; 0070h
 21960                                  	; 21/10/2022
 21961 00000388 7000                    	dw	DOSBIODATASEG ; 0070h
 21962                                  
 21963                                  ;align 2
 21964                                  
 21965                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 21966                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 21967                                  tempstack:	
 21968 0000038A 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 21969                                  
 21970                                  ; ----------------------------------------------------------------------------
 21971                                  
 21972                                  	; 29/12/2023 - Retro DOS v5.0
 21973                                  	; 22/10/2022 - Retro DOS v4.0
 21974                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 21975                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 21976                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 21977                                  	; 12/12/2023
 21978 0000040A 0E                      	push	cs
 21979 0000040B 1F                      	pop	ds
 21980                                  
 21981                                  	; 12/12/2022
 21982                                  	; 22/03/2019 - Retro DOS v4.0
 21983                                  	; 06/07/2018
 21984                                  	; 04/06/2018 - Retro DOS v3.0
 21985                                  ; before doing anything else, let's set the model byte
 21986 0000040C B4C0                    	mov	ah,0C0h 		; get system configuration
 21987 0000040E CD15                    	int	15h			; 
 21988 00000410 7214                    	jc	short no_rom_config
 21989                                  
 21990                                  	;cmp	ah,0			; double check
 21991                                  	;jne	short no_rom_config
 21992                                  	; 03/09/2023
 21993 00000412 08E4                    	or	ah,ah
 21994 00000414 7510                    	jnz	short no_rom_config
 21995                                  
 21996                                  	; 12/12/2023 ; *
 21997                                  	; ds = cs
 21998                                  
 21999 00000416 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 22000                                  	;mov	[cs:sys_model_byte],al 
 22001 0000041A A2[B702]                	mov	[sys_model_byte],al ; *
 22002 0000041D 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 22003                                  	;mov	[cs:sys_scnd_model_byte],al
 22004 00000421 A2[B802]                	mov	[sys_scnd_model_byte],al ; *
 22005                                  	;jmp	short SYSIN
 22006                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22007 00000424 EB29                    	jmp	short move_myself
 22008                                  
 22009                                  no_rom_config:				; Old ROM
 22010                                  	; 12/12/2023
 22011                                  	;mov	ax,0F000h
 22012                                  	;mov	ds,ax
 22013                                  	;mov	al,[0FFFEh]
 22014                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 22015                                  	; 12/12/2023
 22016                                  	; ds = cs
 22017 00000426 B800F0                  	mov	ax,0F000h
 22018 00000429 8EC0                    	mov	es,ax
 22019 0000042B 26A0FEFF                	mov	al,[es:0FFFEh]
 22020 0000042F A2[B702]                	mov	[sys_model_byte],al	; set the model byte.
 22021                                  	
 22022                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 22023                                  ; execute the equipment determination interrupt and then
 22024                                  ; check the returned value to see if we have any floppy drives
 22025                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 22026                                  ; see the at tech ref bios listings for help on the equipment
 22027                                  ; flag interrupt (11h)	
 22028                                  
 22029                                  	; 22/10/2022
 22030                                  ;check_for_fake_floppy:			; entry point for rom_config above
 22031 00000432 CD11                    	int	11h			; check equipment flag
 22032                                  
 22033                                  	; 29/12/2023 - Retro DOS v5.0
 22034                                  	;jmp	short check_for_fake_floppy
 22035                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 22036                                  	;db	52h	; 'RPS' sign
 22037                                  	;db	50h
 22038                                  	;db	53h
 22039                                  
 22040                                  check_for_fake_floppy:
 22041                                  	; 29/12/2023
 22042                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 22043                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 22044                                  	;			; by using 'RPS' sign position)
 22045                                  	;			;		 03/07/2023 - Erdogan Tan
 22046                                  	;test	ax, 1		; have any floppies?
 22047                                  
 22048                                  	; 12/12/2022
 22049 00000434 A801                    	test	al,1		
 22050                                  	;test	ax,1			; have any floppies?
 22051 00000436 7517                    	jnz	short move_myself	; yes,normal system
 22052                                  
 22053                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 22054                                  ; whether it is an old ROM BIOS or a new one
 22055                                  ;
 22056                                  ; WARNING !!!
 22057                                  ;
 22058                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 22059                                  ; here will require an equivalent modification in MSINIT.ASM also
 22060                                  
 22061                                  	; 12/12/2023
 22062                                  	;push	es  ; not necessary
 22063                                  
 22064 00000438 30C9                    	xor	cl,cl	
 22065 0000043A B408                    	mov	ah,8			; get disk parameters
 22066 0000043C B200                    	mov	dl,0			; of drive 0
 22067 0000043E CD13                    	int	13h
 22068                                  
 22069                                  	;pop	es  ; 12/12/2023	
 22070                                  
 22071 00000440 720D                    	jc	short move_myself	; if error lets assume that the
 22072                                  					;  ROM BIOS lied
 22073                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 22074                                  	;je	short move_myself
 22075                                  	; 03/09/2023
 22076 00000442 08C9                    	or	cl,cl
 22077 00000444 7409                    	jz	short move_myself
 22078                                  
 22079 00000446 08D2                    	or	dl,dl			; number of flp drvs == 0?
 22080 00000448 7505                    	jnz	short move_myself	; no
 22081                                  
 22082                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 22083                                  	; 12/12/2023
 22084                                  	; ds = cs
 22085 0000044A C606[8902]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 22086                                  
 22087                                  move_myself:
 22088                                  	; 12/12/2023
 22089                                  	;cld	; not necessary		; set up move
 22090                                  	;xor	si,si
 22091                                  	;mov	di,si
 22092                                  
 22093                                  	; 12/12/2023
 22094                                  	; ds = cs
 22095                                  	; 12/12/2022
 22096                                  	;push	cs
 22097                                  	;pop	ds
 22098                                  
 22099                                  	;mov	cx,[cs:MEMORY_SIZE]
 22100 0000044F 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 22101                                  
 22102                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22103                                  ;;;	if	msver
 22104                                  ;	cmp	cx,1		; 1 means do scan
 22105                                  ;	jnz	short noscan
 22106                                  ;	mov	cx,2048		; start scanning at 32k boundary
 22107                                  ;	xor	bx,bx
 22108                                  ;
 22109                                  ;memscan:inc	cx
 22110                                  ;	jz	short setend
 22111                                  ;	mov	ds,cx
 22112                                  ;	mov	al,[bx]
 22113                                  ;	not	al
 22114                                  ;	mov	[bx],al
 22115                                  ;	cmp	al,[bx]
 22116                                  ;	not	al
 22117                                  ;	mov	[bx],al
 22118                                  ;	jz	short memscan
 22119                                  ;setend:
 22120                                  ;	mov	cs:[memory_size],cx
 22121                                  ;;;	endif
 22122                                  
 22123                                  ;noscan: 				; cx is mem size in para
 22124                                  ;;
 22125                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 22126                                  ;;		  before we try to run.
 22127                                  ;;	       b) in any case, we should check for sufficient memory and give
 22128                                  ;;		  an appropriate error diagnostic if there isn't enough
 22129                                  ;
 22130                                  ;	push	cs
 22131                                  ;	pop	ds
 22132                                  ;
 22133                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 22134                                  ;;	  that way it would be easier to slide them down home in a minimal
 22135                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 22136                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 22137                                  ;;	  temporary home and the final one.  the problem with doing that
 22138                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 22139                                  ;
 22140                                  ;	dec	cx			; one para for an arena at end of mem
 22141                                  ;					; in case of UMBs
 22142                                  
 22143                                  	; 22/10/2022
 22144                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 22145                                  
 22146                                  	; 12/12/2022
 22147                                  	;push	cs
 22148                                  	;pop	ds
 22149                                  
 22150 00000453 49                      	dec	cx
 22151                                  
 22152                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 22153                                  
 22154 00000454 31DB                    	xor	bx,bx
 22155 00000456 8EC3                    	mov	es,bx
 22156                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 22157                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 22158                                  	; 29/09/2023
 22159 00000458 26C41EBC00              	les	bx,[es:(2Fh*4)]
 22160 0000045D 26817F035250            	cmp	word [es:bx+3],'RP'
 22161 00000463 751B                    	jne	short NoRPL
 22162 00000465 26807F054C              	cmp	byte [es:bx+5],'L'
 22163 0000046A 7514                    	jne	short NoRPL
 22164                                  
 22165 0000046C 89CA                    	mov	dx,cx			; get TOM into DX
 22166 0000046E 52                      	push	dx
 22167 0000046F B8064A                  	mov	ax,4A06h
 22168                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 22169 00000472 CD2F                    	int	2Fh			; Get new TOM from any RPL
 22170 00000474 58                      	pop	ax
 22171 00000475 89D1                    	mov	cx,dx
 22172 00000477 39C2                    	cmp	dx,ax
 22173 00000479 7405                    	je	short NoRPL
 22174                                  	
 22175                                  	; 11/12/2022
 22176                                  	; ds = cs
 22177 0000047B 8916[9402]              	mov	[RPLMemTop],dx
 22178                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22179                                  	;mov	[cs:RPLMemTop],dx
 22180                                  	
 22181 0000047F 49                      	dec	cx
 22182                                  NoRPL:
 22183 00000480 B8[504D]                	mov	ax,SI_end		; need this much room for sysinit
 22184                                  					; (SI_end == sysinit code size)
 22185                                  					; 03/09/2023
 22186                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 22187                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 22188 00000483 E8F807                  	call	off_to_para
 22189 00000486 29C1                    	sub	cx,ax
 22190                                  
 22191                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 22192                                  ; code above sysinit in memory
 22193                                  ;
 22194 00000488 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 22195                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 22196                                  
 22197 0000048C B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 22198                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 22199                                  					; 03/09/2023
 22200                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 22201 0000048F E8EC07                  	call	off_to_para		; leave this much room for BIOS code
 22202 00000492 29C1                    	sub	cx,ax
 22203 00000494 8EC1                    	mov	es,cx			; segment where sysinit will be located
 22204                                  
 22205                                  	; 12/12/2023
 22206 00000496 FC                      	cld	; not necessary		; set up move
 22207 00000497 31F6                    	xor	si,si
 22208 00000499 89F7                    	mov	di,si
 22209                                  
 22210 0000049B B9[504D]                	mov	cx,SI_end		; (sysinit code size)
 22211 0000049E D1E9                    	shr	cx,1			; divide by 2 to get words
 22212 000004A0 F3A5                    	rep	movsw			; relocate sysinit
 22213                                  
 22214 000004A2 06                      	push	es			; push relocated segment
 22215 000004A3 B8[A804]                	mov	ax,SYSIN
 22216 000004A6 50                      	push	ax			; push relocated entry point
 22217                                  
 22218 000004A7 CB                      	retf				; far jump to relocated sysinit
 22219                                  
 22220                                  ; =============== S U B R O U T I N E ========================================
 22221                                  
 22222                                  ; 30/12/2023
 22223                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 22224                                  %if 0
 22225                                  get_cpu_type:
 22226                                  	pushf
 22227                                  	push	bx
 22228                                  	xor	bx,bx
 22229                                  	xor	ax,ax
 22230                                  	push	ax
 22231                                  	popf
 22232                                  	pushf
 22233                                  	pop	ax
 22234                                  	and	ax,0F000h
 22235                                  	cmp	ax,0F000h
 22236                                  	jz	short cpu_8086
 22237                                  	mov	ax,0F000h
 22238                                  	push	ax
 22239                                  	popf
 22240                                  	pushf
 22241                                  	pop	ax
 22242                                  	and	ax,0F000h
 22243                                  	jz	short cpu_286
 22244                                  cpu_386:
 22245                                  	inc	bx
 22246                                  cpu_286:
 22247                                  	inc	bx
 22248                                  cpu_8086:
 22249                                  	mov	ax,bx
 22250                                  	pop	bx
 22251                                  	popf
 22252                                  	retn
 22253                                  %endif
 22254                                  
 22255                                  ; ----------------------------------------------------------------------------
 22256                                  
 22257                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 22258                                  
 22259                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 22260                                  	; (SYSINIT:0533h)
 22261                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22262                                  	; (SYSINIT:04BFh)
 22263                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 22264                                  	; (SYSINIT:04F3h)
 22265                                  SYSIN:
 22266                                  	; Retro DOS 5.0 - 30/12/2023
 22267                                  	; Retro DOS 4.0 - 22/03/2019
 22268                                  	; Retro DOS 2.0 - 25/02/2018
 22269                                  
 22270                                  	; 23/04/2019
 22271                                  	;;mov	ax,Bios_Data
 22272                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22273                                  	; 21/10/2022
 22274 000004A8 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22275 000004AB 8ED8                    	mov	ds,ax
 22276                                  
 22277                                  	; 30/12/2023 - Retro DOS v5.0
 22278                                  	;;;
 22279                                  	;push	es
 22280                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 22281                                  	;push	di
 22282                                  	
 22283                                  	;call	get_cpu_type	; determine if 386 system
 22284                                  	;
 22285                                  get_cpu_type:
 22286 000004AD 9C                      	pushf
 22287 000004AE 31C0                    	xor	ax,ax
 22288 000004B0 50                      	push	ax
 22289 000004B1 9D                      	popf
 22290 000004B2 9C                      	pushf
 22291 000004B3 58                      	pop	ax
 22292 000004B4 2500F0                  	and	ax,0F000h
 22293 000004B7 3D00F0                  	cmp	ax,0F000h
 22294 000004BA 740F                    	jz	short cpu_8086
 22295 000004BC B800F0                  	mov	ax,0F000h
 22296 000004BF 50                      	push	ax
 22297 000004C0 9D                      	popf
 22298 000004C1 9C                      	pushf
 22299 000004C2 58                      	pop	ax
 22300 000004C3 2500F0                  	and	ax,0F000h
 22301 000004C6 7402                    	jz	short cpu_286
 22302                                  cpu_386:
 22303 000004C8 29C0                    	sub	ax,ax
 22304                                  cpu_286:
 22305 000004CA 40                      	inc	ax
 22306                                  cpu_8086:	; ax = 0
 22307                                  	; 30/12/2023 - Retro DOS v5.0
 22308 000004CB 2EA2[A306]              	mov	[cs:cpu_type],al ; 07/04/2024
 22309 000004CF 9D                      	popf
 22310                                  	;
 22311                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 22312 000004D0 3C02                    	cmp	al,2
 22313 000004D2 7512                    	jnz     short not_386_system
 22314 000004D4 FC                      	cld			; 80386
 22315 000004D5 1E                      	push	ds
 22316 000004D6 07                      	pop	es		; change A20 line on/off check code
 22317 000004D7 BF[4D07]                	mov	di,cpu386_cmpsd
 22318 000004DA B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 22319 000004DD AB                      	stosw
 22320 000004DE B800F3                  	mov	ax,0F300h	; repz  ; F3
 22321 000004E1 AB                      	stosw
 22322 000004E2 B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 22323 000004E5 AB                      	stosw
 22324                                  not_386_system:
 22325                                  	;pop	di
 22326                                  	;pop	ax
 22327                                  	;pop	es
 22328                                  	;;;
 22329                                  
 22330 000004E6 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 22331 000004EA C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 22332                                  
 22333                                  ; first move the MSDOS.SYS image up to a harmless place 
 22334                                  ; on top of our new sysinitseg
 22335                                  
 22336                                  	; 22/10/2022
 22337 000004EF B8[504D]                	mov	ax,SI_end		; how big is sysinitseg?
 22338 000004F2 E88907                  	call	off_to_para
 22339 000004F5 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 22340 000004F7 01C8                    	add	ax,cx
 22341 000004F9 8EC0                    	mov	es,ax
 22342                                  	
 22343 000004FB 31F6                    	xor	si,si
 22344 000004FD 89F7                    	mov	di,si
 22345                                  
 22346 000004FF 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 22347                                  
 22348                                  	;mov	ax,cs	
 22349                                  	;mov	ds,ax
 22350                                  
 22351                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 22352                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 22353                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 22354                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 22355                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 22356                                  
 22357                                  	; 22/10/2022
 22358 00000504 B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 22359                                  			     ; 03/09/2023
 22360                                  			     ; 5800h (PCDOS 7.1)
 22361 00000507 F3A5                    	rep     movsw
 22362 00000509 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 22363                                  
 22364                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 22365                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 22366                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 22367                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 22368                                  
 22369                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 22370                                  	;mov	ax,cs
 22371                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22372                                  	;mov	ds,ax
 22373                                  
 22374                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22375                                  
 22376                                  ;	; 24/04/2019 
 22377                                  ;;ifndef ROMDOS
 22378                                  ;	mov	ax,[es:3] 		; get offset of dos
 22379                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 22380                                  ;	mov	[dosinit],ax		; that's the entry point offset
 22381                                  ;	call	off_to_para		; subtract this much from segment
 22382                                  ;	; 23/04/2019
 22383                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 22384                                  ;	sub	[FINAL_DOS_LOCATION],ax
 22385                                  ;;else
 22386                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 22387                                  ;;
 22388                                  ;;endif ; ROMDOS
 22389                                  
 22390                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22391                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 22392                                  
 22393                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 22394                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 22395                                  
 22396                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22397                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22398                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22399                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 22400                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 22401 0000050E A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 22402                                  				; 30/12/2023
 22403                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 22404                                  				;  (IBMDOS.SYS, offset 3)
 22405                                  
 22406 00000511 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22407                                  	; 02/11/2022
 22408 00000515 E86607                  	call	off_to_para		; subtract this much from segment
 22409 00000518 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 22410                                  
 22411                                  	; Current DOSCODE start address = dword [dosinit]
 22412                                  
 22413                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 22414                                  ;; until it is determined whether it will be running in HIMEM or not.
 22415                                  
 22416                                  ;ifndef ROMDOS
 22417                                  
 22418                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 22419                                  
 22420                                  	; 22/10/2022
 22421 0000051D 8CC0                    	mov	ax,es
 22422 0000051F 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 22423 00000522 8EC0                    	mov	es,ax
 22424 00000524 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 22425 00000529 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 22426                                  
 22427                                  	;mov	si,BCODE_START ; mov si,30h
 22428                                  	; 09/12/2022
 22429 0000052B BE[3000]                	mov	si,BCODESTART
 22430                                  	; 02/11/2022
 22431 0000052E 89F7                    	mov	di,si
 22432                                  	; 30/12/2023
 22433                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 22434                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 22435                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 22436                                  	;sub	cx,si
 22437                                  	; 31/03/2024
 22438                                  	BCODESIZE equ BCODEEND-BCODESTART
 22439 00000530 B9401D                  	mov	cx,BCODESIZE
 22440 00000533 D1E9                    	shr	cx,1
 22441 00000535 F3A5                    	rep	movsw			; move Bios_Code into place
 22442                                  
 22443 00000537 8CC0                    	mov	ax,es			; tell it what segment it's in
 22444 00000539 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 22445                                  
 22446                                  ;endif	; not ROMDOS
 22447                                  
 22448                                  ; now call dosinit while it's in its temporary home
 22449                                  
 22450                                  	;mov	ax,cs
 22451                                  	;mov	ds,ax	 
 22452                                  
 22453                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 22454                                  
 22455                                  	; 22/10/2022
 22456                                  
 22457 0000053E 2EC43E[8603]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 22458                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 22459 00000543 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 22460                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 22461                                  
 22462 00000548 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 22463                                  
 22464 0000054D FA                      	cli
 22465 0000054E 8CC8                    	mov	ax,cs
 22466 00000550 8ED0                    	mov	ss,ax
 22467                                  
 22468                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 22469                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 22470                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 22471                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 22472                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 22473                                  ;SYSINIT:0532h: 
 22474                                  
 22475                                  ; 22/10/2022
 22476                                  ; ----------------------------------------------------------------------------
 22477                                  ;SYSINIT:05A6h:
 22478                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 22479                                  
 22480                                  ; 03/09/2023
 22481                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 22482                                  
 22483                                  	;mov	sp,05A6h
 22484 00000552 BC5205                  	mov     sp,locstack		; set stack
 22485                                  
 22486 00000555 FB                      	sti
 22487                                  
 22488                                  ;align 2
 22489                                  	; 30/03/2018
 22490                                  ;LOCSTACK:
 22491                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 22492                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 22493                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 22494                                  
 22495                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22496                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 22497                                  
 22498                                  ; This call to DOSINIT will relocate the DOS data from its present location
 22499                                  ; at the top of memory, to its final location in low memory just above the
 22500                                  ; BIOS data. It will then build important DOS data structures in low 
 22501                                  ; memory following the DOS data. It returns (among many other things) the
 22502                                  ; new starting address of free memory.
 22503                                  
 22504 00000556 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 22505                                  			 ; es:di -> sysinitvars_ext
 22506                                  
 22507 0000055B 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 22508                                  	
 22509                                  	; 11/12/2022
 22510                                  	; 22/03/2019
 22511 00000560 0E                      	push	cs
 22512 00000561 1F                      	pop	ds
 22513                                  	; 22/10/2022
 22514                                  	;mov	[hi_doscod_size],ax
 22515                                  	;mov	[lo_doscod_size],cx
 22516                                  	; 08/03/2025 (MiniDOS)
 22517 00000562 A3[8102]                	mov	[dos_code_size],ax
 22518 00000565 8916[7D02]              	mov	[dos_segreinit],dx
 22519                                  	
 22520                                  	; 11/12/2022
 22521                                  	; ds = cs
 22522                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 22523                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 22524                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 22525                                  
 22526                                  	; 05/06/2018 - Retro DOS v3.0
 22527                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 22528                                  
 22529                                  	; 11/12/2022
 22530                                  	; ds = cs
 22531                                  	; 22/10/2022
 22532                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 22533 00000569 268B05                  	mov	ax,[es:di] ; 22/03/2019
 22534                                  	;mov	[cs:DOSINFO],ax
 22535 0000056C A3[6D02]                	mov	[DOSINFO],ax
 22536                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 22537 0000056F 268B4502                	mov	ax,[es:di+2]
 22538                                  	;mov	[cs:DOSINFO+2],ax
 22539 00000573 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 22540                                  
 22541                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 22542 00000576 268B4504                	mov	ax,[es:di+4]
 22543                                  	;mov	[cs:sysi_country],ax
 22544 0000057A A3[7902]                	mov	[sysi_country],ax
 22545                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 22546 0000057D 268B4506                	mov	ax,[es:di+6]
 22547                                  	;mov	[cs:sysi_country+2],ax
 22548 00000581 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 22549                                  
 22550                                  	; 20/04/2019
 22551                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 22552                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 22553                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 22554                                  	; 22/10/2022
 22555                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 22556                                  	;;;mov	[dos_segreinit+2],es
 22557                                  	;;mov	[dos_segreinit+2],ax
 22558                                  	;mov	[cs:dos_segreinit+2],ax
 22559                                  	; 11/12/2022
 22560                                  	; ds = cs
 22561 00000584 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 22562 00000588 8C06[7F02]              	mov	[dos_segreinit+2],es
 22563                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22564                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 22565                                  	;mov	[cs:dos_segreinit+2],es
 22566                                  
 22567                                  ; ----------------------------------------------------------------------------
 22568                                  
 22569                                  ;SYSINIT:0577h:
 22570                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 22571                                  ;SYSINIT:05D1h:	; NoRPLArena 
 22572                                  
 22573                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 22574                                  ;------ Cover up RPL code with an arena
 22575                                  ;SYSINIT:05EBh:
 22576                                  	; 11/12/2022
 22577                                  	; ds = cs
 22578 0000058C 31DB                    	xor	bx,bx
 22579 0000058E 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 22580                                  	;cmp	word [RPLMemTop],0
 22581                                  	;;cmp	word [cs:RPLMemTop],0
 22582 00000592 7450                    	je	short NoRPLArena
 22583                                  
 22584                                  ;------ alloc all memory
 22585                                  
 22586                                  	; 11/12/2022
 22587                                  	;mov	bx,0FFFFh
 22588 00000594 4B                      	dec	bx
 22589                                  	; bx = 0FFFFh
 22590 00000595 B448                    	mov	ah,48h
 22591 00000597 CD21                    	int	21h
 22592                                  			; DOS - 2+ - ALLOCATE MEMORY
 22593                                  			; BX = number of 16-byte paragraphs desired
 22594 00000599 B448                    	mov	ah,48h
 22595 0000059B CD21                    	int	21h
 22596                                  
 22597 0000059D 8EC0                    	mov	es,ax			; get it into ES and save it
 22598 0000059F 06                      	push	es
 22599                                  
 22600                                  ;------ resize upto RPL mem
 22601                                  
 22602                                  	; 11/12/2022
 22603                                  	; ds = cs
 22604                                  	;sub	ax,[cs:RPLMemTop]
 22605 000005A0 2B06[9402]              	sub	ax,[RPLMemTop]
 22606 000005A4 F7D8                    	neg	ax
 22607 000005A6 48                      	dec	ax
 22608 000005A7 89C3                    	mov	bx,ax
 22609 000005A9 B44A                    	mov	ah,4Ah
 22610 000005AB CD21                    	int	21h
 22611                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 22612                                  			; ES = segment address of block to change
 22613                                  			; BX = new size in paragraphs
 22614                                  
 22615                                  ;------ allocate the free (RPL MEM)
 22616                                  
 22617 000005AD BBFFFF                  	mov	bx,0FFFFh
 22618 000005B0 B448                    	mov	ah,48h
 22619 000005B2 CD21                    	int	21h
 22620 000005B4 B448                    	mov	ah,48h
 22621 000005B6 CD21                    	int	21h
 22622                                  
 22623                                  ;----- mark that it belongs to RPL
 22624                                  
 22625 000005B8 48                      	dec	ax
 22626 000005B9 8EC0                    	mov	es,ax
 22627                                  	;mov	word [es:arena_owner],8
 22628 000005BB 26C70601000800          	mov	word [es:1],8
 22629                                  	;mov	word [es:arena_name],'RP'
 22630 000005C2 26C70608005250          	mov	word [es:8],'RP'
 22631                                  	;mov	word [es:arena_name+2],'L'
 22632 000005C9 26C7060A004C00          	mov	word [es:10],'L'
 22633                                  	;mov	word [es:arena_name+4],0
 22634 000005D0 26C7060C000000          	mov	word [es:12],0
 22635                                  	;mov	word [es:arena_name+6],0
 22636 000005D7 26C7060E000000          	mov	word [es:14],0	
 22637                                  
 22638 000005DE 07                              pop     es                      ; get back ptr to first block
 22639 000005DF B449                            mov     ah,49h	; Dealloc	; and free it
 22640 000005E1 CD21                    	int	21h		
 22641                                  					; DOS - 2+ - FREE MEMORY
 22642                                  					; ES = segment address of area to be freed
 22643                                  	; 11/12/2022
 22644 000005E3 F8                      	clc
 22645                                  
 22646                                  ; ----------------------------------------------------------------------------
 22647                                  
 22648                                  NoRPLArena:
 22649                                  	; 11/12/2022
 22650                                  	; ds = cs
 22651                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 22652 000005E4 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 22653                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 22654                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 22655                                  
 22656                                  	; 11/12/2022
 22657                                  	;clc				; get the extended memory size
 22658                                  
 22659                                  ;	execute the get extended memory size subfunction in the bios int 15h
 22660                                  ;	if the function reports an error do nothing else store the extended
 22661                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 22662                                  ;	currently pointed to by es:di. use the offsets specified in the
 22663                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 22664                                  
 22665 000005E8 B488                    	mov	ah,88h
 22666 000005EA CD15                    	int	15h			; check extended memory size
 22667 000005EC 720B                    	jc	short no_ext_memory
 22668                                  			; Get Extended Memory Size
 22669                                  			; Return: CF clear on success
 22670                                  			; AX = size of memory above 1M in K	
 22671                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 22672                                  	; 22/10/2022
 22673 000005EE 26894545                	mov	[es:di+45h],ax ; save extended memory size
 22674 000005F2 09C0                    	or	ax,ax
 22675 000005F4 7403                    	jz	short no_ext_memory
 22676 000005F6 E8E705                  	call	ClrVDISKHeader
 22677                                  no_ext_memory:
 22678                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 22679 000005F9 268B4510                	mov	ax,[es:di+10h]
 22680                                  	;add	ax,bufinsiz
 22681                                  	; 30/12/2023 - Retro DOS v5.0
 22682                                  	;add	ax,20		; size of buffer header
 22683 000005FD 83C018                  	add     ax,24		; bufinsiz
 22684                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 22685                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 22686                                  	; 11/12/2022
 22687                                  	; ds = cs
 22688 00000600 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 22689                                  	;mov	[cs:singlebuffersize],ax	
 22690                                  	; 11/12/2022
 22691 00000603 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 22692                                  	;mov	al,[cs:DEFAULT_DRIVE]
 22693                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 22694 00000606 26884543                	mov	[es:di+43h],al
 22695                                  
 22696                                  ; determine if 386 system...
 22697                                  
 22698                                  ; 30/12/2023
 22699                                  %if 0
 22700                                  	;get_cpu_type			; macro to determine cpu type
 22701                                  
 22702                                  get_cpu_type:
 22703                                  	; 11/12/2022
 22704                                  	pushf
 22705                                  	;push	bx
 22706                                  	;xor	bx,bx
 22707                                  	; 11/12/2022
 22708                                  	;xor	cx,cx
 22709                                  	;
 22710                                  	xor	ax,ax
 22711                                  	; ax = 0
 22712                                  	push    ax
 22713                                  	popf
 22714                                  	pushf
 22715                                  	pop	ax
 22716                                  	and	ax,0F000h
 22717                                  	;cmp	ax,0F000h
 22718                                  	cmp	ah,0F0h 
 22719                                  	je	short cpu_8086
 22720                                  	;mov	ax,0F000h
 22721                                  	mov	ah,0F0h
 22722                                  	; ax = 0F000h
 22723                                  	push	ax
 22724                                  	popf
 22725                                  	pushf
 22726                                  	pop	ax
 22727                                  	;and	ax,0F000h
 22728                                  	and	ah,0F0h
 22729                                  	jz	short cpu_286
 22730                                  cpu_386:
 22731                                  	; 11/12/2022
 22732                                  	;;inc	bx
 22733                                  	;inc	cx
 22734                                  	; 11/12/2022
 22735                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22736                                  	mov	byte [es:di+44h],1
 22737                                  
 22738                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 22739                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 22740                                  	;push	es
 22741                                  	;push	di
 22742                                  	;mov	ax,DOSBIODATASEG ; 0070h
 22743                                  	;mov	es,ax
 22744                                  	;cld
 22745                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 22746                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 22747                                  	;stosw
 22748                                  	;mov	ax,0F300h      ; repz  ; F3
 22749                                  	;stosw
 22750                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 22751                                  	;stosw
 22752                                  	;pop	di
 22753                                  	;pop	es
 22754                                  
 22755                                  cpu_286:
 22756                                  	;;;inc	bx
 22757                                  	;;inc	cx
 22758                                  cpu_8086:
 22759                                  	; 11/12/2022
 22760                                  	;;mov	ax,bx
 22761                                  	;pop	bx
 22762                                  	popf
 22763                                  %endif
 22764                                  	;...
 22765                                  
 22766                                  	; 11/12/2022
 22767                                  	;or	cl,cl
 22768                                  	;jz	short not_386_system
 22769                                  	; 11/12/202
 22770                                  	;cmp	cl,2
 22771                                  	;;cmp	ax,2			; is it a 386?
 22772                                  	;jne	short not_386_system	; no: don't mess with flag
 22773                                  
 22774                                  	; 30/12/2023 - Retro DOS v5.0
 22775 0000060A 803E[A306]02            	cmp	byte [cpu_type], 2	; is it a 386?
 22776 0000060F 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 22777                                  	
 22778                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22779                                  	; 11/12/2022
 22780                                  	; 22/10/2022
 22781 00000611 26C6454401              	mov	byte [es:di+44h],1
 22782                                  _not_386_cpu:
 22783                                  	;mov	al,[es:di+SYSI_NUMIO]
 22784 00000616 268A4520                	mov	al,[es:di+20h]
 22785                                  	; 11/12/2022
 22786                                  	; ds = cs
 22787 0000061A A2[7C03]                	mov	[drivenumber],al	; save start of installable block drvs
 22788                                  	;mov	[cs:drivenumber],al
 22789                                  
 22790 0000061D 8CC8                    	mov	ax,cs
 22791 0000061F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 22792                                  	; 11/12/2022
 22793                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 22794                                  	;;mov	cx,[cs:singlebuffersize]
 22795                                  	;shr	cx,1			
 22796                                  	;shr	cx,1			; divide size by 16...
 22797                                  	;shr	cx,1
 22798                                  	;shr	cx,1			; ...to get paragraphs...
 22799                                  	;inc	cx			; ... and round up
 22800                                  	; 11/12/2022
 22801 00000622 8B1E[9B02]              	mov	bx,[singlebuffersize]
 22802 00000626 B104                    	mov	cl,4
 22803 00000628 D3EB                    	shr	bx,cl
 22804 0000062A 43                      	inc	bx
 22805                                  
 22806                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 22807                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 22808                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 22809                                  ;	  it is probably safe to assume that the sector size always will be.
 22810                                  ;
 22811                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 22812                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 22813                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 22814                                  ;	  other code from ever causing a problem???
 22815                                  
 22816                                  	; 11/12/2022
 22817 0000062B 29D8                    	sub	ax,bx
 22818                                  	;sub	ax,cx
 22819 0000062D A3[A302]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 22820                                  	; 22/10/2022
 22821                                  	;mov	[cs:top_of_cdss],ax
 22822                                  
 22823                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 22824                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 22825                                  ;	for allocating memory for MagicDrv.
 22826                                  
 22827                                  	; 30/12/2023
 22828                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 22829                                  	;push	di
 22830                                  
 22831                                  	; 22/10/2022
 22832                                  ;	mov	cx,ax			; save pointer for buffer
 22833                                  ;
 22834                                  ;;	now allocate space for 26 CDSs
 22835                                  ;
 22836                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 22837                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22838                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22839                                  
 22840                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 22841                                  	; (SYSINIT:064Ch)
 22842 00000630 89C1                    	mov	cx,ax ; (*)
 22843 00000632 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 22844 00000635 A3[A102]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22845 00000638 A3[9F02]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22846                                  	 	
 22847                                  ; setup and initialize the temporary buffer at cx
 22848                                  
 22849                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 22850 0000063B 26C47D12                	les	di,[es:di+12h]
 22851                                  	; 11/12/2022
 22852 0000063F 31DB                    	xor	bx,bx
 22853                                  	;xor	ax,ax
 22854                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 22855                                  	;mov	word [es:di+4],0
 22856 00000641 26895D04                	mov	[es:di+4],bx ; 0
 22857                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 22858                                  	;mov	word [es:di],0
 22859 00000645 26891D                  	mov	[es:di],bx ; 0
 22860                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 22861                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 22862                                  	;mov	[es:di+2],ax
 22863                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 22864                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 22865 00000648 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 22866 0000064C 8EC1                    	mov	es,cx
 22867                                  
 22868                                  	; 11/12/2022
 22869                                  	;xor	ax,ax
 22870                                  	;mov	di,ax			; es:di -> single buffer
 22871 0000064E 89DF                    	mov	di,bx
 22872                                  	; di = 0
 22873                                  
 22874                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 22875                                  	; 11/12/2022
 22876                                  	;mov	[es:di],ax ; 0
 22877 00000650 26891D                  	mov	[es:di],bx ; 0
 22878                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 22879                                  	; 11/12/2022
 22880                                  	;mov	[es:di+2],ax ; 0
 22881 00000653 26895D02                	mov	[es:di+2],bx ; 0 
 22882                                  
 22883                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 22884                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 22885                                  
 22886                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 22887 00000657 26C74504FF00            	mov	word [es:di+4],00FFh
 22888                                  ;SYSINIT:06E6h
 22889                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 22890                                  	;mov	word [es:di+6],0
 22891                                  	; 11/12/2022
 22892                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 22893 0000065D 26895D06                	mov	[es:di+6],bx ; 0
 22894                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 22895                                  	;mov	word [es:di+8],0
 22896                                  	; 11/12/2022
 22897                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 22898 00000661 26895D08                	mov	[es:di+8],bx ; 0
 22899                                  
 22900                                  	; 30/12/2023 (!*)
 22901                                  	;pop	di			; restore pointer to DOSINFO data
 22902                                  	;pop	es
 22903                                  
 22904                                  	; 11/12/2022
 22905                                  	; ds = cs
 22906                                  	; 22/10/2022
 22907                                  	;push	cs
 22908                                  	;pop	ds
 22909                                  
 22910 00000665 E81F06                  	call	TempCDS			; set up cdss so re_init and sysinit
 22911                                  					;  can make disk system calls
 22912                                  					; tempcds trashes ds
 22913                                  	; 10/05/2019
 22914 00000668 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 22915                                  
 22916                                  	;if not ibmjapver
 22917                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 22918                                  	;endif
 22919                                  
 22920                                  	; 22/10/2022
 22921                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 22922                                  	; 30/12/2022
 22923                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 22924                                  	;call	far ptr 70h:89Bh
 22925 0000066D 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 22926                                  
 22927 00000672 FB                      	sti				; ints ok
 22928 00000673 FC                      	cld				; make sure
 22929                                  
 22930                                  ; 23/03/2019
 22931                                  
 22932                                  ;SYSINIT:069Eh	; 30/12/2022
 22933                                  
 22934                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 22935                                  ; of the way by putting it just below sysinit at end of memory.
 22936                                  
 22937 00000674 8CCB                    	mov	bx,cs
 22938 00000676 83EB10                  	sub	bx,10h
 22939 00000679 8EC3                    	mov	es,bx
 22940 0000067B 31F6                    	xor	si,si
 22941 0000067D 89F7                    	mov	di,si
 22942 0000067F B98000                  	mov	cx,128
 22943 00000682 F3A5                    	rep	movsw
 22944                                  
 22945                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 22946                                  	; 22/10/2022
 22947 00000684 268C063600              	mov	[es:36h],es
 22948                                  
 22949                                   	; Set Process Data Block - Program Segment Prefix address
 22950                                  	; BX = PDB/PSP segment
 22951 00000689 B450                            mov	ah,50h	; SET_CURRENT_PDB
 22952 0000068B CD21                    	int	21h			; tell DOS we moved it
 22953                                  			; DOS - 2+ internal - SET PSP SEGMENT
 22954                                  			; BX = segment address of new PSP
 22955                                  	; 22/10/2022
 22956                                  	; 27/03/2019
 22957                                  	; 30/12/2023
 22958                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 22959                                  
 22960 0000068D 0E                      	push	cs	
 22961 0000068E 1F                      	pop	ds
 22962                                  
 22963                                  	; set up temp. critical error handler
 22964 0000068F BA[D843]                	mov	dx,int24		; set up int 24 handler
 22965                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 22966                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 22967 00000692 B82425                  	mov	ax,2524h
 22968 00000695 CD21                    	int	21h
 22969                                  
 22970 00000697 803E[7F03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 22971 0000069C 7406                            je      short no_err		   ;  N: continue            M029
 22972 0000069E BA[E44C]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 22973                                          ; 22/10/2022
 22974                                  	;call	print 			   ;		             M029
 22975                                  	; 12/12/2022
 22976 000006A1 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 22977                                  
 22978                                  	; 30/12/2023 - Retro DOS v5.0
 22979                                  cpu_type:
 22980 000006A3 FF                      	db 0FFh	; db 0
 22981                                  
 22982                                  no_err:
 22983                                  	; 12/05/2019
 22984                                  	;----------------------------------------------
 22985                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 22986                                  	; 22/10/2022 - Retro DOS v4.0
 22987                                  	; 12/12/2022
 22988                                  	; 30/12/2023 - Retro DOS v5.0
 22989 000006A4 BA[DC43]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 22990                                  p_dosinit_msg:
 22991 000006A7 E8093D                  	call	print			; Print message
 22992                                  	;----------------------------------------------
 22993                                  	
 22994                                  	; 11/12/2022
 22995                                  	; 22/10/2022
 22996                                  	; 23/03/2019 - Retro DOS v4.0
 22997                                  	;pop	ds			; start of free memory
 22998                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 22999                                  	
 23000                                  	; 11/12/2022
 23001                                  	; 27/03/2019
 23002 000006AA 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 23003                                  	; 30/12/2023
 23004                                  	;pop	ds ; */
 23005                                  
 23006 000006AE 08D2                    	or	dl,dl
 23007                                  	; 30/12/2023
 23008 000006B0 7405                    	jz	short nodrvset		; bios didn't say
 23009                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 23010                                  	;dec	dl			; A = 0
 23011                                  	; 18/12/2022
 23012 000006B2 4A                      	dec	dx
 23013 000006B3 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 23014 000006B5 CD21                    	int	21h			; select the disk
 23015                                  			; DOS - SELECT DISK
 23016                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 23017                                  			; Return: AL = number of logical drives
 23018                                  nodrvset:
 23019                                  	; ---------------------
 23020                                  
 23021                                  	;ifdef	dblspace_hooks
 23022                                  	;	....
 23023                                  	;	....
 23024                                  	;endif
 23025                                  
 23026                                  	; ---------------------
 23027                                  
 23028                                  ; ----------------------------------------------------------------------------
 23029                                  
 23030                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 23031                                  
 23032                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 23033                                  ; ----------------------------------------------------------------------------
 23034                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23035                                  ; ----------------------------------------------------------------------------
 23036                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 23037                                  ; ----------------------------------------------------------------------------
 23038                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 23039                                  
 23040                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 23041                                  
 23042                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 23043                                  
 23044                                  ProcessConfig:
 23045                                  	;; ds = cs ; 27/03/2019
 23046                                  	; 11/12/2022
 23047                                  	; ds <> cs	
 23048                                  
 23049                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 23050                                  
 23051 000006B7 E8C818                  	call	doconf			; do pre-scan for dos=high/low
 23052                                  
 23053                                  	; 11/12/2022
 23054                                  	; 27/03/2019
 23055                                  	; ds = cs (at return from doconf)
 23056                                  
 23057                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 23058                                  ; It will either be relocated to low memory, above the DOS data structures,
 23059                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 23060                                  ; code entry points will be located in low memory. Dos_segreinit is used
 23061                                  ; to tell the DOS data where the code has been placed, and to install the
 23062                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 23063                                  ; must first initialize it in its present location and load the installable
 23064                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 23065                                  ; relocate the DOS code into HiMem.
 23066                                  ;
 23067                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 23068                                  ; to install the low memory stub (this must be done before allowing any
 23069                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 23070                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 23071                                  ; been patched.
 23072                                  
 23073                                  	; 22/10/2022 - Retro DOS v4.0
 23074                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 23075                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 23076                                  	; 11/12/2022
 23077 000006BA 803E[6C02]00            	cmp	byte [runhigh],0
 23078 000006BF 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 23079                                  
 23080                                  ;------ user chose to load high
 23081                                  
 23082                                  	; 22/10/2022
 23083                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 23084                                  	; 11/12/2022
 23085                                  	; ds = cs
 23086                                  ; 13/04/2024
 23087                                  %if 0
 23088                                  	mov	es,[CURRENT_DOS_LOCATION]
 23089                                  %endif
 23090                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 23091                                  	; 27/03/2019
 23092                                  	;;mov	es,[FINAL_DOS_LOCATION]
 23093                                  
 23094 000006C1 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 23095                                  
 23096                                  ; 13/04/2024
 23097                                  %if 0	
 23098                                  	; 11/12/2022
 23099                                  	; ds = cs
 23100                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23101                                  	call	far [dos_segreinit]
 23102                                  %endif
 23103 000006C3 EB08                    	jmp	short do_multi_pass
 23104                                  
 23105                                  ;------ User chose to load dos low
 23106                                  
 23107                                  dont_install_stub:
 23108                                  	; 22/10/2022
 23109 000006C5 31DB                    	xor	bx,bx			; M012
 23110                                  					; don't use int 21 call to alloc mem
 23111 000006C7 E8E102                  	call	MovDOSLo		; move it !
 23112                                  
 23113 000006CA B80100                  	mov	ax,1			; dont install stub
 23114                                  
 23115                                  ; 13/04/2024
 23116                                  %if 1
 23117                                  do_multi_pass:
 23118                                  %endif
 23119                                  	; 11/12/2022
 23120                                  	; ds = cs
 23121 000006CD 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23122                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 23123                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23124                                  	; 27/03/2019
 23125                                  ;do_multi_pass:
 23126                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 23127                                  
 23128                                  	; 11/12/2022
 23129                                  	; ds =cs
 23130                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 23131 000006D1 FF1E[7D02]              	call	far [dos_segreinit]
 23132                                  
 23133                                  ; 13/04/2024
 23134                                  %if 0
 23135                                  do_multi_pass:
 23136                                  %endif
 23137                                  
 23138 000006D5 E81D02                  	call	AllocFreeMem		; allocate all the free mem
 23139                                  					; & update [memhi] & [area]
 23140                                  					; start of free memory.
 23141                                  	;ifdef	dblspace_hooks
 23142                                  	;mov	bx,0			; magic backdoor to place int hooks
 23143                                  	;call	cs:MagicBackdoor
 23144                                  	;endif
 23145                                  
 23146                                  ; 07/03/2025
 23147                                  %if 0
 23148                                  	; 07/04/2024 - Retro DOS v5.0
 23149                                  	; (PCDOS 7.1 IBMBIO.COM)
 23150                                  	;cmp	byte [cs:F5_key],1
 23151                                  	cmp	byte [F5_key],1
 23152                                  	je	short skip_magicbackdoor
 23153                                  	;cmp	byte [cs:F8_key],1
 23154                                  	cmp	byte [F8_key],1
 23155                                  	je	short skip_magicbackdoor
 23156                                  	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 23157                                  	;call	far [cs:MagicBackdoor]
 23158                                  	call	far [MagicBackdoor]
 23159                                  
 23160                                  skip_magicbackdoor:
 23161                                  %endif
 23162                                  
 23163                                  ; Now, process config.sys some more.  
 23164                                  ; Load the device drivers and install programs
 23165                                  
 23166                                  	; 22/10/2022
 23167                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 23168                                  	; 11/12/2022
 23169                                  	; ds = cs
 23170 000006D8 FE06[C902]              	inc	byte [multi_pass_id]
 23171 000006DC E83F19                  	call	multi_pass		; load device drivers
 23172 000006DF E8AE2C                  	call	ShrinkUMB
 23173 000006E2 E8D22C                  	call	UnlinkUMB		; unlink all UMBs	;M002
 23174                                  	; 02/11/2022
 23175                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 23176                                  	; 11/12/2022
 23177                                  	; ds = cs
 23178 000006E5 FE06[C902]              	inc	byte [multi_pass_id]
 23179 000006E9 E83219                  	call	multi_pass		; was load ifs (now does nothing)
 23180                                  
 23181                                  	;ifdef	dblspace_hooks
 23182                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 23183                                  	;endif
 23184                                  
 23185                                  	; ds = cs
 23186                                  
 23187                                  	; 07/04/2024
 23188                                  	;call	endfile			; setup fcbs, files, buffers etc
 23189                                  
 23190                                  	;ifdef	dblspace_hooks
 23191                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 23192                                  	;endif
 23193                                  
 23194                                  ; 07/03/2025
 23195                                  %if 0
 23196                                  	; 07/04/2024 - Retro DOS v5.0
 23197                                  	; (PCDOS 7.1 IBMBIO.COM)
 23198                                  	;cmp	byte [cs:F5_key],1
 23199                                  	cmp	byte [F5_key],1
 23200                                  	je	short skip_magicpostload
 23201                                  	;cmp	byte [cs:F8_key],1
 23202                                  	cmp	byte [F8_key],1
 23203                                  	je	short skip_magicpostload
 23204                                  	call	MagicPostload		; make sure Magicdrv is final placed
 23205                                  	; 13/04/2024
 23206                                  	; ds = cs
 23207                                  	call	endfile			; setup fcbs, files, buffers etc
 23208                                  	call	MagicSetCdss		; disable CDSs of reserved drives
 23209                                  	; ds = cs
 23210                                  	jmp	short _@_
 23211                                  
 23212                                  skip_magicpostload:
 23213                                  %endif
 23214                                  
 23215                                  	; 13/04/2024
 23216                                  	; ds = cs
 23217 000006EC E83606                  	call	endfile			; setup fcbs, files, buffers etc
 23218                                  _@_:
 23219                                  
 23220                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 23221                                  ;to device drivers. This has been moved up to this point to avoid problems 
 23222                                  ;with overlays called from installed programs
 23223                                  
 23224                                  	; 11/12/2022
 23225                                  	; ds = cs
 23226                                  
 23227                                  	;;mov	ax,Bios_Data ; 0070h
 23228                                  	;mov	ax,KERNEL_SEGMENT
 23229                                  	; 21/10/2022
 23230 000006EF B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23231 000006F2 8EC0                    	mov	es,ax			; point ES to bios data
 23232                                  
 23233 000006F4 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 23234                                  
 23235                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23236                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 23237                                  	;test	byte [cs:install_flag],1
 23238                                  	; 11/12/2022
 23239                                  	; ds = cs
 23240 000006FA F606[CA02]01            	test	byte [install_flag],1
 23241                                  	;test	byte [cs:install_flag],have_install_cmd
 23242                                  					; are there install commands?
 23243 000006FF 7407                    	jz	short dolast		; no, no need for further processing
 23244                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 23245                                  	; 11/12/2022
 23246                                  	; ds =cs
 23247 00000701 FE06[C902]              	inc	byte [multi_pass_id]
 23248 00000705 E81619                  	call	multi_pass		; execute install= commands
 23249                                  
 23250                                  dolast:
 23251                                  	
 23252                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 23253                                  ;  free the confbot area used for config.sys and sysinit itself.
 23254                                  
 23255                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 23256                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 23257                                  ; anything, but just set up the ROM area for suballocation (or print
 23258                                  ; a message if HiMem is not available).
 23259                                  ;
 23260                                  ; There is also this little hack for CPM style DOS calls that needs to
 23261                                  ; be done when A20 is set...
 23262                                  
 23263                                  	; 11/12/2022
 23264                                  	; ds = cs
 23265                                  
 23266                                  	; 22/10/2022
 23267                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 23268                                  	; 11/12/2022
 23269 00000708 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 23270 0000070D 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 23271 0000070F E84802                  	call	LoadDOSHiOrLo
 23272                                  _@@_:
 23273                                  	;cmp	byte [cs:runhigh],0	; are we running low
 23274                                  	; 11/12/2022
 23275                                  	; ds = cs
 23276 00000712 803E[6C02]00            	cmp	byte [runhigh],0
 23277                                  	;je	short _@@@
 23278 00000717 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 23279 00000719 E84C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 23280                                  _@@@:
 23281                                  
 23282                                  ; We are now done with CONFIG.SYS processing
 23283                                  
 23284                                  ConfigDone:
 23285                                  	; 12/12/2022
 23286                                  	; 22/10/2022
 23287                                  	;mov	byte [cs:donotshownum],1 
 23288                                  					; done with config.sys.
 23289                                  					; do not show line number message.
 23290                                  	;mov	es,[cs:area]
 23291                                  	; 12/12/2022
 23292                                  	; ds = cs
 23293                                  	; 27/03/2019
 23294 0000071C C606[5103]01            	mov	byte [donotshownum],1
 23295 00000721 8E06[6403]              	mov	es,[area]
 23296                                  
 23297 00000725 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 23298 00000727 CD21                    	int	21h
 23299                                  			; DOS - 2+ - FREE MEMORY
 23300                                  			; ES = segment address of area to be freed
 23301                                  
 23302                                  	; 22/10/2022
 23303                                  	;test	word [cs:install_flag],2
 23304                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 23305                                  	;test	byte [cs:install_flag],has_installed
 23306                                  	; 11/12/2022
 23307                                  	; ds = cs
 23308 00000729 F606[CA02]02            	test	byte [install_flag],2 ; has_installed
 23309                                  	;test	byte [install_flag],has_installed
 23310 0000072E 741F                    	jz	short skip_free_sysinitbase ; no.
 23311                                  
 23312                                  ; set block from the old_area with impossible_owner_size.
 23313                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 23314                                  ; handle install= command.
 23315                                  
 23316                                  	; 12/12/2022
 23317                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23318                                  	;push	bx
 23319                                  	
 23320                                  	; 22/10/2022
 23321                                  	;mov	es,[cs:old_area]
 23322                                  	;mov	bx,[cs:impossible_owner_size]
 23323                                  	; 12/12/2022
 23324                                  	; ds = cs
 23325 00000730 8E06[5A03]              	mov	es,[old_area]
 23326 00000734 8B1E[5C03]              	mov	bx,[impossible_owner_size]
 23327                                  	
 23328 00000738 B44A                    	mov	ah,4Ah ; SETBLOCK
 23329 0000073A CD21                    	int	21h
 23330                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23331                                  			; ES = segment address of block to change
 23332                                  			; BX = new size in paragraphs
 23333 0000073C 8CC0                    	mov	ax,es
 23334 0000073E 48                      	dec	ax
 23335 0000073F 8EC0                    	mov	es,ax			; point to arena
 23336                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 23337 00000741 26C70601000800          	mov	word [es:1],8
 23338                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 23339 00000748 26C70608005344          	mov	word [es:8],'SD'
 23340                                  	
 23341                                  	; 12/12/2022
 23342                                  	;pop	bx
 23343                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23344                                  
 23345                                  skip_free_sysinitbase:
 23346                                  	; 22/10/2022
 23347                                  	;cmp	byte [cs:runhigh],0
 23348                                  	; 12/12/2022
 23349                                  	; ds = cs
 23350 0000074F 803E[6C02]00            	cmp	byte [runhigh],0	
 23351 00000754 7403                    	je	short _@@@_ ; 04/07/2023
 23352                                  
 23353 00000756 E8DF03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 23354                                  
 23355                                  ; ----------------------------------------------------------------------------
 23356                                  
 23357                                  _@@@_:
 23358                                  	; 12/12/2022
 23359                                  	; ds = cs
 23360                                  	; 22/10/2022
 23361                                  	; 27/03/2019
 23362                                  	;push	cs
 23363                                  	;pop	ds			; point DS to sysinitseg
 23364                                  
 23365                                  ; set up the parameters for command
 23366                                  
 23367                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23368                                  ;;ifdef	MULTI_CONFIG
 23369                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 23370                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 23371                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 23372                                  ;	; !!!
 23373                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23374                                  ;       ; !!!
 23375                                  ;	call    disable_autoexec        ; no, we should disable it
 23376                                  ;process_autoexec:
 23377                                  ;;endif	; !!!
 23378                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23379                                  ;	; !!!
 23380                                  
 23381                                  	; 22/10/2022 
 23382                                  	;mov     cl,[command_line]
 23383                                          ;mov     ch,0
 23384                                          ;inc     cx
 23385                                          ;mov     si,command_line	
 23386                                  	;add     si,cx
 23387                                          ;mov     byte [si],cr	; cr-terminate command line
 23388                                  
 23389                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23390                                  	; (SYSINIT:0809h)
 23391                                  
 23392                                  	;;;;
 23393                                  
 23394                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23395                                  	; (SYSINIT:0813h)
 23396                                  	; ds = cs
 23397                                  	; push	cs
 23398                                  	; pop	ds
 23399                                  
 23400 00000759 C606[D314]00            	mov	byte [config_cmd],0	; set special code for query_user
 23401 0000075E E81A38                  	call    query_user		; to issue the AUTOEXEC prompt
 23402                                  	; 07/04/2024
 23403                                  	;jnc	short process_autoexec	; we should process autoexec normally
 23404                                  
 23405                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23406                                  	;;;
 23407 00000761 9C                      	pushf
 23408 00000762 F606[E045]01            	test	byte [bDisableUI],1
 23409 00000767 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 23410 00000769 803E[8403]01            	cmp	byte [F5_key],1
 23411 0000076E 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 23412                                  _@@@@_:
 23413 00000770 9D                      	popf
 23414 00000771 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 23415 00000773 EB01                    	jmp	short bypass_autoexec
 23416                                  _@@@@@_:
 23417 00000775 9D                      	popf			; cf status at the return from 'query_user' call
 23418                                  bypass_autoexec:
 23419                                  	;;;
 23420                                  
 23421                                  	; !!!
 23422 00000776 800E[E445]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23423                                  	; !!!
 23424 0000077B E8F838                  	call    disable_autoexec        ; no, we should disable it
 23425                                  process_autoexec:
 23426                                  	; !!!
 23427 0000077E E84039                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23428                                  
 23429                                  	;mov     cl,[command_line]
 23430                                  	; 30/12/2022
 23431 00000781 BE[1A45]                	mov	si,command_line
 23432 00000784 8A0C                    	mov	cl,[si]
 23433 00000786 B500                    	mov     ch,0
 23434 00000788 41                      	inc     cx
 23435                                  	;mov	si,command_line
 23436 00000789 01CE                    	add     si,cx
 23437 0000078B C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 23438                                  	
 23439                                  	;;;;		
 23440                                  
 23441                                  ; 30/12/2022 - Retro DOS v4.2
 23442                                  %if 0
 23443                                  	;mov	si,(offset command_line+1)
 23444                                  	mov	si,command_line+1
 23445                                  	push    ds
 23446                                  	pop     es
 23447                                  	mov     di,si
 23448                                  	mov     cl,0FFh ; -1
 23449                                  _@_loop:
 23450                                  	inc     cl ; +1
 23451                                  	lodsb
 23452                                  	stosb
 23453                                  	or      al,al
 23454                                  	jnz     short _@_loop
 23455                                  	dec     di
 23456                                  	mov     al,0Dh
 23457                                  	stosb			; cr-terminate command line
 23458                                  	mov     [command_line],cl ; command line length (except CR)
 23459                                  %endif
 23460                                  
 23461                                  ; ----------------------------------------------------------------------------
 23462                                  
 23463                                  ;   Once we get to this point, the above code, which is below "retry"
 23464                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 23465                                  ;   which follow....)
 23466                                  
 23467                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 23468 0000078E BA[8C44]                	mov	dx,commnd	; now pointing to file description
 23469                                  
 23470                                  ; we are going to open the command interpreter and size it as is done in
 23471                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 23472                                  ; there is not enough room for the command interpreter,exec will probably
 23473                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 23474                                  ; here to catch it. this code is not perfect (for instance .exe command
 23475                                  ; interpreters are possible) because it does its sizing based on the
 23476                                  ; assumption that the file being loaded is a .com file. it is close enough to
 23477                                  ; correctness to be usable.
 23478                                  
 23479                                  ; first, find out where the command interpreter is going to go.
 23480                                  
 23481 00000791 52                      	push	dx		; save pointer to name
 23482 00000792 BBFFFF                  	mov	bx,0FFFFh
 23483 00000795 B448                    	mov	ah,48h	; ALLOC
 23484 00000797 CD21                            int     21h             ; get biggest piece
 23485 00000799 B448                    	mov	ah,48h	; ALLOC
 23486 0000079B CD21                    	int	21h		; second time gets it
 23487 0000079D 726B                    	jc	short memerrjx	; oooops
 23488                                  
 23489 0000079F 8EC0                    	mov	es,ax
 23490 000007A1 B449                    	mov	ah,49h	; DEALLOC
 23491 000007A3 CD21                    	int	21h		; give it right back
 23492 000007A5 89DD                    	mov	bp,bx
 23493                                  
 23494                                  ; es:0 points to block,and bp is the size of the block in para.
 23495                                  
 23496                                  ; we will now adjust the size in bp down by the size of sysinit.
 23497                                  ; we need to do this because exec might get upset if some of the exec
 23498                                  ; data in sysinit is overlayed during the exec.
 23499                                  
 23500                                  	; 22/10/2022
 23501                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 23502 000007A7 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 23503 000007AB 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 23504                                  
 23505                                  ; Note that the "config_wrkseg" environment data is a segment in
 23506                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 23507                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 23508                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 23509                                  ; we need to make sure that there's no way Exec will stomp on that data
 23510                                  ; before it can copy it, and one way to do that is to make the available
 23511                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 23512                                  ; from the "memory_size" segment value (which is typically A000h) instead
 23513                                  ; of the current sysinit CS....
 23514                                  ;
 23515                                  ; The reason I use the term "paranoid" is because this code should have
 23516                                  ; slid the data required by Exec up to the very top of memory, because as
 23517                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 23518                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 23519                                  ; consumes). Now it's just a little worse (65K or more, depending on
 23520                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 23521                                  ; is determined by the size of CONFIG.SYS.... -JTP
 23522                                  
 23523                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 23524                                  	; (SYSINIT:0858h)
 23525 000007AD 8B0E[CF14]              	mov	cx,[config_envlen]
 23526 000007B1 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 23527 000007B3 A1[D114]                        mov	ax,[config_wrkseg]	
 23528                                  
 23529                                  	; 22/10/2022
 23530                                  	;mov	cx,[config_envlen]
 23531                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 23532                                          ;mov	ax,[config_wrkseg]
 23533                                  ;no_env:
 23534                                  	; 22/10/2022
 23535                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 23536                                  no_env:
 23537                                  	; 30/12/2022
 23538                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 23539 000007B6 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 23540 000007B8 83C311                  	add	bx,11h		; add the sysinit php
 23541 000007BB 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 23542 000007BD 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 23543                                  
 23544                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 23545 000007BF B8003D                          mov	ax,3D00h
 23546 000007C2 F9                      	stc                     ; in case of int 24
 23547 000007C3 CD21                    	int	21h
 23548 000007C5 7271                    	jc	short comerr	; ooops
 23549                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 23550                                  			; DS:DX -> ASCIZ filename
 23551                                  			; AL = access mode
 23552                                  			; 0 - read
 23553                                  	; 22/10/2022
 23554                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 23555 000007C7 89C3                            mov     bx,ax           ; handle in bx
 23556                                  
 23557                                  ;   If the standard command interpreter is being used, verify it is correct
 23558                                  
 23559                                  	; 30/12/2022 - Retro DOS v4.2
 23560                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 23561 000007C9 803E[8944]00            	cmp	byte [newcmd],0	; was a new shell selected?
 23562 000007CE 7518                    	jne	short skip_validation ; yes
 23563                                  	; 07/04/2024 - Retro DOS v5.0
 23564                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 23565 000007D0 BA[8A07]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 23566 000007D3 B90400                  	mov	cx,4		;
 23567 000007D6 B43F                    	mov	ah,READ		;
 23568 000007D8 CD21                    	int	21h		;
 23569 000007DA 803E[8A07]E9            	cmp	byte [retry-4],0E9h
 23570 000007DF 7557                    	jne	short comerr
 23571                                  	; 20/04/2019 - Retro DOS v4.0
 23572                                  	; 30/12/2022 
 23573                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23574                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 23575                                  	; 07/04/2024 - Retro DOS v5.0
 23576                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 23577                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 23578                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 23579 000007E1 803E[8D07]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23580 000007E6 7550                    	jne	short comerr	;
 23581                                  
 23582                                  	; 22/10/2022
 23583                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 23584                                  	;jne	short skip_validation ; yes
 23585                                  	;mov	dx,retry-4
 23586                                  	;mov	cx,4		;
 23587                                  	;mov	ah,READ		;
 23588                                  	;int	21h		;
 23589                                  	;cmp	byte [retry-4],0E9h
 23590                                  	;jne	short comerr
 23591                                  	;; 20/04/2019 - Retro DOS v4.0
 23592                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23593                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23594                                  	;jne	short comerr	;
 23595                                  
 23596                                  ;skip_validation:
 23597                                  	; 22/10/2022
 23598                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 23599                                  skip_validation:
 23600                                  	; 30/12/2022
 23601                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 23602 000007E8 31C9                    	xor	cx,cx
 23603 000007EA 31D2                    	xor	dx,dx
 23604                                  	;mov	ax,(LSEEK<<8)|2
 23605 000007EC B80242                  	mov	ax,4202h
 23606 000007EF F9                      	stc			; in case of int 24
 23607 000007F0 CD21                    	int	21h		; get file size in dx:ax
 23608 000007F2 7244                    	jc	short comerr
 23609                                  				; convert size in dx:ax to para in ax
 23610 000007F4 83C00F                  	add	ax,15		; round up size for conversion to para
 23611 000007F7 83D200                  	adc	dx,0
 23612 000007FA E88104                  	call	off_to_para
 23613 000007FD B10C                    	mov	cl,12
 23614 000007FF D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 23615 00000801 09D0                    	or	ax,dx		; ax is now # of para for file
 23616 00000803 83C010                  	add	ax,10h		; 100h byte php
 23617 00000806 39E8                    	cmp	ax,bp		; will command fit in available mem?
 23618 00000808 7208                    	jb	short okld	; jump if yes.
 23619                                  
 23620                                  ; 30/12/2022
 23621                                  %if 0
 23622                                  	; 22/10/2022
 23623                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 23624                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 23625                                  	; 02/11/2022
 23626                                  	;jmp	mem_err
 23627                                  	; 11/12/2022
 23628                                  	; ds = cs
 23629                                  	jmp	mem_err2
 23630                                  %endif
 23631                                  	; 30/12/2022
 23632                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 23633                                  memerrjx:
 23634 0000080A BA[8F4A]                	mov	dx,badmem 	; "Configuration too large for memory"
 23635 0000080D E8A33B                  	call	print
 23636 00000810 EB3A                    	jmp     short continue
 23637                                  
 23638                                  okld:
 23639 00000812 B43E                    	mov	ah,3Eh ; CLOSE
 23640 00000814 CD21                    	int	21h		; close file
 23641                                  
 23642                                  	; 22/10/2022
 23643 00000816 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 23644                                  
 23645                                  	; 24/03/2019
 23646                                  
 23647 00000817 0E                      	push	cs		; point es to sysinitseg
 23648 00000818 07                      	pop	es
 23649 00000819 BB[BB02]                        mov     bx,COMEXE	; point to exec block
 23650                                  	; 22/10/2022
 23651                                  	;pop	dx              ; recover pointer to name
 23652                                  
 23653                                  ;;ifdef	MULTI_CONFIG
 23654                                  
 23655                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 23656                                  ;   there will be data if there were any valid SET commands and/or if a menu
 23657                                  ;   selection was made (in which case the CONFIG environment variable will be
 23658                                  ;   set to that selection).
 23659                                  
 23660                                  	; 23/10/2022
 23661                                  	;mov	cx,[config_envlen]
 23662                                  	;jcxz	no_envdata
 23663                                          ;mov	cx,[config_wrkseg]
 23664                                  ;no_envdata:
 23665                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 23666                                  	;mov	[bx],cx
 23667                                  
 23668                                  ;;endif	;MULTI_CONFIG
 23669                                  
 23670                                  	; 30/12/2022 - Retro DOS v4.2
 23671                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 23672 0000081C 8B0E[CF14]              	mov	cx,[config_envlen]
 23673 00000820 E304                    	jcxz	no_envdata
 23674 00000822 8B0E[D114]                      mov	cx,[config_wrkseg]
 23675                                  no_envdata:
 23676                                  	;mov	[bx+EXEC0.ENVIRON],cx
 23677 00000826 890F                    	mov	[bx],cx	
 23678                                  	
 23679                                  	; 23/10/2022
 23680                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 23681                                  
 23682                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 23683 00000828 8C4F04                  	mov	[bx+4],cs
 23684                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 23685 0000082B 8C4F08                  	mov	[bx+8],cs
 23686                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 23687 0000082E 8C4F0C                  	mov	[bx+12],cs
 23688                                  
 23689                                  	;mov	ax,(EXEC<<8) + 0
 23690                                  	; 23/10/2022
 23691                                  	;xor	ax,ax
 23692                                  	;mov	ah,4Bh
 23693                                  	; 04/07/2023
 23694                                  	;mov	ax,4B00h
 23695 00000831 B8004B                  	mov	ax,(EXEC<<8)
 23696                                  
 23697 00000834 F9                      	stc                     ; in case of int 24
 23698 00000835 CD21                            int     21h             ; go start up command
 23699                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 23700                                  			; DS:DX -> ASCIZ filename
 23701                                  			; ES:BX -> parameter block
 23702                                  			; AL = subfunc: load & execute program
 23703                                  	;push	cs
 23704                                  	;pop	ds
 23705                                  
 23706                                  	; 13/04/2024
 23707                                  	; 23/10/2022
 23708 00000837 52                      	push	dx		; push to balance fall-through pop
 23709                                  
 23710                                  ; note fall through if exec returns (an error)
 23711                                  comerr:
 23712                                  	; 23/10/2022
 23713                                  ;;ifdef	MULTI_CONFIG
 23714                                  	;cmp	byte [commnd4],0
 23715                                  	;je	short comerr2	; all defaults exhausted, print err msg
 23716                                  	;cmp	byte [newcmd],0
 23717                                  	;je	short continue	; don't print err msg for defaults just yet
 23718                                  ;comerr2:
 23719                                  ;;endif
 23720                                  
 23721                                  	; 30/12/2022 - Retro DOS v4.2
 23722                                  	;push	cs
 23723                                  	;pop	ds
 23724                                  	; 07/04/2024
 23725                                  	; ds = cs
 23726                                  
 23727 00000838 803E[FD44]00            	cmp	byte [commnd4],0
 23728 0000083D 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 23729 0000083F 803E[8944]00            	cmp	byte [newcmd],0
 23730 00000844 7406                    	je	short continue	; don't print err msg for defaults just yet
 23731                                  comerr2:
 23732                                  	; 07/04/2024
 23733                                  	;push	dx ; 30/12/2022
 23734                                  
 23735                                  	; 23/10/2022
 23736 00000846 BA[0B4A]                        mov     dx,badcom	; want to print command error
 23737 00000849 E83B3B                  	call	badfil
 23738                                  	
 23739                                  	; 07/04/2024
 23740                                  	;pop	dx  ; 30/12/2022
 23741                                  continue:
 23742                                  	; 13/04/2024
 23743                                  	; 23/10/2022
 23744 0000084C 5A                      	pop	dx
 23745                                  
 23746                                  ; 30/12/2022
 23747                                  %if 0
 23748                                  
 23749                                  ;;ifndef MULTI_CONFIG
 23750                                  	;jmp	stall
 23751                                  	; 24/10/2022
 23752                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 23753                                  	jmp	short stall
 23754                                  ;;else
 23755                                  
 23756                                  %endif
 23757                                  	
 23758                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 23759                                  ;%if 1
 23760                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 23761                                  ;%if 0	
 23762 0000084D B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 23763 0000084F CD21                    	int	21h             ;
 23764 00000851 0441                    	add	al,'A'          ;
 23765 00000853 88C2                    	mov	dl,al           ; DL == default drive letter
 23766 00000855 BE[CC44]                	mov	si,commnd2
 23767 00000858 803E[8944]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 23768 0000085D 7505                    	jne	short do_def2	; then try the 2nd alternate;
 23769 0000085F C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 23770 00000862 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 23771                                  do_def2:			
 23772 00000864 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 23773 00000867 7554                            jne	short do_alt    ; no
 23774                                  do_def3:
 23775 00000869 BE[DD44]                	mov	si,commnd3
 23776 0000086C 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 23777 0000086F 754C                    	jne	short do_alt	; no
 23778 00000871 BE[FD44]                	mov	si,commnd4
 23779 00000874 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 23780 00000877 7544                    	jne	short do_alt	; no
 23781 00000879 52                      	push	dx              ;
 23782 0000087A BA[7E4C]                	mov	dx,badcomprmpt
 23783 0000087D E8333B                  	call	print		;
 23784 00000880 5A                      	pop	dx              ; recover default drive letter in DL
 23785                                  request_input:			;
 23786 00000881 B402                    	mov	ah,STD_CON_OUTPUT
 23787 00000883 CD21                    	int	21h             ;
 23788 00000885 52                      	push	dx              ;
 23789 00000886 B23E                    	mov	dl,'>'          ;
 23790 00000888 CD21                    	int	21h             ;
 23791 0000088A 8A1E[8B44]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 23792 0000088E B700                    	mov	bh,0            ;
 23793 00000890 C687[8C44]0D            	mov	byte [commnd+bx],0Dh
 23794 00000895 BA[8A44]                	mov	dx,tmplate
 23795 00000898 B40A                    	mov	ah,STD_CON_STRING_INPUT
 23796 0000089A CD21                    	int	21h             ; read a line of input
 23797 0000089C BA[B649]                	mov	dx,crlfm	;
 23798 0000089F E8113B                  	call	print           ;
 23799 000008A2 5A                      	pop	dx              ;
 23800 000008A3 8A1E[8B44]              	mov	bl,[tmplate+1]	;
 23801 000008A7 08DB                    	or	bl,bl           ; was anything typed?
 23802 000008A9 74D6                    	jz	short request_input ;
 23803 000008AB C606[8944]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 23804 000008B0 C687[8C44]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 23805 000008B5 C706[1A45]000D          	mov	word [command_line],0D00h
 23806 000008BB EB35                    	jmp	short do_exec   ;
 23807                                  do_alt:
 23808 000008BD 1E                      	push	ds
 23809 000008BE 07                      	pop	es
 23810 000008BF C606[8944]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 23811 000008C4 BF[8C44]                	mov	di,commnd	;
 23812                                  do_alt1:
 23813 000008C7 AC                      	lodsb			; copy the alternate, zapping it as we go,
 23814 000008C8 C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 23815 000008CC AA                      	stosb 			;
 23816 000008CD 08C0                    	or	al,al		;
 23817 000008CF 75F6                    	jnz	short do_alt1	;
 23818 000008D1 BF[1A45]                	mov	di,command_line
 23819 000008D4 807C023A                	cmp	byte [si+2],':'
 23820 000008D8 7503                    	jne	short do_alt2	;
 23821 000008DA 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 23822                                  do_alt2:			;
 23823 000008DD AC                      	lodsb			;
 23824 000008DE AA                      	stosb			;
 23825 000008DF 08C0                    	or	al,al           ;
 23826 000008E1 75FA                    	jnz	short do_alt2   ;
 23827 000008E3 C645FF0D                	mov	byte [di-1],cr
 23828                                  
 23829                                  ;;   Last but not least, see if we need to call disable_autoexec
 23830                                  
 23831                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 23832                                  	;cmp	[command_line-1],0
 23833                                          ;jne	short do_exec   ;
 23834                                          ;mov	[command_line-1],'/'
 23835                                  	;call	disable_autoexec ;
 23836                                  
 23837                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 23838 000008E7 C606[DA45]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 23839 000008EC E88737                  	call	disable_autoexec
 23840 000008EF E8CF37                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 23841                                  do_exec:
 23842 000008F2 E999FE                  	jmp	retry		;
 23843                                  
 23844                                  ;;endif	;MULTI_CONFIG
 23845                                  
 23846                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 23847                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23848                                  
 23849                                  ; 24/03/2019 - Retro DOS v4.0
 23850                                  
 23851                                  ; ----------------------------------------------------------------------
 23852                                  ; procedure : AllocFreeMem
 23853                                  ;
 23854                                  ; Allocate Max memory from DOS to find out where to load DOS.
 23855                                  ; DOS is at temporary location when this call is being made
 23856                                  ;
 23857                                  ; Inputs : None
 23858                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 23859                                  ;	   [area] & [memhi] set to the para value of the start of the
 23860                                  ;	   free memory.
 23861                                  ;
 23862                                  ; Uses   : AX, BX
 23863                                  ;
 23864                                  ; ----------------------------------------------------------------------
 23865                                  	
 23866                                  	; 30/12/2022 - Retro DOS v4.2
 23867                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 23868                                  
 23869                                  	; 08/04/2024 - Retro DOS v5.0
 23870                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 23871                                  
 23872                                  	; 23/10/2022
 23873                                  AllocFreeMem:
 23874 000008F5 BBFFFF                  	mov	bx,0FFFFh
 23875 000008F8 B448                    	mov	ah,48h ; ALLOC
 23876 000008FA CD21                    	int	21h			; first time fails
 23877 000008FC B448                    	mov	ah,48h ; ALLOC
 23878 000008FE CD21                    	int	21h			; second time gets it
 23879                                  	; 11/12/2022
 23880                                  	; ds = cs
 23881                                  	;mov	[cs:area],ax
 23882                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 23883 00000900 A3[6403]                	mov	[area],ax
 23884 00000903 A3[6003]                	mov	[memhi],ax		; memhi:memlo now points to			
 23885 00000906 C3                      	retn				; start of free memory
 23886                                  				
 23887                                  	; include msbio.cl6
 23888                                  ; ----------------------------------------------------------------------
 23889                                  DOSLOMSG:
 23890 00000907 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 23890 00000910 7661696C61626C653A-
 23890 00000919 204C6F6164696E6720-
 23890 00000922 444F53206C6F770D0A-
 23890 0000092B 24                 
 23891                                  FEmsg:
 23892 0000092C 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 23892 00000935 6F723A2043616E6E6F-
 23892 0000093E 7420616C6C6F636174-
 23892 00000947 65204D656D6F727920-
 23892 00000950 666F7220444F530D0A-
 23892 00000959 24                 
 23893                                  
 23894                                  ; ----------------------------------------------------------------------
 23895                                  ;
 23896                                  ; procedure : LoadDOSHiOrLo
 23897                                  ;
 23898                                  ;		Tries to move DOS into HMA. If it fails then loads
 23899                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 23900                                  ;		moved; this just tries to allocate the HMA, and prints
 23901                                  ;		a message if this is not possible.
 23902                                  ;
 23903                                  ; ----------------------------------------------------------------------
 23904                                  
 23905                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23906                                  LoadDOSHiOrLo:
 23907                                  	; 27/03/2019 - Retro DOS v4.0
 23908                                  	; ds = cs
 23909 0000095A E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 23910                                  	;jc	short LdngLo		; If that don't work...
 23911                                  	;retn
 23912                                  	; 18/12/2022
 23913 0000095D 731C                    	jnc	short LoadDosHi_ok
 23914                                  LdngLo:
 23915                                  	; 23/10/2022
 23916                                  	;push	cs
 23917                                  	;pop	ds
 23918                                  	; 11/12/2022
 23919                                  	; ds = cs
 23920 0000095F B409                    	mov	ah,9
 23921 00000961 BA[0709]                	mov	dx,DOSLOMSG		; inform user that we are
 23922 00000964 CD21                    	int	21h			; loading low
 23923                                  
 23924                                  ;ifndef ROMDOS
 23925                                  	; actually move the dos, and reinitialize it.
 23926                                  
 23927 00000966 BB0100                  	mov	bx,1				; M012
 23928                                  						;  use int 21 alloc for mem
 23929 00000969 E83F00                  	call	MovDOSLo
 23930                                  	; 11/12/2022
 23931                                  	; ds = cs
 23932                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 23933                                  	; 23/10/2022
 23934 0000096C 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23935                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 23936                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 23937 00000970 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 23938                                  	; 11/12/2022
 23939                                  	; ds = cs
 23940                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 23941 00000972 FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 23942                                  	
 23943                                  ;endif ; ROMDOS
 23944                                  	; 23/10/2022
 23945                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 23946                                  	; 11/12/2022
 23947                                  	; ds = cs
 23948 00000976 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 23949                                  LoadDosHi_ok:	; 18/12/2022
 23950 0000097B C3                      	retn
 23951                                  
 23952                                  ; ----------------------------------------------------------------------
 23953                                  ;
 23954                                  ; procedure : TryToMovDOSHi
 23955                                  ;
 23956                                  ;		This tries to move DOS into HMA.
 23957                                  ;		Returns CY if it failed.
 23958                                  ;		If it succeeds returns with carry cleared.
 23959                                  ;
 23960                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 23961                                  ;		the A20 switching code in the low mem stub to be installed.
 23962                                  ; 
 23963                                  ; ----------------------------------------------------------------------
 23964                                  
 23965                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23966                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 23967                                  TryToMovDOSHi:
 23968                                  	; 11/12/2022
 23969                                  	; 27/03/2019 - Retro DOS v4.0
 23970                                  	; ds = cs
 23971 0000097C E81300                  	call	MovDOSHi
 23972 0000097F 7210                    	jc	short ttldhx
 23973                                  
 23974                                  ;ifndef ROMDOS
 23975                                  	; 23/10/2022
 23976                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 23977                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 23978                                  	; 11/12/2022
 23979                                  	; ds = cs
 23980 00000981 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23981                                  ;else
 23982                                  ;	..
 23983                                  ;endif ; ROMDOS
 23984                                  
 23985                                  	; 11/12/2022
 23986                                  	; ds = cs
 23987 00000985 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 23988                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23989 00000987 FF1E[7D02]              	call	far [dos_segreinit]
 23990                                  	;mov	byte [cs:runhigh],1
 23991 0000098B C606[6C02]01            	mov	byte [runhigh],1
 23992 00000990 F8                      	clc
 23993                                  ttldhx:
 23994 00000991 C3                      	retn
 23995                                  
 23996                                  ; ----------------------------------------------------------------------
 23997                                  ;
 23998                                  ; procedure : MovDOSHi
 23999                                  ;
 24000                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 24001                                  ;		For ROMDOS, the code is not actually moved, but the
 24002                                  ;		HMA is allocated and prepared for sub-allocation.
 24003                                  ;
 24004                                  ;		Returns : CY if it failed
 24005                                  ;
 24006                                  ; ----------------------------------------------------------------------
 24007                                  
 24008                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24009                                  MovDOSHi:
 24010                                  	; 14/05/2019
 24011                                  	; 27/03/2019 - Retro DOS v4.0
 24012                                  	; ds = cs
 24013 00000992 E8D600                  	call	AllocHMA
 24014 00000995 7213                    	jc	short mdhx			; did we get HMA?
 24015 00000997 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 24016 0000099A 8EC0                    	mov	es,ax
 24017                                  
 24018                                  ;ifndef ROMDOS
 24019                                  	; actually move the BIOS and DOS
 24020                                  
 24021                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24022                                  	; 24/03/2019
 24023                                  	
 24024                                  	; 23/10/2022
 24025 0000099C E83200                  	call	MovBIOS				; First move BIOS into HMA
 24026                                  
 24027                                  	; ES:DI points to free HMA after BIOS
 24028                                  	
 24029                                  	; 14/05/2019
 24030                                  	; 24/03/2019 - Retro DOS v4.0
 24031                                  	;xor	di,di
 24032                                  	
 24033                                  	; 23/10/2022
 24034                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 24035                                  	; 11/12/2022
 24036                                  	; ds = cs
 24037                                  	;mov	cx,[hi_doscod_size]		; when it is in HMA
 24038                                  	; 08/03/2025 (MiniDOS)
 24039 0000099F 8B0E[8102]              	mov	cx,[dos_code_size]	
 24040 000009A3 E81100                  	call	MovDOS				; and move it
 24041                                  
 24042                                  	; ES:DI points to free HMA after DOS
 24043                                  ;else
 24044                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 24045                                  ;
 24046                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 24047                                  ;
 24048                                  ;endif ; ROMDOS
 24049                                  
 24050 000009A6 E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 24051 000009A9 F8                      	clc
 24052                                  mdhx:
 24053 000009AA C3                      	retn
 24054                                  
 24055                                  ; ----------------------------------------------------------------------
 24056                                  ;
 24057                                  ; procedure : MovDOSLo
 24058                                  ;
 24059                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 24060                                  ;
 24061                                  ; ----------------------------------------------------------------------
 24062                                  
 24063                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24064                                  
 24065                                  ;ifndef ROMDOS
 24066                                  
 24067                                  MovDOSLo:
 24068                                  	; 14/05/2019
 24069                                  	; 27/03/2019 - Retro DOS v4.0
 24070                                  	; ds = cs
 24071 000009AB E84500                  	call	AllocMemForDOS			; incestuosly!!!
 24072                                  	
 24073                                  	; 23/10/2022
 24074                                  	; 14/05/2019
 24075                                  	;inc	ax  ; skip MCB
 24076                                  	
 24077 000009AE 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 24078                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24079                                  	; 24/03/2019
 24080                                  	
 24081                                  	; 23/10/2022
 24082 000009B0 E81E00                  	call	MovBIOS
 24083                                  
 24084                                  ;------ ES:DI points memory immediately after BIOS
 24085                                  
 24086                                  	; 14/05/2019
 24087                                  	; NOTE: 
 24088                                  	;     Order of (RETRO) DOS kernel sections at memory:
 24089                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 24090                                  
 24091                                  	; 24/03/2019 - Retro DOS v4.0
 24092                                  	;xor	di,di	
 24093                                  
 24094                                  	; 23/10/2022
 24095                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 24096                                  	; 11/12/2022
 24097                                  	; ds = cs
 24098                                  	;mov	cx,[lo_doscod_size]		; low
 24099                                  	; 08/03/2025 (MiniDOS)
 24100 000009B3 8B0E[8102]              	mov	cx,[dos_code_size]
 24101                                  	;call	MovDOS
 24102                                  	;retn
 24103                                  	; 11/12/2022
 24104                                  	;jmp	short MovDOS
 24105                                  
 24106                                  ;endif ; ROMDOS
 24107                                  
 24108                                  ; 11/12/2022
 24109                                  
 24110                                  ; ----------------------------------------------------------------------
 24111                                  ;
 24112                                  ; procedure : MovDOS
 24113                                  ;
 24114                                  ;		Moves DOS code into requested area
 24115                                  ;
 24116                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24117                                  ;	     CX    - size of DOS code to be moved
 24118                                  ;
 24119                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24120                                  ;
 24121                                  ; ----------------------------------------------------------------------
 24122                                  
 24123                                  	; 11/12/2022
 24124                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24125                                  
 24126                                  ;ifndef ROMDOS
 24127                                  
 24128                                  MovDOS:
 24129                                  	; 14/05/2019
 24130                                  	; 27/03/2019 - Retro DOS v4.0
 24131                                  
 24132                                  	; 11/12/2022
 24133                                  	; ds = cs
 24134                                  
 24135                                  	; 23/10/2022
 24136                                  	;push	ds ; *//
 24137                                  	
 24138 000009B7 06                      	push	es
 24139 000009B8 57                      	push	di
 24140                                  
 24141                                  	; 11/12/2022
 24142 000009B9 1E                      	push	ds ; *// ; 11/12/202
 24143                                  
 24144                                  	; 29/04/2019
 24145 000009BA C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 24146                                  	; 23/10/2022
 24147                                  	;lds	si,[cs:dosinit]
 24148                                  	; 03/09/2023
 24149 000009BE 89F0                    	mov	ax,si
 24150                                  
 24151 000009C0 F3A4                    	rep	movsb
 24152                                  
 24153 000009C2 1F                      	pop	ds ; *// ; 11/12/2022
 24154                                  
 24155 000009C3 5B                      	pop	bx				; get back offset into which
 24156                                  						;  DOS was moved
 24157                                  	; 03/09/2023
 24158                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24159                                  						;  wants to run
 24160                                  	; 03/09/2023
 24161                                  	;mov	ax,[dosinit]
 24162                                  	; ax = [dosinit]
 24163                                  
 24164 000009C4 29D8                    	sub	ax,bx
 24165 000009C6 E8B502                  	call	off_to_para
 24166 000009C9 5B                      	pop	bx				; get the segment at which
 24167                                  						;  we moved DOS into
 24168 000009CA 29C3                    	sub	bx,ax				; Adjust segment
 24169                                  	
 24170                                  	; 11/12/2022
 24171                                  	; 23/10/2022
 24172                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24173                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24174                                  	; 11/12/2022
 24175 000009CC 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 24176                                  		
 24177                                  	; 27/03/2019
 24178                                  	;pop	ds ; *//
 24179                                  	; ds = cs
 24180                                  	;mov	[FINAL_DOS_LOCATION],bx
 24181                                  
 24182 000009D0 C3                      	retn
 24183                                  
 24184                                  ;endif ;ROMDOS
 24185                                  
 24186                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24187                                  ; 24/03/2019
 24188                                  ; ----------------------------------------------------------------------
 24189                                  ;
 24190                                  ; procedure : MovBIOS
 24191                                  ;
 24192                                  ;		Moves BIOS code into requested segment
 24193                                  ;
 24194                                  ;	In : ES - segment to which BIOS is to be moved
 24195                                  ;		  ( it moves always into offset BCode_Start)
 24196                                  ;
 24197                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 24198                                  ;
 24199                                  ; ----------------------------------------------------------------------
 24200                                  
 24201                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24202                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24203                                  
 24204                                  ;ifndef ROMDOS
 24205                                  
 24206                                  MovBIOS: ; proc	near
 24207                                  	; 11/12/2022
 24208 000009D1 1E                      	push	ds ; ds = cs
 24209                                  	;
 24210                                  	; 23/10/2022
 24211                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 24212                                  	; 17/09/2023 ; 08/04/2024
 24213 000009D2 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 24214                                  	;mov	si,BCODE_START ; mov si,30h
 24215                                  	; 09/12/2022
 24216 000009D6 BE[3000]                	mov	si,BCODESTART ; 30h
 24217 000009D9 89F7                    	mov	di,si
 24218                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24219 000009DB B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 24220 000009DE 29F1                    	sub	cx,si				; size of BIOS
 24221 000009E0 D1E9                    	shr	cx,1				; Both the labels are para
 24222                                  						;  aligned
 24223 000009E2 F3A5                    	rep	movsw
 24224                                  	
 24225                                  	; 11/12/2022
 24226 000009E4 1F                      	pop	ds ; ds = cs
 24227                                  	;
 24228 000009E5 06                      	push	es
 24229 000009E6 57                      	push	di				; save end of BIOS
 24230 000009E7 8CC0                    	mov	ax,es
 24231                                  	;
 24232                                  	; 11/12/2022
 24233                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 24234                                  	;;call	dword ptr cs:_seg_reinit_ptr
 24235                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 24236                                  	; ds = cs
 24237 000009E9 A3[8003]                	mov	[BCodeSeg],ax
 24238 000009EC FF1E[8502]              	call	far [seg_reinit_ptr]
 24239                                  	;
 24240 000009F0 5F                      	pop	di
 24241 000009F1 07                      	pop	es				; get back end of BIOS
 24242 000009F2 C3                      	retn
 24243                                  
 24244                                  ;MovBIOS endp
 24245                                  
 24246                                  ;endif ; ROMDOS
 24247                                  
 24248                                  ; 11/12/2022
 24249                                  %if 0
 24250                                  
 24251                                  ; 24/03/2019
 24252                                  
 24253                                  ; ----------------------------------------------------------------------
 24254                                  ;
 24255                                  ; procedure : MovDOS
 24256                                  ;
 24257                                  ;		Moves DOS code into requested area
 24258                                  ;
 24259                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24260                                  ;	     CX    - size of DOS code to be moved
 24261                                  ;
 24262                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24263                                  ;
 24264                                  ; ----------------------------------------------------------------------
 24265                                  
 24266                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24267                                  
 24268                                  ;ifndef ROMDOS
 24269                                  
 24270                                  MovDOS:
 24271                                  	; 14/05/2019
 24272                                  	; 27/03/2019 - Retro DOS v4.0
 24273                                  
 24274                                  	; 11/12/2022
 24275                                  	; ds = cs
 24276                                  
 24277                                  	; 23/10/2022
 24278                                  	;push	ds ; *//
 24279                                  	
 24280                                  	push	es
 24281                                  	push	di
 24282                                  
 24283                                  	; 11/12/2022
 24284                                  	push	ds ; *// ; 11/12/202
 24285                                  
 24286                                  	; 29/04/2019
 24287                                  	lds	si,[dosinit] ; 11/12/2022
 24288                                  	; 23/10/2022
 24289                                  	;lds	si,[cs:dosinit]
 24290                                  	; 03/09/2023
 24291                                  	mov	ax,si
 24292                                  
 24293                                  	rep	movsb
 24294                                  
 24295                                  	pop	ds ; *// ; 11/12/2022
 24296                                  
 24297                                  	pop	bx				; get back offset into which
 24298                                  						;  DOS was moved
 24299                                  	;mov	ax,[dosinit] ; 03/09/2023
 24300                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24301                                  						;  wants to run
 24302                                  	sub	ax,bx
 24303                                  	call	off_to_para
 24304                                  	pop	bx				; get the segment at which
 24305                                  						;  we moved DOS into
 24306                                  	sub	bx,ax				; Adjust segment
 24307                                  	
 24308                                  	; 11/12/2022
 24309                                  	; 23/10/2022
 24310                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24311                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24312                                  	; 11/12/2022
 24313                                  	mov	[CURRENT_DOS_LOCATION],bx
 24314                                  		
 24315                                  	; 27/03/2019
 24316                                  	;pop	ds ; *//
 24317                                  	; ds = cs
 24318                                  	;mov	[FINAL_DOS_LOCATION],bx
 24319                                  
 24320                                  	retn
 24321                                  
 24322                                  ;endif ;ROMDOS
 24323                                  
 24324                                  %endif
 24325                                  
 24326                                  ; ----------------------------------------------------------------------
 24327                                  ;
 24328                                  ; procedure : AllocMemForDOS
 24329                                  ;
 24330                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 24331                                  ;
 24332                                  ;	Out : AX - seg of allocated memoryblock
 24333                                  ;
 24334                                  ; ----------------------------------------------------------------------
 24335                                  
 24336                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24337                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24338                                  
 24339                                  ;ifndef ROMDOS
 24340                                  
 24341                                  AllocMemForDOS:
 24342                                  	; 11/12/2022
 24343                                  	; 14/05/2019
 24344                                  	; 27/03/2019 - Retro DOS v4.0
 24345                                  	; ds = cs
 24346                                  	;mov	ax,BCode_end
 24347                                  	;sub	ax,BCode_start		; BIOS code size
 24348                                  	; 23/10/2022
 24349 000009F3 B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 24350                                  					; 30/12/2022
 24351                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24352                                  	;sub	ax,BCODE_START ; 30h
 24353                                  	; 09/12/2022
 24354 000009F6 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 24355                                  	; 24/03/2019 - Retro DOS v4.0 
 24356                                  	; 02/11/2022
 24357                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 24358                                  	; 11/12/2022
 24359                                  	; ds = cs
 24360                                  	;add	ax,[lo_doscod_size]
 24361                                  	; 08/03/2025 (MiniDOS)
 24362 000009F9 0306[8102]              	add	ax,[dos_code_size]
 24363 000009FD 83C00F                  	add	ax,15
 24364 00000A00 E87B02                  	call	off_to_para			; convert to para
 24365                                  	; 23/10/2022
 24366                                  	; 14/05/2019
 24367                                  	;inc	ax ; + 1 paragraph for MCB
 24368 00000A03 09DB                    	or	bx,bx				; M012
 24369 00000A05 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 24370 00000A07 741A                    	jz	short update_arena		; M012
 24371 00000A09 B448                    	mov	ah,48h				; request DOS
 24372 00000A0B CD21                    	int	21h
 24373 00000A0D 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 24374                                   	; 23/10/2022
 24375                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 24376 00000A0F 83E803                  	sub	ax,3				; Take care ORG 30h of
 24377                                  						;  BIOS code
 24378 00000A12 8EC0                    	mov	es,ax
 24379                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 24380                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 24381                                  	; 14/05/2019
 24382                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 24383                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 24384                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 24385                                  	; 23/10/2022
 24386 00000A14 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 24387 00000A1B 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 24388                                  
 24389 00000A22 C3                      	retn
 24390                                  
 24391                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 24392                                  ;	  using DOS itself causes an arena to be generated.
 24393                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 24394                                  ;	  assume that the device drivers are loaded into
 24395                                  ;	  the first arena. For this reason, MagicDrv's
 24396                                  ;	  main device driver header arena is manually
 24397                                  ;	  truncated from the arena chain, and the space
 24398                                  ;	  for DOS is allocated using the following
 24399                                  ;	  simple code, which also assumes that the
 24400                                  ;	  first arena is the free one where DOS's low
 24401                                  ;	  stub will go.
 24402                                  ;
 24403                                  ; M012 : BEGIN
 24404                                  
 24405                                  	; 23/10/2022
 24406                                  update_arena:
 24407 00000A23 1E                      	push	ds ; ds = cs
 24408 00000A24 57                      	push	di
 24409 00000A25 51                      	push	cx
 24410 00000A26 52                      	push	dx
 24411                                  	; 23/10/2022
 24412                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 24413                                  	; 11/12/2022
 24414                                  	; ds = cs 
 24415 00000A27 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 24416 00000A2B 4F                      	dec	di
 24417 00000A2C 4F                      	dec	di				; Arena head is immediately
 24418                                  						;  before sysvar
 24419 00000A2D 8E05                    	mov	es,[di]				; es = arena head
 24420                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 24421 00000A2F 268B0E0300              	mov	cx,[es:3]
 24422 00000A34 39D9                    	cmp	cx,bx				; is it sufficient ?
 24423 00000A36 7227                    	jb	short FatalErr			; no, fatal error
 24424                                  
 24425                                  	;mov	dl,[es:ARENA.SIGNATURE]
 24426 00000A38 268A160000              	mov	dl,[es:0]
 24427 00000A3D 8CC0                    	mov	ax,es
 24428 00000A3F 01D8                    	add	ax,bx				; ax = new arena head
 24429 00000A41 8905                    	mov	[di],ax				; store it in DOS data area
 24430 00000A43 8ED8                    	mov	ds,ax
 24431                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 24432 00000A45 88160000                	mov	[0],dl
 24433                                  	;mov	word [ARENA.OWNER],0		; free
 24434 00000A49 C70601000000            	mov	word [1],0
 24435 00000A4F 29D9                    	sub	cx,bx				; size of the new block
 24436                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 24437 00000A51 890E0300                	mov	[3],cx
 24438 00000A55 8CC0                    	mov	ax,es				; return seg to the caller
 24439                                  	; 23/10/2022
 24440                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 24441 00000A57 83E803                  	sub	ax,3				;  BIOS code
 24442 00000A5A 5A                      	pop	dx
 24443 00000A5B 59                      	pop	cx
 24444 00000A5C 5F                      	pop	di
 24445 00000A5D 1F                      	pop	ds ; ds = cs
 24446 00000A5E C3                      	retn
 24447                                  ;
 24448                                  ; M012 : END
 24449                                  ;
 24450                                  FatalErr:
 24451 00000A5F 0E                      	push	cs
 24452 00000A60 1F                      	pop	ds
 24453 00000A61 BA[2C09]                	mov	dx,FEmsg
 24454 00000A64 B409                    	mov	ah,9
 24455 00000A66 CD21                    	int	21h 		; DOS - PRINT STRING
 24456                                  				; DS:DX -> string terminated by "$"
 24457                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 24458 00000A68 E93107                  	jmp	stall
 24459                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 24460                                  	;cli
 24461                                  	;hlt
 24462                                  
 24463                                  ;endif ;ROMDOS
 24464                                  
 24465                                  ; 25/03/2019 - Retro DOS v4.0
 24466                                  
 24467                                  ; ----------------------------------------------------------------------
 24468                                  ;
 24469                                  ; procedure : AllocHMA
 24470                                  ;
 24471                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 24472                                  ;	  up there. If it gets any sort of error, it will return with
 24473                                  ;	  carry set so that we can resort to running low.
 24474                                  ;
 24475                                  ;	It also returns ES: -> 0ffffh if it returns success
 24476                                  ;
 24477                                  ; ----------------------------------------------------------------------
 24478                                  
 24479                                  AllocHMA:
 24480                                  ;	cas note:  The pre-286 check is no longer needed here since the
 24481                                  ;		   presence of XMS is sufficient. However, this code hasn't
 24482                                  ;		   been deleted because it can be recycled for skipping the
 24483                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 24484                                  ;		   in the case of a pre-286.
 24485                                  
 24486                                  ;;	see if we're running on a pre-286. If not, force low.
 24487                                  ;
 24488                                  ;	xor	ax,ax
 24489                                  ;	pushf			; save flags (like int)
 24490                                  ;	push	ax
 24491                                  ;	popf
 24492                                  ;	pushf
 24493                                  ;	pop	ax
 24494                                  ;	popf			; restore original flags (like int)
 24495                                  ;	and	ax,0F000h
 24496                                  ;	cmp	ax,0F000h	; 8088/8086?
 24497                                  ;	jz	short grab_hma_error
 24498                                  
 24499                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24500                                  	; (SYSINIT:0A26h)
 24501                                  
 24502                                  	; 13/04/2024 - Retro DOS v5.0
 24503                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C41h) 
 24504                                  
 24505 00000A6B 1E                      	push	ds
 24506                                  	;;mov	ax,Bios_Data
 24507                                  	;mov	ax,KERNEL_SEGMENT
 24508                                  	; 21/10/2022
 24509 00000A6C B87000                  	mov	ax,DOSBIODATASEG ; 70h
 24510 00000A6F 8ED8                    	mov	ds,ax
 24511                                  
 24512 00000A71 E84A00                  	call	IsXMSLoaded
 24513 00000A74 7545                    	jnz	short grabhma_error
 24514                                  
 24515 00000A76 B81043                  	mov	ax,4310h
 24516 00000A79 CD2F                    	int	2Fh		; get the vector into es:bx
 24517                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 24518                                  		; Return: ES:BX -> driver entry point
 24519                                  
 24520 00000A7B 891E[0E00]              	mov	[xms],bx
 24521                                  	;mov	[0Eh], bx
 24522 00000A7F 8C06[1000]              	mov	[xms+2],es
 24523                                  	;mov	[10h],es
 24524                                  
 24525 00000A83 B401                    	mov	ah,1		; request HMA
 24526 00000A85 BAFFFF                  	mov	dx,0FFFFh
 24527                                  	;call	dword ptr ds:0Eh
 24528 00000A88 FF1E[0E00]              	call	far [xms]
 24529 00000A8C 48                      	dec	ax
 24530 00000A8D 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 24531                                  
 24532                                  ;------ Himem may be lying because it has allocated mem for int 15
 24533                                  
 24534 00000A8F B488                    	mov	ah,88h
 24535 00000A91 CD15                    	int	15h
 24536                                  		; Get Extended Memory Size
 24537                                  		; Return: CF clear on success
 24538                                  		; AX = size of memory above 1M in K
 24539 00000A93 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 24540                                  	;jb	short grabhma_error
 24541                                  	; 11/12/2022
 24542 00000A96 7224                    	jb	short grabhma_err ; cf=1
 24543                                  allocHMA_1:
 24544 00000A98 B405                    	mov	ah,5		; localenableA20
 24545                                  	;call	dword ptr ds:0Eh
 24546 00000A9A FF1E[0E00]              	call	far [xms]
 24547 00000A9E 48                      	dec	ax
 24548 00000A9F 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 24549                                  
 24550 00000AA1 E89D01                  	call	IsVDiskInstalled
 24551 00000AA4 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 24552                                  
 24553 00000AA6 B8FFFF                  	mov	ax,0FFFFh
 24554 00000AA9 8EC0                    	mov	es,ax
 24555 00000AAB 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 24556 00000AB2 26813E10003412          	cmp	word [es:10h],1234h
 24557                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 24558                                  	; 11/12/2022
 24559 00000AB9 7401                    	je	short allocHMA_ok	
 24560                                  
 24561                                  ; 11/12/2022
 24562                                  ;	; 11/12/2022
 24563                                  ;	; cf=0
 24564                                  ;	;clc
 24565                                  ;	pop	ds
 24566                                  ;	retn
 24567                                  
 24568                                  grabhma_error:
 24569 00000ABB F9                      	stc
 24570                                  	; 11/12/022
 24571                                  grabhma_err:	; cf=1
 24572                                  allocHMA_ok:	; cf=0
 24573 00000ABC 1F                      	pop	ds
 24574 00000ABD C3                      	retn
 24575                                  
 24576                                  ; ----------------------------------------------------------------------
 24577                                  ;
 24578                                  ; procedure : IsXMSLoaded
 24579                                  ;
 24580                                  ;             Checks whether a XMS driver is loaded
 24581                                  ;
 24582                                  ; Returns : Z flag set if XMS driver loaded
 24583                                  ;           Z flag reset if no XMS drivers are present
 24584                                  ;
 24585                                  ; ----------------------------------------------------------------------
 24586                                  
 24587                                  IsXMSLoaded:
 24588 00000ABE B80043                  	mov	ax,4300h
 24589 00000AC1 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 24590                                  				; Return: AL = 80h XMS driver installed
 24591                                  				; AL <> 80h no driver
 24592 00000AC3 3C80                    	cmp	al,80h		; XMS installed?
 24593 00000AC5 C3                      	retn
 24594                                  
 24595                                  ; ----------------------------------------------------------------------
 24596                                  ; procedure : FTryToMovDOSHi
 24597                                  ;
 24598                                  ;		Called from HMA suballoc calls
 24599                                  ;	
 24600                                  ; ----------------------------------------------------------------------
 24601                                  
 24602                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24603                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 24604                                  
 24605                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24606                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 24607                                  
 24608                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 24609                                  
 24610                                  FTryToMovDOSHi:	; proc	far
 24611                                  
 24612 00000AC6 50                      	push	ax
 24613 00000AC7 53                      	push	bx
 24614 00000AC8 51                      	push	cx
 24615 00000AC9 52                      	push	dx
 24616 00000ACA 56                      	push	si
 24617 00000ACB 57                      	push	di
 24618 00000ACC 1E                      	push	ds
 24619 00000ACD 06                      	push	es
 24620                                  
 24621                                  	; 23/10/2022
 24622                                  	; 27/03/2019 - Retro DOS v4.0
 24623                                  	; 11/12/2022
 24624 00000ACE 0E                      	push	cs
 24625 00000ACF 1F                      	pop	ds
 24626                                  
 24627                                  	;cmp	byte [cs:runhigh],0FFh
 24628                                  	; 11/12/2022
 24629 00000AD0 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24630 00000AD5 7503                    	jne	short _ftymdh_1
 24631                                  
 24632                                  	; ds = cs
 24633 00000AD7 E8A2FE                  	call	TryToMovDOSHi
 24634                                  _ftymdh_1:
 24635 00000ADA 07                      	pop	es
 24636 00000ADB 1F                      	pop	ds
 24637 00000ADC 5F                      	pop	di
 24638 00000ADD 5E                      	pop	si
 24639 00000ADE 5A                      	pop	dx
 24640 00000ADF 59                      	pop	cx
 24641 00000AE0 5B                      	pop	bx
 24642 00000AE1 58                      	pop	ax
 24643                                  
 24644 00000AE2 CB                      	retf
 24645                                  
 24646                                  ; ----------------------------------------------------------------------
 24647                                  ;
 24648                                  ; following piece of code will be moved into a para boundary. And the para
 24649                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 24650                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 24651                                  ; to determine free extended memory.
 24652                                  ;
 24653                                  ; For more details read "power programming" column by Ray Duncan in the
 24654                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 24655                                  ;
 24656                                  ; ----------------------------------------------------------------------
 24657                                  
 24658                                  	; 30/12/2023 - Retro DOS 5.0
 24659 00000AE3 00                      	db	0
 24660                                  
 24661                                  ; 13/04/2024
 24662                                  ;align 2
 24663                                  
 24664                                  	; 30/12/2023
 24665                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 24666                                  
 24667                                  StartVDHead:
 24668                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 24669                                  
 24670 00000AE4 00000000                	dd	0		; link to next device driver
 24671 00000AE8 0080                    	dw	8000h		; device attribute
 24672 00000AEA 0000                    	dw	0		; strategy routine offset
 24673 00000AEC 0000                    	dw	0		; interrupt routine offset
 24674 00000AEE 01                      	db	1		; number of units
 24675                                  	;db	7 dup(0) 
 24676 00000AEF 00<rep 7h>              	times	7 db 0 		; reserved area
 24677                                  VDiskSig1:
 24678 00000AF6 564449534B              	db	'VDISK'
 24679                                  
 24680                                  VLEN1	equ	($-VDiskSig1)
 24681                                  
 24682 00000AFB 202056332E33            	db	'  V3.3'	; vdisk label
 24683                                  	;db	15 dup (0)	; pad
 24684 00000B01 00<rep Fh>              	times	15 db 0
 24685 00000B10 0000                    	dw	0		; bits 0-15 of free HMA
 24686 00000B12 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 24687                                  VDInt19:
 24688 00000B13 EA                      	db	0EAh		; jmp to old vector
 24689                                  OldVDInt19:
 24690 00000B14 00000000                	dd	0		; Saved int 19 vector
 24691                                  
 24692                                  EndVDHead: ; label byte
 24693                                  
 24694                                  VDiskHMAHead:	
 24695 00000B18 000000                  	db	0,0,0		; non-bootable disk
 24696                                  VDiskSig2:
 24697 00000B1B 564449534B              	db	'VDISK'
 24698                                  
 24699                                  VLEN2	equ	($-VDiskSig2)
 24700                                  
 24701 00000B20 332E33                  	db	'3.3'		; OEM - signature
 24702 00000B23 8000                    	dw	128		; number of bytes/sector
 24703 00000B25 01                      	db	1		; sectors/cluster
 24704 00000B26 0100                    	dw	1		; reserved sectors
 24705 00000B28 01                      	db	1		; number of FAT copies
 24706 00000B29 4000                    	dw	64		; number of root dir entries
 24707 00000B2B 0002                    	dw	512		; number of sectors
 24708 00000B2D FE                      	db	0FEh		; media descriptor
 24709 00000B2E 0600                    	dw	6		; number of sectors/FAT
 24710 00000B30 0800                    	dw	8		; sectors per track
 24711 00000B32 0100                    	dw	1		; number of heads
 24712 00000B34 0000                    	dw	0		; number of hidden sectors
 24713 00000B36 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 24714                                  
 24715                                  EndVDiskHMAHead: ; label byte
 24716                                  
 24717                                  ; ----------------------------------------------------------------------
 24718                                  ;
 24719                                  ; procedure : InstVDiskHeader
 24720                                  ;
 24721                                  ;             Installs the VDISK header to reserve the 64k of HMA
 24722                                  ;	      It puts a 32 byte header at 10000:0 and
 24723                                  ;	      another header at (seg of int19):0
 24724                                  ;
 24725                                  ; Inputs : None
 24726                                  ;
 24727                                  ; Outputs : None
 24728                                  ;
 24729                                  ; USES : DS,SI,AX,CX,DX
 24730                                  ;
 24731                                  ; ----------------------------------------------------------------------
 24732                                  
 24733                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24734                                  
 24735                                  InstVDiskHeader:
 24736 00000B38 31C0                    	xor	ax,ax
 24737 00000B3A 8ED8                    	mov	ds,ax			; seg of int vect table
 24738                                  
 24739                                  ;-------------- save old int 19 vector
 24740                                  
 24741                                  	; 23/10/2022
 24742 00000B3C A16400                  	mov	ax,[19h*4]
 24743                                  	;mov	[OldVDInt19],ax
 24744 00000B3F 2EA3[140B]              	mov	[cs:OldVDInt19],ax
 24745 00000B43 A16600                  	mov	ax,[19h*4+2]
 24746                                  	;mov	[OldVDInt19+2],ax
 24747 00000B46 2EA3[160B]              	mov	[cs:OldVDInt19+2],ax
 24748                                  
 24749                                  ;-------------- calculate seg of new int 19 handler
 24750                                  
 24751 00000B4A B448                    	mov	ah,48h			; allocate memory
 24752                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 24753                                  	; 23/10/2022
 24754 00000B4C BB0400                  	mov	bx,4
 24755 00000B4F CD21                    	int	21h
 24756                                  
 24757                                  ;	if carry, fatal hanging error!!!!!
 24758                                  
 24759 00000B51 48                      	dec	ax			; point to arena
 24760 00000B52 8EC0                    	mov	es,ax
 24761                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 24762 00000B54 26C70601000800          	mov	word [es:1],8
 24763                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 24764 00000B5B 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 24765 00000B62 40                      	inc	ax
 24766 00000B63 8EC0                    	mov	es,ax			; get back to allocated memory
 24767                                  
 24768                                  ;-------------- install new int 19 vector
 24769                                  
 24770 00000B65 FA                      	cli				; no reboots at this time
 24771                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 24772 00000B66 C70664002F00            	mov	word [19h*4],47
 24773 00000B6C A36600                  	mov	[19h*4+2],ax
 24774                                  
 24775                                  ;-------------- move the code into proper place
 24776                                  
 24777                                  	;mov	cx,(EndVDHead-StartVDHead)
 24778 00000B6F B93400                  	mov	cx,52
 24779 00000B72 BE[E40A]                	mov	si,StartVDHead
 24780 00000B75 31FF                    	xor	di,di
 24781 00000B77 0E                      	push	cs
 24782 00000B78 1F                      	pop	ds
 24783 00000B79 FC                      	cld
 24784 00000B7A F3A4                    	rep	movsb
 24785 00000B7C FB                      	sti				; BUGBUG is sti OK now?
 24786                                  
 24787                                  ;-------------- mov the HMA VDisk head into HMA
 24788                                  
 24789                                  	; 23/10/2022
 24790 00000B7D 57                      	push	di
 24791 00000B7E 06                      	push	es
 24792                                  
 24793                                  	;mov	ax,0FFFFh
 24794                                  	;mov	es,ax
 24795                                  	; 03/09/2023
 24796 00000B7F 49                      	dec	cx
 24797                                  	; cx = 0FFFFh
 24798 00000B80 8EC1                    	mov	es,cx
 24799                                  
 24800 00000B82 BF1000                  	mov	di,10h
 24801                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 24802 00000B85 B92000                  	mov	cx,32
 24803 00000B88 BE[180B]                	mov	si,VDiskHMAHead
 24804 00000B8B F3A4                    	rep	movsb			; ds already set to cs
 24805                                  
 24806 00000B8D 5F                      	pop	di
 24807 00000B8E 07                      	pop	es
 24808                                  
 24809 00000B8F C3                      	retn
 24810                                  
 24811                                  ; ----------------------------------------------------------------------
 24812                                  ; procedure : ClrVDISKHeader
 24813                                  ;
 24814                                  ;		Clears the first 32 bytes at 1MB boundary
 24815                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 24816                                  ;		left by previous DOS=HIGH session
 24817                                  ;
 24818                                  ; ----------------------------------------------------------------------
 24819                                  
 24820                                  struc desc
 24821 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 24822 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 24823 00000004 ??                       .hi_byte:	resb 	1		; address
 24824 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 24825 00000006 ????                     .reserved:	resw	1		;
 24826                                   .size:
 24827                                  endstruc
 24828                                  
 24829                                  		; 23/10/2022
 24830                                  bmove:		;label byte
 24831                                  
 24832                                  dummy:		;times desc.size db 0	; desc	<>
 24833 00000B90 00<rep 8h>              		times 8 db 0		 
 24834                                  gdt:		;times desc.size db 0	; desc	<>
 24835 00000B98 00<rep 8h>              		times 8 db 0
 24836 00000BA0 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 24837 00000BA2 0000                    		dw	0
 24838 00000BA4 00                      		db	0
 24839 00000BA5 93                      		db	93h
 24840 00000BA6 0000                    		dw	0
 24841 00000BA8 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 24842 00000BAA 0000                    		dw	0
 24843 00000BAC 10                      		db	10h
 24844 00000BAD 93                      		db	93h
 24845 00000BAE 0000                    		dw	0
 24846                                  
 24847                                  rombios_code:	;times desc.size db 0	; desc	<>
 24848 00000BB0 00<rep 8h>              		times 8 db 0
 24849                                  temp_stack:	;times desc.size db 0	; desc	<>
 24850 00000BB8 00<rep 8h>              		times 8 db 0
 24851                                  
 24852 00000BC0 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 24853                                  
 24854                                  
 24855                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 24856                                  
 24857                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 24858                                  ; (SYSINIT:0CA6h)
 24859                                  
 24860                                  ClrVDISKHeader:	; proc	near
 24861                                  
 24862                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 24863                                  ;;-----------------------------------------------------------	      ;I070
 24864                                  ;; The following workaround get around a problem with the	      ;I070
 24865                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 24866                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 24867                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 24868                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 24869                                  ;; move crashes the system. We can do this because these	      ;I070
 24870                                  ;; systems clear all of memory on a cold boot.			      ;I070
 24871                                  ;								      ;I070
 24872                                  ;               in      al,64h         ; Test for password servr mode ;I070
 24873                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 24874                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 24875                                  ;                                      ; Check for Tortugas...	      ;I070
 24876                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 24877                                  ;               je      short ClrVDISKno                              ;I070
 24878                                  ;                                      ; Check for mod 30-286	      ;I070
 24879                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 24880                                  ;               jne     short ClrVDISKok			      ;I070
 24881                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 24882                                  ;								      ;I070
 24883                                  ;ClrVDISKok:							      ;I070
 24884                                  ;-----------------------------------------------------------	      ;I070
 24885                                  
 24886                                  	; 30/12/2023 - Retro DOS v5.0
 24887                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 24888                                  ClrVDISKHeader:
 24889 00000BE0 E464                    	in	al,64h	; 8042 keyboard controller status register
 24890                                  			; 7:  PERR    1=parity error in data received from keyboard
 24891                                  			;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 24892                                  			; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 24893                                  			; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 24894                                  			;    +------------------------------+-----------------------------------+
 24895                                  			; 4:  INH     0=keyboard communications inhibited
 24896                                  			; 3:  A2      0=60h was the port last written to, 1=64h was last
 24897                                  			; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 24898                                  			; 1:  IBF     1=input buffer full (keyboard can't accept data)
 24899                                  			; 0:  OBF     1=output buffer full (data from keyboard is available)
 24900 00000BE2 A810                    	test	al,10h	; test bit 4 - Is keyboard inhibited?
 24901 00000BE4 7511                    	jnz	short ClrVDISKok ; No, go do block move
 24902                                  	; 30/12/2023
 24903                                  	; ds = cs	
 24904 00000BE6 813E[B702]F819          	cmp	word [sys_model_byte],19F8h ; check for TORTUGA models
 24905 00000BEC 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 24906                                  				 ; (while 8042 is disabled)
 24907 00000BEE 813E[B702]FC09          	cmp	word [sys_model_byte],9FCh ; check for PS/2 30-286 model
 24908 00000BF4 7501                    	jnz	short ClrVDISKok
 24909                                  ClrVDISKno:
 24910 00000BF6 C3                      	retn
 24911                                  ; ---------------------------------------------------------------------------
 24912                                  	; 30/12/2023
 24913                                  ClrVDISKok:
 24914                                  	; 12/12/2022
 24915                                  	; ds = cs
 24916                                  
 24917                                  	; 30/12/2022 - Retro DOS v4.2
 24918                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 24919                                  
 24920 00000BF7 06                      	push	es
 24921 00000BF8 8CC8                    	mov	ax,cs
 24922 00000BFA 89C2                    	mov	dx,ax
 24923 00000BFC B10C                    	mov	cl,12
 24924 00000BFE D3EA                    	shr	dx,cl
 24925 00000C00 B104                    	mov	cl,4
 24926 00000C02 D3E0                    	shl	ax,cl
 24927 00000C04 05[C00B]                	add	ax,ClrdVDISKHead
 24928 00000C07 80D200                  	adc	dl,0
 24929                                  
 24930                                  	;; 23/10/2022
 24931                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 24932                                  	;mov	[cs:src_desc+2],ax
 24933                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 24934                                  	;mov	[cs:src_desc+4],dl
 24935                                  	; 12/12/2022
 24936                                  	;mov	[src_desc+desc.lo_word],ax
 24937 00000C0A A3[A20B]                	mov	[src_desc+2],ax
 24938                                  	;mov	[src_desc+desc.hi_byte],dl
 24939 00000C0D 8816[A40B]              	mov	[src_desc+4],dl
 24940                                  
 24941 00000C11 B91000                  	mov	cx,16	; 16 words
 24942 00000C14 0E                      	push	cs
 24943 00000C15 07                      	pop	es
 24944 00000C16 BE[900B]                	mov	si,bmove
 24945 00000C19 B487                    	mov	ah,87h
 24946 00000C1B CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 24947                                  			; CX = number of words to move 
 24948                                  			; ES:SI -> global descriptor table
 24949                                  			; Return: CF set on error, AH = status
 24950 00000C1D 07                      	pop	es
 24951 00000C1E C3                      	retn
 24952                                  
 24953                                  ; ----------------------------------------------------------------------
 24954                                  ;
 24955                                  ; procedure : SaveFreeHMAPtr
 24956                                  ;
 24957                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 24958                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 24959                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 24960                                  ;		the offset.
 24961                                  ;
 24962                                  ; Inputs : ES:DI - pointer to free HMA
 24963                                  ; Output : FreeHMAPtr in BIOS data segment updated
 24964                                  ;
 24965                                  ; ----------------------------------------------------------------------
 24966                                  
 24967                                  SaveFreeHMAPtr:
 24968                                  	; 03/09/2023
 24969 00000C1F 1E                      	push	ds
 24970 00000C20 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 24971 00000C23 8ED8                    	mov	ds,ax
 24972                                  	;
 24973 00000C25 8CC3                    	mov	bx,es
 24974 00000C27 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 24975                                  	; 03/09/2023
 24976 00000C2A A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 24977                                  	;
 24978 00000C2D 29D8                    	sub	ax,bx
 24979 00000C2F 83C70F                  	add	di,15		   ; para round
 24980 00000C32 83E7F0                  	and	di,0FFF0h
 24981 00000C35 B104                    	mov	cl,4
 24982 00000C37 D3E0                    	shl	ax,cl
 24983 00000C39 29C7                    	sub	di,ax
 24984                                  	;
 24985                                  	; 03/09/2023
 24986                                  	;push	ds
 24987                                  	;;mov	ax,Bios_Data ; 0070h
 24988                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 24989                                  	; 21/10/2022
 24990                                  	; 03/09/2023
 24991                                  	;mov	ax,DOSBIODATASEG ; 0070h
 24992                                  	;mov	ds,ax
 24993                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 24994 00000C3B 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 24995                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 24996 00000C3F 1F                      	pop	ds
 24997 00000C40 C3                      	retn
 24998                                  
 24999                                  ; ----------------------------------------------------------------------
 25000                                  ;
 25001                                  ; procedure : IsVDiskInstalled
 25002                                  ;
 25003                                  ;		Checks for the presence of VDISK header at 1MB boundary
 25004                                  ;		& INT 19 vector
 25005                                  ;
 25006                                  ; Inputs  : A20 flag should be ON
 25007                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 25008                                  ;
 25009                                  ; ----------------------------------------------------------------------
 25010                                  
 25011                                  IsVDiskInstalled:
 25012 00000C41 31C0                    	xor	ax,ax
 25013 00000C43 8ED8                    	mov	ds,ax
 25014 00000C45 8E1E4E00                	mov	ds,[19*4+2]
 25015                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 25016                                  	; 23/10/2022
 25017 00000C49 BE1200                  	mov	si,12h ; 18
 25018                                  	;mov	cx,VLEN1 ; 5
 25019 00000C4C B90500                  	mov	cx,5
 25020 00000C4F 0E                      	push	cs
 25021 00000C50 07                      	pop	es
 25022 00000C51 BF[F60A]                	mov	di,VDiskSig1
 25023 00000C54 F3A6                    	rep	cmpsb
 25024 00000C56 740F                    	je	short ivdins_retn
 25025 00000C58 B8FFFF                  	mov	ax,0FFFFh
 25026 00000C5B 8ED8                    	mov	ds,ax
 25027                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 25028 00000C5D BE1300                  	mov	si,13h
 25029 00000C60 BF[1B0B]                	mov	di,VDiskSig2
 25030                                  	;;mov	cx,VLEN2  ; 5
 25031                                  	;mov	cx,5
 25032                                  	; 03/09/2023
 25033 00000C63 B105                    	mov	cl,5
 25034 00000C65 F3A6                    	rep	cmpsb
 25035                                  ivdins_retn: 
 25036 00000C67 C3                      	retn			; returns the Zero flag
 25037                                  
 25038                                  ; ----------------------------------------------------------------------
 25039                                  ;
 25040                                  ; procedure : CPMHack
 25041                                  ;
 25042                                  ;		Copies the code from 0:c0 into ffff:0d0h
 25043                                  ;		for CPM compatibility
 25044                                  ;
 25045                                  ; ----------------------------------------------------------------------
 25046                                  
 25047                                  	; 11/12/2022
 25048                                  CPMHack:
 25049 00000C68 1E                      	push	ds
 25050 00000C69 B9FFFF                  	mov	cx,0FFFFh
 25051 00000C6C 8EC1                    	mov	es,cx		; ES = FFFF
 25052                                  	;xor	cx,cx
 25053                                  	; 11/12/2022
 25054 00000C6E 41                      	inc	cx  ; cx = 0
 25055 00000C6F 8ED9                    	mov	ds,cx		; DS = 0
 25056 00000C71 BEC000                  	mov	si,0C0h
 25057 00000C74 BFD000                  	mov	di,0D0h
 25058                                  	;mov	cx,5
 25059 00000C77 B105                    	mov	cl,5
 25060 00000C79 FC                      	cld
 25061 00000C7A F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 25062 00000C7C 1F                      	pop	ds
 25063 00000C7D C3                      	retn
 25064                                  
 25065                                  ; ----------------------------------------------------------------------
 25066                                  ;
 25067                                  ; procedure : off_to_para
 25068                                  ;
 25069                                  ; ----------------------------------------------------------------------
 25070                                  off_to_para:
 25071 00000C7E D1E8                    	shr	ax,1
 25072 00000C80 D1E8                    	shr	ax,1
 25073 00000C82 D1E8                    	shr	ax,1
 25074 00000C84 D1E8                    	shr	ax,1
 25075 00000C86 C3                      	retn
 25076                                  
 25077                                  ; ----------------------------------------------------------------------
 25078                                  ;**	TempCDS - Create (Temporary?) CDS
 25079                                  ;
 25080                                  ;	ENTRY	?? BUGBUG
 25081                                  ;		(DS) = SysInitSeg
 25082                                  ;	EXIT	?? BUGBUG
 25083                                  ;	USES	?? BUGBUG
 25084                                  ; ----------------------------------------------------------------------
 25085                                  
 25086                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25087                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25088                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25089                                  TempCDS:
 25090 00000C87 C43E[6D02]              	les	di,[DOSINFO]
 25091 00000C8B 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 25092                                  
 25093                                  	;mov	cl,[es:di+20h]
 25094 00000C8F 30ED                    	xor	ch,ch			; (cx) = # of block devices
 25095                                  
 25096 00000C91 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 25097                                  	;mov	[es:di+21h],cl	
 25098                                  
 25099                                  	;mov	al,cl
 25100                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 25101                                  	;;mov	ah,88
 25102                                  	;mul	ah			; (ax) = byte size for those CDSs
 25103                                  	; 30/12/2023
 25104 00000C95 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 25105                                  	;mov	al,88
 25106 00000C97 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 25107                                  
 25108 00000C99 E8C704                  	call	ParaRound		; (ax) = paragraph size for CDSs
 25109 00000C9C 8B36[A302]              	mov	si,[top_of_cdss] ; 31/12/2022
 25110                                  
 25111                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 25112                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 25113                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 25114                                  ;		   variable which has the top of free memory for
 25115                                  ;		   device driver loads, etc.
 25116                                  
 25117 00000CA0 29C6                    	sub	si,ax
 25118                                  
 25119                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 25120                                  ;		that automatically updates alloclim every time we
 25121                                  ;		set up some new CDSs. Instead, I've added code
 25122                                  ;		which pre-allocates space for 26 CDSs. This
 25123                                  ;	        way we've got room for worst case CDSs before
 25124                                  ;		we place MagicDrv.sys
 25125                                  ;
 25126                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 25127                                  
 25128                                  	; 30/12/2022
 25129                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25130                                  	; (SYSINIT:0C52h)
 25131                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 25132                                  
 25133 00000CA2 26897518                	mov	[es:di+SYSI_CDS+2],si
 25134                                  	;mov	[es:di+18h],si
 25135 00000CA6 89F0                    	mov	ax,si
 25136 00000CA8 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 25137                                  	;mov	[word es:di+16h],0
 25138                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 25139 00000CAE 26C535                  	lds	si,[es:di]
 25140 00000CB1 8EC0                    	mov	es,ax
 25141 00000CB3 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 25142                                  
 25143                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 25144                                  ;	info from the corresponding DPB.
 25145                                  ;
 25146                                  ;	(cx) = count of CDSs left to process
 25147                                  ;	(es:di) = address of next CDS
 25148                                  
 25149                                  fooset:
 25150                                  	; 23/10/2022
 25151 00000CB5 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 25152 00000CB9 AB                      	stosw				; setup the root as the curdir
 25153                                  	
 25154                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25155                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25156                                  
 25157                                  	; 30/12/2022
 25158                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 25159 00000CBA E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25160                                  
 25161                                  ;	(ds:si) = address of DPB
 25162                                  ;		 (si) = -1 if no drive
 25163                                  
 25164 00000CBD 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 25165 00000CC1 AB                      	stosw
 25166 00000CC2 2EFE06[A502]            	inc	byte [cs:DirStrng]
 25167 00000CC7 31C0                    	xor	ax,ax ; 0
 25168 00000CC9 51                      	push	cx
 25169                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 25170 00000CCA B93F00                  	mov	cx,63	; 23/10/2022
 25171 00000CCD F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 25172                                  
 25173                                  ;	should handle the system that does not have any floppies.
 25174                                  ;	in this case,we are going to pretended there are two dummy floppies
 25175                                  ;	in the system. still they have dpb and cds,but we are going to
 25176                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 25177                                  ;	"invalid drive specification" message when the user try to
 25178                                  ;	access them.
 25179                                  ;
 25180                                  ;	(ax) = 0
 25181                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25182                                  ;	(ds:si) = Next DPB (-1 if none)
 25183                                  
 25184 00000CCF 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 25185 00000CD2 740C                    	je	short fooset_zero	; don't have any physical drive.
 25186                                  
 25187                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 25188                                  ;	if we are faking floppy drives then see if this cds being initialised
 25189                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 25190                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 25191                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 25192                                  ;	for dpb offsets look at inc\dpb.inc.
 25193                                  
 25194                                  	; 03/09/2023
 25195 00000CD4 41                      	inc	cx  ; cx = 1
 25196                                  
 25197 00000CD5 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 25198                                  	;cmp	byte [cs:fake_floppy_drv],1
 25199 00000CDA 750A                    	jne	short normcds 		; machine has floppy drives
 25200                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 25201                                  	;cmp	byte [si],1
 25202 00000CDC 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 25203 00000CDE 7706                    	ja	short normcds
 25204                                  
 25205                                  	; 30/12/2023
 25206                                  	; ax = 0
 25207                                  fooset_zero:
 25208 00000CE0 B103                    	mov	cl,3			; the next dbp pointer
 25209                                  					; AX should be zero here
 25210 00000CE2 F3AB                    	rep	stosw
 25211                                  	; 30/12/2023
 25212                                  	;pop	cx
 25213 00000CE4 EB0F                    	jmp	short get_next_dpb ; findcds
 25214                                  
 25215                                  ;	(ax) = 0
 25216                                  
 25217                                  	; 30/12/2023
 25218                                  ;fooset_zero:
 25219                                  	;mov	cl,3
 25220                                  	;rep	stosw
 25221                                  	;pop	cx
 25222                                  	;jmp	short fincds
 25223                                  
 25224                                  ;*	We have a "normal" DPB and thus a normal CDS.
 25225                                  ;
 25226                                  ;	(ax) = 0
 25227                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25228                                  ;	(ds:si) = Next DPB (-1 if none)
 25229                                  
 25230                                  normcds:
 25231                                  	; 30/12/2023
 25232                                  	;pop	cx
 25233                                  
 25234                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 25235                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 25236                                  ;	this media is a non-fat based one.
 25237                                  
 25238                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 25239                                  	; 23/10/2022
 25240                                  	;cmp	byte [si+8],0
 25241                                  	; 03/09/2023 (ax=0)
 25242 00000CE6 384408                  	cmp	[si+8],al ; 0
 25243 00000CE9 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 25244 00000CEB B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 25245                                  	;mov	ax,4000h
 25246                                  setnormcds:
 25247 00000CEE AB                      	stosw				; curdir_flags
 25248 00000CEF 89F0                    	mov	ax,si
 25249 00000CF1 AB                      	stosw				; curdir_devptr
 25250 00000CF2 8CD8                    	mov	ax,ds
 25251 00000CF4 AB                      	stosw
 25252                                  
 25253                                  get_next_dpb:				; entry point for fake_fooset_zero
 25254                                  	; 30/12/2022
 25255                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25256                                  	; 23/10/2022
 25257                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 25258                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25259                                  fincds:	; get_next_dpb
 25260                                  	; 30/12/2023
 25261 00000CF5 59                      	pop	cx
 25262                                  	; 30/12/2022
 25263                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25264 00000CF6 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 25265 00000CF9 AB                      	stosw				; curdir_id
 25266 00000CFA AB                      	stosw				; curdir_id
 25267 00000CFB AB                      	stosw				; curdir_user_word
 25268 00000CFC B80200                  	mov	ax,2
 25269 00000CFF AB                      	stosw				; curdir_end
 25270 00000D00 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 25271 00000D02 AA                      	stosb
 25272 00000D03 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 25273 00000D04 AB                      	stosw
 25274 00000D05 AB                      	stosw
 25275                                  
 25276 00000D06 E2AD                    	loop	fooset
 25277                                  	
 25278 00000D08 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 25279                                  	
 25280 00000D0E C3                      	retn
 25281                                  
 25282                                  ; ----------------------------------------------------------------------
 25283                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 25284                                  ;
 25285                                  ;	entry:
 25286                                  ;	   al == ASCII CAPS drive letter
 25287                                  ;
 25288                                  ;	exit:
 25289                                  ;	   ds:si -> DPB, or si = -1 if not found
 25290                                  ; ----------------------------------------------------------------------
 25291                                  
 25292                                  ; 30/12/2023
 25293                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 25294                                  
 25295                                  	; 30/12/2022
 25296                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 25297                                  	; 23/10/2022
 25298                                  get_dpb_for_drive_al:
 25299 00000D0F 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 25300                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 25301 00000D14 C534                    	lds	si,[si]
 25302 00000D16 2C41                    	sub	al,'A'
 25303                                  
 25304                                  get_dpb_for_drive_1:
 25305                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 25306 00000D18 3A04                    	cmp	al,[si]
 25307 00000D1A 7408                    	je	short got_dpb_for_drive	;  done if so
 25308                                  
 25309 00000D1C C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25310 00000D1F 83FEFF                  	cmp	si,-1
 25311 00000D22 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 25312                                  
 25313                                  got_dpb_for_drive:
 25314 00000D24 C3                      	retn
 25315                                  
 25316                                  ;=======================================================================
 25317                                  
 25318                                  ;**	EndFile - Build DOS structures
 25319                                  ;
 25320                                  ; This procedure is called after the config.sys has been processed and
 25321                                  ; installable device drivers have been loaded (but before "install="
 25322                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 25323                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 25324                                  ; to allow for the safe EXECing of "install=" programs. All memory
 25325                                  ; above these structures is deallocated back to DOS.
 25326                                  ;
 25327                                  ;	ENTRY	?? BUGBUG
 25328                                  ;	EXIT	?? BUGBUG
 25329                                  ;	USES	?? BUGBUG
 25330                                  
 25331                                  ;=======================================================================
 25332                                  ; allocate files
 25333                                  ; ----------------------------------------------------------------------
 25334                                  
 25335                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25336                                  	; (SYSINIT:0CCDh)
 25337                                  
 25338                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25339                                  	; (SYSINIT:0E00h)
 25340                                  
 25341                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25342                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 25343                                  	
 25344                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 25345                                  
 25346                                  endfile:
 25347                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 25348                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 25349                                  ; to confbot.
 25350                                  
 25351                                  ;	if this procedure has been called to take care of install= command,
 25352                                  ;	   then we have to save es,si registers.
 25353                                  
 25354                                  	; 11/12/2022
 25355                                  	; ds = cs
 25356                                  
 25357                                  	; 23/10/2022
 25358                                  	; 31/03/2019
 25359 00000D25 1E                      	push	ds
 25360                                  
 25361                                  	;;mov	ax,Bios_Data ; 0070h
 25362                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25363                                  	; 21/10/2022
 25364 00000D26 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25365 00000D29 8ED8                    	mov	ds,ax
 25366                                  
 25367                                  	;cmp	word [052Fh],0
 25368 00000D2B 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 25369 00000D30 7505                    	jne	short multrk_flag_done
 25370                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25371                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 25372                                  	; 12/12/2022
 25373 00000D32 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 25374                                  multrk_flag_done:
 25375                                  	; 23/10/2022
 25376                                  	; 31/03/2019
 25377 00000D37 1F                      	pop	ds
 25378                                  
 25379                                  	; 11/12/2022
 25380                                  	; ds = cs
 25381                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 25382                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25383                                  	; (SYSINIT:0E14h)
 25384 00000D38 A1[9F02]                	mov	ax,[CONFBOT]
 25385 00000D3B A3[A102]                	mov	[ALLOCLIM],ax
 25386                                  	; 23/10/2022
 25387                                  	;mov	ax, [cs:top_of_cdss]
 25388                                  	;mov	[cs:ALLOCLIM], ax 
 25389                                  
 25390                                  	; 11/12/2022
 25391                                  	; ds = cs
 25392                                  	;push	cs
 25393                                  	;pop	ds
 25394                                  	
 25395                                  	;mov	ax,[CONFBOT]
 25396                                  	;mov	[ALLOCLIM],ax
 25397                                  
 25398                                  ; 18/03/2025 - MiniDOS v1.0
 25399                                  %if 0
 25400                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 25401                                  	;;;
 25402                                  	;;mov	ax,[cs:ALLOCLIM]
 25403                                  	;mov	ax,[ALLOCLIM]
 25404                                  	;mov	[cs:prev_alloclim],ax
 25405                                  	mov	[prev_alloclim],ax
 25406                                  	;mov	ax,[cs:memhi]
 25407                                  	mov	ax,[memhi]
 25408                                  	;mov	[cs:prev_memhi],ax
 25409                                  	mov	[prev_memhi],ax
 25410                                  dosfts:
 25411                                  	;;;
 25412                                  %endif
 25413                                  
 25414 00000D3E E81034                  	call	round
 25415                                  
 25416                                  	; 11/12/2022
 25417                                  	; ds = cs
 25418 00000D41 A0[9D02]                	mov	al,[FILES]
 25419                                  	; 23/10/2022
 25420                                  	;mov	al,[cs:FILES]
 25421 00000D44 2C05                    	sub	al,5
 25422 00000D46 764B                    	jbe	short dofcbs
 25423                                  
 25424 00000D48 50                      	push	ax
 25425                                  	;mov	al,devmark_files ; 'F'
 25426 00000D49 B046                    	mov	al,'F'
 25427 00000D4B E86507                  	call	setdevmark		; set devmark for sfts (files)
 25428 00000D4E 58                      	pop	ax
 25429 00000D4F 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25430                                  					;  it does sign extend.
 25431                                  	; 11/12/2022
 25432                                  	; ds = cs
 25433 00000D51 8B1E[5E03]              	mov	bx,[memlo]
 25434 00000D55 8B16[6003]              	mov	dx,[memhi]
 25435 00000D59 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25436                                  	; 23/10/2022
 25437                                  	;mov	bx,[cs:memlo]
 25438                                  	;mov	dx,[cs:memhi]
 25439                                  	;lds	di,[cs:DOSINFO]		
 25440                                  
 25441                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 25442 00000D5D C57D04                  	lds	di,[di+4]
 25443                                  
 25444                                  	;mov	[di+SF.SFLink],bx
 25445 00000D60 891D                    	mov	[di],bx
 25446 00000D62 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 25447                                  
 25448 00000D65 0E                      	push	cs
 25449 00000D66 1F                      	pop	ds
 25450                                  
 25451                                  	; 11/12/2022
 25452                                  	; ds = cs
 25453 00000D67 C43E[5E03]              	les	di,[memlo]		;point to new sft
 25454                                  	; 23/10/2022
 25455                                  	;les	di,[cs:memlo]
 25456                                  
 25457                                  	;mov	word [es:di+SF.SFLink],-1
 25458 00000D6B 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 25459                                  	;mov	[es:di+SF.SFCount],ax
 25460 00000D70 26894504                	mov	[es:di+4],ax
 25461                                  	; 09/04/2024
 25462 00000D74 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25463                                  	;mov	bl,59
 25464 00000D76 F6E3                    	mul	bl			;ax = number of bytes to clear
 25465 00000D78 89C1                    	mov	cx,ax
 25466                                  	; 11/12/2022
 25467                                  	; ds = cs
 25468 00000D7A 0106[5E03]              	add	[memlo],ax		;allocate memory
 25469                                  	; 23/10/2022
 25470                                  	;add	[cs:memlo],ax
 25471 00000D7E B80600                  	mov	ax,6
 25472                                  	; 11/12/2022
 25473 00000D81 0106[5E03]              	add	[memlo],ax		;remember the header too
 25474                                  	;add	[cs:memlo],ax
 25475                                  	; 11/12/2022
 25476 00000D85 800E[D814]02            	or	byte [setdevmarkflag],for_devmark ; 2
 25477                                  	; 23/10/2022
 25478                                  	;or	byte [cs:setdevmarkflag],2
 25479 00000D8A E8C433                  	call	round			; check for mem error before the stosb
 25480 00000D8D 01C7                    	add	di,ax
 25481 00000D8F 31C0                    	xor	ax,ax
 25482 00000D91 F3AA                    	rep	stosb			;clean out the stuff
 25483                                  
 25484                                  ; allocate fcbs
 25485                                  ; ----------------------------------------------------------------------
 25486                                  
 25487                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25488                                  	; (SYSINIT:0D48h)
 25489                                  dofcbs:
 25490                                  	; 11/12/2022
 25491                                  	; ds = cs
 25492                                  	;push	cs
 25493                                  	;pop	ds
 25494 00000D93 E8BB33                  	call	round
 25495                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 25496 00000D96 B058                    	mov	al,'X'
 25497 00000D98 E81807                  	call	setdevmark
 25498                                  	; 11/12/2022
 25499                                  	; ds = cs
 25500                                  
 25501                                  	; 07/04/2025 - MiniDOS 1.0
 25502                                  	;mov	al,[FCBS]
 25503                                  	;;mov	al,[cs:FCBS]
 25504                                  	;xor	ah,ah			; do not use cbw instruction!!!!!
 25505                                  	; 07/04/2025			;  it does sign extend.
 25506 00000D9B B80400                  	mov	ax, 4 ; [FCBS]	
 25507                                  
 25508                                  	; 11/12/2022
 25509 00000D9E 8B1E[5E03]              	mov	bx,[memlo]
 25510 00000DA2 8B16[6003]              	mov	dx,[memhi]
 25511 00000DA6 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25512                                  	; 23/10/2022
 25513                                  	;mov	bx,[cs:memlo]
 25514                                  	;mov	dx,[cs:memhi]
 25515                                  	;lds	di,[cs:DOSINFO]
 25516                                  
 25517                                  	;mov	[di+SYSI_FCB],bx
 25518                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 25519                                  	; 23/10/2022
 25520 00000DAA 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 25521 00000DAD 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 25522                                  
 25523                                  	; 07/04/2025 - MiniDOS 1.0
 25524                                  	;mov	bl,[cs:KEEP]
 25525                                  	;xor	bh,bh
 25526                                  	;;mov	[di+SYSI_KEEP],bx
 25527                                  	; 07/04/2025
 25528 00000DB0 31DB                    	xor	bx, bx
 25529 00000DB2 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 25530                                  
 25531 00000DB5 0E                      	push	cs
 25532 00000DB6 1F                      	pop	ds
 25533                                  	
 25534 00000DB7 C43E[5E03]              	les	di,[memlo]		;point to new table
 25535                                  	;mov	word [es:di+SF.SFLink],-1
 25536 00000DBB 26C705FFFF              	mov	word [es:di],-1
 25537                                  	;mov	[es:di+SF.SFCount],ax
 25538                                  	; 02/11/2022
 25539 00000DC0 26894504                	mov	[es:di+4],ax
 25540 00000DC4 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25541 00000DC6 89C1                    	mov	cx,ax
 25542 00000DC8 F6E3                    	mul	bl			;ax = number of bytes to clear
 25543 00000DCA 0106[5E03]              	add	[memlo],ax		;allocate memory
 25544                                  	;mov	ax,6
 25545 00000DCE B80600                  	mov	ax,SF.size-2 ; 6
 25546 00000DD1 0106[5E03]              	add	[memlo],ax		;remember the header too
 25547                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25548 00000DD5 800E[D814]02            	or	byte [setdevmarkflag],2
 25549 00000DDA E87433                  	call	round			; check for mem error before the stosb
 25550 00000DDD 01C7                    	add	di,ax			;skip over header
 25551 00000DDF B041                    	mov	al,'A'
 25552                                  fillloop:
 25553 00000DE1 51                      	push	cx			; save count
 25554 00000DE2 B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 25555 00000DE5 FC                      	cld
 25556 00000DE6 F3AA                    	rep	stosb			; filled
 25557                                  
 25558                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 25559                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 25560                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 25561                                  
 25562                                  	; 18/12/2022
 25563                                  	;cx = 0
 25564 00000DE8 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 25565 00000DEC 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 25566 00000DF0 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 25567                                  	
 25568                                  	; 23/10/2022	
 25569                                  	;mov     word [es:di-3Bh],0
 25570                                  	;mov     word [es:di-26h],0
 25571                                  	;mov     word [es:di-24h],0
 25572                                  
 25573 00000DF4 59                      	pop	cx
 25574 00000DF5 E2EA                    	loop	fillloop
 25575                                  
 25576                                  ; allocate buffers
 25577                                  ; ----------------------------------------------------------------------
 25578                                  
 25579                                  ; search through the list of media supported and allocate 3 buffers if the
 25580                                  ; capacity of the drive is > 360kb
 25581                                  
 25582                                  	; 18/12/2022
 25583                                  	; cx = 0
 25584 00000DF7 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 25585 00000DFC 7403                    	je	short dodefaultbuff
 25586 00000DFE E98000                  	jmp	dobuff			; the user entered the buffers=.
 25587                                  
 25588                                  dodefaultbuff:
 25589                                  	; 18/12/2022
 25590 00000E01 890E[9902]              	mov	[h_buffers],cx ; 0
 25591                                  	;inc	cx
 25592                                  	;inc	cx
 25593                                  	;mov	[buffers],cx ; 2
 25594                                  	; 10/04/2024
 25595 00000E05 C706[9702]0200          	mov	word [buffers],2
 25596                                  
 25597                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 25598                                  	;mov	word [buffers],2	; default to 2 buffers
 25599                                  
 25600                                  	; 23/10/2022
 25601                                  	; 04/09/2023
 25602                                  	;push	ax
 25603                                  	;push	ds ; 26/03/2019
 25604                                  
 25605                                  	; 04/09/2023
 25606                                  	; ds = cs
 25607 00000E0B C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 25608                                  	;les	bp,[cs:DOSINFO]
 25609                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 25610                                  	; 11/12/2022
 25611 00000E0F 26C46E00                	les	bp,[es:bp]
 25612                                  	; 23/10/2022
 25613                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 25614                                  
 25615                                  	; 04/09/2023
 25616                                  	; ds = cs
 25617                                  	;push	cs
 25618                                  	;pop	ds
 25619                                  ;SYSINIT:0DE2h:
 25620                                  nextdpb:				; test if the drive supports removeable media
 25621                                  	;mov	bl,[es:bp+DPB.drive]
 25622                                  	; 11/12/2022
 25623 00000E13 268A5E00                	mov	bl,[es:bp]
 25624                                  	; 23/10/2022
 25625                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25626                                  
 25627                                  	;inc	bl
 25628                                  	; 18/12/2022
 25629 00000E17 43                      	inc	bx
 25630                                  
 25631                                  	;mov	ax,(IOCTL<<8)|8
 25632 00000E18 B80844                  	mov	ax,4408h
 25633 00000E1B CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25634                                  
 25635                                  ; ignore fixed disks
 25636                                  
 25637 00000E1D 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 25638 00000E1F 7534                    	jnz	short nosetbuf
 25639                                  
 25640                                  ; get parameters of drive
 25641                                  
 25642 00000E21 31DB                    	xor	bx,bx
 25643                                  	;;mov	bl,[es:bp+DPB.drive]
 25644                                  	; 11/12/2022
 25645 00000E23 268A5E00                	mov	bl,[es:bp]
 25646                                  	; 23/10/2022
 25647                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25648                                  	
 25649                                  	;inc	bl
 25650                                  	; 18/12/2022
 25651 00000E27 43                      	inc	bx
 25652                                  
 25653 00000E28 BA[0447]                	mov	dx,deviceparameters
 25654                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 25655 00000E2B B80D44                  	mov	ax,440Dh
 25656                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 25657 00000E2E B96008                  	mov	cx,860h
 25658 00000E31 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25659 00000E33 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 25660                                  					; generic ioctl
 25661                                  ; determine capacity of drive
 25662                                  ; media capacity = #sectors * bytes/sector
 25663                                  
 25664                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 25665                                  	; 23/10/2022
 25666 00000E35 8B1E[1347]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 25667                                  	
 25668                                  ; to keep the magnitude of the media capacity within a word,
 25669                                  ; scale the sector size
 25670                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 25671                                  
 25672                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 25673                                  	; 23/10/2022
 25674 00000E39 A1[0B47]                	mov	ax,[deviceparameters+7] ; bytes per sector
 25675 00000E3C 31D2                    	xor	dx,dx
 25676 00000E3E B90002                  	mov	cx,512
 25677 00000E41 F7F1                    	div	cx			; scale sector size in factor of
 25678                                  					; 512 bytes
 25679 00000E43 F7E3                    	mul	bx			; ax = #sectors * size factor
 25680 00000E45 09D2                    	or	dx,dx			; just in case of large floppies
 25681 00000E47 7505                    	jnz	short setbuf
 25682 00000E49 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 25683 00000E4C 7607                    	jbe	short nosetbuf
 25684                                  setbuf:
 25685                                  	; 18/12/2022
 25686                                  	; word [buffers] = 2
 25687 00000E4E C606[9702]03            	mov	byte [buffers],3
 25688                                  	;mov	word [buffers],3
 25689 00000E53 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 25690                                  					; for default buffer count
 25691                                  nosetbuf:
 25692                                  	; 23/10/2022
 25693                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 25694 00000E55 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 25695 00000E5A 7406                    	je	short chk_memsize_for_buffers
 25696                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 25697 00000E5C 26C46E19                	les	bp,[es:bp+19h]
 25698 00000E60 EBB1                    	jmp	short nextdpb
 25699                                  
 25700                                  ;from dos 3.3,the default number of buffers will be changed according to the
 25701                                  ;memory size too.
 25702                                  ; default buffers = 2
 25703                                  ; if diskette media > 360 kb,then default buffers = 3
 25704                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 25705                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 25706                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 25707                                  
 25708                                  chk_memsize_for_buffers:
 25709                                  	; 18/12/2022
 25710                                  	;cmp	word [MEMORY_SIZE],2000h
 25711                                  	;jbe	short bufset
 25712                                  	;mov	word [buffers],5
 25713                                  	;cmp	word [MEMORY_SIZE],4000h
 25714                                  	;jbe	short bufset
 25715                                  	;mov	word [buffers],10
 25716                                  	;cmp	word [MEMORY_SIZE],8000h
 25717                                  	;jbe	short bufset
 25718                                  	;mov	word [buffers],15
 25719                                  
 25720                                  	; 18/12/2022
 25721                                  	; word [buffers] = 3 or 2
 25722 00000E62 BB[9702]                	mov	bx,buffers
 25723 00000E65 A1[9202]                	mov	ax,[MEMORY_SIZE]
 25724 00000E68 48                      	dec	ax	; [MEMORY_SIZE] - 1
 25725                                  
 25726 00000E69 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 25727 00000E6C 7213                    	jb	short bufset
 25728 00000E6E C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 25729 00000E71 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 25730 00000E74 730B                    	jnb	short bufset
 25731 00000E76 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 25732 00000E79 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 25733 00000E7C 7303                    	jnb	short bufset
 25734 00000E7E C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 25735                                  bufset:
 25736                                  	; 23/10/2022
 25737                                  	; 26/03/2019
 25738                                  	; 04/09/2023
 25739                                  	;pop	ds
 25740                                  	;pop	ax
 25741                                  
 25742                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25743                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 25744                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25745                                  
 25746                                  ; 26/03/2019
 25747                                  
 25748                                  ;*******************************************************************************
 25749                                  ;									       *
 25750                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 25751                                  ; input :								       *
 25752                                  ;    memhi:memlo - start of the next available memory			       *
 25753                                  ;    buffers = number of buffers					       *
 25754                                  ;    h_buffers = number of secondary buffers				       *
 25755                                  ;									       *
 25756                                  ; output:								       *
 25757                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 25758                                  ;	buffinfo set.							       *
 25759                                  ;	bufferqueue set.						       *
 25760                                  ;									       *
 25761                                  ; subroutines to be called:						       *
 25762                                  ;									       *
 25763                                  ;*******************************************************************************
 25764                                  
 25765                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25766                                  	; (SYSINIT:0E60h)
 25767                                  dobuff:
 25768                                  	; ds = cs ; 31/03/2019
 25769                                  	; 23/10/2022
 25770                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 25771                                  	; 04/09/2023
 25772 00000E81 A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 25773 00000E84 8B0E[9902]              	mov	cx,[h_buffers] ; *
 25774 00000E88 C51E[6D02]              	lds	bx,[DOSINFO]
 25775                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 25776                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 25777 00000E8C 89473F                  	mov	[bx+3Fh],ax
 25778                                  	; 04/09/2023
 25779                                  	;mov	ax,[cs:h_buffers]
 25780                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 25781                                  	;mov	[bx+41h],ax
 25782                                  	; 04/09/2023
 25783 00000E8F 894F41                  	mov	[bx+41h],cx ; *
 25784 00000E92 C55F12                  	lds	bx,[bx+12h]
 25785                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 25786 00000E95 E8B932                  	call	round		; get [memhi]:[memlo]
 25787                                  	;mov	al,devmark_buf	; ='B'
 25788 00000E98 B042                    	mov	al,'B'	
 25789 00000E9A E81606                  	call	setdevmark
 25790                                  
 25791                                  ;allocate buffers
 25792                                  
 25793 00000E9D 1E                      	push	ds			; save buffer info. ptr.
 25794 00000E9E 53                      	push	bx
 25795                                  
 25796 00000E9F E84E03                  	call	set_buffer
 25797                                  
 25798 00000EA2 5B                      	pop	bx
 25799 00000EA3 1F                      	pop	ds
 25800                                  
 25801                                  ;now set the secondary buffer if specified.
 25802                                  
 25803 00000EA4 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 25804 00000EAA 742D                    	je	short xif16
 25805 00000EAC E8A232                  	call	round
 25806                                  	; 23/10/2022
 25807 00000EAF 2E8B0E[5E03]            	mov	cx,[cs:memlo]
 25808                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 25809 00000EB4 894F06                  	mov	[bx+6],cx
 25810 00000EB7 2E8B0E[6003]            	mov	cx,[cs:memhi]
 25811                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 25812 00000EBC 894F08                  	mov	[bx+8],cx
 25813 00000EBF 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 25814                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 25815 00000EC4 894F0A                  	mov	[bx+10],cx
 25816 00000EC7 B80002                  	mov	ax,512			; 512 byte
 25817 00000ECA F7E1                    	mul	cx
 25818 00000ECC 2EA3[5E03]              	mov	[cs:memlo],ax
 25819                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25820 00000ED0 2E800E[D814]02          	or	byte [cs:setdevmarkflag],2
 25821 00000ED6 E87832                  	call	round
 25822                                  xif16:
 25823                                  
 25824                                  ; ----------------------------------------------------------------------
 25825                                  ; allocate cdss
 25826                                  ; ----------------------------------------------------------------------
 25827                                  
 25828                                  buf1:
 25829 00000ED9 E87532                  	call	round
 25830                                  
 25831 00000EDC 50                      	push	ax
 25832                                  	; 23/10/2022
 25833                                  	;mov	ax,devmark_cds		;='L'
 25834 00000EDD B84C00                  	mov	ax, 'L'
 25835 00000EE0 E8D005                  	call	setdevmark
 25836 00000EE3 58                      	pop	ax
 25837                                  
 25838 00000EE4 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 25839                                  	;mov	cl,[es:di+SYSI_NUMIO]
 25840 00000EE9 268A4D20                	mov	cl,[es:di+20h]
 25841 00000EED 2E3A0E[9E02]            	cmp	cl,[cs:NUM_CDS]
 25842 00000EF2 7305                    	jae	short gotncds 		; user setting must be at least numio
 25843 00000EF4 2E8A0E[9E02]            	mov	cl,[cs:NUM_CDS]
 25844                                  gotncds:
 25845 00000EF9 30ED                    	xor	ch,ch
 25846                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 25847 00000EFB 26884D21                	mov	[es:di+21h],cl
 25848 00000EFF 2EA1[6003]              	mov	ax,[cs:memhi]
 25849                                  	;mov	[es:di+SYSI_CDS+2],ax
 25850 00000F03 26894518                	mov	[es:di+18h],ax
 25851 00000F07 2EA1[5E03]              	mov	ax,[cs:memlo]
 25852                                  	;mov	[es:di+SYSI_CDS],ax
 25853 00000F0B 26894516                	mov	[es:di+16h],ax
 25854 00000F0F 88C8                    	mov	al,cl
 25855                                  	;mov	ah,curdirlen ; curdir_list.size
 25856 00000F11 B458                    	mov	ah,88
 25857 00000F13 F6E4                    	mul	ah
 25858 00000F15 E84B02                  	call	ParaRound
 25859 00000F18 2E0106[6003]            	add	[cs:memhi],ax
 25860                                  
 25861                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25862 00000F1D 2E800E[D814]02          	or	byte [cs:setdevmarkflag],2
 25863 00000F23 E82B32                  	call	round			; check for mem error before initializing
 25864                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 25865 00000F26 26C535                  	lds	si,[es:di]
 25866                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 25867 00000F29 26C47D16                	les	di,[es:di+16h]
 25868 00000F2D E885FD                  	call	fooset
 25869                                  
 25870                                  ; ----------------------------------------------------------------------
 25871                                  ; allocate space for internal stack
 25872                                  ; ----------------------------------------------------------------------
 25873                                  
 25874 00000F30 0E                      	push	cs
 25875 00000F31 1F                      	pop	ds
 25876                                  
 25877                                  ;	if the user did not entered stacks= command, as a default, do not install
 25878                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 25879                                  ;	otherwise,install it to the user specified value or to the default
 25880                                  ;	value of 9,128 for other systems.
 25881                                  
 25882 00000F32 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 25883 00000F37 740E                    	je	short doinstallstack	; then install as specified by the user
 25884 00000F39 803E[B802]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 25885 00000F3E 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 25886 00000F40 803E[B702]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 25887 00000F45 736D                    	jae	short skipstack
 25888                                  doinstallstack:
 25889 00000F47 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 25890 00000F4A 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 25891 00000F4C 7466                    	jz	short skipstack		; don't install stack.
 25892                                  
 25893                                  ;	dynamic relocation of stack code.
 25894                                  
 25895 00000F4E E80032                  	call	round			;[memhi] = seg. for stack code
 25896                                  					;[memlo] = 0
 25897                                  
 25898                                  ; set devmark block into memory for mem command
 25899                                  ; devmark_id = 's' for stack
 25900                                  
 25901                                  	;mov	al,devmark_stk	;='S'
 25902                                  	; 23/10/2022
 25903 00000F51 B053                    	mov	al,'S'
 25904 00000F53 E85D05                  	call	setdevmark
 25905                                  
 25906 00000F56 A1[6003]                	mov	ax,[memhi]
 25907 00000F59 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 25908                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25909                                  	; 11/12/2022
 25910                                  	; ds = cs
 25911                                  	;push	cs
 25912                                  	;pop	ds
 25913 00000F5B 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 25914 00000F5D 31FF                    	xor	di,di
 25915 00000F5F B9[6902]                	mov	cx,endstackcode
 25916 00000F62 890E[5E03]              	mov	[memlo],cx
 25917 00000F66 E8E831                  	call	round		;have enough space for relocation?
 25918 00000F69 F3A4                    	rep	movsb
 25919                                  
 25920 00000F6B 1E                      	push	ds		; stick the location of the NextStack entry
 25921                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 25922                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25923                                  	; 21/10/2022
 25924 00000F6C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25925 00000F6F 8ED8                    	mov	ds,ax
 25926 00000F71 C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 25927 00000F77 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 25928                                  
 25929 00000F7B 2EA1[5E03]              	mov	ax,[cs:memlo]
 25930 00000F7F 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 25931 00000F83 A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 25932 00000F86 2EA1[6003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 25933 00000F8A 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 25934 00000F8E A3[0A08]                	mov	[IT_StackLoc+2],ax
 25935                                  
 25936                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 25937                                  
 25938                                  	;mov	ax,entrysize ; mov ax,8
 25939                                  	; 23/10/2022
 25940 00000F91 B80800                  	mov	ax,8
 25941 00000F94 2E0306[8C02]            	add	ax,[cs:stack_size]
 25942 00000F99 2EF726[8A02]            	mul	word [cs:stack_count]
 25943                                  
 25944 00000F9E A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 25945                                  
 25946 00000FA1 1F                      	pop	ds		; no more need to access Instance Table
 25947                                  
 25948 00000FA2 E8BE01                  	call	ParaRound	; convert size to paragraphs
 25949                                  	
 25950                                  	; 11/12/2022
 25951                                  	; ds = cs
 25952                                  	;add	[cs:memhi],ax
 25953 00000FA5 0106[6003]              	add	[memhi],ax
 25954                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25955                                  	;or	byte [cs:setdevmarkflag],2
 25956 00000FA9 800E[D814]02            	or	byte [setdevmarkflag],2
 25957                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25958                                  				;to set the devmark_size for stack by round routine.
 25959 00000FAE E8A031                  	call	round		; check for memory error before
 25960                                  				; continuing
 25961 00000FB1 E8E902                  	call	stackinit	; initialize hardware stack. 
 25962                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 25963                                  skipstack:
 25964                                  
 25965                                  ; 18/03/2025 - MiniDOS 1.0
 25966                                  %if 0	
 25967                                  	; 10/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25968                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:11F0h)
 25969                                  	;;;
 25970                                  	;push	cs
 25971                                  	;pop	ds
 25972                                  	; ds = cs
 25973                                  	cmp	byte [dosdata_umb],1	; PCDOS 7 feature - DOSDATA=UMB/NOUMB configuration
 25974                                  					; 1 = DOSDATA=UMB, 2 = (UMB) done, 0 = NOUMB
 25975                                  	ja	short dosdata_umb_done	; 2 - done
 25976                                  	jb	short dosdata_noumb	; 0 - DOSDATA=NOUMB
 25977                                  	
 25978                                  	cmp	byte [setdevmark],0EAh
 25979                                  	je	short dosdata_noumb
 25980                                  	
 25981                                  	mov	ax,5802h
 25982                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25983                                  				; AL = function code: (DOS 5beta) get UMB link state
 25984                                  	cbw
 25985                                  	mov	di,ax			; al = 01h -> UMBs in DOS memory chain
 25986                                  					; save current (previous) UMB link state
 25987                                  	mov	bx,1			; bx = 01h -> add UMBs to DOS memory chain
 25988                                  	
 25989                                  	mov	ax,5803h
 25990                                  	int	21h
 25991                                  	jc	short dosdata_noumb
 25992                                  	
 25993                                  	mov	ax,5800h
 25994                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 25995                                  				; AL = function code: get allocation strategy
 25996                                  	
 25997                                  	mov	si,ax			; ax = current strategy
 25998                                  					; save current (previous) allocation strategy
 25999                                  	mov	bx,40h			; bl = new strategy = 40h - high memory first fit
 26000                                  	
 26001                                  	mov	ax,5801h
 26002                                  	int	21h
 26003                                  
 26004                                  	mov	bx,[memhi]
 26005                                  	sub	bx,[prev_memhi]
 26006                                  	
 26007                                  	mov	ah,48h
 26008                                  	int	21h		; DOS - 2+ - ALLOCATE MEMORY
 26009                                  				; BX = number of 16-byte paragraphs desired
 26010                                  	mov	cx,ax			; ax = segment of allocated block
 26011                                  	mov	bx,di			; restore previous UMB link state
 26012                                  	
 26013                                  	mov	ax,5803h
 26014                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26015                                  				; AL = function code: (DOS 5beta) set UMB link state
 26016                                  	mov	bx,si			; restore previous allocation strategy
 26017                                  	
 26018                                  	mov	ax,5801h
 26019                                  	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26020                                  				; AL = function code: set allocation strategy
 26021                                  	cmp	cx,0A000h		; Is the allocated memory block (segment) a UMB?
 26022                                  	jb	short dosdata_noumb	; no
 26023                                  	
 26024                                  	;mov	word [ALLOCLIM],0FFFFh
 26025                                  	;mov	word [memlo],0
 26026                                  	mov	[memhi],cx
 26027                                  	dec	cx
 26028                                  	mov	es,cx			; point to arena/mcb
 26029                                  	; 10/04/2024
 26030                                  	xor	cx,cx ; 0
 26031                                  	mov	[memlo],cx ; 0
 26032                                  	dec	cx
 26033                                  	mov	[ALLOCLIM],cx ; 0FFFFh
 26034                                  
 26035                                  	mov	word [es:1],8		; [es:arena_owner], 8 ; set impossible owner
 26036                                  	mov	word [es:8],4453h	; [es:arena_name],'SD' ; System Data
 26037                                  	inc	byte [dosdata_umb]	; 1 -> 2 ; DOSDATA=UMB done.
 26038                                  	jmp	dosfts
 26039                                  
 26040                                  dosdata_umb_done:
 26041                                  	mov	ax,[prev_memhi]		; (recent memory block/segment before UMBs)
 26042                                  	mov	[memhi],ax
 26043                                  	mov	ax,[prev_alloclim]
 26044                                  	mov	[ALLOCLIM],ax
 26045                                  dosdata_noumb:
 26046                                   	;;;
 26047                                  %endif
 26048                                  
 26049                                  ;skipstack:
 26050                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26051                                  	; (SYSINIT:0F99h)
 26052                                  
 26053                                  	; 11/12/2022
 26054                                  	; ds = cs
 26055                                  	;push	cs
 26056                                  	;pop	ds
 26057                                  
 26058 00000FB4 A0[9D02]                	mov	al,[FILES]
 26059 00000FB7 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 26060                                  				;  it does sign extend.
 26061 00000FB9 89C1                    	mov	cx,ax
 26062 00000FBB 31DB                    	xor	bx,bx		;close standard input
 26063 00000FBD B43E                    	mov	ah,3Eh ; CLOSE
 26064 00000FBF CD21                    	int	21h
 26065 00000FC1 BB0200                  	mov	bx,2
 26066                                  rcclloop:			;close everybody but standard output
 26067 00000FC4 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 26068 00000FC6 CD21                    	int	21h		; in case we can't get new one open.
 26069 00000FC8 43                      	inc	bx
 26070 00000FC9 E2F9                    	loop	rcclloop
 26071                                  
 26072 00000FCB BA[2444]                	mov	dx,condev
 26073 00000FCE B002                    	mov	al,2
 26074 00000FD0 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 26075 00000FD2 F9                      	stc			; set for possible int 24
 26076 00000FD3 CD21                    	int	21h
 26077 00000FD5 7305                    	jnc	short goaux
 26078 00000FD7 E8AD33                  	call	badfil
 26079 00000FDA EB13                    	jmp	short goaux2
 26080                                  goaux:	
 26081 00000FDC 50                      	push	ax
 26082 00000FDD BB0100                  	mov	bx,1		;close standard output
 26083 00000FE0 B43E                    	mov	ah,3Eh ; CLOSE
 26084 00000FE2 CD21                    	int	21h
 26085 00000FE4 58                      	pop	ax
 26086                                  
 26087 00000FE5 89C3                    	mov	bx,ax		;new device handle
 26088 00000FE7 B445                    	mov	ah,45h ; XDUP
 26089 00000FE9 CD21                    	int	21h		;dup to 1,stdout
 26090 00000FEB B445                    	mov	ah,45h ; XDUP
 26091 00000FED CD21                    	int	21h		;dup to 2,stderr
 26092                                  goaux2: 
 26093 00000FEF BA[2844]                	mov	dx,auxdev
 26094 00000FF2 B002                    	mov	al,2		;read/write access
 26095 00000FF4 E8C133                  	call	open_dev
 26096                                  
 26097 00000FF7 BA[2C44]                	mov	dx,prndev
 26098 00000FFA B001                    	mov	al,1		;write only
 26099 00000FFC E8B933                  	call	open_dev
 26100                                  
 26101                                  ;global rearm command for shared interrupt devices attached in the system;
 26102                                  ;shared interrupt attachment has some problem when it issues interrupt
 26103                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 26104                                  ;no further interrupts on that level will be presented until a global rearm
 26105                                  ;is issued. by the request of the system architecture group, msbio will
 26106                                  ;issue a global rearm after every device driver is loaded.
 26107                                  ;to issue a global rearm:	;for pc1,xt,palace
 26108                                  ;
 26109                                  ;			  out 02f2h,xx  ; interrupt level 2
 26110                                  ;			  out 02f3h,xx  ; interrupt level 3
 26111                                  ;			  out 02f4h,xx  ; interrupt level 4
 26112                                  ;			  out 02f5h,xx  ; interrupt level 5
 26113                                  ;			  out 02f6h,xx  ; interrupt level 6
 26114                                  ;			  out 02f7h,xx  ; interrupt level 7
 26115                                  ;
 26116                                  ;	for pc at,in addition to the above commands,
 26117                                  ;	need to handle the secondary interrupt handler
 26118                                  ;
 26119                                  ;			  out 06f2h,xx  ; interrupt level 10
 26120                                  ;			  out 06f3h,xx  ; interrupt level 11
 26121                                  ;			  out 06f4h,xx  ; interrupt level 12
 26122                                  ;			  out 06f6h,xx  ; interrupt level 14
 26123                                  ;			  out 06f7h,xx  ; interrupt level 15
 26124                                  ;
 26125                                  ;	for round-up machine
 26126                                  ;
 26127                                  ;			  none.
 26128                                  
 26129                                  ; where xx stands for any value.
 26130                                  ;
 26131                                  ; for your information,after naples level machine,the system service bios
 26132                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 26133                                  
 26134                                  	; 24/10/2022
 26135                                  
 26136 00000FFF 50                      	push	ax
 26137 00001000 53                      	push	bx
 26138 00001001 52                      	push	dx
 26139 00001002 06                      	push	es
 26140                                  
 26141 00001003 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 26142 00001005 BAF202                  	mov	dx,2F2h 		;get starting address
 26143 00001008 EE                      	out	dx,al			; out 02f2h,0ffh
 26144 00001009 42                      	inc	dx
 26145 0000100A EE                      	out	dx,al			; out 02f3h,0ffh
 26146 0000100B 42                      	inc	dx
 26147 0000100C EE                      	out	dx,al			; out 02f4h,0ffh
 26148 0000100D 42                      	inc	dx
 26149 0000100E EE                      	out	dx,al			; out 02f5h,0ffh
 26150 0000100F 42                      	inc	dx
 26151 00001010 EE                      	out	dx,al			; out 02f6h,0ffh
 26152 00001011 42                      	inc	dx
 26153 00001012 EE                      	out	dx,al			; out 02f7h,0ffh
 26154                                  
 26155                                  ;sb secondary global rearm
 26156                                  
 26157 00001013 B800F0                  	mov	ax,0F000h		;get machine type
 26158 00001016 8EC0                    	mov	es,ax
 26159 00001018 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 26160 0000101E 740D                    	je	short startrearm	; *if at no need to check
 26161                                  
 26162 00001020 B4C0                    	mov	ah,0C0h 		;get system configuration
 26163 00001022 CD15                    	int	15h			; *
 26164 00001024 7216                    	jc	short finishrearm	; *jmp if old rom
 26165                                  
 26166                                  ; test feature byte for secondary interrupt controller
 26167                                  
 26168 00001026 26F6470540              	test	byte [es:bx+5],40h
 26169                                  	; 24/10/2022
 26170                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 26171 0000102B 740F                    	je	short finishrearm	;jmp if it is there
 26172                                  
 26173                                  startrearm:
 26174 0000102D B0FF                    	mov	al,0FFh 		;write any pattern to port
 26175 0000102F BAF206                  	mov	dx,6F2h 		;get starting address
 26176 00001032 EE                      	out	dx,al			;out 06f2h,0ffh
 26177 00001033 42                      	inc	dx			;bump address
 26178 00001034 EE                      	out	dx,al			;out 06f3h,0ffh
 26179 00001035 42                      	inc	dx			;bump address
 26180 00001036 EE                      	out	dx,al			;out 06f4h,0ffh
 26181 00001037 42                      	inc	dx			;bump address
 26182 00001038 42                      	inc	dx			;bump address
 26183 00001039 EE                      	out	dx,al			;out 06f6h,0ffh
 26184 0000103A 42                      	inc	dx			;bump address
 26185 0000103B EE                      	out	dx,al			;out 06f7h,0ffh
 26186                                  
 26187                                  finishrearm:
 26188 0000103C 07                      	pop	es
 26189 0000103D 5A                      	pop	dx
 26190 0000103E 5B                      	pop	bx
 26191 0000103F 58                      	pop	ax
 26192                                  
 26193                                  ;    global rearm end *******************
 26194                                  
 26195                                  ; ----------------------------------------------------------------------
 26196                                  ; allocate sysinit_base for install= command
 26197                                  ; ----------------------------------------------------------------------
 26198                                  ; sysinit_base allocation.
 26199                                  ;   check if endfile has been called to handle install= command.
 26200                                  
 26201                                  set_sysinit_base:
 26202                                  
 26203                                  ; ----------------------------------------------------------------------
 26204                                  ;sysinit_base will be established in the secure area of
 26205                                  ;lower memory when it handles the first install= command.
 26206                                  ;sysinit_base is the place where the actual exec function will be called and
 26207                                  ;will check sysinit module in high memory if it is damaged by the application
 26208                                  ;program.  if sysinit module has been broken,then "memory error..." message
 26209                                  ;is displayed by sysinit_base.
 26210                                  ; ----------------------------------------------------------------------
 26211                                  
 26212                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26213                                  	; (SYSINIT:1028h)
 26214                                  
 26215                                  	; 11/12/2022
 26216                                  	; ds = cs
 26217 00001040 50                      	push	ax			; set devmark for mem command
 26218 00001041 A1[6003]                	mov	ax,[memhi]
 26219 00001044 2B06[6403]              	sub	ax,[area]
 26220 00001048 A3[5C03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 26221                                  	;mov	al,devmark_inst ; 'T'
 26222 0000104B B054                    	mov	al,'T'
 26223 0000104D E86304                  	call	setdevmark
 26224 00001050 58                      	pop	ax
 26225                                  
 26226 00001051 8B3E[6003]              	mov	di,[memhi]
 26227 00001055 8EC7                    	mov	es,di
 26228 00001057 893E[D002]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 26229 0000105B 31FF                    	xor	di,di
 26230 0000105D 893E[CE02]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 26231 00001061 BE[6F11]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 26232 00001064 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 26233                                  	; 24/10/2022 
 26234                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 26235 00001067 010E[5E03]              	add	[memlo],cx
 26236                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 26237                                  	; 11/12/2022
 26238                                  	; ds = cs
 26239                                  	;or	byte [cs:setdevmarkflag],2
 26240 0000106B 800E[D814]02            	or	byte [setdevmarkflag],2
 26241                                  	;or	byte [setdevmarkflag],for_devmark
 26242 00001070 E8DE30                  	call	round			; check mem error. also,readjust memhi for the next use.
 26243 00001073 F3A4                    	rep	movsb			; reallocate it.
 26244                                  
 26245 00001075 C706[D202][5611]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 26246 0000107B 8C0E[D402]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 26247                                  	;or	word [install_flag],has_installed ; set the flag.
 26248                                  	;or	byte [install_flag],has_installed ; 2
 26249                                  	; 11/12/2022
 26250 0000107F 800E[CA02]02            	or	byte [install_flag],2
 26251                                  	; 24/10/2022
 26252                                  	;or	word [install_flag],2	
 26253                                  
 26254                                  ; ----------------------------------------------------------------------
 26255                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 26256                                  ; the top of the memory will be allocated for sysinit and config.sys if
 26257                                  ; have_install_cmd.
 26258                                  ; ----------------------------------------------------------------------
 26259                                  
 26260 00001084 E8CA30                  	call	round
 26261 00001087 8B1E[6003]              	mov	bx,[memhi]
 26262 0000108B A1[6403]                	mov	ax,[area]
 26263 0000108E A3[5A03]                	mov	[old_area],ax		; save [area]
 26264 00001091 8EC0                    	mov	es,ax			;calc what we needed
 26265 00001093 29C3                    	sub	bx,ax
 26266                                  	; 24/10/2022
 26267 00001095 B44A                    	mov	ah,4Ah ; SETBLOCK
 26268 00001097 CD21                    	int	21h			;give the rest back
 26269                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26270                                  		; ES = segment address of block to change
 26271                                  		; BX = new size in paragraphs
 26272 00001099 06                      	push	es
 26273 0000109A 8CC0                    	mov	ax,es
 26274 0000109C 48                      	dec	ax
 26275 0000109D 8EC0                    	mov	es,ax			;point to arena
 26276                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 26277                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 26278                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 26279                                  	; 24/10/2022
 26280 0000109F 26C70601000800          	mov	word [es:1],8		;set impossible owner
 26281 000010A6 26C70608005344          	mov	word [es:8],'SD'	; System Data
 26282 000010AD 07                      	pop	es
 26283                                  
 26284 000010AE BBFFFF                  	mov	bx,0FFFFh
 26285 000010B1 B448                    	mov	ah,48h ; ALLOC
 26286 000010B3 CD21                    	int	21h
 26287 000010B5 B448                    	mov	ah,48h ; ALLOC
 26288 000010B7 CD21                    	int	21h			; allocate the rest of the memory
 26289                                  		; DOS - 2+ - ALLOCATE MEMORY
 26290                                  		; BX = number of 16-byte paragraphs desired
 26291 000010B9 A3[6003]                	mov	[memhi],ax		; start of the allocated memory
 26292 000010BC C706[5E03]0000          	mov	word [memlo],0		;  to be used next.
 26293                                  
 26294                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 26295                                  ;;;; allocated.
 26296                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 26297                                  ;;;; this time) to the top-of-the memory),here we are going to
 26298                                  ;;;; 1). "setblock" from memhi to confbot.
 26299                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 26300                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 26301                                  
 26302                                  ;memory allocation for sysinit,confbot module.
 26303                                  
 26304 000010C2 8EC0                    	mov	es,ax
 26305                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26306                                  	; (SYSINIT:11DFh)
 26307 000010C4 8B1E[9F02]              	mov	bx,[CONFBOT]
 26308                                  	; 24/10/2022
 26309                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 26310 000010C8 29C3                    	sub	bx,ax			; confbot - memhi
 26311 000010CA 4B                      	dec	bx			; make a room for the memory block id.
 26312 000010CB 4B                      	dec	bx			; make sure!!!.
 26313 000010CC B44A                    	mov	ah,4Ah ; SETBLOCK
 26314 000010CE CD21                    	int	21h			; this will free (confbot to top of memory)
 26315                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26316                                  		; ES = segment address of block to change
 26317                                  		; BX = new size in paragraphs
 26318 000010D0 BBFFFF                  	mov	bx,0FFFFh
 26319 000010D3 B448                    	mov	ah,48h ; ALLOC
 26320 000010D5 CD21                    	int	21h
 26321 000010D7 B448                    	mov	ah,48h ; ALLOC
 26322 000010D9 CD21                    	int	21h			; allocate (confbot to top of memory)
 26323                                  		; DOS - 2+ - ALLOCATE MEMORY
 26324                                  		; BX = number of 16-byte paragraphs desired
 26325 000010DB A3[6403]                	mov	[area],ax		; save allocated memory segment.
 26326                                  					; need this to free this area for command.com.
 26327 000010DE 8E06[6003]              	mov	es,[memhi]
 26328 000010E2 B449                    	mov	ah,49h			; free allocated memory.
 26329 000010E4 CD21                    	int	21h			; free (memhi to confbot(=area))
 26330                                  		; DOS - 2+ - FREE MEMORY
 26331                                  		; ES = segment address of area to be freed
 26332                                  endfile_ret:
 26333 000010E6 C3                      	retn
 26334                                  
 26335                                  ; End of "EndFile" DOS structure configuration.
 26336                                  
 26337                                  ; ----------------------------------------------------------------------
 26338                                  ; 26/03/2019 - Retro DOS v4.0
 26339                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 26340                                  ; ----------------------------------------------------------------------
 26341                                  ; Do_Install_Exec
 26342                                  ;
 26343                                  ; This procedure is used to EXEC a program being loaded via the 
 26344                                  ; "install=" mechanism in config.sys. It does this by setting up
 26345                                  ; the parameters, and then jumping to sysinit_base, which has been
 26346                                  ; setup in low memory. When complete, sysinit_base will jump back
 26347                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 26348                                  ; program).
 26349                                  
 26350                                  ;SYSINIT:10CFh:
 26351                                  
 26352                                  do_install_exec:			; now,handles install= command.
 26353                                  
 26354 000010E7 56                      	push	si			; save si for config.sys again.
 26355                                  
 26356                                  ; we are going to call load/exec function.
 26357                                  ; set es:bx to the parameter block here;;;;;;;
 26358                                  ; set ds:dx to the asciiz string. remember that we already has 0
 26359                                  ; after the filename. so parameter starts after that. if next
 26360                                  ; character is a line feed (i.e. 10),then assume that the 0
 26361                                  ; we already encountered used to be a carrage return. in this
 26362                                  ; case,let's set the length to 0 which will be followed by
 26363                                  ; carridge return.
 26364                                  
 26365                                  ; es:si -> command line in config.sys. points to the first non blank
 26366                                  ;character after =.
 26367                                  
 26368 000010E8 06                      	push	es
 26369 000010E9 1E                      	push	ds
 26370 000010EA 07                      	pop	es
 26371 000010EB 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 26372 000010EC 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 26373                                  
 26374 000010EE 31C9                    	xor	cx,cx
 26375 000010F0 FC                      	cld
 26376 000010F1 2EC606[ED02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 26377 000010F7 BF[EE02]                	mov	di,ldexec_parm
 26378                                  installfilename:			; skip the file name
 26379 000010FA AC                      	lodsb				; al = ds:si; si++
 26380                                  	; 05/09/2023
 26381 000010FB 08C0                    	or	al,al
 26382                                  	;cmp	al,0
 26383                                  	;je	short got_installparm
 26384                                  	;jmp	short installfilename
 26385                                  	; 10/04/2024
 26386 000010FD 75FB                    	jnz	short installfilename
 26387                                  got_installparm:			; copy the parameters to ldexec_parm
 26388 000010FF AC                      	lodsb
 26389 00001100 268805                  	mov	[es:di],al
 26390 00001103 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 26391 00001105 7405                    	je	short done_installparm
 26392 00001107 FEC1                    	inc	cl			; # of char. in the parm.
 26393 00001109 47                      	inc	di
 26394 0000110A EBF3                    	jmp	short got_installparm
 26395                                  done_installparm:
 26396 0000110C 2E880E[EC02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 26397                                  	; 05/09/2023
 26398 00001111 08C9                    	or	cl,cl
 26399                                  	;cmp	cl,0			; if no parm,then
 26400 00001113 7506                    	jne	short install_seg_set 	; let the parm area
 26401 00001115 2EC606[ED02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 26402                                  					; starts with cr.
 26403                                  install_seg_set:
 26404                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 26405 0000111B 31DB                    	xor	bx,bx
 26406                                  	;mov	word [cs:0],0		; make a null environment segment
 26407 0000111D 2E891F                  	mov	[cs:bx],bx ; 05/09/2023
 26408 00001120 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 26409                                  
 26410                                  ;---------------------------------------------------M067----------------
 26411                                  ;
 26412                                  ; 	the environment pointer is made 0. so the current environment ptr.
 26413                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 26414                                  ;
 26415                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 26416                                  ;
 26417                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 26418                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 26419                                  ; 	was fixed. 
 26420                                  ;
 26421                                  ; ----------------------------------------------------------------------
 26422                                  
 26423                                  ;;ifdef MULTI_CONFIG
 26424                                  
 26425                                  ; If there's any environment data in "config_wrkseg", pass to app
 26426                                  
 26427                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 26428                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26429                                  ;%if 0
 26430 00001122 89C1                    	mov	cx,ax ; *
 26431                                  	; 05/09/2023
 26432 00001124 2E391E[CF14]            	cmp	[cs:config_envlen],bx ; 0
 26433                                  	;cmp	word [cs:config_envlen],0
 26434 00001129 7405                    	je	short no_envdata2
 26435 0000112B 2E8B0E[D114]            	mov	cx,[cs:config_wrkseg] ; *
 26436                                  no_envdata2:
 26437                                  ;;endif  ;MULTI_CONFIG
 26438                                  
 26439                                  ;%endif	; 24/10/2022
 26440                                  
 26441                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 26442                                  	; 05/09/2023 (BugFix)
 26443                                  	; 24/10/2022
 26444 00001130 2E890E[3E03]            	mov	[cs:iexec.environ],cx ; *
 26445                                  	; 02/11/2022
 26446                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 26447                                  
 26448                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 26449 00001135 2EA3[4203]              	mov	[cs:iexec.ldexec_line+2],ax
 26450                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 26451 00001139 2EA3[4603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 26452                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 26453 0000113D 2EA3[4A03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 26454 00001141 E86000                  	call	sum_up
 26455 00001144 26A3[D602]              	mov	[es:checksum],ax	; save the value of the sum
 26456 00001148 31C0                    	xor	ax,ax
 26457 0000114A B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 26458 0000114C BB[3E03]                	mov	bx,instexe		; es:bx -> parm block.
 26459 0000114F 06                      	push	es			; save es,ds for load/exec
 26460 00001150 1E                      	push	ds			; these registers will be restored in sysinit_base.
 26461 00001151 2EFF2E[CE02]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 26462                                  					; load/exec function and check sum.
 26463                                  
 26464                                  ;----------------------------------------
 26465                                  
 26466                                  ;j.k. this is the returning address from sysinit_base.
 26467                                  
 26468                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26469                                  
 26470                                  sysinitptr:				; returning far address from sysinit_base
 26471 00001156 5E                      	pop	si			; restore si for config.sys file.
 26472 00001157 06                      	push	es
 26473 00001158 1E                      	push	ds
 26474 00001159 07                      	pop	es
 26475 0000115A 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 26476 0000115B 7305                            jnc     short install_exit_ret
 26477                                  
 26478 0000115D 56                      	push	si			; error in loading the file for install=.
 26479 0000115E E82A32                  	call	badload 		; es:si-> path,filename,0.
 26480 00001161 5E                      	pop	si
 26481                                  
 26482                                  	; 24/10/2022
 26483                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 26484                                  	; 11/12/2022
 26485                                  	; ds = cs
 26486                                  
 26487                                  	; 30/12/2022 - Retro DOS v4.2
 26488                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 26489                                  
 26490                                  install_exit_ret:
 26491 00001162 C3                      	retn
 26492                                  
 26493                                  ; 30/12/2022 - Retro DOS v4.2
 26494                                  %if 0
 26495                                  install_exit_ret:
 26496                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 26497                                  
 26498                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 26499                                  ;SYSINIT:1142h:
 26500                                  	mov     ah,4Dh
 26501                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 26502                                  	cmp     ah,3
 26503                                  	jz      short sysinitptr_retn
 26504                                  	call    error_line
 26505                                  	stc
 26506                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 26507                                  	retn		
 26508                                  
 26509                                  %endif ; 24/10/2022
 26510                                  
 26511                                  ; ----------------------------------------------------------------------
 26512                                  
 26513                                  ;**	ParaRound - Round Up length to paragraph multiple
 26514                                  ;
 26515                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 26516                                  ;	by 16 yielding a "length in paragraphs" value.
 26517                                  ;
 26518                                  ;	ENTRY	(ax) = byte length
 26519                                  ;	EXIT	(ax) = rounded up length in paragraphs
 26520                                  ;	USES	ax, flags
 26521                                  
 26522                                  ParaRound:
 26523 00001163 83C00F                  	add	ax,15
 26524 00001166 D1D8                    	rcr	ax,1
 26525 00001168 D1E8                    	shr	ax,1
 26526 0000116A D1E8                    	shr	ax,1
 26527 0000116C D1E8                    	shr	ax,1
 26528 0000116E C3                      	retn
 26529                                  
 26530                                  ; ----------------------------------------------------------------------
 26531                                  ; sysinit_base module.
 26532                                  ;
 26533                                  ; This module is relocated by the routine EndFile to a location in low
 26534                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 26535                                  ; that are being loaded by the "install=" command. After the EXEC call
 26536                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 26537                                  ; top of memory) to be sure that the EXECed program did not damage it.
 26538                                  ; If it did, then this module will print an error message and stop the
 26539                                  ; system. Otherwise, it returns control to SYSINIT.
 26540                                  ;
 26541                                  ;in: after relocation,
 26542                                  ;    ax = 4b00h - load and execute the program dos function.
 26543                                  ;    ds = confbot. segment of config.sys file image
 26544                                  ;    es = sysinitseg. segment of sysinit module itself.
 26545                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 26546                                  ;    es:bx = pointer to a parameter block for load.
 26547                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 26548                                  ;    bigsize (word) - # of word from confbot to SI_end.
 26549                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 26550                                  ;			word boundary moduler form.
 26551                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 26552                                  ;
 26553                                  ;note: sysinit should save necessary registers and when the control is back
 26554                                  
 26555                                  	; 24/10/2022
 26556                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 26557                                  sysinit_base:				
 26558 0000116F 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 26559 00001174 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 26560 00001179 CD21                    	int	21h			; load/exec dos call.
 26561 0000117B 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 26562 00001180 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 26563 00001185 1F                      	pop	ds			; restore confbot seg
 26564 00001186 07                      	pop	es			; restore sysinitseg
 26565 00001187 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 26566                                  					; at this time,i don't have to worry about
 26567                                  					; that sysinit module has been broken or not.
 26568 00001189 E81800                  	call	sum_up			; otherwise,check if it is good.
 26569 0000118C 263906[D602]            	cmp	[es:checksum],ax
 26570 00001191 740C                    	je	short sysinit_base_end
 26571                                  
 26572                                  ;	memory broken. show "memory allocation error" message and stall.
 26573                                  
 26574 00001193 B409                    	mov	ah,9
 26575 00001195 0E                      	push	cs
 26576 00001196 1F                      	pop	ds
 26577                                  	; 30/12/2022
 26578                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 26579                                  	;mov	dx,102
 26580 00001197 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 26581                                  					; 66h (for MSDOS 6.21 SYSINIT)
 26582 0000119A CD21                    	int	21h
 26583                                  		; DOS - PRINT STRING
 26584                                  		; DS:DX -> string terminated by "$"
 26585                                  
 26586                                  	; 30/12/2022 - Retro DOS v4.2
 26587                                  stall:
 26588                                  	; 24/10/2022
 26589                                  _stall: 
 26590                                  	; 11/12/2022
 26591 0000119C F4                      	hlt 
 26592                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26593                                  	;hlt				;use HLT to minimize energy consumption
 26594 0000119D EBFD                            jmp	short _stall
 26595                                  
 26596                                  sysinit_base_end: 
 26597 0000119F 26FF2E[D202]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 26598                                  
 26599                                  ;-------------------------------------
 26600                                  
 26601                                  sum_up:
 26602                                  
 26603                                  ;in:   es - sysinitseg.
 26604                                  ;out:  ax - result
 26605                                  ;
 26606                                  ;remark: since this routine will only check starting from "locstack" to the end of
 26607                                  ;	 sysinit segment,the data area, and the current stack area are not
 26608                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 26609                                  ;	 gaurantee to be safe.
 26610                                  ;
 26611                                  ;first sum up confbot seg.
 26612                                  
 26613 000011A4 1E                      	push	ds
 26614                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26615                                  	; (SYSINIT:12C6h)
 26616 000011A5 26A1[9F02]              	mov	ax,[es:CONFBOT]
 26617                                  	; 24/10/2022
 26618                                  	;mov	ax,[es:top_of_cdss]
 26619 000011A9 8ED8                    	mov	ds,ax
 26620 000011AB 31F6                    	xor	si,si
 26621 000011AD 31C0                    	xor	ax,ax
 26622 000011AF 268B0E[CC02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 26623                                  					; whole test better fail.
 26624 000011B4 D1E9                    	shr	cx,1			; make it a word count
 26625 000011B6 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 26626                                  sum1:
 26627 000011B8 0304                    	add	ax,[si]
 26628 000011BA 46                      	inc	si
 26629 000011BB 46                      	inc	si
 26630 000011BC E2FA                    	loop	sum1
 26631                                  ;now,sum up sysinit module.
 26632                                  sum_sys_code:
 26633                                  	; 24/10/2022
 26634 000011BE BEBE11                  	mov	si,locstack ;; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 26635                                  			    ;; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 26636                                  			    ; 10/04/2024	
 26637                                  			    ; 586h (PCDOS 7.1 IBMBIO.COM, SYSINIT)	
 26638                                  				        ; starting after the stack.  M069
 26639                                  					;  this does not cover the possible stack code!!!
 26640                                  	;;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 26641                                  	; 02/11/2022
 26642                                  	;;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 26643                                  	; 10/04/2024
 26644                                  	;mov	cx,5B40h  ; (23360) for PCDOS 7.1 IBMBIO.COM (SYSINIT)	
 26645                                  	; 30/12/2022  
 26646 000011C1 B9[504D]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 26647 000011C4 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 26648 000011C6 D1E9                    	shr	cx,1
 26649                                  sum2:
 26650 000011C8 260304                  	add	ax,[es:si]
 26651 000011CB 46                      	inc	si
 26652 000011CC 46                      	inc	si
 26653 000011CD E2F9                    	loop	sum2
 26654 000011CF 1F                      	pop	ds
 26655 000011D0 C3                      	retn
 26656                                  
 26657                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26658                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 26659                                  ; (SYSINIT:12F2h)
 26660                                  ; 10/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 26661                                  ; (SYSINIT:149Dh)
 26662                                  
 26663                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 26664                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h)
 26665                                  				    ; = 62 (PCDOS 7.1 IBMBIO.COM, SYSINIT:143Bh)
 26666                                  sysinit_base_ssx:	
 26667 000011D1 0000                    	dw	0
 26668                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 26669                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1295h)
 26670                                  				    ; = 64 (PCDOS 7.1 IBMBIO.COM, SYSINIT:1440h)
 26671                                  sysinit_base_spx:
 26672 000011D3 0000                    	dw	0	
 26673                                  
 26674                                  mem_alloc_err_msgx:
 26675                                  
 26676                                         ;include msbio.cl4		; memory allocation error message
 26677                                  
 26678                                  ;(SYSINIT:12F6h: ; MSDOS 6.21 IO.SYS)
 26679                                  ;SYSINIT:14A1h:	; PCDOS 7.1 IBMBIO.COM
 26680 000011D5 0D0A                    	db	0Dh,0Ah
 26681 000011D7 4D656D6F727920616C-     	db 	'Memory allocation error $'
 26681 000011E0 6C6F636174696F6E20-
 26681 000011E9 6572726F722024     
 26682                                  
 26683                                  end_sysinit_base: ; label byte
 26684                                  	; 24/10/2022
 26685                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 26686                                  
 26687                                  ; ----------------------------------------------------------------------
 26688                                  ; Set_Buffer
 26689                                  ;
 26690                                  ;function: set buffers in the real memory.				  
 26691                                  ;	   lastly set the memhi,memlo for the next available free address.
 26692                                  ;
 26693                                  ;input:    ds:bx -> buffinfo.
 26694                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 26695                                  ;	   singlebuffersize = buffer header size + sector size		  
 26696                                  ;
 26697                                  ;output:   buffers Queue established.	       				   
 26698                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 26699                                  ; ----------------------------------------------------------------------
 26700                                  
 26701                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26702                                  	; (SYSINIT:11DCh)
 26703                                  
 26704                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26705                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:14BCh)
 26706                                  
 26707                                  set_buffer:
 26708 000011F0 30D2                    	xor	dl,dl				; assume buffers not in HMA
 26709 000011F2 E85500                  	call	GetBufferAddr
 26710 000011F5 7402                    	jz	short set_buff_1
 26711 000011F7 B201                    	mov	dl,1				; buffers in HMA
 26712                                  set_buff_1:
 26713                                  	; 25/10/2022
 26714                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 26715 000011F9 893F                    	mov	[bx],di
 26716                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 26717 000011FB 8C4702                  	mov	[bx+2],es
 26718                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 26719 000011FE C747040000              	mov	word [bx+4],0
 26720                                  
 26721 00001203 89F8                    	mov	ax,di
 26722 00001205 2E8B0E[9702]            	mov	cx,[cs:buffers]
 26723 0000120A 57                      	push	di				; remember first buffer
 26724                                  
 26725                                  ;	for each buffer
 26726                                  
 26727                                  nxt_buff:
 26728 0000120B E86700                  	call	set_buffer_info 		; set buf_link,buf_id...
 26729 0000120E 89C7                    	mov	di,ax
 26730 00001210 E2F9                    	loop	nxt_buff
 26731                                  
 26732 00001212 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 26733                                  
 26734 00001217 59                      	pop	cx				; get first buffer
 26735                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 26736 00001218 26890D                  	mov	[es:di],cx
 26737 0000121B 87F9                    	xchg	cx,di
 26738                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 26739                                  	; 25/10/2022
 26740 0000121D 26894D02                	mov	[es:di+2],cx
 26741                                  
 26742 00001221 08D2                    	or	dl,dl				; In HMa ?
 26743 00001223 7417                    	jz	short set_buff_2		; no
 26744                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 26745 00001225 C6470C01                	mov	byte [bx+12],1
 26746 00001229 2EA1[6003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 26747                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 26748 0000122D C7470D0000              	mov	word [bx+13],0
 26749                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 26750 00001232 89470F                  	mov	word [bx+15],ax
 26751 00001235 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 26752                                  	; 11/04/2024 - Retro DOS v5.0
 26753                                  	; 05/09/2023
 26754                                  	;;sub	ax,bufinsiz ; 20		; buffer head not required
 26755                                  	;sub	ax,20
 26756 00001239 83E818                  	sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 26757                                  
 26758                                  set_buff_2:
 26759 0000123C 2E0106[5E03]            	add	[cs:memlo],ax
 26760                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26761 00001241 2E800E[D814]02          	or	byte [cs:setdevmarkflag],2
 26762                                  	;call	round
 26763                                  	;retn
 26764                                  	; 12/12/2022
 26765 00001247 E9072F                  	jmp	round
 26766                                  
 26767                                  ; ----------------------------------------------------------------------
 26768                                  ; procedure : GetBufferAddr
 26769                                  ;
 26770                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 26771                                  ;
 26772                                  ; returns in es:di the buffer adress
 26773                                  ; returns NZ if allocated in HMA
 26774                                  ; ----------------------------------------------------------------------
 26775                                  
 26776                                  	; 25/10/2022 
 26777                                  GetBufferAddr:
 26778 0000124A 53                      	push	bx
 26779 0000124B 52                      	push	dx
 26780                                  
 26781                                  ; 18/03/2025 - MiniDOS 1.0
 26782                                  %if 0
 26783                                  	; 11/04/2024 - Retro DOS v5.0
 26784                                  	; PCDOS 7.1 IBMBIO.COM
 26785                                  	;;;
 26786                                  	cmp	byte [cs:dosdata_umb],2
 26787                                  				; is dosdata moved to UMB ? (DOSDATA=UMB done)
 26788                                  	jne	short gba_1     ; no
 26789                                  	cmp	word [bx+2],0FFFFh ; is the buffer (already) in HMA ?
 26790                                  	je	short gba_2	; yes
 26791                                  gba_1:
 26792                                  	;;;
 26793                                  
 26794                                  %endif
 26795 0000124C 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 26796 00001250 2EF726[9702]            	mul	word [cs:buffers]
 26797                                  	;add	ax,0Fh
 26798 00001255 83C00F                  	add	ax,15 
 26799                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26800                                  	;and	ax,~15	; 0FFF0h	; para round
 26801                                  	; 12/12/2022
 26802 00001258 24F0                    	and	al,~15	; 0F0h
 26803 0000125A 89C3                    	mov	bx,ax
 26804 0000125C B8024A                  	mov	ax,4A02h
 26805                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 26806 0000125F CD2F                    	int	2Fh	; DOS 5+ - ALLOCATE HMA SPACE
 26807                                  			;     AX = 4A02h
 26808                                  			;     BX = number of bytes
 26809                                  			; Return:
 26810                                  			;     ES:DI -> start of allocated HMA block or FFFFh:FFFFh
 26811                                  			;     BX = number of bytes actually allocated
 26812                                  			;	   (rounded up to next paragraph)
 26813                                  			; Notes:
 26814                                  			;     this call is not valid unless DOS is loaded in the HMA
 26815                                  			;     (DOS=HIGH)
 26816                                  
 26817 00001261 83FFFF                  	cmp	di,0FFFFh
 26818 00001264 7506                    	jne	short got_hma
 26819                                  	
 26820                                  	;mov	di,0		; dont xor di,di Z flag needed
 26821                                  	; 05/09/2023
 26822                                  	; zf=1
 26823 00001266 47                      	inc	di ; 0FFFFh -> 0
 26824                                  	; zf=1
 26825                                  	
 26826                                  	;zf=1
 26827                                  	;xor	di,di	; 25/10/2022
 26828                                  	;zf=1
 26829 00001267 2E8E06[6003]            	mov	es,[cs:memhi]
 26830                                  got_hma:
 26831 0000126C 5A                      	pop	dx
 26832 0000126D 5B                      	pop	bx
 26833 0000126E C3                      	retn
 26834                                  
 26835                                  	; 11/04/2024 - Retro DOS v5.0
 26836                                  	; PCDOS 7.1 IBMBIO.COM
 26837                                  	;;;
 26838                                  gba_2:
 26839 0000126F C43F                    	les	di,[bx]
 26840 00001271 09FF                    	or	di,di
 26841                                  	;pop	dx
 26842                                  	;pop	bx
 26843                                  	;retn
 26844                                  	; 11/04/2024 - Retro DOS v5.0
 26845 00001273 EBF7                    	jmp	short got_hma
 26846                                  	;;;
 26847                                  
 26848                                  ; ----------------------------------------------------------------------
 26849                                  
 26850                                  set_buffer_info:
 26851                                  
 26852                                  ;function: set buf_link,buf_id,buf_sector
 26853                                  ;
 26854                                  ;in: es:di -> buffer header to be set.
 26855                                  ;    ax = di
 26856                                  ;
 26857                                  ;out:
 26858                                  ;    above entries set.
 26859                                  
 26860                                  	; 25/10/2022 
 26861 00001275 2EFF36[B902]            	push	word [cs:buf_prev_off]
 26862                                  	;pop	word [es:di+buffinfo.buf_prev]
 26863 0000127A 268F4502                	pop	word [es:di+2]
 26864 0000127E 2EA3[B902]              	mov	[cs:buf_prev_off],ax
 26865 00001282 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 26866                                  	;mov	[es:di+buffinfo.buf_next],ax
 26867 00001287 268905                  	mov	[es:di],ax
 26868                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 26869 0000128A 26C74504FF00            	mov	word [es:di+4],00FFh
 26870                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 26871 00001290 26C745060000            	mov	word [es:di+6],0
 26872                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 26873 00001296 26C745080000            	mov	word [es:di+8],0
 26874 0000129C C3                      	retn
 26875                                  
 26876                                  ; ======================================================================
 26877                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 26878                                  ; ----------------------------------------------------------------------
 26879                                  ; 27/03/2019 - Retro DOS v4.0
 26880                                  
 26881                                  ; ----------------------------------------------------------------------
 26882                                  ; ibmstack initialization routine.
 26883                                  ;
 26884                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 26885                                  ;	has been modified. this initialization routine also has to
 26886                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 26887                                  ;	should be set to signal that this interrupt handler is the
 26888                                  ;	first handler hooked to this interrupt vector.
 26889                                  ;	we determine this by looking at the instruction pointed by
 26890                                  ;	this vector. if it is iret, then this handler should be the
 26891                                  ;	first one. in our case, only the interrupt vector 77h is the
 26892                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 26893                                  ;
 26894                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 26895                                  ;	some design changes are needed to the above interrupt sharing
 26896                                  ;	method. the above sharing scheme assumes that 1). interrupt
 26897                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 26898                                  ;	interrupts would only be generated on levels 7 and 15.
 26899                                  ;	these assumptions are not true any more. we have to use the firstflag
 26900                                  ;	for every level of interrupt. we will set the firstflag on the following
 26901                                  ;	conditions:
 26902                                  ;
 26903                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 26904                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 26905                                  ;	 c. else if cs:ip points to an iret, then "first"
 26906                                  ;	 d. else if cs:ip points to dummy, then "first"
 26907                                  ;
 26908                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 26909                                  ;	be equal to the value at f000:ff01. this location is the initial value
 26910                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 26911                                  ;	the bioses for all of the machines.
 26912                                  ;
 26913                                  ;	system design group requests bios to handle the phantom interrupts.
 26914                                  ;
 26915                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 26916                                  ;	produced by the bogus adapter card even without interrupt request is
 26917                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 26918                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 26919                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 26920                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 26921                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 26922                                  ;	interrupt line.
 26923                                  ;
 26924                                  ;	to handle those "phantom" interrupts, the main stack code will check
 26925                                  ;	the own firstflag, and if it is not "first" (which means the forward
 26926                                  ;	pointer points to the legal shared interrupt handler), then pass the
 26927                                  ;	control. if it is the first, then the following action should be
 26928                                  ;	taken. we don't have to implement skack logic in this case.
 26929                                  ;
 26930                                  ;	to implement this logic, we rather choose a simple method.
 26931                                  ;	if ont of the above "firstflag" conditions is met, we are not
 26932                                  ;	going to hook this interrupt vector. the reason is if the original
 26933                                  ;	vector points to "iret" and do nothing, we don't need
 26934                                  ;	to implement the stack logic for it. this will simplify implementation
 26935                                  ;	while maintaining compatibility with the old version of dos.
 26936                                  ;	this implies that in the main stack code, there might be a stack code
 26937                                  ;	that will never be used, a dead code.
 26938                                  ;
 26939                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 26940                                  
 26941                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26942                                  	; (SYSINIT:1287h)
 26943                                  
 26944                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26945                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:157Ch)
 26946                                  
 26947                                  	; 14/12/2022
 26948                                  stackinit:
 26949 0000129D 50                      	push	ax
 26950 0000129E 1E                      	push	ds
 26951 0000129F 06                      	push	es
 26952 000012A0 53                      	push	bx
 26953 000012A1 51                      	push	cx
 26954 000012A2 52                      	push	dx
 26955 000012A3 57                      	push	di
 26956 000012A4 56                      	push	si
 26957 000012A5 55                      	push	bp
 26958                                  
 26959                                  ;currently es -> stack code area
 26960                                  
 26961                                  	; 12/12/2022
 26962                                  	; ds = cs
 26963 000012A6 A1[8A02]                	mov	ax,[stack_count]
 26964 000012A9 89C1                    	mov	cx,ax  ; *!*!*  
 26965                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26966                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 26967                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 26968 000012AB 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 26969                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 26970 000012AF A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 26971 000012B2 26A3[0600]              	mov	[es:stacksize],ax
 26972                                  	; 12/12/2022
 26973 000012B6 A1[8E02]                	mov	ax,[stack_addr]			; offset
 26974                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26975                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26976                                  	;mov	ax,[cs:stack_addr]  ; !!
 26977 000012B9 26A3[0800]              	mov	[es:stacks],ax
 26978                                  	; 12/12/2022
 26979 000012BD 89C5                    	mov	bp,ax ; *!*
 26980 000012BF A1[9002]                	mov	ax,[stack_addr+2]
 26981                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26982                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 26983                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 26984 000012C2 26A3[0A00]              	mov	[es:stacks+2],ax
 26985                                  
 26986                                  ; initialize the data fields with the parameters
 26987                                  
 26988                                  ; "firstentry" will always be at stacks
 26989                                  
 26990                                  	;mov	bp,[es:stacks]			; get offset of stack
 26991                                  	; 12/12/2022
 26992                                  	; bp = [es:stacks] ; *!*
 26993 000012C6 26892E[0C00]            	mov	[es:firstentry],bp
 26994                                  
 26995                                  ; the stacks will always immediately follow the table entries
 26996                                  
 26997 000012CB B80800                  	mov	ax,entrysize ; 8
 26998                                  	;mov	cx,[es:stackcount]
 26999                                  	; 12/12/2022
 27000                                  	; cx = [es:stackcount] ; *!*!*
 27001 000012CE F7E1                    	mul	cx
 27002 000012D0 01E8                    	add	ax,bp
 27003 000012D2 26A3[0400]              	mov	[es:stackat],ax
 27004 000012D6 89C3                    	mov	bx,ax
 27005 000012D8 83EB02                  	sub	bx,2
 27006                                  
 27007                                  ; zero the entire stack area to start with
 27008                                  
 27009 000012DB 268B3E[0400]            	mov	di,[es:stackat]
 27010 000012E0 26A1[0600]              	mov	ax,[es:stacksize]
 27011 000012E4 F7E1                    	mul	cx
 27012 000012E6 89C1                    	mov	cx,ax
 27013 000012E8 31C0                    	xor	ax,ax
 27014 000012EA 06                      	push	es
 27015 000012EB 1F                      	pop	ds				;ds = relocated stack code seg.
 27016                                  
 27017                                  ;now, ds -> stack code area
 27018                                  
 27019 000012EC 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 27020 000012F0 FC                      	cld
 27021 000012F1 F3AA                    	rep	stosb
 27022                                  
 27023 000012F3 8B0E[0200]              	mov	cx,[stackcount]
 27024                                  
 27025                                  ; loop for "count" times, building a table entry
 27026                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 27027                                  ;  cx = number of entries
 27028                                  ;  es:bp => base of stacks - 2
 27029                                  ;  es:bx => first table entry
 27030                                  
 27031                                  buildloop:
 27032                                  	; 11/12/2022
 27033                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 27034                                  	; 25/10/2022
 27035                                  	;mov	byte [es:bp],free
 27036                                  	; 06/07/2023
 27037 000012F7 26884600                	mov	[es:bp],al ; 0 ; free
 27038 000012FB 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 27039                                  	;mov	[es:bp+1],al
 27040 000012FF 26894602                	mov	[es:bp+savedsp],ax
 27041                                  	;mov	[es:bp2],ax
 27042 00001303 26894604                	mov	[es:bp+savedss],ax
 27043                                  	;mov	[es:bp+4],ax
 27044 00001307 031E[0600]              	add	bx,[stacksize]
 27045 0000130B 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 27046                                  	;mov	[es:bp+6],bx
 27047 0000130F 26892F                  	mov	[es:bx],bp
 27048 00001312 83C508                  	add	bp,entrysize ; 8
 27049                                  
 27050 00001315 E2E0                    	loop	buildloop
 27051                                  
 27052 00001317 83ED08                  	sub	bp,entrysize ; 8
 27053 0000131A 892E[0E00]              	mov	[lastentry],bp
 27054 0000131E 892E[1000]              	mov	[nextentry],bp
 27055                                  
 27056 00001322 1E                      	push	ds
 27057                                  	;mov	ax,0F000h		;look at the model byte
 27058                                  	; 05/09/2023
 27059 00001323 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 27060 00001325 8ED8                    	mov	ds,ax
 27061 00001327 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 27062 0000132C 1F                      	pop	ds
 27063 0000132D 7504                    	jne	short skip_disablenmis
 27064                                  
 27065 0000132F B007                    	mov	al,07h			; disable convertible nmis
 27066 00001331 E672                    	out	72h,al
 27067                                  
 27068                                  skip_disablenmis:
 27069 00001333 31C0                    	xor	ax,ax
 27070 00001335 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 27071                                  					;ds - relocated stack code segment
 27072 00001337 FA                      	cli
 27073                                  
 27074                                  	;irp	aa,<02,08,09,70>
 27075                                  	;
 27076                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27077                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 27078                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 27079                                  	;mov	dx,offset int&aa	;pass where new handler is
 27080                                  	;call	new_init_loop		;adjust the vector to new handler,
 27081                                  	;				;saving pointer to original owner
 27082                                  	;endm
 27083                                  
 27084                                  stkinit_02:
 27085 00001338 BE0800                  	mov	si,02h*4 ; 8
 27086 0000133B BF[B305]                	mov	di,INT19OLD02
 27087 0000133E BB[1200]                	mov	bx,old02
 27088 00001341 BA[1600]                	mov	dx,int02
 27089 00001344 E84801                  	call	new_init_loop
 27090                                  stkinit_08:
 27091 00001347 BE2000                  	mov	si,08h*4 ; 32
 27092 0000134A BF[B805]                	mov	di,INT19OLD08
 27093 0000134D BB[3800]                	mov	bx,old08
 27094 00001350 BA[3C00]                	mov	dx,int08
 27095 00001353 E83901                  	call	new_init_loop
 27096                                  stkinit_09:
 27097 00001356 BE2400                  	mov	si,09h*4 ; 36
 27098 00001359 BF[BD05]                	mov	di,INT19OLD09
 27099 0000135C BB[4100]                	mov	bx,old09
 27100 0000135F BA[4500]                	mov	dx,int09
 27101 00001362 E82A01                  	call	new_init_loop
 27102                                  stkinit_70:
 27103 00001365 BEC001                  	mov	si,70h*4 ; 448
 27104 00001368 BF[DB05]                	mov	di,INT19OLD70
 27105 0000136B BB[4E00]                	mov	bx,old70
 27106 0000136E BA[5200]                	mov	dx,int70
 27107 00001371 E81B01                  	call	new_init_loop
 27108                                  
 27109                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 27110                                  	;
 27111                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27112                                  	;push	ds			;save relocated stack code segment
 27113                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 27114                                  	;push	ds
 27115                                  	;pop	dx			;dx = segment value
 27116                                  	;	
 27117                                  	;cmp	dx,0
 27118                                  	;jz	int&aa&_first
 27119                                  	;
 27120                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 27121                                  	;jz	int&aa&_first
 27122                                  	;
 27123                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 27124                                  	;jz	int&aa&_not_first
 27125                                  	;
 27126                                  	;cmp	dx,0f000h		;rom bios segment
 27127                                  	;jnz	int&aa&_not_first
 27128                                  	;
 27129                                  	;push	es
 27130                                  	;push	dx
 27131                                  	;mov	dx,0f000h
 27132                                  	;mov	es,dx
 27133                                  	;cmp	bx,word ptr es:0ff01h
 27134                                         	;pop	dx
 27135                                  	;pop	es
 27136                                  	;jz	int&aa&_first
 27137                                  	;
 27138                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 27139                                  	;pop	ds
 27140                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 27141                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 27142                                  	;mov	dx, offset int&aa	;pass where new handler is
 27143                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 27144                                  	;				;pointer to original owner.
 27145                                  	;jmp	short int&aa&_end
 27146                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 27147                                  	;pop	ds
 27148                                  ;int&aa&_end:
 27149                                  	;
 27150                                  	;endm
 27151                                  
 27152                                  stkinit_0A:
 27153 00001374 BE2800                  	mov	si,0Ah*4 ; 40
 27154                                  	
 27155                                  ; 14/12/2022
 27156                                  %if 0	
 27157                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27158                                  	push	ds
 27159                                  	
 27160                                  	lds	bx,[es:si]
 27161                                  	push	ds
 27162                                  	pop	dx
 27163                                  		
 27164                                  	cmp	dx,0
 27165                                  	je	short int_0A_first
 27166                                  	
 27167                                  	cmp	byte [bx],0CFh
 27168                                  	je	short int_0A_first
 27169                                  	
 27170                                  	cmp	word [bx+6],424Bh
 27171                                  	je	short int_0A_not_first
 27172                                  	
 27173                                  	cmp	dx,0F000h
 27174                                  	jne	short int_0A_not_first
 27175                                  	
 27176                                  	push	es
 27177                                  	push	dx
 27178                                  	mov	dx,0F000h
 27179                                  	mov	es,dx
 27180                                  	cmp	bx,[es:0FF01h]
 27181                                         	pop	dx
 27182                                  	pop	es
 27183                                  	je	short int_0A_first
 27184                                  %Endif
 27185                                  
 27186                                  	; 14/12/2022
 27187                                  	; 25/10/2022
 27188 00001377 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27189 0000137A 730C                    	jnc	short int_0A_first
 27190                                  	
 27191                                  int_0A_not_first:
 27192                                  	; 14/12/2022
 27193                                  	; 25/10/2022
 27194                                  	;pop	ds
 27195 0000137C BF[C205]                	mov	di,INT19OLD0A
 27196 0000137F BB[5900]                	mov	bx,old0A
 27197 00001382 BA[5700]                	mov	dx,int0A
 27198 00001385 E80701                  	call	new_init_loop
 27199                                  	
 27200                                  	; 14/12/2022	
 27201                                  	;jmp	short int_0A_end
 27202                                  ;int_0A_first:
 27203                                  	; 25/10/2022
 27204                                  	;pop	ds
 27205                                  
 27206                                  	; 14/12/2022
 27207                                  int_0A_first:
 27208                                  int_0A_end:
 27209                                  
 27210                                  stkinit_0B:
 27211 00001388 BE2C00                  	mov	si,0Bh*4 ; 44
 27212                                  	
 27213                                  	; 14/12/2022
 27214                                  	; 25/10/2022
 27215 0000138B E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27216 0000138E 730C                    	jnc	short int_0B_end ; int_0B_first
 27217                                  
 27218                                  ; 14/12/2022
 27219                                  %if 0	
 27220                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27221                                  	push	ds
 27222                                  	lds	bx,[es:si]
 27223                                  	push	ds
 27224                                  	pop	dx
 27225                                  		
 27226                                  	cmp	dx,0
 27227                                  	je	short int_0B_first
 27228                                  
 27229                                  	cmp	byte [bx],0CFh
 27230                                  	je	short int_0B_first
 27231                                  	
 27232                                  	cmp	word [bx+6],424Bh
 27233                                  	je	short int_0B_not_first
 27234                                  	
 27235                                  	cmp	dx,0F000h
 27236                                  	jne	short int_0B_not_first
 27237                                  
 27238                                  	push	es
 27239                                  	push	dx
 27240                                  	mov	dx,0F000h
 27241                                  	mov	es,dx
 27242                                  	cmp	bx,[es:0FF01h]
 27243                                  	pop	dx
 27244                                  	pop	es
 27245                                  	je	short int_0B_first
 27246                                  %endif
 27247                                  
 27248                                  int_0B_not_first:
 27249                                  	; 14/12/2022
 27250                                  	; 25/10/2022
 27251                                  	;pop	ds
 27252 00001390 BF[C705]                	mov	di,INT19OLD0B
 27253 00001393 BB[7100]                	mov	bx,old0B
 27254 00001396 BA[6F00]                	mov	dx,int0B
 27255 00001399 E8F300                  	call	new_init_loop
 27256                                  
 27257                                  	; 14/12/2022
 27258                                  	;jmp	short int_0B_end
 27259                                  ;int_0B_first:
 27260                                  	; 25/10/2022
 27261                                  	;pop	ds
 27262                                  
 27263                                  int_0B_end:
 27264                                  	
 27265                                  stkinit_0C:
 27266 0000139C BE3000                  	mov	si,0Ch*4 ; 48
 27267                                  	
 27268                                  	; 14/12/2022
 27269                                  	; 25/10/2022
 27270 0000139F E8C300                  	call	int_xx_first_check
 27271 000013A2 730C                    	jnc	short int_0C_end ; int_0C_first
 27272                                  
 27273                                  ; 14/12/2022
 27274                                  %if 0	
 27275                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27276                                  	push	ds
 27277                                  	lds	bx,[es:si]
 27278                                  	push	ds
 27279                                  	pop	dx
 27280                                  		
 27281                                  	cmp	dx,0
 27282                                  	je	short int_0C_first
 27283                                  
 27284                                  	cmp	byte [bx],0CFh
 27285                                  	je	short int_0C_first
 27286                                  	
 27287                                  	cmp	word [bx+6],424Bh
 27288                                  	je	short int_0C_not_first
 27289                                  	
 27290                                  	cmp	dx,0F000h
 27291                                  	jne	short int_0C_not_first
 27292                                  
 27293                                  	push	es
 27294                                  	push	dx
 27295                                  	mov	dx,0F000h
 27296                                  	mov	es,dx
 27297                                  	cmp	bx,[es:0FF01h]
 27298                                  	pop	dx
 27299                                  	pop	es
 27300                                  	je	short int_0C_first
 27301                                  %endif
 27302                                  	
 27303                                  int_0C_not_first:
 27304                                  	; 14/12/2022
 27305                                  	; 25/10/2022
 27306                                  	;pop	ds
 27307 000013A4 BF[CC05]                	mov	di,INT19OLD0C
 27308 000013A7 BB[8900]                	mov	bx,old0C
 27309 000013AA BA[8700]                	mov	dx,int0C
 27310 000013AD E8DF00                  	call	new_init_loop
 27311                                  
 27312                                  	; 14/12/2022
 27313                                  	;jmp	short int_0C_end
 27314                                  ;int_0C_first:
 27315                                  	; 25/10/2022
 27316                                  	;pop	ds
 27317                                  
 27318                                  int_0C_end:
 27319                                  
 27320                                  stkinit_0D:
 27321 000013B0 BE3400                  	mov	si,0Dh*4 ; 52
 27322                                  
 27323                                  	; 14/12/2022	
 27324                                  	; 25/10/2022
 27325 000013B3 E8AF00                  	call	int_xx_first_check
 27326 000013B6 730C                    	jnc	short int_0D_end ; int_0D_first
 27327                                  
 27328                                  ; 14/12/2022
 27329                                  %if 0	
 27330                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27331                                  	push	ds
 27332                                  	lds	bx,[es:si]
 27333                                  	push	ds
 27334                                  	pop	dx
 27335                                  		
 27336                                  	cmp	dx,0
 27337                                  	je	short int_0D_first
 27338                                  
 27339                                  	cmp	byte [bx],0CFh
 27340                                  	je	short int_0D_first
 27341                                  	
 27342                                  	cmp	word [bx+6],424Bh
 27343                                  	je	short int_0D_not_first
 27344                                  	
 27345                                  	cmp	dx,0F000h
 27346                                  	jne	short int_0D_not_first
 27347                                  
 27348                                  	push	es
 27349                                  	push	dx
 27350                                  	mov	dx,0F000h
 27351                                  	mov	es,dx
 27352                                  	cmp	bx,[es:0FF01h]
 27353                                  	pop	dx
 27354                                  	pop	es
 27355                                  	je	short int_0D_first
 27356                                  %endif
 27357                                  	
 27358                                  int_0D_not_first:
 27359                                  	; 14/12/2022
 27360                                  	; 25/10/2022
 27361                                  	;pop	ds
 27362 000013B8 BF[D105]                	mov	di,INT19OLD0D
 27363 000013BB BB[A100]                	mov	bx,old0D
 27364 000013BE BA[9F00]                	mov	dx,int0D
 27365 000013C1 E8CB00                  	call	new_init_loop
 27366                                  
 27367                                  	; 14/12/2022
 27368                                  	;jmp	short int_0D_end
 27369                                  	; 02/11/2022
 27370                                  ;int_0D_first:
 27371                                  	;pop	ds
 27372                                  
 27373                                  int_0D_end:
 27374                                  
 27375                                  stkinit_0E:
 27376 000013C4 BE3800                  	mov	si,0Eh*4 ; 56
 27377                                  
 27378                                  	; 14/12/2022	
 27379                                  	; 25/10/2022
 27380 000013C7 E89B00                  	call	int_xx_first_check
 27381 000013CA 730C                    	jnc	short int_0E_end ; int_0E_first
 27382                                  
 27383                                  ; 14/12/2022
 27384                                  %if 0	
 27385                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27386                                  	push	ds
 27387                                  	lds	bx,[es:si]
 27388                                  	push	ds
 27389                                  	pop	dx
 27390                                  		
 27391                                  	cmp	dx,0
 27392                                  	je	short int_0E_first
 27393                                  
 27394                                  	cmp	byte [bx],0CFh
 27395                                  	je	short int_0E_first
 27396                                  	
 27397                                  	cmp	word [bx+6],424Bh
 27398                                  	je	short int_0E_not_first
 27399                                  	
 27400                                  	cmp	dx,0F000h
 27401                                  	jne	short int_0E_not_first
 27402                                  
 27403                                  	push	es
 27404                                  	push	dx
 27405                                  	mov	dx,0F000h
 27406                                  	mov	es,dx
 27407                                  	cmp	bx,[es:0FF01h]
 27408                                  	pop	dx
 27409                                  	pop	es
 27410                                  	je	short int_0E_first
 27411                                  %endif
 27412                                  	
 27413                                  int_0E_not_first:
 27414                                  	; 14/12/2022
 27415                                  	; 25/10/2022
 27416                                  	;pop	ds
 27417 000013CC BF[D605]                	mov	di,INT19OLD0E
 27418 000013CF BB[B900]                	mov	bx,old0E
 27419 000013D2 BA[B700]                	mov	dx,int0E
 27420 000013D5 E8B700                  	call	new_init_loop
 27421                                  
 27422                                  	; 14/12/2022
 27423                                  	;jmp	short int_0E_end
 27424                                  ;int_0E_first:
 27425                                  	; 25/10/2022
 27426                                  	;pop	ds	
 27427                                  
 27428                                  int_0E_end:
 27429                                  
 27430                                  stkinit_72:
 27431 000013D8 BEC801                  	mov	si,72h*4 ; 456
 27432                                  	
 27433                                  	; 14/12/2022
 27434                                  	; 25/10/2022
 27435 000013DB E88700                  	call	int_xx_first_check
 27436 000013DE 730C                    	jnc	short int_72_end ; int_72_first
 27437                                  
 27438                                  ; 14/12/2022
 27439                                  %if 0	
 27440                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27441                                  	push	ds
 27442                                  	lds	bx,[es:si]
 27443                                  	push	ds
 27444                                  	pop	dx
 27445                                  		
 27446                                  	cmp	dx,0
 27447                                  	je	short int_72_first
 27448                                  
 27449                                  	cmp	byte [bx],0CFh
 27450                                  	je	short int_72_first
 27451                                  	
 27452                                  	cmp	word [bx+6],424Bh
 27453                                  	je	short int_72_not_first
 27454                                  	
 27455                                  	cmp	dx,0F000h
 27456                                  	jne	short int_72_not_first
 27457                                  
 27458                                  	push	es
 27459                                  	push	dx
 27460                                  	mov	dx,0F000h
 27461                                  	mov	es,dx
 27462                                  	cmp	bx,[es:0FF01h]
 27463                                  	pop	dx
 27464                                  	pop	es
 27465                                  	je	short int_72_first
 27466                                  %endif
 27467                                  	
 27468                                  int_72_not_first:
 27469                                  	; 14/12/2022
 27470                                  	; 25/10/2022
 27471                                  	;pop	ds
 27472 000013E0 BF[E005]                	mov	di,INT19OLD72
 27473 000013E3 BB[D100]                	mov	bx,old72
 27474 000013E6 BA[CF00]                	mov	dx,int72
 27475 000013E9 E8A300                  	call	new_init_loop
 27476                                  
 27477                                  	; 14/12/2022
 27478                                  	;jmp	short int_72_end
 27479                                  ;int_72_first:
 27480                                  	; 25/10/2022
 27481                                  	;pop	ds
 27482                                  
 27483                                  int_72_end:
 27484                                  
 27485                                  stkinit_73:
 27486 000013EC BECC01                  	mov	si,73h*4 ; 460
 27487                                  	
 27488                                  	; 14/12/2022
 27489                                  	; 25/10/2022
 27490 000013EF E87300                  	call	int_xx_first_check
 27491 000013F2 730C                    	jnc	short int_73_end ; int_73_first
 27492                                  
 27493                                  ; 14/12/2022
 27494                                  %if 0	
 27495                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27496                                  	push	ds
 27497                                  	lds	bx,[es:si]
 27498                                  	push	ds
 27499                                  	pop	dx
 27500                                  		
 27501                                  	cmp	dx,0
 27502                                  	je	short int_73_first
 27503                                  
 27504                                  	cmp	byte [bx],0CFh
 27505                                  	je	short int_73_first
 27506                                  	
 27507                                  	cmp	word [bx+6],424Bh
 27508                                  	je	short int_73_not_first
 27509                                  	
 27510                                  	cmp	dx,0F000h
 27511                                  	jne	short int_73_not_first
 27512                                  
 27513                                  	push	es
 27514                                  	push	dx
 27515                                  	mov	dx,0F000h
 27516                                  	mov	es,dx
 27517                                  	cmp	bx,[es:0FF01h]
 27518                                  	pop	dx
 27519                                  	pop	es
 27520                                  	je	short int_73_first
 27521                                  %endif	
 27522                                  	
 27523                                  int_73_not_first:
 27524                                  	; 14/12/2022
 27525                                  	; 25/10/2022
 27526                                  	;pop	ds
 27527 000013F4 BF[E505]                	mov	di,INT19OLD73
 27528 000013F7 BB[E900]                	mov	bx,old73
 27529 000013FA BA[E700]                	mov	dx,int73
 27530 000013FD E88F00                  	call	new_init_loop
 27531                                  
 27532                                  	; 14/12/2022
 27533                                  	;jmp	short int_73_end
 27534                                  ;int_73_first:
 27535                                  	; 25/10/2022
 27536                                  	;pop	ds
 27537                                  
 27538                                  int_73_end:
 27539                                  
 27540                                  stkinit_74:
 27541 00001400 BED001                  	mov	si,74h*4 ; 464
 27542                                  	
 27543                                  	; 14/12/2022
 27544                                  	; 25/10/2022
 27545 00001403 E85F00                  	call	int_xx_first_check
 27546 00001406 730C                    	jnc	short int_74_end ; int_74_first
 27547                                  
 27548                                  ; 14/12/2022
 27549                                  %if 0		
 27550                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27551                                  	push	ds
 27552                                  	lds	bx,[es:si]
 27553                                  	push	ds
 27554                                  	pop	dx
 27555                                  		
 27556                                  	cmp	dx,0
 27557                                  	je	short int_74_first
 27558                                  
 27559                                  	cmp	byte [bx],0CFh
 27560                                  	je	short int_74_first
 27561                                  	
 27562                                  	cmp	word [bx+6],424Bh
 27563                                  	je	short int_74_not_first
 27564                                  	
 27565                                  	cmp	dx,0F000h
 27566                                  	jne	short int_74_not_first
 27567                                  
 27568                                  	push	es
 27569                                  	push	dx
 27570                                  	mov	dx,0F000h
 27571                                  	mov	es,dx
 27572                                  	cmp	bx,[es:0FF01h]
 27573                                  	pop	dx
 27574                                  	pop	es
 27575                                  	je	short int_74_first
 27576                                  %endif
 27577                                  
 27578                                  int_74_not_first:
 27579                                  	; 14/12/2022
 27580                                  	; 25/10/2022
 27581                                  	;pop	ds
 27582 00001408 BF[EA05]                	mov	di,INT19OLD74
 27583 0000140B BB[0101]                	mov	bx,old74
 27584 0000140E BA[FF00]                	mov	dx,int74
 27585 00001411 E87B00                  	call	new_init_loop
 27586                                  	
 27587                                  	; 14/12/2022
 27588                                  	;jmp	short int_74_end
 27589                                  ;int_74_first:
 27590                                  	; 25/10/2022
 27591                                  	;pop	ds
 27592                                  
 27593                                  int_74_end:
 27594                                  
 27595                                  stkinit_76:
 27596 00001414 BED801                  	mov	si,76h*4 ; 472
 27597                                  	
 27598                                  	; 14/12/2022
 27599                                  	; 25/10/2022
 27600 00001417 E84B00                  	call	int_xx_first_check
 27601 0000141A 730E                    	jnc	short int_76_end ; int_76_first
 27602                                  
 27603                                  ; 14/12/2022
 27604                                  %if 0	
 27605                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27606                                  	push	ds
 27607                                  	lds	bx,[es:si]
 27608                                  	push	ds
 27609                                  	pop	dx
 27610                                  		
 27611                                  	cmp	dx,0
 27612                                  	je	short int_76_first
 27613                                  
 27614                                  	cmp	byte [bx],0CFh
 27615                                  	je	short int_76_first
 27616                                  	
 27617                                  	cmp	word [bx+6],424Bh
 27618                                  	je	short int_76_not_first
 27619                                  	
 27620                                  	cmp	dx,0F000h
 27621                                  	jne	short int_76_not_first
 27622                                  
 27623                                  	push	es
 27624                                  	push	dx
 27625                                  	mov	dx,0F000h
 27626                                  	mov	es,dx
 27627                                  	cmp	bx,[es:0FF01h]
 27628                                  	pop	dx
 27629                                  	pop	es
 27630                                  	je	short int_76_first
 27631                                  %endif
 27632                                  	
 27633                                  int_76_not_first:
 27634                                  	; 14/12/2022
 27635                                  	; 25/10/2022
 27636                                  	;pop	ds
 27637 0000141C BF[EF05]                	mov	di,INT19OLD76
 27638 0000141F BB[1901]                	mov	bx,old76
 27639 00001422 BA[1701]                	mov	dx,int76
 27640 00001425 E86700                  	call	new_init_loop
 27641                                  
 27642                                  	; 14/12/2022
 27643 00001428 EB00                    	jmp	short int_76_end
 27644                                  ;int_76_first:
 27645                                  	; 25/10/2022
 27646                                  	;pop	ds
 27647                                  
 27648                                  int_76_end:
 27649                                  
 27650                                  stkinit_77:
 27651 0000142A BEDC01                  	mov	si,77h*4 ; 476
 27652                                  	
 27653                                  	; 14/12/2022
 27654                                  	; 25/10/2022
 27655 0000142D E83500                  	call	int_xx_first_check
 27656 00001430 730C                    	jnc	short int_77_end ; int_77_first
 27657                                  
 27658                                  ; 14/12/2022
 27659                                  %if 0	
 27660                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27661                                  	push	ds
 27662                                  	lds	bx,[es:si]
 27663                                  	push	ds
 27664                                  	pop	dx
 27665                                  		
 27666                                  	cmp	dx,0
 27667                                  	je	short int_77_first
 27668                                  
 27669                                  	cmp	byte [bx],0CFh
 27670                                  	je	short int_77_first
 27671                                  	
 27672                                  	cmp	word [bx+6],424Bh
 27673                                  	je	short int_77_not_first
 27674                                  	
 27675                                  	cmp	dx,0F000h
 27676                                  	jne	short int_77_not_first
 27677                                  
 27678                                  	push	es
 27679                                  	push	dx
 27680                                  	mov	dx,0F000h
 27681                                  	mov	es,dx
 27682                                  	cmp	bx,[es:0FF01h]
 27683                                  	pop	dx
 27684                                  	pop	es
 27685                                  	je	short int_77_first
 27686                                  %endif
 27687                                  	
 27688                                  int_77_not_first:
 27689                                  	; 14/12/2022
 27690                                  	; 25/10/2022
 27691                                  	;pop	ds
 27692 00001432 BF[F405]                	mov	di,INT19OLD77
 27693 00001435 BB[3101]                	mov	bx,old77
 27694 00001438 BA[2F01]                	mov	dx,int77
 27695 0000143B E85100                  	call	new_init_loop
 27696                                  
 27697                                  	; 14/12/2022
 27698                                  	;jmp	short int_77_end
 27699                                  ;int_77_first:
 27700                                  	; 25/10/2022
 27701                                  	;pop	ds
 27702                                  
 27703                                  int_77_end:
 27704 0000143E 1E                      	push	ds
 27705 0000143F B800F0                  	mov	ax,0F000h		; look at the model byte
 27706 00001442 8ED8                    	mov	ds,ax
 27707 00001444 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 27708 00001449 1F                      	pop	ds
 27709 0000144A 7504                    	jne	short skip_enablenmis
 27710                                  
 27711 0000144C B027                    	mov	al,27h			; enable convertible nmis
 27712 0000144E E672                    	out	72h,al
 27713                                  
 27714                                  ; 25/10/2022
 27715                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 27716                                  
 27717                                  skip_enablenmis:
 27718 00001450 FB                      	sti
 27719                                  	;;mov	ax,Bios_Data ; 70h
 27720                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27721                                  	; 21/10/2022
 27722 00001451 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27723 00001454 8ED8                    	mov	ds,ax
 27724                                  
 27725                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 27726                                  
 27727 00001456 C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 27728                                  					; initialization is complete
 27729                                  
 27730 0000145B 5D                      	pop	bp			; restore all
 27731 0000145C 5E                      	pop	si
 27732 0000145D 5F                      	pop	di
 27733 0000145E 5A                      	pop	dx
 27734 0000145F 59                      	pop	cx
 27735 00001460 5B                      	pop	bx
 27736 00001461 07                      	pop	es
 27737 00001462 1F                      	pop	ds
 27738 00001463 58                      	pop	ax
 27739 00001464 C3                      	retn
 27740                                  
 27741                                  ; 14/12/2022
 27742                                  ; ----------------------------------------------------------------------
 27743                                  
 27744                                  	; 14/12/2022
 27745                                  	; 25/10/2022
 27746                                  ;%if 0
 27747                                  	; 27/03/2019 - Retro DOS v4.0
 27748                                  int_xx_first_check:
 27749 00001465 1E                      	push	ds
 27750 00001466 26C51C                  	lds	bx,[es:si]
 27751 00001469 1E                      	push	ds
 27752 0000146A 5A                      	pop	dx
 27753                                  		
 27754                                  	;cmp	dx,0
 27755                                  	;je	short int_xx_first
 27756                                  	; 05/09/2023
 27757 0000146B 21D2                    	and	dx,dx
 27758 0000146D 741E                    	jz	short int_xx_first
 27759                                  	
 27760 0000146F 803FCF                  	cmp	byte [bx],0CFh
 27761 00001472 7419                    	je	short int_xx_first
 27762                                  	
 27763 00001474 817F064B42              	cmp	word [bx+6],424Bh
 27764 00001479 7411                    	je	short int_xx_not_first
 27765                                  	
 27766 0000147B 81FA00F0                	cmp	dx,0F000h
 27767 0000147F 750B                    	jne	short int_xx_not_first
 27768                                  
 27769 00001481 06                      	push	es
 27770                                  	;push	dx
 27771                                  	;mov	dx,0F000h
 27772 00001482 8EC2                    	mov	es,dx
 27773 00001484 263B1E01FF              	cmp	bx,[es:0FF01h]
 27774                                        	;pop	dx
 27775 00001489 07                      	pop	es
 27776 0000148A 7401                    	je	short int_xx_first
 27777                                  
 27778                                  int_xx_not_first:
 27779 0000148C F9                      	stc
 27780                                  int_xx_first:
 27781 0000148D 1F                      	pop	ds
 27782 0000148E C3                      	retn
 27783                                  
 27784                                  ;%endif
 27785                                  
 27786                                  ; ----------------------------------------------------------------------
 27787                                  ; 27/03/2019 - Retro DOS v4.0
 27788                                  
 27789                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27790                                  ; (SYSINIT:1610h)
 27791                                  
 27792                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 27793                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1905h)
 27794                                  
 27795                                  new_init_loop:
 27796                                  
 27797                                  ; 18/03/2025 - MiniDOS 1.0
 27798                                  %if 0
 27799                                  	;;; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 27800                                  	cmp	byte [cs:dosdata_umb],2
 27801                                  				; is DOSDATA=UMB done ? (DOSDATA is in UMB)
 27802                                  	jne	short new_init_loop_1st
 27803                                  	push	ds		; restore original/previous interrupt handler
 27804                                  				; (from int19old?? field in BIOSDATA)
 27805                                  	;mov	ax,70h
 27806                                  	mov	ax,DOSBIODATASEG
 27807                                  	mov	ds,ax
 27808                                  	lds	ax,[di]		; restore original Int ?? handler addr from int19old?? field
 27809                                  	mov	[es:si],ax	; copy the original int handler addr to its int vector addr
 27810                                  	mov	[es:si+2],ds
 27811                                  	pop	ds
 27812                                  new_init_loop_1st: 
 27813                                  	;;;
 27814                                  
 27815                                  %endif
 27816                                  
 27817                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 27818                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 27819                                  ;	dx=ds:offset of intxx, the new interrupt handler
 27820                                  ;	di=offset value of int19old&aa variable in bios.
 27821                                  ;	es=zero, segid of vector table
 27822                                  ;	ds=relocated stack code segment
 27823                                  
 27824                                  ; 13/04/2024
 27825                                  %if 0
 27826                                  	mov	ax,[es:si]		;remember offset in vector
 27827                                  	mov	[bx],ax			; to original owner in ds
 27828                                  	mov	ax,[es:si+2]		;remember segid in vector
 27829                                  	mov	[bx+2],ax		; to original owner in ds
 27830                                  
 27831                                  	push	ds
 27832                                  	;;mov	ax,Bios_Data ; 70h
 27833                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27834                                  	; 21/10/2022
 27835                                  	mov	ax,DOSBIODATASEG ; 0070h
 27836                                  	mov	ds,ax			;set int19oldxx value in bios for
 27837                                  	mov	ax,[es:si]		;int 19 handler
 27838                                  	mov	[di],ax
 27839                                  	mov	ax,[es:si+2]
 27840                                  	mov	[di+2],ax
 27841                                  	pop	ds
 27842                                  %else
 27843                                  	; 13/04/2024 - Retro DOS v5.0
 27844 0000148F 1E                      	push	ds
 27845 00001490 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 27846 00001494 894702                  	mov	[bx+2],ax		; to original owner in ds
 27847 00001497 50                      	push	ax
 27848 00001498 268B04                  	mov	ax,[es:si]		;remember offset in vector
 27849 0000149B 8907                    	mov	[bx],ax			; to original owner in ds
 27850 0000149D 50                      	push	ax
 27851 0000149E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27852 000014A1 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 27853 000014A3 58                      	pop	ax			;int 19 handler
 27854 000014A4 8905                    	mov	[di],ax
 27855 000014A6 58                      	pop	ax
 27856 000014A7 894502                  	mov	[di+2],ax
 27857 000014AA 1F                      	pop	ds
 27858                                  %endif
 27859 000014AB 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 27860 000014AE 268C5C02                	mov	[es:si+2],ds
 27861 000014B2 C3                      	retn
 27862                                  
 27863                                  ; End of STACK initialization routine
 27864                                  ; ----------------------------------------------------------------------
 27865                                  
 27866                                  ; ----------------------------------------------------------------------
 27867                                  ;set the devmark for mem command.
 27868                                  ;in: [memhi] - the address to place devmark
 27869                                  ;    [memlo] = 0
 27870                                  ;    al = id for devmark_id
 27871                                  ;out: devmark established.
 27872                                  ;     the address saved in cs:[devmark_addr]
 27873                                  ;     [memhi] increase by 1.
 27874                                  ; ----------------------------------------------------------------------
 27875                                  
 27876                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27877                                  ; (SYSINIT:1637h)
 27878                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 27879                                  ; (SYSINIT:176Ch)
 27880                                  
 27881                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 27882                                  
 27883                                  setdevmark:
 27884                                  
 27885                                  	; 04/09/2023
 27886                                  	;push	es
 27887                                  	;push	cx
 27888                                  
 27889 000014B3 2E8B0E[6003]            	mov	cx,[cs:memhi]
 27890 000014B8 2E890E[D614]            	mov	[cs:devmark_addr],cx
 27891 000014BD 8EC1                    	mov	es,cx
 27892                                  	; 25/10/2022
 27893                                  	;mov	[es:devmark.id],al
 27894 000014BF 26A20000                	mov	[es:0],al
 27895 000014C3 41                      	inc	cx
 27896                                  	;mov	[es:devmark.seg],cx
 27897 000014C4 26890E0100              	mov	[es:1],cx
 27898                                  
 27899                                  	; 04/09/2023
 27900                                  	;pop	cx
 27901                                  	;pop	es
 27902                                  	
 27903 000014C9 2EFF06[6003]            	inc	word [cs:memhi]
 27904 000014CE C3                      	retn
 27905                                  
 27906                                  ; ----------------------------------------------------------------------
 27907                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 27908                                  ; ----------------------------------------------------------------------
 27909                                  ; 27/03/2019 - Retro DOS v4.0
 27910                                  
 27911                                  ;MULTI_CONFIG	equ 1
 27912                                  
 27913                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 27914                                                                          ; allocation strategy call
 27915                                  
 27916                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 27917                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 27918                                  
 27919                                  default_filenum equ 8
 27920                                  
 27921                                  ;stacksw	equ true		; include switchable hardware stacks
 27922                                  
 27923                                  ; external variable defined in ibmbio module for multi-track
 27924                                  
 27925                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 27926                                  					; it on after handling config.sys file as a
 27927                                  					; default value,if multrk_flag = multrk_off1.
 27928                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 27929                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 27930                                  
 27931                                  ; if stacksw
 27932                                  
 27933                                  ; internal stack parameters
 27934                                  
 27935                                  ;entrysize	equ 8
 27936                                  
 27937                                  ;mincount	equ 8
 27938                                  ;defaultcount	equ 9
 27939                                  ;maxcount	equ 64
 27940                                  
 27941                                  ;minsize 	equ 32
 27942                                  ;defaultsize	equ 128
 27943                                  ;maxsize 	equ 512
 27944                                  
 27945                                  DOS_FLAG_OFFSET	equ 86h
 27946                                  
 27947                                  ;ifdef MULTI_CONFIG
 27948                                  ;
 27949                                  ;   config_envlen must immediately precede config_wrkseg, because they
 27950                                  ;   may be loaded as a dword ptr
 27951                                  
 27952                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27953                                  ; 25/10/2022
 27954 000014CF 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 27955                                                 				;  a scratch env, this is its length
 27956 000014D1 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 27957                                                     			;  segment of work area
 27958                                  
 27959 000014D3 00                      config_cmd:	db  0  			; current config cmd
 27960                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 27961 000014D4 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 27962                                  
 27963                                  ;endif ; MULTI_CONFIG
 27964                                  
 27965 000014D5 00                      multdeviceflag:	db  0
 27966                                  
 27967 000014D6 0000                    devmark_addr:	dw  0			;segment address for devmark.
 27968                                  
 27969 000014D8 00                      setdevmarkflag: db  0			;flag used for devmark
 27970                                  
 27971                                  ; 30/12/2022
 27972                                  ; 12/12/2022
 27973 000014D9 00                      driver_units:	db  0			;total unitcount for driver
 27974                                  
 27975                                  ; 12/12/2022
 27976                                  ;ems_stub_installed:
 27977                                  ;		db  0
 27978                                  
 27979                                  ; 12/12/2022	
 27980                                  ;align 2
 27981                                  
 27982                                  badparm_ptr:	; label	dword
 27983 000014DA 0000                    badparm_off:	dw  0
 27984 000014DC 0000                    badparm_seg:	dw  0
 27985                                  
 27986                                  ;******************************************************************************
 27987                                  ;take care of config.sys file.
 27988                                  ;system parser data and code.
 27989                                  ;******************************************************************************
 27990                                  
 27991                                  ;*******************************************************************
 27992                                  ; parser options set for msbio sysconf module
 27993                                  ;*******************************************************************
 27994                                  ;
 27995                                  ;**** default assemble swiches definition **************************
 27996                                  
 27997                                  ;farsw	equ 0		; near call expected
 27998                                  ;datesw	equ 0		; check date format
 27999                                  ;timesw	equ 0		; check time format
 28000                                  ;filesw	equ 1		; check file specification
 28001                                  ;capsw	equ 0		; perform caps if specified
 28002                                  ;cmpxsw	equ 0		; check complex list
 28003                                  ;numsw	equ 1		; check numeric value
 28004                                  ;keysw	equ 0		; support keywords
 28005                                  ;swsw	equ 1		; support switches
 28006                                  ;val1sw	equ 1		; support value definition 1
 28007                                  ;val2sw	equ 0		; support value definition 2
 28008                                  ;val3sw	equ 1		; support value definition 3
 28009                                  ;drvsw	equ 1		; support drive only format
 28010                                  ;qussw	equ 0		; support quoted string format
 28011                                  
 28012                                  ; psdata_seg equ cs
 28013                                  
 28014                                  	;.xlist
 28015                                  	;include parse.asm		;together with psdata.inc
 28016                                  	;.list
 28017                                  
 28018                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 28019                                  ; ======================================================================
 28020                                  ; 27/03/2019 - Retro DOS v4.0
 28021                                  
 28022                                  ; 30/03/2019
 28023                                  ; VERSION.INC (MSDOS 6.0) 
 28024                                  ; Set DBCS Blank constant
 28025                                  
 28026                                  ; ifndef DBCS
 28027                                  DB_SPACE EQU 2020h
 28028                                  DB_SP_HI EQU 20h
 28029                                  DB_SP_LO EQU 20h
 28030                                  ; else
 28031                                  
 28032                                  ;*******************************************************************
 28033                                  ; Parser include file
 28034                                  ;*******************************************************************
 28035                                  
 28036                                  ;**** Equation field
 28037                                  ;-------- Character code definition
 28038                                  
 28039                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 28040                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 28041                                  _$P_Period	   equ	"."             ;AN020;
 28042                                  _$P_Slash	   equ	"/"             ;AN020;
 28043                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 28044                                  _$P_Comma	   equ	","             ;AN000;
 28045                                  _$P_Switch	   equ	"/"             ;AN000;
 28046                                  _$P_Keyword	   equ	"="             ;AN000;
 28047                                  _$P_Colon	   equ	":"             ;AN000;
 28048                                  _$P_Plus 	   equ	"+"             ;AN000;
 28049                                  _$P_Minus	   equ	"-"             ;AN000;
 28050                                  _$P_Rparen	   equ	")"             ;AN000;
 28051                                  _$P_Lparen	   equ	"("             ;AN000;
 28052                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 28053                                  _$P_DQuote	   equ	'"'             ;AN000;
 28054                                  _$P_NULL 	   equ	0		;AN000;
 28055                                  _$P_TAB		   equ	9		;AN000;
 28056                                  _$P_CR		   equ	0Dh		;AN000;
 28057                                  _$P_LF		   equ	0Ah		;AN000;
 28058                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 28059                                  
 28060                                  ;-------- Masks
 28061                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 28062                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 28063                                  
 28064                                  ;-------- DOS function call related equs
 28065                                  
 28066                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 28067                                  					; by this call, following information
 28068                                  struc _$P_CDI	
 28069 00000000 ????                     .DateF: resw 1
 28070 00000002 ??????????               .Money: resb 5
 28071 00000007 ????                     .1000:	 resb 2
 28072 00000009 ????                     .Dec:	 resb 2
 28073 0000000B ????                     .DateS: resb 2
 28074 0000000D ????                     .TimeS: resb 2
 28075 0000000F ??                          	 resb 1
 28076 00000010 ??                      	 resb 1
 28077 00000011 ??                       .TimeF: resb 1	 
 28078 00000012 ????????                	 resw 2
 28079 00000016 ????                    	 resb 2
 28080 00000018 <res Ah>                	 resw 5
 28081                                   .size:
 28082                                  endstruc
 28083                                  
 28084                                  _$P_Date_MDY	   equ	0		;AN000;
 28085                                  _$P_Date_DMY	   equ	1		;AN000;
 28086                                  _$P_Date_YMD	   equ	2		;AN000;
 28087                                  ;-------------
 28088                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 28089                                  					;AN000; DS:SI will points to DBCS EV
 28090                                  ;-------------
 28091                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 28092                                  					;AN000; following parameters are set
 28093                                  					;AN000; to get casemap table.
 28094                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 28095                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 28096                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 28097                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 28098                                  					; By this call following information
 28099                                  					; is returned.
 28100                                  struc _$P_DOS_TBL
 28101 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 28102 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 28103 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 28104                                  endstruc
 28105                                  
 28106                                  ; ----------------------------------------------------------------------------
 28107                                  ; PARMS 	LABEL	BYTE
 28108                                  ;		DW	PARMSX
 28109                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 28110                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28111                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 28112                                  ;					; TYPICAL ARE ";", "="
 28113                                  ;					; "," & WHITESPACE ALWAYS
 28114                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28115                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 28116                                  ; ----------------------------------------------------------------------------
 28117                                  
 28118                                  ;-------------------------------- PARMS block structure
 28119                                  struc _$P_PARMS_Blk
 28120 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 28121 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 28122 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 28123                                  endstruc
 28124                                  
 28125                                  _$P_Len_PARMS	   equ	4		;AN000;
 28126                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 28127                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 28128                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 28129                                  
 28130                                  ; ----------------------------------------------------------------------------
 28131                                  ; PARMSX	LABEL	BYTE
 28132                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 28133                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 28134                                  ;		:			; REPEATS maxp-1 TIMES
 28135                                  ;		DB	maxs		; # OF SWITCHES
 28136                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 28137                                  ;		:			; REPEATS maxs-1 TIMES
 28138                                  ;		DB	maxk		; # OF KEYWORD
 28139                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 28140                                  ;		:			; REPEATS maxk-1 TIMES
 28141                                  ; ----------------------------------------------------------------------------
 28142                                  
 28143                                  ;-------------------------------- PARMSX block structure
 28144                                  struc _$P_PARMSX_Blk		;AN000;
 28145 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 28146 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 28147 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 28148                                  endstruc
 28149                                  
 28150                                  ; ----------------------------------------------------------------------------
 28151                                  ; << Control field definition  >>
 28152                                  ;
 28153                                  ;
 28154                                  ;CONTROL   LABEL   BYTE
 28155                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 28156                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 28157                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 28158                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 28159                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 28160                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 28161                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 28162                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 28163                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 28164                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 28165                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 28166                                  ;				   ; 0002H=REPEATS ALLOWED
 28167                                  ;				   ; 0001H=OPTIONAL
 28168                                  ;	   DW	   FUNCTION_FLAGS
 28169                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 28170                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 28171                                  ;				   ; 0010H=REMOVE ":" AT END
 28172                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 28173                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 28174                                  ;	   DW	   VALUES	   ; VALUE LISTS
 28175                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 28176                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 28177                                  ;	   :
 28178                                  ;
 28179                                  ;Note:
 28180                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 28181                                  ;      DATE bit simalteniously.
 28182                                  ;
 28183                                  ;      The parser examins each bit along with the following priority.
 28184                                  ;
 28185                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 28186                                  ;      FILE SPEC -> SIMPLE STRING.
 28187                                  ;
 28188                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 28189                                  ;      in the result buffer is capitalized.
 28190                                  ;
 28191                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 28192                                  ;
 28193                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 28194                                  ;      switch, for example, '/A', then STRING points to;
 28195                                  ;
 28196                                  ;			DB    1 	; number of following synonyms
 28197                                  ;			DB   '/A',0
 28198                                  ;
 28199                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 28200                                  ;
 28201                                  ;			DB    1 	; number of following synonyms
 28202                                  ;			DB   'CODEPAGE=',0
 28203                                  ;
 28204                                  ;    - "..." must consist of upper case characters only because the parser
 28205                                  ;      performs pattern matching after converting input to upper case (by
 28206                                  ;      using the current country upper case table)
 28207                                  ;
 28208                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 28209                                  ;      example /A and /B, the format will be;
 28210                                  ;
 28211                                  ;			DB    2 	; number of following synonyms
 28212                                  ;			DB    '/A',0
 28213                                  ;			DB    '/B',0
 28214                                  ; ----------------------------------------------------------------------------
 28215                                  
 28216                                  ;**** Match_Flags
 28217                                  
 28218                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 28219                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 28220                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 28221                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 28222                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 28223                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 28224                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 28225                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 28226                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 28227                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 28228                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 28229                                  _$P_Optional	   equ	0001h		;AN000; Optional
 28230                                  
 28231                                  ;**** Function flags
 28232                                  
 28233                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 28234                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 28235                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 28236                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 28237                                  
 28238                                  ;-------------------------------- Control block structure
 28239                                  struc _$P_Control_Blk
 28240 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 28241 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 28242 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 28243 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 28244 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 28245 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 28246                                  endstruc
 28247                                  
 28248                                  ; ----------------------------------------------------------------------------
 28249                                  ; << Value List Definition >>
 28250                                  ;
 28251                                  ;VALUES 	LABEL	BYTE
 28252                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 28253                                  ;	     +-
 28254                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 28255                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 28256                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 28257                                  ;	     |	:
 28258                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 28259                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 28260                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 28261                                  ;	     |	:
 28262                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 28263                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 28264                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 28265                                  ;	     +-	:
 28266                                  ;
 28267                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 28268                                  ;
 28269                                  ;Note:
 28270                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 28271                                  ;      when no choice lists are provided.
 28272                                  ;
 28273                                  ;    - STRING must consist of upper case characters only because the parser
 28274                                  ;      performs pattern matching after converting input to upper case (by
 28275                                  ;      using the current country upper case table)
 28276                                  ; ----------------------------------------------------------------------------
 28277                                  
 28278                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 28279                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 28280                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 28281                                  _$P_nval_String	   equ	3		;AN000; string list ID
 28282                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 28283                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 28284                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 28285                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 28286                                  
 28287                                  struc _$P_Val_List
 28288 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 28289 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 28290 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 28291 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 28292 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 28293                                  endstruc
 28294                                  
 28295                                  ; ----------------------------------------------------------------------------
 28296                                  ; << Result Buffer Definition  >>
 28297                                  ;
 28298                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 28299                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 28300                                  ;						;	1=NUMBER, 2=LIST INDEX,
 28301                                  ;						;	3=STRING, 4=COMPLEX,
 28302                                  ;						;	5=FILESPEC, 6=DRIVE
 28303                                  ;						;	7=DATE, 8=TIME
 28304                                  ;						;	9=QUOTED STRING
 28305                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 28306                                  ;
 28307                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 28308                                  ;
 28309                                  ;            +-
 28310                                  ;	    | DD	n			; VALUE IF NUMBER
 28311                                  ;	    | or
 28312                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 28313                                  ;	    |					; (ES presents Segment address)
 28314                                  ;	    | or
 28315                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 28316                                  ;	    | or
 28317                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 28318                                  ;	    | or
 28319                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 28320                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 28321                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 28322                                  ;	    | or
 28323                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 28324                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 28325                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 28326                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 28327                                  ;	    +-
 28328                                  ;
 28329                                  ;
 28330                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 28331                                  ;      list.
 28332                                  ;
 28333                                  ;      YEAR: If the input value for the year is less than 100, parser
 28334                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 28335                                  ;	     the year value, he returns 1987.
 28336                                  ; ----------------------------------------------------------------------------
 28337                                  
 28338                                  ;-------------------------------- Result block structure
 28339                                  struc _$P_Result_Blk
 28340 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 28341 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 28342 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 28343 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 28344                                  endstruc
 28345                                  
 28346                                  ;--------------------------------
 28347                                  ;**** values for the type field in the result block
 28348                                  
 28349                                  _$P_EOL		   equ	0		;AN000; End of line
 28350                                  _$P_Number	   equ	1		;AN000; Number
 28351                                  _$P_List_Idx	   equ	2		;AN000; List Index
 28352                                  _$P_String	   equ	3		;AN000; String
 28353                                  _$P_Complex	   equ	4		;AN000; Complex
 28354                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 28355                                  _$P_Drive	   equ	6		;AN000; Drive
 28356                                  _$P_Date_F	   equ	7		;AN000; Date
 28357                                  _$P_Time_F	   equ	8		;AN000; Time
 28358                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 28359                                  
 28360                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 28361                                  
 28362                                  ;**** Return code
 28363                                  ;
 28364                                  ; following return code will be returned in the AX register.
 28365                                  
 28366                                  _$P_No_Error	   equ	0		;AN000; No error
 28367                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 28368                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 28369                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 28370                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 28371                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 28372                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 28373                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 28374                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 28375                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 28376                                  
 28377                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 28378                                  
 28379                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 28380                                  
 28381                                  ; 14/04/2024 - Retro DOS v5.0
 28382                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:1C62h
 28383                                  
 28384                                  ;********************** Local Data *************************************
 28385 000014DE 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 28386 000014E0 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 28387 000014E2 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 28388 000014E4 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 28389 000014E6 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 28390 000014E7 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 28391 000014E9 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 28392 000014EB 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 28393                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 28394                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 28395                                  
 28396                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 28397                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 28398                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 28399                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 28400                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 28401                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 28402                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 28403                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 28404                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 28405                                  
 28406                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 28407                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 28408                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 28409                                  
 28410 000014ED 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 28411 000014EF 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 28412 000014F1 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 28413 000014F3 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 28414                                  
 28415 000014F5 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 28416                                  _$P_STRING_BUF_END equ	$		;AN000;
 28417                                  
 28418                                  ; 25/10/2022
 28419                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 28420                                  
 28421 00001575 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 28422 00001576 0000                    		   dw	0		;AN000; offset	of char case map table
 28423 00001578 0000                    		   dw	0		;AN000; segment of char case map table
 28424                                  ; 25/10/2022
 28425                                  ;IF CAPSW
 28426                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 28427                                  ;		   dw	0		;AN000; offset	of file case map table
 28428                                  ;		   dw	0		;AN000; segment of file case map table
 28429                                  ;ENDIF
 28430                                  
 28431                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 28432                                  ;
 28433                                  
 28434                                  ;M029
 28435                                  ;!!!WARNING!!!
 28436                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 28437                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 28438                                  ;changes need to be made in SYSPARSE
 28439                                  
 28440                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 28441                                  
 28442                                  ; 25/10/2022
 28443                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 28444                                  
 28445 0000157A 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 28446                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 28447                                  
 28448                                  ;ENDIF					;AN000;(of FileSW)
 28449                                  
 28450                                  ; delimiter parsing
 28451                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 28452                                  _$P_period_only	   equ	02h		;AN032; check only for period
 28453                                  
 28454                                  ;filespec error flag
 28455 00001583 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 28456                                  					;AN033;  was detected.
 28457                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 28458                                  
 28459                                  
 28460                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 28461                                  ; ======================================================================
 28462                                  ; 27/03/2019 - Retro DOS v4.0
 28463                                  
 28464                                  ;***********************************************************************
 28465                                  ; SysParse;
 28466                                  ;
 28467                                  ;  Function : Parser Entry
 28468                                  ;
 28469                                  ;  Input: DS:SI -> command line
 28470                                  ;	  ES:DI -> parameter block
 28471                                  ;	  cs -> psdata.inc
 28472                                  ;	  CX = operand ordinal
 28473                                  ;
 28474                                  ;	  Note:  ES is the segment containing all the control blocks defined
 28475                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 28476                                  ;		 is in DS.
 28477                                  ;
 28478                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 28479                                  ;		    invalid value list. But this parser does NOT implement
 28480                                  ;		    this feature. Therefore CY always zero.
 28481                                  ;
 28482                                  ;	   CY = 0   AX = return code
 28483                                  ;		    BL = terminated delimiter code
 28484                                  ;		    CX = new operand ordinal
 28485                                  ;		    SI = set past scaned operand
 28486                                  ;		    DX = selected result buffer
 28487                                  ;
 28488                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 28489                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 28490                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 28491                                  ;
 28492                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 28493                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 28494                                  ;
 28495                                  ;-------- Modification History -----------------------------------------
 28496                                  ;
 28497                                  ;  4/04/87 : Created by K. K,
 28498                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 28499                                  ;	   : JMP SHORT assemble error (tm02)
 28500                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 28501                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 28502                                  ;	     DateSW equ 1)	      (tm04)
 28503                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 28504                                  ;				      (tm05) in PSDATA.INC
 28505                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 28506                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 28507                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 28508                                  ;	     value-list block	      (tm07)
 28509                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 28510                                  ;	     switch (keyword) or not. If there is, backup si for next call
 28511                                  ;	     (tm08)
 28512                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 28513                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 28514                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 28515                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 28516                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 28517                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 28518                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 28519                                  ;					  (tm12)
 28520                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 28521                                  ;					  (tm13)
 28522                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 28523                                  ;					  (tm14)
 28524                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 28525                                  ;					  (tm15)
 28526                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 28527                                  
 28528                                  ;  7/24/87 : Quoted strings being returned with quotes.
 28529                                  
 28530                                  ;  7/28/87 : Kerry S (;AN018;)
 28531                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 28532                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 28533                                  ;	     affected: _$P_Chk_SW_Control.
 28534                                  
 28535                                  ;  7/29/87 : Kerry S (;AN019;)
 28536                                  ;	     Now allow the optional bit in match flags for switches.  This
 28537                                  ;	     allows the switch to be encountered with a value or without a
 28538                                  ;	     value and no error is returned.
 28539                                  ;
 28540                                  
 28541                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 28542                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 28543                                  ;	     within a date response, instead of checking just for the one
 28544                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 28545                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 28546                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 28547                                  
 28548                                  ;  9/1/87  : Kerry S (;AN021)
 28549                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 28550                                  ;	     the command line with the string in the control block the
 28551                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 28552                                  ;	     on the command line and assuming a match.	This allowed a shorter
 28553                                  ;	     string on the command line than in the synonym list in the control
 28554                                  ;	     block.  I put in a test for a null in the control block so the
 28555                                  ;	     string in the control block must be the same length as the string
 28556                                  ;	     preceeding the colon or equal on the command line.
 28557                                  
 28558                                  ;  8/28/87 : Kerry S (;AN022;)
 28559                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 28560                                  ;	     problems for people who included it themselves in a segment other
 28561                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 28562                                  ;	     segment.
 28563                                  
 28564                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 28565                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 28566                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 28567                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 28568                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 28569                                  ;	     BL be used if TIME is being parsed.
 28570                                  
 28571                                  ;  9/24/87 : Ed K
 28572                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 28573                                  ;	     invocations with their normally expanded code; made comments
 28574                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 28575                                  
 28576                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 28577                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 28578                                  ;	     pointed to by non-existant CONTROL.
 28579                                  
 28580                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 28581                                  ;	     A quoted text string can be framed only by double quote.  Remove
 28582                                  ;	     support to frame quoted text string with single quote.
 28583                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 28584                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 28585                                  ;	     single quote in PROC prologues are left as is for history reasons.
 28586                                  
 28587                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 28588                                  ;	     quote chars within a quoted string is supposed to be reported as
 28589                                  ;	     one quote character, but is reported as two quotes.  This changed
 28590                                  ;	     two instructions in PROC _$P_Quoted_Str.
 28591                                  
 28592                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 28593                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 28594                                  
 28595                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 28596                                  
 28597                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 28598                                  ;	     psdata buffer should have cs.
 28599                                  
 28600                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 28601                                  ;	     positional missing.
 28602                                  
 28603                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 28604                                  ;	     as a line delimiter, should use carriage return.
 28605                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 28606                                  
 28607                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 28608                                  
 28609                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 28610                                  ;	     endless loop since SI is returned still pointing to start
 28611                                  ;	     of that parm.
 28612                                  
 28613                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 28614                                  ;	     Vector to returned string has CS instead of cs, but
 28615                                  ;	     when tried to fix it on previous version, changed similar
 28616                                  ;	     but wrong place.
 28617                                  
 28618                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 28619                                  ;	     delimiters between hours, minutes, seconds for time. And period
 28620                                  ;	     and comma are valid delimiters between seconds and 100th second.
 28621                                  
 28622                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 28623                                  ;	     in a filespec, then flag an error.
 28624                                  
 28625                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 28626                                  ;	     indexed off of the cs equate instead of the DS register.
 28627                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 28628                                  ;  -->	     local parser data. Why were some references to local data changed
 28629                                  ;	     to do this before, but not all ?????
 28630                                  
 28631                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 28632                                  
 28633                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 28634                                  ;
 28635                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 28636                                  
 28637                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 28638                                  
 28639                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 28640                                  ;	     separator in TIME before hundredths field.
 28641                                  ;
 28642                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 28643                                  ;			strings as keywords.
 28644                                  ;
 28645                                  ;***********************************************************************
 28646                                  
 28647                                  ;IF FarSW				;AN000;(Check if need far return)
 28648                                  ;SysParse proc far			;AN000;
 28649                                  ;ELSE					;AN000;
 28650                                  ;SysParse proc near			;AN000;
 28651                                  ;ENDIF					;AN000;(of FarSW)
 28652                                  
 28653                                  ; 27/03/2019 - Retro DOS v4.0
 28654                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 28655                                  
 28656                                  ; 25/10/2022 - Retro DOS v4.0
 28657                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 28658                                  
 28659                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 28660                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 28661                                  
 28662                                  SysParse:
 28663                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 28664                                  	; dx = 0
 28665 00001584 1E                      	push	ds ; *!*
 28666 00001585 0E                      	push	cs
 28667 00001586 1F                      	pop	ds 
 28668                                  
 28669                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 28670                                  	;cld				;AN000; confirm forward direction
 28671                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 28672                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 28673                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 28674                                  	;
 28675                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 28676                                  
 28677                                  	; 06/09/2023
 28678 00001587 8916[EB14]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 28679 0000158B FC                      	cld				;AN000; confirm forward direction
 28680 0000158C 890E[DE14]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 28681 00001590 8916[E014]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 28682 00001594 8916[F314]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 28683 00001598 8916[E414]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 28684                                  
 28685                                  ;M029 -- Begin changes
 28686                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 28687                                  ;entry to SysParse. This is in the non-checksum region and any program that
 28688                                  ;corrupts this table but does not corrupt the checksum region will leave
 28689                                  ;command.com parsing in an inconsistent state.
 28690                                  ; NB: The special characters string has been hardcoded here. If any change
 28691                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 28692                                  
 28693                                  ;IF FileSW + DrvSW
 28694                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 28695                                  	
 28696                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 28697                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 28698                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 28699                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 28700                                  
 28701                                  	; 14/04/2024
 28702                                  	; 06/09/2023
 28703 0000159C C706[7A15]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 28704 000015A2 C706[7C15]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 28705 000015A8 C706[7E15]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 28706 000015AE C706[8015]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 28707                                  ;ENDIF
 28708                                  	; 06/09/2023
 28709 000015B4 1F                      	pop	ds ; *!*
 28710                                  
 28711                                  ;M029 -- End of changes
 28712                                  
 28713 000015B5 E87806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 28714 000015B8 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 28715                                  ;--------------------------- End of Line
 28716 000015BA B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 28717 000015BD 53                      	push	bx			;AN000;
 28718                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 28719                                  					;AN000; Get the PARMSX address to
 28720 000015BE 268B1D                  	mov	bx,[es:di]
 28721                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 28722                                  					;AN000; check ORDINAL to see if the minimum
 28723 000015C1 263A0F                  	cmp	cl,[es:bx]	
 28724 000015C4 7303                    	jae	short _$P_Fin		;AN000; positional found.
 28725                                  
 28726 000015C6 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 28727                                  _$P_Fin: 				;AN000;
 28728 000015C9 5B                      	pop	bx			;AN000;
 28729 000015CA E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 28730                                  ;---------------------------
 28731                                  _$P_Start:				;AN000;
 28732 000015CD 2E8936[ED14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 28733 000015D2 53                      	push	bx			;AN000; quoted string or file spec.
 28734 000015D3 57                      	push	di			;AN000;
 28735 000015D4 55                      	push	bp			;AN000;
 28736                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 28737                                  	; 02/11/2022
 28738                                  	;lea	bx,[_$P_STRING_BUF]
 28739                                  	; 07/09/2023
 28740 000015D5 BB[F514]                	mov	bx,_$P_STRING_BUF
 28741 000015D8 2EF606[EC14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 28742 000015DE 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 28743                                  
 28744                                  _$P_Pack_Loop:				;AN000;
 28745 000015E0 AC                      	lodsb				;AN000; Pick a operand from buffer
 28746 000015E1 E8F106                  	call	_$P_Chk_Switch		;AN000; Check switch character
 28747 000015E4 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 28748                                  
 28749 000015E6 E86906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 28750 000015E9 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 28751                                  
 28752 000015EB E89906                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 28753 000015EE 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 28754                                  
 28755 000015F0 2EF606[EC14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 28756                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 28757 000015F6 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 28758                                  
 28759 000015F8 E83506                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 28760 000015FB EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 28761                                  
 28762                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 28763 000015FD 2EF606[EC14]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 28764 00001603 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 28765                                  
 28766 00001605 4E                      	dec	si			;AN000; (tm08)
 28767 00001606 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 28768                                  
 28769                                  _$P_PL01:				;AN000;
 28770 00001608 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 28771 0000160B 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 28772 0000160D 7506                    	jne	short _$P_PL00 		;AN000; then
 28773                                  
 28774 0000160F 2E800E[EC14]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 28775                                  _$P_PL00:				;AN000;
 28776 00001615 43                      	inc	bx			;AN000; ready to see next byte
 28777 00001616 E8D506                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 28778 00001619 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 28779                                  
 28780 0000161B AC                      	lodsb				;AN000; if yes, store
 28781 0000161C 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 28782 0000161F 43                      	inc	bx			;AN000; update pointer
 28783 00001620 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 28784                                  
 28785                                  _$P_Pack_End_BY_EOL:			;AN000;
 28786 00001622 4E                      	dec	si			;AN000; backup si pointer
 28787                                  _$P_Pack_End:				;AN000;
 28788 00001623 2E8936[E214]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 28789                                  	; 07/09/2023
 28790                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 28791 00001628 30E4                    	xor	ah,ah ; 0 ; *
 28792 0000162A 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 28793                                  	;
 28794 0000162D 2E891E[F114]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 28795                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 28796 00001632 268B1D                  	mov	bx,[es:di]
 28797                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 28798                                  	; 02/11/2022
 28799                                  	;lea	si,[_$P_STRING_BUF]
 28800                                  	; 07/09/2023
 28801 00001635 BE[F514]                	mov	si,_$P_STRING_BUF
 28802 00001638 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 28803 0000163C 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 28804                                  
 28805 0000163E 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 28806 00001642 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 28807                                  
 28808 00001644 2EF606[EC14]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 28809 0000164A 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 28810                                  
 28811                                  _$P_Positional_Manager:			;AN000; else process as positional
 28812 0000164C 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28813                                  	; 07/09/2023
 28814                                  	;xor	ah,ah			;AN000; ax = maxp
 28815 00001650 2E3906[DE14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 28816 00001655 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 28817                                  
 28818 00001657 2EA1[DE14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 28819 0000165B D1E0                    	shl	ax,1			;AN000; ax = ax*2
 28820 0000165D 43                      	inc	bx			;AC035; add '2' to
 28821 0000165E 43                      	inc	bx			;AC035;  BX reg
 28822                                  					;AN000; now bx points to 1st CONTROL
 28823 0000165F 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 28824 00001661 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 28825 00001664 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 28826 00001667 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28827                                  
 28828                                  _$P_Too_Many_Error:			;AN000;
 28829 00001669 2EC706[E014]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 28830 00001670 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 28831                                  
 28832                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 28833                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 28834                                  get_maxp:
 28835                                  	;mov	al,[es:bx+1]
 28836 00001672 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28837                                  	; 07/09/2023
 28838                                  	; ah=0 ; *
 28839                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 28840 00001676 30ED                    	xor	ch,ch ; **
 28841 00001678 40                      	inc	ax			;AN000;
 28842 00001679 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 28843 0000167B 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 28844 0000167D C3                      	retn
 28845                                  
 28846                                  _$P_SW_Manager:				;AN000;
 28847                                  	; 07/09/2023
 28848                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28849                                  	;xor	ah,ah			;AN000; ax = maxp
 28850                                  	;inc	ax			;AN000;
 28851                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28852                                  	;add	bx,ax			;AN000; now bx points to maxs
 28853 0000167E E8F1FF                  	call	get_maxp ; 07/09/2023
 28854                                  
 28855 00001681 268A0F                  	mov	cl,[es:bx]		;AN000;
 28856                                  	; 07/09/2023
 28857                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 28858                                  	;or	cx,cx			;AN000; at least one switch ?
 28859                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 28860                                  	; 07/07/2023
 28861 00001684 E30F                    	jcxz	_$P_SW_Not_Found	; no
 28862                                  
 28863 00001686 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 28864                                  
 28865                                  _$P_SW_Mgr_Loop: 			;AN000;
 28866 00001687 53                      	push	bx			;AN000;
 28867 00001688 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 28868 0000168B E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 28869 0000168E 5B                      	pop	bx			;AN000;
 28870 0000168F 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 28871                                  
 28872 00001691 43                      	inc	bx			;AC035; add '2' to
 28873 00001692 43                      	inc	bx			;AC035;  BX reg
 28874                                  					;AN000; else bx points to the next CONTROL
 28875 00001693 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 28876                                  
 28877                                  _$P_SW_Not_Found:			;AN000;
 28878 00001695 2EC706[E014]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 28879 0000169C EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 28880                                  
 28881                                  _$P_Key_Manager: 			;AN000;
 28882                                  	; 07/09/2023
 28883                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 28884                                  	;xor	ah,ah			;AN000; ax = maxp
 28885                                  	;inc	ax			;AN000;
 28886                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 28887                                  	;add	bx,ax			;AN000; now bx points to maxs
 28888 0000169E E8D1FF                  	call	get_maxp ; 07/09/2023
 28889                                  	
 28890 000016A1 268A07                  	mov	al,[es:bx]		;AN000;
 28891 000016A4 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 28892 000016A6 D1E0                    	shl	ax,1			;AN000;
 28893 000016A8 40                      	inc	ax			;AN000; ax = ax*2+1
 28894 000016A9 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 28895 000016AB 268A0F                  	mov	cl,[es:bx]		;AN000;
 28896                                  	; 07/09/2023
 28897                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 28898                                  	;or	cx,cx			;AN000; at least one keyword ?
 28899                                  	;jz	short _$P_Key_Not_Found	;AN000;
 28900                                  	; 07/07/2023
 28901 000016AE E305                    	jcxz	_$P_Key_Not_Found	; no
 28902                                  
 28903 000016B0 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 28904                                  
 28905                                  _$P_Key_Mgr_Loop:			;AN000;
 28906                                  	; 07/09/2023
 28907                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 28908                                  	; (always returns with cf=1)
 28909                                  	;push	bx			;AN000;
 28910                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 28911                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 28912                                  	;pop	bx			;AN000;
 28913                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 28914                                  	; 07/09/2023
 28915                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 28916                                  
 28917 000016B1 43                      	inc	bx			;AC035; add '2' to
 28918 000016B2 43                      	inc	bx			;AC035;  BX reg
 28919                                  					;AN000; else bx points to the next CONTROL
 28920 000016B3 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 28921                                  
 28922                                  _$P_Key_Not_Found:			;AN000;
 28923 000016B5 2EC706[E014]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 28924                                  _$P_Return_to_Caller:			;AN000;
 28925 000016BC 5D                      	pop	bp			;AN000;
 28926 000016BD 5F                      	pop	di			;AN000;
 28927 000016BE 5B                      	pop	bx			;AN000;
 28928 000016BF 2E8B0E[DE14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 28929 000016C4 2EA1[E014]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 28930 000016C8 2E8B36[E214]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 28931 000016CD 2E8B16[E414]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 28932 000016D2 2E8A1E[E614]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 28933                                  _$P_Single_Exit: 			;AN000;
 28934 000016D7 F8                      	clc				;AN000;
 28935 000016D8 C3                      	retn				;AN000;
 28936                                  
 28937                                  ;***********************************************************************
 28938                                  ; _$P_Chk_Pos_Control
 28939                                  ;
 28940                                  ; Function: Parse CONTROL block for a positional
 28941                                  ;
 28942                                  ; Input:     ES:BX -> CONTROL block
 28943                                  ;	     cs:SI -> _$P_STRING_BUF
 28944                                  ;
 28945                                  ; Output:    None
 28946                                  ;
 28947                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 28948                                  ;
 28949                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 28950                                  ;***********************************************************************
 28951                                  
 28952                                  _$P_Chk_Pos_Control:
 28953 000016D9 50                      	push	ax			;AN000;
 28954                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 28955 000016DA 268B07                  	mov	ax,[es:bx]
 28956                                  	; 12/12/2022
 28957 000016DD A802                    	test	al,_$P_Repeat
 28958                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 28959 000016DF 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 28960                                  
 28961 000016E1 2EFF06[DE14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 28962                                  _$P_CPC00:				;AN000;
 28963 000016E6 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 28964 000016EA 7517                    	jne	short _$P_CPC01		;AN000;
 28965                                  
 28966                                  	; 12/12/2022
 28967 000016EC A801                    	test	al,_$P_Optional
 28968                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 28969 000016EE 7509                    	jnz	short _$P_CPC02		;AN000;
 28970                                  
 28971 000016F0 2EC706[E014]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 28972 000016F7 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 28973                                  
 28974                                  _$P_CPC02:				;AN000;
 28975 000016F9 50                      	push	ax			;AN000;
 28976                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 28977                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 28978                                  	; 07/07/2023
 28979 000016FA B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 28980 000016FD E89600                  	call	_$P_Fill_Result		;AN000;
 28981 00001700 58                      	pop	ax			;AN000;
 28982 00001701 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 28983                                  
 28984                                  _$P_CPC01:				;AN000;
 28985 00001703 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 28986                                  _$P_CPC_Exit:				;AN000;
 28987 00001706 58                      	pop	ax			;AN000;
 28988 00001707 C3                      	retn				;AN000;
 28989                                  
 28990                                  ;***********************************************************************
 28991                                  ; _$P_Chk_Key_Control
 28992                                  ;
 28993                                  ; Function: Parse CONTROL block for a keyword
 28994                                  ;
 28995                                  ; Input:     ES:BX -> CONTROL block
 28996                                  ;	     cs:SI -> _$P_STRING_BUF
 28997                                  ;
 28998                                  ; Output:    CY = 1 : not match
 28999                                  ;
 29000                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29001                                  ;
 29002                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29003                                  ;***********************************************************************
 29004                                  
 29005                                  ; 07/09/2023
 29006                                  ;_$P_Chk_Key_Control:
 29007                                  ;	stc				;AN000; this logic works when the KeySW
 29008                                  ;	retn				;AN000; is reset.
 29009                                  
 29010                                  ;***********************************************************************
 29011                                  ; _$P_Search_KEYorSW:
 29012                                  ;
 29013                                  ; Function: Seach specified keyword or switch from CONTROL
 29014                                  ;
 29015                                  ; Input:     ES:BX -> CONTROL block
 29016                                  ;	     cs:SI -> _$P_STRING_BUF
 29017                                  ;
 29018                                  ; Output:    CY = 1 : not match
 29019                                  ;
 29020                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 29021                                  ;***********************************************************************
 29022                                  
 29023                                  	; 25/10/2022 - Retro DOS v4.0
 29024                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 29025                                  
 29026                                  _$P_Search_KEYorSW:			;AN000;
 29027 00001708 55                      	push	bp			;AN000;
 29028 00001709 51                      	push	cx			;AN000;
 29029 0000170A 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 29030 0000170E 30ED                    	xor	ch,ch			;AN000; and set it to cx
 29031                                  	;or	cx,cx			;AN000; No synonyms specified ?
 29032                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 29033                                  	; 07/07/2023
 29034 00001710 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 29035                                  
 29036                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 29037                                  	; 25/10/2022
 29038 00001712 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 29039                                  	;lea	bp,[bx+9]
 29040                                  _$P_KEYorSW_Loop:			;AN000;
 29041 00001715 E8B503                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 29042 00001718 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 29043                                  
 29044 0000171A E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 29045 0000171D E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 29046                                  _$P_KEYorSW_Not_Found:			;AN000;
 29047 0000171F F9                      	stc				;AN000; indicate not found in synonym list
 29048 00001720 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 29049                                  
 29050                                  _$P_KEYorSW_Found:			;AN000;
 29051 00001722 2E892E[F314]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 29052 00001727 F8                      	clc				;AN000; indicate found
 29053                                  _$P_KEYorSW_Exit:			;AN000;
 29054 00001728 59                      	pop	cx			;AN000;
 29055 00001729 5D                      	pop	bp			;AN000;
 29056 0000172A C3                      	retn				;AN000;
 29057                                   
 29058                                  ;***********************************************************************
 29059                                  ; _$P_MoveBP_NUL
 29060                                  ;***********************************************************************
 29061                                  
 29062                                  _$P_MoveBP_NUL:
 29063                                  _$P_MBP_Loop:				;AN000;
 29064                                  	; 11/12/2022
 29065 0000172B 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 29066                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29067                                  	; (SYSINIT:18DBh)
 29068                                   	;cmp     byte [es:bp+0],0
 29069 00001730 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 29070                                  
 29071 00001732 45                      	inc	bp			;AN000; until
 29072 00001733 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 29073                                  
 29074                                  _$P_MBP_Exit:				;AN000;
 29075 00001735 45                      	inc	bp			;AN000; bp points to next to NULL
 29076 00001736 C3                      	retn				;AN000;
 29077                                  
 29078                                  ;***********************************************************************
 29079                                  ; _$P_Chk_SW_Control
 29080                                  ;
 29081                                  ; Function: Parse CONTROL block for a switch
 29082                                  ;
 29083                                  ; Input:     ES:BX -> CONTROL block
 29084                                  ;	     cs:SI -> _$P_STRING_BUF
 29085                                  ;
 29086                                  ; Output:    CY = 1 : not match
 29087                                  ;
 29088                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29089                                  ;
 29090                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29091                                  ;***********************************************************************
 29092                                  
 29093                                  _$P_Chk_SW_Control:
 29094                                  
 29095                                  ;IF SwSW				;AN000;(Check if switch is supported)
 29096                                  	;or	byte [cs:_$P_Flags+1],10h
 29097 00001737 2E800E[EC14]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 29098 0000173D E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 29099 00001740 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 29100                                  
 29101                                  	;and	[cs:_$P_Flags+],0EFh
 29102 00001742 2E8026[EC14]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 29103                                  					;AC034; reset the indicator previously set
 29104 00001748 50                      	push	ax			;AN000; 	      /switch:
 29105 00001749 2EA1[EF14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 29106 0000174D 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 29107 0000174F 2E0106[ED14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 29108 00001754 58                      	pop	ax			;AN000;
 29109                                  
 29110 00001755 2E8B36[EF14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 29111 0000175A 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 29112 0000175E 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 29113                                  
 29114 00001760 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 29115 00001765 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 29116                                  
 29117 00001767 2EC706[E014]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 29118 0000176E EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 29119                                  
 29120                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 29121                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 29122 00001770 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 29123 00001774 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 29124                                  
 29125                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 29126                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 29127                                  	;test	word [es:bx],1
 29128                                  	; 12/12/2022
 29129                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 29130 00001776 26F60701                	test	byte [es:bx],_$P_Optional
 29131 0000177A 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 29132                                  
 29133 0000177C 2EC706[E014]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 29134 00001783 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 29135                                  
 29136                                  _$P_CSW00:				;AN000;
 29137 00001785 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 29138 00001788 F8                      	clc				;AN000; indicate match
 29139                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29140                                  	; 12/12/2022
 29141 00001789 C3                      	retn
 29142                                  
 29143                                  _$P_Chk_SW_Err0: 			;AN000;
 29144 0000178A F9                      	stc				;AN000; not found in switch synonym list
 29145                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29146                                  	; 12/12/2022
 29147 0000178B C3                      	retn	
 29148                                  
 29149                                  _$P_Chk_SW_Exit: 			;AN000;
 29150 0000178C 50                      	push	ax			;AN000;
 29151                                  	;mov	al,_$P_String		;AN000;
 29152                                  	;mov	ah,_$P_No_Tag		;AN000;
 29153                                  	; 07/07/2023
 29154 0000178D B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29155 00001790 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 29156 00001793 58                      	pop	ax			;AN000;
 29157 00001794 F8                      	clc				;AN000;
 29158                                  _$P_Chk_SW_Single_Exit:			;AN000;
 29159 00001795 C3                      	retn				;AN000;
 29160                                  ;ELSE					;AN000;(of IF SwSW)
 29161                                  ;	stc				;AN000; this logic works when the SwSW
 29162                                  ;	retn				;AN000; is reset.
 29163                                  
 29164                                  ;***********************************************************************
 29165                                  ; _$P_Fill_Result
 29166                                  ;
 29167                                  ; Function: Fill the result buffer
 29168                                  ;
 29169                                  ; Input:    AH = Item tag
 29170                                  ;	    AL = type
 29171                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 29172                                  ;		  AL = 2: DX has index(offset) into value list
 29173                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 29174                                  ;		  AL = 7: DX has year, CL has month and CH has date
 29175                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 29176                                  ;			  amd CH has hundredths
 29177                                  ;		  AL = else: cs:SI points to returned string buffer
 29178                                  ;	    ES:BX -> CONTROL block
 29179                                  ;
 29180                                  ; Output:   None
 29181                                  ;
 29182                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 29183                                  ;
 29184                                  ; Vars: _$P_DX(W)
 29185                                  ;***********************************************************************
 29186                                  
 29187                                  _$P_Fill_Result:
 29188 00001796 57                      	push	di			;AN000;
 29189 00001797 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 29190                                  					;AN000; di points to result buffer
 29191 0000179B 2E893E[E414]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 29192                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 29193                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 29194                                  	; 07/09/2023
 29195                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 29196 000017A0 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 29197                                  
 29198 000017A3 50                      	push	ax			;AN000;
 29199 000017A4 2EA1[F314]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 29200 000017A8 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 29201                                  					;AN000;   then set it to the result
 29202 000017AC 58                      	pop	ax			;AN000;
 29203                                  _$P_RLT04:				;AN000;
 29204 000017AD 3C01                    	cmp	al,_$P_Number		;AN000; if number
 29205 000017AF 750A                    	jne	short _$P_RLT00		;AN000;
 29206                                  
 29207                                  _$P_RLT02:				;AN000;
 29208 000017B1 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 29209 000017B5 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 29210 000017B9 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 29211                                  
 29212                                  _$P_RLT00:				;AN000;
 29213 000017BB 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 29214 000017BD 7506                    	jne	short _$P_RLT01		;AN000;
 29215                                  
 29216 000017BF 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 29217                                  					;AN000; then store list index
 29218 000017C3 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 29219                                  
 29220                                  _$P_RLT01:				;AN000;
 29221 000017C5 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 29222 000017C7 74E8                    	je	short _$P_RLT02		;AN000;
 29223                                  
 29224 000017C9 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 29225 000017CB 74E4                    	je	short _$P_RLT02		;AN000;
 29226                                  
 29227 000017CD 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 29228 000017CF 7506                    	jne	short _$P_RLT03		;AN000;
 29229                                  
 29230 000017D1 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 29231 000017D5 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 29232                                  
 29233                                  _$P_RLT03:				;AN000;
 29234 000017D7 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 29235 000017D9 750F                    	jne	short _$P_RLT05		;AN000;
 29236                                  
 29237 000017DB 2EA1[ED14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 29238 000017DF 40                      	inc	ax			;AN000; skip left Parentheses
 29239 000017E0 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 29240 000017E4 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 29241 000017E8 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 29242                                  
 29243                                  _$P_RLT05:				;AN000;
 29244                                  ;------------------------  AL = 3, 5, or 9
 29245 000017EA 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 29246                                  					;AN000; store offset of STRING_BUF
 29247 000017EE 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 29248                                  					;AN031; store segment of STRING_BUF
 29249 000017F2 50                      	push	ax			;AN000;
 29250 000017F3 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 29251                                  					;AN000; need CAPS by file table?
 29252 000017F8 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 29253                                  
 29254 000017FA B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 29255 000017FC EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 29256                                  
 29257                                  _$P_RLT_CAP00:				;AN000;
 29258 000017FE 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 29259                                  					;AN000; need CAPS by char table ?
 29260 00001803 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 29261                                  
 29262 00001805 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 29263                                  _$P_RLT_CAP02:				;AN000;
 29264 00001807 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 29265                                  _$P_RLT_CAP01:				;AN000;
 29266 0000180A 58                      	pop	ax			;AN000;
 29267 0000180B 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 29268                                  					;AN000; removing colon at end ?
 29269 00001810 7403                    	jz	short _$P_RLT_Exit	;AN000;
 29270                                  
 29271 00001812 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 29272                                  _$P_RLT_Exit:				;AN000;
 29273 00001815 5F                      	pop	di			;AN000;
 29274 00001816 C3                      	retn				;AN000;
 29275                                  
 29276                                  ;***********************************************************************
 29277                                  ; _$P_Check_Match_Flags
 29278                                  ;
 29279                                  ; Function:  Check the mutch_flags and make the exit code and set the
 29280                                  ;	     result buffer
 29281                                  ;
 29282                                  ;	    Check for types in this order:
 29283                                  ;		Complex
 29284                                  ;		Date
 29285                                  ;		Time
 29286                                  ;		Drive
 29287                                  ;		Filespec
 29288                                  ;		Quoted String
 29289                                  ;		Simple String
 29290                                  ;
 29291                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29292                                  ;	     ES:BX -> CONTROL block
 29293                                  ;
 29294                                  ; Output:    None
 29295                                  ;
 29296                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 29297                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 29298                                  ;	     _$P_Drive_Format
 29299                                  ;***********************************************************************
 29300                                  
 29301                                  	; 25/10/2022 - Retro DOS v4.0
 29302                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 29303                                  
 29304                                  	; 14/04/2024 - Retro DOS v5.0
 29305                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1FC3h)
 29306                                  
 29307                                  	; 12/12/2022
 29308                                  _$P_Check_Match_Flags:
 29309 00001817 2EC606[8315]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 29310                                  					;AN033;AC034;; clear filespec error flag.
 29311 0000181D 50                      	push	ax			;AN000;
 29312                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 29313 0000181E 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 29314 00001821 09C0                    	or	ax,ax			;AC035; test ax for zero
 29315 00001823 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 29316 00001825 50                      	push	ax			;AN000; (tm12)
 29317 00001826 53                      	push	bx			;AN000; (tm12)
 29318 00001827 52                      	push	dx			;AN000; (tm12)
 29319 00001828 57                      	push	di			;AN000; (tm12)
 29320 00001829 2EC706[E014]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 29321                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 29322                                  	;mov	al,_$P_String		;AN000; (tm12)
 29323                                  	; 07/07/2023
 29324 00001830 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29325 00001833 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 29326 00001836 5F                      	pop	di			;AN000; (tm12)
 29327 00001837 5A                      	pop	dx			;AN000; (tm12)
 29328 00001838 5B                      	pop	bx			;AN000; (tm12)
 29329 00001839 58                      	pop	ax			;AN000; (tm12)
 29330                                  	; 12/12/2022
 29331                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 29332                                  	; 12/12/2022
 29333                                  ;_$P_Mat: 				;AN000; (tm12)
 29334                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 29335                                  _$P_Bridge:
 29336 0000183A EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 29337                                  	
 29338                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29339                                  	; (SYSINIT:19F9h)
 29340                                  	; 12/12/2022
 29341                                  	;nop	; db 90h
 29342                                  
 29343                                  ; 12/12/2022
 29344                                  _$P_Mat:
 29345                                  _$P_Match03:				;AN000;
 29346                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 29347                                  	; 07/07/2023
 29348 0000183C F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 29349 0000183F 7412                    	jz	short _$P_Match04	;AN000;
 29350                                  
 29351 00001841 2EC706[E014]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29352 00001848 E81E01                  	call	_$P_Value		;AN000; do process
 29353 0000184B 2E833E[E014]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29354 00001851 7557                    	jne	short _$P_Match_Exit	;AN000;
 29355                                  _$P_Match04:				;AN000;
 29356                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 29357                                  	; 07/07/2023
 29358 00001853 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 29359 00001856 7412                    	jz	short _$P_Match05	;AN000;
 29360                                  
 29361 00001858 2EC706[E014]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29362 0000185F E8E300                  	call	_$P_SValue		;AN000; do process
 29363 00001862 2E833E[E014]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29364 00001868 7540                    	jne	short _$P_Match_Exit	;AN000;
 29365                                  _$P_Match05:				;AN000;
 29366                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 29367                                  	; 07/07/2023
 29368 0000186A F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 29369 0000186D 7415                    	jz	short _$P_Match06	;AN000;
 29370                                  
 29371 0000186F 2EC706[E014]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29372 00001876 E8F202                  	call	_$P_File_Format		;AN000; 1st, call file format
 29373 00001879 E87203                  	call	_$P_Drive_Format	;AN000; check drive format, next
 29374 0000187C 2E833E[E014]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29375 00001882 7526                    	jne	short _$P_Match_Exit	;AN000;
 29376                                  _$P_Match06:				;AN000;
 29377                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 29378                                  	; 07/07/2023
 29379 00001884 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 29380 00001887 7412                    	jz	short _$P_Match07	;AN000;
 29381                                  
 29382 00001889 2EC706[E014]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29383 00001890 E8D802                  	call	_$P_File_Format		;AN000; do process
 29384 00001893 2E833E[E014]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29385 00001899 750F                    	jne	short _$P_Match_Exit	;AN000;
 29386                                  _$P_Match07:				;AN000;
 29387                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 29388                                  	; 07/07/2023
 29389 0000189B F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 29390 0000189E 740A                    	jz	short _$P_Match09	;AN000;
 29391                                  
 29392 000018A0 2EC706[E014]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29393 000018A7 E8BA01                  	call	_$P_Simple_String	;AN000; do process
 29394                                  _$P_Match09:				;AN000;
 29395                                  _$P_Match_Exit:				;AN000;
 29396 000018AA 2E833E[8315]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 29397 000018B0 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29398 000018B2 2E833E[E014]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 29399 000018B8 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29400 000018BA 2EC706[E014]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 29401                                  _$P_Match2_Exit: 			;AN033;
 29402 000018C1 58                      	pop	ax			;AN000;
 29403 000018C2 C3                      	retn				;AN000;
 29404                                  
 29405                                  ;***********************************************************************
 29406                                  ; _$P_Remove_Colon;
 29407                                  ;
 29408                                  ; Function: Remove colon at end
 29409                                  ;
 29410                                  ; Input:    cs:SI points to string buffer to be examineed
 29411                                  ;
 29412                                  ; Output:   None
 29413                                  ;
 29414                                  ; Use:	_$P_Chk_DBCS
 29415                                  ;***********************************************************************
 29416                                  
 29417                                  _$P_Remove_Colon:
 29418 000018C3 50                      	push	ax			;AN000;
 29419 000018C4 56                      	push	si			;AN000;
 29420                                  _$P_RCOL_Loop:				;AN000;
 29421 000018C5 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29422 000018C8 08C0                    	or	al,al			;AN000; end of string ?
 29423 000018CA 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 29424                                  
 29425 000018CC 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 29426 000018CE 750D                    	jne	short _$P_RCOL00	;AN000;
 29427                                  
 29428 000018D0 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 29429 000018D5 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 29430                                  
 29431 000018D7 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 29432 000018DB EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 29433                                  
 29434                                  _$P_RCOL00:				;AN000;
 29435 000018DD E80E04                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 29436 000018E0 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 29437                                  
 29438 000018E2 46                      	inc	si			;AN000; if yes, skip trailing byte
 29439                                  _$P_RCOL01:				;AN000;
 29440 000018E3 46                      	inc	si			;AN000; si points to next byte
 29441 000018E4 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 29442                                  
 29443                                  _$P_RCOL_Exit:				;AN000;
 29444 000018E6 5E                      	pop	si			;AN000;
 29445 000018E7 58                      	pop	ax			;AN000;
 29446 000018E8 C3                      	retn				;AN000;
 29447                                  
 29448                                  ;***********************************************************************
 29449                                  ; _$P_Do_CAPS_String;
 29450                                  ;
 29451                                  ; Function: Perform capitalization along with the file case map table
 29452                                  ;	    or character case map table.
 29453                                  ;
 29454                                  ; Input:    AL = 2 : Use character table
 29455                                  ;	    AL = 4 : Use file table
 29456                                  ;	    cs:SI points to string buffer to be capitalized
 29457                                  ;
 29458                                  ; Output:   None
 29459                                  ;
 29460                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 29461                                  ;***********************************************************************
 29462                                  
 29463                                  _$P_Do_CAPS_String:
 29464 000018E9 56                      	push	si			;AN000;
 29465 000018EA 52                      	push	dx			;AN000;
 29466 000018EB 88C2                    	mov	dl,al			;AN000; save info id
 29467                                  
 29468                                  _$P_DCS_Loop:				;AN000;
 29469 000018ED 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 29470 000018F0 E8FB03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 29471 000018F3 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 29472                                  
 29473 000018F5 08C0                    	or	al,al			;AN000; end of string ?
 29474 000018F7 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 29475                                  
 29476 000018F9 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 29477 000018FC 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 29478 000018FF EB01                    	jmp	short _$P_DCS01		;AN000; process next
 29479                                  _$P_DCS00:				;AN000;
 29480 00001901 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 29481                                  _$P_DCS01:				;AN000;
 29482 00001902 46                      	inc	si			;AN000; si point to next byte
 29483 00001903 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 29484                                  _$P_DCS_Exit:				;AN000;
 29485 00001905 5A                      	pop	dx			;AN000;
 29486 00001906 5E                      	pop	si			;AN000;
 29487 00001907 C3                      	retn
 29488                                  
 29489                                  ;***********************************************************************
 29490                                  ; _$P_Do_CAPS_Char;
 29491                                  ;
 29492                                  ; Function: Perform capitalization along with the file case map table
 29493                                  ;	    or character case map table.
 29494                                  ;
 29495                                  ; Input:    DL = 2 : Use character table
 29496                                  ;	    DL = 4 : Use file table
 29497                                  ;	    AL = character to be capitalized
 29498                                  ;
 29499                                  ; Output:   None
 29500                                  ;
 29501                                  ; Use:	INT 21h /w AH=65h
 29502                                  ;***********************************************************************
 29503                                  
 29504                                  _$P_Do_CAPS_Char:
 29505 00001908 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 29506 0000190A 730B                    	jae	short _$P_DCC_Go	;AN000;
 29507                                  
 29508 0000190C 3C61                    	cmp	al,"a"                  ;AN000; if no,
 29509 0000190E 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 29510                                  
 29511 00001910 3C7A                    	cmp	al,"z"                  ;AN000;
 29512 00001912 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 29513                                  
 29514 00001914 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 29515                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 29516                                  	; 07/07/2023
 29517 00001916 C3                      	retn
 29518                                  
 29519                                  _$P_DCC_Go:				;AN000;
 29520 00001917 53                      	push	bx			;AN000;
 29521 00001918 06                      	push	es			;AN000;
 29522 00001919 57                      	push	di			;AN000;
 29523                                  
 29524                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 29525                                  	;lea	di,[_$P_Char_CAP_Ptr]
 29526                                  	; 07/09/2023
 29527 0000191A BF[7515]                	mov	di,_$P_Char_CAP_Ptr
 29528                                  _$P_DCC00:				;AN000;
 29529 0000191D 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 29530 00001920 7415                    	je	short _$P_DCC01		;AN000; if no,
 29531                                  
 29532                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 29533                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 29534                                  ; call, regardless of what base register is currently be defined as cs.
 29535                                  
 29536 00001922 50                      	push	ax			;AN000; get CAPS table thru DOS call
 29537 00001923 51                      	push	cx			;AN000;
 29538 00001924 52                      	push	dx			;AN000;
 29539                                  
 29540 00001925 0E                      	push	cs			;AC036; pass current base seg into
 29541                                  					;(Note: this used to push CS.  BUG...
 29542 00001926 07                      	pop	es			;AN000;   ES reg, required for
 29543                                  					;get extended country information
 29544                                  	;mov	al,dl ; function	;AN000; upper case table
 29545                                  	; 07/07/2023
 29546 00001927 92                      	xchg	ax,dx
 29547 00001928 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 29548 0000192A BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 29549 0000192D B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 29550                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 29551                                  	; 07/07/2023
 29552 00001930 89DA                    	mov	dx,bx ; 0FFFFh
 29553                                  					;DI already set to point to buffer
 29554 00001932 CD21                    	int	21h			;AN000; es:di point to buffer that
 29555                                  					;now has been filled in with info
 29556 00001934 5A                      	pop	dx			;AN000;
 29557 00001935 59                      	pop	cx			;AN000;
 29558 00001936 58                      	pop	ax			;AN000;
 29559                                  
 29560                                  _$P_DCC01:				;AN000;
 29561                                  
 29562                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 29563                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 29564                                  ; regardless of which base reg is currently the cs reg.
 29565                                  
 29566                                  	; 14/04/2024
 29567                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 29568                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 29569                                  	; 07/07/2023
 29570 00001937 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 29571 0000193B 43                      	inc	bx			;AC035; add '2' to
 29572 0000193C 43                      	inc	bx			;AC035;  BX reg
 29573                                  					;AN000; skip length field
 29574 0000193D 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 29575                                  	;xlat	es:[bx] 		;AN000; perform case map
 29576 0000193F 26                      	es
 29577 00001940 D7                      	xlat
 29578 00001941 5F                      	pop	di			;AN000;
 29579 00001942 07                      	pop	es			;AN000;
 29580 00001943 5B                      	pop	bx			;AN000;
 29581                                  _$P_CAPS_Ret:				;AN000;
 29582 00001944 C3                      	retn				;AN000;
 29583                                  
 29584                                  ;***********************************************************************
 29585                                  ; _$P_Value / _$P_SValue
 29586                                  ;
 29587                                  ; Function:  Make 32bit value from cs:SI and see value list
 29588                                  ;	     and make result buffer.
 29589                                  ;	     _$P_SValue is an entry point for the signed value
 29590                                  ;	     and this will simply call _$P_Value after the handling
 29591                                  ;	     of the sign character, "+" or "-"
 29592                                  ;
 29593                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29594                                  ;	     ES:BX -> CONTROL block
 29595                                  ;
 29596                                  ; Output:    None
 29597                                  ;
 29598                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 29599                                  ;
 29600                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 29601                                  ;***********************************************************************
 29602                                  
 29603                                  	; 26/10/2022 - Retro DOS v4.0
 29604                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 29605                                  
 29606                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29607                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 29608                                  _$P_SValue:				;AN000; when signed value here
 29609 00001945 50                      	push	ax			;AN000;
 29610 00001946 2E800E[EC14]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 29611 0000194C 2E8026[EC14]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 29612                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 29613 00001952 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 29614 00001955 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 29615 00001957 740A                    	je	short _$P_SVal00	;AN000;
 29616                                  
 29617 00001959 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 29618 0000195B 7507                    	jne	short _$P_Sval01	;AN000; else
 29619                                  
 29620 0000195D 2E800E[EC14]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 29621                                  _$P_SVal00:				;AN000;
 29622 00001963 46                      	inc	si			;AN000; skip sign char
 29623                                  _$P_Sval01:				;AN000;
 29624 00001964 E80200                  	call	_$P_Value		;AN000; and process value
 29625 00001967 58                      	pop	ax			;AN000;
 29626 00001968 C3                      	retn
 29627                                  
 29628                                  ;***********************************************************************
 29629                                  
 29630                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29631                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 29632                                  
 29633                                  	; 26/10/2022
 29634                                  _$P_Value:				;AN000;
 29635 00001969 50                      	push	ax			;AN000;
 29636 0000196A 51                      	push	cx			;AN000;
 29637 0000196B 52                      	push	dx			;AN000;
 29638 0000196C 56                      	push	si			;AN000;
 29639 0000196D 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 29640 0000196F 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 29641 00001971 53                      	push	bx			;AN000; save control pointer
 29642                                  _$P_Value_Loop:				;AN000;
 29643 00001972 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29644 00001975 08C0                    	or	al,al			;AN000; end of line ?
 29645 00001977 7438                    	jz	short _$P_Value00	;AN000;
 29646                                  
 29647 00001979 E8DC00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 29648 0000197C 722F                    	jc	short _$P_Value_Err0	;AN000;
 29649                                  
 29650 0000197E 30E4                    	xor	ah,ah			;AN000;
 29651 00001980 89C5                    	mov	bp,ax			;AN000; save binary number
 29652                                  
 29653                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29654                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 29655                                  ;				Erdogan Tan - July 2023
 29656                                  %if 0
 29657                                  	shl	dx,1			;AN000; to have 2*x
 29658                                  	rcl	cx,1			;AN000; shift left w/ carry
 29659                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29660                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29661                                  
 29662                                  	mov	bx,dx			;AN000; save low(2*x)
 29663                                  	mov	ax,cx			;AN000; save high(2*x)
 29664                                  	shl	dx,1			;AN000; to have 4*x
 29665                                  	rcl	cx,1			;AN000; shift left w/ carry
 29666                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29667                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29668                                  
 29669                                  	shl	dx,1			;AN000; to have 8*x
 29670                                  	rcl	cx,1			;AN000; shift left w/ carry
 29671                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29672                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29673                                  
 29674                                  	add	dx,bx			;AN000; now have 10*x
 29675                                  	adc	cx,ax			;AN000; 32bit ADD
 29676                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29677                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29678                                  
 29679                                  	add	dx,bp			;AN000; Add the current one degree decimal
 29680                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 29681                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 29682                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 29683                                  
 29684                                  	inc	si			;AN000; update pointer
 29685                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 29686                                  ;_$P_Value_Err0:
 29687                                  %endif
 29688                                  ;****
 29689                                  %if 1
 29690                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29691                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 29692                                  
 29693                                  	; 14/04/2024 - Retro DOS v5.0
 29694                                  	;xor	ah,ah
 29695                                  	;mov	bp,ax			; save binary number
 29696                                  	
 29697 00001982 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29698 00001985 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 29699 00001987 89C8                    	mov	ax,cx
 29700 00001989 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29701 0000198C E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 29702 0000198F 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 29703 00001991 11C1                    	adc	cx,ax
 29704 00001993 E80F00                  	call	_$P_Value_Chk_Add_OVF
 29705 00001996 01EA                    	add	dx,bp			; Add the current one degree decimal
 29706                                  					; if carry, add 1 to high 16bit
 29707 00001998 83D100                  	adc	cx,0
 29708 0000199B E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 29709                                  					; then error, exit (without return here)
 29710 0000199E 46                      	inc	si			; update pointer
 29711 0000199F EBD1                    	jmp	short _$P_Value_Loop
 29712                                  
 29713                                  _$P_Value_2x_OVF:
 29714 000019A1 D1E2                    	shl	dx,1 			; to have 2*x
 29715 000019A3 D1D1                    	rcl	cx,1			; shift left w/ carry
 29716                                  _$P_Value_Chk_Add_OVF:
 29717 000019A5 E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 29718 000019A8 7201                    	jc	short _$P_Value_OVF
 29719 000019AA C3                      	retn
 29720                                  _$P_Value_OVF:
 29721 000019AB 44                      	inc	sp 			; skip "call" return address to the caller
 29722 000019AC 44                      	inc	sp
 29723                                  
 29724                                  ;_$P_Value_Err0:	
 29725                                  %endif
 29726                                  ;****
 29727                                  
 29728                                  _$P_Value_Err0:				;AN000;
 29729 000019AD 5B                      	pop	bx			;AN000;
 29730 000019AE E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 29731                                  ;
 29732                                  _$P_Value00:				;AN000;
 29733 000019B1 5B                      	pop	bx			;AN000; restore control pointer
 29734 000019B2 2EF606[EC14]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 29735 000019B8 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 29736                                  
 29737 000019BA F7D1                    	not	cx			;AN000; +
 29738 000019BC F7D2                    	not	dx			;AN000; |- Make 2's complement
 29739 000019BE 83C201                  	add	dx,1			;AN000; |
 29740 000019C1 83D100                  	adc	cx,0			;AN000; +
 29741                                  
 29742                                  _$P_Value01:				;AN000; / nval = 0
 29743 000019C4 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 29744 000019C8 268A04                  	mov	al,[es:si]		;AN000; get nval
 29745                                  	; 07/09/2023
 29746                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 29747                                  	;;*jne	short _$P_Value02	;AN000;
 29748                                  	;;* 07/07/2023
 29749                                  	;je	short _$P_Value05
 29750                                  	; 07/09/2023
 29751 000019CB 08C0                    	or	al,al
 29752 000019CD 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 29753                                  
 29754                                  	;mov	al,_$P_Number		;AN000; Set type
 29755                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29756                                  	; 07/07/2023
 29757                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29758                                  	;*jmp	short _$P_Value_Exit	;AN000;
 29759                                  
 29760                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 29761                                  	; (SYSINIT:1BA5h)
 29762                                  	; 12/12/2022
 29763                                  	;nop	; db  90h
 29764                                  
 29765                                  _$P_Value02:				;AN000; / nval = 1
 29766                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 29767                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 29768                                  ;(tm07) jne	short _$P_Value03	;AN000;
 29769                                  
 29770 000019CF 46                      	inc	si			;AN000;
 29771 000019D0 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 29772                                  	
 29773                                  	; 07/09/2023
 29774                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 29775                                  	;je	short _$P_Value03	;AN000; (tm07)
 29776 000019D3 08C0                    	or	al,al
 29777 000019D5 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 29778                                  
 29779 000019D7 46                      	inc	si			;AN000; si points to 1st item_tag
 29780                                  _$P_Val02_Loop:				;AN000;
 29781 000019D8 2EF606[EC14]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 29782 000019DE 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 29783                                  
 29784 000019E0 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 29785 000019E4 7234                    	jb	short _$P_Val02_Next	;AN000;
 29786 000019E6 7706                    	ja	short _$P_Val_In	;AN000;
 29787                                  
 29788 000019E8 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 29789 000019EC 722C                    	jb	short _$P_Val02_Next	;AN000;
 29790                                  
 29791                                  _$P_Val_In:				;AN000;
 29792 000019EE 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 29793 000019F2 7726                    	ja	short _$P_Val02_Next	;AN000;
 29794 000019F4 7237                    	jb	short _$P_Val_Found	;AN000;
 29795                                  
 29796 000019F6 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 29797 000019FA 771E                    	ja	short _$P_Val02_Next	;AN000;
 29798                                  
 29799 000019FC EB2F                    	jmp	short _$P_Val_Found	;AN000;
 29800                                  
 29801                                  _$P_Val02_Sign:				;AN000;
 29802 000019FE 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 29803 00001A02 7C16                    	jl	short _$P_Val02_Next	;AN000;
 29804 00001A04 7F06                    	jg	short _$P_SVal_In	;AN000;
 29805                                  
 29806 00001A06 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 29807 00001A0A 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 29808                                  
 29809                                  _$P_SVal_In:				;AN000;
 29810 00001A0C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 29811 00001A10 7F08                    	jg	short _$P_Val02_Next	;AN000;
 29812                                  
 29813 00001A12 7C19                    	jl	short _$P_Val_Found	;AN000;
 29814                                  
 29815 00001A14 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 29816                                  	;jg	short _$P_Val02_Next	;AN000;
 29817                                  	;jmp	short _$P_Val_Found	;AN000;
 29818                                  	; 07/07/2023
 29819 00001A18 7E13                    	jng	short _$P_Val_Found
 29820                                  
 29821                                  _$P_Val02_Next:				;AN000;
 29822 00001A1A 83C609                  	add	si,_$P_Len_Range 	;AN000;
 29823 00001A1D FEC8                    	dec	al			;AN000; loop nrng times in AL
 29824 00001A1F 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 29825                                  					; / Not found
 29826 00001A21 2EC706[E014]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 29827                                  	;mov	al,_$P_Number		;AN000;
 29828                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29829                                  _$P_Value05:		;* 07/07/2023
 29830                                  	; 07/07/2023
 29831 00001A28 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 29832 00001A2B EB11                    	jmp	short _$P_Value_Exit	;AN000;
 29833                                  
 29834                                  _$P_Val_Found:				;AN000;
 29835 00001A2D B001                    	mov	al,_$P_Number		;AN000;
 29836 00001A2F 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 29837 00001A32 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 29838                                  
 29839                                  _$P_Value03:				;AN000; / nval = 2
 29840                                  
 29841                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 29842                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 29843                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 29844                                  ;(tm07) inc	si			;AN000;
 29845                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 29846                                  ;	mov	ah,$P_Len_Range 	;AN000;
 29847                                  ;	mul	ah			;AN000;  Skip nrng field
 29848                                  ;	inc	ax			;AN000;
 29849                                  ;	add	si,ax			;AN000; si points to nnval
 29850                                  ;	mov	al,es:[si]		;AN000; get nnval
 29851                                  ;	inc	si			;AN000; si points to 1st item_tag
 29852                                  ;$P_Val03_Loop:				;AN000;
 29853                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 29854                                  ;	jne	$P_Val03_Next		;AN000;
 29855                                  ;
 29856                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 29857                                  ;	je	$P_Val_Found		;AN000;
 29858                                  ;
 29859                                  ;$P_Val03_Next:				;AN000;
 29860                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 29861                                  ;	dec	al			;AN000; loop nval times in AL
 29862                                  ;	jne	$P_Val03_Loop		;AN000;
 29863                                  ;					;AN000; / Not found
 29864                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 29865                                  ;	mov	al,$P_Number		;AN000;
 29866                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 29867                                  ;	jmp	short $P_Value_Exit	;AN000;
 29868                                  ;
 29869                                  ;ENDIF					;AN000;(of Val2SW)
 29870                                  ;$P_Value04:
 29871                                  
 29872                                  _$P_Value_Err:				;AN000;
 29873 00001A34 2EC706[E014]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 29874                                  	;mov	al,_$P_String		;AN000; Set type
 29875                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29876                                  	; 07/09/2023
 29877                                  	; 07/07/2023
 29878 00001A3B B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29879                                  _$P_Value_Exit:				;AN000;
 29880 00001A3E E855FD                  	call	_$P_Fill_Result		;AN000;
 29881 00001A41 5E                      	pop	si			;AN000;
 29882 00001A42 5A                      	pop	dx			;AN000;
 29883 00001A43 59                      	pop	cx			;AN000;
 29884 00001A44 58                      	pop	ax			;AN000;
 29885 00001A45 C3                      	retn				;AN000;
 29886                                  
 29887                                  ; 28/03/2019 - Retro DOS v4.0
 29888                                  
 29889                                  ;***********************************************************************
 29890                                  ; _$P_Check_OVF
 29891                                  ;
 29892                                  ; Function:  Check if overflow is occurred with consideration of
 29893                                  ;	     signed or un-signed numeric value
 29894                                  ;
 29895                                  ; Input:     Flag register
 29896                                  ;
 29897                                  ; Output:    CY = 1  :	Overflow
 29898                                  ;
 29899                                  ; Vars:     _$P_Flags(R)
 29900                                  ;***********************************************************************
 29901                                  
 29902                                  	; 26/10/2022
 29903                                  _$P_Check_OVF:
 29904 00001A46 9C                      	pushf				;AN000;
 29905 00001A47 2EF606[EC14]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 29906 00001A4D 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 29907                                  
 29908 00001A4F 9D                      	popf				;AN000; by the CY bit
 29909 00001A50 C3                      	retn				;AN000;
 29910                                  
 29911                                  _$P_COVF:				;AN000;
 29912 00001A51 9D                      	popf				;AN000; else,
 29913 00001A52 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 29914                                  
 29915 00001A54 F8                      	clc				;AN000; indicate it with CY bit
 29916 00001A55 C3                      	retn				;AN000; CY=0 means no overflow
 29917                                  
 29918                                  _$P_COVF00:				;AN000;
 29919 00001A56 F9                      	stc				;AN000; and CY=1 means overflow
 29920 00001A57 C3                      	retn				;AN000;
 29921                                  
 29922                                  ;***********************************************************************
 29923                                  ; _$P_0099;
 29924                                  ;
 29925                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 29926                                  ;
 29927                                  ; Input:     AL = character code
 29928                                  ;
 29929                                  ; Output:    CY = 1 : AL is not number
 29930                                  ;	     CY = 0 : AL contains binary value
 29931                                  ;***********************************************************************
 29932                                  
 29933                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29934                                  %if 0
 29935                                  _$P_0099:
 29936                                  	cmp	al,"0"                  ;AN000;
 29937                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29938                                  	; 12/12/2022
 29939                                  	jb	short _$P_0099Err2  ; cf=1
 29940                                  
 29941                                  	cmp	al,"9"                  ;AN000;
 29942                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 29943                                  
 29944                                  	sub	al,"0"                  ;AN000; make char -> bin
 29945                                  	; 12/12/2022
 29946                                  	; cf=0	
 29947                                  	;clc				;AN000; indicate no error
 29948                                  	retn				;AN000;
 29949                                  
 29950                                  _$P_0099Err:				;AN000;
 29951                                  	stc				;AN000; indicate error
 29952                                  _$P_0099Err2: ; 12/12/2022	
 29953                                  	retn				;AN000;
 29954                                  %endif
 29955                                  
 29956                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29957                                  %if 1
 29958                                  _$P_0099:
 29959 00001A58 3C30                    	cmp	al,"0"                  ; cmp al,30h
 29960 00001A5A 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 29961 00001A5C 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 29962 00001A5E F5                      	cmc				; cf=0 -> cf=1
 29963 00001A5F 7202                    	jb	short _$P_0099Err
 29964 00001A61 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 29965                                  	; cf=0
 29966                                  _$P_0099Err:	; cf=1
 29967 00001A63 C3                      	retn
 29968                                  %endif
 29969                                  
 29970                                  ;***********************************************************************
 29971                                  ; _$P_Simple_String
 29972                                  ;
 29973                                  ; Function:  See value list for the simple string
 29974                                  ;	     and make result buffer.
 29975                                  ;
 29976                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29977                                  ;	     ES:BX -> CONTROL block
 29978                                  ;
 29979                                  ; Output:    None
 29980                                  ;
 29981                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 29982                                  ;
 29983                                  ; Vars: _$P_RC(W)
 29984                                  ;***********************************************************************
 29985                                  
 29986                                  _$P_Simple_String:
 29987 00001A64 50                      	push	ax			;AN000;
 29988 00001A65 53                      	push	bx			;AN000;
 29989 00001A66 52                      	push	dx			;AN000;
 29990 00001A67 57                      	push	di			;AN000;
 29991 00001A68 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 29992 00001A6C 268A05                  	mov	al,[es:di]		;AN000; get nval
 29993 00001A6F 08C0                    	or	al,al			;AN000; no value list ?
 29994 00001A71 7504                    	jnz	short _$P_Sim00		;AN000; then
 29995                                  
 29996 00001A73 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 29997 00001A75 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 29998                                  
 29999                                  _$P_Sim00:				;AN000;
 30000                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 30001 00001A77 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 30002 00001A79 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 30003                                  
 30004 00001A7B 47                      	inc	di			;AN000;
 30005 00001A7C 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 30006 00001A7F B409                    	mov	ah,_$P_Len_Range 	;AN000;
 30007 00001A81 F6E4                    	mul	ah			;AN000; Skip nrng field
 30008 00001A83 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 30009 00001A84 01C7                    	add	di,ax			;AN000; di points to nnval
 30010 00001A86 268A05                  	mov	al,[es:di]		;AN000; get nnval
 30011 00001A89 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 30012 00001A8B F6E4                    	mul	ah			;AN000; Skip nnval field
 30013 00001A8D 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 30014 00001A8E 01C7                    	add	di,ax			;AN000; di points to nstrval
 30015 00001A90 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 30016 00001A93 47                      	inc	di			;AC035; add '2' to
 30017 00001A94 47                      	inc	di			;AC035;  DI reg
 30018                                  					;AN000; di points to 1st string in list
 30019                                  _$P_Sim_Loop:				;AN000;
 30020 00001A95 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 30021 00001A98 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 30022 00001A9B 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 30023                                  
 30024 00001A9D 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 30025 00001AA0 FEC8                    	dec	al			;AN000; loop nstval times in AL
 30026 00001AA2 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 30027                                  					;AN000; / Not found
 30028 00001AA4 2EC706[E014]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 30029 00001AAB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30030 00001AAD EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 30031                                  
 30032                                  _$P_Sim_Found:				;AN000;
 30033 00001AAF 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 30034 00001AB3 B002                    	mov	al,_$P_List_Idx		;AN000;
 30035 00001AB5 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 30036 00001AB8 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 30037                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 30038                                  _$P_Sim01:				;AN000;
 30039 00001ABA 2EC706[E014]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30040 00001AC1 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30041                                  _$P_Sim_Exit:				;AN000;
 30042 00001AC3 B003                    	mov	al,_$P_String		;AN000; Set type
 30043                                  _$P_Sim_Exit0:				;AN000;
 30044 00001AC5 E8CEFC                  	call	_$P_Fill_Result		;AN000;
 30045 00001AC8 5F                      	pop	di			;AN000;
 30046 00001AC9 5A                      	pop	dx			;AN000;
 30047 00001ACA 5B                      	pop	bx			;AN000;
 30048 00001ACB 58                      	pop	ax			;AN000;
 30049 00001ACC C3                      	retn				;AN000;
 30050                                  
 30051                                  ;***********************************************************************
 30052                                  ; _$P_String_Comp:
 30053                                  ;
 30054                                  ; Function:  Compare two string
 30055                                  ;
 30056                                  ; Input:     cs:SI -> 1st string
 30057                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30058                                  ;	     ES:BX -> CONTROL block
 30059                                  ;
 30060                                  ; Output:    CY = 1 if not match
 30061                                  ;
 30062                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 30063                                  ;
 30064                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 30065                                  ;***********************************************************************
 30066                                  
 30067                                  _$P_String_Comp:
 30068 00001ACD 50                      	push	ax			;AN000;
 30069 00001ACE 55                      	push	bp			;AN000;
 30070 00001ACF 52                      	push	dx			;AN000;
 30071 00001AD0 56                      	push	si			;AN000;
 30072 00001AD1 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 30073                                  _$P_SCOM_Loop:				;AN000;
 30074 00001AD3 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30075 00001AD6 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 30076 00001AD9 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 30077                                  
 30078 00001ADB E82AFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 30079                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 30080 00001ADE 2EF606[EC14]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 30081 00001AE4 740D                    	jz	short _$P_SCOM04	;AN000;
 30082                                  
 30083 00001AE6 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 30084 00001AE8 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 30085                                  
 30086 00001AEA 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 30087 00001AEF 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 30088                                  
 30089 00001AF1 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 30090                                  
 30091                                  _$P_SCOM04:				;AN000;
 30092 00001AF3 2EF606[EC14]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 30093 00001AF9 740E                    	jz	short _$P_SCOM03	;AN000;
 30094                                  
 30095 00001AFB 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 30096 00001AFD 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 30097                                  
 30098                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30099                                  	;cmp	byte [es:bp+0],_$P_NULL
 30100                                  	; 11/12/2022
 30101 00001AFF 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 30102 00001B04 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 30103                                  
 30104                                  _$P_SCOM05:				;AN000;   found a match
 30105 00001B06 46                      	inc	si			;AN000; si points to just after "=" or ":"
 30106 00001B07 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 30107                                  
 30108                                  _$P_SCOM03:				;AN000;
 30109                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 30110                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30111                                  	;cmp	al,[es:bp+0]
 30112                                  	; 11/12/2022
 30113 00001B09 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 30114 00001B0D 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 30115                                  
 30116 00001B0F 08C0                    	or	al,al			;AN000; end of line
 30117 00001B11 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 30118                                  
 30119                                  	; 12/12/2022
 30120                                  	;inc	si			;AN000; update operand pointer
 30121                                  	;inc	bp			;AN000;    and synonym pointer
 30122                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30123 00001B13 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 30124                                  
 30125                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 30126                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30127                                  	;cmp	al,[es:bp+0]
 30128                                  	; 11/12/2022
 30129 00001B15 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 30130 00001B19 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 30131                                  
 30132 00001B1B 46                      	inc	si			;AN000; else, load next byte
 30133 00001B1C 2E8A04                  	mov	al,[cs:si]		;AN000; and
 30134 00001B1F 45                      	inc	bp			;AN000;
 30135                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30136                                  	;cmp	al,[es:bp+0]
 30137                                  	; 11/12/2022
 30138 00001B20 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 30139 00001B24 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 30140                                  
 30141                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30142                                  	; 12/12/2022
 30143                                  _$P_SCOM01:
 30144 00001B26 46                      	inc	si			;AN000; else update operand pointer
 30145 00001B27 45                      	inc	bp			;AN000; 		and synonym pointer
 30146                                  ;_$P_SCOM01:				;AN000;
 30147 00001B28 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 30148                                  
 30149                                  _$P_SCOM_Differ0:			;AN000;
 30150                                  ;IF SwSW				;AN000;(tm10)
 30151 00001B2A 2EF606[EC14]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 30152 00001B30 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30153                                  
 30154                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30155                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 30156                                  	; 12/12/2022
 30157 00001B32 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 30158 00001B37 7407                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30159                                  
 30160                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30161                                  	;cmp	byte [es:bp+0],_$P_NULL
 30162                                  	; 11/12/2022
 30163 00001B39 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 30164                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 30165 00001B3E 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 30166                                  
 30167                                  _$P_not_applicable:			;AN000;(tm10)
 30168                                  ;ENDIF					;AN000;(tm10)
 30169                                  
 30170                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30171                                  					;AN000; ignore colon option specified ?
 30172                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 30173                                  	; 12/12/2022
 30174 00001B40 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30175                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30176                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 30177 00001B44 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 30178                                  
 30179 00001B46 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 30180 00001B48 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 30181                                  
 30182                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30183                                  	;cmp	byte [es:bp+0],_$P_NULL
 30184                                  	; 11/12/2022
 30185 00001B4A 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 30186 00001B4F 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 30187                                  
 30188 00001B51 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 30189                                  
 30190                                  _$P_SCOM02:				;AN000;
 30191 00001B53 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 30192 00001B55 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 30193                                  
 30194                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30195                                  	;cmp	byte [es:bp+0],_$P_Colon
 30196                                  	; 11/12/2022
 30197 00001B57 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 30198 00001B5C 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 30199                                  
 30200                                  _$P_SCOM_Differ: 			;AN000;
 30201 00001B5E F9                      	stc				;AN000; indicate not found
 30202 00001B5F EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 30203                                  
 30204                                  _$P_SCOM_Same:				;AN000;
 30205                                  	; 12/12/2022
 30206                                  	; cf=0
 30207 00001B61 2E8936[EF14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 30208                                  	; 12/12/2022
 30209                                  	;clc				;AN000; indicate found
 30210                                  _$P_SCOM_Exit:				;AN000;
 30211 00001B66 5E                      	pop	si			;AN000;
 30212 00001B67 5A                      	pop	dx			;AN000;
 30213 00001B68 5D                      	pop	bp			;AN000;
 30214 00001B69 58                      	pop	ax			;AN000;
 30215 00001B6A C3                      	retn
 30216                                  
 30217                                  ; 30/03/2019
 30218                                  
 30219                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 30220                                  
 30221                                  ;***********************************************************************
 30222                                  ; _$P_File_Format;
 30223                                  ;
 30224                                  ; Function:  Check if the input string is valid file spec format.
 30225                                  ;	     And set the result buffer.
 30226                                  ;
 30227                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30228                                  ;	     ES:BX -> CONTROL block
 30229                                  ;
 30230                                  ; Output:    None
 30231                                  ;
 30232                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 30233                                  ;
 30234                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 30235                                  ;	_$P_SaveSI_Cmpx(R)
 30236                                  ;***********************************************************************
 30237                                  
 30238                                  _$P_File_Format:
 30239 00001B6B 50                      	push	ax			;AN000;
 30240 00001B6C 57                      	push	di			;AN000;
 30241 00001B6D 56                      	push	si			;AN000;
 30242 00001B6E 2E8B3E[ED14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 30243                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 30244 00001B73 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 30245 00001B76 08C0                    	or	al,al			;AN000; end of line ?
 30246 00001B78 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 30247                                  
 30248 00001B7A E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 30249 00001B7D 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 30250                                  
 30251 00001B7F 2EC606[8315]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 30252                                  					;AN033;AC034;; set error flag- bad char.
 30253 00001B85 5E                      	pop	si			;AN033;
 30254 00001B86 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 30255 00001B8A 5F                      	pop	di			;AN033;
 30256 00001B8B EB3E                    	jmp	short _$P_FileF02	;AN033;
 30257                                  
 30258                                  _$P_FileF_Err:				;AN000;
 30259 00001B8D 5E                      	pop	si			;AN000;
 30260 00001B8E 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 30261 00001B92 5F                      	pop	di			;AN000;
 30262                                  
 30263                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 30264                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 30265                                  	; 12/12/2022
 30266 00001B93 26F60701                	test	byte [es:bx],_$P_Optional
 30267                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30268                                  	;test	word [es:bx],_$P_Optional
 30269 00001B97 7532                    	jnz	short _$P_FileF02	;AN000;
 30270                                  
 30271 00001B99 2EC706[E014]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 30272 00001BA0 EB29                    	jmp	short _$P_FileF02	;AN000;
 30273                                  
 30274                                  _$P_FileF03:				;AN000;
 30275 00001BA2 58                      	pop	ax			;AN000; discard save si
 30276 00001BA3 56                      	push	si			;AN000; save new si
 30277                                  _$P_FileF_Loop1: 			;AN000;
 30278 00001BA4 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 30279 00001BA7 08C0                    	or	al,al			;AN000; end of line ?
 30280 00001BA9 741E                    	jz	short _$P_FileF_RLT	;AN000;
 30281                                  
 30282 00001BAB E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 30283 00001BAE 740B                    	je	short _$P_FileF00	;AN000;
 30284                                  
 30285 00001BB0 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 30286 00001BB3 7302                    	jnc	short _$P_FileF01	;AN000;
 30287 00001BB5 47                      	inc	di			;AN000; if yes, skip next byte
 30288 00001BB6 46                      	inc	si			;AN000;
 30289                                  _$P_FileF01:				;AN000;
 30290 00001BB7 47                      	inc	di			;AN000;
 30291 00001BB8 46                      	inc	si			;AN000;
 30292 00001BB9 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 30293                                  ;
 30294                                  _$P_FileF00:				;AN000;
 30295 00001BBB 2EA2[E614]              	mov	[cs:_$P_Terminator],al	;AC034;
 30296 00001BBF 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 30297 00001BC3 47                      	inc	di			;AN000;
 30298 00001BC4 2E893E[E214]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 30299                                  _$P_FileF_RLT:				;AN000;
 30300 00001BC9 5E                      	pop	si			;AN000;
 30301 00001BCA 5F                      	pop	di			;AN000;
 30302                                  _$P_FileF02:				;AN000;
 30303 00001BCB 58                      	pop	ax			;AN000; (tm14)
 30304                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 30305                                  	; 08/07/2023
 30306 00001BCC F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 30307 00001BCF 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 30308                                  
 30309 00001BD1 50                      	push	ax			;AN000; (tm14)
 30310                                  	;mov	ah,_$P_No_Tag		;AN000; set
 30311                                  	;mov	al,_$P_File_Spec 	;AN000; result
 30312                                  	; 08/07/2023
 30313 00001BD2 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 30314                                  					      ; set result
 30315 00001BD5 E8BEFB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 30316 00001BD8 58                      	pop	ax			;AN000;
 30317                                  
 30318                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 30319 00001BD9 C3                      	retn				;AN000;
 30320                                  
 30321                                  ;***********************************************************************
 30322                                  ; _$P_FileSp_Chk
 30323                                  ;
 30324                                  ; Function:  Check if the input byte is one of file special characters
 30325                                  ;
 30326                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30327                                  ;	     AL = character code to be examineed
 30328                                  ;
 30329                                  ; Output:    ZF = 1 , AL is one of special characters
 30330                                  ;***********************************************************************
 30331                                  
 30332                                  _$P_FileSp_Chk:
 30333 00001BDA 53                      	push	bx			;AN000;
 30334 00001BDB 51                      	push	cx			;AN000;
 30335                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 30336                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 30337                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 30338                                  	; 07/09/2023
 30339 00001BDC BB[7A15]                	mov	bx,_$P_FileSp_Char
 30340 00001BDF B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 30341                                  _$P_FileSp_Loop: 			;AN000;
 30342 00001BE2 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 30343 00001BE5 7404                    	je	short _$P_FileSp_Exit	;AN000;
 30344                                  
 30345 00001BE7 43                      	inc	bx			;AN000;
 30346 00001BE8 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 30347                                  
 30348 00001BEA 41                      	inc	cx			;AN000; reset ZF
 30349                                  _$P_FileSp_Exit: 			;AN000;
 30350 00001BEB 59                      	pop	cx			;AN000;
 30351 00001BEC 5B                      	pop	bx			;AN000;
 30352 00001BED C3                      	retn
 30353                                  
 30354                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 30355                                  
 30356                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 30357                                  
 30358                                  ;***********************************************************************
 30359                                  ; _$P_Drive_Format;
 30360                                  ;
 30361                                  ; Function:  Check if the input string is valid drive only format.
 30362                                  ;	     And set the result buffer.
 30363                                  ;
 30364                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30365                                  ;	     ES:BX -> CONTROL block
 30366                                  ;
 30367                                  ; Output:    None
 30368                                  ;
 30369                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 30370                                  ;
 30371                                  ; Vars: _$P_RC(W)
 30372                                  ;***********************************************************************
 30373                                  
 30374                                  _$P_Drive_Format:
 30375 00001BEE 50                      	push	ax			;AN000;
 30376 00001BEF 52                      	push	dx			;AN000;
 30377 00001BF0 2E8A04                  	mov	al,[cs:si]		;AN000;
 30378 00001BF3 08C0                    	or	al,al			;AN000; if null string
 30379 00001BF5 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 30380                                  
 30381 00001BF7 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 30382 00001BFA 722A                    	jc	short _$P_Drv_Err	;AN000;
 30383                                  
 30384 00001BFC 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 30385 00001C01 740D                    	je	short _$P_DrvF00	;AN000;
 30386                                  
 30387                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30388                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 30389                                  	; 12/12/2022
 30390 00001C03 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30391                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30392                                  	;test	word [es:bx],_$P_Ig_Colon
 30393 00001C07 741D                    	jz	short _$P_Drv_Err	;AN000;
 30394                                  
 30395 00001C09 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 30396 00001C0E 7516                    	jne	short _$P_Drv_Err	;AN000;
 30397                                  
 30398                                  _$P_DrvF00:				;AN000;
 30399 00001C10 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 30400 00001C12 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 30401 00001C14 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 30402                                  
 30403 00001C16 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 30404 00001C18 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 30405                                  
 30406 00001C1A 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 30407 00001C1C 88C2                    	mov	dl,al			;AN000; set
 30408                                  	;mov	ah,_$P_No_Tag		;AN000; result
 30409                                  	;mov	al,_$P_Drive		;AN000; buffer
 30410                                  	; 08/07/2023
 30411 00001C1E B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 30412                                  					      ; set result buffer
 30413 00001C21 E872FB                  	call	_$P_Fill_Result		;AN000; to drive
 30414 00001C24 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 30415                                  
 30416                                  _$P_Drv_Err:				;AN000;
 30417 00001C26 2EC706[E014]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30418                                  _$P_Drv_Exit:				;AN000;
 30419 00001C2D 5A                      	pop	dx			;AN000;
 30420 00001C2E 58                      	pop	ax			;AN000;
 30421 00001C2F C3                      	retn				;AN000;
 30422                                  
 30423                                  ;ENDIF					;AN000;(of DrvSW)
 30424                                  
 30425                                  ;***********************************************************************
 30426                                  ; _$P_Skip_Delim;
 30427                                  ;
 30428                                  ; Function: Skip delimiters specified in the PARMS list, white space
 30429                                  ;	    and comma.
 30430                                  ;
 30431                                  ; Input:    DS:SI -> Command String
 30432                                  ;	    ES:DI -> Parameter List
 30433                                  ;
 30434                                  ; Output:   CY = 1 if the end of line encounterd
 30435                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 30436                                  ;	    AL = Last examineed character
 30437                                  ;
 30438                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 30439                                  ;
 30440                                  ; Vars:     _$P_Flags(R)
 30441                                  ;***********************************************************************
 30442                                  
 30443                                  _$P_Skip_Delim:
 30444                                  _$P_Skip_Delim_Loop:			;AN000;
 30445 00001C30 AC                      	lodsb				;AN000;
 30446 00001C31 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 30447 00001C34 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 30448                                  
 30449 00001C36 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 30450 00001C39 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 30451                                  
 30452 00001C3B 2EF606[EC14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 30453 00001C41 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 30454                                  
 30455 00001C43 2EF606[EC14]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 30456                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 30457                                  	; 08/07/2023
 30458                                  	; cf=0
 30459 00001C49 7505                    	jnz	short _$P_Skip_Delim_Exit
 30460 00001C4B C3                      	retn
 30461                                  
 30462                                  	;dec	si			;AN000; backup si for next call (tm08)
 30463                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 30464                                  	; 12/12/2022
 30465                                  	; cf=0
 30466                                  	; 08/07/2023
 30467                                  	;jmp	short _$P_Skip_Delim_Exit
 30468                                  
 30469                                  _$P_Skip_Delim_CY:			;AN000;
 30470 00001C4C F9                      	stc				;AN000; indicate EOL
 30471 00001C4D EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 30472                                  
 30473                                  _$P_Skip_Delim_NCY:			;AN000;
 30474 00001C4F F8                      	clc				;AN000; indicate non delim
 30475                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 30476 00001C50 4E                      	dec	si			;AN000;  backup index pointer
 30477                                  	; 08/07/2023
 30478                                  	; 12/12/2022
 30479                                  ;_$P_Exit_At_Extra:	 ; cf=0
 30480 00001C51 C3                      	retn				;AN000;
 30481                                  
 30482                                  	; 12/12/2022
 30483                                  ;_$P_Exit_At_Extra:			;AN000;
 30484                                  	;clc				;AN000; indicate extra delim
 30485                                  	;retn				;AN000;
 30486                                  
 30487                                  ;***********************************************************************
 30488                                  ; _$P_Chk_EOL;
 30489                                  ;
 30490                                  ; Function: Check if AL is one of End of Line characters.
 30491                                  ;
 30492                                  ; Input:    AL = character code
 30493                                  ;	    ES:DI -> Parameter List
 30494                                  ;
 30495                                  ; Output:   ZF = 1 if one of End of Line characters
 30496                                  ;**********************************************************************
 30497                                  
 30498                                  _$P_Chk_EOL:
 30499 00001C52 53                      	push	bx			;AN000;
 30500 00001C53 51                      	push	cx			;AN000;
 30501 00001C54 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 30502 00001C56 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30503 00001C58 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 30504 00001C5A 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30505                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 30506 00001C5C 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 30507 00001C5E 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30508                                  ;ENDIF					;AN028;
 30509 00001C60 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 30510                                  					;AN000; EOL character specified ?
 30511 00001C65 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 30512 00001C67 31DB                    	xor	bx,bx			;AN000;
 30513 00001C69 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 30514                                  					;AN000; get length of delimiter list
 30515 00001C6D 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 30516                                  	; 08/07/2023
 30517 00001C70 31C9                    	xor	cx,cx ; *
 30518 00001C72 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 30519 00001C76 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 30520                                  	; 08/07/2023
 30521                                  	;;xor	cx,cx			;AN000; Get number of extra character
 30522                                  	;xor	ch,ch ; *
 30523 00001C78 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 30524                                  _$P_Chk_EOL_Loop:			;AN000;
 30525 00001C7B 43                      	inc	bx			;AN000;
 30526 00001C7C 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 30527 00001C7F 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30528 00001C81 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 30529                                  	; 08/07/2023
 30530                                  	; cx=0
 30531                                  _$P_Chk_EOL_NZ:				;AN000;
 30532                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 30533                                  	; 08/07/2023
 30534 00001C83 41                      	inc	cx  ; zf=0  (cx=1) ; *
 30535                                  _$P_Chk_EOL_Exit:			;AN000;
 30536 00001C84 59                      	pop	cx			;AN000;
 30537 00001C85 5B                      	pop	bx			;AN000;
 30538 00001C86 C3                      	retn
 30539                                  
 30540                                  ;***********************************************************************
 30541                                  ; _$P_Chk_Delim;
 30542                                  ;
 30543                                  ; Function: Check if AL is one of delimiter characters.
 30544                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 30545                                  ;	    blanks.
 30546                                  ;
 30547                                  ; Input:    AL = character code
 30548                                  ;	    DS:SI -> Next Character
 30549                                  ;	    ES:DI -> Parameter List
 30550                                  ;
 30551                                  ; Output:   ZF = 1 if one of delimiter characters
 30552                                  ;	    SI points to the next character
 30553                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 30554                                  ;***********************************************************************
 30555                                  
 30556                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30557                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 30558                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 30559                                  
 30560                                  _$P_Chk_Delim:
 30561 00001C87 53                      	push	bx			;AN000;
 30562 00001C88 51                      	push	cx			;AN000;
 30563 00001C89 2EC606[E614]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 30564                                  					;AC034; Assume terminated by space
 30565                                  	;and	byte [cs:_$P_Flags20,0DFh
 30566 00001C8F 2E8026[EC14]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 30567 00001C95 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 30568 00001C97 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30569                                  
 30570 00001C99 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 30571 00001C9B 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30572                                  
 30573 00001C9D 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 30574 00001C9F 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30575                                  
 30576                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 30577                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 30578                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30579                                  ;_$P_Chk_Delim00:
 30580                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 30581                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 30582                                  %if 0
 30583                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30584                                  _$P_Chk_Delim00: 			;AN000;
 30585                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 30586                                  	jne	short _$P_Chk_Delim01	;AN000;
 30587                                  
 30588                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 30589                                  	jne	short _$P_Chk_Delim01	;AN000;
 30590                                  
 30591                                  	mov	al,_$P_Space		;AN000;
 30592                                  	inc	si			;AN000; make si point to next character
 30593                                  	cmp	al,al			;AN000; Set ZF
 30594                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30595                                  %endif
 30596                                  
 30597                                  _$P_Chk_Delim01: 			;AN000;
 30598 00001CA1 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 30599                                  					;AN000; delimiter character specified ?
 30600 00001CA6 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 30601                                  
 30602                                  	;xor	cx,cx			;AN000;
 30603 00001CA8 30ED                    	xor	ch,ch
 30604                                  	;mov	cl,[es:di+3]
 30605 00001CAA 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 30606                                  					;AN000; get length of delimiter list
 30607                                  	;or	cx,cx			;AN000; No extra Delim character ?
 30608                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 30609                                  	; 08/07/2023
 30610 00001CAE E30B                    	jcxz	_$P_Chk_Delim_NZ
 30611                                  
 30612 00001CB0 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 30613                                  _$P_Chk_Delim_Loop:			;AN000;
 30614 00001CB3 43                      	inc	bx			;AN000;
 30615 00001CB4 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 30616 00001CB7 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30617                                  
 30618 00001CB9 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 30619                                  
 30620                                  _$P_Chk_Delim_NZ:			;AN000;
 30621                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 30622                                  	; 08/07/2023
 30623                                  	; cx=0 here
 30624 00001CBB 41                      	inc	cx ; cx=1, zf=0
 30625                                  _$P_Chk_Delim_Exit:			;AN000;
 30626                                  _$P_ChkDfin:				;AN000;
 30627 00001CBC 59                      	pop	cx			;AN000;
 30628 00001CBD 5B                      	pop	bx			;AN000;
 30629 00001CBE C3                      	retn				;AN000;
 30630                                  
 30631                                  _$P_Chk_Delim_Exit0:			;AN000;
 30632 00001CBF 2EA2[E614]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 30633 00001CC3 2EF606[EC14]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 30634 00001CC9 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 30635                                  
 30636 00001CCB 2E800E[EC14]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 30637                                  					;AC034; flag terminated extra delimiter or comma
 30638                                  _$P_No_Set_Extra:			;AN027;
 30639 00001CD1 38C0                    	cmp	al,al			;AN000; set ZF
 30640 00001CD3 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30641                                  
 30642                                  ;***********************************************************************
 30643                                  ; _$P_Chk_Switch;
 30644                                  ;
 30645                                  ; Function: Check if AL is the switch character not in first position of
 30646                                  ;	    _$P_STRING_BUF
 30647                                  ;
 30648                                  ; Input:    AL = character code
 30649                                  ;	    BX = current pointer within _$P_String_Buf
 30650                                  ;	    SI =>next char on command line (following the one in AL)
 30651                                  ;
 30652                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 30653                                  ;		 position, and has no chance of being part of a date string,
 30654                                  ;		 i.e. should be treated as a delimiter.
 30655                                  
 30656                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 30657                                  ;		 position, or is a slash but may be part of a date string, i.e.
 30658                                  ;		 should not be treated as a delimiter.
 30659                                  ;
 30660                                  ; Vars:  _$P_Terminator(W)
 30661                                  
 30662                                  ; Use:	 _$P_0099
 30663                                  ;***********************************************************************
 30664                                  
 30665                                  _$P_Chk_Switch:
 30666                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 30667                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 30668                                  	; 08/07/2023
 30669 00001CD5 BD[F514]                	mov	bp,_$P_STRING_BUF
 30670                                  
 30671                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 30672 00001CD8 39EB                    	cmp	bx,bp			;AN000;
 30673 00001CDA 7406                    	je	short _$P_STRUC_L2	;AN000;
 30674                                  
 30675                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 30676 00001CDC 3C2F                    	cmp	al,_$P_Switch		;AN000;
 30677 00001CDE 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 30678                                  
 30679 00001CE0 F9                      	stc				;AN020;not in first position and is slash
 30680                                  	;jmp     short _$P_STRUC_L1	;AN000;
 30681                                  	; 12/12/2022
 30682 00001CE1 C3                      	retn
 30683                                  
 30684                                  ; 12/12/2022
 30685                                  ;_$P_STRUC_L5:				;AN000;
 30686                                  ;	CLC				;AN020;not a slash
 30687                                  ;;	    .ENDIF			;AN020;
 30688                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 30689                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 30690                                  
 30691                                  _$P_STRUC_L2:				;AN000;
 30692                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 30693 00001CE2 3C2F                    	cmp     al,_$P_Switch		;AN000;
 30694 00001CE4 7506                    	jne	short _$P_STRUC_L12	;AN000;
 30695                                  
 30696 00001CE6 2E800E[EC14]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 30697                                  ;	.ENDIF				;AN020;
 30698                                  
 30699                                  	; 12/12/2022
 30700                                  	; cf=0
 30701                                  	;retn
 30702                                  
 30703                                  _$P_STRUC_L5:
 30704                                  	; 12/12/2022
 30705                                  _$P_STRUC_L12:				;AN000;
 30706 00001CEC F8                      	clc				;AN020;CF=0 indicating first char
 30707                                  ;	.ENDIF				;AN020;
 30708                                  _$P_STRUC_L1:				;AN000;
 30709 00001CED C3                      	retn				;AN000;
 30710                                  
 30711                                  ;**************************************************************************
 30712                                  ; _$P_Chk_DBCS:
 30713                                  ;
 30714                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 30715                                  ;
 30716                                  ;  Input:
 30717                                  ;	  AL	= Code to be examineed
 30718                                  ;
 30719                                  ;  Output:
 30720                                  ;	  If CF is on then a lead byte of DBCS
 30721                                  ;
 30722                                  ; Use: INT 21h w/AH=63
 30723                                  ;
 30724                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 30725                                  ;***************************************************************************
 30726                                  
 30727                                  _$P_Chk_DBCS:
 30728 00001CEE 1E                      	push	ds			;AN000;
 30729 00001CEF 56                      	push	si			;AN000;
 30730 00001CF0 53                      	push	bx			;AN000; (tm11)
 30731                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 30732                                  	;jne	short _$P_DBCS00	;AN000;
 30733                                  	; 08/07/2023
 30734 00001CF1 2E8B36[E914]            	mov	si,[cs:_$P_DBCSEV_SEG]
 30735 00001CF6 21F6                    	and	si,si ; 0 ?
 30736 00001CF8 7525                    	jnz	short _$P_DBCS00 ; already set
 30737 00001CFA 50                      	push	ax			;AN000;
 30738 00001CFB 1E                      	push	ds			;AN000; (tm11)
 30739 00001CFC 51                      	push	cx			;AN000;
 30740 00001CFD 52                      	push	dx			;AN000;
 30741 00001CFE 57                      	push	di			;AN000;
 30742 00001CFF 55                      	push	bp			;AN000;
 30743 00001D00 06                      	push	es			;AN000;
 30744                                  	; si = 0 ; 08/07/2023
 30745                                  	;xor	si,si			;AN000;
 30746 00001D01 8EDE                    	mov	ds,si ; 0		;AN000;
 30747 00001D03 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 30748 00001D06 CD21                    	int	21h			;AN000;
 30749                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 30750 00001D08 8CDB                    	mov	bx,ds			;AN000; (tm11)
 30751 00001D0A 09DB                    	or	bx,bx			;AN000; (tm11)
 30752 00001D0C 07                      	pop	es			;AN000;
 30753 00001D0D 5D                      	pop	bp			;AN000;
 30754 00001D0E 5F                      	pop	di			;AN000;
 30755 00001D0F 5A                      	pop	dx			;AN000;
 30756 00001D10 59                      	pop	cx			;AN000;
 30757 00001D11 1F                      	pop	ds			;AN000; (tm11)
 30758 00001D12 58                      	pop	ax			;AN000;
 30759 00001D13 7424                    	jz	short _$P_NON_DBCS	;AN000;
 30760                                  _$P_DBCS02:				;AN000;
 30761 00001D15 2E8936[E714]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 30762 00001D1A 2E891E[E914]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 30763                                  _$P_DBCS00:				;AN000;
 30764                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 30765                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 30766                                  	; 08/07/2023
 30767 00001D1F 2EC536[E714]            	lds	si,[cs:_$P_DBCSEV_OFF]
 30768                                  _$P_DBCS_LOOP:				;AN000;
 30769 00001D24 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 30770 00001D27 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 30771 00001D29 3A04                    	cmp	al,[si] 		;AN000;
 30772 00001D2B 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 30773 00001D2D 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 30774 00001D30 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 30775 00001D32 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 30776 00001D33 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 30777                                  _$P_DBCS01:				;AN000;
 30778 00001D35 46                      	inc	si			;AC035; add '2' to
 30779 00001D36 46                      	inc	si			;AC035;  SI reg
 30780                                  					;AN000; get next vector
 30781 00001D37 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 30782                                  _$P_NON_DBCS:				;AN000;
 30783                                  	; 12/12/2022
 30784                                  	; cf=0
 30785                                  	;clc				;AN000; indicate SBCS
 30786                                  _$P_DBCS_EXIT:				;AN000;
 30787 00001D39 5B                      	pop	bx			;AN000; (tm11)
 30788 00001D3A 5E                      	pop	si			;AN000;
 30789 00001D3B 1F                      	pop	ds			;AN000;
 30790 00001D3C C3                      	retn				;AN000;
 30791                                  
 30792                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 30793                                  ; ======================================================================
 30794                                  ; 27/03/2019 - Retro DOS v4.0
 30795                                  
 30796                                  ;control block definitions for parser.
 30797                                  ;-----------------------------------------------------------------------
 30798                                  ; buffer = [n | n,m] {/e}
 30799                                  
 30800                                  ; 30/03/2019
 30801                                  
 30802                                  struc p_parms
 30803 00000000 ????                    	resw	1	; dw ?
 30804 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 30805 00000003 ??                      	resb	1	; db 1	; length is 1
 30806 00000004 ??                      	resb 	1	; db ';' ; delimiter
 30807                                  .size:
 30808                                  endstruc
 30809                                  
 30810                                  struc p_pos
 30811 00000000 ????                    	resw	1	; dw ?	; numeric value??
 30812 00000002 ????                    	resw	1	; dw ?	; function
 30813 00000004 ????                    	resw	1	; dw ?	; result value buffer
 30814                                  
 30815                                  ; note: by defining result_val before this structure, we could remove
 30816                                  ;  the "result_val" from every structure invocation
 30817                                  
 30818 00000006 ????                    	resw	1	; dw ?	; value list
 30819 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 30820                                  .size:
 30821                                  endstruc
 30822                                  
 30823                                  struc	p_range
 30824 00000000 ??                      	resb	1	; db 1	; range definition
 30825 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 30826 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 30827 00000003 ????????                	resd	1	; dd ?	; numeric min
 30828 00000007 ????????                	resd	1	; dd ?	; numeric max
 30829                                  .size:
 30830                                  endstruc
 30831                                  
 30832                                  ;-----------------------------------------------------------------------
 30833                                  
 30834                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30835                                  	; (SYSINIT:1F48h)
 30836                                  
 30837                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30838                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 30839                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 30840                                  
 30841                                  ; buffer = [n | n,m] {/e}
 30842                                  
 30843                                  ;buf_parms p_parms <buf_parmsx>
 30844                                  buf_parms: 
 30845 00001D3D [421D]                  	dw	buf_parmsx
 30846 00001D3F 01                      	db	1	; an extra delimiter list
 30847 00001D40 01                      	db	1	; length is 1
 30848 00001D41 3B                      	db	';'	; delimiter
 30849                                  
 30850                                  buf_parmsx:
 30851 00001D42 0102[4C1D][601D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 30852 00001D48 01                      	db	1			; one switch
 30853 00001D49 [741D]                  	dw	sw_x_ctrl
 30854 00001D4B 00                      	db	0			; no keywords
 30855                                  
 30856                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 30857                                  buf_pos1:
 30858 00001D4C 0080                    	dw	8000h	; numeric value??
 30859 00001D4E 0000                    	dw	0	; function
 30860 00001D50 [861D]                  	dw	result_val ; result value buffer	
 30861 00001D52 [551D]                  	dw	buf_range_1 ; value list
 30862 00001D54 00                      	db	0  	; no switches/keywords
 30863                                  
 30864                                  ;buf_range_1 p_range <,,,1,99>		; M050
 30865                                  buf_range_1:
 30866 00001D55 01                      	db	1	; range definition
 30867 00001D56 01                      	db	1	; 1 definition of range
 30868 00001D57 01                      	db	1	; item tag for this range
 30869 00001D58 01000000                	dd	1	; numeric min
 30870 00001D5C 63000000                	dd	99	; numeric max
 30871                                  
 30872                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 30873                                  buf_pos2:
 30874 00001D60 0180                    	dw	8001h
 30875 00001D62 0000                    	dw	0
 30876 00001D64 [861D]                  	dw	result_val	
 30877 00001D66 [691D]                  	dw	buf_range_2
 30878 00001D68 00                      	db	0
 30879                                  
 30880                                  ;buf_range_2 p_range <,,,0,8>
 30881                                  buf_range_2:
 30882 00001D69 01                      	db	1
 30883 00001D6A 01                      	db	1
 30884 00001D6B 01                      	db	1
 30885 00001D6C 00000000                	dd	0
 30886 00001D70 08000000                	dd	8
 30887                                  
 30888                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 30889                                  sw_x_ctrl:
 30890 00001D74 0000                    	dw	0
 30891 00001D76 0000                    	dw	0
 30892 00001D78 [861D]                  	dw	result_val	
 30893 00001D7A [851D]                  	dw	noval
 30894 00001D7C 01                      	db	1	; 1 switch
 30895                                  	
 30896                                  switch_x:
 30897 00001D7D 2F5800                  	db	'/X',0		; M016
 30898                                  
 30899                                  p_buffers:
 30900 00001D80 0000                    	dw	0	; local variables
 30901                                  p_h_buffers:
 30902 00001D82 0000                    	dw	0
 30903                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30904                                  p_buffer_slash_x:
 30905 00001D84 00                      	db	0 ; 31/03/2019
 30906                                  
 30907                                  ;-- common definitions -------------------------------------------------
 30908                                  
 30909 00001D85 00                      noval:	db	0
 30910                                  
 30911                                  result_val: 	;label	byte
 30912 00001D86 00                      	db	0		; type returned
 30913                                  result_val_itag:
 30914 00001D87 00                      	db	0		; item tag returned
 30915                                  result_val_swoff:
 30916 00001D88 0000                    	dw	0		; es:offset of the switch defined
 30917                                  rv_byte:	;label	byte
 30918 00001D8A 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 30919                                  
 30920                                  ;-----------------------------------------------------------------------
 30921                                  
 30922                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30923                                  	; (SYSINIT:1F99h)
 30924                                  
 30925                                  ; break = [ on | off ]
 30926                                  
 30927                                  ;brk_parms p_parms  <brk_parmsx>
 30928                                  brk_parms:
 30929 00001D8E [931D]                  	dw	brk_parmsx
 30930 00001D90 01                      	db	1	; an extra delimiter list
 30931 00001D91 01                      	db	1	; length is 1
 30932 00001D92 3B                      	db	';'	; delimiter
 30933                                  
 30934                                  brk_parmsx:
 30935 00001D93 0101[991D]              	dw	101h,brk_pos	; min,max = 1 positional
 30936 00001D97 00                      	db	0		; no switches
 30937 00001D98 00                      	db	0		; no keywords
 30938                                  
 30939                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 30940                                  brk_pos:
 30941 00001D99 0020                    	dw	2000h
 30942 00001D9B 0000                    	dw	0
 30943 00001D9D [861D]                  	dw	result_val	
 30944 00001D9F [A21D]                  	dw	on_off_string
 30945 00001DA1 00                      	db	0
 30946                                  
 30947                                  on_off_string:	;label	byte
 30948 00001DA2 03                      	db	3		; signals that there is a string choice
 30949 00001DA3 00                      	db	0		; no range definition
 30950 00001DA4 00                      	db	0		; no numeric values choice
 30951 00001DA5 02                      	db	2		; 2 strings for choice
 30952 00001DA6 01                      	db	1		; the 1st string tag
 30953 00001DA7 [AC1D]                  	dw	on_string
 30954 00001DA9 02                      	db	2		; the 2nd string tag
 30955 00001DAA [AF1D]                  	dw	off_string
 30956                                  
 30957                                  on_string:
 30958 00001DAC 4F4E00                  	db	"ON",0
 30959                                  off_string:
 30960 00001DAF 4F464600                	db	"OFF",0
 30961                                  
 30962                                  p_ctrl_break:
 30963 00001DB3 00                      	db	0	; local variable
 30964                                  
 30965                                  ;-----------------------------------------------------------------------
 30966                                  
 30967                                  	; 27/10/2022
 30968                                  
 30969                                  ; country = n {m {path}}
 30970                                  ; or
 30971                                  ; country = n,,path
 30972                                  
 30973                                  ;cntry_parms p_parms <cntry_parmsx>
 30974                                  cntry_parms:
 30975 00001DB4 [B91D]                  	dw	cntry_parmsx
 30976 00001DB6 01                      	db	1
 30977 00001DB7 01                      	db	1
 30978 00001DB8 3B                      	db	';'
 30979                                  	
 30980                                  cntry_parmsx:
 30981 00001DB9 0103[C31D][D71D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 30981 00001DBF [E01D]             
 30982 00001DC1 00                      	db	0		; no switches
 30983 00001DC2 00                      	db	0		; no keywords
 30984                                  
 30985                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 30986                                  cntry_pos1:
 30987 00001DC3 0080                    	dw	8000h
 30988 00001DC5 0000                    	dw	0
 30989 00001DC7 [861D]                  	dw	result_val	
 30990 00001DC9 [CC1D]                  	dw	cc_range
 30991 00001DCB 00                      	db	0
 30992                                  
 30993                                  ;cc_range p_range <,,,1,999>
 30994                                  cc_range:
 30995 00001DCC 01                      	db	1
 30996 00001DCD 01                      	db	1
 30997 00001DCE 01                      	db	1
 30998 00001DCF 01000000                	dd	1
 30999 00001DD3 E7030000                	dd	999
 31000                                  
 31001                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 31002                                  cntry_pos2:
 31003 00001DD7 0180                    	dw	8001h
 31004 00001DD9 0000                    	dw	0
 31005 00001DDB [861D]                  	dw	result_val	
 31006 00001DDD [CC1D]                  	dw	cc_range
 31007 00001DDF 00                      	db	0
 31008                                  
 31009                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 31010                                  cntry_pos3:
 31011 00001DE0 0102                    	dw	201h
 31012 00001DE2 0000                    	dw	0
 31013 00001DE4 [861D]                  	dw	result_val	
 31014 00001DE6 [851D]                  	dw	noval
 31015 00001DE8 00                      	db	0	
 31016                                  
 31017                                  p_cntry_code:
 31018 00001DE9 0000                    	dw	0	; local variable
 31019                                  p_code_page:
 31020 00001DEB 0000                    	dw	0	; local variable
 31021                                  
 31022                                  ;-----------------------------------------------------------------------
 31023                                  
 31024                                  	; 27/10/2022
 31025                                  
 31026                                  ; files = n
 31027                                  
 31028                                  ;files_parms p_parms <files_parmsx>
 31029                                  files_parms:
 31030 00001DED [F21D]                  	dw	files_parmsx
 31031 00001DEF 01                      	db	1
 31032 00001DF0 01                      	db	1
 31033 00001DF1 3B                      	db	';'
 31034                                  
 31035                                  files_parmsx:
 31036 00001DF2 0101[F81D]              	dw	101h,files_pos	; min,max 1 positional
 31037 00001DF6 00                      	db	0		; no switches
 31038 00001DF7 00                      	db	0		; no keywords
 31039                                  
 31040                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 31041                                  files_pos:
 31042 00001DF8 0080                    	dw	8000h
 31043 00001DFA 0000                    	dw	0
 31044 00001DFC [861D]                  	dw	result_val	
 31045 00001DFE [011E]                  	dw	files_range
 31046 00001E00 00                      	db	0
 31047                                  
 31048                                  ;files_range p_range <,,,8,255>
 31049                                  files_range:
 31050 00001E01 01                      	db	1
 31051 00001E02 01                      	db	1
 31052 00001E03 01                      	db	1
 31053 00001E04 08000000                	dd	8
 31054 00001E08 FF000000                	dd	255
 31055                                  
 31056                                  p_files:
 31057 00001E0C 00                      	db	0		; local variable
 31058                                  
 31059                                  ;-----------------------------------------------------------------------
 31060                                  
 31061                                  ; 07/04/2025 - MiniDOS v1.0
 31062                                  %if 0
 31063                                  
 31064                                  	; 27/10/2022
 31065                                  
 31066                                  ; fcbs = n,m
 31067                                  
 31068                                  ;fcbs_parms p_parms <fcbs_parmsx>
 31069                                  fcbs_parms:
 31070                                  	dw	fcbs_parmsx
 31071                                  	db	1
 31072                                  	db	1
 31073                                  	db	';'
 31074                                  
 31075                                  fcbs_parmsx:
 31076                                  	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 31077                                  	db	0		; no switches
 31078                                  	db	0		; no keywords
 31079                                  
 31080                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 31081                                  fcbs_pos_1:
 31082                                  	dw	8000h
 31083                                  	dw	0
 31084                                  	dw	result_val	
 31085                                  	dw	fcbs_range
 31086                                  	db	0
 31087                                  
 31088                                  ;fcbs_range p_range <,,,1,255>
 31089                                  fcbs_range:
 31090                                  	db	1
 31091                                  	db	1
 31092                                  	db	1
 31093                                  	dd	1
 31094                                  	dd	255
 31095                                  
 31096                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 31097                                  fcbs_pos_2:
 31098                                  	dw	8000h
 31099                                  	dw	0
 31100                                  	dw	result_val	
 31101                                  	dw	fcbs_keep_range
 31102                                  	db	0
 31103                                  
 31104                                  ;fcbs_keep_range p_range <,,,0,255>
 31105                                  fcbs_keep_range:
 31106                                  	db	1
 31107                                  	db	1
 31108                                  	db	1
 31109                                  	dd	0
 31110                                  	dd	255
 31111                                  
 31112                                  p_fcbs:	db	0		; local variable
 31113                                  p_keep:	db	0		; local variable
 31114                                  
 31115                                  %endif
 31116                                  
 31117                                  ;-----------------------------------------------------------------------
 31118                                  
 31119                                  	; 27/10/2022
 31120                                  
 31121                                  ; lastdrive = x
 31122                                  
 31123                                  ;ldrv_parms p_parms <ldrv_parmsx>
 31124                                  ldrv_parms:
 31125 00001E0D [121E]                  	dw	ldrv_parmsx
 31126 00001E0F 01                      	db	1
 31127 00001E10 01                      	db	1
 31128 00001E11 3B                      	db	';'
 31129                                  
 31130                                  ldrv_parmsx:
 31131 00001E12 0101[181E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 31132 00001E16 00                      	db	0		; no switches
 31133 00001E17 00                      	db	0		; no keywords
 31134                                  
 31135                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 31136                                  ldrv_pos:				    ; remove colon at end
 31137 00001E18 1001                    	dw	110h
 31138 00001E1A 1000                    	dw	10h
 31139 00001E1C [861D]                  	dw	result_val	
 31140 00001E1E [851D]                  	dw	noval
 31141 00001E20 00                      	db	0
 31142                                  	
 31143 00001E21 00                      p_ldrv:	db	0		; local variable
 31144                                  
 31145                                  ;-----------------------------------------------------------------------
 31146                                  
 31147                                  	; 27/10/2022
 31148                                  
 31149                                  ; stacks = n,m
 31150                                  
 31151                                  ;stks_parms p_parms <stks_parmsx>
 31152                                  stks_parms:
 31153 00001E22 [271E]                  	dw	stks_parmsx
 31154 00001E24 01                      	db	1
 31155 00001E25 01                      	db	1
 31156 00001E26 3B                      	db	';'
 31157                                  
 31158                                  stks_parmsx:
 31159 00001E27 0202[2F1E][431E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 31160 00001E2D 00                      	db	0		; no switches
 31161 00001E2E 00                      	db	0		; no keywords
 31162                                  
 31163                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 31164                                  stks_pos_1:
 31165 00001E2F 0080                    	dw	8000h
 31166 00001E31 0000                    	dw	0
 31167 00001E33 [861D]                  	dw	result_val	
 31168 00001E35 [381E]                  	dw	stks_range
 31169 00001E37 00                      	db	0
 31170                                  
 31171                                  ;stks_range p_range <,,,0,64>
 31172                                  stks_range:
 31173 00001E38 01                      	db	1
 31174 00001E39 01                      	db	1
 31175 00001E3A 01                      	db	1
 31176 00001E3B 00000000                	dd	0
 31177 00001E3F 40000000                	dd	64
 31178                                  
 31179                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 31180                                  stks_pos_2:
 31181 00001E43 0080                    	dw	8000h
 31182 00001E45 0000                    	dw	0
 31183 00001E47 [861D]                  	dw	result_val	
 31184 00001E49 [4C1E]                  	dw	stk_size_range
 31185 00001E4B 00                      	db	0
 31186                                  
 31187                                  ;stk_size_range p_range <,,,0,512>
 31188                                  stk_size_range:
 31189 00001E4C 01                      	db	1
 31190 00001E4D 01                      	db	1
 31191 00001E4E 01                      	db	1
 31192 00001E4F 00000000                	dd	0
 31193 00001E53 00020000                	dd	512	
 31194                                  
 31195                                  p_stack_count:
 31196 00001E57 0000                    	dw	0	; local variable
 31197                                  p_stack_size:
 31198 00001E59 0000                    	dw	0	; local variable
 31199                                  
 31200                                  ;-----------------------------------------------------------------------
 31201                                  
 31202                                  	; 27/10/2022
 31203                                  
 31204                                  ; multitrack = [ on | off ]
 31205                                  
 31206                                  ;mtrk_parms p_parms <mtrk_parmsx>
 31207                                  mtrk_parms:
 31208 00001E5B [601E]                  	dw	mtrk_parmsx
 31209 00001E5D 01                      	db	1
 31210 00001E5E 01                      	db	1
 31211 00001E5F 3B                      	db	';'
 31212                                  
 31213                                  mtrk_parmsx:
 31214 00001E60 0101[661E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 31215 00001E64 00                      	db	0		; no switches
 31216 00001E65 00                      	db	0		; no keywords
 31217                                  
 31218                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31219                                  mtrk_pos:
 31220 00001E66 0020                    	dw	2000h
 31221 00001E68 0000                    	dw	0
 31222 00001E6A [861D]                  	dw	result_val	
 31223 00001E6C [A21D]                  	dw	on_off_string
 31224 00001E6E 00                      	db	0
 31225                                  
 31226 00001E6F 00                      p_mtrk:	db	0		; local variable
 31227                                  
 31228                                  ;-----------------------------------------------------------------------
 31229                                  
 31230                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31231                                  	; (SYSINIT:20B2h)
 31232                                  
 31233                                  ; switches=/k
 31234                                  
 31235                                  ;swit_parms p_parms <swit_parmsx>
 31236                                  swit_parms:
 31237 00001E70 [751E]                  	dw	swit_parmsx
 31238 00001E72 01                      	db	1
 31239 00001E73 01                      	db	1
 31240 00001E74 3B                      	db	';'
 31241                                  
 31242                                  swit_parmsx:
 31243 00001E75 0000                    	dw	0		; no positionals
 31244                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 31245                                  	;db	5               ; # of switches
 31246                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31247 00001E77 06                      	db	6
 31248                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31249                                  	;db	3
 31250 00001E78 [851E]                  	dw	swit_k_ctrl	; /k control
 31251                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 31252 00001E7A [911E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 31253 00001E7C [9D1E]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 31254 00001E7E [A91E]                  	dw	swit_t_ctrl     ; /t control
 31255 00001E80 [B51E]                  	dw	swit_w_ctrl     ; /w control
 31256                                  	; 14/04/2024 - Retro DOS v5.0 ; **
 31257 00001E82 [C11E]                  	dw	swit_i_ctrl	; /i control
 31258 00001E84 00                      	db	0		; no keywords
 31259                                  
 31260                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31261                                  swit_k_ctrl:
 31262 00001E85 00000000[861D]-         	dw	0,0,result_val,noval
 31262 00001E8B [851D]             
 31263 00001E8D 01                      	db	1
 31264 00001E8E 2F4B00                  swit_k:	db	'/K',0
 31265                                  
 31266                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 31267                                  ; (SYSINIT:220Ch) ; *
 31268                                  
 31269                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31270                                  ;
 31271                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31272                                  swit_n_ctrl: ; *
 31273 00001E91 00000000[861D]-         	dw	0,0,result_val,noval
 31273 00001E97 [851D]             
 31274 00001E99 01                      	db	1
 31275 00001E9A 2F4E00                  swit_n: db	'/N',0
 31276                                  
 31277                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31278                                  swit_f_ctrl: ; *
 31279 00001E9D 00000000[861D]-         	dw	0,0,result_val,noval
 31279 00001EA3 [851D]             
 31280 00001EA5 01                      	db	1
 31281 00001EA6 2F4600                  swit_f: db 	'/F',0
 31282                                  
 31283                                  	; 27/10/2022
 31284                                  
 31285                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 31286                                  swit_t_ctrl:
 31287 00001EA9 00000000[861D]-         	dw	0,0,result_val,noval
 31287 00001EAF [851D]             
 31288 00001EB1 01                      	db	1
 31289 00001EB2 2F5400                  swit_t:	db	'/T',0			   ;				M059
 31290                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 31291                                  swit_w_ctrl:
 31292 00001EB5 00000000[861D]-         	dw	0,0,result_val,noval
 31292 00001EBB [851D]             
 31293 00001EBD 01                      	db	1
 31294 00001EBE 2F5700                  swit_w:	db	'/W',0			   ;				M063
 31295                                  
 31296                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31297                                  ;;;
 31298                                  ;swit_i_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31299                                  swit_i_ctrl:
 31300 00001EC1 0000                    	dw	0
 31301 00001EC3 0000                    	dw	0
 31302 00001EC5 [861D]                  	dw	result_val
 31303 00001EC7 [851D]                  	dw	noval
 31304 00001EC9 01                      	db	1
 31305 00001ECA 2F4900                  swit_i:	db	'/I',0
 31306                                  ;;;
 31307                                  
 31308                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 31309                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 31310                                  ;   in the above table to prevent the parsing code from complaining about them
 31311                                  
 31312 00001ECD 00                      p_swit_k:	db     0	; local variable
 31313 00001ECE 00                      p_swit_t:	db     0	; local variable			M059
 31314 00001ECF 00                      p_swit_w:	db     0	; local variable			M063
 31315                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31316 00001ED0 00                      p_swit_i:	db     0
 31317                                  
 31318                                  ;-----------------------------------------------------------------------
 31319                                  
 31320                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31321                                  	; (SYSINIT:20E8h)
 31322                                  
 31323                                  ; DOS = [ high | low ]
 31324                                  
 31325                                  ;dos_parms p_parms  <dos_parmsx>
 31326                                  dos_parms:
 31327 00001ED1 [D61E]                  	dw	dos_parmsx
 31328 00001ED3 01                      	db	1
 31329 00001ED4 01                      	db	1
 31330 00001ED5 3B                      	db	';'
 31331                                  dos_parmsx:
 31332 00001ED6 01                      	db	1		; min parameters
 31333 00001ED7 02                      	db	2		; max parameters
 31334 00001ED8 [DE1E]                  	dw	dos_pos		; 
 31335 00001EDA [DE1E]                  	dw	dos_pos		; 
 31336 00001EDC 00                      	db	0		; no switches
 31337 00001EDD 00                      	db	0		; no keywords
 31338                                  
 31339                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31340                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31341                                  dos_pos:
 31342 00001EDE 00200000[861D]-         	dw	2000h,0,result_val,dos_strings
 31342 00001EE4 [F01E]             
 31343 00001EE6 00                      	db	0
 31344 00001EE7 00200000[861D]-         	dw	2000h,0,result_val,dos_strings
 31344 00001EED [F01E]             
 31345 00001EEF 00                      	db	0	
 31346                                  
 31347                                  dos_strings:	;label	byte
 31348 00001EF0 03                      	db	3		; signals that there is a string choice
 31349 00001EF1 00                      	db	0		; no range definition
 31350 00001EF2 00                      	db	0		; no numeric values choice
 31351 00001EF3 04                      	db	4		; 4 strings for choice
 31352 00001EF4 01                      	db	1		; the 1st string tag
 31353 00001EF5 [001F]                  	dw	hi_string
 31354 00001EF7 02                      	db	2		; the 2nd string tag
 31355 00001EF8 [051F]                  	dw	lo_string
 31356 00001EFA 03                      	db	3
 31357 00001EFB [091F]                  	dw	umb_string
 31358 00001EFD 04                      	db	4
 31359 00001EFE [0D1F]                  	dw	noumb_string
 31360                                  
 31361                                  ; 18/03/2025 - MiniDOS 1.0
 31362                                  %if 0
 31363                                  
 31364                                  ; 14/04/2024 - Retro DOS v5.0
 31365                                  ; (PCDOS 7.1 IBMDOS.COM - SYSINIT:273Eh)
 31366                                  ;;;
 31367                                  dosdata_parms:
 31368                                  	dw	dosdata_parmsx	; DOSDATA = UMB|NOUMB
 31369                                  	db	1
 31370                                  	db	1
 31371                                  	db	';'
 31372                                  dosdata_parmsx:
 31373                                  	db	1
 31374                                  	db	1		; min,max = 1 positional
 31375                                  	dw	dosdata_pos
 31376                                  	db	0		; no switches
 31377                                  	db	0		; no keywords
 31378                                  
 31379                                  	; dosdata_pos p_pos <2000h,0,result_val,dosdata_strings>
 31380                                  dosdata_pos:
 31381                                  	dw	2000h		; simple string
 31382                                  	dw	0
 31383                                  	dw	result_val
 31384                                  	dw	dosdata_strings
 31385                                  	db	0
 31386                                  dosdata_strings:
 31387                                  	db	3		; signals that there is a string choice
 31388                                  	db	0		; no range definition
 31389                                  	db	0		; no numeric values choice
 31390                                  	db	2		; 2 strings for choice
 31391                                  	db	1		; the 1st string tag
 31392                                  	dw	umb_string	; "UMB"
 31393                                  	db	2		; the 2nd string tag
 31394                                  	dw	noumb_string	; "NOUMB"
 31395                                  ;;;
 31396                                  %endif
 31397                                  
 31398 00001F00 4849474800              hi_string:	db	"HIGH",0
 31399 00001F05 4C4F5700                lo_string:	db	"LOW",0
 31400 00001F09 554D4200                umb_string:	db	"UMB",0
 31401 00001F0D 4E4F554D4200            noumb_string:	db	"NOUMB",0
 31402                                  
 31403                                  p_dos_hi:
 31404 00001F13 00                      	db	0	; local variable
 31405                                  			; BUGBUG : I dont know whether PARSER uses
 31406                                  			;          this variable or not
 31407                                  	; 14/04/2024 (PCDOS 7.1 IBMBIO.COM)
 31408 00001F14 00                      	db	0
 31409                                  
 31410                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31411                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31412                                  ;%if 0
 31413                                  
 31414                                  ;****************************************************************** RICHID ****
 31415                                  
 31416                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 31417                                  
 31418                                  ; 30/03/2019 - Retro DOS v4.0
 31419                                  ;------------------------------------------------------------------------------
 31420                                  
 31421                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 31422                                  ;
 31423                                  ;   Date:     May 14, 1992
 31424                                  ;
 31425                                  ;******************************************************************************
 31426                                  ;
 31427                                  ;   Modification log:
 31428                                  ;
 31429                                  ;     DATE    WHO      DESCRIPTION
 31430                                  ;   --------  -------  --------------------------------------------------------
 31431                                  ;   05/14/92  t-richj  Original
 31432                                  ;   06/21/92  t-richj  Final revisions before check-in
 31433                                  ;
 31434                                  ;******************************************************************************
 31435                                  ;
 31436                                  ; There are two primary definitions which need to be made, selectively, before
 31437                                  ; this include file should be used.  These are:
 31438                                  ;    HV_Extern - If this has been defined, variables for this module will be
 31439                                  ;                declared as external.  Otherwise, variables will be declared
 31440                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 31441                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 31442                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 31443                                  ;                (as only one module, sysconf.asm, includes this file).
 31444                                  ;    HV_LoadHigh - This should be defined when this module is going into
 31445                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 31446                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 31447                                  ;
 31448                                  ;******************************************************************************
 31449                                  
 31450                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 31451                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 31452                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 31453                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 31454                                  ; space problem (it's just such a nice round number, eh?).
 31455                                  
 31456                                  MAXUMB	equ	16
 31457                                  
 31458                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 31459                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 31460                                  
 31461                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 31462                                  SystemPSPOwner	equ	8
 31463                                  ;JapanPSPOwner	equ	9
 31464                                  
 31465                                  ; for LoadHigh and DeviceHigh:
 31466                                  ;
 31467                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 31468                                  ;	          UnHideUMBs().
 31469                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 31470                                  ;	           line.
 31471                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 31472                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 31473                                  ;	          given a command-line like "/L:3,500;4"
 31474                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 31475                                  ;	          matching its index number was specified on the command-line;
 31476                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 31477                                  ;	          will be set to 1.  All others will be set to 0.
 31478                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 31479                                  ;	          specified by the user for a UMB (in the above example, all
 31480                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 31481                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 31482                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 31483                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 31484                                  ;	           for details).
 31485                                  
 31486 00001F15 00                      fInHigh:  db	0
 31487 00001F16 00                      fUmbTiny: db	0
 31488 00001F17 0000                    SegLoad:  dw	0
 31489 00001F19 00                      UmbLoad:  db	0
 31490 00001F1A 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 31491 00001F2A 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 31492 00001F4A 00                      fm_umb:   db	0
 31493 00001F4B 00                      fm_strat: db	0
 31494 00001F4C 00                      fm_argc:  db	0	
 31495                                  
 31496                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 31497                                  ; UmbLoad is set to the UMB number given.
 31498                                  
 31499                                  UNSPECIFIED	equ	-1
 31500                                  
 31501                                  ;%endif ; 27/10/2022
 31502                                  
 31503                                  ;****************************************************************** RICHID ****
 31504                                  
 31505                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 31506                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 31507                                  
 31508                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31509                                  ; (SYSINIT:212Bh)	
 31510                                  
 31511                                  		;public	DevEntry
 31512                                  
 31513 00001F4D 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 31514 00001F4F 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 31515 00001F51 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 31516 00001F53 00000000                DevEntry:	dd	0	; Entry point to the device driver
 31517 00001F57 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 31518                                  ; 30/12/2022
 31519                                  ; 27/10/2022 
 31520 00001F5B 00                      ConvLoad:	db	0	; Use conventional (dos5-style) InitDevLoad?
 31521                                  ;
 31522 00001F5C 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 31523 00001F5D 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 31524 00001F5F 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 31525 00001F61 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 31526                                  ;
 31527 00001F63 00000000                DevXMSAddr:	dd	0
 31528                                  ;
 31529 00001F67 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 31530 00001F69 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 31531                                  ;
 31532 00001F6B 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 31533                                  				;  is being loaded into UMB
 31534 00001F6C 0000                    DevSizeOption:	dw	0	; SIZE= option
 31535                                  ;
 31536 00001F6E 00                      Int12Lied:	db	0	; did we trap int 12 ?
 31537 00001F6F 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 31538 00001F71 50524F544D414E24        ThreeComName:	db	'PROTMAN$' ; 3Com Device name
 31539                                  ;
 31540 00001F79 00                      FirstUMBLinked:	db	0
 31541 00001F7A 0000                    DevDOSData:	dw	0	; segment of DOS Data
 31542 00001F7C 00000000                DevCmdLine:	dd	0	; Current Command line
 31543 00001F80 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 31544                                  				; to use the file name in the command line
 31545                                  ; 13/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31546                                  ;	ifdef	dblspace_hooks
 31547 00001F81 00                      MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 31548                                  ;	endif
 31549                                  
 31550                                  ; ===========================================================================
 31551                                  
 31552                                  ; 31/03/2019 - Retro DOS v4.0
 31553                                  
 31554                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31555                                  ; (SYSINIT:215Eh)
 31556                                  
 31557                                  ;----------------------------------------------------------------------------
 31558                                  ;
 31559                                  ; procedure : doconf
 31560                                  ;
 31561                                  ;             Config file is parsed initially with this routine. For the
 31562                                  ;             Subsequent passes 'multi_pass' entry is used .
 31563                                  ;
 31564                                  ;----------------------------------------------------------------------------
 31565                                  
 31566                                  	; 27/10/2022
 31567                                  doconf:
 31568 00001F82 0E                      	push	cs
 31569 00001F83 1F                      	pop	ds
 31570                                  
 31571 00001F84 B80037                  	mov	ax,3700h
 31572                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 31573 00001F87 CD21                    	int	21h
 31574 00001F89 8816[1B45]              	mov	[command_line+1],dl	; set in default command line
 31575                                  
 31576                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 31577                                  ; 27/10/2022
 31578                                  ;;ifdef	MULTI_CONFIG
 31579                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 31580 00001F8D 8816[1945]              	mov	[def_swchr],dl ; 31/03/2019 
 31581                                  ;;endif	;MULTI_CONFIG
 31582                                  
 31583 00001F91 BA[3044]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 31584 00001F94 B8003D                  	mov	ax,3D00h
 31585                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 31586 00001F97 F9                      	stc				;in case of int 24
 31587 00001F98 CD21                    	int	21h			;function request
 31588 00001F9A 7309                    	jnc	short noprob		; brif opened okay
 31589                                  
 31590                                  ; 31/12/2022
 31591                                  ; 27/10/2022
 31592                                  ;;ifdef	MULTI_CONFIG
 31593 00001F9C E81518                  	call	kbd_read		; we still want to give the guy
 31594                                  ;					; a chance to select clean boot!
 31595                                  ;;endif					; (ie, no autoexec.bat processing)
 31596 00001F9F C606[C902]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 31597 00001FA4 C3                      	retn
 31598                                  noprob: 				;get file size (note < 64k!!)
 31599 00001FA5 89C3                    	mov	bx,ax  ; File handle
 31600 00001FA7 31C9                    	xor	cx,cx			; 0
 31601 00001FA9 31D2                    	xor	dx,dx			; 0
 31602                                  	;mov	ax,4202h
 31603 00001FAB B80242                  	mov	ax,(LSEEK<<8)|2
 31604 00001FAE CD21                    	int	21h
 31605 00001FB0 A3[5203]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 31606                                  					; 08/09/2023 - Erdogan Tan - Note:
 31607 00001FB3 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 31608                                  					; I am not removing 'xor dx,dx' here
 31609                                  					; for MSDOS compatibility.
 31610                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 31611                                  					; (Error will be same if CONGIG.SYS file
 31612                                  					;  size > 64KB) 
 31613                                  	;mov	ax,4200h
 31614 00001FB5 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 31615 00001FB8 CD21                    	int	21h
 31616                                  
 31617                                  	; 31/12/2022 - Retro DOS v4.2 
 31618 00001FBA 8B16[A102]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 31619                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31620                                  	;mov	dx,[top_of_cdss] 
 31621                                  
 31622 00001FBE A1[5203]                	mov	ax,[count]
 31623 00001FC1 A3[CC02]                	mov	[config_size],ax	;save the size of config.sys file.
 31624 00001FC4 E89CF1                  	call	ParaRound
 31625 00001FC7 29C2                    	sub	dx,ax
 31626                                  
 31627                                  ; 31/12/2022
 31628                                  ; 27/10/2022
 31629                                  ;ifdef	MULTI_CONFIG
 31630                                  ;
 31631                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 31632                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 31633                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 31634                                  ;  we (may) add a variable to the environment that does not explicity appear
 31635                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 31636                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 31637                                  ;  of extra space, so here we account for it (the worst case of course is
 31638                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 31639                                  ;
 31640 00001FC9 4A                      	dec	dx                      ;reserve 1 additional paragraph
 31641 00001FCA 8916[D114]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 31642 00001FCE 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 31643                                  ;;endif	;MULTI_CONFIG
 31644                                  
 31645 00001FD0 83EA11                  	sub	dx,11h			;room for header
 31646                                  	
 31647                                  	; 31/12/2022
 31648 00001FD3 8916[A102]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 31649 00001FD7 8916[9F02]              	mov	[CONFBOT],dx
 31650                                  	
 31651                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31652                                  	;mov	[top_of_cdss],dx
 31653                                  	;call    TempCDS 
 31654                                  	; 31/12/2022
 31655                                  	; 11/12/2022
 31656                                  	; ds <> cs 
 31657                                  	;mov	dx,[cs:top_of_cdss]
 31658                                  
 31659                                  	; 08/09/2023
 31660                                  	; ds = cs
 31661 00001FDB 8B0E[5203]              	mov	cx,[count]
 31662                                  	
 31663 00001FDF 8EDA                    	mov	ds,dx
 31664 00001FE1 8EC2                    	mov	es,dx
 31665                                  
 31666 00001FE3 31D2                    	xor	dx,dx
 31667                                  	; 08/09/2023
 31668                                  	;mov	cx,[cs:count]
 31669 00001FE5 B43F                    	mov	ah,3Fh
 31670                                  	;mov	ah,READ  ; 3Fh
 31671 00001FE7 F9                      	stc				;in case of int 24
 31672 00001FE8 CD21                    	int	21h			;function request
 31673 00001FEA 9C                      	pushf
 31674                                  
 31675                                  ; find the eof mark in the file. if present,then trim length.
 31676                                  
 31677 00001FEB 50                      	push	ax
 31678 00001FEC 57                      	push	di
 31679 00001FED 51                      	push	cx
 31680 00001FEE B01A                    	mov	al,1Ah			; eof mark
 31681 00001FF0 89D7                    	mov	di,dx			; point to buffer
 31682 00001FF2 E305                    	jcxz	puteol			; no chars
 31683 00001FF4 F2AE                    	repnz	scasb			; find end
 31684 00001FF6 7501                    	jnz	short puteol		; none found and count exhausted
 31685                                  
 31686                                  ; we found a 1a. back up
 31687                                  
 31688 00001FF8 4F                      	dec	di			; backup past 1Ah
 31689                                  
 31690                                  ;  just for the halibut, stick in an extra eol
 31691                                  
 31692                                  puteol:
 31693 00001FF9 B00D                    	mov	al,cr ; 0Dh
 31694 00001FFB AA                      	stosb
 31695 00001FFC B00A                    	mov	al,lf  ;0Ah
 31696 00001FFE AA                      	stosb
 31697 00001FFF 29D7                    	sub	di,dx			; difference moved
 31698                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31699                                  	;mov	[cs:count],di		; new count
 31700                                  
 31701                                  	; 11/12/2022	
 31702                                  	; 31/03/2019 - Retro DOS v4.0
 31703 00002001 0E                      	push	cs
 31704 00002002 1F                      	pop	ds
 31705                                  
 31706 00002003 893E[5203]              	mov	[count],di		; new count
 31707                                  
 31708 00002007 59                      	pop	cx
 31709 00002008 5F                      	pop	di
 31710 00002009 58                      	pop	ax
 31711                                  
 31712                                  	; 11/12/2022
 31713                                  	; 27/10/2022
 31714                                  	;push	cs
 31715                                  	;pop	ds
 31716                                  
 31717 0000200A 50                      	push	ax
 31718                                  	;mov	ah,CLOSE
 31719 0000200B B43E                    	mov	ah,3Eh
 31720 0000200D CD21                    	int	21h
 31721 0000200F 58                      	pop	ax
 31722 00002010 9D                      	popf
 31723 00002011 7204                    	jc	short conferr 		;if not we've got a problem
 31724 00002013 39C1                    	cmp	cx,ax
 31725 00002015 742C                    	jz	short getcom		;couldn't read the file
 31726                                  conferr:
 31727 00002017 BA[3044]                	mov	dx,config		;want to print config error
 31728 0000201A E86A23                  	call	badfil
 31729                                  	; 14/04/2024
 31730                                  endconv:	; 01/01/2023
 31731 0000201D C3                      	retn
 31732                                  
 31733                                  ;----------------------------------------------------------------------------
 31734                                  ;
 31735                                  ; entry : multi_pass
 31736                                  ;
 31737                                  ;             called to execute device=,install= commands
 31738                                  ;
 31739                                  ;----------------------------------------------------------------------------
 31740                                  
 31741                                  	; 27/10/2022
 31742                                  multi_pass:
 31743 0000201E 0E                      	push	cs
 31744 0000201F 1F                      	pop	ds
 31745                                  
 31746 00002020 803E[C902]0A            	cmp	byte [multi_pass_id],10
 31747                                  ;jae_endconv:
 31748 00002025 73F6                    	jae	short endconv 		; do nothing. just return.
 31749                                  
 31750                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31751 00002027 FF36[9F02]              	push	word [CONFBOT]
 31752                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31753                                  	;push	word [top_of_cdss]
 31754 0000202B 07                      	pop	es			; es -> confbot
 31755                                  
 31756 0000202C 8B36[5403]              	mov	si,[org_count]
 31757 00002030 8936[5203]              	mov	[count],si		; set count
 31758 00002034 31F6                    	xor	si,si ; 0
 31759 00002036 8936[5603]                      mov     [chrptr],si		; reset chrptr
 31760 0000203A 8936[AB02]                      mov     [linecount],si		; reset linecount
 31761                                  
 31762 0000203E E8CD20                  	call	getchr
 31763 00002041 EB06                    	jmp	short conflp
 31764                                  
 31765                                  	; 14/04/2024
 31766                                  	; 01/01/2023
 31767                                  ;endconv:
 31768                                  	;retn	
 31769                                  
 31770                                  getcom:
 31771                                  	; 03/01/2023
 31772                                  	; ds = cs
 31773 00002043 E84A15                          call    organize                ; organize the file
 31774 00002046 E8C520                  	call	getchr
 31775                                  conflp: 
 31776 00002049 72D2                    	jc	short endconv
 31777                                  
 31778 0000204B FF06[AB02]                      inc     word [linecount]	; increase linecount
 31779                                  
 31780                                  	; 08/09/2023
 31781 0000204F 30E4                    	xor	ah,ah ; 0
 31782                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 31783                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 31784 00002051 8826[D514]              	mov	[multdeviceflag],ah ; 0
 31785 00002055 8826[D814]              	mov	[setdevmarkflag],ah ; 0
 31786                                  
 31787 00002059 3C0A                    	cmp	al,lf			; linefeed?
 31788 0000205B 7448                    	je	short blank_line	;  then ignore this line.
 31789                                  
 31790                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31791                                  ; (SYSINIT:23CCh)
 31792                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31793                                  ;%if 0
 31794                                  
 31795                                  ;ifdef	MULTI_CONFIG
 31796                                  
 31797                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 31798                                  ;   number immediately following it....
 31799                                  
 31800 0000205D A2[D314]                        mov     [config_cmd],al         ; save original command code
 31801                                  	;and	al,NOT CONFIG_OPTION_QUERY
 31802 00002060 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 31803                                  
 31804                                  	; 08/09/2023
 31805 00002062 3826[D414]              	cmp	[config_multi],ah ; 0
 31806                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 31807 00002066 7427                            je      short not_final		; no, line number is not embedded
 31808                                  
 31809 00002068 50                              push    ax                      ;
 31810 00002069 E8A220                          call    getchr                  ; ignore end-of-image errors,
 31811 0000206C 88C4                            mov     ah,al                   ; because if there's an error
 31812 0000206E E89D20                          call    getchr                  ; fetching the line number that's
 31813 00002071 86E0                            xchg    al,ah                   ; supposed to be there, the next
 31814 00002073 A3[AB02]                        mov     [linecount],ax          ; getchr call will get the same error
 31815 00002076 58                              pop     ax
 31816                                  ;
 31817                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 31818                                  ;   which to obtain its original program name, it grovels through all of
 31819                                  ;   memory to find the filename that was used to exec it; it wants to find
 31820                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 31821                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 31822                                  ;   immediately before the filename, but since we are now storing line # info
 31823                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 31824                                  ;   spot.
 31825                                  ;
 31826                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 31827                                  ;   over the line number info, since we no longer need that info anyway. This
 31828                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 31829                                  ;   retrieved.
 31830                                  ;
 31831 00002077 803E[C902]02                    cmp	byte [multi_pass_id],2	; final pass?
 31832 0000207C 7211                            jb	short not_final		; no
 31833                                          ;test	word [install_flag],have_install_cmd
 31834 0000207E F606[CA02]01            	test	byte [install_flag],have_install_cmd ; 1
 31835 00002083 7407                            jz	short final		; no install cmds, so yes it is
 31836 00002085 803E[C902]03                    cmp	byte [multi_pass_id],3	; final pass?
 31837 0000208A 7203                            jb	short not_final		; no
 31838                                  final:                                  ;
 31839 0000208C 268804                  	mov	[es:si],al		; save backward-compatible command code
 31840                                  not_final:                              ;
 31841                                  ;endif
 31842                                  
 31843                                  ; 31/12/2022
 31844                                  ;%endif ; 27/10/2022
 31845                                  
 31846 0000208F 88C4                    	mov	ah,al
 31847 00002091 E87A20                  	call	getchr
 31848 00002094 7314                    	jnc	short tryi
 31849                                  
 31850 00002096 803E[C902]02            	cmp	byte [multi_pass_id],2
 31851                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 31852                                  	; 27/10/2022
 31853 0000209B 7380                    	jnb	short endconv	
 31854 0000209D E9A707                  	jmp	badop
 31855                                  	
 31856                                  coff:	
 31857                                  	; 11/12/2022
 31858                                  	; ds = cs
 31859                                  	;push	cs
 31860                                  	;pop	ds
 31861 000020A0 E86220                  	call	newline
 31862 000020A3 EBA4                    	jmp	short conflp	; 13/05/2019
 31863                                  
 31864                                  blank_line:
 31865 000020A5 E86620                  	call	getchr
 31866 000020A8 EB9F                    	jmp	short conflp
 31867                                  
 31868                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31869                                  ; 11/12/2022
 31870                                  ; (there is not a jump or call to here from anywhere!)
 31871                                  ;coff_p:
 31872                                  	;push	cs
 31873                                  	;pop	ds
 31874                                  
 31875                                  ;to handle install= commands,we are going to use multi-pass.
 31876                                  ;the first pass handles the other commands and only set install_flag when
 31877                                  ;it finds any install command. the second pass will only handle the
 31878                                  ;install= command.
 31879                                  
 31880                                  ;------------------------------------------------------------------------------
 31881                                  ;install command
 31882                                  ;------------------------------------------------------------------------------
 31883                                  
 31884                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31885                                  	; (SYSINIT:2250h)
 31886                                  tryi:
 31887 000020AA 803E[C902]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 31888 000020AF 7503                    	jne	short not_init_pass
 31889 000020B1 E98101                  	jmp	multi_try_doshi
 31890                                  not_init_pass:
 31891 000020B4 803E[C902]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 31892                                          ; 11/12/2022
 31893                                  	;je	short multi_pass_coff2	; now it is NOPs
 31894 000020B9 74E5                    	je	short coff
 31895                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31896                                  	;je	short multi_pass_coff	
 31897                                  					; This pass can be made use of if
 31898                                  					; we want do some config.sys process
 31899                                  					; after device drivers are loaded
 31900                                  					; and before install= commands
 31901                                  					; are processed
 31902                                  
 31903 000020BB 803E[C902]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 31904 000020C0 741D                    	je	short multi_try_i
 31905 000020C2 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 31906                                  	; 11/12/2022
 31907                                  	;je	short multi_pass_coff2
 31908 000020C5 74D9                    	je	short coff
 31909                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31910                                  	;je	short multi_pass_coff	
 31911                                  
 31912                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 31913                                  ;       but don't process them now.        
 31914                                          
 31915 000020C7 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 31916                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31917 000020CA 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 31918                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31919                                  	;jne	short tryb	
 31920                                  	
 31921                                  	;or	word [install_flag],have_install_cmd ; set the flag
 31922 000020CC 800E[CA02]01            	or	byte [install_flag],have_install_cmd ; 1
 31923                                  multi_pass_coff2:
 31924 000020D1 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 31925                                  
 31926                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31927                                  ; (SYSINIT:2448h)
 31928                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31929                                  ;%if 0
 31930                                  precheck_installhigh:
 31931 000020D3 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 31932 000020D6 756B                    	jne     short tryb		; carry on with normal processing
 31933                                  	;or	word [install_flag],have_install_cmd
 31934 000020D8 800E[CA02]01            	or	byte [install_flag],have_install_cmd ; 1
 31935 000020DD EBC1                    	jmp	short coff
 31936                                  ;%endif ; 27/10/2022
 31937                                  
 31938                                  multi_try_i:
 31939 000020DF 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 31940                                  	; 31/12/2022 - Retro DOS v4.2
 31941 000020E2 750A                    	jne	short multi_try_n	; no, check for installhigh
 31942                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31943                                  	;jne	short multi_pass_filter
 31944                                  
 31945                                  ; 31/12/2022
 31946                                  ;%if 1 
 31947                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31948                                  ;%if 0
 31949                                  ;ifdef	MULTI_CONFIG
 31950 000020E4 E8941E                  	call	query_user              ; query the user if config_cmd
 31951 000020E7 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31952                                  ;endif
 31953                                  ;%endif ; 27/10/2022
 31954                                  
 31955 000020E9 E8FBEF                  	call	do_install_exec 	;install it.
 31956 000020EC EBB2                    	jmp	short coff		;to handle next install= command.
 31957                                  
 31958                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31959                                  ; (SYSINIT:2463h)
 31960                                  ;%if 1
 31961                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31962                                  ;%if 0
 31963                                  
 31964                                  multi_try_n:
 31965 000020EE 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 31966 000020F1 7537                            jne	short multi_pass_filter	; no. ignore this.
 31967                                  ;ifdef	MULTI_CONFIG
 31968 000020F3 E8851E                          call    query_user              ; query the user if config_cmd
 31969 000020F6 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 31970                                  ;endif
 31971                                  
 31972                                  ;       The memory environment is in its normal DOS state, so do
 31973                                  ;       the standard calls to set the alloc strategy for loading high
 31974                                  
 31975 000020F8 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 31976 000020FB CD21                    	int	21h			;get alloc strategy
 31977 000020FD 89C3                    	mov	bx,ax
 31978 000020FF 53                              push    bx                      ; save for the return
 31979                                  
 31980 00002100 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 31981 00002104 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 31982 00002107 CD21                    	int	21h			;set alloc strategy
 31983                                  
 31984 00002109 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 31985 0000210C CD21                            int     21h                     ; get link state
 31986 0000210E 30E4                            xor     ah,ah                   ; clear top byte
 31987 00002110 50                              push    ax                      ; save for return
 31988                                  
 31989 00002111 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 31990 00002114 BB0100                  	mov	bx,1
 31991 00002117 CD21                    	int	21h			;link in UMBs
 31992                                  
 31993 00002119 E8CBEF                  	call	do_install_exec 	;install it.
 31994                                  
 31995 0000211C B80358                          mov     ax,(ALLOCOPER<<8)|3
 31996 0000211F 5B                              pop     bx                      ; recover original link state
 31997 00002120 CD21                            int     21h
 31998 00002122 5B                              pop     bx                      ; recover original alloc strategy
 31999 00002123 B80158                          mov     ax,(ALLOCOPER<<8)|1
 32000 00002126 CD21                            int     21h
 32001                                  
 32002                                  	;jmp	short coff		;to handle next install= command.
 32003                                  	; 01/01/2023
 32004 00002128 EBA7                    	jmp	short multi_pass_coff2
 32005                                  
 32006                                  ;%endif ; 27/10/2022
 32007                                  
 32008                                  multi_pass_filter:
 32009 0000212A 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 32010 0000212D 740A                    	je	short multi_pass_adjust
 32011 0000212F 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 32012 00002132 7405                    	je	short multi_pass_adjust
 32013 00002134 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 32014 00002137 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 32015                                  
 32016                                  multi_pass_adjust:			; these commands need to
 32017 00002139 FF0E[5603]              	dec	word [chrptr]		;  adjust chrptr,count
 32018 0000213D FF06[5203]              	inc	word [count]		;  for newline proc.
 32019                                  
 32020                                  multi_pass_coff:
 32021                                  	; 11/12/2022
 32022                                  	;jmp	short coff		; to handle next install= commands.
 32023                                  	; 01/01/2023
 32024 00002141 EB8E                    	jmp	short multi_pass_coff2
 32025                                  
 32026                                  ;------------------------------------------------------------------------------
 32027                                  ; buffer command
 32028                                  ;------------------------------------------------------------------------------
 32029                                  
 32030                                  ;******************************************************************************
 32031                                  ;									      *
 32032                                  ; function: parse the parameters of buffers= command.			      *
 32033                                  ;									      *
 32034                                  ; input :								      *
 32035                                  ;	es:si -> parameters in command line.				      *
 32036                                  ; output:								      *
 32037                                  ;	buffers set							      *
 32038                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 32039                                  ;	h_buffers set if secondary buffer cache specified.		      *
 32040                                  ;									      *
 32041                                  ; subroutines to be called:						      *
 32042                                  ;	sysinit_parse							      *
 32043                                  ; logic:								      *
 32044                                  ; {									      *
 32045                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 32046                                  ;	set dx,cx to 0; 						      *
 32047                                  ;	reset buffer_slash_x;						      *
 32048                                  ;	while (end of command line)					      *
 32049                                  ;	{ sysinit_parse;						      *
 32050                                  ;	  if (no error) then						      *
 32051                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 32052                                  ;		    buffer_slash_x = 1					      *
 32053                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 32054                                  ;			  buffers = result_val._$P_picked_val;		      *
 32055                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 32056                                  ;	  else	{show error message;error exit} 			      *
 32057                                  ;	};								      *
 32058                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 32059                                  ; };									      *
 32060                                  ;									      *
 32061                                  ;******************************************************************************
 32062                                  
 32063                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32064                                  	; (SYSINIT:229Ch)
 32065                                  tryb:
 32066 00002143 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 32067 00002146 755F                    	jne	short tryc
 32068                                  
 32069                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32070                                  ; (SYSINIT:24BFh)
 32071                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32072                                  ;%if 0
 32073                                  ;ifdef	MULTI_CONFIG
 32074 00002148 E8301E                  	call	query_user		; query the user if config_cmd
 32075 0000214B 725A                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 32076                                  ;endif
 32077                                  ;%endif ; 27/10/2022
 32078                                  
 32079                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32080                                  	; 18/12/2022
 32081 0000214D 31C9                    	xor	cx,cx
 32082                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 32083 0000214F 880E[841D]              	mov	[p_buffer_slash_x],cl ; 0
 32084                                  
 32085 00002153 BF[3D1D]                	mov	di,buf_parms
 32086                                  	;xor	cx,cx	; 18/12/2022
 32087                                  	; 03/01/2023
 32088                                  	;mov	dx,cx
 32089                                  do7:
 32090 00002156 E8CF06                  	call	sysinit_parse
 32091 00002159 7306                    	jnc	short if7		; parse error,
 32092                                  	;call	badparm_p		;  and show messages and end the search loop.
 32093                                  	;;jmp	short sr7
 32094                                  	; 31/12/2022
 32095                                  ;sr7:
 32096                                  	;jmp	coff
 32097                                  
 32098                                  	; 24/03/2025 - MiniDOS 1.0
 32099                                  	; 03/01/2023
 32100                                  	;jmp	badparm_p_coff
 32101                                  
 32102                                  ; 24/03/2025 - MiniDOS 1.0
 32103                                  %if 1
 32104                                  badparm_p_coff:
 32105 0000215B E8F506                  	call	badparm_p
 32106 0000215E E93FFF                  	jmp	coff
 32107                                  %endif
 32108                                  
 32109                                  if7:
 32110 00002161 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 32111 00002164 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 32112                                  	;cmp	word [result_val_swoff],switch_x
 32113 00002166 813E[881D][7D1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 32114                                  	;jne	short if11
 32115                                  	; 31/12/2022
 32116 0000216C 74E8                    	je	short do7 ;je short en11
 32117                                  
 32118                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 32119                                  	;jmp	short en11 ; 31/12/2022
 32120                                  if11:
 32121                                  	;mov	ax,[rv_dword]
 32122 0000216E A1[8A1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 32123 00002171 83F901                  	cmp	cx,1
 32124 00002174 7505                    	jne	short if13
 32125                                  
 32126 00002176 A3[801D]                	mov	[p_buffers],ax
 32127                                  	;jmp	short en11
 32128                                  	; 31/12/2022
 32129 00002179 EBDB                    	jmp	short do7
 32130                                  if13:
 32131 0000217B A3[821D]                	mov	[p_h_buffers],ax
 32132                                  en11:
 32133 0000217E EBD6                    	jmp	short do7
 32134                                  en7:
 32135 00002180 833E[801D]63            	cmp	word [p_buffers],99
 32136 00002185 760B                    	jbe	short if18
 32137                                  
 32138                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 32139                                  ;	jne	short if18
 32140                                  
 32141 00002187 E8C906                  	call	badparm_p
 32142 0000218A C706[821D]0000          	mov	word [p_h_buffers],0
 32143 00002190 EB12                    	jmp	short sr7
 32144                                  if18:
 32145 00002192 A1[801D]                	mov	ax,[p_buffers]	; we don't have any problem.
 32146 00002195 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 32147                                  
 32148 00002198 A1[821D]                	mov	ax,[p_h_buffers]
 32149 0000219B A3[9902]                	mov	[h_buffers],ax
 32150                                  
 32151                                  ;	mov	al,[p_buffer_slash_x]	; M016
 32152                                  ;	mov	[buffer_slash_x],al
 32153                                  
 32154 0000219E A1[AB02]                	mov	ax,[linecount]
 32155 000021A1 A3[B502]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 32156                                  	; 31/12/2022
 32157                                  	;jmp	short sr7
 32158                                  	; 03/01/2023
 32159                                  sr7:
 32160 000021A4 E9F9FE                  	jmp	coff
 32161                                  
 32162                                  ;------------------------------------------------------------------------------
 32163                                  ; break command
 32164                                  ;------------------------------------------------------------------------------
 32165                                  
 32166                                  ;****************************************************************************
 32167                                  ;									    *
 32168                                  ; function: parse the parameters of break = command.			    *
 32169                                  ;									    *
 32170                                  ; input :								    *
 32171                                  ;	es:si -> parameters in command line.				    *
 32172                                  ; output:								    *
 32173                                  ;	turn the control-c check on or off.				    *
 32174                                  ;									    *
 32175                                  ; subroutines to be called:						    *
 32176                                  ;	sysinit_parse							    *
 32177                                  ; logic:								    *
 32178                                  ; {									    *
 32179                                  ;	set di to brk_parms;						    *
 32180                                  ;	set dx,cx to 0; 						    *
 32181                                  ;	while (end of command line)					    *
 32182                                  ;	{ sysinit_parse;						    *
 32183                                  ;	  if (no error) then						    *
 32184                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 32185                                  ;		   set p_ctrl_break,on;					    *
 32186                                  ;	       else					  /*off 	 */ *
 32187                                  ;		   set p_ctrl_break,off;				    *
 32188                                  ;	  else {show message;error_exit};				    *
 32189                                  ;	};								    *
 32190                                  ;	if (no error) then						    *
 32191                                  ;	   dos function call to set ctrl_break check according to	    *
 32192                                  ; };									    *
 32193                                  ;									    *
 32194                                  ;****************************************************************************
 32195                                  
 32196                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32197                                  	; (SYSINIT:22FFh)
 32198                                  tryc:
 32199 000021A7 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 32200 000021AA 7538                    	jne	short trym
 32201                                  
 32202                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32203                                  ; (SYSINIT:2527h)
 32204                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32205                                  ;%if 0
 32206                                  ;ifdef	MULTI_CONFIG
 32207 000021AC E8CC1D                  	call	query_user              ; query the user if config_cmd
 32208 000021AF 7233                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 32209                                  ;endif
 32210                                  ;%endif ; 27/10/2022
 32211                                  
 32212 000021B1 BF[8E1D]                	mov	di,brk_parms
 32213 000021B4 31C9                    	xor	cx,cx
 32214                                  	; 03/01/2023
 32215                                  	;mov	dx,cx
 32216                                  do22:
 32217 000021B6 E86F06                  	call	sysinit_parse
 32218 000021B9 7302                    	jnc	short if22		; parse error
 32219                                  	;call	badparm_p		;  show message and end the search loop.
 32220                                  	;;jmp	short sr22
 32221                                  	; 31/12/2022
 32222                                  ;sr22:
 32223                                  	;jmp	coff
 32224                                  	; 03/01/2023
 32225 000021BB EB9E                    	jmp	badparm_p_coff
 32226                                  if22:
 32227 000021BD 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32228 000021C0 7415                    	je	short en22		; then end the $endloop
 32229                                  
 32230                                  	;cmp	byte [result_val_itag],1
 32231 000021C2 803E[871D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32232 000021C7 7507                    	jne	short if26
 32233                                  
 32234 000021C9 C606[B31D]01            	mov	byte [p_ctrl_break],1	; turn it on
 32235                                  	;jmp	short en26
 32236                                  	; 31/12/2022
 32237 000021CE EBE6                    	jmp	short do22
 32238                                  if26:
 32239 000021D0 C606[B31D]00            	mov	byte [p_ctrl_break],0	; turn it off
 32240                                  en26:
 32241 000021D5 EBDF                    	jmp	short do22		; we actually set the ctrl break
 32242                                  en22:
 32243 000021D7 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 32244 000021D9 B001                    	mov	al,1
 32245 000021DB 8A16[B31D]              	mov	dl,[p_ctrl_break]
 32246 000021DF CD21                    	int	21h
 32247                                  	; 31/12/2022
 32248                                  	;jmp	short sr22
 32249                                  	; 03/01/2023
 32250                                  sr22:
 32251 000021E1 E9BCFE                  	jmp	coff
 32252                                  
 32253                                  ; 24/03/2025 - MiniDOS 1.0
 32254                                  %if 0
 32255                                  badparm_p_coff:
 32256                                  	call	badparm_p
 32257                                  	jmp	coff
 32258                                  %endif
 32259                                  
 32260                                  ;------------------------------------------------------------------------------
 32261                                  ; multitrack command
 32262                                  ;------------------------------------------------------------------------------
 32263                                  
 32264                                  ;******************************************************************************
 32265                                  ;									      *
 32266                                  ; function: parse the parameters of multitrack= command.		      *
 32267                                  ;									      *
 32268                                  ; input :								      *
 32269                                  ;	es:si -> parameters in command line.				      *
 32270                                  ; output:								      *
 32271                                  ;	turn multrk_flag on or off.					      *
 32272                                  ;									      *
 32273                                  ; subroutines to be called:						      *
 32274                                  ;	sysinit_parse							      *
 32275                                  ; logic:								      *
 32276                                  ; {									      *
 32277                                  ;	set di to brk_parms;						      *
 32278                                  ;	set dx,cx to 0; 						      *
 32279                                  ;	while (end of command line)					      *
 32280                                  ;	{ sysinit_parse;						      *
 32281                                  ;	  if (no error) then						      *
 32282                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 32283                                  ;		   set p_mtrk,on;					      *
 32284                                  ;	       else					  /*off 	 */   *
 32285                                  ;		   set p_mtrk,off;					      *
 32286                                  ;	  else {show message;error_exit};				      *
 32287                                  ;	};								      *
 32288                                  ;	if (no error) then						      *
 32289                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 32290                                  ;									      *
 32291                                  ; };									      *
 32292                                  ;									      *
 32293                                  ;******************************************************************************
 32294                                  
 32295                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32296                                  trym:
 32297 000021E4 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 32298 000021E7 7573                    	jne	short tryu
 32299                                  
 32300                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32301                                  ; (SYSINIT:2569h)
 32302                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32303                                  ;%if 0
 32304                                  ;ifdef	MULTI_CONFIG
 32305 000021E9 E88F1D                  	call	query_user      ; query the user if config_cmd
 32306 000021EC 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 32307                                  ;endif
 32308                                  ;%endif	; 27/10/2022
 32309                                  
 32310 000021EE BF[5B1E]                	mov	di,mtrk_parms
 32311 000021F1 31C9                    	xor	cx,cx
 32312                                  	; 03/01/2023
 32313                                  	;mov	dx,cx
 32314                                  do31:
 32315 000021F3 E83206                  	call	sysinit_parse
 32316 000021F6 7303                    	jnc	short if31	; parse error
 32317                                  	;call	badparm_p	;  show message and end the search loop.
 32318                                  	;;jmp	short sr31
 32319                                  	; 31/12/2022
 32320                                  ;sr31:
 32321                                  	;jmp	coff
 32322                                  	; 03/01/2023
 32323 000021F8 E960FF                  	jmp	badparm_p_coff
 32324                                  if31:
 32325 000021FB 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 32326 000021FE 7415                    	je	short en31	; then end the $endloop
 32327                                  
 32328                                  	;cmp	byte [result_val_itag],1
 32329 00002200 803E[871D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32330 00002205 7507                    	jne	short if35
 32331                                  
 32332 00002207 C606[6F1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 32333                                  	;jmp	short en35
 32334                                  	; 31/12/2022
 32335 0000220C EBE5                    	jmp	short do31
 32336                                  if35:
 32337 0000220E C606[6F1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 32338                                  en35:
 32339 00002213 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 32340                                  en31:
 32341 00002215 1E                      	push	ds
 32342                                  	;;mov	ax,Bios_Data ; 70h
 32343                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 32344                                  	; 21/10/2022
 32345 00002216 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 32346 00002219 8ED8                    	mov	ds,ax
 32347                                  
 32348 0000221B 2E803E[6F1E]00          	cmp	byte [cs:p_mtrk],0
 32349 00002221 7508                    	jne	short if39
 32350                                  
 32351 00002223 C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 32352 00002229 EB06                    	jmp	short en39
 32353                                  if39:
 32354 0000222B C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 32355                                  en39:
 32356 00002231 1F                      	pop	ds
 32357                                  	; 31/12/2022
 32358                                  	;jmp	short sr31
 32359                                  	; 03/01/2023
 32360                                  sr31:
 32361 00002232 E96BFE                  	jmp	coff
 32362                                  
 32363                                  ;----------------------------------------------------------------------------
 32364                                  ; DOS=HIGH/LOW command
 32365                                  ;----------------------------------------------------------------------------
 32366                                  
 32367                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32368                                  multi_try_doshi:
 32369 00002235 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 32370 00002238 7403                    	je	short it_is_h
 32371                                  skip_it:
 32372 0000223A E9EDFE                  	jmp	multi_pass_filter
 32373                                  it_is_h:				; M003 - removed initing DevUMB
 32374                                  					;	 & runhigh
 32375                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32376                                  ; (SYSINIT:25C1h)
 32377                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32378                                  ;%if 0
 32379                                  ;ifdef	MULTI_CONFIG
 32380 0000223D E83B1D                  	call	query_user              ; query the user if config_cmd
 32381 00002240 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 32382                                  ;endif
 32383                                  ;%endif ; 27/10/2022
 32384                                  
 32385 00002242 BF[D11E]                	mov	di,dos_parms
 32386 00002245 31C9                    	xor	cx,cx
 32387                                  	; 03/01/2023
 32388                                  	;mov	dx,cx
 32389                                  h_do_parse:
 32390 00002247 E8DE05                  	call	sysinit_parse
 32391 0000224A 7303                    	jnc	short h_parse_ok	; parse error
 32392                                  h_badparm:
 32393                                  	; 03/01/2023
 32394                                  	;call	badparm_p		; show message and end the search loop.
 32395                                  	;;jmp	short h_end
 32396                                  	; 11/12/2022
 32397                                  ;h_end:
 32398                                  	;jmp	coff
 32399                                  	; 03/01/2023
 32400 0000224C E90CFF                  	jmp	badparm_p_coff	
 32401                                  h_parse_ok:
 32402 0000224F 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32403 00002252 7405                    	je	short h_end		; then end the $endloop
 32404 00002254 E85306                  	call	ProcDOS
 32405 00002257 EBEE                    	jmp	short h_do_parse
 32406                                  	; 11/12/2022
 32407                                  	; 03/01/2023
 32408                                  h_end:
 32409 00002259 E944FE                  	jmp	coff
 32410                                  
 32411                                  ;-----------------------------------------------------------------------------
 32412                                  ; devicehigh command
 32413                                  ;-----------------------------------------------------------------------------
 32414                                  
 32415                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32416                                  tryu:
 32417 0000225C 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 32418 0000225F 7554                    	jne	short tryd
 32419                                  
 32420                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32421                                  ; (SYSINIT:25E9h)
 32422                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32423                                  ;%if 0
 32424                                  ;ifdef	MULTI_CONFIG
 32425 00002261 E8171D                  	call	query_user              ; query the user if config_cmd
 32426 00002264 724F                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 32427                                  ;endif
 32428                                  ;%endif ; 28/10/2022
 32429                                  
 32430                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32431                                  ;%if 0
 32432                                  	; 01/01/2023
 32433                                  	; ds = cs
 32434                                  
 32435 00002266 E8D606                  	call	InitVar
 32436 00002269 E8AA0E                  	call	ParseSize		; process the size= option
 32437                                  	;jnc	short tryu_0
 32438                                  	; 31/12/2022
 32439 0000226C 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 32440                                  
 32441                                  ;%endif ; 28/10/2022
 32442                                  
 32443                                  ; 31/12/2022
 32444                                  %if 0
 32445                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32446                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 32447                                  	;mov	[cs:badparm_seg], es
 32448                                  	; 11/12/2022
 32449                                  	; ds = cs
 32450                                  	mov	[badparm_off], si
 32451                                  	mov	[badparm_seg], es
 32452                                  
 32453                                  	; 31/12/2022
 32454                                  	;call	ParseSize
 32455                                  	;jnc	short tryu_2	; 28/10/2022
 32456                                  	
 32457                                  	;call	badparm_p
 32458                                  	;jmp	coff
 32459                                  	; 03/01/2023
 32460                                  	jmp	badparm_p_coff
 32461                                  %endif
 32462                                  
 32463                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32464                                  ; (SYSINIT:2606h)
 32465                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32466                                  ;%if 0
 32467                                  tryu_0:
 32468                                  	;mov	ax,[cs:DevSizeOption]
 32469                                  	; 31/12/2022
 32470 0000226E A1[6C1F]                	mov	ax,[DevSizeOption] ; ds = cs
 32471 00002271 09C0                    	or	ax,ax
 32472 00002273 7510                    	jnz	short tryu_2
 32473                                  
 32474 00002275 E85907                  	call	ParseVar
 32475 00002278 730B                    	jnc	short tryu_2
 32476                                  tryu_1:
 32477                                  	; 31/12/2022
 32478                                  	; ds = cs
 32479 0000227A 8936[DA14]              	mov	[badparm_off], si
 32480 0000227E 8C06[DC14]              	mov	[badparm_seg], es
 32481                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 32482                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 32483                                  	
 32484                                  	;call	badparm_p		; so all we have to do is choke and
 32485                                  	;jmp	coff			; die, rather verbosely.
 32486                                  	; 03/01/2023
 32487 00002282 E9D6FE                  	jmp	badparm_p_coff
 32488                                  
 32489                                  ;%endif ; 28/10/2022
 32490                                  
 32491                                  tryu_2:	
 32492 00002285 56                      	push	si
 32493 00002286 06                      	push	es
 32494                                  
 32495                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 32496                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 32497                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 32498                                  tryu_3:
 32499 00002287 268A04                  	mov	al,[es:si]
 32500 0000228A 3C0D                    	cmp	al,cr
 32501                                  	; 14/04/2024
 32502                                  	;je	short tryu_4
 32503                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32504 0000228C 740C                    	je	short tryu_5
 32505 0000228E 3C0A                    	cmp	al,lf
 32506 00002290 740A                    	je	short tryu_4
 32507 00002292 E8541E                  	call	delim
 32508 00002295 7405                    	jz	short tryu_4
 32509 00002297 46                      	inc	si
 32510 00002298 EBED                    	jmp	short tryu_3
 32511                                  
 32512                                  	; 14/04/2024
 32513                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32514                                  tryu_5:
 32515 0000229A B020                    	mov     al,20h ; ' '   ; blank instead of cr
 32516                                  
 32517                                  tryu_4:	
 32518                                  	; 11/12/2022
 32519                                  	; ds = cs
 32520 0000229C A2[801F]                	mov	[DevSavedDelim],al
 32521                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 32522                                  					;  it with null
 32523                                  	; 18/12/2022
 32524 0000229F 29DB                    	sub	bx,bx
 32525 000022A1 26881C                  	mov	[es:si],bl ; 0
 32526                                   	;mov	byte [es:si],0
 32527                                  
 32528 000022A4 07                      	pop	es
 32529 000022A5 5E                      	pop	si	; 14/04/2024
 32530                                  
 32531                                  ;------------------------------------------------------------------------------
 32532                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32533                                  ;------------------------------------------------------------------------------
 32534                                  
 32535                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32536                                  ; (SYSINIT:2642h)
 32537                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32538                                  ;%if 0
 32539                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32540                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 32541                                  %if 1
 32542                                  	; 01/01/2023
 32543                                  	; ds = cs
 32544 000022A6 E8950B                  	call	UmbTest			; See if UMBs are around...
 32545                                  	; 01/01/2023
 32546                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 32547                                  	
 32548                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 32549                                  	; 31/12/2022
 32550                                  	; ds = cs, bx = 0
 32551                                  	;mov	byte [DeviceHi],bl ; 0
 32552                                  	;jmp	short LoadDevice
 32553                                  	; 01/01/2023
 32554 000022A9 7222                    	jc	short LoadDevice ; bl = 0
 32555                                  %endif
 32556                                  ;%endif
 32557                                  ;------------------------------------------------------------------------------
 32558                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32559                                  ;------------------------------------------------------------------------------
 32560                                  
 32561                                  NrmTst:
 32562                                  	; 11/12/2022
 32563                                  	; ds = cs
 32564                                  	;;mov	byte [cs:DeviceHi],0
 32565                                  	;mov	byte [DeviceHi],0
 32566                                  	; 18/12/2022
 32567                                  	; bx = 0
 32568 000022AB 381E[5C1F]              	cmp	[DevUMB],bl ; 0
 32569                                  	;cmp	byte [DevUMB],0
 32570                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 32571 000022AF 741C                    	je	short LoadDevice	; no, we don't
 32572                                  	;mov	byte [cs:DeviceHi],1
 32573                                  	; 11/12/2022
 32574                                  	;mov	byte [DeviceHi],1
 32575                                  	; 18/12/2022
 32576 000022B1 FEC3                    	inc	bl ; mov bl,1 ; (*)
 32577                                  	; 11/12/2022
 32578                                  	;jmp	short LoadDevice2	; 11/12/2022
 32579 000022B3 EB18                    	jmp	short LoadDevice
 32580                                  
 32581                                  ;------------------------------------------------------------------------------
 32582                                  ; device command
 32583                                  ;------------------------------------------------------------------------------
 32584                                  
 32585                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32586                                  	; (SYSINIT:2665h)
 32587                                  
 32588                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32589                                  	; (SYSINIT:2401h)
 32590                                  tryd:
 32591                                  	; 11/12/2022
 32592                                  	;xor 	bx,bx ; 31/12/2022
 32593                                  	;
 32594 000022B5 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 32595 000022B8 7403                    	je	short gotd
 32596                                  skip_it2:
 32597 000022BA E9BA02                  	jmp	tryq
 32598                                  gotd:
 32599                                  
 32600                                  ; 31/12/2022 - Retro DOS v4.2
 32601                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32602                                  ;%if 0
 32603                                  ;ifdef	MULTI_CONFIG
 32604 000022BD E8BB1C                  	call	query_user              ; query the user if config_cmd
 32605 000022C0 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 32606                                  ;endif
 32607                                  ;%endif ; 28/10/2022
 32608                                  
 32609                                  	; 31/12/2022
 32610 000022C2 29DB                    	sub	bx,bx
 32611                                  	; bx = 0
 32612                                  	; 11/12/2022
 32613                                  	; ds = cs
 32614                                  	;mov	byte [DeviceHi],0
 32615                                  	;mov	word [DevSizeOption],0
 32616 000022C4 891E[6C1F]              	mov	[DevSizeOption],bx ; 0
 32617 000022C8 C606[801F]20            	mov	byte [DevSavedDelim],' '
 32618                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 32619                                  	;mov	word [cs:DevSizeOption],0
 32620                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 32621                                  					;  be replaced with a ' '
 32622                                  LoadDevice:                             ; device= or devicehigh= command.
 32623                                  	; 11/12/2022
 32624                                  	;mov	byte [DeviceHi],0
 32625 000022CD 881E[6B1F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 32626                                  LoadDevice2:
 32627                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 32628                                  	;
 32629                                  	;push    cs
 32630                                          ;pop     ds
 32631                                  	;
 32632                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 32633                                  	;mov	[bpb_addr+2],es
 32634                                  	;
 32635                                  	;mov	[DevCmdLine],si		; save it for ourself
 32636                                  	;mov	[DevCmdLine+2],es
 32637                                  	;
 32638                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 32639                                  
 32640                                  	; 11/12/2022
 32641                                  	; ds = cs
 32642                                  	;mov	bx,cs
 32643                                  	;mov	ds,bx
 32644                                  
 32645                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 32646 000022D1 8936[7803]              	mov	[bpb_addr],si
 32647                                  	;mov	[cs:bpb_addr+2],es
 32648 000022D5 8C06[7A03]              	mov	[bpb_addr+2],es
 32649                                  
 32650                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 32651 000022D9 8936[7C1F]              	mov	[DevCmdLine],si
 32652                                  	;mov	[cs:DevCmdLine+2],es	
 32653 000022DD 8C06[7E1F]              	mov	[DevCmdLine+2],es
 32654                                  
 32655                                  	; 31/12/2022 - Retro DOS v4.2
 32656 000022E1 C606[D914]00            	mov	byte [driver_units],0	; clear total block units for driver	
 32657                                  
 32658 000022E6 E8681E                  	call	round
 32659                                  	
 32660 000022E9 E8360D                  	call	SizeDevice
 32661 000022EC 723F                    	jc	short BadFile
 32662                                  
 32663                                  	; 11/12/2022
 32664                                  	; ds = cs
 32665                                  
 32666                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 32667                                  
 32668                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32669                                  ; (SYSINIT:26A4h)
 32670                                  
 32671                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32672                                  ;%if 0
 32673 000022EE C606[5B1F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 32674                                  
 32675                                  	; 22/07/2023
 32676                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 32677 000022F3 800E[6B1F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 32678                                  	; 10/07/2023
 32679                                  	;or	al,al
 32680 000022F8 741E                    	jz	short DevConvLoad	; the actual load.
 32681                                  
 32682                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 32683 000022FA A0[191F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 32684                                  
 32685 000022FD 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 32686 000022FF 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 32687                                  
 32688 00002301 FE0E[5B1F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 32689                                  
 32690 00002305 E8FE08                  	call	GetLoadSize		; Returns size of first UMB specified
 32691 00002308 09C0                    	or	ax,ax
 32692 0000230A 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 32693                                  
 32694 0000230C 3B06[4D1F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 32695 00002310 7D06                    	jge	short DevConvLoad
 32696                                  tryd_1:
 32697 00002312 A1[4D1F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 32698 00002315 E8FA08                  	call	StoLoadSize		; minsize for load UMB.
 32699                                  
 32700                                  ;%endif ; 28/10/2022
 32701                                  
 32702                                  ; - End DeviceHigh primary logic changes --------------------------------------
 32703                                  
 32704                                  DevConvLoad:
 32705                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32706 00002318 E80B0C                  	call	InitDevLoad
 32707                                  
 32708                                  	; 11/12/2022
 32709                                  	; ds = cs
 32710 0000231B A1[4F1F]                	mov	ax,[DevLoadAddr]
 32711 0000231E 0306[4D1F]              	add	ax,[DevSize]
 32712 00002322 7206                    	jc	short NoMem
 32713 00002324 3906[511F]              	cmp	[DevLoadEnd],ax
 32714 00002328 7315                    	jae	short LoadDev
 32715                                  	
 32716                                  	; 11/12/2022
 32717                                  	;mov	ax,[cs:DevLoadAddr]
 32718                                  	;add	ax,[cs:DevSize]
 32719                                  	;jc	short NoMem
 32720                                  	;cmp	[cs:DevLoadEnd],ax
 32721                                  	;jae	short LoadDev
 32722                                  NoMem:
 32723                                  	; 11/12/2022
 32724                                  	; ds = cs
 32725                                  	;jmp	mem_err
 32726 0000232A E9631E                  	jmp	mem_err2
 32727                                  
 32728                                  BadFile:
 32729                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32730                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 32731                                  	;;cmp	byte [es:si],' '
 32732                                          ;;jae	short tryd_2
 32733                                  	; 31/12/2022	
 32734                                  	;cmp	byte [es:si],0Dh	; cr
 32735                                          ;jne	short tryd_2
 32736                                  	;jmp	badop
 32737                                  	; 31/12/2022
 32738                                  	; ds = cs
 32739                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32740                                  	; (SYSINIT:26E6h)
 32741 0000232D E8530D                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 32742 00002330 26803C20                	cmp	byte [es:si],' ' 
 32743                                  	;cmp	byte [es:si],20h ; space
 32744 00002334 7303                    	jnb	short tryd_2
 32745 00002336 E90E05                  	jmp	badop
 32746                                  tryd_2:
 32747 00002339 E84F20                  	call	badload
 32748 0000233C E961FD                  	jmp	coff
 32749                                  
 32750                                  LoadDev:
 32751 0000233F 06                      	push	es
 32752 00002340 1F                      	pop	ds
 32753                                  
 32754 00002341 89F2                    	mov	dx,si			;ds:dx points to file name
 32755 00002343 E8210D                  	call	ExecDev			; load device driver using exec call
 32756                                  badldreset:
 32757 00002346 1E                      	push	ds
 32758 00002347 07                      	pop	es			;es:si back to config.sys
 32759 00002348 0E                      	push	cs
 32760 00002349 1F                      	pop	ds			;ds back to sysinit
 32761 0000234A 72E1                    	jc	short BadFile
 32762                                  goodld:
 32763                                  	; 11/12/2022
 32764                                  	; ds = cs
 32765                                  
 32766 0000234C 06                      	push	es ; +	; 31/12/2022
 32767 0000234D 56                      	push	si ; ++
 32768 0000234E E8430D                  	call	RemoveNull
 32769 00002351 06                      	push	es
 32770 00002352 56                      	push	si
 32771                                  
 32772 00002353 0E                      	push	cs
 32773 00002354 07                      	pop	es
 32774                                  
 32775 00002355 1E                      	push	ds ; **  ; ds = cs
 32776 00002356 56                      	push	si
 32777                                  
 32778                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 32779                                  	; 31/12/2022
 32780                                  	; ds = cs
 32781 00002357 C536[531F]              	lds	si,[DevEntry]
 32782                                  
 32783                                  	;test	word [si+4],8000h
 32784                                  	; 11/12/2022
 32785 0000235B F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 32786                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 32787 0000235F 7514                    	jnz	short got_device_com_cont   ; no.
 32788                                  
 32789 00002361 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 32790                                  	;cmp	byte [si+32],26
 32791 00002366 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 32792 0000236A 7209                    	jb	short got_device_com_cont
 32793                                  
 32794 0000236C 5E                      	pop	si
 32795 0000236D 1F                      	pop	ds ; **
 32796                                  
 32797 0000236E 5E                      	pop	si			; clear the stack
 32798 0000236F 07                      	pop	es
 32799                                  
 32800                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32801                                  	;call	RetFromUM
 32802                                  	; 31/12/2022
 32803                                  	; ds = cs ; **
 32804 00002370 E8100D                  	call	RetFromUM		; Do this before we leave
 32805                                  
 32806                                  	;jmp	short badnumblock
 32807                                  	; 31/12/2022
 32808 00002373 EB73                    	jmp	short badnumblock2  ; ds = cs
 32809                                  
 32810                                  got_device_com_cont:
 32811 00002375 5E                      	pop	si
 32812 00002376 1F                      	pop	ds
 32813                                  
 32814                                  	; 11/12/2022
 32815                                  	; ds = cs
 32816                                  
 32817 00002377 E85305                  	call	LieInt12Mem
 32818 0000237A E8B005                  	call	UpdatePDB		; update the PSP:2 value M020
 32819                                  
 32820                                  	; 11/12/2022
 32821                                  	; ds = cs
 32822                                  	; 08/09/2023
 32823 0000237D 31C0                    	xor	ax, ax ; 0
 32824 0000237F 3806[D514]              	cmp	byte [multdeviceflag],al ; 0
 32825                                  	;cmp	byte [multdeviceflag],0
 32826                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 32827                                  					;  driver in the file ; M027
 32828 00002383 750B                    	jne	short skip_pass_limit	;		      ; M027
 32829                                  
 32830                                  	; 11/12/2022
 32831                                  	; ds = cs
 32832                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 32833                                  	;mov	bx,[cs:DevLoadEnd]
 32834                                  	;mov	[cs:break_addr+2],bx
 32835                                  
 32836                                  	;mov	word [break_addr],0
 32837                                  	; 08/09/2023
 32838 00002385 A3[7403]                	mov	[break_addr],ax ; 0
 32839 00002388 8B1E[511F]              	mov	bx,[DevLoadEnd]
 32840 0000238C 891E[7603]              	mov	[break_addr+2],bx
 32841                                  
 32842                                  skip_pass_limit:
 32843                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 32844                                  ;	number of installed devices (including DblSpace drives) where
 32845                                  ;	"drivenumber" is the number that the next block device will
 32846                                  ;	be assigned to. Because some naughty device drivers (like
 32847                                  ;	interlnk) look at the internal DOS variable instead of the
 32848                                  ;	value we pass it, we'll temporarily stick our value into
 32849                                  ;	DOS DATA while we're initializing the device drivers.
 32850                                  ;
 32851                                  ;	Note that this will make it impossible for this device
 32852                                  ;	driver to access the DblSpace drive letters, whether
 32853                                  ;	they are swapped-hosts or unswapped compressed drives,
 32854                                  ;	during its initialization phase.
 32855                                  
 32856                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32857                                  ; (SYSINIT:2752h)
 32858                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32859                                  ;%if 0
 32860                                  	; 31/12/2022
 32861                                  	;push	ds
 32862                                  	
 32863                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32864                                  	; 31/12/2022
 32865                                  	; ds = cs
 32866                                  	; 08/09/2023
 32867                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32868                                  
 32869                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 32870                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 32871                                  	;mov	ah,al
 32872                                  
 32873                                  	; 08/09/2023
 32874                                  	; ds = cs
 32875 00002390 A0[7C03]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 32876 00002393 A2[7C03]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 32877 00002396 88C4                    	mov	ah,al
 32878 00002398 C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 32879                                  
 32880 0000239C 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 32881                                  	; 31/12/2022
 32882                                  	;pop	ds
 32883                                  	
 32884 0000239F 50                      	push	ax			; save real sysi_numio/ncds in ax
 32885                                  
 32886                                  ;%endif ; 29/10/2022
 32887                                  
 32888                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32889                                  	; (SYSINIT:24B9h)
 32890                                  
 32891 000023A0 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 32892 000023A3 E8F31D                  	call	calldev 		; calldev (sdevstrat);
 32893 000023A6 BB0800                  	mov	bx,SYSDEV.INT ; 8
 32894 000023A9 E8ED1D                  	call	calldev 		; calldev (sdevint);
 32895                                  
 32896                                  	; 11/12/2022
 32897                                  	; ds <> cs (from calldev) ; 31/12/2022
 32898                                  
 32899                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32900                                  ; (SYSINIT:2773h)
 32901                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32902                                  ;%if 0
 32903 000023AC 58                      	pop	ax			; get real sysi_numio value
 32904                                  	; 31/12/2022
 32905                                  	;push	ds
 32906 000023AD 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 32907 000023B2 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 32908                                  	; 31/12/2022
 32909                                  	;pop	ds
 32910                                  
 32911                                  ;%endif ; 29/10/2022
 32912                                  
 32913                                  	; 11/12/2022
 32914 000023B5 0E                      	push	cs
 32915 000023B6 1F                      	pop	ds
 32916                                  
 32917 000023B7 E84105                  	call	TrueInt12Mem
 32918                                  
 32919                                  	; 11/12/2022
 32920                                  	; ds = cs
 32921                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 32922                                  	;mov	[cs:DevBrkAddr],ax
 32923                                  	;mov	ax,[cs:break_addr+2]
 32924                                  	;mov	[cs:DevBrkAddr+2],ax
 32925 000023BA A1[7403]                	mov	ax,[break_addr]	
 32926 000023BD A3[571F]                	mov	[DevBrkAddr],ax
 32927 000023C0 A1[7603]                	mov	ax,[break_addr+2]
 32928 000023C3 A3[591F]                	mov	[DevBrkAddr+2],ax
 32929                                  
 32930                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32931                                  	;call	RetFromUM		; There we go... all done.
 32932                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32933                                  	; (SYSINIT:2791h)
 32934 000023C6 E8BA0C                  	call	RetFromUM		; There we go... all done.	
 32935                                  
 32936                                  	; 31/12/2022
 32937                                  	; ds = cs
 32938                                  
 32939                                  	; 11/12/2022
 32940 000023C9 803E[5C1F]00            	cmp	byte [DevUMB],0	
 32941                                  	;cmp	byte [cs:DevUMB],0
 32942 000023CE 7403                    	je	short tryd_3
 32943 000023D0 E8A50E                  	call	AllocUMB
 32944                                  	; 31/12/2022
 32945                                  	; ds = cs
 32946                                  tryd_3:
 32947                                  
 32948                                  ;ifndef ROMDOS
 32949                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 32950                                  
 32951                                  	; 11/12/2022
 32952                                  	; ds = cs
 32953                                  	
 32954                                  	;cmp	byte [cs:runhigh],0FFh
 32955 000023D3 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 32956 000023D8 7503                    	jne	short tryd_4
 32957                                  	
 32958                                  	; 11/12/2022
 32959                                  	; ds = cs
 32960 000023DA E89FE5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 32961                                  tryd_4:
 32962                                  ;endif ; ROMDOS
 32963                                  
 32964 000023DD 5E                      	pop	si
 32965 000023DE 1F                      	pop	ds
 32966 000023DF C60400                  	mov	byte [si],0		; *p = 0;
 32967                                  
 32968 000023E2 0E                      	push	cs
 32969 000023E3 1F                      	pop	ds
 32970                                  
 32971 000023E4 EB1F                    	jmp	short was_device_com
 32972                                  
 32973                                  ;----------------------------------------------------------------------------
 32974                                  
 32975                                  ; 02/04/2019 - Retro DOS v4.0
 32976                                  
 32977                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32978                                  ; (SYSINIT:27B3h)
 32979                                  
 32980                                  badnumblock:
 32981 000023E6 0E                      	push	cs
 32982 000023E7 1F                      	pop	ds
 32983                                  badnumblock2:	; 31/12/2022 (ds=cs)
 32984 000023E8 BA[B64A]                	mov	dx,badblock
 32985 000023EB E8C51F                  	call	print
 32986                                  
 32987                                  ;------ fall thru -----------------------------------------------------------
 32988                                  
 32989                                  	; 31/12/2022 - Retro DOS v4.2
 32990                                  
 32991                                  erase_dev_do:				; modified to show message "error in config.sys..."
 32992                                  	
 32993                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 32994                                  				; (Note: 'call CheckDoubleSpace'
 32995                                  				; has been removed at 'erase_dev_do:' pos
 32996                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 32997                                  				; Erdogan Tan - 10/07/2023
 32998 000023EE 5E                      	pop	si ; ++
 32999 000023EF 07                      	pop	es ; + ; 31/12/2022
 33000                                  
 33001 000023F0 0E                      	push	cs
 33002 000023F1 1F                      	pop	ds
 33003                                  
 33004                                  skip1_resetmemhi:
 33005                                  	; 11/12/2022
 33006                                  	; ds = cs
 33007 000023F2 833E[7D03]00            	cmp	word [configmsgflag],0
 33008                                  	;cmp	word [cs:configmsgflag],0
 33009 000023F7 7409                    	je	short no_error_line_msg
 33010                                  
 33011 000023F9 E87F04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 33012                                  	; 11/12/2022
 33013                                  	; ds = cs
 33014                                  	;mov	word [cs:configmsgflag],0
 33015 000023FC C706[7D03]0000          	mov	word [configmsgflag],0	; set the default value again.
 33016                                  
 33017                                  no_error_line_msg:
 33018 00002402 E99BFC                  	jmp	coff
 33019                                  
 33020                                  ;----------------------------------------------------------------------------
 33021                                  
 33022                                  was_device_com:
 33023                                  	; 14/12/2022
 33024                                  	; ds = cs
 33025 00002405 A1[591F]                	mov	ax,[DevBrkAddr+2]
 33026                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 33027 00002408 3B06[511F]              	cmp	ax,[DevLoadEnd]
 33028                                  	;cmp	ax,[cs:DevLoadEnd]
 33029 0000240C 7605                    	jbe	short breakok
 33030                                  
 33031 0000240E 5E                      	pop	si
 33032 0000240F 07                      	pop	es
 33033 00002410 E91AFF                  	jmp	BadFile
 33034                                  
 33035                                  breakok:
 33036                                  	; 14/12/2022
 33037                                  	; ds = cs
 33038 00002413 C43E[6D02]              	les	di,[DOSINFO] 
 33039 00002417 C516[531F]              	lds	dx,[DevEntry]
 33040                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 33041 0000241B 89D6                    	mov	si,dx
 33042                                  
 33043                                  	; 14/11/2022
 33044                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 33045                                  
 33046                                  	; 14/12/2022
 33047                                  	; ds <> cs
 33048                                  	
 33049                                  	;mov	ax,[si+4]
 33050 0000241D 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 33051                                  	; 12/12/2022
 33052 00002420 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 33053                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 33054 00002423 7426                    	jz	short isblock
 33055                                  
 33056                                  ;------ lets deal with character devices
 33057                                  
 33058 00002425 2E800E[D814]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33059 0000242B E8990C                  	call	DevSetBreak		;go ahead and alloc mem for device
 33060                                  jc_edd:
 33061 0000242E 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 33062                                  
 33063                                  	; 12/12/2022
 33064 00002430 A801                    	test	al,ISCIN
 33065                                  	;test	ax,ISCIN ; 1		;is it a console in?
 33066 00002432 7408                    	jz	short tryclk
 33067                                  
 33068 00002434 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 33069 00002438 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 33070                                  tryclk: 
 33071                                  	; 12/12/2022
 33072 0000243C A808                    	test	al,ISCLOCK
 33073                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 33074 0000243E 7408                    	jz	short golink
 33075                                  
 33076 00002440 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 33077 00002444 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 33078                                  golink: 
 33079 00002448 E9DF00                  	jmp	linkit
 33080                                  
 33081                                  ;------ deal with block device drivers
 33082                                  
 33083                                  isblock:
 33084 0000244B 2EA0[7303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 33085 0000244F 08C0                    	or	al,al
 33086 00002451 749B                    	jz	short erase_dev_do
 33087                                  	;mov	[si+10],al
 33088 00002453 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 33089                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33090                                  	;add	[cs:driver_units],al
 33091                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33092 00002456 2E0006[D914]            	add	[cs:driver_units],al	; keep total for all drivers in file
 33093                                  perdrv:
 33094 0000245B 98                      	cbw				; warning no device > 127 units
 33095 0000245C 89C1                    	mov	cx,ax
 33096 0000245E 88E6                    	mov	dh,ah
 33097                                  	;mov	dl,[es:di+32]
 33098 00002460 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 33099 00002464 88D4                    	mov	ah,dl
 33100 00002466 00C4                    	add	ah,al			; check for too many devices
 33101 00002468 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 33102 0000246B 7603                    	jbe	short ok_block
 33103 0000246D E976FF                  	jmp	badnumblock
 33104                                  
 33105                                  ok_block:
 33106 00002470 2E800E[D814]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33107 00002476 E84E0C                  	call	DevSetBreak		; alloc the device
 33108 00002479 72B3                    	jc	short jc_edd
 33109 0000247B 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 33110                                  
 33111 0000247F 2E0006[7C03]            	add	[cs:drivenumber],al	; remember amount for next device
 33112 00002484 2EC51E[7803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 33113                                  perunit:
 33114 00002489 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 33115                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 33116                                  	; 11/12/2022
 33117 0000248E 26C46E00                	les	bp,[es:bp]
 33118                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33119                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 33120                                  scandpb:
 33121                                  	;cmp	word [es:bp+25],-1
 33122 00002492 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 33123 00002497 7406                    	je	short foundpb
 33124                                  	;les	bp,[es:bp+25]
 33125 00002499 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 33126 0000249D EBF3                    	jmp	short scandpb
 33127                                  foundpb:
 33128 0000249F 2EA1[571F]              	mov	ax,[cs:DevBrkAddr]
 33129 000024A3 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 33130 000024A7 2EA1[591F]              	mov	ax,[cs:DevBrkAddr+2]
 33131 000024AB 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 33132                                  
 33133 000024AF 2EC42E[571F]            	les	bp,[cs:DevBrkAddr]
 33134 000024B4 2E8306[571F]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 33135                                  				; 08/09/2023
 33136                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 33137 000024BA E8E90B                  	call	RoundBreakAddr
 33138                                  
 33139 000024BD 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 33140 000024C3 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 33141                                  
 33142 000024C8 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 33143 000024CA 43                      	inc	bx
 33144 000024CB 43                      	inc	bx			;point to next guy
 33145                                  	;mov	[es:bp+DPB.DRIVE],dx
 33146                                  	; 11/12/2022
 33147 000024CC 26895600                	mov	[es:bp],dx ; 13/05/2019
 33148                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33149                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 33150                                  
 33151                                  	; 13/04/2024 - Retro DOS v5.0
 33152                                  	; PCDOS 7.1 IBMBIO.COM
 33153                                  	;;;
 33154 000024D0 52                      	push	dx
 33155 000024D1 51                      	push	cx		; initialize FAT32 extended DPB parameters/fields
 33156 000024D2 BA5241                  	mov	dx,4152h	; 'AR' signature for FAT32 extended DPB
 33157 000024D5 31C9                    	xor	cx,cx	; 0
 33158                                  	;mov	[es:bp+1Dh],cx
 33159 000024D7 26894E1D                	mov	[es:bp+DPB.NEXT_FREE],cx ; last allocated cluster #
 33160                                  	;cmp	[si+0Bh],cx	; BPB.fatsecs16 
 33161 000024DB 394C0B                  	cmp	[si+A_BPB.SECTORSPERFAT],cx ; 0
 33162 000024DE 7514                    	jnz	short set_dpb	; FAT DPB (33 bytes)   -jnz-
 33163                                  				; FAT32 DPB (61 bytes) -jz-
 33164                                  	;mov	[es:bp+39h],cx
 33165 000024E0 26894E39                	mov	[es:bp+DPB.FAT32_NXTFREE],cx ; 0
 33166                                  	;mov	[es:bp+3Bh],cx
 33167 000024E4 26894E3B                	mov	[es:bp+DPB.FAT32_NXTFREE+2],cx ; 0
 33168 000024E8 49                      	dec	cx	; 0FFFFh ; -1
 33169                                  	;mov	[es:bp+1Fh],cx
 33170 000024E9 26894E1F                	mov	[es:bp+DPB.FREE_CNT],cx ; -1 = unknown
 33171                                  	;mov	[es:bp+21h],cx
 33172 000024ED 26894E21                	mov	[es:bp+DPB.FREE_CNT+2],cx ; -1 = unknown
 33173 000024F1 B95845                  	mov	cx,4558h       ; 'EX' signature for FAT32 extended DPB
 33174                                  set_dpb:
 33175                                  	;;;
 33176                                  
 33177 000024F4 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 33178 000024F6 CD21                    	int	21h
 33179                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 33180                                  			; DS:SI -> BPB (BIOS Parameter Block)
 33181                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 33182                                  	; 13/04/2024
 33183                                  	;;;
 33184 000024F8 59                      	pop	cx
 33185 000024F9 5A                      	pop	dx
 33186                                  	;;;
 33187                                  
 33188                                  	;mov	ax,[es:bp+2]
 33189 000024FA 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 33190 000024FE 06                      	push	es
 33191 000024FF 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 33192                                  	;cmp	ax,[es:di+10h]
 33193 00002504 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 33194 00002508 07                      	pop	es
 33195                                  	; 13/04/2024
 33196                                  	;jna	short iblk_1
 33197                                  	;jmp	bad_bpb_size_sector
 33198                                  	; 29/10/2022
 33199 00002509 775E                    	ja	short bad_bpb_size_sector
 33200                                  iblk_1:
 33201 0000250B 1E                      	push	ds
 33202 0000250C 52                      	push	dx
 33203                                  
 33204 0000250D 2EC516[531F]            	lds	dx,[cs:DevEntry]
 33205                                  	;mov	[es:bp+13h],dx
 33206 00002512 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 33207                                  	;mov	[es:bp+15h],ds
 33208 00002516 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 33209                                  
 33210 0000251A 5A                      	pop	dx
 33211 0000251B 1F                      	pop	ds
 33212                                  
 33213 0000251C 42                      	inc	dx
 33214 0000251D FEC6                    	inc	dh
 33215                                  	;loop	perunit
 33216                                  	; 13/04/2024
 33217                                  	;;;
 33218 0000251F 49                      	dec	cx		; cx = cx - 1
 33219                                  				; cx = remain count from [cs:unitcount]
 33220 00002520 7403                    	jz	short iblk_2	; cx = 0 -> done
 33221 00002522 E964FF                  	jmp	perunit		; loop until cx is 0
 33222                                  iblk_2:
 33223                                  	;;;
 33224                                  	
 33225 00002525 0E                      	push	cs
 33226 00002526 1F                      	pop	ds
 33227                                  
 33228 00002527 E85DE7                  	call	TempCDS 		; set cds for new drives
 33229                                  	; 31/12/2022
 33230                                  	; ds <> cs
 33231                                  linkit:
 33232 0000252A 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 33233 0000252F 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 33234 00002533 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 33235                                  
 33236 00002537 2EC536[531F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 33237 0000253C 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 33238 00002540 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 33239 00002544 8B04                    	mov	ax,[si]			;get pointer to next device
 33240 00002546 2EA3[531F]              	mov	[cs:DevEntry],ax	;and save it
 33241                                  
 33242 0000254A 890C                    	mov	[si],cx			;link in the driver
 33243 0000254C 895402                  	mov	[si+2],dx
 33244                                  enddev:
 33245 0000254F 5E                      	pop	si
 33246 00002550 07                      	pop	es
 33247 00002551 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 33248 00002552 740B                    	jz	short coffj3
 33249                                  
 33250 00002554 2EFE06[D514]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 33251 00002559 E88D0B                  	call	DevBreak		; M009
 33252                                  	; 11/12/2022
 33253                                  	; ds = cs (DevBreak)
 33254                                  
 33255                                  	; 03/04/2019 - Retro DOS v4.0
 33256                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 33257 0000255C E9EDFD                  	jmp	goodld			; otherwise pretend we loaded it in
 33258                                  coffj3: 
 33259                                  	; 18/12/2022
 33260                                  	; ax = 0
 33261 0000255F 2EA2[D514]              	mov	[cs:multdeviceflag],al ; 0
 33262                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 33263 00002563 E8830B                  	call	DevBreak
 33264                                  	; 11/12/2022
 33265                                  	; ds = cs (DevBreak)
 33266                                  	
 33267                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33268                                  	; (SYSINIT:2919h)
 33269                                  	; 11/07/2023
 33270                                  	; 07/03/2025 - MiniDOS 1.0
 33271                                  	;call	CheckProtmanArena
 33272                                  	
 33273                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 33274                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 33275                                  ;					;  created a bogus arena to try
 33276                                  ;					;  to protect some of its resident-
 33277                                  ;					;  init code.
 33278                                  	; 13/04/2024 - Retro DOS v5.0
 33279                                  	; PCDOS 7.1 IBMBIO.COM
 33280                                  	;;call	CheckDoubleSpace
 33281                                  	
 33282                                  	; 07/03/2025 - MiniDOS 1.0
 33283 00002566 E937FB                  	jmp	coff
 33284                                  
 33285                                  ;----------------------------------------------------------------------------
 33286                                  
 33287                                  ; 03/04/2019 - Retro DOS v4.0
 33288                                  
 33289                                  bad_bpb_size_sector:
 33290 00002569 5E                      	pop	si
 33291 0000256A 07                      	pop	es
 33292 0000256B BA[D849]                	mov	dx,badsiz_pre
 33293 0000256E BB[B649]                	mov	bx,crlfm
 33294 00002571 E81D1E                  	call	prnerr
 33295                                  
 33296 00002574 E929FB                  	jmp	coff
 33297                                  
 33298                                  ;------------------------------------------------------------------------------
 33299                                  ; country command
 33300                                  ;      the syntax is:
 33301                                  ;	country=country id {,codepage {,path}}
 33302                                  ;	country=country id {,,path}	:default codepage id in dos
 33303                                  ;------------------------------------------------------------------------------
 33304                                  
 33305                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33306                                  	; (SYSINIT:2663h)
 33307                                  tryq:
 33308 00002577 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 33309 0000257A 7403                    	je	short tryq_cont
 33310                                  skip_it3:
 33311 0000257C E90D01                  	jmp	tryf
 33312                                  tryq_cont:
 33313                                  
 33314                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33315                                  ; (SYSINIT:297Eh)
 33316                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33317                                  ;%if 0
 33318                                  ;ifdef	MULTI_CONFIG
 33319 0000257F E8F919                  	call	query_user		; query the user if config_cmd
 33320 00002582 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 33321                                  ;endif
 33322                                  ;%endif ; 02/11/2022
 33323                                  
 33324                                  	; 31/12/2022
 33325                                  	;xor	bx,bx
 33326 00002584 31C9                    	xor	cx,cx
 33327                                  	; 14/12/2022
 33328                                  	; ds = cs
 33329                                  	; bx = 0
 33330                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 33331                                  	;mov	word [cs:p_code_page],0
 33332                                  	; 31/12/2022
 33333                                  	; cx = 0
 33334                                  	;mov	[cntry_drv],bl ; 0
 33335                                  	;mov	[p_code_page],bx ; 0
 33336 00002586 880E[3C44]              	mov	[cntry_drv],cl ; 0
 33337 0000258A 890E[EB1D]              	mov	[p_code_page],cx ; 0	
 33338                                  
 33339 0000258E BF[B41D]                	mov	di,cntry_parms
 33340                                  	;xor	cx,cx	; 31/12/2022
 33341                                  	; 03/01/2023
 33342                                  	;mov	dx,cx
 33343                                  do52:
 33344 00002591 E89402                  	call	sysinit_parse
 33345 00002594 730B                    	jnc	short if52		; parse error,check error code and
 33346                                  
 33347 00002596 E8E000                  	call	cntry_error		; show message and end the search loop.
 33348                                  	; 14/12/2022
 33349                                  	; ds = cs
 33350 00002599 C706[E91D]FFFF          	mov	word [p_cntry_code],-1
 33351                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 33352 0000259F EB34                    	jmp	short sr52
 33353                                  if52:
 33354 000025A1 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33355 000025A4 742F                    	jz	short sr52		; then end the search loop
 33356                                  
 33357                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 33358                                  	; 14/12/2022
 33359                                  	; ds = cs
 33360 000025A6 803E[861D]01            	cmp	byte [result_val],_$P_Number	
 33361                                  	;cmp	byte [cs:result_val],_$P_Number
 33362 000025AB 7512                    	jnz	short if56
 33363                                  
 33364                                  	;;mov	ax,[cs:rw_dword]
 33365                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33366                                  	; 14/12/2022
 33367 000025AD A1[8A1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33368 000025B0 83F901                  	cmp	cx,1
 33369 000025B3 7505                    	jne	short if57
 33370                                  
 33371                                  	;mov	[cs:p_cntry_code],ax
 33372                                  	; 14/12/2022
 33373 000025B5 A3[E91D]                	mov	[p_cntry_code],ax
 33374                                  
 33375                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33376                                  	;jmp	short en57
 33377                                  	; 12/12/2022
 33378                                  	;jmp	short en56
 33379 000025B8 EBD7                    	jmp	short do52
 33380                                  if57:
 33381                                  	;mov	[cs:p_code_page],ax
 33382                                  	; 14/12/2022
 33383                                  	; ds = cs
 33384 000025BA A3[EB1D]                	mov	[p_code_page],ax
 33385                                  en57:
 33386                                  	;jmp	short en56		; path entered
 33387                                  	; 12/12/2022
 33388 000025BD EBD2                    	jmp	short do52
 33389                                  if56:
 33390 000025BF 1E                      	push	ds
 33391 000025C0 06                      	push	es
 33392 000025C1 56                      	push	si
 33393 000025C2 57                      	push	di
 33394                                  
 33395 000025C3 0E                      	push	cs
 33396 000025C4 07                      	pop	es
 33397                                  
 33398                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 33399                                  	; 14/12/2022
 33400 000025C5 C536[8A1D]              	lds	si,[rv_dword]
 33401 000025C9 BF[3C44]                	mov	di,cntry_drv
 33402 000025CC E8B11D                  	call	move_asciiz
 33403                                  
 33404 000025CF 5F                      	pop	di
 33405 000025D0 5E                      	pop	si
 33406 000025D1 07                      	pop	es
 33407 000025D2 1F                      	pop	ds
 33408                                  en56:
 33409 000025D3 EBBC                    	jmp	short do52
 33410                                  sr52:
 33411                                  	; 14/12/2022
 33412                                  	; ds = cs
 33413 000025D5 833E[E91D]FF            	cmp	word [p_cntry_code],-1
 33414                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 33415 000025DA 7509                    	jne	short tryq_open
 33416 000025DC E9C1FA                  	jmp	coff
 33417                                  
 33418                                  tryqbad:				;"invalid country code or code page"
 33419 000025DF F9                      	stc
 33420 000025E0 BA[1F4A]                	mov     dx,badcountry
 33421 000025E3 EB79                    	jmp     tryqchkerr
 33422                                  
 33423                                  tryq_open:
 33424                                  	; 14/12/2022
 33425                                  	; ds = cs
 33426 000025E5 803E[3C44]00            	cmp	byte [cntry_drv],0
 33427                                  	;cmp	byte [cs:cntry_drv],0
 33428 000025EA 7405                    	je	short tryq_def
 33429 000025EC BA[3C44]                	mov	dx,cntry_drv
 33430 000025EF EB03                    	jmp	short tryq_openit
 33431                                  
 33432                                  tryq_def:
 33433 000025F1 BA[3E44]                	mov	dx,cntry_root
 33434                                  tryq_openit:
 33435 000025F4 B8003D                  	mov	ax,3D00h		;open a file
 33436 000025F7 F9                      	stc
 33437 000025F8 CD21                    	int	21h
 33438 000025FA 7242                    	jc	short tryqfilebad	;open failure
 33439                                  
 33440                                  	; 14/12/2022
 33441                                  	; ds = cs
 33442 000025FC A3[5803]                	mov	[cntryfilehandle],ax
 33443                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 33444 000025FF 89C3                    	mov	bx,ax
 33445 00002601 A1[E91D]                	mov	ax,[p_cntry_code]
 33446 00002604 8B16[EB1D]              	mov	dx,[p_code_page]
 33447                                  	;mov	ax,[cs:p_cntry_code]
 33448                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 33449                                  	;mov	cx,[cs:memhi]
 33450 00002608 8B0E[6003]              	mov	cx,[memhi]
 33451 0000260C 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 33452                                  					;M023
 33453                                  	; 14/12/2022
 33454                                  	; ds = cs
 33455 00002610 3B0E[A102]              	cmp	cx,[ALLOCLIM]
 33456                                  	;cmp	cx,[cs:ALLOCLIM]
 33457 00002614 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 33458                                  
 33459 00002616 BE[3C44]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 33460 00002619 803C00                  	cmp	byte [si],0 		;default path?
 33461 0000261C 7502                    	jne	short tryq_set_for_dos
 33462                                  
 33463 0000261E 46                      	inc	si
 33464 0000261F 46                      	inc	si			;ds:si -> cntry_root
 33465                                  
 33466                                  tryq_set_for_dos:
 33467                                  	; 14/12/2022
 33468                                  	; ds = cs
 33469 00002620 C43E[7902]              	les	di,[sysi_country]
 33470                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 33471 00002624 57                      	push	di			;save di
 33472                                  	;add	di,8
 33473 00002625 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 33474 00002628 E8551D                  	call	move_asciiz		;set the path to country.sys in dos.
 33475 0000262B 5F                      	pop	di			;es:di -> country info tab again.
 33476                                  
 33477                                  	; 14/12/2022	
 33478 0000262C 8B0E[6003]              	mov	cx,[memhi]
 33479                                  	;mov	cx,[cs:memhi]
 33480 00002630 8ED9                    	mov	ds,cx
 33481 00002632 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 33482 00002634 E8E51B                  	call	setdoscountryinfo	;now do the job!!!
 33483                                  	; ds <> cs ; 14/12/2022
 33484 00002637 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 33485                                  
 33486 00002639 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 33487 0000263C 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 33488                                  
 33489                                  tryqfilebad:
 33490 0000263E 0E                      	push	cs
 33491 0000263F 07                      	pop	es
 33492 00002640 2E803E[3C44]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 33493 00002646 7405                    	je	short tryqdefbad
 33494                                  
 33495 00002648 BE[3C44]                	mov	si,cntry_drv
 33496 0000264B EB03                    	jmp	short tryqbadload
 33497                                  
 33498                                  tryqdefbad:				;default file has been used.
 33499 0000264D BE[3E44]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 33500                                  tryqbadload:
 33501 00002650 E8381D                  	call	badload 		;ds will be restored to sysinit_seg
 33502                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33503                                  	; (SYSINIT:2A69h)
 33504 00002653 8B0E[9F02]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 33505                                  	;mov	cx,[cs:CONFBOT]
 33506                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33507                                  	;mov	cx,[cs:top_of_cdss]
 33508                                  	; 11/12/2022
 33509                                  	; ds = cs
 33510                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 33511 00002657 8EC1                    	mov	es,cx			;restore es -> confbot.
 33512 00002659 EB13                    	jmp	short coffj4
 33513                                  
 33514                                  tryqmemory:
 33515 0000265B BA[624A]                	mov	dx,insufmemory
 33516                                  tryqchkerr:
 33517                                  	;mov	cx,[cs:CONFBOT]
 33518                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33519                                  	;mov	cx,[cs:top_of_cdss]
 33520                                  	; 12/12/2022
 33521 0000265E 0E                      	push	cs
 33522 0000265F 1F                      	pop	ds
 33523                                  	; 31/12/2022 - Retro DOS v4.2
 33524 00002660 8B0E[9F02]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 33525                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 33526 00002664 8EC1                    	mov	es,cx			;restore es -> confbot seg
 33527                                  	;push	cs
 33528                                  	;pop	ds			;restore ds to sysinit_seg
 33529 00002666 7306                    	jnc	short coffj4		;if no error,then exit
 33530                                  
 33531 00002668 E8481D                  	call	print			;else show error message
 33532 0000266B E80D02                  	call	error_line
 33533                                  coffj4:
 33534                                  	;mov	bx,[cs:cntryfilehandle]
 33535                                  	; 11/12/2022
 33536                                  	; ds = cs
 33537 0000266E 8B1E[5803]              	mov	bx,[cntryfilehandle]
 33538 00002672 B43E                    	mov	ah,3Eh
 33539 00002674 CD21                    	int	21h			;close a file. don't care even if it fails.
 33540 00002676 E927FA                  	jmp	coff
 33541                                  
 33542                                  ;--------------------------------------------
 33543                                  
 33544                                  cntry_error:
 33545                                  
 33546                                  ;function: show "invalid country code or code page" messages,or
 33547                                  ;		"error in country command" depending on the error code
 33548                                  ;		in ax returned by sysparse;
 33549                                  ;in:	ax - error code
 33550                                  ;	ds - sysinitseg
 33551                                  ;	es - confbot
 33552                                  ;out:	show message.  dx destroyed.
 33553                                  
 33554 00002679 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 33555 0000267C 7505                    	jne	short if64
 33556 0000267E BA[1F4A]                	mov	dx,badcountry		;"invalid country code or code page"
 33557 00002681 EB03                    	jmp	short en64
 33558                                  if64:
 33559 00002683 BA[454A]                	mov	dx,badcountrycom	;"error in contry command"
 33560                                  en64:
 33561 00002686 E82A1D                  	call	print
 33562                                  	;call	error_line
 33563                                  	;retn
 33564                                  	; 11/12/2022
 33565 00002689 E9EF01                  	jmp	error_line
 33566                                  
 33567                                  ;------------------------------------------------------------------------------
 33568                                  ; files command
 33569                                  ;------------------------------------------------------------------------------
 33570                                  
 33571                                  ;******************************************************************************
 33572                                  ; function: parse the parameters of files= command.			      *
 33573                                  ;									      *
 33574                                  ; input :								      *
 33575                                  ;	es:si -> parameters in command line.				      *
 33576                                  ; output:								      *
 33577                                  ;	variable files set.						      *
 33578                                  ;									      *
 33579                                  ; subroutines to be called:						      *
 33580                                  ;	sysinit_parse							      *
 33581                                  ; logic:								      *
 33582                                  ; {									      *
 33583                                  ;	set di points to files_parms;					      *
 33584                                  ;	set dx,cx to 0; 						      *
 33585                                  ;	while (end of command line)					      *
 33586                                  ;	{ sysinit_parse;						      *
 33587                                  ;	  if (no error) then						      *
 33588                                  ;	     files = result_val._$P_picked_val				      *
 33589                                  ;	  else								      *
 33590                                  ;	     error exit;						      *
 33591                                  ;	};								      *
 33592                                  ; };									      *
 33593                                  ;									      *
 33594                                  ;******************************************************************************
 33595                                  
 33596                                  tryf:
 33597 0000268C 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 33598 0000268F 7528                    	jne	short tryl
 33599                                  
 33600                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33601                                  ; (SYSINIT:2AABh)
 33602                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33603                                  ;%if 0
 33604                                  ;ifdef	MULTI_CONFIG
 33605 00002691 E8E718                  	call	query_user              ; query the user if config_cmd
 33606 00002694 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 33607                                  ;endif
 33608                                  ;%endif ; 30/10/2022
 33609                                  
 33610                                  	; 14/12/2022
 33611                                  	; ds = cs
 33612                                  
 33613 00002696 BF[ED1D]                	mov	di,files_parms
 33614 00002699 31C9                    	xor	cx,cx
 33615                                  	; 03/01/2023
 33616                                  	;mov	dx,cx
 33617                                  do67:
 33618 0000269B E88A01                  	call	sysinit_parse
 33619 0000269E 7303                    	jnc	short if67		; parse error
 33620                                  	;call	badparm_p		;  and show messages and end the search loop.
 33621                                  	;jmp	short sr67
 33622                                  	; 03/01/2023
 33623 000026A0 E9B8FA                  	jmp	badparm_p_coff
 33624                                  if67:
 33625 000026A3 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33626 000026A6 7408                    	je	short en67		; then end the $endloop
 33627                                  
 33628                                  	; 14/12/2022
 33629                                  	; ds = cs
 33630                                  	;;mov	al,[cs:rv_dword]
 33631                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33632                                  	;mov	[cs:p_files],al		; save it temporarily
 33633                                  	;mov	al,[rv_dword]
 33634 000026A8 A0[8A1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 33635 000026AB A2[0C1E]                	mov	[p_files],al
 33636                                  
 33637 000026AE EBEB                    	jmp	short do67
 33638                                  en67:
 33639                                  	; 14/12/2022
 33640                                  	; ds = cs
 33641 000026B0 A0[0C1E]                	mov	al,[p_files]
 33642 000026B3 A2[9D02]                	mov	[FILES],al	
 33643                                  	;mov	al,[cs:p_files]
 33644                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 33645                                  sr67:
 33646 000026B6 E9E7F9                  	jmp	coff
 33647                                  
 33648                                  ; 04/04/2019 - Retro DOS v4.0
 33649                                  
 33650                                  ;------------------------------------------------------------------------------
 33651                                  ; lastdrive command
 33652                                  ;------------------------------------------------------------------------------
 33653                                  
 33654                                  ;******************************************************************************
 33655                                  ; function: parse the parameters of lastdrive= command. 		      *
 33656                                  ;									      *
 33657                                  ; input :								      *
 33658                                  ;	es:si -> parameters in command line.				      *
 33659                                  ; output:								      *
 33660                                  ;	set the variable num_cds.					      *
 33661                                  ;									      *
 33662                                  ; subroutines to be called:						      *
 33663                                  ;	sysinit_parse							      *
 33664                                  ; logic:								      *
 33665                                  ; {									      *
 33666                                  ;	set di points to ldrv_parms;					      *
 33667                                  ;	set dx,cx to 0; 						      *
 33668                                  ;	while (end of command line)					      *
 33669                                  ;	{ sysinit_parse;						      *
 33670                                  ;	  if (no error) then						      *
 33671                                  ;	     set num_cds to the returned value; 			      *
 33672                                  ;	  else	/*error exit*/						      *
 33673                                  ;	     error exit;						      *
 33674                                  ;	};								      *
 33675                                  ; };									      *
 33676                                  ;									      *
 33677                                  ;******************************************************************************
 33678                                  
 33679                                  tryl:
 33680 000026B9 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 33681 000026BC 7528                    	jne	short tryp
 33682                                  
 33683                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33684                                  ; (SYSINIT:2AE0h)
 33685                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33686                                  ;%if 0
 33687 000026BE E8BA18                  	call	query_user      ; query the user if config_cmd
 33688 000026C1 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 33689                                  ;endif
 33690                                  ;%endif ; 30/10/2022
 33691                                  
 33692                                  	; 14/12/2022
 33693                                  	; ds = cs
 33694                                  
 33695 000026C3 BF[0D1E]                	mov	di,ldrv_parms
 33696 000026C6 31C9                    	xor	cx,cx
 33697                                  	; 03/01/2023
 33698                                  	;mov	dx,cx
 33699                                  do73:
 33700 000026C8 E85D01                  	call	sysinit_parse
 33701 000026CB 7303                    	jnc	short if73	; parse error
 33702                                  	;call	badparm_p	;  and show messages and end the search loop.
 33703                                  	;jmp	short sr73
 33704                                  	; 03/01/2023
 33705 000026CD E98BFA                  	jmp	badparm_p_coff
 33706                                  if73:
 33707 000026D0 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 33708 000026D3 7408                    	je	short en73	; then end the $endloop
 33709                                  
 33710                                  	; 14/12/2022
 33711                                  	; ds = cs
 33712                                  	;;mov	al,[cs:rv_dword]
 33713                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 33714                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 33715                                  
 33716                                  	;mov	al,[rv_dword]
 33717 000026D5 A0[8A1D]                	mov	al,[rv_byte]
 33718 000026D8 A2[211E]                	mov	[p_ldrv],al
 33719                                  
 33720 000026DB EBEB                    	jmp	short do73
 33721                                  en73:
 33722                                  	; 14/12/2022
 33723                                  	; ds = cs
 33724 000026DD A0[211E]                	mov	al,[p_ldrv]
 33725 000026E0 A2[9E02]                	mov	[NUM_CDS],al
 33726                                  	;mov	al,[cs:p_ldrv]
 33727                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 33728                                  sr73:
 33729 000026E3 E9BAF9                  	jmp	coff
 33730                                  
 33731                                  ;--------------------------------------------------------------------------
 33732                                  ; setting drive parameters
 33733                                  ;--------------------------------------------------------------------------
 33734                                  
 33735                                  tryp:
 33736 000026E6 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 33737 000026E9 7516                    	jne	short tryk
 33738                                  
 33739                                  ; 31/12/2022 - Retro DOS v4.2
 33740                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33741                                  ;%if 0
 33742                                  ;ifdef	MULTI_CONFIG
 33743 000026EB E88D18                  	call	query_user      ; query the user if config_cmd
 33744 000026EE 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 33745                                  ;endif
 33746                                  ;%endif ; 30/10/2022
 33747                                  
 33748 000026F0 E8B60D                  	call	parseline
 33749 000026F3 7209                    	jc	short trypbad
 33750 000026F5 E8EC0C                  	call	setparms
 33751 000026F8 E8110D                  	call	diddleback
 33752                                  
 33753                                  ; No error check here, because setparms and diddleback have no error 
 33754                                  ; returns, and setparms as coded now can return with carry set. 
 33755                                  ;       jc	short trypbad
 33756                                  
 33757                                  	; 12/12/2022
 33758                                  	; cf = 0
 33759                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33760                                  	;jc	short trypbad
 33761                                  	
 33762 000026FB E9A2F9                  	jmp	coff
 33763                                  trypbad:
 33764 000026FE E94601                  	jmp	badop
 33765                                  
 33766                                  ;--------------------------------------------------------------------------
 33767                                  ; setting internal stack parameters
 33768                                  ; stacks=m,n where
 33769                                  ;	m is the number of stacks (range 8 to 64,default 9)
 33770                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 33771                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 33772                                  ;	any combinations that are not within the specified limits will
 33773                                  ;	result in "unrecognized command" error.
 33774                                  ;--------------------------------------------------------------------------
 33775                                  
 33776                                  ;**************************************************************************
 33777                                  ;									  *
 33778                                  ; function: parse the parameters of stacks= command.			  *
 33779                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 33780                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 33781                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 33782                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 33783                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 33784                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 33785                                  ;	    (or if "0,0" pair has been entered.)			  *
 33786                                  ; input :								  *
 33787                                  ;	es:si -> parameters in command line.				  *
 33788                                  ; output:								  *
 33789                                  ;	set the variables stack_count,stack_size.			  *
 33790                                  ;									  *
 33791                                  ; subroutines to be called:						  *
 33792                                  ;	sysinit_parse							  *
 33793                                  ; logic:								  *
 33794                                  ; {									  *
 33795                                  ;	set di points to stks_parms;					  *
 33796                                  ;	set dx,cx to 0; 						  *
 33797                                  ;	while (end of command line)					  *
 33798                                  ;	{ sysinit_parse;						  *
 33799                                  ;	  if (no error) then						  *
 33800                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 33801                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 33802                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 33803                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 33804                                  ;	     }								  *
 33805                                  ;	  else	/*error exit*/						  *
 33806                                  ;	     error exit;						  *
 33807                                  ;	};								  *
 33808                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 33809                                  ;	if o.k.,then set stack_count,stack_size;			  *
 33810                                  ;	 else error_exit;						  *
 33811                                  ; };									  *
 33812                                  ;**************************************************************************
 33813                                  
 33814                                  tryk:
 33815                                          ;if      stacksw
 33816                                  
 33817 00002701 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 33818 00002704 7402                    	je	short do_tryk
 33819                                  skip_it4:
 33820 00002706 EB79                    	jmp	short trys	; 15/12/2022
 33821                                  do_tryk:
 33822                                  
 33823                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33824                                  ; (SYSINIT:2B33h)
 33825                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33826                                  ;%if 0
 33827                                  ;ifdef	MULTI_CONFIG
 33828 00002708 E87018                         call	query_user              ; query the user if config_cmd
 33829 0000270B 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 33830                                  ;endif
 33831                                  ;%endif	; 30/10/2022
 33832                                  
 33833                                  	; 14/12/2022
 33834                                  	; ds = cs
 33835                                  
 33836 0000270D BF[221E]                	mov	di,stks_parms
 33837 00002710 31C9                    	xor	cx,cx
 33838                                  	; 03/01/2023
 33839                                  	;mov	dx,cx
 33840                                  do79:
 33841 00002712 E81301                  	call	sysinit_parse
 33842 00002715 730B                    	jnc	short if79		; parse error
 33843                                  
 33844 00002717 BA[D14A]                	mov	dx,badstack		; "invalid stack parameter"
 33845 0000271A E8961C                  	call	print			;  and show messages and end the search loop.
 33846 0000271D E85B01                  	call	error_line
 33847                                  	;jmp	sr79
 33848                                  	; 11/12/2022
 33849 00002720 EB39                    	jmp	short sr79
 33850                                  if79:
 33851 00002722 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33852 00002725 7412                    	je	short en79		; then end the $endloop
 33853                                  
 33854                                  	; 14/12/2022
 33855                                  	; ds = cs
 33856                                  
 33857                                  	;;mov	ax,[cs:rv_dword]
 33858                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33859                                  	;mov	ax,[rv_dword]
 33860 00002727 A1[8A1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33861                                  
 33862 0000272A 83F901                  	cmp	cx,1
 33863 0000272D 7505                    	jne	short if83
 33864                                  
 33865                                  	; 14/12/2022
 33866                                  	;mov	[cs:p_stack_count],ax
 33867                                  	;jmp	short en83
 33868 0000272F A3[571E]                	mov	[p_stack_count],ax
 33869 00002732 EBDE                    	jmp	short do79
 33870                                  if83:
 33871                                  	; 14/12/2022
 33872                                  	;mov	[cs:p_stack_size],ax
 33873 00002734 A3[591E]                	mov	[p_stack_size],ax
 33874                                  en83:
 33875 00002737 EBD9                    	jmp	short do79
 33876                                  en79:
 33877                                  	; 14/12/2022
 33878                                  	; ds = cs
 33879 00002739 A1[571E]                	mov	ax,[p_stack_count]
 33880 0000273C 09C0                    	or	ax,ax
 33881 0000273E 741E                    	jz	short if87		
 33882                                  
 33883                                  	; 14/12/2022
 33884                                  	;cmp	word [p_stack_count],0
 33885                                  	;;cmp	word [cs:p_stack_count],0
 33886                                  	;je	short if87
 33887                                  
 33888                                  	; 14/12/2022
 33889 00002740 83F808                  	cmp	ax, mincount ; 8
 33890                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 33891                                  	; 15/12/2022
 33892 00002743 721F                    	jb	short en87
 33893 00002745 833E[591E]20            	cmp	word [p_stack_size],minsize ; 32
 33894                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 33895                                  	; 15/12/2022
 33896 0000274A 7218                    	jb	short en87
 33897                                  if94:
 33898                                  	; 14/12/2022
 33899                                  	; ds = cs
 33900                                  	; ax = [p_stack_count]
 33901                                  	;mov	ax,[p_stack_count]
 33902                                  	;;mov	ax,[cs:p_stack_count]
 33903 0000274C A3[8A02]                	mov	[stack_count],ax
 33904                                  	;mov	[cs:stack_count],ax
 33905                                  	;mov	ax,[cs:p_stack_size]
 33906 0000274F A1[591E]                	mov	ax,[p_stack_size]
 33907                                  	;mov	[cs:stack_size],ax
 33908 00002752 A3[8C02]                	mov	[stack_size],ax
 33909                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33910 00002755 C706[8E02]FFFF          	mov	word [stack_addr],-1
 33911                                  sr79:
 33912 0000275B E942F9                  	jmp	coff
 33913                                  
 33914                                  if87:
 33915                                  	; 14/12/2022
 33916 0000275E 3906[591E]              	cmp	[p_stack_size],ax ; 0
 33917 00002762 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 33918                                  	;cmp	word [cs:p_stack_size],0
 33919                                  	;je	short if94
 33920                                  en87:
 33921                                  	; 15/12/2022
 33922                                  	; ([p_stack_count] is invalid, use default values)
 33923                                  	; 14/12/2022
 33924                                  	; ds = cs
 33925 00002764 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 33926 0000276A C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 33927 00002770 C706[8E02]0000          	mov	word [stack_addr],0
 33928                                  	;mov	word [cs:stack_count],defaultcount ; 9
 33929                                  	;				; reset to default value.
 33930                                  	;mov	word [cs:stack_size],defaultsize ; 128
 33931                                  	;mov	word [cs:stack_addr],0
 33932                                  
 33933 00002776 BA[D14A]                	mov	dx,badstack
 33934 00002779 E8371C                  	call	print
 33935 0000277C E8FC00                  	call	error_line
 33936 0000277F EBDA                    	jmp	short sr79
 33937                                  
 33938                                  ; 15/12/2022
 33939                                  %if 0
 33940                                  	mov	di,stks_parms
 33941                                  	xor	cx,cx
 33942                                  	; 03/01/2023
 33943                                  	;mov	dx,cx
 33944                                  do79:
 33945                                  	call	sysinit_parse
 33946                                  	jnc	short if79		; parse error
 33947                                  
 33948                                  	mov	dx,badstack		; "invalid stack parameter"
 33949                                  	call	print			;  and show messages and end the search loop.
 33950                                  	call	error_line
 33951                                  	;jmp	sr79
 33952                                  	; 11/12/2022
 33953                                  	jmp	short sr79
 33954                                  if79:
 33955                                  	cmp	ax,_$P_RC_EOL		; end of line?
 33956                                  	je	short en79		; then end the $endloop
 33957                                  
 33958                                  	;mov	ax,[cs:rv_dword]
 33959                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33960                                  	cmp	cx,1
 33961                                  	jne	short if83
 33962                                  
 33963                                  	mov	[cs:p_stack_count],ax
 33964                                  	jmp	short en83
 33965                                  if83:
 33966                                  	mov	[cs:p_stack_size],ax
 33967                                  en83:
 33968                                  	jmp	short do79
 33969                                  en79:
 33970                                  	cmp	word [cs:p_stack_count],0
 33971                                  	je	short if87
 33972                                  
 33973                                  	cmp	word [cs:p_stack_count],mincount ; 8
 33974                                  	jb	short ll88
 33975                                  	cmp	word [cs:p_stack_size],minsize ; 32
 33976                                  	jnb	short if88
 33977                                  ll88:
 33978                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33979                                  if88:
 33980                                  	jmp	short en87
 33981                                  
 33982                                  	; 11/12/2022
 33983                                  if94:
 33984                                  	mov	ax,[cs:p_stack_count]
 33985                                  	mov	[cs:stack_count],ax
 33986                                  	mov	ax,[cs:p_stack_size]
 33987                                  	mov	[cs:stack_size],ax
 33988                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 33989                                  sr79:
 33990                                  	jmp	coff
 33991                                  
 33992                                  if87:
 33993                                  	cmp	word [cs:p_stack_size],0
 33994                                  	je	short en87
 33995                                  	mov	word [cs:p_stack_count],-1 ; invalid
 33996                                  en87:
 33997                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 33998                                  	jne	short if94
 33999                                  
 34000                                  	mov	word [cs:stack_count],defaultcount ; 9
 34001                                  					; reset to default value.
 34002                                  	mov	word [cs:stack_size],defaultsize ; 128
 34003                                  	mov	word [cs:stack_addr],0
 34004                                  
 34005                                  	mov	dx,badstack
 34006                                  	call	print
 34007                                  	call	error_line
 34008                                  	jmp	short sr79
 34009                                  
 34010                                  %endif
 34011                                  
 34012                                  ; 11/12/2022
 34013                                  %if 0 
 34014                                  if94:
 34015                                  	mov	ax,[cs:p_stack_count]
 34016                                  	mov	[cs:stack_count],ax
 34017                                  	mov	ax,[cs:p_stack_size]
 34018                                  	mov	[cs:stack_size],ax
 34019                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34020                                  sr79:
 34021                                  	jmp	coff
 34022                                  %endif
 34023                                  	;endif
 34024                                  
 34025                                  ;------------------------------------------------------------------------
 34026                                  ; shell command
 34027                                  ;------------------------------------------------------------------------
 34028                                  
 34029                                  trys:
 34030 00002781 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 34031                                  	;jne	short tryx
 34032                                  	; 24/03/2025 - MiniDOS 1.0
 34033 00002784 755A                     	jne	short tryv
 34034                                  
 34035                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34036                                  ; (SYSINIT:2BE1h)
 34037                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34038                                  ;%if 0
 34039                                  ;ifdef	MULTI_CONFIG
 34040 00002786 E8F217                  	call	query_user              ; query the user if config_cmd
 34041                                  	;jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 34042                                  	; 24/03/2025 - MiniDOS 1.0
 34043 00002789 7555                     	jne	short tryv
 34044                                  
 34045                                  	; 14/04/2024
 34046                                  	; ds = cs
 34047                                  	;mov	byte [cs:newcmd],1
 34048 0000278B C606[8944]01            	mov	byte [newcmd],1
 34049                                  ;endif
 34050                                  ;%endif ; 30/10/2022
 34051                                  
 34052                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 34053                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34054                                  	;mov	byte [cs:command_line+1],0
 34055                                  	; 15/12/2022
 34056                                  	; ds = cs
 34057                                  	; 08/09/2023
 34058                                  	;mov	byte [command_line+1],0
 34059 00002790 C706[1A45]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 34060                                  
 34061 00002796 BF[8D44]                        mov     di,commnd+1		; we already have the first char
 34062 00002799 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 34063                                  storeshell:
 34064 0000279C E86F19                  	call	getchr
 34065 0000279F 08C0                            or      al,al                   ; this is the normal case: "organize"
 34066 000027A1 741C                            jz	short getshparms	; put a ZERO right after the filename
 34067                                  
 34068 000027A3 3C20                            cmp     al," "                  ; this may happen if there are no args
 34069 000027A5 7209                            jb	short endofshell	; I suppose...
 34070 000027A7 8805                    	mov	[di],al
 34071 000027A9 47                      	inc	di
 34072                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 34073                                          ;jb	short storeshell	; commnd (the filename)
 34074                                          ;jmp	short endofshell
 34075                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34076                                  	;jmp	short storeshell
 34077                                  	; 03/01/2023
 34078 000027AA 81FF[CB44]              	cmp	di,commnd+63		; this makes sure we don't overflow
 34079 000027AE 72EC                            jb	short storeshell	; commnd (the filename)
 34080                                  	;jmp	short endofshell
 34081                                  
 34082                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34083                                  ;getshparms:
 34084                                  ;	mov     byte [di],0		; zero-terminate the filename
 34085                                  ;	mov     di,command_line+1	; prepare to process the command-line
 34086                                  ;
 34087                                  ;parmloop:
 34088                                  ;	call	getchr
 34089                                  ;	cmp	al," "
 34090                                  ;	jb	short endofparms
 34091                                  ;	mov	[di],al
 34092                                  ;	inc	di
 34093                                  ;	cmp     di,command_line+126
 34094                                  ;	jb	short parmloop
 34095                                  ;endofparms:
 34096                                  ;	mov     cx,di
 34097                                  ;	sub     cx,command_line+1
 34098                                  ;	mov     [cs:command_line],cl
 34099                                  ;
 34100                                  ;endofshell:
 34101                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 34102                                  ;					; the command-line as the case may be)
 34103                                  ;skipline:
 34104                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34105                                  ;       je	short endofline		; the line: watch for ever-present LF
 34106                                  ;call	getchr
 34107                                  ;       jnc	short skipline		; keep it up as long as there are chars
 34108                                  ;
 34109                                  ;endofline:
 34110                                  ;       jmp     conflp
 34111                                  
 34112                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34113                                  endofshell:
 34114 000027B0 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 34115                                  					; the command-line as the case may be)
 34116                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34117                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34118                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 34119                                  	;call	getchr
 34120                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34121 000027B3 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34122 000027B5 7405                    	je	short endofline		; the line: watch for ever-present LF
 34123 000027B7 E85419                  	call	getchr
 34124                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 34125                                  	; (SYSINIT:2C3Ah)
 34126 000027BA 73F7                    	jnb	short skipline
 34127                                  	
 34128                                  endofline:
 34129 000027BC E98AF8                  	jmp     conflp
 34130                                  
 34131                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34132                                  getshparms:
 34133                                  	; 18/12/2022
 34134                                  	; al = 0
 34135 000027BF 8805                    	mov	[di],al ; 0
 34136                                  	;mov	byte [di],0		; zero-terminate the filename
 34137 000027C1 BF[1B45]                	mov     di,command_line+1	; prepare to process the command-line
 34138                                  parmloop:
 34139 000027C4 E84719                  	call	getchr
 34140 000027C7 3C20                    	cmp	al," " ; 20h
 34141                                  	;jb	short endofshell
 34142                                  	; 03/01/2023
 34143 000027C9 7209                    	jb	short endofparms
 34144                                  
 34145 000027CB 8805                    	mov	[di],al
 34146 000027CD 47                      	inc	di
 34147                                  	;jmp	short parmloop
 34148                                  	; 03/01/2023 - Retro DOS v4.2
 34149 000027CE 81FF[9845]              	cmp     di,command_line+126
 34150 000027D2 72F0                    	jb	short parmloop
 34151                                  
 34152                                  	; 03/01/2023 - Retro DOS v4.2
 34153                                  endofparms:
 34154 000027D4 89F9                    	mov	cx,di
 34155 000027D6 81E9[1B45]              	sub	cx,command_line+1
 34156                                  	;mov	[cs:command_line],cl
 34157                                  	; 03/01/2023
 34158 000027DA 880E[1A45]              	mov	[command_line],cl
 34159 000027DE EBD0                    	jmp	short endofshell
 34160                                  
 34161                                  
 34162                                  ; 24/03/2025 - MiniDOS v1.0
 34163                                  %if 0
 34164                                  
 34165                                  ;------------------------------------------------------------------------
 34166                                  ; fcbs command
 34167                                  ;------------------------------------------------------------------------
 34168                                  
 34169                                  ;************************************************************************
 34170                                  ; function: parse the parameters of fcbs= command.			*
 34171                                  ;									*
 34172                                  ; input :								*
 34173                                  ;	es:si -> parameters in command line.				*
 34174                                  ; output:								*
 34175                                  ;	set the variables fcbs,keep.					*
 34176                                  ;									*
 34177                                  ; subroutines to be called:						*
 34178                                  ;	sysinit_parse							*
 34179                                  ; logic:								*
 34180                                  ; {									*
 34181                                  ;	set di points to fcbs_parms;					*
 34182                                  ;	set dx,cx to 0; 						*
 34183                                  ;	while (end of command line)					*
 34184                                  ;	{ sysparse;							*
 34185                                  ;	  if (no error) then						*
 34186                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 34187                                  ;		   fcbs = result_val._$P_picked_val;			*
 34188                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 34189                                  ;		   keep = result_val._$P_picked_val;			*
 34190                                  ;	     }								*
 34191                                  ;	  else	/*error exit*/						*
 34192                                  ;	     error exit;						*
 34193                                  ;	};								*
 34194                                  ; };									*
 34195                                  ;************************************************************************
 34196                                  
 34197                                  tryx:
 34198                                          cmp     ah,CONFIG_FCBS  ; 'X'
 34199                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34200                                  	jne	short try1
 34201                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34202                                  	;jne	short tryy	; comment command
 34203                                  
 34204                                  ; 31/12/2022 - Retro DOS v4.2
 34205                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34206                                  ;%if 0
 34207                                  ;ifdef	MULTI_CONFIG
 34208                                  	call	query_user      ; query the user if config_cmd
 34209                                  	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 34210                                  ;endif
 34211                                  ;%endif ; 30/10/2022
 34212                                  
 34213                                  	mov	di,fcbs_parms
 34214                                  	xor	cx,cx
 34215                                  	; 03/01/2023
 34216                                  	;mov	dx,cx
 34217                                  do98:
 34218                                  	call	sysinit_parse
 34219                                          ; 03/01/2023
 34220                                  	;jnc	short if98	; parse error
 34221                                          ;call	badparm_p	;  and show messages and end the search loop.
 34222                                  	;jmp	short sr98
 34223                                  	;------------------------
 34224                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34225                                  	jc	short badparm_p_coff
 34226                                  if98:
 34227                                  	cmp	ax,_$P_RC_EOL	; end of line?
 34228                                  	je	short en98	; then end the $endloop
 34229                                  
 34230                                  	;;mov	al,[cs:rv_dword]
 34231                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34232                                  	; 15/12/2022
 34233                                  	; ds = cs
 34234                                  	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34235                                  	cmp	cx,1		; the first positional?
 34236                                  	jne	short if102
 34237                                  	;mov	[cs:p_fcbs],al
 34238                                  	; 15/12/2022
 34239                                  	mov	[p_fcbs],al
 34240                                  	;jmp	short en102
 34241                                  	jmp	short do98
 34242                                  if102:
 34243                                  	;mov	[cs:p_keep],al
 34244                                  	; 15/12/2022
 34245                                  	mov	[p_keep],al
 34246                                  en102:
 34247                                  	jmp	short do98
 34248                                  en98:
 34249                                  	; 15/12/2022
 34250                                  	; ds = cs
 34251                                  	mov	al,[p_fcbs]
 34252                                  	mov	[FCBS],al
 34253                                  	mov	byte [KEEP],0
 34254                                  	;mov	al,[cs:p_fcbs]	 ; M017
 34255                                  	;mov	[cs:FCBS],al	 ; M017
 34256                                  	;mov	byte [cs:KEEP],0 ; M017
 34257                                  sr98:
 34258                                  	jmp	coff
 34259                                  
 34260                                  %endif
 34261                                  
 34262                                  ; 31/12/2022 - Retro DOS v4.2
 34263                                  %if 0
 34264                                  
 34265                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34266                                  ;-------------------------------------------------------------------------
 34267                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34268                                  ;		line number
 34269                                  ;-------------------------------------------------------------------------
 34270                                  
 34271                                  tryy:
 34272                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34273                                  	jne	short try0
 34274                                  
 34275                                  donothing:
 34276                                  	; 15/12/2022
 34277                                  	; ds = cs
 34278                                  	dec	word [chrptr]
 34279                                  	inc	word [count]
 34280                                  	; 02/11/2022
 34281                                  	;dec	word [cs:chrptr]
 34282                                  	;inc	word [cs:count]
 34283                                  
 34284                                  	jmp	coff
 34285                                  
 34286                                  ;------------------------------------------------------------------------
 34287                                  ; rem command
 34288                                  ;------------------------------------------------------------------------
 34289                                  
 34290                                  try0:				; do nothing with this line.
 34291                                  	cmp     ah,CONFIG_REM ; '0'
 34292                                  	je	short donothing
 34293                                  
 34294                                  %endif
 34295                                  
 34296                                  ; 18/03/2025 - MiniDOS 1.0
 34297                                  %if 0
 34298                                  
 34299                                  ; 07/04/2019 - Retro DOS v4.0
 34300                                  
 34301                                  ;-----------------------------------------------------------------------
 34302                                  ; switches command
 34303                                  ;-----------------------------------------------------------------------
 34304                                  
 34305                                  ;***********************************************************************
 34306                                  ;								       *
 34307                                  ; function: parse the option switches specified.		       *
 34308                                  ; note - this command is intended for the future use also.	       *
 34309                                  ; when we need to set system data flag,use this command.	       *
 34310                                  ;								       *
 34311                                  ; input :							       *
 34312                                  ;	es:si -> parameters in command line.			       *
 34313                                  ; output:							       *
 34314                                  ;	p_swit_k set if /k option chosen.			       *
 34315                                  ;								       *
 34316                                  ; subroutines to be called:					       *
 34317                                  ;	sysinit_parse						       *
 34318                                  ; logic:							       *
 34319                                  ; {								       *
 34320                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 34321                                  ;	set dx,cx to 0; 					       *
 34322                                  ;	while (end of command line)				       *
 34323                                  ;	{ sysinit_parse;					       *
 34324                                  ;	  if (no error) then					       *
 34325                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 34326                                  ;		    p_swit_k = 1				       *
 34327                                  ;	       endif						       *
 34328                                  ;	  else {show error message;error exit}			       *
 34329                                  ;	};							       *
 34330                                  ; };								       *
 34331                                  ;								       *
 34332                                  ;***********************************************************************
 34333                                  
 34334                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 34335                                  
 34336                                  try1:
 34337                                          cmp     ah,CONFIG_SWITCHES ; '1'
 34338                                  	je	short do_try1	; switches= command entered?
 34339                                  skip_it5:
 34340                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34341                                  	; (SYSINIT:2C8Ah)
 34342                                  	jmp	tryv
 34343                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34344                                  	;jmp	tryz
 34345                                  
 34346                                  do_try1:
 34347                                  
 34348                                  ; 31/12/2022 - Retro DOS v4.2
 34349                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34350                                  ;%if 0
 34351                                  ;ifdef	MULTI_CONFIG
 34352                                  	call	query_user      ; query the user if config_cmd
 34353                                  	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 34354                                  ;endif
 34355                                  ;%endif ; 30/10/2022
 34356                                  
 34357                                  	mov	di,swit_parms
 34358                                  	xor	cx,cx
 34359                                  	; 03/01/2023
 34360                                  	;mov	dx,cx
 34361                                  do110:
 34362                                  	call	sysinit_parse
 34363                                  	jnc	short if110	; parse error
 34364                                  	;call	badparm_p	;  and show messages and end the search loop.
 34365                                  	;jmp	short sr110
 34366                                  	; -----------------------
 34367                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34368                                  badparm_p_coff:
 34369                                  	call	badparm_p
 34370                                  	jmp	coff
 34371                                  	;------------------------
 34372                                  if110:
 34373                                  	cmp	ax,_$P_RC_EOL	; end of line?
 34374                                  	je	short en110	; then jmp to $endloop for semantic check
 34375                                  
 34376                                  	; 15/12/2022
 34377                                  	; ds = cs
 34378                                  	;;cmp	word [cs:result_val_swoff],swit_k
 34379                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34380                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34381                                  	jne	short if115	;				;M059
 34382                                  	; 15/12/2022
 34383                                  	mov	byte [p_swit_k],1
 34384                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 34385                                  	jmp	short do110
 34386                                  if115:	
 34387                                  	; 15/12/2022							;M059
 34388                                  	;;cmp	word [cs:result_val_swoff],swit_t
 34389                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 34390                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 34391                                  	;jne	short if116					;M059 M063
 34392                                  	; 14/04/2024
 34393                                  	;;;
 34394                                  	jne	short if118  ; (PCDOS 7.1 IBMBIO.COM)
 34395                                  	;;; 
 34396                                  	; 15/12/2022
 34397                                  	mov	byte [p_swit_t],1
 34398                                  	;mov	byte [cs:p_swit_t],1				;M059
 34399                                  	jmp	short do110					;M059
 34400                                  
 34401                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34402                                  	;;;
 34403                                  if118:
 34404                                  	;;cmp	word [cs:result_val_swoff],swit_i ; offset "/I"
 34405                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34406                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 34407                                  	jne	short if116
 34408                                  	;mov	byte [cs:p_swit_i],1	; set the flag
 34409                                  	mov	byte [p_swit_i],1
 34410                                  	jmp     short do110
 34411                                  	;;;
 34412                                  if116:
 34413                                  	; 15/12/2022
 34414                                  	;;cmp	word [cs:result_val_swoff],swit_w
 34415                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 34416                                  	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 34417                                  	jne	short do110					;M063
 34418                                  	; 15/12/2022
 34419                                  	mov	byte [p_swit_w],1
 34420                                  	;mov	byte [cs:p_swit_w],1				;M063
 34421                                  	jmp	short do110					;M063
 34422                                  en110:
 34423                                  	; 15/12/2022
 34424                                  	; ds = cs
 34425                                  	cmp	byte [p_swit_k],1
 34426                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 34427                                  	push	ds
 34428                                  	;;mov	ax,Bios_Data
 34429                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 34430                                  	; 21/10/2022
 34431                                  	mov	ax,DOSBIODATASEG ; 0070h
 34432                                  	mov	ds,ax
 34433                                  	jne	short if117
 34434                                  	; 14/04/2024
 34435                                  	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 34436                                  				; BIOSDATA:047Eh for PCDOS 7.1 IBMBIO.COM
 34437                                  	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 34438                                  				; BIOSDATA:047Fh for PCDOS 7.1 IBMBIO.COM
 34439                                  if117:
 34440                                  	; 15/12/2022
 34441                                  	; ds <> cs
 34442                                  	mov	al,[cs:p_swit_t]				;M059
 34443                                  	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 34444                                  		; 14/04/2024	; BIOSDATA:048Bh for PCDOS 7.1 IBMBIO.COM
 34445                                  	cmp	byte [cs:p_swit_w],0				;M063
 34446                                  	je	short skip_dos_flag				;M063
 34447                                  	push	es
 34448                                  	push	bx
 34449                                  	mov	ah,GET_IN_VARS ; 52h				;M063
 34450                                  	int	21h						;M063
 34451                                  			; DOS - 2+ internal - GET LIST OF LISTS
 34452                                  			; Return: ES:BX -> DOS list of lists
 34453                                  	;or	bytes [es:86h],2
 34454                                  	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 34455                                  	pop	bx
 34456                                  	pop	es
 34457                                  skip_dos_flag:							;M063
 34458                                  	pop	ds
 34459                                  sr110:
 34460                                  	jmp	coff
 34461                                  
 34462                                  ; 18/03/2025
 34463                                  %endif
 34464                                  
 34465                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34466                                  ; (SYSINIT:2D14h)
 34467                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34468                                  ;%if 0
 34469                                  
 34470                                  tryv:
 34471                                  
 34472                                  ;ifdef	MULTI_CONFIG
 34473                                  ;------------------------------------------------------------------------
 34474                                  ; set command (as in "set var=value<cr/lf>")
 34475                                  ;------------------------------------------------------------------------
 34476                                  
 34477 000027E0 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 34478 000027E3 7510                    	jne	short tryn
 34479 000027E5 E89317                  	call	query_user      ; query the user if config_cmd
 34480 000027E8 720B                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 34481 000027EA E88A13                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 34482                                  chk_err: ; 24/03/2025	
 34483 000027ED 7303                    	jnc	short sr110	; no error
 34484                                  err:    
 34485 000027EF E88900                  	call	error_line      ; whoops, display error in line XXX
 34486                                  	;jmp	short sr110     ; jump to coff (to skip to next line)
 34487                                  	; 24/03/2025 - MiniDOS 1.0
 34488                                  sr110:
 34489 000027F2 E9ABF8                  	jmp	coff
 34490                                  
 34491                                  ;------------------------------------------------------------------------
 34492                                  ; numlock command (as in "numlock=on|off")
 34493                                  ;------------------------------------------------------------------------
 34494                                  tryn:
 34495 000027F5 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 34496                                  	; 18/03/2025 - MiniDOS 1.0
 34497 000027F8 750A                    	jne	short tryy
 34498                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34499                                  	;jne	short tryt
 34500                                  
 34501 000027FA E87E17                  	call	query_user      ; query the user if config_cmd
 34502 000027FD 7205                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 34503 000027FF E83A10                  	call	set_numlock
 34504                                  	; 24/03/2025 - MiniDOS 1.0
 34505                                  	;jc	short err
 34506                                  	;jmp	short sr110	; all done
 34507 00002802 EBE9                    	jmp	short chk_err
 34508                                  	
 34509                                  
 34510                                  ;endif	;MULTI_CONFIG
 34511                                  
 34512                                  ; 18/03/2025
 34513                                  %if 0
 34514                                  
 34515                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 34516                                  ;------------------------------------------------------------------------
 34517                                  ; dosdata command
 34518                                  ;------------------------------------------------------------------------
 34519                                  tryt:
 34520                                  	;cmp	ah,54h ; 'T'
 34521                                  	cmp	ah,CONFIG_DOSDATA ; 'T' ; PCDOS 7 new config cmd
 34522                                  	jne	short tryy
 34523                                  
 34524                                  	call	query_user
 34525                                  	jc	short tryy
 34526                                  
 34527                                  	mov	di,dosdata_parms
 34528                                  	xor	cx,cx
 34529                                  	; 14/04/2024 - Retro DOS v5.0
 34530                                  	;mov	dx,cx ; 0
 34531                                  do120:
 34532                                  	call	sysinit_parse
 34533                                  	jnc	short if120
 34534                                  
 34535                                  	;call	badparm_p
 34536                                  	;jmp	short en120
 34537                                  	; 14/04/2024 - Retro DOS v5.0
 34538                                  	jmp	badparm_p_coff
 34539                                  if120:
 34540                                  	;cmp	ax,0FFFFh
 34541                                  	cmp	ax,_$P_RC_EOL ; -1 ; end of line?
 34542                                  	jz	short en120
 34543                                  	cmp	byte [result_val_itag],1 ; tag 1 (UMB)
 34544                                  				; [result_val+_$P_Result_Blk.Item_Tag]
 34545                                   	jnz	short if121
 34546                                  	mov	byte [dosdata_umb],1 ; DOSDATA=UMB (1) NOUMB (0)
 34547                                  	;jmp	short sr120
 34548                                  	; 14/04/2024
 34549                                  	jmp	short do120
 34550                                  if121:
 34551                                  	mov	byte [dosdata_umb],0 ; DOSDATA=UMB (1) NOUMB (0)
 34552                                  sr120:
 34553                                  	jmp	short do120
 34554                                  	; 14/04/2024
 34555                                  ;en120:
 34556                                  	;jmp	coff
 34557                                  
 34558                                  %endif
 34559                                  
 34560                                  
 34561                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34562                                  ;-------------------------------------------------------------------------
 34563                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34564                                  ;		line number
 34565                                  ;-------------------------------------------------------------------------
 34566                                  
 34567                                  	; 31/12/2022
 34568                                  tryy:
 34569 00002804 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34570 00002807 750B                    	jne	short try0
 34571                                  
 34572                                  donothing:
 34573                                  	; 15/12/2022
 34574                                  	; ds = cs
 34575 00002809 FF0E[5603]              	dec	word [chrptr]
 34576 0000280D FF06[5203]              	inc	word [count]
 34577                                  	; 02/11/2022
 34578                                  	;dec	word [cs:chrptr]
 34579                                  	;inc	word [cs:count]
 34580                                  en120:		; 14/04/2024
 34581 00002811 E98CF8                  	jmp	coff
 34582                                  
 34583                                  ;------------------------------------------------------------------------
 34584                                  ; rem command
 34585                                  ;------------------------------------------------------------------------
 34586                                  
 34587                                  try0:				; do nothing with this line.
 34588 00002814 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 34589 00002817 74F0                    	je	short donothing
 34590                                  
 34591                                  ;%endif	; 30/10/2022
 34592                                  
 34593                                  ; 30/10/2022
 34594                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 34595                                  
 34596                                  ;------------------------------------------------------------------------
 34597                                  ; bogus command
 34598                                  ;------------------------------------------------------------------------
 34599                                  
 34600                                  tryz:
 34601 00002819 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 34602                                  	; 31/12/2022
 34603 0000281C 74EB                    	je	short donothing
 34604                                  	; 02/11/2022
 34605                                  	;je	short tryz_donothing
 34606                                  
 34607 0000281E FF0E[5603]              	dec	word [chrptr]
 34608 00002822 FF06[5203]              	inc	word [count]
 34609 00002826 EB1F                    	jmp	short badop
 34610                                  
 34611                                  ; 31/12/2022
 34612                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34613                                  ;tryz_donothing:
 34614                                  ;	jmp	donothing
 34615                                  
 34616                                  ;------------------------------------------------------------------------------
 34617                                  
 34618                                  sysinit_parse:
 34619                                  
 34620                                  ;------------------------------------------------------------------------------
 34621                                  ;set up registers for sysparse
 34622                                  ;in)	es:si -> command line in confbot
 34623                                  ;	di -> offset of the parse control definition.
 34624                                  ;
 34625                                  ;out)	calls sysparse.
 34626                                  ;	carry will set if parse error.
 34627                                  ;	*** the caller should check the eol condition by looking at ax
 34628                                  ;	*** after each call.
 34629                                  ;	*** if no parameters are found,then ax will contain a error code.
 34630                                  ;	*** if the caller needs to look at the synomym@ of the result,
 34631                                  ;	***  the caller should use cs:@ instead of es:@.
 34632                                  ;	cx register should be set to 0 at the first time the caller calls this
 34633                                  ;	 procedure.
 34634                                  ;	ax - exit code
 34635                                  ;	bl - terminated delimeter code
 34636                                  ;	cx - new positional ordinal
 34637                                  ;	si - set to pase scanned operand
 34638                                  ;	dx - selected result buffer
 34639                                  ;------------------------------------------------------------------------------
 34640                                  
 34641                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34642                                  	; (SYSINIT:2D78h)
 34643                                  
 34644                                  	; 14/04/2024 - Retro DOS v5.0
 34645                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:32F3h)
 34646                                  
 34647                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34648                                  	; ds = cs
 34649 00002828 8C06[DC14]              	mov	[badparm_seg],es	;save the pointer to the parm
 34650 0000282C 8936[DA14]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 34651                                  
 34652                                  	; 24/10/2022
 34653 00002830 06                      	push	es			;save es,ds
 34654 00002831 1E                      	push	ds
 34655                                  
 34656 00002832 06                      	push	es
 34657 00002833 1F                      	pop	ds			;now ds:si -> command line
 34658                                  
 34659 00002834 0E                      	push	cs
 34660 00002835 07                      	pop	es			;now es:di -> control definition
 34661                                  
 34662                                  	; 09/09/2023
 34663                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 34664                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 34665                                  	
 34666                                  	;mov	dx,0
 34667                                  	; 04/01/2023
 34668 00002836 29D2                    	sub	dx,dx ; 0
 34669 00002838 E849ED                  	call	SysParse
 34670                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 34671                                  	; 06/09/2023
 34672 0000283B 21C0                    	and	ax,ax
 34673                                  
 34674                                  ;**cas note: when zero true after cmp, carry clear
 34675                                  
 34676                                  	;je	short ll4
 34677                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 34678                                  	; 12/12/2022
 34679 0000283D 7405                    	je	short en4 ; cf=0
 34680 0000283F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 34681                                  	;jne	short if4
 34682                                  	; 12/12/2022
 34683 00002842 7400                    	je	short en4 ; cf=0
 34684                                  	; 06/09/2023
 34685                                  	; cf=1
 34686                                  
 34687                                  ; 12/12/2022
 34688                                  ;ll4:
 34689                                  ;	; 12/12/2022
 34690                                  ;	; cf=0
 34691                                  ;	;clc
 34692                                  ;	jmp	short en4
 34693                                  
 34694                                  if4:
 34695                                  	; 24/10/2022
 34696                                  	; 06/09/2023 (cf=1)
 34697                                  	;stc
 34698                                  en4:
 34699 00002844 1F                      	pop	ds
 34700 00002845 07                      	pop	es
 34701 00002846 C3                      	retn
 34702                                  
 34703                                  ; 11/12/2022
 34704                                  %if 0
 34705                                  
 34706                                  ;----------------------------------------------------------------------------
 34707                                  ;
 34708                                  ; procedure : badop_p
 34709                                  ;
 34710                                  ;             same thing as badop,but will make sure to set ds register back
 34711                                  ;             to sysinitseg and return back to the caller.
 34712                                  ;
 34713                                  ;----------------------------------------------------------------------------
 34714                                  
 34715                                  badop_p:
 34716                                  	push	cs
 34717                                  	pop	ds		;set ds to configsys seg.
 34718                                  	mov	dx,badopm
 34719                                  	call	print
 34720                                          ;call	error_line
 34721                                  	;retn
 34722                                  	; 11/12/2022
 34723                                  	jmp	error_line
 34724                                  
 34725                                  %endif
 34726                                  
 34727                                  ;----------------------------------------------------------------------------
 34728                                  ;
 34729                                  ; label : badop
 34730                                  ;
 34731                                  ;----------------------------------------------------------------------------
 34732                                  
 34733                                  badop:	
 34734 00002847 BA[9249]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 34735 0000284A E8661B                  	call	print
 34736 0000284D E82B00                  	call	error_line	;show "error in config.sys ..." .
 34737 00002850 E94DF8                  	jmp	coff
 34738                                  
 34739                                  ;----------------------------------------------------------------------------
 34740                                  ;
 34741                                  ; procedure : badparm_p
 34742                                  ;
 34743                                  ;             show "bad command or parameters - xxxxxx"
 34744                                  ;             in badparm_seg,badparm_off -> xxxxx
 34745                                  ;
 34746                                  ;----------------------------------------------------------------------------
 34747                                  
 34748                                  	; 24/10/2022
 34749                                  badparm_p:
 34750                                  	; 11/12/2022
 34751                                  	; ds = cs
 34752                                  	; 11/12/2022
 34753                                  	;push	ds ; *
 34754 00002853 52                      	push	dx
 34755 00002854 56                      	push	si
 34756                                  
 34757                                  	; 11/12/2022
 34758                                  	; ds = cs
 34759                                  	;push	cs
 34760                                  	;pop	ds
 34761                                  
 34762 00002855 BA[B949]                	mov	dx,badparm
 34763 00002858 E8581B                  	call	print			; "bad command or parameters - "
 34764 0000285B C536[DA14]              	lds	si,[badparm_ptr]
 34765                                  
 34766                                  ;	print "xxxx" until cr.
 34767                                  
 34768                                  do1:
 34769 0000285F 8A14                    	mov	dl,[si]			; get next character
 34770 00002861 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 34771 00002864 7407                    	je	short en1		; exit loop if so
 34772                                  
 34773 00002866 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 34774 00002868 CD21                    	int	21h			; display character
 34775 0000286A 46                      	inc	si			; next character
 34776 0000286B EBF2                    	jmp	short do1
 34777                                  en1:
 34778 0000286D 0E                      	push	cs
 34779 0000286E 1F                      	pop	ds
 34780                                  
 34781 0000286F BA[B649]                	mov	dx,crlfm
 34782 00002872 E83E1B                  	call	print
 34783 00002875 E80300                  	call	error_line
 34784                                  
 34785 00002878 5E                      	pop	si
 34786 00002879 5A                      	pop	dx
 34787                                  	; 11/12/2022
 34788                                  	;pop	ds ; *
 34789                                  badparmp_ret:
 34790 0000287A C3                      	retn
 34791                                  
 34792                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34793                                  %if 0
 34794                                  
 34795                                  ;----------------------------------------------------------------------------
 34796                                  ;
 34797                                  ; procedure : getchr
 34798                                  ;
 34799                                  ;----------------------------------------------------------------------------
 34800                                  
 34801                                  	; 24/10/2022
 34802                                  getchr:
 34803                                  	; 12/12/2022
 34804                                  	;push	cx
 34805                                  	;mov	cx,[count]
 34806                                  	;jcxz	nochar
 34807                                  	; 12/12/2022
 34808                                  	cmp	word [count],1 
 34809                                  	jb	short nochar ; cf=1 ([count] = 0)
 34810                                  	
 34811                                  	mov	si,[chrptr]
 34812                                  	mov	al,[es:si]
 34813                                  	dec	word [count]
 34814                                  	inc	word [chrptr]
 34815                                  	; 12/12/202
 34816                                  	; cf=0
 34817                                  	;clc
 34818                                  ;get_ret:
 34819                                  	;pop	cx
 34820                                  	;retn
 34821                                  nochar: 
 34822                                  	; 12/12/2022
 34823                                  	; cf=1
 34824                                  	;stc
 34825                                  	;jmp	short get_ret
 34826                                  	
 34827                                  	retn
 34828                                  %endif
 34829                                  
 34830                                  ; 11/12/2022
 34831                                  %if 0
 34832                                  
 34833                                  ;----------------------------------------------------------------------------
 34834                                  ;
 34835                                  ; procedure : incorrect_order
 34836                                  ;
 34837                                  ;             show "incorrect order in config.sys ..." message.
 34838                                  ;
 34839                                  ;----------------------------------------------------------------------------
 34840                                  
 34841                                  incorrect_order:
 34842                                  	mov	dx,badorder
 34843                                  	call	print
 34844                                  	call	showlinenum
 34845                                  	retn
 34846                                  
 34847                                  %endif
 34848                                  
 34849                                  ;----------------------------------------------------------------------------
 34850                                  ;
 34851                                  ; procedure : error_line
 34852                                  ;
 34853                                  ;             show "error in config.sys ..." message.
 34854                                  ;
 34855                                  ;----------------------------------------------------------------------------
 34856                                  
 34857                                  	; 11/12/2022
 34858                                  	; 24/10/2022
 34859                                  error_line:
 34860                                  	; 11/12/2022
 34861                                  	; ds = cs
 34862                                  	;push	cs
 34863                                  	;pop	ds
 34864                                  
 34865 0000287B BA[EE4A]                	mov	dx,errorcmd
 34866 0000287E E8321B                  	call	print
 34867                                  	;call	showlinenum
 34868                                  	;retn
 34869                                  	; 11/12/2022
 34870                                  	;jmp	short shortlinemum
 34871                                  
 34872                                  ;----------------------------------------------------------------------------
 34873                                  ;
 34874                                  ; procedure : showlinenum
 34875                                  ;
 34876                                  ; convert the binary linecount to decimal ascii string in showcount
 34877                                  ; and display showcount at the current curser position.
 34878                                  ; in.) linecount
 34879                                  ;
 34880                                  ; out) the number is printed.
 34881                                  ;
 34882                                  ;----------------------------------------------------------------------------
 34883                                  
 34884                                  	; 11/12/2022
 34885                                  	; ds = cs
 34886                                  	; 24/10/2022
 34887                                  showlinenum:
 34888 00002881 06                      	push	es
 34889                                  	; 11/12/2022
 34890                                  	;push	ds
 34891 00002882 57                      	push	di
 34892                                  
 34893 00002883 0E                      	push	cs
 34894 00002884 07                      	pop	es		; es=cs
 34895                                  
 34896                                  	; 11/12/2022
 34897                                  	;push	cs
 34898                                  	;pop	ds
 34899                                  
 34900 00002885 BF[B102]                	mov	di,showcount+4	; di -> the least significant decimal field.
 34901 00002888 B90A00                  	mov	cx,10		; decimal divide factor
 34902                                  	;mov	ax,[cs:linecount]
 34903                                  	; 11/12/2022
 34904 0000288B A1[AB02]                	mov	ax,[linecount]
 34905                                  sln_loop:
 34906                                  	; 11/12/2022
 34907 0000288E 39C8                    	cmp	ax,cx ; < 10 ?
 34908                                  	;cmp	ax,10		; < 10?
 34909 00002890 720C                    	jb	short sln_last
 34910                                  
 34911 00002892 31D2                    	xor	dx,dx
 34912 00002894 F7F1                    	div	cx	; cx = 10
 34913 00002896 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 34914 00002899 8815                    	mov	[di],dl
 34915 0000289B 4F                      	dec	di
 34916 0000289C EBF0                    	jmp	short sln_loop
 34917                                  
 34918                                  sln_last:
 34919 0000289E 0C30                    	or	al,30h	; "0"
 34920 000028A0 8805                    	mov	[di],al
 34921 000028A2 89FA                    	mov	dx,di
 34922 000028A4 E80C1B                  	call	print		; show it.
 34923 000028A7 5F                      	pop	di
 34924                                  	; 11/12/2022
 34925                                  	;pop	ds
 34926 000028A8 07                      	pop	es
 34927 000028A9 C3                      	retn
 34928                                  
 34929                                  ; 07/04/2019 - Retro DOS v4.0
 34930                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 34931                                  
 34932                                  ;----------------------------------------------------------------------------
 34933                                  ;
 34934                                  ; procedure : ProcDOS
 34935                                  ;
 34936                                  ;	Process the result of DOS= parsing
 34937                                  ;
 34938                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 34939                                  ;				= 2 for DOS=LOW
 34940                                  ;				= 3 for DOS=UMB
 34941                                  ;				= 4 for DOS=NOUMB
 34942                                  ;----------------------------------------------------------------------------
 34943                                  
 34944                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 34945                                  	; (SYTSINIT:2AB5h)
 34946                                  ProcDOS:
 34947                                  	; 01/01/2023
 34948                                  	; ds = cs
 34949 000028AA 30E4                    	xor	ah,ah
 34950                                  	;;mov	al,[cs:result_val_itag]
 34951                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 34952                                  	; 01/01/2023
 34953 000028AC A0[871D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 34954 000028AF 48                      	dec	ax
 34955 000028B0 7415                    	jz	short pd_hi
 34956 000028B2 48                      	dec	ax
 34957 000028B3 740E                    	jz	short pd_lo
 34958 000028B5 48                      	dec	ax
 34959 000028B6 7405                    	jz	short pd_umb
 34960                                  	;;mov	byte [cs:DevUMB],0
 34961                                  	; 18/12/2022
 34962                                  	;mov	byte [cs:DevUMB],ah ; 0
 34963                                  	; 01/01/2023
 34964 000028B8 8826[5C1F]              	mov	byte [DevUMB],ah ; 0
 34965 000028BC C3                      	retn
 34966                                  pd_umb:
 34967                                  	; 01/01/2023
 34968 000028BD C606[5C1F]FF            	mov	byte [DevUMB],0FFh
 34969                                  	;mov	byte [cs:DevUMB],0FFh
 34970 000028C2 C3                      	retn
 34971                                  pd_lo:
 34972                                  	; 01/01/2023
 34973 000028C3 A2[6C02]                	mov	[runhigh],al ; 0
 34974                                  	; 18/12/2022
 34975                                  	;mov	[cs:runhigh],al ; 0
 34976                                  	;;mov	byte [cs:runhigh],0
 34977 000028C6 C3                      	retn
 34978                                  pd_hi:
 34979                                  	; 01/01/2023
 34980 000028C7 C606[6C02]FF            	mov	byte [runhigh],0FFh
 34981                                  	;mov	byte [cs:runhigh],0FFh
 34982                                  limx:	; 11/12/2022
 34983 000028CC C3                      	retn
 34984                                  
 34985                                  ;----------------------------------------------------------------------------
 34986                                  ;
 34987                                  ; procedure : LieInt12Mem
 34988                                  ;
 34989                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 34990                                  ;		alloclim set to the limit of low memory.
 34991                                  ;
 34992                                  ;	Output : none
 34993                                  ;
 34994                                  ;	Changes the ROM BIOS variable which stores the total low memory
 34995                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 34996                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 34997                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 34998                                  ;	converted into Ks and stored in 40:13h
 34999                                  ;
 35000                                  ;----------------------------------------------------------------------------
 35001                                  
 35002                                  LieInt12Mem:
 35003                                  	; 11/12/2022
 35004                                  	; ds = cs
 35005 000028CD A1[A102]                	mov	ax,[ALLOCLIM]
 35006                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 35007                                  					; assuming that it is 3Com
 35008 000028D0 E84200                  	call	IsIt3Com		; Is it 3Com driver?
 35009 000028D3 740A                    	jz	short lim_set		; yes, lie to him differently
 35010                                  	; 13/05/2019
 35011                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 35012                                  	;je	short limx		; no, don't lie
 35013                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 35014                                  	; 11/12/2022
 35015                                  	; ds = cs
 35016 000028D5 803E[6B1F]00            	cmp	byte [DeviceHi],0
 35017 000028DA 74F0                    	je	short limx
 35018 000028DC A1[511F]                	mov	ax,[DevLoadEnd]
 35019                                  lim_set:
 35020                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35021                                  	; 11/12/2022
 35022                                  	;call	SetInt12Mem
 35023                                  ;limx:
 35024                                  	;retn
 35025                                  	
 35026                                  	;jmp	short SetInt12Mem 
 35027                                  
 35028                                  ;----------------------------------------------------------------------------
 35029                                  ;
 35030                                  ; procedure : SetInt12Mem
 35031                                  ;
 35032                                  ;	Input : AX = Memory size to be set (in paras)
 35033                                  ;	Output : none
 35034                                  ;
 35035                                  ;	Sets the variable 40:13 to the memory size passed in AX
 35036                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 35037                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 35038                                  ;	restoring the value of 40:13
 35039                                  ;
 35040                                  ;----------------------------------------------------------------------------
 35041                                  
 35042                                  	; 01/11/2022
 35043                                  SetInt12Mem:
 35044 000028DF 1E                      	push	ds
 35045 000028E0 BB4000                  	mov	bx,40h
 35046 000028E3 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 35047 000028E5 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 35048                                  	;mov	[cs:OldInt12Mem],bx	; save it
 35049 000028E9 B106                    	mov	cl,6
 35050 000028EB D3E8                    	shr	ax,cl			; convert paras into Ks
 35051 000028ED A31300                  	mov	[13h],ax		; Lie
 35052                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 35053 000028F0 1F                      	pop	ds
 35054                                  	; 14/04/2024
 35055                                  	; ds = cs
 35056 000028F1 891E[6F1F]              	mov	[OldInt12Mem],bx
 35057 000028F5 C606[6E1F]FF            	mov	byte [Int12Lied],0FFh
 35058                                  ;limx:
 35059 000028FA C3                      	retn
 35060                                  
 35061                                  ;----------------------------------------------------------------------------
 35062                                  ;
 35063                                  ; procedure : TrueInt12Mem
 35064                                  ;
 35065                                  ;	Input : Int12Lied = 0 if we are not lying currently
 35066                                  ;			  = 0ffh if we are lying
 35067                                  ;		OldInt12Mem = Saved value of 40:13h
 35068                                  ;
 35069                                  ;	Output : none
 35070                                  ;
 35071                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 35072                                  ;	and resets the flag which indicates that we were lying
 35073                                  ;
 35074                                  ;----------------------------------------------------------------------------
 35075                                  
 35076                                  TrueInt12Mem:
 35077                                  	; 11/12/2022
 35078                                  	; ds = cs
 35079 000028FB 803E[6E1F]00            	cmp	byte [Int12Lied],0
 35080                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 35081                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 35082                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 35083 00002900 7412                    	je	short timx		; no, we weren't
 35084                                  	; 18/12/2022
 35085 00002902 B84000                  	mov	ax,40h
 35086 00002905 8826[6E1F]              	mov	[Int12Lied],ah ; 0
 35087                                  	;mov	byte [Int12Lied],0
 35088                                  	;mov	byte [cs:Int12Lied],0
 35089 00002909 1E                      	push	ds
 35090                                  	;mov	ax,40h
 35091 0000290A 8ED8                    	mov	ds,ax
 35092 0000290C 2EA1[6F1F]              	mov	ax,[cs:OldInt12Mem]
 35093 00002910 A31300                  	mov	[13h],ax		; restore INT 12 memory
 35094 00002913 1F                      	pop	ds
 35095                                  timx:
 35096 00002914 C3                      	retn
 35097                                  
 35098                                  ;----------------------------------------------------------------------------
 35099                                  ;
 35100                                  ; procedure : IsIt3Com?
 35101                                  ;
 35102                                  ;	Input : DevEntry = Seg:0 of device driver
 35103                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 35104                                  ;		 else Zero flag is reset
 35105                                  ;
 35106                                  ;----------------------------------------------------------------------------
 35107                                  
 35108                                  IsIt3Com:
 35109                                  	; 11/12/2022
 35110                                  	; ds = cs
 35111 00002915 1E                      	push	ds
 35112 00002916 06                      	push	es
 35113 00002917 56                      	push	si
 35114                                  	; 11/12/2022
 35115 00002918 C536[531F]              	lds	si,[DevEntry]
 35116                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 35117 0000291C 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 35118 0000291F 0E                      	push	cs
 35119 00002920 07                      	pop	es
 35120 00002921 BF[711F]                	mov	di,ThreeComName
 35121 00002924 B90800                  	mov	cx,8			; name length
 35122 00002927 F3A6                    	rep	cmpsb
 35123 00002929 5E                      	pop	si
 35124 0000292A 07                      	pop	es
 35125 0000292B 1F                      	pop	ds
 35126 0000292C C3                      	retn
 35127                                  
 35128                                  ;M020 : BEGIN
 35129                                  ;----------------------------------------------------------------------------
 35130                                  
 35131                                  UpdatePDB:
 35132 0000292D 1E                      	push	ds
 35133 0000292E B462                    	mov	ah,62h
 35134 00002930 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 35135 00002932 8EDB                    	mov	ds,bx
 35136 00002934 2E8B1E[A102]            	mov	bx,[cs:ALLOCLIM]
 35137                                  	;mov	[2],bx
 35138 00002939 891E0200                	mov	[PDB.BLOCK_LEN],bx
 35139 0000293D 1F                      	pop	ds
 35140 0000293E C3                      	retn
 35141                                  
 35142                                  ; M020 : END
 35143                                  
 35144                                  ;----------------------------------------------------------------------------
 35145                                  
 35146                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35147                                  ;%if 0
 35148                                  
 35149                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35150                                  ; (SYSINIT:2EEEh)
 35151                                  
 35152                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 35153                                  ;include highexit.inc	; umb's, etc
 35154                                  
 35155                                  ; ----------------------------------------------------------------------
 35156                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 35157                                  ; ----------------------------------------------------------------------
 35158                                  ; 07/04/2019 - Retro DOS v4.0
 35159                                  
 35160                                  ;******************************************************************************
 35161                                  ;
 35162                                  ; This file contains routines needed to parse and implement user-given
 35163                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 35164                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 35165                                  ; the variables in highvar.inc, for use by the rest of the routines.
 35166                                  ;
 35167                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 35168                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 35169                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 35170                                  ;    DH/LH module opts
 35171                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 35172                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 35173                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 35174                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 35175                                  ; available during the load.
 35176                                  ;
 35177                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 35178                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 35179                                  ; upper-memory block which was not specified by the user... in addition, if
 35180                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 35181                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 35182                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 35183                                  ; free any UMBs so allocated.
 35184                                  ;
 35185                                  ; When a device driver loads, there is the additional problem of allocating its
 35186                                  ; initial load site; this should be restricted to the first UMB specified on
 35187                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 35188                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 35189                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 35190                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 35191                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 35192                                  ;
 35193                                  ;******************************************************************************
 35194                                  
 35195                                  SWTCH	equ	'/'		; Switch character
 35196                                  
 35197                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 35198                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 35199                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 35200                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 35201                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 35202                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 35203                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 35204                                  
 35205                                  CR	equ	0Dh		; Carriage Return
 35206                                  LF	equ	0Ah		; Line Feed
 35207                                  TAB	equ	09h		; Tab character (^I)
 35208                                  
 35209                                  ; -----------------------------------------------------------------------------
 35210                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 35211                                  ; -----------------------------------------------------------------------------
 35212                                  ; ENTRY:       None
 35213                                  ; EXIT:        Variables listed in highvar.inc are initialized
 35214                                  ; ERROR EXIT:  None
 35215                                  ; USES:        Flags, variables in highvar.inc
 35216                                  ; -----------------------------------------------------------------------------
 35217                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 35218                                  ; are largely ignored, but it is initialized nonetheless.
 35219                                  ; -----------------------------------------------------------------------------
 35220                                  
 35221                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35222                                  ; (SYSINIT:2EEEh)
 35223                                  
 35224                                  InitVar:
 35225                                  	; 01/01/2023
 35226                                  	; ds = cs
 35227                                  
 35228                                  	;pushreg <ax, cx, di, es>
 35229                                  	; 03/01/2023
 35230                                  	;push	ax
 35231                                  	;push	cx
 35232                                  	;push	di
 35233 0000293F 06                      	push	es
 35234                                  
 35235                                  	;dataseg es			;Point ES into appropriate data segment
 35236 00002940 0E                      	push	cs
 35237 00002941 07                      	pop	es
 35238                                  
 35239 00002942 31C0                    	xor	ax,ax
 35240                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 35241                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 35242                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 35243                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 35244                                  	;				;Later is the # of the 1st spec'd UMB
 35245                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 35246                                  
 35247                                  	; 01/01/2023
 35248                                  	; ds = cs
 35249 00002944 A2[161F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 35250 00002947 A2[151F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 35251 0000294A A3[171F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 35252 0000294D C606[191F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 35253                                  					;Later is the # of the 1st spec'd UMB
 35254 00002952 A2[4C1F]                	mov	[fm_argc], al		;Start with zero args having been read
 35255                                  
 35256 00002955 FC                      	cld
 35257                                  
 35258 00002956 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 35259 00002959 BF[1A1F]                	mov	di,UmbUsed		;on the UmbUsed array,
 35260 0000295C F3AA                    	rep	stosb			;	Store 0
 35261                                  
 35262                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 35263                                  	; 01/01/2033
 35264 0000295E B110                    	mov	cl,MAXUMB ; 16
 35265 00002960 BF[2A1F]                	mov	di,UmbSize		;on the UmbSize array,
 35266 00002963 F3AB                    	rep	stosw			;	Store 0
 35267                                  
 35268                                  	;normseg es			; Return ES
 35269                                  
 35270                                  	;popreg	<es, di, cx, ax>
 35271 00002965 07                      	pop	es
 35272                                  	; 03/01/2023
 35273                                  	;pop	di
 35274                                  	;pop	cx
 35275                                  	;pop	ax	 	
 35276                                  
 35277 00002966 C3                      	retn
 35278                                  
 35279                                  ; -----------------------------------------------------------------------------
 35280                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 35281                                  ; -----------------------------------------------------------------------------
 35282                                  ; ENTRY   : None
 35283                                  ; EXIT    : None
 35284                                  ; ERROR   : None
 35285                                  ; USES    : Flags, fm_umb, fm_strat
 35286                                  ; -----------------------------------------------------------------------------
 35287                                  
 35288                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35289                                  	; (SYSINIT:2F22h)
 35290                                  FixMem:
 35291                                  	; 01/01/2023
 35292                                  	;push	ax
 35293                                  	;push	bx
 35294                                  	;push	cx
 35295                                  	;push	dx
 35296 00002967 06                      	push	es
 35297                                  
 35298 00002968 E84900                  	call	fm_link		; Link in UMBs
 35299                                  
 35300 0000296B E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 35301 0000296E 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 35302                                  
 35303 00002970 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 35304                                  
 35305                                  ; - Walk MCB Chain ------------------------------------------------------------
 35306                                  
 35307 00002972 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 35308 00002974 89D1                    	mov 	cx,dx		; in CX... and the last owner
 35309 00002976 42                      	inc	dx		; in dx as we go through the loop:
 35310                                  
 35311                                  ; ------------------------------------------
 35312                                  ; FM10--DX  = last MCB's owner's PSP address
 35313                                  ;       CX  = last MCB's address (segment)
 35314                                  ; ------------------------------------------
 35315                                  
 35316 00002977 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 35317 0000297B 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 35318 00002980 09D3                    	or	bx,dx			; dx was owner of previous MCB
 35319 00002982 7516                    	jnz	short fm30		; If not both zero, don't cat.
 35320                                  
 35321                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 35322                                  
 35323 00002984 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 35324 00002989 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 35325 0000298B 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 35326                                  
 35327 0000298F 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 35328                                  	;add	bx,1			; And add one for the header
 35329                                  	; 11/07/2023
 35330 00002994 43                      	inc	bx
 35331 00002995 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 35332                                  
 35333                                  	; ---------------------------------------------------------------------
 35334                                  
 35335 0000299A 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 35336 0000299C 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 35337                                  
 35338 000029A1 8CC3                    	mov	bx,es			; Move to the next MCB
 35339 000029A3 26031E0300              	add	bx,[es:ARENA.SIZE]
 35340 000029A8 43                      	inc	bx
 35341 000029A9 8EC3                    	mov	es,bx
 35342                                  
 35343                                  	;cmp	al,'Z'
 35344 000029AB 3C5A                    	cmp	al,arena_signature_end
 35345 000029AD 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 35346                                  fmX:	
 35347 000029AF E81300                  	call	fm_unlink		; Unlink UMBs
 35348                                  
 35349 000029B2 07                      	pop	es
 35350                                  	; 01/01/2023
 35351                                  	;pop	dx
 35352                                  	;pop	cx
 35353                                  	;pop	bx
 35354                                  	;pop	ax
 35355                                  
 35356 000029B3 C3                      	retn
 35357                                  
 35358                                  ; -----------------------------------------------------------------------------
 35359                                  ;*** fm_link - links UMBs not already linked in
 35360                                  ; -----------------------------------------------------------------------------
 35361                                  ; ENTRY:    None
 35362                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 35363                                  ; ERROR:    None
 35364                                  ; USES:     AX, BX, fm_umb
 35365                                  ; -----------------------------------------------------------------------------
 35366                                  
 35367                                  	; 01/01/2023 - Retro DOS v4.2
 35368                                  fm_link:
 35369 000029B4 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 35370 000029B7 CD21                    	int	21h			; Current link-state is now in al
 35371                                  
 35372                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 35373                                  	;
 35374                                  	;push	es
 35375                                  	;push	cs
 35376                                  	;pop	es
 35377                                  	;mov	[es:fm_umb],al
 35378                                  	;pop	es
 35379                                  	
 35380                                  	; 01/01/2023
 35381                                  	; ds = cs
 35382                                  	;mov	[cs:fm_umb],al
 35383 000029B9 A2[4A1F]                	mov	[fm_umb],al
 35384                                  
 35385 000029BC B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35386 000029BF BB0100                  	mov	bx,1
 35387 000029C2 CD21                    	int	21h
 35388 000029C4 C3                      	retn
 35389                                  
 35390                                  ; -----------------------------------------------------------------------------
 35391                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 35392                                  ; -----------------------------------------------------------------------------
 35393                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 35394                                  ; EXIT:     None
 35395                                  ; ERROR:    None
 35396                                  ; USES:     AX, BX
 35397                                  ; -----------------------------------------------------------------------------
 35398                                  
 35399                                  	; 01/01/2023 - Retro DOS v4.2
 35400                                  fm_unlink:
 35401 000029C5 31DB                    	xor	bx,bx
 35402                                  	
 35403                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 35404                                  	;
 35405                                  	;push	ds
 35406                                  	;push	cs
 35407                                  	;pop	ds
 35408                                  	;mov	bl,[fm_umb]	
 35409                                  	;pop	ds
 35410                                  	
 35411                                  	; 01/01/2023
 35412                                  	; ds = cs
 35413                                  	;mov	bl,[cs:fm_umb]
 35414 000029C7 8A1E[4A1F]              	mov	bl,[fm_umb]
 35415                                  
 35416 000029CB B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35417 000029CE CD21                    	int	21h			; so just use that, and call int 21h
 35418 000029D0 C3                      	retn
 35419                                  
 35420                                  ; 08/04/2019 - Retro DOS v4.0
 35421                                  
 35422                                  ; -----------------------------------------------------------------------------
 35423                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 35424                                  ; laid out in highvar.inc
 35425                                  ; -----------------------------------------------------------------------------
 35426                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 35427                                  ; EXIT:     ES:SI points to first character in child program name
 35428                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 35429                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 35430                                  ; -----------------------------------------------------------------------------
 35431                                  ; Error codes (in AX if carry set on return):
 35432                                  ;
 35433                                  PV_InvArg	equ	1	; Invalid argument passed
 35434                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 35435                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 35436                                  ;
 35437                                  ; This routine exects ES:SI to point to a string much like the following:
 35438                                  ;    "/S/L:1,200;2 module options"
 35439                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 35440                                  ; required, though that's what this routine is supposed to parse.
 35441                                  ;
 35442                                  optS		equ	'S'	; /S
 35443                                  optL		equ	'L'	; /L:...
 35444                                  ;
 35445                                  ; -----------------------------------------------------------------------------
 35446                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 35447                                  ; a command-line for spawning a child process. For a typical LH command, say,
 35448                                  ;     lh /l:1,1000;2 print/d:lpt2
 35449                                  ; the arguments would look like (one per line):
 35450                                  ;     lh
 35451                                  ;     /l
 35452                                  ;     1
 35453                                  ;     1000
 35454                                  ;     2
 35455                                  ;     print
 35456                                  ;     /d
 35457                                  ;     :lpt2
 35458                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 35459                                  ; arg was the filename. So, inside this routine, we keep a running counter
 35460                                  ; of the number of arguments LH will need to skip in order to get to the
 35461                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 35462                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 35463                                  ; for:
 35464                                  ;    Each /L
 35465                                  ;    Each /S (there should be only one)
 35466                                  ;    Each UMB number (they follow ":" or ";")
 35467                                  ;    Each UMB size   (they follow ",")
 35468                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 35469                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 35470                                  ; -----------------------------------------------------------------------------
 35471                                  
 35472                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35473                                  	; (SYSINIT:2F9Fh)
 35474                                  
 35475                                  ParseVar:
 35476                                  	;pushreg <di, ds, es>
 35477                                  	; 01/01/2023
 35478                                  	;push	di ; * ; (not required) ; 01/01/2023
 35479 000029D1 1E                      	push	ds
 35480 000029D2 06                      	push	es
 35481                                  
 35482 000029D3 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 35483 000029D4 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 35484 000029D5 FC                      	cld
 35485                                  
 35486                                  ; ------------------------------------------------
 35487                                  ; PV10--ES:SI = any whitespace on the command-line
 35488                                  ; ------------------------------------------------
 35489                                  
 35490 000029D6 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 35491 000029D7 E8A200                  	call	isWhite
 35492 000029DA 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 35493                                  	;cmp	al,'/'
 35494 000029DC 3C2F                    	cmp	al,SWTCH
 35495 000029DE 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 35496                                  
 35497 000029E0 4E                      	dec	si		; Backup--it's now "odule options", and we need
 35498 000029E1 F8                      	clc			; that "m" we just read (or whatever it is).
 35499 000029E2 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 35500                                  
 35501 000029E4 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 35502                                  	;toUpper al		; So we make it upper-case, and...
 35503 000029E5 24DF                    	and	al,0DFh
 35504                                  	;cmp	al,'S'
 35505 000029E7 3C53                    	cmp	al,optS		; just read 'S'?
 35506 000029E9 750D                    	jne	short pv30
 35507                                  
 35508                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 35509 000029EB 2EFE06[4C1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35510                                  
 35511                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 35512                                  	;
 35513                                  	;push	es
 35514                                  	;push	cs
 35515                                  	;pop	es
 35516                                  	;mov	[es:fUmbTiny],1	
 35517                                  	;pop	es
 35518                                  
 35519 000029F0 2EC606[161F]01          	mov	byte [cs:fUmbTiny],1
 35520                                  
 35521 000029F6 EBDE                    	jmp	short pv10	; possibly even "/L...".
 35522                                  
 35523                                  pv30:	;cmp	al,'L'
 35524 000029F8 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 35525 000029FA 750D                    	jne	short pvE1		; switch!
 35526                                  
 35527                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 35528 000029FC 2EFE06[4C1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35529                                  
 35530 00002A01 E80E00                  	call	parseL
 35531 00002A04 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 35532                                  
 35533 00002A06 4E                      	dec	si		; Else, back up and exit.
 35534 00002A07 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 35535                                  
 35536                                  pvE1:	;mov	ax,3
 35537 00002A09 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 35538 00002A0C 4E                      pvErr:	dec	si
 35539 00002A0D 4E                      	dec	si
 35540 00002A0E F9                      	stc
 35541                                  pvX:	;popreg	<es, ds, di>
 35542 00002A0F 07                      	pop	es
 35543 00002A10 1F                      	pop	ds
 35544                                  	; 01/01/2023
 35545                                  	;pop	di ; * ; (not required) ; 01/01/2023
 35546 00002A11 C3                      	retn
 35547                                  
 35548                                  ; -----------------------------------------------------------------------------
 35549                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 35550                                  ; -----------------------------------------------------------------------------
 35551                                  ; ENTRY:    ES:SI points to colon
 35552                                  ; EXIT:     ES:SI points to first character not parsed
 35553                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 35554                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 35555                                  ; -----------------------------------------------------------------------------
 35556                                  ; If the string here is terminated with anything other than whitespace or a
 35557                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 35558                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 35559                                  ; makes sure the app /L: is reported as being the culprit.
 35560                                  ; -----------------------------------------------------------------------------
 35561                                  
 35562                                  parseL:
 35563 00002A12 AC                      	lodsb
 35564 00002A13 3C3A                    	cmp	al,':'		; Make sure they did /L:
 35565 00002A15 754E                    	jne	short plE1	; If they didn't, return with carry set.
 35566                                  
 35567                                  ; ------------------------------------------
 35568                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 35569                                  ; ------------------------------------------
 35570                                  
 35571 00002A17 E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 35572 00002A1A 724F                    	jc	short plE2	; And error if it's a bad number.
 35573 00002A1C E89D01                  	call	convUMB		; Convert any address to a UMB number
 35574                                  
 35575 00002A1F 88C1                    	mov	cl,al		; Remember the UMB number
 35576 00002A21 E87600                  	call	stowUMB		; Mark this UMB # as used;
 35577 00002A24 7245                    	jc	short plE2	; If it was already marked, it'll error
 35578                                  
 35579                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 35580 00002A26 2EFE06[4C1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35581                                  
 35582 00002A2B AC                      	lodsb
 35583 00002A2C 3C3B                    	cmp	al,';'		; Did "umb;" ?
 35584 00002A2E 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 35585                                  
 35586 00002A30 E84900                  	call	isWhite		; Did "umb " ?
 35587 00002A33 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 35588                                  
 35589 00002A35 E83900                  	call	isEOL		; Did "umb" ?
 35590 00002A38 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35591                                  
 35592                                  	;cmp	al,'/'
 35593 00002A3A 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 35594 00002A3C 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 35595                                  
 35596 00002A3E 3C2C                    	cmp	al,','		; Did "umb," ?
 35597 00002A40 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 35598                                  
 35599                                  ; --- Read a size -------------------------------------------------------------
 35600                                  
 35601 00002A42 E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 35602 00002A45 721E                    	jc	short plE1	; And error if it's a bad size.
 35603                                  
 35604 00002A47 E81601                  	call	toPara		; Convert from bytes to paragraphs
 35605                                  
 35606 00002A4A E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 35607                                  
 35608                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 35609 00002A4D 2EFE06[4C1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35610                                  
 35611 00002A52 AC                      	lodsb
 35612 00002A53 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 35613 00002A55 74C0                    	je	short pl10	;
 35614                                  
 35615 00002A57 E82200                  	call	isWhite		; Did it end with whitespace?
 35616 00002A5A 7414                    	jz	short plX	; If so, we're done here--go back.
 35617                                  
 35618 00002A5C E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 35619 00002A5F 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35620                                  
 35621                                  	;cmp	al,'/'
 35622 00002A61 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 35623 00002A63 740A                    	je	short plSwX	; If so, again, we're done here.
 35624                                  plE1:	
 35625                                  	;mov	ax,1
 35626 00002A65 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 35627 00002A68 4E                      	dec	si
 35628 00002A69 F9                      	stc
 35629 00002A6A C3                      	retn
 35630                                  
 35631                                  plE2:	;mov	ax,2
 35632 00002A6B B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 35633                                  	; 12/12/2022
 35634                                  	; cf=1
 35635                                  	;stc
 35636 00002A6E C3                      	retn
 35637                                  plSwX:	
 35638 00002A6F 4E                      	dec	si		; If we hit a '/' character, back up one char
 35639                                  				; so the whitespace checker will see it too.
 35640                                  plX:	; 12/12/2022
 35641                                  	; cf=0
 35642                                  	;clc			; Then just return with carry clear, so
 35643 00002A70 C3                      	retn			; ParseVar will go about its business.
 35644                                  
 35645                                  ; -----------------------------------------------------------------------------
 35646                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 35647                                  ; -----------------------------------------------------------------------------
 35648                                  ; ENTRY:    None
 35649                                  ; EXIT:     None
 35650                                  ; ERROR:    None
 35651                                  ; USES:     fm_argc, flags
 35652                                  ; -----------------------------------------------------------------------------
 35653                                  
 35654                                  ;incArgc:
 35655                                  	;push	ax
 35656                                  
 35657                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 35658                                  
 35659                                  	;mov	al,[cs:fm_argc]
 35660                                  
 35661                                  	;inc	al		; Increment it,
 35662                                  
 35663                                  	;;putdata fm_argc, al	; And store it right back.
 35664                                  
 35665                                  	;mov	[cs:fm_argc],al
 35666                                  
 35667                                  	;pop	ax
 35668                                  	;retn
 35669                                  
 35670                                  ; -----------------------------------------------------------------------------
 35671                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 35672                                  ; -----------------------------------------------------------------------------
 35673                                  ; ENTRY:    AL contains character to test
 35674                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 35675                                  ; ERROR:    None
 35676                                  ; USES:     ZF
 35677                                  ; -----------------------------------------------------------------------------
 35678                                  
 35679                                  isEOL:
 35680 00002A71 3C00                    	cmp	al,0		; Null-terminator
 35681 00002A73 7406                    	je	short ieX
 35682 00002A75 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 35683 00002A77 7402                    	je	short ieX
 35684 00002A79 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 35685                                  ieX:	
 35686 00002A7B C3                      	retn
 35687                                  
 35688                                  ; -----------------------------------------------------------------------------
 35689                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 35690                                  ; -----------------------------------------------------------------------------
 35691                                  ; ENTRY:    AL contains character to test
 35692                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 35693                                  ; ERROR:    None
 35694                                  ; USES:     ZF
 35695                                  ; -----------------------------------------------------------------------------
 35696                                  
 35697                                  isWhite:
 35698 00002A7C 3C20                    	cmp	al,' '		; Space
 35699 00002A7E 7406                    	je	short iwX
 35700 00002A80 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 35701 00002A82 7402                    	je	short iwX
 35702 00002A84 3C09                    	cmp	al,tab ; 9	; Tab
 35703                                  iwX:	
 35704 00002A86 C3                      	retn
 35705                                  
 35706                                  ; -----------------------------------------------------------------------------
 35707                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 35708                                  ; -----------------------------------------------------------------------------
 35709                                  ; ENTRY:    AL contains UMB number
 35710                                  ; EXIT:     None
 35711                                  ; ERROR:    None
 35712                                  ; USES:     Flags, variables in highvar.inc
 35713                                  ; -----------------------------------------------------------------------------
 35714                                  
 35715                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35716                                  
 35717                                  unMarkUMB:
 35718                                  	; 02/01/2023
 35719                                  	;push	ax
 35720                                  	;push	bx
 35721                                  	;push	di
 35722                                  	;push	es
 35723                                  	;
 35724                                  	;push	cs
 35725                                  	;pop	es
 35726                                  
 35727 00002A87 30E4                    	xor	ah,ah
 35728 00002A89 89C3                    	mov	bx,ax
 35729                                  
 35730                                  	; 19/04/2019
 35731                                  	
 35732                                  	;;mov	byte [es:bx+UmbUsed],0
 35733                                  	;mov	[es:bx+UmbUsed],ah ; 0
 35734                                  	; 02/01/2023
 35735                                  	; ds= cs
 35736                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 35737 00002A8B 88A7[1A1F]              	mov	[bx+UmbUsed],ah ; 0
 35738                                  
 35739 00002A8F 3806[191F]              	cmp	[UmbLoad],al
 35740                                  	;cmp	[cs:UmbLoad],al
 35741                                  	;;cmp	[es:UmbLoad],al
 35742 00002A93 7504                    	jne	short umu10
 35743                                  
 35744                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 35745                                  	;mov	[es:UmbLoad],ah ; 0
 35746                                  	; 02/01/2023
 35747                                  	; ds = cs
 35748                                  	;mov	[cs:UmbLoad],ah ; 0
 35749 00002A95 8826[191F]              	mov	[UmbLoad],ah ; 0
 35750                                  umu10:	
 35751                                  	;pop	es
 35752                                  	;pop	di
 35753                                  	;pop	bx
 35754                                  	;pop	ax
 35755 00002A99 C3                      	retn
 35756                                  
 35757                                  ; -----------------------------------------------------------------------------
 35758                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 35759                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 35760                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 35761                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 35762                                  ; -----------------------------------------------------------------------------
 35763                                  ; ENTRY:    AL contains UMB number, as specified by the user
 35764                                  ; EXIT:     None
 35765                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 35766                                  ; USES:     AX, Flags, variables in highvar.inc
 35767                                  ; -----------------------------------------------------------------------------
 35768                                  
 35769                                  	; 01/01/2023 - Retro DOS v4.2
 35770                                  stowUMB:
 35771 00002A9A 3C10                    	cmp	al,MAXUMB ; 16
 35772 00002A9C 7202                    	jb	short su10
 35773 00002A9E F9                      	stc
 35774 00002A9F C3                      	retn			; Ooops-- UMB>=MAXUMB
 35775                                  su10:	
 35776                                  	; 01/01/2023
 35777                                  	;push	bx
 35778                                  	;push	di
 35779                                  	;push	si
 35780                                  	;push	ds
 35781                                  	;push	es
 35782                                  	;push	cs
 35783                                  	;pop	es
 35784                                  	;push	cs
 35785                                  	;pop	ds
 35786                                  
 35787                                  	; 01/01/2023
 35788                                  	; ds <> cs
 35789                                  	;cmp	byte [cs:UmbLoad],0FFh
 35790 00002AA0 2E803E[191F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 35791                                  				; If this, we haven't been here before
 35792 00002AA6 7504                    	jne	short su20
 35793 00002AA8 2EA2[191F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 35794                                  
 35795                                  	;;cmp	byte [UmbLoad],0FFh
 35796                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 35797                                  	;jne	short su20
 35798                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 35799                                  su20:	
 35800 00002AAC 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 35801 00002AAE 740E                    	jz	short su30	; that we should do here.
 35802                                  
 35803                                  	;mov	bl,al
 35804                                  	;xor	bh,bh
 35805                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 35806                                  	; 01/01/2023
 35807 00002AB0 30E4                    	xor	ah,ah
 35808 00002AB2 89C3                    	mov	bx,ax
 35809 00002AB4 B001                    	mov	al,1
 35810                                  
 35811                                  	;xchg	[es:bx+UmbUsed],al
 35812                                  	; 01/01/2023
 35813 00002AB6 2E8687[1A1F]            	xchg	[cs:bx+UmbUsed],al
 35814                                  
 35815                                  	;or	al,al		; If it was already 1, then al==1... and that
 35816                                  	;jz	short su30	; means an error.
 35817                                  	;
 35818                                  	;stc			; OOOPS!  This one's been used before.  :(
 35819                                  	
 35820                                  	; 01/01/2023
 35821 00002ABB 3C01                    	cmp	al,1
 35822 00002ABD F5                      	cmc 	; if al > 0 -> cf = 1
 35823                                  su30:	
 35824                                  	; 01/01/2023
 35825                                  	;pop	es
 35826                                  	;pop	ds
 35827                                  	;pop	si
 35828                                  	;pop	di
 35829                                  	;pop	bx
 35830 00002ABE C3                      	retn
 35831                                  
 35832                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35833                                  %if 0
 35834                                  ; -----------------------------------------------------------------------------
 35835                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 35836                                  ; -----------------------------------------------------------------------------
 35837                                  ; ENTRY:    CL contains UMB number, AX contains size
 35838                                  ; EXIT:     None
 35839                                  ; ERROR:    None
 35840                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 35841                                  ; -----------------------------------------------------------------------------
 35842                                  
 35843                                  ; 13/05/2019
 35844                                  
 35845                                  	; 01/01/2023 - Retro DOS v4.2
 35846                                  stowSiz:
 35847                                  	; 01/01/2023
 35848                                  	;push	bx
 35849                                  	;;push	di ; ?
 35850                                  	;push	es
 35851                                  
 35852                                  	;push	cs
 35853                                  	;pop	es	
 35854                                  
 35855                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 35856                                  	mov	bh,0			;     bx==UMB number, AX==size
 35857                                  	shl	bl,1			;     bx==offset into array, AX=size
 35858                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 35859                                  	; 01/01/2023
 35860                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 35861                                  
 35862                                  	; 01/01/2023
 35863                                  	;pop	es
 35864                                  	;;pop	di ; ?
 35865                                  	;pop	bx
 35866                                  
 35867                                  	retn
 35868                                  %endif
 35869                                  
 35870                                  ; -----------------------------------------------------------------------------
 35871                                  ;*** toDigit - converts a character-digit to its binary counterpart
 35872                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 35873                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 35874                                  ; A-F are considered valid iff gnradix is 16.
 35875                                  ; -----------------------------------------------------------------------------
 35876                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 35877                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 35878                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 35879                                  ; USES:     CL, Flags
 35880                                  ; -----------------------------------------------------------------------------
 35881                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35882                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35883                                  ; will be 10 or 16.
 35884                                  ; -----------------------------------------------------------------------------
 35885                                  
 35886                                  gnradix:
 35887 00002ABF 0000                    	dw	0		; Must be a word--16x16 multiplication
 35888                                  
 35889                                  toDigit:
 35890 00002AC1 2E833E[BF2A]10          	cmp	word [cs:gnradix],16
 35891 00002AC7 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 35892                                  
 35893                                  toDigit_hex:
 35894 00002AC9 80F961                  	cmp	cl,'a'	; 61h
 35895 00002ACC 7209                    	jb	short td10
 35896 00002ACE 80F966                  	cmp	cl,'f'	; 66h
 35897 00002AD1 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 35898 00002AD3 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 35899                                  	;clc			; <- CLC is implicit from last SUB
 35900 00002AD6 C3                      	retn
 35901                                  td10:	
 35902 00002AD7 80F941                  	cmp	cl,'A'  ; 41h
 35903 00002ADA 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 35904 00002ADC 80F946                  	cmp	cl,'F'	; 46h
 35905 00002ADF 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 35906 00002AE1 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 35907                                  	;clc			; <- CLC is implicit from last SUB
 35908 00002AE4 C3                      	retn
 35909                                  toDigit_dec:
 35910                                  td20:	
 35911 00002AE5 80F930                  	cmp	cl,'0'		; If less than zero,
 35912                                  	;jb	short tdE	; Done.
 35913 00002AE8 720A                    	jb	short tdEr ; 08/04/2019
 35914 00002AEA 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 35915 00002AED 7704                    	ja	short tdE	; Done.
 35916 00002AEF 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 35917                                  	;clc			; <- CLC is implicit from last SUB
 35918 00002AF2 C3                      	retn
 35919                                  tdE:	
 35920 00002AF3 F9                      	stc
 35921                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 35922 00002AF4 C3                      	retn
 35923                                  
 35924                                  ; -----------------------------------------------------------------------------
 35925                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 35926                                  ; -----------------------------------------------------------------------------
 35927                                  ; ENTRY:    ES:SI points to an ascii string to scan
 35928                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 35929                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 35930                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 35931                                  ; -----------------------------------------------------------------------------
 35932                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 35933                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 35934                                  ; will be 10 or 16.
 35935                                  ; -----------------------------------------------------------------------------
 35936                                  
 35937                                  ; 08/04/2019 - Retro DOS v4.0
 35938                                  
 35939                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35940                                  ; (SYSINIT:3109h)
 35941                                  
 35942                                  GetXNum:
 35943                                  	;pushreg <bx, cx, ds>
 35944                                  	; 01/01/2023
 35945                                  	;push	bx
 35946 00002AF5 51                      	push	cx ; *
 35947                                  	;push	ds
 35948                                  
 35949 00002AF6 FC                      	cld
 35950 00002AF7 31C0                    	xor	ax,ax
 35951 00002AF9 31DB                    	xor	bx,bx
 35952 00002AFB 31C9                    	xor	cx,cx
 35953 00002AFD 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 35954                                  
 35955 00002AFF 2EC706[BF2A]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 35956                                  
 35957 00002B06 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 35958                                  	;call	toDigit
 35959 00002B09 E8D9FF                  	call	toDigit_dec
 35960                                  	;jc	short gxnE		; If it's not a digit, leave now.
 35961                                  	; 01/01/2023
 35962 00002B0C 7233                    	jc	short gxnX
 35963                                  
 35964 00002B0E 08C9                    	or	cl,cl
 35965 00002B10 7517                    	jnz	short gxn20		; Doesn't have '0x'
 35966 00002B12 268A4C01                	mov	cl,[es:si+1]
 35967 00002B16 80F978                  	cmp	cl,'x'			; Either 'x'...
 35968 00002B19 7405                    	je	short gxn10
 35969 00002B1B 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 35970 00002B1E 7509                    	jne	short gxn20
 35971                                  
 35972                                  gxn10:	
 35973 00002B20 2EC706[BF2A]1000        	mov	word [cs:gnradix], 16
 35974 00002B27 46                      	inc	si			; Since we read "0x", march over it.
 35975 00002B28 46                      	inc	si
 35976                                  
 35977                                  ; ------------------------------------------------------
 35978                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 35979                                  ;        DX:AX = current total
 35980                                  ;        BX    = 0
 35981                                  ;        CH    = 0
 35982                                  ; ------------------------------------------------------
 35983                                  
 35984                                  gxn20:	
 35985 00002B29 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 35986 00002B2C 46                      	inc	si
 35987                                  
 35988 00002B2D E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 35989 00002B30 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 35990                                  
 35991 00002B32 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 35992 00002B35 720A                    	jc	short gxnX	; (if it's too big, error out)
 35993                                  
 35994 00002B37 01C8                    	add	ax,cx		; Add the digit
 35995 00002B39 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 35996                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 35997                                  	;jmp	short gxn20
 35998 00002B3B 73EC                    	jnc	short gxn20
 35999                                  gxnE:	
 36000                                  	;stc			; In this case, we need to set the carry
 36001 00002B3D EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 36002                                  gxnQ:	
 36003 00002B3F 4E                      	dec	si		; Don't read in the offensive character.
 36004 00002B40 F8                      	clc			; And clear carry, so they know it's okay.
 36005                                  gxnX:	
 36006                                  	; 01/01/2023
 36007                                  	;pop	ds
 36008 00002B41 59                      	pop	cx ; *
 36009                                  	;pop	bx
 36010 00002B42 C3                      	retn
 36011                                  
 36012                                  ; -----------------------------------------------------------------------------
 36013                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 36014                                  ; -----------------------------------------------------------------------------
 36015                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 36016                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 36017                                  ; ERROR:   Carry set if number was too large
 36018                                  ; USES:    Flags, AX, DX
 36019                                  ; -----------------------------------------------------------------------------
 36020                                  
 36021                                  mul32:
 36022 00002B43 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 36023 00002B44 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 36024 00002B46 2EF726[BF2A]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 36025 00002B4B 7211                    	jc	short m32E	; Too big?
 36026                                  
 36027 00002B4D 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 36028 00002B4F 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 36029                                  
 36030 00002B50 87DA                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 36031 00002B52 2EF726[BF2A]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 36032 00002B57 87DA                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36033 00002B59 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36034 00002B5B 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 36035 00002B5D C3                      	retn
 36036                                  m32E:	
 36037 00002B5E 58                      	pop	ax
 36038 00002B5F C3                      	retn
 36039                                  
 36040                                  ; -----------------------------------------------------------------------------
 36041                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 36042                                  ; -----------------------------------------------------------------------------
 36043                                  ; ENTRY:   DX:AX = the number to be divided
 36044                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 36045                                  ; ERROR:   None
 36046                                  ; USES:    Flags, AX, DX
 36047                                  ; -----------------------------------------------------------------------------
 36048                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 36049                                  ;       can't ensure a 386 host machine. Sorry.
 36050                                  ; -----------------------------------------------------------------------------
 36051                                  
 36052                                  	; 01/01/2023 - Retro DOS v4.2
 36053                                  toPara:
 36054 00002B60 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 36055                                  
 36056 00002B61 B104                    	mov	cl,4		;
 36057 00002B63 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 36058 00002B65 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 36059 00002B66 B10C                    	mov	cl,12
 36060 00002B68 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 36061 00002B6A 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 36062                                  
 36063 00002B6C 59                      	pop	cx
 36064 00002B6D C3                      	retn
 36065                                  
 36066                                  ; -----------------------------------------------------------------------------
 36067                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 36068                                  ; -----------------------------------------------------------------------------
 36069                                  ; ENTRY:  Nothing
 36070                                  ; EXIT:   AX contains 0x9FFF for most systems
 36071                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 36072                                  ; USES:   Flags, AX
 36073                                  ; -----------------------------------------------------------------------------
 36074                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 36075                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 36076                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 36077                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 36078                                  ; -----------------------------------------------------------------------------
 36079                                  
 36080                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36081                                  UmbHead:
 36082                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 36083                                  
 36084                                  	;push	si ; ?
 36085                                  	;push	ds ; ? 
 36086                                  	;push	es
 36087                                  	;push	bx ; *	
 36088                                  
 36089                                  	; 09/04/2019
 36090                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 36091                                  
 36092 00002B6E B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 36093 00002B70 CD21                    	int	21h
 36094                                  
 36095 00002B72 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 36096                                  	
 36097                                  	; 01/01/2023
 36098 00002B76 83F8FF                  	cmp	ax,0FFFFh
 36099 00002B79 F5                      	cmc
 36100                                  	; if AX=0FFFFh -> CF=1
 36101 00002B7A C3                      	retn
 36102                                  
 36103                                  ; 01/01/2023
 36104                                  ;%if 0
 36105                                  ;	cmp	ax,0FFFFh
 36106                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 36107                                  ;
 36108                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 36109                                  ;	;jmp	short uhX
 36110                                  ;	; 12/12/2022
 36111                                  ;	retn
 36112                                  ;uhE:	
 36113                                  ;	stc
 36114                                  ;uhX:	
 36115                                  ;	;pop	bx ; *
 36116                                  ;	;pop	es
 36117                                  ;	;pop	ds ; ?
 36118                                  ;	;pop	si ; ?
 36119                                  ;	retn
 36120                                  ;%endif
 36121                                  
 36122                                  ; -----------------------------------------------------------------------------
 36123                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 36124                                  ; -----------------------------------------------------------------------------
 36125                                  ; ENTRY:  ES:0 should point to a valid MCB
 36126                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 36127                                  ; USES:   Flags
 36128                                  ; -----------------------------------------------------------------------------
 36129                                  
 36130                                  isSysMCB:
 36131                                  	;push	ax
 36132                                  
 36133                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 36134                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 36135                                  	;je	short ism10
 36136                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 36137                                  	;;je	short ism10
 36138                                  	;;jmp	short ismX		; Anything else isn't.
 36139                                  	;jne	short ismX
 36140 00002B7B 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 36141 00002B81 7507                    	jne	short ismX 
 36142                                  ism10:	
 36143                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 36144                                  	;cmp	ax,'SC' ; 4353h
 36145 00002B83 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 36146                                  ismX:	
 36147                                  	;pop	ax
 36148 00002B8A C3                      	retn
 36149                                  
 36150                                  ; 09/04/2019 - Retro DOS v4.0
 36151                                  
 36152                                  ; -----------------------------------------------------------------------------
 36153                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 36154                                  ; -----------------------------------------------------------------------------
 36155                                  ; ENTRY:  AX contains a segment address
 36156                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 36157                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 36158                                  ; USES:   Flags, AX
 36159                                  ; -----------------------------------------------------------------------------
 36160                                  ; An address in the following areas is treated as:
 36161                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 36162                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 36163                                  ;      ...
 36164                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 36165                                  ; -----------------------------------------------------------------------------
 36166                                  
 36167                                  	; 01/01/2023 - Retro DOS v4.2
 36168                                  AddrToUmb:
 36169                                  	; 01/01/2023
 36170                                  	;push	cx
 36171                                  	;push	dx
 36172 00002B8B 06                      	push	es
 36173                                  
 36174 00002B8C 89C2                    	mov	dx,ax		; DX = address to search for
 36175                                  
 36176 00002B8E E8DDFF                  	call	UmbHead		; AX = first segment
 36177 00002B91 7222                    	jc	short atuE	; If it couldn't get it, error out.
 36178                                  
 36179                                  	; 22/07/2023
 36180                                  	;mov	es,ax ; *	; ES = first UMB segment
 36181 00002B93 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 36182                                  
 36183                                  	; 22/07/2023
 36184                                  atu10:
 36185 00002B95 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 36186                                  ; ----------------------------------------
 36187                                  ; ATU10--ES - Current MCB address
 36188                                  ;        DX - Address given for conversion
 36189                                  ;        CX - Current UMB #
 36190                                  ; ----------------------------------------
 36191                                  
 36192                                  ;atu10:	
 36193                                  	;mov	ax,es ; * ; 18/07/2023
 36194 00002B97 39D0                            cmp	ax,dx		; Present segment >= given segment?
 36195 00002B99 731D                    	jae	short atuX	; Yep--done.
 36196                                  
 36197 00002B9B E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 36198 00002B9E 7501                    	jnz	short atu20
 36199                                  
 36200 00002BA0 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 36201                                  atu20:	
 36202                                  	;mov	al,[es:ARENA.SIGNATURE]
 36203                                  	;cmp	al,arena_signature_end  ; 'Z'
 36204                                  	; 22/07/2023
 36205                                  	; ax = es
 36206                                  	;mov	ax,es ; **
 36207 00002BA1 2603060300              	add	ax,[es:ARENA.SIZE]
 36208 00002BA6 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36209 00002BAC 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 36210                                  
 36211                                  	;NextMCB es,ax
 36212                                  
 36213                                  	;mov	ax,es ; **
 36214                                  	;;add	ax,[es:3]
 36215                                  	;add	ax,[es:ARENA.SIZE]
 36216 00002BAE 40                      	inc	ax
 36217                                  	; 22/07/2023
 36218                                  	;mov	es,ax ; *
 36219 00002BAF EBE4                    	jmp	short atu10
 36220                                  
 36221                                  ; -----------------------------------------------------------------------------
 36222                                  ; if we get to atu30, they specified a number that was past the last MCB.
 36223                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 36224                                  ; -----------------------------------------------------------------------------
 36225                                  
 36226                                  atu30:	
 36227                                  	; 22/07/2023
 36228                                  	; ax = es + [es:ARENA.SIZE] 
 36229                                  	;mov	ax,es ; **
 36230                                  	;add	ax,[es:ARENA.SIZE] ; **
 36231 00002BB1 39D0                    	cmp	ax,dx		; Present >= given?
 36232 00002BB3 7303                    	jae	short atuX	; Yep! It _was_ inside.
 36233                                  atuE:	
 36234 00002BB5 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 36235 00002BB7 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 36236                                  atuX:	
 36237 00002BB8 89C8                    	mov	ax,cx		; Return the UMB number in AX
 36238                                  	
 36239 00002BBA 07                      	pop	es	
 36240                                  	; 01/01/2023
 36241                                  	;pop	dx
 36242                                  	;pop	cx
 36243 00002BBB C3                      	retn
 36244                                  
 36245                                  ; -----------------------------------------------------------------------------
 36246                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 36247                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 36248                                  ; address rather than a UMB number... and use that address to look up a UMB.
 36249                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 36250                                  ; -----------------------------------------------------------------------------
 36251                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 36252                                  ; EXIT:   AX will contain a UMB number
 36253                                  ; ERROR:  None
 36254                                  ; USES:   Flags, AX
 36255                                  ; -----------------------------------------------------------------------------
 36256                                  
 36257                                  	; 01/01/2023 - Retro DOS v4.2
 36258                                  convUMB:
 36259 00002BBC 2E833E[BF2A]10          	cmp	word [cs:gnradix],16
 36260 00002BC2 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 36261 00002BC4 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 36262                                  	;cmp	ax,0FFFFh
 36263                                  	;jne	short cu10
 36264                                  	;inc	ax		; If too high, ignore it (make it conventional)
 36265                                  	; 01/01/2023
 36266 00002BC7 40                      	inc	ax
 36267 00002BC8 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 36268 00002BCA 48                      	dec	ax
 36269                                  cu10:	
 36270 00002BCB C3                      	retn
 36271                                  
 36272                                  ; 01/01/2023 - Retro DOS v4.2
 36273                                  ;%if 0
 36274                                  ;
 36275                                  ;; -----------------------------------------------------------------------------
 36276                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 36277                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 36278                                  ;; of the usual HIGH_FIRST. See the code.
 36279                                  ;; -----------------------------------------------------------------------------
 36280                                  ;; ENTRY:  None
 36281                                  ;; EXIT:   None
 36282                                  ;; ERROR:  None
 36283                                  ;; USES:   Flags, fm_umb, fm_strat
 36284                                  ;; -----------------------------------------------------------------------------
 36285                                  ;
 36286                                  ;setUMBs:
 36287                                  ;	push	ax
 36288                                  ;	push	bx
 36289                                  ;	call	fm_link
 36290                                  ;	pop	bx
 36291                                  ;	pop	ax
 36292                                  ;	retn
 36293                                  ;
 36294                                  ;%endif
 36295                                  
 36296                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36297                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 36298                                  %if 0
 36299                                  
 36300                                  ; -----------------------------------------------------------------------------
 36301                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 36302                                  ; -----------------------------------------------------------------------------
 36303                                  ; ENTRY:  None
 36304                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 36305                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 36306                                  ; ERROR:  None
 36307                                  ; USES:   Flags, fm_strat, fm_umb
 36308                                  ; -----------------------------------------------------------------------------
 36309                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 36310                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 36311                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 36312                                  ; such that the load UMB is too small, and shouldn't be used.
 36313                                  ; -----------------------------------------------------------------------------
 36314                                  
 36315                                  loadLow:
 36316                                  	;push	ds
 36317                                  	;push	cs		; Point DS into appropriate data segment
 36318                                  	;pop	ds	
 36319                                  
 36320                                  	;mov	al,[UmbLoad]
 36321                                  	mov	al,[cs:UmbLoad]
 36322                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 36323                                  	jne	short ll10
 36324                                  
 36325                                  	stc
 36326                                  ll15:
 36327                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 36328                                  	;stc
 36329                                  	;jmp	short llX
 36330                                  	retn
 36331                                  ll10:	
 36332                                  	or	al,al		; AL=the load UMB: Is it == 0?
 36333                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 36334                                  
 36335                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 36336                                  	retn
 36337                                  
 36338                                  	;mov	al,1
 36339                                  	;clc
 36340                                  ;llX:
 36341                                  	;pop	ds		; Return DS to where it was
 36342                                  	;retn
 36343                                  
 36344                                  %endif
 36345                                  
 36346                                  ; -----------------------------------------------------------------------------
 36347                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 36348                                  ; -----------------------------------------------------------------------------
 36349                                  ; ENTRY:  None
 36350                                  ; EXIT:   None
 36351                                  ; ERROR:  None
 36352                                  ; USES:   Flags, fm_strat, fm_umb
 36353                                  ; -----------------------------------------------------------------------------
 36354                                  
 36355                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36356                                  	; (SYSINIT:322Fh)
 36357                                  HideUMBs:
 36358                                  	; 01/01/2023
 36359                                  	;push	ax
 36360                                  	;push	cx
 36361                                  	;push	ds
 36362 00002BCC 06                      	push	es
 36363                                  
 36364                                  	; 01/01/2023
 36365                                  	; ds = cs
 36366                                  
 36367 00002BCD E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 36368 00002BD0 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 36369                                  
 36370 00002BD2 E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 36371                                  	
 36372                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 36373                                  	; 01/01/2023
 36374 00002BD5 E8DCFD                  	call	fm_link
 36375                                  
 36376                                  	;putdata fInHigh,1	; Remember that we're now running high
 36377                                  	;mov	byte [cs:fInHigh],1
 36378                                  	; 01/01/2023
 36379 00002BD8 C606[151F]01            	mov	byte [fInHigh],1
 36380                                  
 36381                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 36382                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 36383                                  	; 01/01/2023
 36384 00002BDD A0[191F]                	mov	al,[UmbLoad]
 36385                                  
 36386 00002BE0 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 36387 00002BE2 7420                    	je	short husX	; then we shouldn't do this loop:
 36388                                  
 36389 00002BE4 31C9                    	xor	cx,cx
 36390                                  
 36391                                  ; -----------------------------------------------
 36392                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 36393                                  ; -----------------------------------------------
 36394                                  
 36395 00002BE6 41                      hus10:	inc	cx		; For each UMB:
 36396                                  	; 01/01/2023
 36397 00002BE7 80F910                  	cmp	cl,MAXUMB
 36398                                  	;cmp	cx,MAXUMB ; 16
 36399 00002BEA 730E                    	jae	short hus20
 36400                                  
 36401 00002BEC 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 36402 00002BEE 06                      	push	es
 36403 00002BEF E8A200                  	call	findUMB		; valid range of UMBs)
 36404 00002BF2 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 36405 00002BF3 7205                    	jc	short hus20
 36406                                  	
 36407                                  	; 02/01/2023
 36408                                  	;push	cx ; *
 36409 00002BF5 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 36410                                  	;pop	cx ; *
 36411                                  
 36412 00002BF8 EBEC                    	jmp	short hus10
 36413                                  hus20:	
 36414                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 36415                                  	; 01/01/2023
 36416                                  	; ds = cs
 36417                                  	;mov	al,[UmbLoad]
 36418                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 36419 00002BFA 800E[191F]00            	or	byte [UmbLoad],0
 36420                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 36421 00002BFF 7503                    	jnz	short husX	; If not, we're done.
 36422                                  
 36423 00002C01 E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 36424                                  husX:	
 36425 00002C04 07                      	pop	es
 36426                                  	; 01/01/2023
 36427                                  	;pop	ds
 36428                                  	;pop	cx
 36429                                  	;pop	ax
 36430 00002C05 C3                      	retn
 36431                                  
 36432                                  ; -----------------------------------------------------------------------------
 36433                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 36434                                  ; -----------------------------------------------------------------------------
 36435                                  ; ENTRY:  None
 36436                                  ; EXIT:   AL == load UMB
 36437                                  ; ERROR:  None
 36438                                  ; USES:   Flags, AX
 36439                                  ; -----------------------------------------------------------------------------
 36440                                  
 36441                                  ;GetLoadUMB:
 36442                                  ;	;getdata al, UmbLoad
 36443                                  ;	push	ds
 36444                                  ;	push	cs
 36445                                  ;	pop	ds
 36446                                  ;	mov	al,[UmLoad]
 36447                                  ;	pop	ds
 36448                                  ;	retn
 36449                                  
 36450                                  ; -----------------------------------------------------------------------------
 36451                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36452                                  ; -----------------------------------------------------------------------------
 36453                                  ; ENTRY:  None
 36454                                  ; EXIT:   AX == load UMB minimum size
 36455                                  ; ERROR:  None
 36456                                  ; USES:   Flags, AX
 36457                                  ; -----------------------------------------------------------------------------
 36458                                  
 36459                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36460                                  %if 0
 36461                                  	; 01/01/2023 - Retro DOS v4.2
 36462                                  GetLoadSize:
 36463                                  	; 09/04/2019 - Retro DOS v4.0
 36464                                  	;mov	al,[cs:UmbLoad]
 36465                                  	; 01/01/2023
 36466                                  	; ds = cs
 36467                                  	mov	al,[UmbLoad] 
 36468                                  	;jmp	short GetSize
 36469                                  
 36470                                  	;push	bx
 36471                                  	;;push	si
 36472                                  	;push	ds
 36473                                  	;push	cs
 36474                                  	;pop	ds
 36475                                  
 36476                                  	;mov	al,[UmbLoad]
 36477                                  
 36478                                  	;xor	ah,ah			;    ax==UMB
 36479                                  	;mov	bx,UmbSize		;    bx==array
 36480                                  	;shl	al,1	                ;    ax==offset
 36481                                  	;;add	ax,bx			;    ax==element index
 36482                                  	;;mov	si,ax			; ds:si==element index
 36483                                  
 36484                                  	;;lodsw				;    hh
 36485                                  
 36486                                  	;add	bx,ax
 36487                                  	;mov	ax,[bx]
 36488                                  
 36489                                  	;pop	ds
 36490                                  	;;pop	si
 36491                                  	;pop	bx
 36492                                  	;retn
 36493                                  %endif
 36494                                  
 36495                                  ; -----------------------------------------------------------------------------
 36496                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 36497                                  ; -----------------------------------------------------------------------------
 36498                                  ; ENTRY:  AL == a UMB number
 36499                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 36500                                  ; ERROR:  None
 36501                                  ; USES:   Flags, AX
 36502                                  ; -----------------------------------------------------------------------------
 36503                                  
 36504                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36505                                  GetLoadSize:
 36506                                  	; ds = cs
 36507                                  	;mov	al,[UmbLoad]
 36508                                  	; al = [UmbLoad] 
 36509                                  	; ....
 36510                                  
 36511                                  	; 01/01/2023 - Retro DOS v4.2
 36512                                  GetSize:
 36513                                  	; 09/04/2019 - Retro DOS v4.0
 36514                                  
 36515                                  	;push	bx ; 01/01/2023
 36516                                  	;push	si
 36517                                  	;push	ds
 36518                                  	;push	cs
 36519                                  	;pop	ds
 36520                                  
 36521 00002C06 30E4                    	xor	ah,ah			;    ax==UMB
 36522 00002C08 BB[2A1F]                	mov	bx,UmbSize		;    bx==array
 36523 00002C0B D0E0                    	shl	al,1	                ;    ax==offset
 36524                                  	;add	ax,bx			;    ax==element index
 36525                                  	;mov	si,ax			; ds:si==element index
 36526                                  
 36527                                  	;lodsw				;    ax==size
 36528                                  
 36529 00002C0D 01C3                    	add	bx,ax
 36530                                  	; 01/01/2023
 36531                                  	; ds = cs
 36532 00002C0F 8B07                    	mov	ax,[bx]
 36533                                  	;mov	ax,[cs:bx]
 36534                                  
 36535                                  	;pop	ds
 36536                                  	;pop	si
 36537                                  	;pop	bx ; 01/01/2023
 36538                                  sls10:	; 08/09/2023
 36539 00002C11 C3                      	retn
 36540                                  
 36541                                  ; -----------------------------------------------------------------------------
 36542                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 36543                                  ; -----------------------------------------------------------------------------
 36544                                  ; ENTRY:   AL == new load UMB
 36545                                  ; EXIT:    None
 36546                                  ; ERROR:   None
 36547                                  ; USES:    Flags, AX
 36548                                  ; -----------------------------------------------------------------------------
 36549                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 36550                                  ;          time you would ever need this, so that's okay.
 36551                                  ; -----------------------------------------------------------------------------
 36552                                  
 36553                                  ; StoLoadUMB subroutine is not used anywhere
 36554                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 36555                                  ; Erdogan Tan - 18/07/2023
 36556                                  
 36557                                  ;StoLoadUMB:
 36558                                  ;	;putdata UmbLoad, al
 36559                                  ;	push	es
 36560                                  ;	push	cs
 36561                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 36562                                  ;	mov	[es:UmbLoad],al
 36563                                  ;	pop	es
 36564                                  ;	retn
 36565                                  
 36566                                  ; -----------------------------------------------------------------------------
 36567                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36568                                  ; -----------------------------------------------------------------------------
 36569                                  ; ENTRY:  AL == new load size
 36570                                  ; EXIT:   None
 36571                                  ; ERROR:  None
 36572                                  ; USES:   Flags, AX
 36573                                  ; -----------------------------------------------------------------------------
 36574                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 36575                                  	; 01/01/2023 - Retro DOS v4.2
 36576                                  StoLoadSize:
 36577                                  	; 01/01/2023
 36578                                  	;push	dx
 36579                                  
 36580                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 36581                                  	;
 36582                                  	;push	ds
 36583                                  	;push	cs
 36584                                  	;pop	ds
 36585                                  	;mov	dl,[UmbLoad]
 36586                                  	;pop	ds	
 36587                                  
 36588                                  	; 08/09/2023
 36589                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 36590                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 36591                                  
 36592                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 36593                                  					; instead of DL (*) ; 18/07/2023
 36594                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 36595                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 36596                                  	;je	short sls10
 36597                                  			
 36598                                  		; BUG ! stowSiz uses CL instead of DL !
 36599                                  		; (CL is set in ParseL which calls stowSiz)
 36600                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 36601                                  		; Erdogan Tan - 18/07/2023
 36602                                  
 36603                                  	; 08/09/2023 (BugFix)
 36604                                  	;mov	cl,[cs:UmbLoad]
 36605                                  	; 08/09/2023 
 36606                                  	; ds = cs
 36607 00002C12 8A0E[191F]              	mov	cl,[UmbLoad]
 36608 00002C16 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 36609 00002C19 74F6                    	je	short sls10 
 36610                                  
 36611                                  	; 08/09/2023
 36612                                  ;	call	stowSiz			; We've got a function to do just this
 36613                                  ;sls10:	
 36614                                  ;	; 01/01/2023
 36615                                  ;	;pop	dx
 36616                                  ;	retn
 36617                                  	
 36618                                  	; 08/09/2023
 36619                                  	;;jmp	stowSiz
 36620                                  	;jmp	short stowSiz
 36621                                  
 36622                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36623                                  %if 1
 36624                                  ; -----------------------------------------------------------------------------
 36625                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36626                                  ; -----------------------------------------------------------------------------
 36627                                  ; ENTRY:    CL contains UMB number, AX contains size
 36628                                  ; EXIT:     None
 36629                                  ; ERROR:    None
 36630                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36631                                  ; -----------------------------------------------------------------------------
 36632                                  
 36633                                  ; 13/05/2019
 36634                                  
 36635                                  	; 01/01/2023 - Retro DOS v4.2
 36636                                  stowSiz:
 36637                                  	; 01/01/2023
 36638                                  	;push	bx
 36639                                  	;;push	di ; ?
 36640                                  	;push	es
 36641                                  
 36642                                  	;push	cs
 36643                                  	;pop	es	
 36644                                  
 36645 00002C1B 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 36646 00002C1D B700                    	mov	bh,0			;     bx==UMB number, AX==size
 36647 00002C1F D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 36648                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36649                                  	; 01/01/2023
 36650 00002C21 2E8987[2A1F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 36651                                  
 36652                                  	; 01/01/2023
 36653                                  	;pop	es
 36654                                  	;;pop	di ; ?
 36655                                  	;pop	bx
 36656                                  
 36657 00002C26 C3                      	retn
 36658                                  %endif
 36659                                  
 36660                                  ; -----------------------------------------------------------------------------
 36661                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 36662                                  ; -----------------------------------------------------------------------------
 36663                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 36664                                  ; EXIT:     None; free elements in UMB marked as hidden
 36665                                  ; ERROR:    None
 36666                                  ; USES:     Flags
 36667                                  ; -----------------------------------------------------------------------------
 36668                                  
 36669                                  	; 01/01/2023 - Retro DOS v4.2
 36670                                  hideUMB:
 36671                                  	; 02/01/2023
 36672 00002C27 52                      	push	dx ; (*)
 36673                                  	; 01/01/2023
 36674                                  	;push	ax
 36675 00002C28 06                      	push	es
 36676                                  
 36677 00002C29 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 36678 00002C2C 7224                    	jc	short huX
 36679                                  
 36680                                  ; ------------------------------------------------
 36681                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 36682                                  ;            we're not in the same UMB, so exit.
 36683                                  ; ------------------------------------------------
 36684                                  
 36685 00002C2E E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36686 00002C31 741F                    	jz	short huX	; If it is, we've finished the UMB.
 36687                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 36688 00002C33 26830E010000            	or	word [es:ARENA.OWNER],0
 36689 00002C39 7503                    	jnz	short hu20
 36690                                  
 36691 00002C3B E81700                  	call	hideMCB
 36692                                  hu20:	
 36693                                  	;mov	al,[es:ARENA.SIGNATURE]
 36694                                  	;cmp	al,arena_signature_end  ;'Z'
 36695                                  	; 19/07/2023
 36696 00002C3E 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 36697 00002C44 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 36698                                  
 36699                                  	;NextMCB es,ax		; Go on forward.
 36700 00002C46 8CC0                    	mov     ax,es
 36701                                  	;add	ax,[es:3]
 36702 00002C48 2603060300              	add     ax,[es:ARENA.SIZE]
 36703 00002C4D 40                      	inc     ax
 36704 00002C4E 8EC0                    	mov     es,ax
 36705                                  
 36706 00002C50 EBDC                    	jmp	short hu10
 36707                                  huX:	
 36708 00002C52 07                      	pop	es
 36709                                  	; 01/01/2023
 36710                                  	;pop	ax
 36711                                  	; 02/01/2023
 36712 00002C53 5A                      	pop	dx ; (*)
 36713 00002C54 C3                      	retn
 36714                                  
 36715                                  ; 02/01/2023
 36716                                  %if 0
 36717                                  
 36718                                  ; -----------------------------------------------------------------------------
 36719                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 36720                                  ; -----------------------------------------------------------------------------
 36721                                  ; ENTRY:    None
 36722                                  ; EXIT:     ZF set if user DIDN'T specify /S
 36723                                  ; ERROR:    None
 36724                                  ; USES:     Flags
 36725                                  ; -----------------------------------------------------------------------------
 36726                                  
 36727                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36728                                  isTiny:
 36729                                  	; 02/01/2023
 36730                                  	;push	ax
 36731                                  
 36732                                  	;getdata al,fUmbTiny
 36733                                  	;
 36734                                  	;push	ds
 36735                                  	;push	cs
 36736                                  	;pop	ds
 36737                                  	;mov	al,[fUmbTiny]
 36738                                  	;pop	ds
 36739                                  
 36740                                  	; 09/09/2023
 36741                                  	;mov	al,[cs:fUmbTiny]
 36742                                  	; 02/01/2023
 36743                                  	; ds = cs
 36744                                  	mov	al,[fUmbTiny]
 36745                                  
 36746                                  	or	al,al
 36747                                  	; 02/01/2023
 36748                                  	;pop	ax
 36749                                  	retn
 36750                                  
 36751                                  %endif
 36752                                  
 36753                                  ; -----------------------------------------------------------------------------
 36754                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 36755                                  ; -----------------------------------------------------------------------------
 36756                                  ; ENTRY:    ES:0 should point to an MCB
 36757                                  ; EXIT:     ZF set if MCB is free, else !ZF
 36758                                  ; ERROR:    None
 36759                                  ; USES:     Flags
 36760                                  ; -----------------------------------------------------------------------------
 36761                                  
 36762                                  ;isFreeMCB:
 36763                                  ;	or	word [es:ARENA.OWNER],0
 36764                                  ;	retn
 36765                                  
 36766                                  ; -----------------------------------------------------------------------------
 36767                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 36768                                  ; -----------------------------------------------------------------------------
 36769                                  ; ENTRY:    ES:0 should point to an MCB
 36770                                  ; EXIT:     None; MCB marked as HIDDEN
 36771                                  ; ERROR:    None
 36772                                  ; USES:     None
 36773                                  ; -----------------------------------------------------------------------------
 36774                                  
 36775                                  hideMCB:
 36776 00002C55 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 36777 00002C5C 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 36778 00002C63 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 36779 00002C6A 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 36780 00002C71 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 36781 00002C78 C3                      	retn
 36782                                  
 36783                                  ; -----------------------------------------------------------------------------
 36784                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 36785                                  ; -----------------------------------------------------------------------------
 36786                                  ; ENTRY:    ES:0 should point to an MCB
 36787                                  ; EXIT:     None; MCB marked as FREE
 36788                                  ; ERROR:    None
 36789                                  ; USES:     None
 36790                                  ; -----------------------------------------------------------------------------
 36791                                  
 36792                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36793                                  
 36794                                  unHideMCB:
 36795                                  	; 03/01/2023
 36796                                  	;push	ax
 36797 00002C79 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 36798 00002C80 B82020                  	mov	ax,'  ' ; 2020h
 36799 00002C83 26A30800                	mov	[es:ARENA.NAME+0],ax
 36800 00002C87 26A30A00                	mov	[es:ARENA.NAME+2],ax
 36801 00002C8B 26A30C00                	mov	[es:ARENA.NAME+4],ax
 36802 00002C8F 26A30E00                	mov	[es:ARENA.NAME+6],ax
 36803                                  	; 03/01/2023
 36804                                  	;pop	ax
 36805 00002C93 C3                      	retn
 36806                                  
 36807                                  ; -----------------------------------------------------------------------------
 36808                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 36809                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 36810                                  ; -----------------------------------------------------------------------------
 36811                                  ; ENTRY:    AL should be to a valid UMB number
 36812                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 36813                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 36814                                  ; USES:     Flags, ES
 36815                                  ; -----------------------------------------------------------------------------
 36816                                  
 36817                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36818                                  	; (SYSINIT:3344h)
 36819                                  findUMB:
 36820                                  	; 01/01/2023
 36821                                  	;push	ax
 36822                                  	; 02/01/2023
 36823 00002C94 51                      	push	cx ; *
 36824                                  	;push	dx
 36825                                  
 36826 00002C95 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 36827                                  
 36828 00002C97 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 36829                                  
 36830 00002C99 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 36831                                  	; 22/07/2023
 36832                                  	;mov	es,ax ; *
 36833 00002C9C 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 36834                                  
 36835                                  	; 22/07/2023
 36836                                  fu10:
 36837 00002C9E 8EC0                    	mov	es,ax ; * ; **
 36838                                  ; ---------------------------------------------
 36839                                  ; FU10--CX - This UMB number; 0 == conventional
 36840                                  ;       DX - The UMB number they're looking for
 36841                                  ;       ES - The current MCB address
 36842                                  ; ---------------------------------------------
 36843                                  
 36844                                  ;fu10:	
 36845 00002CA0 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 36846 00002CA2 7417                    	je	short fuX	; searching for--so exit.
 36847                                  
 36848 00002CA4 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36849 00002CA7 7501                    	jnz	short fu20
 36850                                  
 36851 00002CA9 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 36852                                  fu20:	
 36853                                  	;mov	al,[es:ARENA.SIGNATURE]
 36854                                  	;cmp	al,arena_signature_end ; 'Z'
 36855                                  	; 19/07/2023
 36856 00002CAA 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 36857 00002CB0 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 36858                                  
 36859                                  	;NextMCB es,ax		; Go on forward.
 36860                                  	; 22/07/2023
 36861                                  	; ax = es
 36862                                  	;mov	ax,es ; * ; 22/07/2023
 36863                                  	;add	ax,[es:3]
 36864 00002CB2 2603060300              	add	ax,[es:ARENA.SIZE]
 36865 00002CB7 40                      	inc	ax
 36866                                  	; 22/07/2023
 36867                                  	;mov	es,ax ; **
 36868 00002CB8 EBE4                    	jmp	short fu10
 36869                                  fuE:	
 36870 00002CBA F9                      	stc
 36871                                  fuX:
 36872                                  	; 01/01/2023
 36873                                  	;pop	dx
 36874                                  	; 02/01/2023
 36875 00002CBB 59                      	pop	cx ; *
 36876                                  	;pop	ax		; The address is already in ES.
 36877 00002CBC C3                      	retn
 36878                                  
 36879                                  ; -----------------------------------------------------------------------------
 36880                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 36881                                  ; -----------------------------------------------------------------------------
 36882                                  ; ENTRY:    AL should be to a valid UMB number
 36883                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 36884                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 36885                                  ; USES:     Flags, ES
 36886                                  ; -----------------------------------------------------------------------------
 36887                                  
 36888                                  	; 01/01/2023 - Retro DOS v4.2
 36889                                  BigFree:
 36890                                  	; 01/01/2023
 36891                                  	;push	bx
 36892 00002CBD 51                      	push	cx
 36893                                  
 36894 00002CBE E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 36895 00002CC1 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 36896                                  
 36897 00002CC3 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 36898 00002CC5 31C9                    	xor	cx,cx			; Size of largest free MCB
 36899                                  
 36900                                  ; ---------------------------------------------
 36901                                  ; BF10--ES - Current MCB address
 36902                                  ;       BX - Address of largest free MCB so far
 36903                                  ;       CX - Size of largest free MCB so far
 36904                                  ; ---------------------------------------------
 36905                                  
 36906                                  bf10:	
 36907 00002CC7 E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 36908 00002CCA 7428                    	jz	short bf30
 36909                                  
 36910                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 36911 00002CCC 26830E010000            	or	word [es:ARENA.OWNER],0
 36912 00002CD2 750C                    	jnz	short bf20
 36913                                  
 36914 00002CD4 26A10300                	mov	ax,[es:ARENA.SIZE]
 36915                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 36916 00002CD8 39C1                    	cmp	cx,ax
 36917                                  	;jg	short bf20		; Unless we're bigger,
 36918                                  	; 19/07/2023
 36919 00002CDA 7D04                    	jge	short bf20
 36920                                  
 36921 00002CDC 8CC3                    	mov	bx,es			; Store this new element's address,
 36922                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 36923 00002CDE 89C1                    	mov	cx,ax
 36924                                  
 36925                                  bf20:	
 36926                                  	;mov	al,[es:ARENA.SIGNATURE]
 36927                                  	;cmp	al,arena_signature_end	; 'Z'
 36928                                  	; 19/07/2023
 36929                                  	;cmp	byte [es:0],'Z'
 36930 00002CE0 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36931 00002CE6 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 36932                                  
 36933                                  	;NextMCB es,ax			; Go on forward.
 36934 00002CE8 8CC0                    	mov     ax,es
 36935                                  	;add	ax,[es:3]
 36936 00002CEA 2603060300              	add     ax,[es:ARENA.SIZE]
 36937 00002CEF 40                      	inc     ax
 36938 00002CF0 8EC0                    	mov     es,ax
 36939                                  
 36940 00002CF2 EBD3                    	jmp	short bf10
 36941                                  
 36942 00002CF4 8EC3                    bf30:	mov	es,bx			; Return the address
 36943 00002CF6 89C8                    	mov	ax,cx			; Return the size
 36944 00002CF8 09DB                    	or	bx,bx
 36945 00002CFA 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 36946                                  bfE:	
 36947 00002CFC F9                      	stc
 36948                                  bfX:
 36949 00002CFD 59                      	pop	cx
 36950                                  	; 01/01/2023
 36951                                  	;pop	bx
 36952 00002CFE C3                      	retn
 36953                                  
 36954                                  ; -----------------------------------------------------------------------------
 36955                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 36956                                  ; -----------------------------------------------------------------------------
 36957                                  ; ENTRY:    AL should be to a valid UMB number
 36958                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 36959                                  ; ERROR:    None
 36960                                  ; USES:     Flags
 36961                                  ; -----------------------------------------------------------------------------
 36962                                  
 36963                                  	; 02/01/2023 - Retro DOS v4.2
 36964                                  
 36965                                  isSpecified:
 36966                                  	; 02/01/2023
 36967                                  	;push	ax
 36968                                  
 36969 00002CFF 30FF                    	xor	bh,bh
 36970 00002D01 88C3                    	mov	bl,al
 36971                                  
 36972                                  	;getdata al,DS:UmbUsed[bx]
 36973                                  	;
 36974                                  	;push	ds
 36975                                  	;push	cs
 36976                                  	;pop	ds
 36977                                  	;mov	al,[bx+UmbUsed]
 36978                                  	;pop	ds
 36979                                  	
 36980                                  	;mov	al,[cs:bx+UmbUsed]
 36981                                  	; 02/01/2023
 36982                                  	; ds = cs
 36983 00002D03 8A87[1A1F]              	mov	al,[bx+UmbUsed]
 36984                                  
 36985 00002D07 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 36986                                  
 36987                                  	; 09/09/2023
 36988                                  	; 02/01/2023
 36989                                  	;pop	ax
 36990                                  
 36991 00002D09 C3                      	retn
 36992                                  
 36993                                  ; -----------------------------------------------------------------------------
 36994                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 36995                                  ; -----------------------------------------------------------------------------
 36996                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 36997                                  ; EXIT:     None; MCB broken if carry clear
 36998                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 36999                                  ; USES:     Flags
 37000                                  ; -----------------------------------------------------------------------------
 37001                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 37002                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 37003                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 37004                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 37005                                  ; minimum for performing a split.
 37006                                  ; -----------------------------------------------------------------------------
 37007                                  
 37008                                  MIN_SPLIT_SIZE	equ	20h
 37009                                  
 37010                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37011                                  
 37012                                  shrinkMCB:
 37013                                  	;pushreg <bx,cx,es>
 37014                                  	; 02/01/2023
 37015                                  	;push	bx
 37016 00002D0A 51                      	push	cx
 37017 00002D0B 06                      	push	es
 37018                                  
 37019 00002D0C 89C3                    	mov	bx,ax			; Move things around... and
 37020                                  	; 02/01/2023
 37021                                  	;mov	ax,es			; save this one for later.
 37022                                  
 37023 00002D0E 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 37024                                  	; 02/01/2023
 37025 00002D13 89C8                    	mov	ax,cx 
 37026                                  
 37027 00002D15 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 37028                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 37029                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37030                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37031                                  	; 18/12/2022
 37032                                  	;cmp	cx,bx
 37033                                  	; 02/01/2023
 37034 00002D18 39D8                    	cmp	ax,bx
 37035 00002D1A 7228                    	jb	short smE ; (*)
 37036                                  
 37037 00002D1C 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 37038                                  	
 37039                                  	;mov	cx,[es:ARENA.SIZE]
 37040                                  	; 02/01/2023
 37041 00002D21 8CC0                    	mov	ax,es
 37042                                  
 37043 00002D23 26891E0300              	mov	[es:ARENA.SIZE],bx
 37044 00002D28 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 37045                                  
 37046 00002D2E 01D8                    	add	ax,bx
 37047 00002D30 40                      	inc	ax
 37048 00002D31 8EC0                    	mov	es,ax			; Move to new arena area
 37049                                  
 37050 00002D33 89C8                    	mov	ax,cx
 37051 00002D35 29D8                    	sub	ax,bx
 37052                                  	; 12/12/2022
 37053                                  	; ax > 0
 37054 00002D37 48                      	dec	ax			; And prepare the new size
 37055                                  
 37056                                  	; 18/12/2022
 37057 00002D38 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 37058                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 37059 00002D3D 26A30300                	mov	[es:ARENA.SIZE],ax
 37060                                  	;mov	ax,'  ' ; 2020h
 37061                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 37062                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 37063                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 37064                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 37065                                  
 37066                                  	; 18/12/2022
 37067 00002D41 E8A801                  	call	freeMCB	; (**)
 37068                                  
 37069                                  	; 12/12/2022
 37070                                  	; cf=0
 37071                                  	;clc
 37072                                  	; 18/12/2022
 37073                                  	;jmp	short smX
 37074                                  smE:	
 37075                                  	; 18/12/2022
 37076                                  	; cf=1 (*)
 37077                                  	;stc
 37078                                  smX:	
 37079                                  	;popreg	<es,cx,bx>
 37080 00002D44 07                      	pop	es
 37081 00002D45 59                      	pop	cx
 37082                                  	; 02/01/2023
 37083                                  	;pop	bx
 37084 00002D46 C3                      	retn
 37085                                  
 37086                                  ; -----------------------------------------------------------------------------
 37087                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37088                                  ; -----------------------------------------------------------------------------
 37089                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37090                                  ; EXIT:     None; UMB is hidden as necessary
 37091                                  ; ERROR:    None
 37092                                  ; USES:     Flags, AX, CX
 37093                                  ; -----------------------------------------------------------------------------
 37094                                  ; PRIMARY LOGIC:
 37095                                  ;
 37096                                  ; If the UMB is specified in the DH/LH statement, then:
 37097                                  ;    If the largest free segment is too small (check specified size), then:
 37098                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37099                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37100                                  ;       If /S was given on the command-line, then:
 37101                                  ;          Break that element into two pieces
 37102                                  ;          Set a flag that we're shrinking
 37103                                  ;       Endif
 37104                                  ;    Endif
 37105                                  ; Endif
 37106                                  ; If the UMB is NOT specified (or was removed by the above):
 37107                                  ;    Hide all free elements in the UMB
 37108                                  ;    If the flag that we're shrinking was set, then:
 37109                                  ;       UN-hide the lower portion of the shrunken UMB
 37110                                  ;    ENDIF
 37111                                  ; ENDIF
 37112                                  ; -----------------------------------------------------------------------------
 37113                                  
 37114                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37115                                  	; (SYSINIT:3426h)
 37116                                  _hideUMB_:
 37117                                  	; 02/01/2023
 37118                                  	; ds = cs
 37119                                  
 37120                                  	; 01/01/2023
 37121                                  	;push	bx
 37122                                  	;push	dx
 37123 00002D47 06                      	push	es
 37124                                  
 37125 00002D48 88C8                    	mov	al,cl
 37126 00002D4A E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37127 00002D4D 742D                    	jz	short hu_20
 37128                                  
 37129 00002D4F 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37130 00002D51 E869FF                  	call	BigFree		; free element in AX; put its address in ES
 37131 00002D54 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 37132                                  
 37133 00002D56 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37134 00002D57 88C8                    	mov	al,cl		; Retrieve the user's specified
 37135 00002D59 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 37136 00002D5C 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37137                                  
 37138 00002D5D 09C0                    	or	ax,ax		; If they didn't specify one,
 37139 00002D5F 741B                    	jz	short hu_20	; Skip over all this.
 37140                                  
 37141 00002D61 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37142 00002D63 7607                    	jbe	short hu_10
 37143                                  
 37144 00002D65 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37145 00002D67 E81DFD                  	call	unMarkUMB
 37146 00002D6A EB10                    	jmp	short hu_20
 37147                                  hu_10:	
 37148                                  	;call	isTiny		; Returns ZF clear if user specified /S
 37149                                  	;jz	short hu_20
 37150                                  	; 02/01/2023
 37151                                  ;isTiny:
 37152                                  	;mov	al,[fUmbTiny] ; ds = cs
 37153                                  	;or	al,al
 37154 00002D6C 800E[161F]00            	or	byte [fUmbTiny],0
 37155 00002D71 7409                    	jz	short hu_20
 37156                                  
 37157 00002D73 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37158 00002D76 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 37159                                  
 37160 00002D78 8CC2                    	mov	dx,es
 37161 00002D7A EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 37162                                  
 37163 00002D7C 89C8                    hu_20:	mov	ax,cx
 37164 00002D7E E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 37165 00002D81 7510                    	jnz	short hu_X	; so leave.
 37166                                  
 37167 00002D83 31D2                    	xor	dx,dx
 37168                                  hu_30:	
 37169 00002D85 88C8                    	mov	al,cl
 37170                                  
 37171 00002D87 E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 37172                                  
 37173 00002D8A 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37174 00002D8C 7405                    	jz	short hu_X	; So we should leave.
 37175                                  
 37176 00002D8E 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37177 00002D90 E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37178                                  hu_X:	
 37179 00002D93 07                      	pop	es
 37180                                  	; 01/01/2023
 37181                                  	;pop	dx
 37182                                  	;pop	bx
 37183 00002D94 C3                      	retn
 37184                                  
 37185                                  ; -----------------------------------------------------------------------------
 37186                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 37187                                  ; -----------------------------------------------------------------------------
 37188                                  ; Entry:  None
 37189                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 37190                                  ; Error:  None
 37191                                  ; Uses:   Flags
 37192                                  ; -----------------------------------------------------------------------------
 37193                                  
 37194                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37195                                  UnFreeze:
 37196                                  	; 03/01/2023
 37197                                  	;push	ax
 37198 00002D95 06                      	push	es
 37199                                  
 37200 00002D96 E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 37201 00002D99 721C                    	jc	short ufX
 37202                                  
 37203                                  	; 22/07/2023
 37204                                  uf10:
 37205 00002D9B 8EC0                    	mov	es,ax ; *
 37206                                  
 37207                                  ; ------------------------------
 37208                                  ; UF10--ES - Current MCB address
 37209                                  ; ------------------------------
 37210                                  
 37211                                  ;uf10:	
 37212 00002D9D E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 37213 00002DA0 7505                    	jnz	short uf20
 37214 00002DA2 E8D4FE                  	call	unHideMCB
 37215                                  	; 09/09/2023
 37216                                  	; ax <> es
 37217 00002DA5 8CC0                    	mov	ax,es ; *
 37218                                  uf20:	
 37219                                  	;mov	al,[es:ARENA.SIGNATURE]
 37220                                  	;cmp	al,arena_signature_end ; 'Z'
 37221                                  	; 22/07/2023
 37222 00002DA7 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37223 00002DAD 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 37224                                  
 37225                                  	;NextMCB es,ax		; Go on forward.
 37226                                  	; 22/07/2023
 37227                                  	; ax = es
 37228                                  	;mov	ax,es ; *
 37229                                  	;add	ax,[es:3]
 37230 00002DAF 2603060300              	add	ax,[es:ARENA.SIZE]
 37231 00002DB4 40                      	inc	ax
 37232                                  	; 22/07/2023
 37233                                  	;mov	es,ax
 37234 00002DB5 EBE4                    	jmp	short uf10
 37235                                  ufX:	
 37236 00002DB7 07                      	pop	es
 37237                                  	; 03/01/2023
 37238                                  	;pop	ax
 37239 00002DB8 C3                      	retn
 37240                                  
 37241                                  ; -----------------------------------------------------------------------------
 37242                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 37243                                  ; -----------------------------------------------------------------------------
 37244                                  ; ENTRY:    ES:0 should point to an MCB
 37245                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 37246                                  ; ERROR:    None
 37247                                  ; USES:     Flags
 37248                                  ; -----------------------------------------------------------------------------
 37249                                  
 37250                                  isFrozMCB:
 37251                                  	;push	ax
 37252                                  
 37253                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37254                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37255 00002DB9 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 37256 00002DBF 7522                    	jne	short ifmX
 37257                                  
 37258                                  	;mov	ax,[es:ARENA.NAME+0]
 37259                                  	;cmp	ax,'FR' ; 5246h
 37260 00002DC1 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 37261 00002DC8 7519                    	jne	short ifmX
 37262                                  	;mov	ax,[es:ARENA.NAME+2]
 37263                                  	;cmp	ax,'OZ' ; 5A4Fh
 37264 00002DCA 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 37265 00002DD1 7510                    	jne	short ifmX
 37266                                  	;mov	ax,[es:ARENA.NAME+4]
 37267                                  	;cmp	ax,'EN' ; 4E45h
 37268 00002DD3 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37269 00002DDA 7507                    	jne	short ifmX
 37270                                  	;mov	ax,[es:ARENA.NAME+6]
 37271                                  	;cmp	ax,'  ' ; 2020h
 37272 00002DDC 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37273                                  ifmX:	
 37274                                  	;pop	ax
 37275 00002DE3 C3                      	retn
 37276                                  
 37277                                  ; -----------------------------------------------------------------------------
 37278                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 37279                                  ; -----------------------------------------------------------------------------
 37280                                  ; ENTRY:    ES:0 should point to an MCB
 37281                                  ; EXIT:     None; MCB frozen
 37282                                  ; ERROR:    None
 37283                                  ; USES:     None
 37284                                  ; -----------------------------------------------------------------------------
 37285                                  
 37286                                  frezMCB:
 37287 00002DE4 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37288 00002DEB 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 37289 00002DF2 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 37290 00002DF9 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 37291 00002E00 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 37292 00002E07 C3                      	retn
 37293                                  
 37294                                  ; -----------------------------------------------------------------------------
 37295                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 37296                                  ; -----------------------------------------------------------------------------
 37297                                  ; Entry:  None
 37298                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 37299                                  ; Error:  None
 37300                                  ; Uses:   Flags
 37301                                  ; -----------------------------------------------------------------------------
 37302                                  
 37303                                  	; 01/01/2023 - Retro DOS v4.2  
 37304                                  FreezeUM:
 37305                                  	; 01/01/2023
 37306                                  	;push	ax
 37307                                  	;push	cx
 37308                                  	;push	dx
 37309 00002E08 06                      	push	es
 37310                                  
 37311                                  	;;call	GetLoadUMB
 37312                                  	; 01/01/2023
 37313                                  	; ds = cs
 37314                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 37315 00002E09 A0[191F]                	mov	al,[UmbLoad] 	
 37316                                  
 37317 00002E0C 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37318 00002E0E 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 37319                                  
 37320 00002E10 E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 37321                                  	; 22/07/2023
 37322                                  	;mov	es,ax ; *
 37323 00002E13 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37324                                  
 37325                                  	; 22/07/2023
 37326                                  fum10:
 37327 00002E15 8EC0                    	mov	es,ax ; *
 37328                                  
 37329                                  ; -----------------------------------------
 37330                                  ; FUM10--ES - Current MCB address
 37331                                  ;        CX - Current UMB number
 37332                                  ;        DX - UMB number to skip (load UMB)
 37333                                  ; -----------------------------------------
 37334                                  
 37335                                  ;fum10:	
 37336 00002E17 E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37337 00002E1A 7501                    	jnz	short fum20
 37338                                  
 37339 00002E1C 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37340                                  fum20:	
 37341 00002E1D 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 37342 00002E1F 740B                    	je	short fum30	; freeze anything... so skip that section.
 37343                                  
 37344                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 37345 00002E21 26830E010000            	or	word [es:ARENA.OWNER],0
 37346 00002E27 7503                    	jnz	short fum30	; either.
 37347                                  
 37348 00002E29 E8B8FF                  	call	frezMCB
 37349                                  fum30:	
 37350                                  	;mov	al,[es:ARENA.SIGNATURE]
 37351                                  	;cmp	al,arena_signature_end ; 'Z'
 37352                                  	; 22/07/2023
 37353 00002E2C 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37354 00002E32 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 37355                                  
 37356                                  	;NextMCB es, ax		; Go on forward.
 37357                                  	; 22/07/2023
 37358                                  	; ax = es
 37359                                  	;mov	ax,es
 37360                                  	;add	ax,[es:3]
 37361 00002E34 2603060300              	add	ax,[es:ARENA.SIZE]
 37362 00002E39 40                      	inc	ax
 37363                                  	; 22/07/2023
 37364                                  	;mov	es,ax ; *
 37365 00002E3A EBD9                    	jmp	short fum10
 37366                                  
 37367 00002E3C 07                      fumX:	pop	es
 37368                                  	; 01/01/2023
 37369                                  	;pop	dx
 37370                                  	;pop	cx
 37371                                  	;pop	ax
 37372 00002E3D C3                      	retn
 37373                                  
 37374                                  ; -----------------------------------------------------------------------------
 37375                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 37376                                  ; -----------------------------------------------------------------------------
 37377                                  ; ENTRY:    None
 37378                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 37379                                  ; ERROR:    None
 37380                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 37381                                  ; -----------------------------------------------------------------------------
 37382                                  
 37383                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37384                                  UmbTest:
 37385                                  	; 01/01/2023
 37386                                  	;push	ax
 37387 00002E3E 53                      	push	bx ; *
 37388                                  	;push	ds
 37389 00002E3F 06                      	push	es ; **
 37390                                  
 37391                                  	; 01/01/2023
 37392                                  	; ds = cs
 37393                                  
 37394 00002E40 E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 37395 00002E43 E80800                  	call	WalkMem			; Check to see if they're really linked
 37396 00002E46 9C                      	pushf				; And remember what we found out
 37397 00002E47 E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 37398 00002E4A 9D                      	popf				; And restore what we found out.
 37399                                  
 37400 00002E4B 07                      	pop	es ; **
 37401                                  	; 01/01/2023
 37402                                  	;pop	ds
 37403 00002E4C 5B                      	pop	bx ; *
 37404                                  	;pop	ax
 37405 00002E4D C3                      	retn
 37406                                  
 37407                                  ; -----------------------------------------------------------------------------
 37408                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 37409                                  ; -----------------------------------------------------------------------------
 37410                                  ; ENTRY:    None
 37411                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 37412                                  ; ERROR:    None
 37413                                  ; USES:     Flags
 37414                                  ; -----------------------------------------------------------------------------
 37415                                  
 37416                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37417                                  	; (SYSINIT:3541h)
 37418                                  
 37419                                  WalkMem:
 37420                                  	;push	ax ; ?
 37421                                  	;push	bx ; ?
 37422                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 37423                                  	;push	es ; ? no need to save contents of these registers ?
 37424                                  		   	
 37425 00002E4E B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37426 00002E50 CD21                    	int	21h
 37427                                  
 37428 00002E52 268B47FE                	mov	ax,[es:bx-2]
 37429                                  	; 22/07/2023
 37430                                  um10:
 37431 00002E56 8EC0                    	mov	es,ax ; * ; **
 37432                                  
 37433                                  ; ------------------------------
 37434                                  ; UM10: ES = Current MCB pointer
 37435                                  ; ------------------------------
 37436                                  
 37437                                  ;um10:
 37438                                  	;mov	al,[es:ARENA.SIGNATURE]
 37439                                  	;cmp	al,arena_signature_end ; 'Z'
 37440                                  	; 22/07/2023
 37441 00002E58 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37442 00002E5E 7408                    	je	short um20		; If signature == 'Z', hay no more.
 37443                                  
 37444                                  	;NextMCB es,bx			; Move to the next MCB
 37445                                  
 37446                                  	;mov	bx,es
 37447                                  	;;add	bx,[es:3]
 37448                                  	;add	bx,[es:ARENA.SIZE]
 37449                                  	;inc	bx
 37450                                  	;mov	es,bx
 37451                                  	; 22/07/2023
 37452                                  	; ax = es
 37453                                  	;mov	ax,es ; *
 37454 00002E60 2603060300              	add	ax,[es:ARENA.SIZE]
 37455 00002E65 40                      	inc	ax
 37456                                  	;mov	es,ax ; **
 37457                                  	
 37458 00002E66 EBEE                    	jmp	short um10		; And restart the loop.
 37459                                  um20:	
 37460                                  	; 22/07/2023
 37461                                  	; ax = es
 37462                                  	;mov	ax,es
 37463                                  
 37464 00002E68 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 37465                                  
 37466                                  	;pop	es ; ?
 37467                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 37468                                  	;pop	bx ; ?
 37469                                  	;pop	ax ; ?
 37470                                  	
 37471 00002E6B C3                      	retn
 37472                                  
 37473                                  ; -----------------------------------------------------------------------------
 37474                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 37475                                  ; -----------------------------------------------------------------------------
 37476                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37477                                  ; EXIT:     None
 37478                                  ; ERROR:    None
 37479                                  ; USES:     AX, BX
 37480                                  ; -----------------------------------------------------------------------------
 37481                                  
 37482                                  	; 01/01/2023 - Retro DOS v4.2
 37483                                  hl_unlink:
 37484 00002E6C 30FF                    	xor	bh,bh
 37485                                  
 37486                                  	;getdata bl,fm_umb		; Restore original link-state
 37487                                  	;
 37488                                  	;push	ds
 37489                                  	;push	cs
 37490                                  	;pop	ds
 37491                                  	;mov	bl,[fm_umb]
 37492                                  	;pop	ds
 37493                                  
 37494                                  	; 01/01/2023
 37495                                  	; ds = cs
 37496                                  	;mov	bl,[cs:fm_umb]
 37497 00002E6E 8A1E[4A1F]              	mov	bl,[fm_umb]
 37498                                  
 37499 00002E72 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37500 00002E75 CD21                    	int	21h
 37501 00002E77 C3                      	retn
 37502                                  
 37503                                  ; ----------------------------------------------------------------------
 37504                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 37505                                  ; ----------------------------------------------------------------------
 37506                                  ; 09/04/2019 - Retro DOS v4.0
 37507                                  
 37508                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 37509                                  ;   Date:     May 14, 1992
 37510                                  
 37511                                  ;   Modification log:
 37512                                  ;
 37513                                  ;     DATE    WHO      DESCRIPTION
 37514                                  ;   --------  -------  --------------------------------------------------------
 37515                                  ;   05/14/92  t-richj  Original
 37516                                  ;   06/21/92  t-richj  Final revisions before check-in
 37517                                  
 37518                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 37519                                  
 37520                                  ; -----------------------------------------------------------------------------
 37521                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 37522                                  ; -----------------------------------------------------------------------------
 37523                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 37524                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 37525                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 37526                                  ; ERROR:  None
 37527                                  ; USES:   fInHigh (from highvar.inc), carry flag
 37528                                  ; -----------------------------------------------------------------------------
 37529                                  
 37530                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37531                                  	; (SYSINIT:357Bh)
 37532                                  
 37533                                  UnHideUMBs:
 37534 00002E78 50                      	push	ax		; Save ax for what we're about to do
 37535                                  
 37536                                  ; -----------------------------------------------------------------------------
 37537                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 37538                                  ;    length of time. Those six constitute a check of whether or not we should
 37539                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 37540                                  ;    will destroy the current link-state and memory-allocation strategy after
 37541                                  ;    every command execution.
 37542                                  ; -----------------------------------------------------------------------------
 37543                                  
 37544                                  	;getdata al,fInHigh	; Get InHigh from data segment
 37545                                  	;
 37546                                  	;push	ds
 37547                                  	;push	cs
 37548                                  	;pop	ds
 37549                                  	;mov	al,[fInHigh]
 37550                                  	;pop	ds	
 37551                                  
 37552                                  	;mov	al,[cs:fInHigh]
 37553                                  	; 31/12/2022
 37554                                  	; ds = cs
 37555 00002E79 A0[151F]                	mov	al,[fInHigh]	
 37556                                  
 37557 00002E7C 08C0                    	or	al,al
 37558 00002E7E 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 37559                                  
 37560 00002E80 58                      	pop	ax		; then there's nothing to do here... so
 37561 00002E81 F9                      	stc			; restore everything and return. Just like
 37562 00002E82 C3                      	retn			; that.
 37563                                  uhu10:	
 37564 00002E83 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 37565 00002E86 E81200                  	call	FreeUMBs
 37566                                  
 37567                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 37568                                  	;
 37569                                  	;push	es
 37570                                  	;push	cs
 37571                                  	;pop	es
 37572                                  	;mov	byte [es:fInHigh],0
 37573                                  	;pop	ds
 37574                                  
 37575                                  	; 31/12/2022
 37576                                  	; ds = cs	
 37577                                  	;mov	byte [cs:fInHigh],0
 37578 00002E89 C606[151F]00            	mov	byte [fInHigh],0
 37579                                  
 37580                                  	;call	he_unlink	; Unlink UMBs
 37581                                  	; 31/12/2022
 37582                                  ;;he_unlink:
 37583 00002E8E 30FF                    	xor	bh,bh
 37584                                  
 37585                                  	;getdata bl,fm_umb	; Restore original link-state
 37586                                  	;mov	bl,[cs:fm_umb]	
 37587 00002E90 8A1E[4A1F]              	mov	bl,[fm_umb]
 37588                                  
 37589 00002E94 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37590 00002E97 CD21                    	int	21h
 37591                                  	;;retn
 37592                                  
 37593 00002E99 58                      	pop	ax
 37594                                  	; 12/12/2022
 37595                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 37596 00002E9A C3                      	retn
 37597                                  
 37598                                  ; 31/12/2022
 37599                                  ;%if 0
 37600                                  ;
 37601                                  ;; -----------------------------------------------------------------------------
 37602                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 37603                                  ;; -----------------------------------------------------------------------------
 37604                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37605                                  ;; EXIT:     None
 37606                                  ;; ERROR:    None
 37607                                  ;; USES:     AX, BX
 37608                                  ;; -----------------------------------------------------------------------------
 37609                                  ;
 37610                                  ;he_unlink:
 37611                                  ;	xor	bh, bh
 37612                                  ;
 37613                                  ;	;getdata bl, fm_umb	; Restore original link-state
 37614                                  ;	mov	bl,[cs:fm_umb]	
 37615                                  ;
 37616                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 37617                                  ;	int	21h
 37618                                  ;	retn
 37619                                  ;
 37620                                  ;%endif
 37621                                  
 37622                                  ; -----------------------------------------------------------------------------
 37623                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 37624                                  ; -----------------------------------------------------------------------------
 37625                                  ; ENTRY:    None
 37626                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 37627                                  ; ERROR:    None (ignore CF)
 37628                                  ; USES:     Flags
 37629                                  ; -----------------------------------------------------------------------------
 37630                                  
 37631                                  FreeUMBs:
 37632 00002E9B 50                      	push	ax
 37633 00002E9C 06                      	push	es
 37634                                  
 37635 00002E9D E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 37636 00002EA0 721C                    	jc	short fusX
 37637                                  fus10:
 37638 00002EA2 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 37639                                  ;fus10:	
 37640 00002EA4 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 37641 00002EA7 7505                    	jnz	short fus20
 37642 00002EA9 E84000                  	call	freeMCB
 37643                                  	; 09/09/2023
 37644                                  	; ax <> es
 37645 00002EAC 8CC0                    	mov	ax,es
 37646                                  fus20:	   
 37647                                  	;mov	al,[es:ARENA.SIGNATURE]
 37648                                  	;cmp	al,arena_signature_end ; 'Z'
 37649                                  	; 22/07/2023
 37650 00002EAE 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37651 00002EB4 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 37652                                  	
 37653                                  	; 22/07/2023
 37654                                  	; ax = es
 37655                                  	;mov	ax,es
 37656 00002EB6 2603060300              	add	ax,[es:ARENA.SIZE]
 37657 00002EBB 40                      	inc	ax
 37658                                  	; 22/07/2023
 37659                                  	;mov	es,ax
 37660 00002EBC EBE4                    	jmp	short fus10	; Go on forward.
 37661                                  fusX:	
 37662 00002EBE 07                      	pop	es
 37663 00002EBF 58                      	pop	ax
 37664 00002EC0 C3                      	retn
 37665                                  
 37666                                  ; -----------------------------------------------------------------------------
 37667                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 37668                                  ; -----------------------------------------------------------------------------
 37669                                  ; ENTRY:    ES:0 should point to an MCB
 37670                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 37671                                  ; ERROR:    None
 37672                                  ; USES:     Flags
 37673                                  ; -----------------------------------------------------------------------------
 37674                                  
 37675                                  isHideMCB:
 37676                                  	;push	ax
 37677                                  
 37678 00002EC1 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 37679 00002EC7 7522                    	jne	short ihm_x				; then check for HIDDEN
 37680                                  
 37681                                  	;mov	ax,[es:ARENA.NAME]
 37682                                  	;cmp	ax,'HI' ; 4948h
 37683 00002EC9 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 37684 00002ED0 7519                    	jne	short ihm_x
 37685                                  	;mov	ax,[es:ARENA.NAME+2]
 37686                                  	;cmp	ax,'DD' ; 4444h
 37687 00002ED2 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 37688 00002ED9 7510                    	jne	short ihm_x
 37689                                  	;mov	ax,[es:ARENA.NAME+4]
 37690                                  	;cmp	ax,'EN' ; 4E45h
 37691 00002EDB 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37692 00002EE2 7507                    	jne	short ihm_x
 37693                                  	;mov	ax,[es:ARENA.NAME+6]
 37694                                  	;cmp	ax,'  ' ; 2020h
 37695 00002EE4 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37696                                  ihm_x:	
 37697                                  	;pop	ax
 37698 00002EEB C3                      	retn
 37699                                  
 37700                                  ; -----------------------------------------------------------------------------
 37701                                  ;*** freeMCB - marks as free the MCB at ES:0
 37702                                  ; -----------------------------------------------------------------------------
 37703                                  ; ENTRY:    ES:0 should point to an MCB
 37704                                  ; EXIT:     None; MCB free'd
 37705                                  ; ERROR:    None
 37706                                  ; USES:     AX
 37707                                  ; -----------------------------------------------------------------------------
 37708                                  
 37709                                  freeMCB:
 37710 00002EEC 26C70601000000          	mov	word [es:ARENA.OWNER],0
 37711 00002EF3 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 37712 00002EF6 26A30800                	mov	[es:ARENA.NAME+0],ax
 37713 00002EFA 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37714 00002EFE 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37715 00002F02 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37716 00002F06 C3                      	retn
 37717                                  
 37718                                  ; -----------------------------------------------------------------------------
 37719                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 37720                                  ; -----------------------------------------------------------------------------
 37721                                  ; ENTRY:  Nothing
 37722                                  ; EXIT:   AX contains 0x9FFF for most systems
 37723                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37724                                  ; USES:   Flags, AX
 37725                                  ; -----------------------------------------------------------------------------
 37726                                  
 37727                                  HeadUmb:
 37728                                  	; 13/05/2019
 37729                                  
 37730                                  	;push	si ; ?
 37731                                  	;push	ds ; ?
 37732                                  	;push	es
 37733                                  	;push	bx ; *
 37734                                  
 37735                                  	; 09/04/2019
 37736                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 37737                                  
 37738 00002F07 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37739 00002F09 CD21                    	int	21h
 37740                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37741                                  			; Return: ES:BX -> DOS list of lists
 37742                                  	;mov	ax,[es:8Ch]
 37743 00002F0B 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 37744 00002F0F 83F8FF                  	cmp	ax,0FFFFh
 37745                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 37746                                  
 37747                                  	;clc				; Else, it isn't.
 37748                                  	;jmp	short xhu_x
 37749                                  xhu_e:	
 37750                                  	;stc
 37751 00002F12 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 37752                                  xhu_x:	
 37753                                  	;pop	bx ; *
 37754                                  	;pop	es	
 37755                                  	;pop	ds ; ?
 37756                                  	;pop	si ; ?
 37757 00002F13 C3                      	retn
 37758                                  
 37759                                  ; -----------------------------------------------------------------------------
 37760                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 37761                                  ; -----------------------------------------------------------------------------
 37762                                  ; ENTRY:    None
 37763                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37764                                  ; ERROR:    None
 37765                                  ; USES:     AX, BX, fm_umb
 37766                                  ; -----------------------------------------------------------------------------
 37767                                  
 37768                                  linkumb:
 37769 00002F14 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 37770 00002F17 CD21                    	int	21h			; Current link-state is now in al
 37771                                  
 37772 00002F19 08C0                    	or	al,al			; BUGBUG: proper check?
 37773 00002F1B 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 37774                                  
 37775 00002F1D B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37776 00002F20 BB0100                  	mov	bx,1
 37777 00002F23 CD21                    	int	21h
 37778                                  lumbX:
 37779 00002F25 C3                      	retn
 37780                                  
 37781                                  ;%endif
 37782                                  
 37783                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37784                                  ; (SYSINIT:2B5Fh)
 37785                                  
 37786                                  ; ----------------------------------------------------------------------
 37787                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 37788                                  ; ----------------------------------------------------------------------
 37789                                  ; 09/04/2019 - Retro DOS v4.0
 37790                                  
 37791                                  ;----------------------------------------------------------------------------
 37792                                  ;
 37793                                  ; procedure : InitDevLoad
 37794                                  ;
 37795                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 37796                                  ;			 = 1 indicates load in UMB:
 37797                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 37798                                  ;		                    = 1 indicates a DOS 5-style load
 37799                                  ;		DevSize  = Size of the device driver file in paras
 37800                                  ;
 37801                                  ;	Output : none
 37802                                  ;
 37803                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 37804                                  ;	Also sets up a header for the Device driver entry for mem utility
 37805                                  ;
 37806                                  ;----------------------------------------------------------------------------
 37807                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 37808                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 37809                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 37810                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 37811                                  ;----------------------------------------------------------------------------
 37812                                  
 37813                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37814                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37815                                  	; (SYSINIT:364Ah)
 37816                                  InitDevLoad:
 37817                                  	; 01/01/2023
 37818                                  	;push	es ; *
 37819                                  
 37820                                  	; 11/12/2022
 37821                                  	; ds = cs
 37822 00002F26 803E[6B1F]00            	cmp	byte [DeviceHi],0
 37823                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 37824                                  	;je	short InitForLo		; no, init for lo mem
 37825 00002F2B 7439                    	je	short initforlo_x ; 09/04/2019
 37826                                  
 37827                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37828                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37829                                  ; %if 0
 37830                                  	; 01/01/2023
 37831 00002F2D 803E[5B1F]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 37832                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 37833 00002F32 7413                    	je	short InitForConv
 37834                                  
 37835                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 37836                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 37837                                  ; any areas left in upper-memory, except for elements in the load UMB...
 37838                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 37839                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 37840                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 37841                                  
 37842 00002F34 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 37843                                  
 37844 00002F37 E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 37845 00002F3A E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 37846 00002F3D E85700                  	call	GetUMBForDev		; And grab that load area as needed
 37847 00002F40 9C                      	pushf
 37848 00002F41 E851FE                  	call	UnFreeze		; Then unhide everything frozen
 37849 00002F44 9D                      	popf
 37850                                  	;jc	short InitForLo		; (if carry, it's loading low)
 37851                                  	;jmp	short InitForHi
 37852                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 37853 00002F45 EB0B                    	jmp	short idl0
 37854                                  
 37855                                  ;%endif ; 01/11/2022
 37856                                  
 37857                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37858                                  	; (SYSINIT:2B67h)
 37859                                  InitForConv:
 37860                                  	; 11/12/2022
 37861                                  	; ds = cs
 37862 00002F47 E83700                  	call	SpaceInUMB		; Do we have space left in the
 37863                                  					;  current UMB ?
 37864 00002F4A 7308                    	jnc	short InitForHi		; yes, we have
 37865 00002F4C E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 37866 00002F4F E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 37867                                  idl0: ; 06/07/2023
 37868 00002F52 720D                    	jc	short InitForLo		; we didn't succeed, so load
 37869                                  					;  in low memory
 37870                                  InitForHi:
 37871                                  	; 11/12/2022
 37872                                  	; ds = cs
 37873                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 37874                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 37875                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 37876 00002F54 A1[611F]                	mov	ax,[DevUMBFree]
 37877 00002F57 8B16[5D1F]              	mov	dx,[DevUMBAddr]
 37878 00002F5B 0316[5F1F]              	add	dx,[DevUMBSize]
 37879 00002F5F EB0C                    	jmp	short idl1
 37880                                  
 37881                                  InitForLo:
 37882                                  	; 11/12/2022
 37883                                  	; ds = cs
 37884                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 37885 00002F61 C606[6B1F]00            	mov	byte [DeviceHi],0
 37886                                  initforlo_x:
 37887                                  	; 11/12/2022
 37888                                  	; ds = cs
 37889                                  					;  into UMB indicate that
 37890                                  					;  we are loading low
 37891                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 37892                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 37893 00002F66 A1[6003]                	mov	ax,[memhi]
 37894 00002F69 8B16[A102]              	mov	dx,[ALLOCLIM]
 37895                                  idl1:
 37896 00002F6D E86600                  	call	DevSetMark		; setup a sub-arena for DD
 37897                                  	; 11/12/2022
 37898                                  	; ds = cs
 37899                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 37900                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 37901                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 37902                                  	;mov	[cs:DevEntry+2],ax
 37903 00002F70 A3[4F1F]                	mov	[DevLoadAddr],ax
 37904 00002F73 8916[511F]              	mov	[DevLoadEnd],dx
 37905 00002F77 C706[531F]0000          	mov	word [DevEntry],0
 37906 00002F7D A3[551F]                	mov	[DevEntry+2],ax
 37907                                  	; 01/01/2023
 37908                                  	;pop	es ; *
 37909 00002F80 C3                      	retn
 37910                                  
 37911                                  ;----------------------------------------------------------------------------
 37912                                  ;
 37913                                  ; procedure : SpaceInUMB?
 37914                                  ;
 37915                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 37916                                  ;	Output : Carry set if no space in UMB
 37917                                  ;		 Carry clear if Space is available for the device in
 37918                                  ;		   current UMB
 37919                                  ;
 37920                                  ;----------------------------------------------------------------------------
 37921                                  
 37922                                  SpaceInUMB:
 37923                                  	; 11/12/2022
 37924                                  	; ds = cs
 37925                                  	;mov	ax,[cs:DevUMBSize]
 37926                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 37927                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 37928 00002F81 A1[5F1F]                	mov	ax,[DevUMBSize]
 37929 00002F84 0306[5D1F]              	add	ax,[DevUMBAddr]		; End of UMB
 37930 00002F88 2B06[611F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 37931                                  	; 11/12/2022
 37932                                  	;or	ax,ax			; Nospace ?
 37933                                  	;jnz	short spcinumb1
 37934                                  	;stc
 37935                                  	;retn
 37936                                  	; 11/12/2022
 37937 00002F8C 83F801                  	cmp	ax,1
 37938 00002F8F 7205                    	jb	short spcinumb2	; cf=1
 37939                                  spcinumb1:
 37940 00002F91 48                      	dec	ax			; space for sub-arena
 37941                                  	; 11/12/2022
 37942                                  	; ds = cs
 37943 00002F92 3B06[4D1F]              	cmp	ax,[DevSize]
 37944                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 37945                                  spcinumb2:
 37946 00002F96 C3                      	retn
 37947                                  
 37948                                  ;----------------------------------------------------------------------------
 37949                                  ;
 37950                                  ; procedure : PrepareMark
 37951                                  ;
 37952                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 37953                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 37954                                  ;
 37955                                  ;----------------------------------------------------------------------------
 37956                                  
 37957                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37958                                  ;
 37959                                  ;PrepareMark:
 37960                                  ;	push	ds
 37961                                  ;	mov	ds,ax
 37962                                  ;	mov	word [ARENA.OWNER],8
 37963                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 37964                                  ;	pop	ds
 37965                                  ;
 37966                                  ;	inc	ax
 37967                                  ;	mov	[cs:DevUMBAddr],ax
 37968                                  ;	mov	[cs:DevUMBFree],ax
 37969                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 37970                                  ;	retn
 37971                                  
 37972                                  ;----------------------------------------------------------------------------
 37973                                  ;
 37974                                  ; procedure : GetUMBForDev
 37975                                  ;
 37976                                  ;	Input : DevSize
 37977                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 37978                                  ;		 the device.
 37979                                  ;		 If success carry clear
 37980                                  ;
 37981                                  ;	Allocates the biggest UMB for loading devices and updates
 37982                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 37983                                  ;	UMB.
 37984                                  ;
 37985                                  ;	This routine relies on the fact that all of the low memory
 37986                                  ;	is allocated, and any DOS alloc calls should return memory
 37987                                  ;	from the UMB pool.
 37988                                  ;
 37989                                  ;----------------------------------------------------------------------------
 37990                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37991                                  	; (SYSINIT:2BC6h)
 37992                                  
 37993                                  GetUMBForDev:
 37994                                  	; 11/12/2022
 37995                                  	; ds = cs
 37996 00002F97 BBFFFF                  	mov	bx,0FFFFh
 37997 00002F9A B80048                  	mov	ax,4800h
 37998 00002F9D CD21                    	int	21h
 37999                                  		; DOS - 2+ - ALLOCATE MEMORY
 38000                                  		; BX = number of 16-byte paragraphs desired
 38001                                  
 38002 00002F9F 09DB                    	or	bx,bx
 38003                                  	;jz	short gufd_err
 38004                                  	; 09/09/2023
 38005 00002FA1 742E                    	jz	short gufd_error ; bx = 0
 38006                                  
 38007 00002FA3 4B                      	dec	bx
 38008                                  	; 11/12/2022
 38009                                  	; ds = cs
 38010 00002FA4 391E[4D1F]              	cmp	[DevSize],bx
 38011                                  	;cmp	[cs:DevSize],bx
 38012 00002FA8 7725                    	ja	short gufd_err
 38013                                  
 38014 00002FAA 43                      	inc	bx
 38015                                  
 38016 00002FAB B80048                  	mov	ax,4800h
 38017 00002FAE CD21                    	int	21h
 38018 00002FB0 721D                    	jc	short gufd_err
 38019                                  
 38020                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38021                                  	;dec	ax
 38022                                  	;call	PrepareMark
 38023                                  	;
 38024                                  PrepareMark:
 38025 00002FB2 1E                      	push	ds
 38026 00002FB3 48                      	dec	ax
 38027 00002FB4 8ED8                    	mov	ds,ax
 38028 00002FB6 C70601000800            	mov	word [ARENA.OWNER],8
 38029 00002FBC C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 38030 00002FC2 40                      	inc	ax
 38031 00002FC3 1F                      	pop	ds
 38032                                  	; 11/12/2022
 38033                                  	; ds = cs
 38034                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 38035                                  	;mov	[cs:DevUMBAddr],ax
 38036                                  	;mov	[cs:DevUMBFree],ax
 38037                                  gufd_x:		; 09/09/2023
 38038 00002FC4 891E[5F1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 38039 00002FC8 A3[5D1F]                	mov	[DevUMBAddr],ax
 38040 00002FCB A3[611F]                	mov	[DevUMBFree],ax
 38041                                  	;
 38042                                  	; 11/12/2022
 38043                                  	; cf=0
 38044                                  	;clc				; mark no error
 38045 00002FCE C3                      	retn
 38046                                  
 38047                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38048                                  %if 1
 38049                                  gufd_err:
 38050 00002FCF 31DB                    	xor	bx,bx ; 0
 38051                                  gufd_error:
 38052 00002FD1 31C0                    	xor	ax,ax ; 0
 38053 00002FD3 F9                      	stc	; cf=1
 38054 00002FD4 EBEE                    	jmp	short gufd_x	
 38055                                  %endif
 38056                                  
 38057                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38058                                  %if 0
 38059                                  gufd_err:
 38060                                  	xor	ax,ax ; 0
 38061                                  	; 11/12/2022
 38062                                  	; ds = cs
 38063                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 38064                                  	;mov	[cs:DevUMBAddr],ax
 38065                                  	;mov	[cs:DevUMBFree],ax
 38066                                  	mov	[DevUMBSize],ax		; erase the previous values
 38067                                  	mov	[DevUMBAddr],ax
 38068                                  	mov	[DevUMBFree],ax
 38069                                  	stc
 38070                                  	retn
 38071                                  %endif
 38072                                  
 38073                                  ;----------------------------------------------------------------------------
 38074                                  ;
 38075                                  ; procedure : DevSetMark
 38076                                  ;
 38077                                  ;	Input : AX - Free segment were device is going to be loaded
 38078                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 38079                                  ;
 38080                                  ;	Creates a sub-arena for the device driver
 38081                                  ;	puts 'D' marker in the sub-arena
 38082                                  ;	Put the owner of the sub-arena as (AX+1)
 38083                                  ;	Copies the file name into sub-arena name field
 38084                                  ;
 38085                                  ;	Size field of the sub-arena will be set only at succesful
 38086                                  ;	completion of Device load.
 38087                                  ;
 38088                                  ;----------------------------------------------------------------------------
 38089                                  
 38090                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38091                                  	; (SYSINIT:2C13h)
 38092                                  
 38093                                  DevSetMark:
 38094 00002FD6 06                      	push	es
 38095                                  	; 03/01/2023
 38096                                  	;push	di
 38097 00002FD7 1E                      	push	ds
 38098 00002FD8 56                      	push	si
 38099 00002FD9 8EC0                    	mov	es,ax
 38100 00002FDB 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 38101 00002FE1 40                      	inc	ax
 38102 00002FE2 26A30100                	mov	[es:devmark.seg],ax
 38103                                  
 38104                                  ;-------------- Copy file name
 38105                                  
 38106 00002FE6 50                      	push	ax			; save load addr
 38107                                  
 38108                                  	; 09/09/2023
 38109                                  	; ds = cs
 38110                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 38111 00002FE7 C536[7803]              	lds	si,[bpb_addr]
 38112                                  
 38113 00002FEB 89F7                    	mov	di,si
 38114 00002FED FC                      	cld
 38115                                  dsm_again:
 38116 00002FEE AC                      	lodsb
 38117 00002FEF 3C3A                    	cmp	al,':'
 38118 00002FF1 7504                    	jne	short isit_slash
 38119 00002FF3 89F7                    	mov	di,si
 38120 00002FF5 EBF7                    	jmp	short dsm_again
 38121                                  isit_slash:
 38122 00002FF7 3C5C                    	cmp	al, '\'
 38123 00002FF9 7504                    	jne	short isit_null
 38124 00002FFB 89F7                    	mov	di,si
 38125 00002FFD EBEF                    	jmp	short dsm_again
 38126                                  isit_null:
 38127 00002FFF 08C0                    	or	al,al
 38128 00003001 75EB                    	jnz	short dsm_again
 38129 00003003 89FE                    	mov	si,di
 38130                                  
 38131 00003005 BF0800                  	mov	di,devmark.filename ; 8
 38132 00003008 B90800                  	mov	cx,8			; maximum 8 characters
 38133                                  dsm_next_char:
 38134 0000300B AC                      	lodsb
 38135 0000300C 08C0                    	or	al, al
 38136 0000300E 7407                    	jz	short blankout
 38137 00003010 3C2E                    	cmp	al, '.'
 38138 00003012 7403                    	je	short blankout
 38139 00003014 AA                      	stosb
 38140 00003015 E2F4                    	loop	dsm_next_char
 38141                                  blankout:
 38142 00003017 E304                    	jcxz	dsm_exit
 38143 00003019 B020                    	mov	al, ' '
 38144 0000301B F3AA                    	rep	stosb			; blank out the rest
 38145                                  dsm_exit:
 38146 0000301D 58                      	pop	ax			; restore load addr
 38147 0000301E 5E                      	pop	si
 38148 0000301F 1F                      	pop	ds
 38149                                  	; 03/01/2023
 38150                                  	;pop	di
 38151 00003020 07                      	pop	es
 38152 00003021 C3                      	retn
 38153                                  
 38154                                  ;----------------------------------------------------------------------------
 38155                                  ;
 38156                                  ; procedure : SizeDevice
 38157                                  ;
 38158                                  ;	Input : ES:SI - points to device file to be sized
 38159                                  ;
 38160                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 38161                                  ;
 38162                                  ;	Calculates the size of the device file in paras and stores it
 38163                                  ;	in DevSize
 38164                                  ;
 38165                                  ;----------------------------------------------------------------------------
 38166                                  
 38167                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38168                                  SizeDevice:
 38169                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38170                                  	; 11/12/2022 ; *
 38171 00003022 1E                      	push	ds ; *
 38172 00003023 06                      	push	es
 38173 00003024 1F                      	pop	ds
 38174 00003025 89F2                    	mov	dx,si			; ds:dx -> file name
 38175 00003027 B8003D                  	mov	ax,3D00h		; open
 38176 0000302A CD21                    	int	21h
 38177 0000302C 7237                    	jc	short sd_err		; open failed
 38178                                  
 38179 0000302E 89C3                    	mov	bx,ax			; BX - file handle
 38180 00003030 B80242                  	mov	ax,4202h		; seek
 38181 00003033 31C9                    	xor	cx,cx
 38182 00003035 89CA                    	mov	dx,cx			; to end of file
 38183 00003037 CD21                    	int	21h
 38184 00003039 7223                    	jc	short sd_close		; did seek fail (impossible)
 38185 0000303B 83C00F                  	add	ax,15			; para convert
 38186 0000303E 83D200                  	adc	dx,0
 38187 00003041 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 38188                                  	;jz	short szdev1		; no
 38189                                  	; 22/07/2023
 38190 00003045 7409                    	jz	short sd_ctp
 38191 00003047 2EC706[4D1F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 38192                                  					; assuming that we fail later
 38193 0000304E EB0E                    	jmp	short sd_close
 38194                                  sd_ctp:	
 38195                                  	; 22/07/2023
 38196                                  ;szdev1:
 38197 00003050 B104                    	mov	cl,4			; convert it to paras
 38198 00003052 D3E8                    	shr	ax,cl
 38199 00003054 B10C                    	mov	cl,12
 38200 00003056 D3E2                    	shl	dx,cl
 38201 00003058 09D0                    	or	ax,dx ; * ; cf=0
 38202                                  	;
 38203                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 38204                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 38205                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38206                                  	;cmp	ax,[cs:DevSizeOption]
 38207                                  	;ja	short szdev2
 38208                                  	;mov	ax,[cs:DevSizeOption]
 38209                                  	; 12/12/2022
 38210                                  	;clc
 38211                                  ;szdev2:
 38212 0000305A 2EA3[4D1F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 38213                                  	; 22/07/2023
 38214                                  	;clc ; cf=0 ; *	; CLC is not needed here
 38215                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 38216                                  
 38217                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38218                                  	; 12/12/2022
 38219                                  	; cf=0
 38220                                  	;clc
 38221                                  sd_close:
 38222 0000305E 9C                      	pushf				; let close not spoil our
 38223                                  					;  carry flag
 38224 0000305F B8003E                  	mov	ax,3E00h		; close
 38225 00003062 CD21                    	int	21h			; we are not checking for err
 38226 00003064 9D                      	popf
 38227                                  sd_err:
 38228                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38229                                  	; 11/12/2022 ; *
 38230 00003065 1F                      	pop     ds ; *
 38231 00003066 C3                      	retn
 38232                                  
 38233                                  ;----------------------------------------------------------------------------
 38234                                  ;
 38235                                  ; procedure : ExecDev
 38236                                  ;
 38237                                  ;	Input : ds:dx -> device to be executed
 38238                                  ;		DevLoadAddr - contains where device has to be loaded
 38239                                  ;
 38240                                  ;	Output : Carry if error
 38241                                  ;		 Carry clear if no error
 38242                                  ;
 38243                                  ;	Loads a device driver using the 4b03h function call
 38244                                  ;
 38245                                  ;----------------------------------------------------------------------------
 38246                                  
 38247                                  	; 01/11/2022
 38248                                  ExecDev:
 38249 00003067 2E8B1E[4F1F]            	mov	bx,[cs:DevLoadAddr]
 38250 0000306C 2E891E[671F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 38251                                  					;  block for exec with
 38252                                  					;  load address
 38253 00003071 2E891E[691F]            	mov	[cs:DevExecReloc],bx
 38254 00003076 8CCB                    	mov	bx,cs
 38255 00003078 8EC3                    	mov	es,bx
 38256 0000307A BB[671F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 38257                                  	;mov	al,3	; (load program only)
 38258                                  	;mov	ah,EXEC ; 4Bh
 38259                                  	; 04/07/2023
 38260 0000307D B8034B                  	mov	ax,(EXEC<<8)|03h
 38261 00003080 CD21                    	int	21h			; load in the device driver
 38262                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 38263                                  		; DS:DX -> ASCIZ filename
 38264                                  		; ES:BX -> parameter block
 38265                                  		; AL = subfunction 
 38266 00003082 C3                      	retn
 38267                                  
 38268                                  ;----------------------------------------------------------------------------
 38269                                  ;
 38270                                  ; procedure : RetFromUM
 38271                                  ;
 38272                                  ;	Input : None
 38273                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 38274                                  ;		 ConvLoad clear if did.
 38275                                  ;
 38276                                  ;	Prepares memory for more devices after returning from loading one
 38277                                  ;	using the DOS 6 options (/L:... etc).
 38278                                  ;
 38279                                  ;----------------------------------------------------------------------------
 38280                                  
 38281                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38282                                  ;  (SYSINIT:37D1h)
 38283                                  
 38284                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38285                                  ;%if 0
 38286                                  RetFromUM:
 38287                                  	; 31/12/2022
 38288                                  	; ds = cs
 38289 00003083 9C                      	pushf
 38290                                  	;mov	byte [cs:ConvLoad],1
 38291 00003084 C606[5B1F]01            	mov	byte [ConvLoad],1
 38292 00003089 E8ECFD                  	call	UnHideUMBs
 38293 0000308C 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 38294                                  	; 31/12/2022
 38295                                  	; ds = cs
 38296                                  	;;mov	byte [cs:ConvLoad],0
 38297                                  	;mov	byte [ConvLoad],0
 38298                                  	; 09/09/2023
 38299 0000308E FE0E[5B1F]              	dec	byte [ConvLoad] ; -> 0
 38300                                  rfUM1:	
 38301 00003092 9D                      	popf
 38302 00003093 C3                      	retn
 38303                                  
 38304                                  ;%endif ; 01/11/2022
 38305                                  
 38306                                  ;----------------------------------------------------------------------------
 38307                                  ;
 38308                                  ; procedure : RemoveNull
 38309                                  ;
 38310                                  ;	Input : ES:SI points to a null terminated string
 38311                                  ;
 38312                                  ;	Output : none
 38313                                  ;
 38314                                  ;	Replaces the null at the end of a string with blank
 38315                                  ;
 38316                                  ;----------------------------------------------------------------------------
 38317                                  
 38318                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38319                                  	; (SYSINIT:2CCEh)
 38320                                  RemoveNull:
 38321                                  	; 11/12/2022
 38322                                  	; ds = cs
 38323                                  rn_next:
 38324 00003094 268A1C                  	mov	bl,[es:si]
 38325 00003097 08DB                    	or	bl,bl			; null ?
 38326 00003099 7403                    	jz	short rn_gotnull
 38327 0000309B 46                      	inc	si			; advance the pointer
 38328 0000309C EBF6                    	jmp	short rn_next
 38329                                  rn_gotnull:
 38330                                  	; 11/12/2022
 38331 0000309E 8A1E[801F]              	mov	bl,[DevSavedDelim]
 38332                                  	;mov	bl,[cs:DevSavedDelim]
 38333 000030A2 26881C                  	mov	[es:si],bl		; replace null with blank
 38334                                  	; 02/11/2022
 38335                                  ; 11/12/2022
 38336                                  rba_ok:		; 10/04/2019
 38337 000030A5 C3                      	retn
 38338                                  
 38339                                  ;----------------------------------------------------------------------------
 38340                                  ;
 38341                                  ; procedure : RoundBreakAddr
 38342                                  ;
 38343                                  ;	Input : DevBrkAddr
 38344                                  ;	Output : DevBrkAddr
 38345                                  ;
 38346                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 38347                                  ;
 38348                                  ;----------------------------------------------------------------------------
 38349                                  
 38350                                  RoundBreakAddr:
 38351 000030A6 2EA1[571F]              	mov	ax,[cs:DevBrkAddr]
 38352 000030AA E8B6E0                  	call	ParaRound
 38353 000030AD 2E0106[591F]            	add	[cs:DevBrkAddr+2],ax
 38354 000030B2 2EC706[571F]0000        	mov	word [cs:DevBrkAddr],0
 38355 000030B9 2EA1[511F]              	mov	ax,[cs:DevLoadEnd]
 38356 000030BD 2E3906[591F]            	cmp	[cs:DevBrkAddr+2],ax
 38357 000030C2 76E1                    	jbe	short rba_ok
 38358 000030C4 E9C710                  	jmp	mem_err
 38359                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38360                                  	; 11/12/2022
 38361                                  ;rba_ok:
 38362                                  ;	retn
 38363                                  
 38364                                  ;----------------------------------------------------------------------------
 38365                                  ;
 38366                                  ; procedure : DevSetBreak
 38367                                  ;
 38368                                  ;	Input : DevBrkAddr
 38369                                  ;	Output : Carry set if Device returned Init failed
 38370                                  ;		 Else carry clear
 38371                                  ;
 38372                                  ;----------------------------------------------------------------------------
 38373                                  
 38374                                  DevSetBreak:
 38375 000030C7 50                      	push	ax
 38376                                  
 38377 000030C8 2EA1[591F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 38378 000030CC 2E803E[D514]00          	cmp	byte [cs:multdeviceflag],0
 38379 000030D2 750F                    	jne	short set_break_continue ;do not check it.
 38380 000030D4 2E3B06[4F1F]            	cmp	ax,[cs:DevLoadAddr]
 38381 000030D9 7508                    	jne	short set_break_continue ;if not same, then o.k.
 38382                                  
 38383                                  	;cmp	word [cs:DevBrkAddr],0
 38384                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 38385                                  	; 12/12/2022
 38386 000030DB 2E833E[571F]01          	cmp	word [cs:DevBrkAddr],1
 38387 000030E1 7204                    	jb	short break_failed
 38388                                  
 38389                                  set_break_continue:
 38390 000030E3 E8C0FF                  	call	RoundBreakAddr
 38391                                  	; 12/12/2022
 38392 000030E6 F8                      	clc
 38393                                  break_failed:
 38394 000030E7 58                      	pop	ax
 38395                                  	;clc
 38396 000030E8 C3                      	retn
 38397                                  
 38398                                  	; 12/12/2022
 38399                                  ;break_failed:
 38400                                  	;pop	ax
 38401                                  	;stc
 38402                                  	;retn
 38403                                  
 38404                                  ;----------------------------------------------------------------------------
 38405                                  ;
 38406                                  ; procedure : DevBreak
 38407                                  ;
 38408                                  ;	Input : DevLoadAddr & DevBrkAddr
 38409                                  ;	Output : none
 38410                                  ;
 38411                                  ;	Marks a succesful install of a device driver
 38412                                  ;	Sets device size field in sub-arena &
 38413                                  ;	Updates Free ptr in UMB or adjusts memhi
 38414                                  ;
 38415                                  ;----------------------------------------------------------------------------
 38416                                  
 38417                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38418                                  DevBreak:
 38419                                  	;push	ds ; 11/12/2022
 38420                                  
 38421                                  	; 11/12/2022
 38422 000030E9 0E                      	push	cs
 38423 000030EA 1F                      	pop	ds
 38424                                  	;mov	ax,[cs:DevLoadAddr]
 38425                                  	;mov	bx,[cs:DevBrkAddr+2]
 38426 000030EB A1[4F1F]                	mov	ax,[DevLoadAddr]
 38427 000030EE 8B1E[591F]              	mov	bx,[DevBrkAddr+2]
 38428                                  	; 11/12/2022
 38429 000030F2 1E                      	push	ds
 38430                                  
 38431 000030F3 48                      	dec	ax			; seg of sub-arena
 38432 000030F4 8ED8                    	mov	ds,ax
 38433 000030F6 40                      	inc	ax			; Back to Device segment
 38434 000030F7 29D8                    	sub	ax,bx
 38435 000030F9 F7D8                    	neg	ax			; size of device in paras
 38436 000030FB A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 38437                                  	
 38438                                  	; 11/12/2022
 38439 000030FE 1F                      	pop	ds
 38440                                  	; ds = cs
 38441                                   	
 38442 000030FF 803E[6B1F]00            	cmp	byte [DeviceHi],0
 38443                                  	;cmp	byte [cs:DeviceHi],0
 38444 00003104 7405                    	je	short db_lo
 38445                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 38446                                  	;jmp	short db_exit
 38447                                  	; 11/12/2022
 38448 00003106 891E[611F]              	mov	[DevUMBFree],bx
 38449 0000310A C3                      	retn	
 38450                                  db_lo:
 38451                                  	; 11/12/2022
 38452                                  	; ds = cs
 38453                                  	;mov	[cs:memhi],bx
 38454                                  	;mov	word [cs:memlo],0
 38455 0000310B 891E[6003]              	mov	[memhi],bx
 38456 0000310F C706[5E03]0000          	mov	word [memlo],0 ; 18/12/2022
 38457                                  db_exit:
 38458                                  	;pop	ds ; 11/12/2022
 38459                                  sd_ret:		; 09/09/2023
 38460 00003115 C3                      	retn
 38461                                  
 38462                                  ; 10/04/2019 - Retro DOS v4.0
 38463                                  
 38464                                  ;----------------------------------------------------------------------------
 38465                                  ;
 38466                                  ; procedure : ParseSize
 38467                                  ;
 38468                                  ;	Parses the command line for SIZE= command
 38469                                  ;
 38470                                  ;	ES:SI = command line to parsed
 38471                                  ;
 38472                                  ;	returns ptr to command line after SIZE= option in ES:SI
 38473                                  ;	updates the DevSizeOption variable with value supplied
 38474                                  ;	in SIZE=option
 38475                                  ;	Returns carry if the SIZE option was invalid
 38476                                  ;
 38477                                  ;----------------------------------------------------------------------------
 38478                                  
 38479                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38480                                  	; (SYSINIT:2D5Ah)
 38481                                  
 38482                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 38483                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 38484                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 38485                                  ParseSize:
 38486                                  	;push	bx
 38487                                  	;mov	bx,si
 38488                                  
 38489                                  	; 09/09/2023
 38490 00003116 56                      	push	si ; * ; mov bx,si
 38491                                  
 38492                                  	; 11/12/2022
 38493                                  	; ds = cs
 38494                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 38495                                  	;mov	[cs:DevCmdLine],si
 38496                                  	;mov	[cs:DevCmdLine+2],es
 38497 00003117 C706[6C1F]0000          	mov	word [DevSizeOption],0 ; init the value
 38498 0000311D 8936[7C1F]              	mov	[DevCmdLine],si
 38499 00003121 8C06[7E1F]              	mov	[DevCmdLine+2],es	
 38500 00003125 E82400                  	call	SkipDelim
 38501 00003128 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 38502 0000312D 7528                    	jne	short ps_no_size
 38503 0000312F 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 38504 00003135 7520                    	jne	short ps_no_size
 38505 00003137 268A4404                	mov	al,[es:si+4]
 38506 0000313B E8AB0F                  	call	delim
 38507                                  	;jne	short ps_no_size
 38508                                  	; 22/07/2023
 38509 0000313E 7518                    	jne	short ps_no_size_2 ; cf=0 here
 38510 00003140 83C605                  	add	si,5
 38511 00003143 E81400                  	call	GetHexNum
 38512 00003146 7210                    	jc	short ps_err
 38513                                  	; 11/12/2022
 38514                                  	; ds = cs
 38515                                  	;mov	[cs:DevSizeOption],ax
 38516 00003148 A3[6C1F]                	mov	[DevSizeOption],ax
 38517                                  	
 38518                                  	; 09/09/2023
 38519 0000314B 58                      	pop	ax  ; * (discard previous si value on top of stack)
 38520                                  
 38521                                  ;	call	SkipDelim ; **
 38522                                  ;	
 38523                                  ;	; 22/07/2023
 38524                                  ;;ps_no_size_2:
 38525                                  ;	; cf = 0
 38526                                  ;	retn
 38527                                  
 38528                                  	; 09/09/2023
 38529                                  	;jmp	short SkipDelim
 38530                                  
 38531                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38532                                  %if 1
 38533                                  	; 01/11/2022
 38534                                  SkipDelim:
 38535                                  sd_next_char:
 38536 0000314C 268A04                  	mov	al,[es:si]
 38537 0000314F E8970F                  	call	delim
 38538 00003152 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 38539 00003154 46                      	inc	si
 38540 00003155 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 38541                                  	; 11/12/2022
 38542                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38543                                  ;sd_ret:
 38544                                  	;retn
 38545                                  %endif
 38546                                  
 38547                                  	;;;call	SkipDelim ; **
 38548                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38549                                  	;mov	bx,si
 38550                                  ps_no_size:
 38551                                  	;mov	si,bx
 38552                                  	;pop	bx
 38553 00003157 F8                      	clc	; cf=0
 38554                                  	;retn
 38555                                  	; 11/12/2022
 38556                                  ps_err:		; cf=1
 38557                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 38558                                  	; 09/09/2023
 38559 00003158 5E                      	pop	si ; * ; mov si,bx
 38560                                  ;sd_ret:	; cf=?
 38561 00003159 C3                      	retn
 38562                                  
 38563                                  ;ps_err:
 38564                                  	; 02/11/2022
 38565                                  	;pop	bx
 38566                                  	;stc
 38567                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38568                                  	; 11/12/2022
 38569                                  	; cf=1
 38570                                  	;stc
 38571                                  	; 11/12/2022
 38572                                  ;sd_ret: 
 38573                                  	; 22/07/2023
 38574                                  	; 12/04/2019
 38575                                  	;retn
 38576                                  
 38577                                  ; 12/04/2019 - Retro DOS v4.0
 38578                                  
 38579                                  ;----------------------------------------------------------------------------
 38580                                  ;
 38581                                  ; procedure : SkipDelim
 38582                                  ;
 38583                                  ;	Skips delimiters in the string pointed to by ES:SI
 38584                                  ;	Returns ptr to first non-delimiter character in ES:SI
 38585                                  ;
 38586                                  ;----------------------------------------------------------------------------
 38587                                  
 38588                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38589                                  %if 0
 38590                                  	; 01/11/2022
 38591                                  SkipDelim:
 38592                                  sd_next_char:
 38593                                  	mov	al,[es:si]
 38594                                  	call	delim
 38595                                  	jnz	short sd_ret
 38596                                  	inc	si
 38597                                  	jmp	short sd_next_char ; 01/11/2022
 38598                                  	; 11/12/2022
 38599                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38600                                  ;sd_ret:
 38601                                  	;retn
 38602                                  %endif
 38603                                  
 38604                                  ;----------------------------------------------------------------------------
 38605                                  ;
 38606                                  ; procedure : GetHexNum
 38607                                  ;
 38608                                  ;	Converts an ascii string terminated by a delimiter into binary.
 38609                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 38610                                  ;
 38611                                  ;	Returns in AX the number number of paras equivalent to the
 38612                                  ;	hex number of bytes specified by the hexadecimal string.
 38613                                  ;
 38614                                  ;	Returns carry in case it encountered a non-hex character or
 38615                                  ;	if it encountered crlf
 38616                                  ;
 38617                                  ;----------------------------------------------------------------------------
 38618                                  
 38619                                  ; 13/05/2019
 38620                                  
 38621                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38622                                  	; (SYSINIT:38C5h)
 38623                                  
 38624                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38625                                  	; (SYSINIT:2DA5h)
 38626                                  GetHexNum:
 38627 0000315A 31C0                    	xor	ax,ax
 38628 0000315C 31D2                    	xor	dx,dx
 38629                                  ghn_next:
 38630 0000315E 268A1C                  	mov	bl,[es:si]
 38631 00003161 80FB0D                  	cmp	bl,cr  ; 0Dh
 38632 00003164 7436                    	je	short ghn_err
 38633 00003166 80FB0A                  	cmp	bl,lf  ; 0Ah
 38634 00003169 7431                    	je	short ghn_err
 38635 0000316B 50                      	push	ax
 38636 0000316C 88D8                    	mov	al,bl
 38637 0000316E E8780F                  	call	delim
 38638 00003171 58                      	pop	ax
 38639                                  	; 03/01/2023
 38640 00003172 B90400                  	mov	cx,4
 38641 00003175 7410                    	jz	short ghn_into_paras
 38642 00003177 E82400                  	call	GetNibble
 38643                                  	;jc	short ghn_err
 38644                                  	; 11/12/2022
 38645 0000317A 7221                    	jc	short ghn_ret ; cf=1
 38646                                  	; 03/01/2023
 38647                                  	;mov	cx,4
 38648                                  ghn_shift1:
 38649 0000317C D1E0                    	shl	ax,1
 38650 0000317E D1D2                    	rcl	dx,1
 38651 00003180 E2FA                    	loop	ghn_shift1
 38652 00003182 08D8                    	or	al,bl
 38653 00003184 46                      	inc	si
 38654 00003185 EBD7                    	jmp	short ghn_next
 38655                                  ghn_into_paras:
 38656 00003187 83C00F                  	add	ax,15
 38657 0000318A 83D200                  	adc	dx,0
 38658 0000318D F7C2F0FF                	test	dx,0FFF0h
 38659 00003191 7509                    	jnz	short ghn_err
 38660                                  	; 03/01/2023
 38661                                  	;mov	cx,4
 38662                                  ghn_shift2:
 38663 00003193 F8                      	clc
 38664 00003194 D1DA                    	rcr	dx,1
 38665 00003196 D1D8                    	rcr	ax,1
 38666 00003198 E2F9                    	loop	ghn_shift2
 38667 0000319A F8                      	clc
 38668 0000319B C3                      	retn
 38669                                  	; 11/12/2022
 38670                                  ghn_err:
 38671                                  gnib_err:
 38672 0000319C F9                      	stc
 38673                                  ghn_ret:
 38674                                  gnib_ret:
 38675 0000319D C3                      	retn
 38676                                  
 38677                                  ;----------------------------------------------------------------------------
 38678                                  ;
 38679                                  ; procedure : GetNibble
 38680                                  ;
 38681                                  ;	Convert one nibble (hex digit) in BL into binary
 38682                                  ;
 38683                                  ;	Returns binary value in BL
 38684                                  ;
 38685                                  ;	Returns carry if BL contains non-hex digit
 38686                                  ;
 38687                                  ;----------------------------------------------------------------------------
 38688                                  
 38689                                  GetNibble:
 38690 0000319E 80FB30                  	cmp	bl,'0'
 38691                                  	;jb	short gnib_err
 38692                                  	; 11/12/2022
 38693 000031A1 72FA                    	jb	short gnib_ret ; cf=1
 38694 000031A3 80FB39                  	cmp	bl,'9'
 38695 000031A6 7704                    	ja	short is_it_hex
 38696 000031A8 80EB30                  	sub	bl,'0'		; clc
 38697 000031AB C3                      	retn
 38698                                  is_it_hex:
 38699 000031AC 80FB41                  	cmp	bl,'A'
 38700                                  	;jb	short gnib_err
 38701                                  	; 11/12/2022
 38702 000031AF 72EC                    	jb	short gnib_ret ; cf=1
 38703 000031B1 80FB46                  	cmp	bl,'F'
 38704 000031B4 77E6                    	ja	short gnib_err ; 11/12/2022
 38705 000031B6 80EB37                  	sub	bl,'A'- 10	; clc
 38706 000031B9 C3                      	retn
 38707                                  
 38708                                  	; 11/12/2022
 38709                                  ;gnib_err:
 38710                                  ;	stc
 38711                                  ;gnib_ret:
 38712                                  ;	retn
 38713                                  
 38714                                  ;============================================================================
 38715                                  
 38716                                  ; 12/04/2019 - Retro DOS v4.0
 38717                                  
 38718                                  ; umb.inc (MSDOS 6.0, 1991)
 38719                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 38720                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 38721                                  
 38722                                  XMM_REQUEST_UMB	equ 10h
 38723                                  XMM_RELEASE_UMB	equ 11h
 38724                                  
 38725                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38726                                  
 38727                                  ;---------------------------------------------------------------------------
 38728                                  ;
 38729                                  ; Procedure Name	: umb_insert
 38730                                  ;
 38731                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 38732                                  ;			: BX = seg address of UMB to be linked in
 38733                                  ;			: DX = size of UMB to be linked in paras
 38734                                  ;			; DS = data
 38735                                  ;
 38736                                  ; Outputs		: links the UMB into the arena chain
 38737                                  ;
 38738                                  ; Uses			: AX, CX, ES, DX, BX
 38739                                  ;
 38740                                  ;---------------------------------------------------------------------------
 38741                                  
 38742                                  umb_insert:
 38743 000031BA 1E                      	push	ds
 38744                                  
 38745                                  	; 31/12/2022
 38746                                  	; ds = cs
 38747                                  
 38748                                  	;mov	ds,[cs:DevDOSData]
 38749 000031BB 8E1E[7A1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 38750                                  	;mov	ds,[8Ch]
 38751 000031BF 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 38752 000031C3 8CD8                    	mov	ax,ds
 38753 000031C5 8EC0                    	mov	es,ax
 38754                                  ui_next:
 38755 000031C7 39D8                    	cmp	ax,bx			; Q: is current block above
 38756                                  					;    new block
 38757 000031C9 770F                    	ja	short ui_insert		; Y: insert it
 38758                                  					; Q: is current block the
 38759                                  					;    last
 38760 000031CB 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38761 000031D1 745C                    	je	short ui_append		; Y: append new block to chain
 38762                                  					; N: get next block
 38763 000031D3 8ED8                    	mov	ds,ax			; M005
 38764                                  	;call	get_next		; ax = es = next block
 38765 000031D5 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 38766 000031D8 EBED                    	jmp	short ui_next
 38767                                  
 38768                                  ui_insert:
 38769 000031DA 8CD9                    	mov	cx,ds			; ds = previous arena
 38770 000031DC 41                      	inc	cx			; top of previous block
 38771                                  
 38772 000031DD 29D9                    	sub	cx,bx
 38773 000031DF F7D9                    	neg	cx			; cx = size of used block
 38774                                  	;mov	byte [0],'M'
 38775 000031E1 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38776                                  	;mov	word [1],8
 38777 000031E6 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 38778                                  	;mov	[3],cx
 38779 000031EC 890E0300                	mov	[ARENA.SIZE],cx	
 38780                                  	;mov	word [8],4353h ; 'SC'
 38781 000031F0 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 38782                                  
 38783                                  ; prepare the arena at start of new block
 38784                                  
 38785 000031F6 8EC3                    	mov	es,bx
 38786 000031F8 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38787 000031FE 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 38788                                  					; mark as free
 38789 00003205 83EA02                  	sub	dx,2			; make room for arena at
 38790                                  					; start & end of new block
 38791 00003208 2689160300              	mov	[es:ARENA.SIZE],dx
 38792                                  
 38793                                  ; prepare arena at end of new block
 38794                                  	
 38795 0000320D 01D3                    	add	bx,dx
 38796 0000320F 43                      	inc	bx
 38797 00003210 8EC3                    	mov	es,bx			; es=arena at top of new block
 38798 00003212 43                      	inc	bx			; bx=top of new block
 38799                                  
 38800                                  					; ax contains arena just above
 38801                                  					; this block
 38802 00003213 29D8                    	sub	ax,bx			; ax = size of used block
 38803                                  	
 38804 00003215 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38805 0000321B 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38806 00003222 26A30300                	mov	[es:ARENA.SIZE],ax	
 38807 00003226 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 38808                                  
 38809 0000322D EB47                    	jmp	short ui_done
 38810                                  
 38811                                  ui_append:
 38812                                  					; es = arena of last block	
 38813 0000322F 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 38814 00003234 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 38815                                  					; going to rsrv on top of this 
 38816                                  					; block for the next arena.
 38817                                  	; 13/05/2019
 38818 0000323A 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38819                                  
 38820 00003240 89C1                    	mov	cx,ax			; cx=top of prev block-1
 38821 00003242 40                      	inc	ax
 38822 00003243 29D8                    	sub	ax,bx			; ax=top of prev block - 
 38823                                  					;    seg. address of new block
 38824 00003245 F7D8                    	neg	ax
 38825                                  
 38826 00003247 8EC1                    	mov	es,cx			; ds = arena of unused block
 38827                                  
 38828 00003249 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 38829 0000324F 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 38830 00003256 26A30300                	mov	[es:ARENA.SIZE],ax	
 38831 0000325A 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 38832                                  
 38833                                  ; prepare the arena at start of new block
 38834 00003261 8EC3                    	mov	es,bx
 38835 00003263 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 38836 00003269 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 38837                                  					; mark as free
 38838 00003270 4A                      	dec	dx			; make room for arena
 38839 00003271 2689160300              	mov	[es:ARENA.SIZE],dx	
 38840                                  ui_done:
 38841                                  uc_done: ; 31/12/2022 ; *!
 38842 00003276 1F                      	pop	ds
 38843                                  	; ds = cs ; 31/12/2022
 38844                                  ;uc_done:	; 18/12/2022
 38845                                  au_exit:	; 09/09/2023
 38846 00003277 C3                      	retn
 38847                                  
 38848                                  ;----------------------------------------------------------------------------
 38849                                  ;
 38850                                  ; procedure : AllocUMB
 38851                                  ;
 38852                                  ;	Allocate all UMBs and link it to DOS arena chain
 38853                                  ;
 38854                                  ;----------------------------------------------------------------------------
 38855                                  
 38856                                  AllocUMB:
 38857                                  	; 31/12/2022
 38858                                  	; ds = cs
 38859 00003278 E84700                  	call	InitAllocUMB		; link in the first UMB
 38860 0000327B 72FA                    	jc	short au_exit		; quit on error
 38861                                  au_next:
 38862 0000327D E87000                  	call	umb_allocate		; allocate
 38863 00003280 7205                    	jc	short au_coalesce
 38864 00003282 E835FF                  	call	umb_insert		; & insert till no UMBs
 38865 00003285 EBF6                    	jmp	short au_next
 38866                                  au_coalesce:
 38867                                  	; 09/09/2023
 38868                                  ;	call	umb_coalesce		; coalesce all UMBs
 38869                                  ;au_exit:
 38870                                  ;	; 31/12/2022
 38871                                  ;	; ds = cs
 38872                                  ;	retn
 38873                                  
 38874                                  	; 09/09/2023
 38875                                  	;jmp	short umb_coalesce
 38876                                  
 38877                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38878                                  
 38879                                  ; 13/04/2019 - Retro DOS v4.0
 38880                                  
 38881                                  ;----------------------------------------------------------------------------
 38882                                  ;
 38883                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 38884                                  ;
 38885                                  ;	Coalesce adds the block following the argument to the argument block,
 38886                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 38887                                  ;	some callers (such as $setblock) use it to join a free block to it's
 38888                                  ;	preceeding allocated block.
 38889                                  ;
 38890                                  ;	EXIT	'C' clear if OK
 38891                                  ;		  (ds) unchanged, this block updated
 38892                                  ;		  (ax) = address of next block, IF not at end
 38893                                  ;		'C' set if arena trashed
 38894                                  ;	USES	cx, di, ds, es
 38895                                  ;
 38896                                  ;----------------------------------------------------------------------------
 38897                                  
 38898                                  umb_coalesce:
 38899                                  	; 31/12/2022
 38900                                  	; ds = cs
 38901 00003287 1E                      	push	ds ; *!
 38902                                  
 38903 00003288 31FF                    	xor	di, di
 38904                                  
 38905                                  	;mov	es,[cs:DevDOSData]
 38906                                  	; 31/12/2022
 38907 0000328A 8E06[7A1F]              	mov	es,[DevDOSData]
 38908 0000328E 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 38909                                  uc_nextfree:
 38910 00003293 8CC0                    	mov	ax,es
 38911 00003295 8ED8                    	mov	ds,ax
 38912                                  	;cmp	[es:1],di
 38913 00003297 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 38914 0000329C 7407                    	je	short uc_again		; Y: try to coalesce with next block
 38915                                  					; N: get next arena
 38916 0000329E E86B00                  	call	get_next		; es, ax = next arena
 38917 000032A1 72D3                    	jc	short uc_done	; *!
 38918 000032A3 EBEE                    	jmp	short uc_nextfree
 38919                                  uc_again:
 38920 000032A5 E86400                  	call	get_next		; es, ax = next arena
 38921 000032A8 72CC                    	jc	short uc_done	; *!
 38922                                  uc_check:
 38923 000032AA 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 38924 000032AF 75E2                    	jne	short uc_nextfree	; N: get next free arena
 38925                                  					; Y: coalesce
 38926 000032B1 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 38927 000032B6 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 38928                                  	;add	[3],cx
 38929 000032B7 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 38930 000032BB 268A0D                  	mov     cl,[es:di]              ; move up signature
 38931 000032BE 880D                    	mov     [di],cl
 38932 000032C0 EBE3                    	jmp     short uc_again		; try again
 38933                                  
 38934                                  	; 18/12/2022
 38935                                  ;uc_done:
 38936                                  	;retn
 38937                                  
 38938                                  ;----------------------------------------------------------------------------
 38939                                  ;
 38940                                  ; procedure : InitAllocUMB
 38941                                  ;
 38942                                  ;----------------------------------------------------------------------------
 38943                                  
 38944                                  InitAllocUMB:
 38945                                  	; 31/12/2022
 38946                                  	; ds = cs
 38947 000032C2 E8F9D7                  	call	IsXMSLoaded
 38948 000032C5 7527                    	jnz	short iau_err		; quit on no XMS driver
 38949 000032C7 B452                    	mov	ah,52h
 38950 000032C9 CD21                    	int	21h			; get DOS DATA seg
 38951                                  	; 31/12/2022
 38952                                  	; ds = cs
 38953                                  	;mov	[cs:DevDOSData],es	; & save it for later
 38954 000032CB 8C06[7A1F]              	mov	[DevDOSData],es		; & save it for later
 38955 000032CF B81043                  	mov	ax,4310h
 38956 000032D2 CD2F                    	int	2Fh
 38957                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 38958                                  	;mov	[cs:DevXMSAddr+2],es
 38959 000032D4 891E[631F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 38960 000032D8 8C06[651F]              	mov	[DevXMSAddr+2],es	
 38961                                  	; 31/12/2022
 38962 000032DC 803E[791F]00            	cmp	byte [FirstUMBLinked],0 
 38963                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 38964                                  	;jne	short ia_1		; quit if we already did it
 38965                                  	; 12/12/2022
 38966 000032E1 770A                    	ja	short ia_1 ; cf=0
 38967 000032E3 E83900                  	call	LinkFirstUMB		; else link the first UMB
 38968                                  	;jc	short iau_err
 38969                                  	; 12/12/2022
 38970 000032E6 7207                    	jc	short iau_err2  ; cf=1
 38971                                  	; 31/12/2022
 38972                                  	; ds = cs
 38973 000032E8 C606[791F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38974                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 38975                                  ia_1:
 38976                                  	; 12/12/2022
 38977                                  	; cf=0
 38978                                  	;clc
 38979 000032ED C3                      	retn
 38980                                  iau_err:
 38981 000032EE F9                      	stc
 38982                                  iau_err2:
 38983 000032EF C3                      	retn
 38984                                  
 38985                                  ;-------------------------------------------------------------------------
 38986                                  ;
 38987                                  ; Procedure Name	: umb_allocate
 38988                                  ;
 38989                                  ; Inputs		: DS = data
 38990                                  ;
 38991                                  ; Outputs		: if UMB available
 38992                                  ;				Allocates the largest available UMB and 
 38993                                  ;			  	BX = segment of allocated block
 38994                                  ;				DX = size of allocated block
 38995                                  ;				NC
 38996                                  ;			  else 
 38997                                  ;				CY
 38998                                  ;
 38999                                  ; Uses			: BX, DX
 39000                                  ;
 39001                                  ;-------------------------------------------------------------------------
 39002                                  
 39003                                  umb_allocate:
 39004                                  	; 31/12/2022
 39005                                  	; ds = cs
 39006 000032F0 50                      	push	ax
 39007 000032F1 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39008 000032F3 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 39009                                  					;   possible
 39010                                  	; 31/12/2022
 39011 000032F6 FF1E[631F]              	call	far [DevXMSAddr]
 39012                                  	;call	far [cs:DevXMSAddr]
 39013                                  					; dx now contains the size of
 39014                                  					; the largest UMB
 39015 000032FA 09D2                    	or	dx,dx
 39016 000032FC 740B                    	jz	short ua_err
 39017                                  	
 39018 000032FE B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39019                                  
 39020                                  	; 31/12/2022
 39021 00003300 FF1E[631F]              	call	far [DevXMSAddr]
 39022                                  	;call	far [cs:DevXMSAddr]
 39023                                  
 39024 00003304 83F801                  	cmp	ax,1			; Q: was the reqst successful
 39025                                  	;jne	short ua_err		; N: error
 39026                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39027 00003307 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 39028                                  ua_err:
 39029 00003309 F9                      	stc	
 39030                                  
 39031                                  	;clc
 39032                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39033                                  	; 12/12/2022
 39034                                  	; cf=0
 39035                                  	;clc 
 39036                                  ua_done:
 39037 0000330A 58                      	pop	ax
 39038 0000330B C3                      	retn
 39039                                  	; 27/07/2023
 39040                                  ;ua_err:
 39041                                  	;stc
 39042                                  	;jmp	short ua_done
 39043                                  
 39044                                  ;----------------------------------------------------------------------------
 39045                                  ;
 39046                                  ;**	get_next - Find Next item in Arena
 39047                                  ;
 39048                                  ;	ENTRY	dS - pointer to block head
 39049                                  ;	EXIT	AX,ES - pointers to next head
 39050                                  ;		'C' set if arena damaged
 39051                                  ;
 39052                                  ;----------------------------------------------------------------------------
 39053                                  
 39054                                  	; 01/11/2022
 39055                                  get_next:
 39056 0000330C 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 39057 00003311 740A                    	je	short gn_err
 39058                                  _get_next_:
 39059 00003313 8CD8                    	mov     ax,ds                   ; ax=current block
 39060 00003315 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 39061 00003319 40                      	inc     ax                      ; remember that header!
 39062 0000331A 8EC0                    	mov	es,ax
 39063                                  	;clc
 39064                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39065                                  	; 11/12/2022
 39066                                  	; cf=0
 39067                                  	;clc
 39068 0000331C C3                      	retn
 39069                                  gn_err:
 39070 0000331D F9                      	stc
 39071                                  	; 11/12/2022	
 39072                                  lfu_err:	 ; cf=1
 39073 0000331E C3                      	retn
 39074                                  
 39075                                  ;----------------------------------------------------------------------------
 39076                                  ;
 39077                                  ; procedure : LinkFirstUMB
 39078                                  ;
 39079                                  ;----------------------------------------------------------------------------
 39080                                  
 39081                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39082                                  	; (SYSINIT:2F81h)
 39083                                  LinkFirstUMB:
 39084                                  	; 31/12/2022
 39085                                  	; ds = cs
 39086 0000331F E8CEFF                  	call	umb_allocate
 39087 00003322 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 39088                                  
 39089                                  ; bx = segment of allocated UMB
 39090                                  ; dx = size of UMB
 39091                                  
 39092                                  	; 31/12/2022
 39093                                  	; ds = cs
 39094                                  
 39095 00003324 CD12                    	int	12h			; ax = size of memory
 39096 00003326 B106                    	mov	cl,6
 39097 00003328 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 39098                                  
 39099 0000332A 89C1                    	mov	cx,ax			; cx = size in paras
 39100 0000332C 29D8                    	sub	ax,bx			; ax = - size of unused block
 39101                                  
 39102 0000332E F7D8                    	neg	ax
 39103                                  
 39104                                  	;sub	cx,1			; cx = first umb_arena
 39105                                  	; 09/09/2023
 39106 00003330 49                      	dec	cx
 39107 00003331 8EC1                    	mov	es,cx			; es = first umb_arena
 39108                                  	
 39109 00003333 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39110 00003339 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39111                                  					
 39112 00003340 26A30300                	mov	[es:ARENA.SIZE],ax	
 39113 00003344 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39114                                  
 39115                                  ; put in the arena for the first UMB
 39116                                  
 39117 0000334B 8EC3                    	mov	es,bx			; es has first free umb seg
 39118 0000334D 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39119 00003353 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 39120                                  					; mark as free 
 39121 0000335A 4A                      	dec	dx			; make room for arena
 39122 0000335B 2689160300              	mov	[es:ARENA.SIZE],dx	
 39123                                  
 39124                                  	;mov	es,[cs:DevDOSData]
 39125                                  	; 31/12/2022
 39126 00003360 8E06[7A1F]              	mov	es,[DevDOSData] ; ds = cs
 39127 00003364 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 39128 00003367 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 39129                                  					;  data segment with the arena
 39130                                  					;  just below Top of Mem
 39131                                  
 39132                                  ; we must now scan the arena chain and update the size of the last arena
 39133                                  
 39134 0000336A BF2400                  	mov	di,DOS_ARENA ; 24h
 39135 0000336D 268E05                  	mov	es,[es:di]		; es = start arena
 39136 00003370 31FF                    	xor	di,di
 39137                                  ;scan_next
 39138                                  ; 09/12/2022
 39139                                  scannext:
 39140 00003372 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 39141 00003376 740C                    	je	short got_last
 39142                                  	
 39143 00003378 8CC0                    	mov	ax,es
 39144 0000337A 2603060300              	add	ax,[es:ARENA.SIZE]
 39145 0000337F 40                      	inc	ax
 39146 00003380 8EC0                    	mov	es,ax
 39147                                  	;jmp	short scan_next
 39148                                  	; 09/12/2022
 39149 00003382 EBEE                    	jmp	short scannext
 39150                                  got_last:
 39151                                  	;sub	word [es:ARENA.SIZE],1
 39152                                  	; 09/09/2023
 39153 00003384 26FF0E0300              	dec	word [es:ARENA.SIZE]
 39154                                  
 39155 00003389 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39156                                  	;clc
 39157                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39158                                  	; 11/12/2022
 39159                                  	; cf=0
 39160                                  	;clc
 39161 0000338F C3                      	retn
 39162                                  
 39163                                  ; 11/12/2022
 39164                                  ;;lfu_err:
 39165                                  ;	;stc
 39166                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39167                                  ;	; 11/12/2022
 39168                                  ;	; cf=1
 39169                                  ;	;stc
 39170                                  ;	retn
 39171                                  
 39172                                  ;----------------------------------------------------------------------------
 39173                                  ;
 39174                                  ; procedure : ShrinkUMB
 39175                                  ;
 39176                                  ;	Shrinks the current UMB in use, so that the unused portions
 39177                                  ;	of the UMB is given back to the DOS free mem pool
 39178                                  ;
 39179                                  ;----------------------------------------------------------------------------
 39180                                  
 39181                                  ShrinkUMB:
 39182                                  	; 12/12/2022
 39183                                  	; ds = cs
 39184 00003390 833E[5D1F]00            	cmp	word [DevUMBAddr],0
 39185                                  	;cmp	word [cs:DevUMBAddr],0
 39186 00003395 741F                    	je	short su_exit
 39187 00003397 06                      	push	es
 39188                                  	; 01/01/2023
 39189                                  	;push	bx
 39190                                  	; 12/12/2022
 39191                                  	;mov	bx,[cs:DevUMBFree]
 39192                                  	;sub	bx,[cs:DevUMBAddr]
 39193                                  	;mov	es,[cs:DevUMBAddr]
 39194 00003398 8B1E[611F]              	mov	bx,[DevUMBFree]
 39195 0000339C 2B1E[5D1F]              	sub	bx,[DevUMBAddr]
 39196 000033A0 8E06[5D1F]              	mov	es,[DevUMBAddr]
 39197                                  	
 39198 000033A4 B8004A                  	mov	ax,4A00h
 39199 000033A7 CD21                    	int	21h
 39200                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 39201                                  		; ES = segment address of block to change
 39202                                  		; BX = new size in paragraphs
 39203 000033A9 8CC0                    	mov	ax,es
 39204 000033AB 48                      	dec	ax
 39205 000033AC 8EC0                    	mov	es,ax
 39206 000033AE 26C70601000800          	mov	word [es:ARENA.OWNER],8
 39207                                  	; 01/01/2023
 39208                                  	;pop	bx
 39209 000033B5 07                      	pop	es
 39210                                  su_exit:
 39211 000033B6 C3                      	retn
 39212                                  
 39213                                  ;----------------------------------------------------------------------------
 39214                                  ;
 39215                                  ; procedure : UnlinkUMB
 39216                                  ;
 39217                                  ;	Unlinks the UMBs from the DOS arena chain
 39218                                  ;
 39219                                  ;----------------------------------------------------------------------------
 39220                                  
 39221                                  UnlinkUMB:
 39222                                  	; 12/12/2022
 39223                                  	; ds = cs
 39224 000033B7 1E                      	push	ds
 39225 000033B8 06                      	push	es
 39226                                  	; 12/12/2022
 39227 000033B9 803E[791F]00            	cmp	byte [FirstUMBLinked],0
 39228                                  	;cmp	byte [cs:FirstUMBLinked],0
 39229 000033BE 7420                    	je	short ulu_x		; nothing to unlink
 39230                                  	; 12/12/2022
 39231 000033C0 8E06[7A1F]              	mov	es,[DevDOSData]
 39232                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 39233 000033C4 268E1E2400              	mov	ds,[es:DOS_ARENA]
 39234 000033C9 268B3E8C00              	mov	di,[es:UMB_ARENA]
 39235                                  ulu_next:
 39236 000033CE E83BFF                  	call	get_next
 39237 000033D1 720D                    	jc	short ulu_x
 39238 000033D3 39C7                    	cmp	di,ax			; is the next one UMB ?
 39239 000033D5 7404                    	je	short ulu_found
 39240 000033D7 8ED8                    	mov	ds,ax
 39241 000033D9 EBF3                    	jmp	short ulu_next
 39242                                  ulu_found:
 39243                                  	;mov	byte [0],'Z'
 39244 000033DB C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39245                                  ulu_x:
 39246 000033E0 07                      	pop	es
 39247 000033E1 1F                      	pop	ds
 39248 000033E2 C3                      	retn
 39249                                  
 39250                                  ; ----------------------------------------------------------------------
 39251                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 39252                                  ; ----------------------------------------------------------------------
 39253                                  ; 14/04/2019 - Retro DOS v4.0
 39254                                  
 39255                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 39256                                  ;
 39257                                  ; Summary:
 39258                                  ;
 39259                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 39260                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 39261                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 39262                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 39263                                  ;   and/or config.inc for the full list.
 39264                                  ;
 39265                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 39266                                  ;   configuration support. blockname is either MENU, which contains one
 39267                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 39268                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 39269                                  ;   INCLUDE allows the current block to name another block for inclusion
 39270                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 39271                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 39272                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 39273                                  ;
 39274                                  ; Example:
 39275                                  ;
 39276                                  ;   [menu]
 39277                                  ;   menuitem=misc,Miscellaneous
 39278                                  ;   menuitem=network,Network Configuration
 39279                                  ;   menudefault=network,15
 39280                                  ;
 39281                                  ;   [network]
 39282                                  ;   include misc
 39283                                  ;   device=foo
 39284                                  ;
 39285                                  ;   [misc]
 39286                                  ;   device=bar
 39287                                  ;   include alternate
 39288                                  ;
 39289                                  ;   [alternate]
 39290                                  ;   device=tar
 39291                                  ;
 39292                                  ;
 39293                                  ;   When the menu is displayed
 39294                                  ;
 39295                                  ;    1. Miscellaneous
 39296                                  ;    2. Network Configuration
 39297                                  ;
 39298                                  ;   #2 is highlighted as the default option, and will be automatically
 39299                                  ;   selected after 15 seconds. It will invoke the following lines in the
 39300                                  ;   following order:
 39301                                  ;
 39302                                  ;       DEVICE=BAR
 39303                                  ;       DEVICE=TAR
 39304                                  ;       DEVICE=FOO
 39305                                  ;
 39306                                  
 39307                                  ;MULTI_CONFIG equ 1
 39308                                  
 39309                                  ; the following depend on the positions of the various letters in switchlist
 39310                                  
 39311                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 39312                                  
 39313                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 39314                                  flagdrive	equ 00001000b ; 8 
 39315                                  flagcyln	equ 00010000b ; 16
 39316                                  flagseclim	equ 00100000b ; 32
 39317                                  flagheads	equ 01000000b ; 64
 39318                                  flagff		equ 10000000b ; 128
 39319                                  
 39320                                  ;----------------------------------------------------------------------------
 39321                                  ; 19/04/2019 - Retro DOS v4.0
 39322                                  
 39323                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 39324                                  
 39325                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39326                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 39327                                  
 39328 000033E3 00                      insert_blank:	db 	0
 39329                                  
 39330                                  ;----------------------------------------------------------------------------
 39331                                  ;
 39332                                  ; procedure : setparms
 39333                                  ;
 39334                                  ; the following set of routines is used to parse the drivparm = command in
 39335                                  ; the config.sys file to change the default drive parameters.
 39336                                  ;
 39337                                  ;----------------------------------------------------------------------------
 39338                                  
 39339                                  setparms:
 39340 000033E4 1E                      	push	ds
 39341 000033E5 50                      	push	ax
 39342 000033E6 53                      	push	bx
 39343 000033E7 51                      	push	cx
 39344 000033E8 52                      	push	dx
 39345                                  
 39346 000033E9 0E                      	push	cs
 39347 000033EA 1F                      	pop	ds
 39348                                  
 39349 000033EB 31DB                    	xor	bx,bx
 39350 000033ED 8A1E[6248]              	mov	bl,[drive]
 39351                                  	; 18/12/2022
 39352 000033F1 43                      	inc	bx
 39353                                  	;inc	bl			; get it correct for ioctl call
 39354                                  					; (1=a,2=b...)
 39355 000033F2 BA[0447]                	mov	dx,deviceparameters
 39356                                  	;mov	ah,IOCTL ; 44h
 39357                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 39358                                  	; 04/07/2023
 39359 000033F5 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 39360                                  	;mov	ch,RAWIO ; 8
 39361                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 39362                                  	; 04/07/2023
 39363 000033F8 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 39364 000033FB CD21                    	int	21h
 39365                                  
 39366                                  ; 18/03/2025 - MiniDOS v1.0
 39367                                  %if 0
 39368                                  
 39369                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39370                                  	mov	ah,[switches]
 39371                                  	;mov	al,[deviceparameters+20]
 39372                                  	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39373                                  	mov	cl,[drive]
 39374                                  ;
 39375                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39376                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 39377                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 39378                                  ;	; 21/10/2022
 39379                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 39380                                  ;	;mov	ds,ax			; set Bios_Data segment
 39381                                  ;
 39382                                  ;	; 27/07/2023
 39383                                  ;	;;test	word [cs:switches],flagec35 ; 4
 39384                                  ;	;test	byte [cs:switches],flagec35
 39385                                  ;	;jz	short not_ec35
 39386                                  ;
 39387                                  ;	; 27/07/2023
 39388                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39389                                  ;	;;test	word [switches],flagec35 ; 4
 39390                                  ;	; 12/12/2022
 39391                                  ;	;test	byte [switches],flagec35 ; 4
 39392                                  ;	;jz	short eot_ok
 39393                                  ;	
 39394                                  	;mov	cl,[cs:drive]		; which drive was this for?
 39395                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39396                                  	;mov	cl,[drive]
 39397                                  	; 27/07/2023
 39398                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 39399                                  	;mov	ds,ax
 39400                                  
 39401                                  	mov	dx,DOSBIODATASEG
 39402                                  	mov	ds,dx
 39403                                  
 39404                                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 39405                                  	jz	short not_ec35
 39406                                  
 39407                                  	;mov	al,1			; assume drive 0
 39408                                  	;shl	al,cl			; set proper bit depending on drive
 39409                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 39410                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 39411                                  	; 27/07/2023
 39412                                  	mov	ah,1
 39413                                  	shl	ah,cl
 39414                                  	or	[ec35_flag],ah
 39415                                  
 39416                                  ; 18/03/2025
 39417                                  %endif
 39418                                  
 39419                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39420                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 39421                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39422                                  not_ec35:
 39423                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 39424                                  ;	sectors per track than any old ones.
 39425                                  
 39426                                  	; 27/07/2023
 39427                                  	;;mov	al,[cs:deviceparameters+20]
 39428                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 39429                                  	
 39430                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 39431 000033FD 3A06[2C01]              	cmp	al,[eot]
 39432 00003401 7603                    	jbe	short eot_ok
 39433 00003403 A2[2C01]                	mov	[eot],al
 39434                                  eot_ok:
 39435 00003406 5A                      	pop	dx			; fix up all the registers
 39436 00003407 59                      	pop	cx
 39437 00003408 5B                      	pop	bx
 39438 00003409 58                      	pop	ax
 39439 0000340A 1F                      	pop	ds ; 13/05/2019
 39440 0000340B C3                      	retn
 39441                                  
 39442                                  ;----------------------------------------------------------------------------
 39443                                  ;
 39444                                  ; procedure : diddleback
 39445                                  ;
 39446                                  ; replace default values for further drivparm commands
 39447                                  ;
 39448                                  ;----------------------------------------------------------------------------
 39449                                  
 39450                                  diddleback:
 39451 0000340C 1E                      	push	ds
 39452 0000340D 0E                      	push	cs
 39453 0000340E 1F                      	pop	ds
 39454                                  	;mov	word [deviceparameters+4],80
 39455 0000340F C706[0847]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39456                                  	;mov	byte [deviceparameters+1],2
 39457 00003415 C606[0547]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 39458                                  	;mov	word [deviceparameters+2],0
 39459 0000341A C706[0647]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 39460 00003420 C706[6348]0000          	mov	word [switches],0	    ; zero all switches
 39461 00003426 1F                      	pop	ds
 39462 00003427 C3                      	retn
 39463                                  
 39464                                  ; 03/01/2023
 39465                                  %if 0
 39466                                  
 39467                                  ; 15/04/2019 - Retro DOS v4.0
 39468                                  
 39469                                  ;----------------------------------------------------------------------------
 39470                                  ;
 39471                                  ; procedure : parseline
 39472                                  ;
 39473                                  ; entry point is parseline. al contains the first character in command line.
 39474                                  ;
 39475                                  ;----------------------------------------------------------------------------
 39476                                  
 39477                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39478                                  	; (SYSINIT:3EDFh)
 39479                                  
 39480                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39481                                  	; (SYSINIT:30ACh)
 39482                                  parseline:
 39483                                  	; 03/01/2023
 39484                                  	; ds = cs ; *
 39485                                  
 39486                                  	;push	ds ; *
 39487                                  
 39488                                  	;push	cs ; *
 39489                                  	;pop	ds ; *
 39490                                  
 39491                                  nextswtch:
 39492                                  	cmp	al,cr			; carriage return?
 39493                                  	je	short done_line
 39494                                  	cmp	al,lf			; linefeed?
 39495                                  	je	short put_back		; put it back and done
 39496                                  
 39497                                  ; anything less or equal to a space is ignored.
 39498                                  
 39499                                  	cmp	al,' '                  ; space?
 39500                                  	jbe	short getnext		; skip over space
 39501                                  	cmp	al,'/'
 39502                                  	je	short getparm
 39503                                  	stc				; mark error invalid-character-in-input
 39504                                  	;jmp	short exitpl
 39505                                  	; 03/01/2023
 39506                                  swterr:
 39507                                  	retn
 39508                                  
 39509                                  getparm:
 39510                                  	call	check_switch
 39511                                  	mov	[switches],bx		; save switches read so far
 39512                                  	jc	short swterr
 39513                                  getnext:
 39514                                  	call	getchr
 39515                                  	;jc	short done_line
 39516                                  	;jmp	short nextswtch
 39517                                  	; 03/01/2023
 39518                                  	jnc	short nextswtch
 39519                                  ;swterr:
 39520                                  	;jmp	short exitpl		; exit if error
 39521                                  
 39522                                  done_line:
 39523                                  	; 12/12/2022
 39524                                  	test	byte [switches],flagdrive ; 8
 39525                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39526                                  	jnz	short okay
 39527                                  	stc				; mark error no-drive-specified
 39528                                  	;jmp	short exitpl
 39529                                  	; 03/01/2023
 39530                                  	retn
 39531                                  
 39532                                  okay:
 39533                                  	mov	ax,[switches]
 39534                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39535                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39536                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39537                                  	;clc			    ; everything is fine
 39538                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39539                                  	; 12/12/2022
 39540                                  	; cf=0
 39541                                  	;clc
 39542                                  	;call	setdeviceparameters
 39543                                  	; 03/01/2023
 39544                                  	jmp	setdeviceparameters
 39545                                  ;exitpl:
 39546                                  	; 03/01/2023
 39547                                  	; ds = cs
 39548                                  	;pop	ds ; *
 39549                                  	retn
 39550                                  put_back:
 39551                                  	inc	word [count]		; one more char to scan
 39552                                  	dec	word [chrptr]		; back up over linefeed
 39553                                  	jmp	short done_line
 39554                                  
 39555                                  %endif
 39556                                  
 39557                                  ;----------------------------------------------------------------------------
 39558                                  ;
 39559                                  ; procedure : check_switch
 39560                                  ;
 39561                                  ; processes a switch in the input. it ensures that the switch is valid, and
 39562                                  ; gets the number, if any required, following the switch. the switch and the
 39563                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 39564                                  ; error.
 39565                                  ;
 39566                                  ;----------------------------------------------------------------------------
 39567                                  
 39568                                  ; 09/09/2023
 39569                                  
 39570                                  err_swtch:
 39571 00003428 31CB                    	xor	bx,cx			; remove this switch from the records
 39572                                  err_check:
 39573 0000342A F9                      	stc
 39574                                  err_chk:
 39575                                  done_swtch:	; 09/09/2023 (cf=0)
 39576 0000342B C3                      	retn
 39577                                  
 39578                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39579                                  
 39580                                  check_switch:
 39581 0000342C E8DF0C                  	call	getchr
 39582                                  	;jc	short err_check
 39583 0000342F 72FA                    	jc	short err_chk
 39584 00003431 24DF                            and     al,0DFh                 ; convert it to upper case
 39585 00003433 3C41                    	cmp	al,'A'
 39586                                  	;jb	short err_check
 39587 00003435 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 39588 00003437 3C5A                    	cmp	al,'Z'
 39589 00003439 77EF                    	ja	short err_check
 39590                                  
 39591 0000343B 06                      	push	es
 39592                                  
 39593 0000343C 0E                      	push	cs
 39594 0000343D 07                      	pop	es
 39595                                  
 39596                                  	;mov	cl,[switchlist]		; get number of valid switches
 39597                                  	;mov	ch,0
 39598                                  	;mov	di,1+switchlist		; point to string of valid switches
 39599                                  	; 09/09/2023
 39600 0000343E BF[8849]                	mov	di,switchlist
 39601 00003441 8A0D                    	mov	cl,[di]
 39602 00003443 B500                    	mov	ch,0
 39603 00003445 47                      	inc	di	; 1+switchlist
 39604                                  
 39605 00003446 F2AE                    	repne	scasb
 39606                                  
 39607 00003448 07                      	pop	es
 39608 00003449 75DF                    	jnz	short err_check
 39609                                  
 39610 0000344B B80100                  	mov	ax,1
 39611 0000344E D3E0                    	shl	ax,cl			; set bit to indicate switch
 39612 00003450 8B1E[6348]              	mov	bx,[switches]		; get switches so far
 39613 00003454 09C3                    	or	bx,ax			; save this with other switches
 39614 00003456 89C1                    	mov	cx,ax
 39615                                  	; 12/12/2022
 39616 00003458 A8F8                    	test	al,switchnum ; 0F8h
 39617                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 39618 0000345A 74CF                    	jz	short done_swtch
 39619                                  
 39620 0000345C E8AF0C                  	call	getchr
 39621 0000345F 72C7                    	jc	short err_swtch
 39622                                  
 39623 00003461 3C3A                    	cmp	al,':'
 39624 00003463 75C3                    	jne	short err_swtch
 39625                                  
 39626 00003465 E8A60C                  	call	getchr
 39627 00003468 53                      	push	bx			; preserve switches
 39628                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39629                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 39630                                  	; 12/12/2022
 39631                                  	; ds = cs
 39632 00003469 C606[AA02]20            	mov	byte [sepchr],' '
 39633 0000346E E8530D                  	call	getnum
 39634                                  	;mov	byte [cs:sepchr],0
 39635                                  	; 12/12/2022
 39636 00003471 C606[AA02]00            	mov	byte [sepchr],0
 39637 00003476 5B                      	pop	bx			; restore switches
 39638                                  
 39639                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 39640                                  ; not check for carry set here. if there is an error, it will be detected
 39641                                  ; further on (hopefully).
 39642                                  
 39643                                  	; 09/09/2023
 39644                                  	;call	process_num
 39645                                  	;jmp	short process_num
 39646                                  
 39647                                  ;done_swtch:
 39648                                  ;	;clc
 39649                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39650                                  ;	; 12/12/2022
 39651                                  ;	; cf=0
 39652                                  ;	;clc
 39653                                  ;	retn
 39654                                  
 39655                                  ;----------------------------------------------------------------------------
 39656                                  ;
 39657                                  ; procedure : process_num
 39658                                  ;
 39659                                  ; this routine takes the switch just input, and the number following (if any),
 39660                                  ; and sets the value in the appropriate variable. if the number input is zero
 39661                                  ; then it does nothing - it assumes the default value that is present in the
 39662                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 39663                                  ;
 39664                                  ;----------------------------------------------------------------------------
 39665                                  
 39666                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39667                                  	; (SYSINIT:3156h)
 39668                                  process_num:
 39669 00003477 850E[6348]              	test	[switches],cx		; if this switch has been done before,
 39670 0000347B 752B                    	jnz	short done_ret		; ignore this one.
 39671                                  	; 12/12/2022
 39672 0000347D F6C108                  	test	cl,flagdrive ; 8
 39673                                  	;test	cx,flagdrive ; 8
 39674 00003480 7404                    	jz	short try_f
 39675 00003482 A2[6248]                	mov	byte [drive],al
 39676                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39677                                  	;jmp	short done_ret
 39678                                  	; 12/12/2022
 39679                                  	; cf=0
 39680 00003485 C3                      	retn	; 13/05/2019
 39681                                  try_f:
 39682                                  	; 12/12/2022
 39683 00003486 F6C180                  	test	cl,flagff ; 80h
 39684                                  	;test	cx,flagff ; 80h
 39685 00003489 7404                    	jz	short try_t
 39686                                  
 39687                                  ; ensure that we do not get bogus form factors that are not supported
 39688                                  
 39689                                  	;mov	[deviceparameters+1],al
 39690 0000348B A2[0547]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 39691                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39692                                  	;jmp	short done_ret
 39693                                  	; 12/12/2022
 39694                                  	; cf=0
 39695 0000348E C3                      	retn	; 13/05/2019
 39696                                  try_t:
 39697 0000348F 09C0                    	or	ax,ax
 39698 00003491 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 39699                                  	; 12/12/2022
 39700 00003493 F6C110                  	test	cl,flagcyln ; 10h
 39701                                  	;test	cx,flagcyln ; 10h
 39702 00003496 7404                    	jz	short try_s
 39703                                  
 39704                                  	;mov	[deviceparameters+4],ax
 39705 00003498 A3[0847]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 39706                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39707                                  	;jmp	short done_ret
 39708                                  	; 12/12/2022
 39709                                  	; cf=0
 39710 0000349B C3                      	retn	; 13/05/2019
 39711                                  try_s:
 39712                                  	; 12/12/2022
 39713 0000349C F6C120                  	test	cl,flagseclim ; 20h
 39714                                  	;test	cx,flagseclim ; 20h
 39715 0000349F 7404                    	jz	short try_h
 39716 000034A1 A3[6048]                	mov	[slim],ax
 39717                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39718                                  	;jmp	short done_ret
 39719                                  	; 12/12/2022
 39720                                  	; cf=0
 39721 000034A4 C3                      	retn	; 13/05/2019
 39722                                  
 39723                                  ; must be for number of heads
 39724                                  
 39725                                  try_h:
 39726 000034A5 A3[5E48]                	mov	[hlim],ax
 39727                                  done_ret:
 39728                                  	;clc
 39729                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39730                                  	; 12/12/2022
 39731                                  	; cf=0 (test instruction resets cf)
 39732                                  	;clc
 39733 000034A8 C3                      	retn
 39734                                  
 39735                                  
 39736                                  ; 16/04/2024 - Retro DOS v5.0
 39737                                  ; 03/01/2023 - Retro DOS v4.2
 39738                                  %if 1
 39739                                  
 39740                                  ; 15/04/2019 - Retro DOS v4.0
 39741                                  
 39742                                  ;----------------------------------------------------------------------------
 39743                                  ;
 39744                                  ; procedure : parseline
 39745                                  ;
 39746                                  ; entry point is parseline. al contains the first character in command line.
 39747                                  ;
 39748                                  ;----------------------------------------------------------------------------
 39749                                  
 39750                                  	; 16/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 39751                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4151h)
 39752                                  
 39753                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39754                                  	; (SYSINIT:3EDFh)
 39755                                  
 39756                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39757                                  	; (SYSINIT:30ACh)
 39758                                  
 39759                                  parseline:
 39760                                  	; 03/01/2023
 39761                                  	; ds = cs ; *
 39762                                  
 39763                                  	;push	ds ; *
 39764                                  
 39765                                  	;push	cs ; *
 39766                                  	;pop	ds ; *
 39767                                  
 39768                                  nextswtch:
 39769 000034A9 3C0D                    	cmp	al,cr			; carriage return?
 39770 000034AB 741C                    	je	short done_line
 39771 000034AD 3C0A                    	cmp	al,lf			; linefeed?
 39772 000034AF 7421                    	je	short put_back		; put it back and done
 39773                                  
 39774                                  ; anything less or equal to a space is ignored.
 39775                                  
 39776 000034B1 3C20                    	cmp	al,' '                  ; space?
 39777 000034B3 760F                    	jbe	short getnext		; skip over space
 39778 000034B5 3C2F                    	cmp	al,'/'
 39779 000034B7 7402                    	je	short getparm
 39780 000034B9 F9                      	stc				; mark error invalid-character-in-input
 39781                                  	;jmp	short exitpl
 39782                                  	; 03/01/2023
 39783                                  swterr:
 39784 000034BA C3                      	retn
 39785                                  
 39786                                  getparm:
 39787 000034BB E86EFF                  	call	check_switch
 39788 000034BE 891E[6348]              	mov	[switches],bx		; save switches read so far
 39789 000034C2 72F6                    	jc	short swterr
 39790                                  getnext:
 39791 000034C4 E8470C                  	call	getchr
 39792                                  	;jc	short done_line
 39793                                  	;jmp	short nextswtch
 39794                                  	; 03/01/2023
 39795 000034C7 73E0                    	jnc	short nextswtch
 39796                                  ;swterr:
 39797                                  	;jmp	short exitpl		; exit if error
 39798                                  
 39799                                  done_line:
 39800                                  	; 12/12/2022
 39801 000034C9 F606[6348]08            	test	byte [switches],flagdrive ; 8
 39802                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39803 000034CE 750C                    	jnz	short okay
 39804 000034D0 F9                      	stc				; mark error no-drive-specified
 39805                                  	;jmp	short exitpl
 39806                                  	; 03/01/2023
 39807 000034D1 C3                      	retn
 39808                                  
 39809                                  ;exitpl:
 39810                                  	; 03/01/2023
 39811                                  	; ds = cs
 39812                                  	;;pop	ds ; *
 39813                                  	;retn
 39814                                  
 39815                                  put_back:
 39816 000034D2 FF06[5203]              	inc	word [count]		; one more char to scan
 39817 000034D6 FF0E[5603]              	dec	word [chrptr]		; back up over linefeed
 39818 000034DA EBED                    	jmp	short done_line
 39819                                  
 39820                                  okay:
 39821 000034DC A1[6348]                	mov	ax,[switches]
 39822 000034DF 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39823 000034E2 A3[0647]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39824                                  	; 16/04/2024
 39825                                  	;mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39826                                  	;;;
 39827 000034E5 C706[6047]0000          	mov	word [deviceparameters+92],0 ; PCDOS 7.1 IBMBIO.COM	
 39828                                  	;;;
 39829                                  	;clc			    ; everything is fine
 39830                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39831                                  	; 12/12/2022
 39832                                  	; cf=0
 39833                                  	;clc
 39834                                  	;call	setdeviceparameters
 39835                                  	; 03/01/2023
 39836                                  	;jmp	short setdeviceparameters
 39837                                  
 39838                                  %endif
 39839                                  
 39840                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 39841                                  
 39842                                  ;----------------------------------------------------------------------------
 39843                                  ;
 39844                                  ; procedure : setdeviceparameters
 39845                                  ;
 39846                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 39847                                  ; system based on the form factor. it is assumed that the bpbs for the
 39848                                  ; various form factors are present in the bpbtable. for hard files,
 39849                                  ; the recommended bpb is the same as the bpb on the drive.
 39850                                  ; no attempt is made to preserve registers since we are going to jump to
 39851                                  ; sysinit straight after this routine.
 39852                                  ;
 39853                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 39854                                  ;	  we always return no carry
 39855                                  ;
 39856                                  ;	note:  there is a routine by the same name in msdioctl.asm
 39857                                  ;
 39858                                  ;----------------------------------------------------------------------------
 39859                                  
 39860                                  ; 15/04/2019 - Retro DOS v4.0
 39861                                  
 39862                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39863                                  
 39864                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39865                                  	; (SYSINIT:3FC4h)
 39866                                  
 39867                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39868                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 39869                                  
 39870                                  setdeviceparameters:
 39871                                  	; 03/01/2023
 39872                                  	; ds = cs
 39873                                  
 39874 000034EB 06                      	push	es
 39875                                  
 39876 000034EC 0E                      	push	cs
 39877 000034ED 07                      	pop	es
 39878                                  
 39879 000034EE 31DB                    	xor	bx,bx
 39880 000034F0 8A1E[0547]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 39881 000034F4 80FB00                  	cmp	bl,DEV_5INCH ; 0
 39882 000034F7 7506                    	jne	short got_80
 39883                                  
 39884 000034F9 C706[0847]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39885                                  							; 48 tpi=40 cyl
 39886                                  got_80:
 39887 000034FF D1E3                    	shl	bx,1			; get index into bpb table
 39888 00003501 8BB7[7449]              	mov	si,[bpbtable+bx]	; get address of bpb
 39889                                  
 39890                                  	;mov	di,deviceparameters+7	
 39891                                  	; 02/11/2022
 39892 00003505 BF[0B47]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 39893 00003508 B93B00                  	mov	cx,A_BPB.size ; 31
 39894                                  	; 09/09/2023
 39895                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 39896 0000350B FC                      	cld
 39897                                  	;repe	movsb
 39898                                  	; 02/11/2022
 39899 0000350C F3A4                    	rep	movsb
 39900                                  
 39901 0000350E 07                      	pop	es
 39902                                  
 39903                                  	; 12/12/2022
 39904 0000350F F606[6348]20            	test	byte [switches],flagseclim ; 20h
 39905                                  	;test	word [switches],flagseclim ; 20h
 39906 00003514 7406                    	jz	short see_heads
 39907                                  
 39908 00003516 A1[6048]                	mov	ax,[slim]
 39909                                  	;mov	[deviceparameters+20],ax
 39910 00003519 A3[1847]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 39911                                  
 39912                                  see_heads:
 39913                                  	; 12/12/2022
 39914 0000351C F606[6348]40            	test	byte [switches],flagheads ; 40h
 39915                                  	;test	word [switches],flagheads ; 40h
 39916 00003521 7406                    	jz	short heads_not_altered
 39917                                  
 39918 00003523 A1[5E48]                	mov	ax,[hlim]
 39919                                  	;mov	[deviceparameters+22],ax	
 39920 00003526 A3[1A47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 39921                                  
 39922                                  heads_not_altered:
 39923                                  
 39924                                  ; set up correct media descriptor byte and sectors/cluster
 39925                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 39926                                  
 39927                                  	;mov	byte [deviceparameters+9],2
 39928                                  	; 02/11/2022
 39929                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 39930                                  	; 03/01/2023
 39931 00003529 B80200                  	mov	ax,2	
 39932 0000352C A2[0D47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 39933                                  
 39934 0000352F B3F0                    	mov	bl,0F0h			; get default mediabyte
 39935                                  
 39936                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 39937                                  
 39938                                  	;mov	bh,[deviceparameters+17]
 39939                                  	; 02/11/2022
 39940 00003531 8A3E[1547]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 39941                                  	
 39942                                  	; 03/01/2023
 39943                                  	; ax = 2
 39944 00003535 3906[1A47]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 39945                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 39946 00003539 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 39947                                  
 39948 0000353B 7524                    	jne	short only_one_head	; one head, do one head stuff
 39949                                  
 39950                                  ;	two head drives will use the mediadescriptor from the bpb
 39951                                  
 39952 0000353D 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 39953                                  
 39954                                  ;	two sided drives have two special cases to look for. One is
 39955                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 39956                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 39957                                  ;	   one sector/cluster.
 39958                                  
 39959                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 39960                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 39961                                  ;	   type of 2 headed drive is all set.
 39962                                  
 39963 0000353F 833E[1847]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 39964 00003544 7509                    	jne	short not_144m
 39965 00003546 833E[0847]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39966 0000354B 7502                    	jne	short not_144m
 39967                                  
 39968                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 39969                                  
 39970 0000354D EB24                    	jmp	short got_one_secperclus_drive
 39971                                  
 39972                                  ;	check for 320K
 39973                                  
 39974                                  not_144m:
 39975 0000354F 833E[0847]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 39976 00003554 7521                    	jne	short got_correct_mediad
 39977 00003556 833E[1847]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39978 0000355B 751A                    	jne	short got_correct_mediad
 39979                                  
 39980 0000355D B3FC                    	mov	bl,0FCh
 39981 0000355F EB16                    	jmp	short got_correct_mediad
 39982                                  
 39983                                  only_one_head:
 39984                                  
 39985                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 39986                                  
 39987 00003561 803E[0547]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 39988 00003566 740B                    	je	short got_one_secperclus_drive
 39989                                  
 39990                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 39991                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 39992                                  ;	  besides 8 will be considered 0fch
 39993                                  
 39994 00003568 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 39995 0000356A 833E[1847]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 39996                                  	; 12/12/2022
 39997 0000356F 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 39998                                  
 39999 00003571 B3FE                    	mov	bl,0FEh			; 160K mediaid
 40000                                  
 40001                                  ;	we've either got a one sided drive, or a 1.44M drive
 40002                                  ;	  either case we'll use 1 sector per cluster instead of 2
 40003                                  
 40004                                  got_one_secperclus_drive:
 40005                                  	; 03/01/2023
 40006                                  	; ax = 2
 40007 00003573 48                      	dec	ax  ; ax = 1
 40008 00003574 A2[0D47]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 40009                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 40010                                  
 40011                                  got_correct_mediad:
 40012 00003577 881E[1547]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 40013                                  
 40014                                  ;	 Calculate the correct number of Total Sectors on medium
 40015                                  
 40016 0000357B A1[0847]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 40017 0000357E F726[1A47]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 40018 00003582 F726[1847]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 40019 00003586 A3[1347]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 40020 00003589 F8                      	clc				; we currently return no errors
 40021                                  
 40022 0000358A C3                      	retn
 40023                                  
 40024                                  ;	M047 -- end rewritten routine
 40025                                  
 40026                                  ;----------------------------------------------------------------------------
 40027                                  ;
 40028                                  ; procedure : organize
 40029                                  ;
 40030                                  ;----------------------------------------------------------------------------
 40031                                  
 40032                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40033                                  %if 1
 40034                                  end_commd_line:
 40035 0000358B AA                      	stosb				; store line feed char in buffer for the linecount.
 40036                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40037                                  	; 03/01/2023
 40038                                  	; ds = cs
 40039                                  	;mov	byte [com_level],0
 40040                                  	;jmp	short org1
 40041                                  	; 09/09/2023
 40042 0000358C EB0E                    	jmp	short org0
 40043                                  nochar1:
 40044 0000358E F9                      	stc
 40045 0000358F C3                      	retn
 40046                                  %endif
 40047                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40048                                  	; (SYSINIT:3234h)
 40049                                  
 40050                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40051                                  	; (SYSINIT:4067h)
 40052                                  
 40053                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40054                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 40055                                  
 40056                                  organize:
 40057                                  	; 03/01/2023
 40058                                  	; ds = cs
 40059 00003590 8B0E[5203]              	mov	cx,[count]
 40060                                  	;mov	cx,[cs:count]
 40061 00003594 E3F8                    	jcxz	nochar1
 40062                                  
 40063                                  ;ifndef	MULTI_CONFIG
 40064                                  ;
 40065                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 40066                                  ;;   because we the case of values in SET commands preserved
 40067                                  ;
 40068                                  ;	call	mapcase
 40069                                  ;endif
 40070                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40071                                  	; 03/01/2023 - Retro DOS v4.2
 40072                                  	;call	mapcase
 40073                                  
 40074 00003596 31F6                    	xor	si,si
 40075 00003598 89F7                    	mov	di,si
 40076 0000359A 31C0                    	xor	ax,ax
 40077                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 40078                                  	;;mov	byte [cs:com_level],0
 40079                                  	; 12/12/2022
 40080                                  	;mov	[cs:com_level],al ; 0
 40081                                  	; 03/01/2023
 40082                                  	; ds = cs
 40083                                  	; 09/09/2023
 40084                                  	;mov	[com_level],al ; 0
 40085                                  org0:
 40086 0000359C C606[4C03]00            	mov	byte [com_level],0 ; 09/09/2023
 40087                                  org1:
 40088 000035A1 E8DA01                  	call	skip_comment
 40089 000035A4 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 40090 000035A6 E8BB01                  	call	get2			; not a comment string. then get a char.
 40091 000035A9 3C0A                    	cmp	al,lf ; 0Ah
 40092 000035AB 74DE                    	je	short end_commd_line	; starts with a blank line.
 40093 000035AD 3C20                    	cmp	al,' ' ; 20h
 40094 000035AF 76F0                    	jbe	short org1		; skip leading control characters
 40095                                  	; 09/09/2023
 40096                                  	;jmp	short findit
 40097                                  
 40098                                  ; 09/09/2023
 40099                                  %if 0
 40100                                  end_commd_line:
 40101                                  	stosb				; store line feed char in buffer for the linecount.
 40102                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40103                                  	; 03/01/2023
 40104                                  	; ds = cs
 40105                                  	mov	byte [com_level],0
 40106                                  	jmp	short org1
 40107                                  
 40108                                  nochar1:
 40109                                  	stc
 40110                                  	retn
 40111                                  %endif
 40112                                  
 40113                                  findit:
 40114 000035B1 51                      	push	cx
 40115 000035B2 56                      	push	si
 40116 000035B3 57                      	push	di
 40117 000035B4 89F5                    	mov	bp,si
 40118 000035B6 4D                      	dec	bp
 40119 000035B7 BE[3146]                        mov     si,comtab		; prepare to search command table
 40120 000035BA B500                    	mov	ch,0
 40121                                  findcom:
 40122 000035BC 89EF                    	mov	di,bp
 40123 000035BE 8A0C                    	mov	cl,[si]
 40124 000035C0 46                      	inc	si
 40125 000035C1 E345                    	jcxz	nocom
 40126                                  
 40127                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40128                                  
 40129                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40130                                  
 40131                                  ;ifdef	MULTI_CONFIG
 40132                                  
 40133                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 40134                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 40135                                  ;   anything in particular)
 40136                                  
 40137 000035C3 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 40138 000035C7 7430                    	je	short semicolon
 40139                                  loopcom:
 40140                                  	;mov	al,[es:di]
 40141                                  	;inc	di
 40142                                  	;and	al,~20h ; 0DFh		; force upper case
 40143                                  	;inc	si                      ; compare to byte @es:di
 40144                                  	;cmp	al,[si-1]
 40145                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40146 000035C9 268A25                  	mov	ah,[es:di]
 40147 000035CC 47                      	inc	di
 40148 000035CD 80E4DF                  	and	ah,~20h ; 0DFh		
 40149 000035D0 AC                      	lodsb			; mov al,[si]
 40150                                  				; inc si
 40151                                  	;cmp	al,ah
 40152                                  	;loope	loopcom
 40153                                  	; 28/07/2023
 40154 000035D1 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 40155 000035D3 E1F4                    	loopz	loopcom
 40156                                  ;else
 40157                                  ;	repe	cmpsb
 40158                                  ;endif
 40159                                  	; 02/11/2022
 40160                                  	; 03/01/2023 - Retro DOS v4.2
 40161                                  	;repe	cmpsb
 40162                                  
 40163                                  	; 28/07/2023
 40164                                  	;lahf
 40165 000035D5 01CE                            add     si,cx                   ; bump to next position without affecting flags
 40166                                  	;sahf
 40167 000035D7 AC                              lodsb                           ; get indicator letter
 40168                                  	;jnz	short findcom
 40169                                          ; 28/07/2023
 40170 000035D8 08E4                    	or	ah,ah			; (*)
 40171 000035DA 75E0                    	jnz	short findcom		
 40172                                  	
 40173 000035DC 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 40174 000035E0 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 40175 000035E2 26803D0A                	cmp	byte [es:di],lf
 40176 000035E6 741B                    	je	short gotcom0
 40177                                  
 40178                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40179                                  
 40180                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40181                                  
 40182                                  ;ifdef	MULTI_CONFIG
 40183                                  
 40184                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 40185                                  
 40186 000035E8 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 40187 000035EA 7417                    	je	short gotcom0
 40188                                  ;endif
 40189 000035EC 50                      	push	ax
 40190 000035ED 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 40191                                  
 40192                                  ;ifdef	MULTI_CONFIG
 40193                                  
 40194                                  ;   If keyword is *immediately* followed by a question mark (?), then
 40195                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 40196                                  ;   stored in the CONFIG.SYS memory image.
 40197                                  
 40198 000035F0 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 40199 000035F2 7509                    	jne	short no_query		; no
 40200 000035F4 58                      	pop	ax                      ; yes, so retrieve the original code
 40201                                  	;or	al,80h ; 03/01/2023
 40202 000035F5 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 40203 000035F7 EB0A                    	jmp	short gotcom0           ;
 40204                                  semicolon:
 40205 000035F9 B030                    	mov	al,CONFIG_REM ; '0'
 40206 000035FB EB06                    	jmp	short gotcom0
 40207                                  no_query:
 40208                                  ;endif  ;MULTI_CONFIG
 40209                                  
 40210                                  	; 02/11/2022
 40211                                  	; 03/01/2023 - Retro DOS v4.2
 40212                                  	;push	ax
 40213                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 40214                                  
 40215 000035FD E8E90A                  	call	delim
 40216                                  no_delim:
 40217 00003600 58                      	pop	ax
 40218 00003601 75B9                    	jnz	short findcom
 40219                                  gotcom0:
 40220 00003603 5F                      	pop	di
 40221 00003604 5E                      	pop	si
 40222 00003605 59                      	pop	cx
 40223 00003606 EB10                    	jmp	short gotcom
 40224                                  nocom:
 40225 00003608 5F                      	pop	di
 40226 00003609 5E                      	pop	si
 40227 0000360A 59                      	pop	cx
 40228 0000360B B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 40229 0000360D AA                      	stosb				; save indicator char.
 40230                                  _skipline:
 40231 0000360E E85301                  	call	get2
 40232 00003611 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 40233 00003613 75F9                            jne     short _skipline
 40234                                  	;jmp	short end_commd_line	; handle next command line
 40235                                  	; 09/09/2023
 40236 00003615 E973FF                  	jmp	end_commd_line
 40237                                  gotcom:
 40238 00003618 AA                              stosb                           ; save indicator char in buffer
 40239                                  
 40240                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40241                                  
 40242                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40243                                  
 40244                                  ;ifdef	MULTI_CONFIG
 40245                                  
 40246                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 40247                                  ;   it screws up the direct comparisons below.
 40248                                  
 40249 00003619 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 40250                                  ;endif
 40251                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 40252                                  	; 03/01/2023
 40253                                  	; ds = cs
 40254 0000361B A2[5003]                	mov	[cmd_indicator],al	; save it for the future use.
 40255                                  
 40256                                  ;ifdef	MULTI_CONFIG
 40257                                  
 40258                                  ;   There is no whitespace/delimiter between the "begin block" character
 40259                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 40260                                  ;   skipping code
 40261                                  
 40262 0000361E 3C5B                    	cmp	al,CONFIG_BEGIN
 40263 00003620 7429                    	je	short org31
 40264 00003622 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 40265 00003624 740F                    	je	short no_mapcase
 40266 00003626 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 40267 00003628 740B                    	je	short no_mapcase
 40268 0000362A 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 40269 0000362C 7407                    	je	short no_mapcase
 40270 0000362E 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 40271 00003630 7403                    	je	short no_mapcase
 40272 00003632 E8F00A                  	call	mapcase			; map case of rest of line to UPPER
 40273                                  no_mapcase:
 40274                                  ;endif
 40275                                  	;; 02/11/2022
 40276                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 40277                                  	;; 03/01/2023
 40278                                  	;; ds = cs
 40279                                  	;mov	[cmd_indicator],al
 40280                                  org2:	
 40281 00003635 E82C01                  	call    get2                    ; skip the command name until delimiter
 40282 00003638 3C0A                            cmp     al,lf 	    ; 0Ah
 40283 0000363A 7412                    	je	short org21
 40284 0000363C 3C0D                    	cmp	al,cr 	    ; 0Dh	
 40285 0000363E 740E                    	je	short org21
 40286                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40287                                  	; 03/01/2023 - Retro DOS v4.2
 40288 00003640 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 40289 00003642 740A                    	je	short org21		; T-RICHJ: to be parsed properly.
 40290                                  
 40291 00003644 E8A20A                  	call	delim
 40292 00003647 75EC                            jnz	short org2
 40293 00003649 EB05                    	jmp	short org3
 40294                                  
 40295                                  ; 24/03/2025 - MiniDOS 1.0
 40296                                  %if 1
 40297                                  org31:
 40298 0000364B E9AC00                  	jmp	org4
 40299                                  %endif
 40300                                  
 40301                                  org21:					;if cr or lf then
 40302 0000364E 4E                      	dec	si			; undo si, cx register
 40303 0000364F 41                      	inc	cx			;  and continue
 40304                                  org3:	
 40305                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 40306                                  	;je	short get_cmt_token
 40307                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40308                                  	; 03/01/2023 - Retro DOS v4.2	
 40309                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40310                                  	;je	short org_file
 40311                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 40312                                  	;je	short org_file
 40313                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40314                                  	;je	short org_file
 40315                                  	; 02/11/2022
 40316                                  	; 03/01/2023 - Retro DOS v4.2
 40317                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40318                                  	;;je	short org_file
 40319                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 40320                                  	;je	short org_file
 40321                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 40322                                  	;je	short org_switch
 40323                                  
 40324                                  	; 03/01/2023
 40325                                  	; ds = cs
 40326                                  
 40327 00003650 803E[5003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 40328 00003655 7445                    	je	short get_cmt_token
 40329                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40330                                  	; 03/01/2023 - Retro DOS v4.2	
 40331 00003657 803E[5003]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40332 0000365C 7418                    	je	short org_file
 40333 0000365E 803E[5003]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 40334 00003663 7411                    	je	short org_file
 40335 00003665 803E[5003]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40336 0000366A 740A                    	je	short org_file
 40337                                  	; 02/11/2022
 40338                                  	; 03/01/2023 - Retro DOS v4.2
 40339                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40340                                  	;je	short org_file
 40341 0000366C 803E[5003]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 40342                                  	; 18/03/2025
 40343 00003671 7403                    	je	short org_file
 40344                                  	; 24/03/2025 - MiniDOS 1.0
 40345 00003673 E98400                  	jmp	org4
 40346                                  
 40347                                  ; 18/03/2025 - MiniDOS 1.0
 40348                                  %if 0
 40349                                          cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 40350                                  	je	short org_switch
 40351                                  
 40352                                  org31:
 40353                                  	jmp	org4
 40354                                  
 40355                                  org_switch:
 40356                                  	call	skip_comment
 40357                                  	jz	short end_commd_line_brdg
 40358                                  
 40359                                  	call	get2
 40360                                  	call	org_delim
 40361                                  	jz	short org_switch
 40362                                  
 40363                                  	stosb
 40364                                  	jmp	org5
 40365                                  %endif
 40366                                  
 40367                                  
 40368                                  org_file:			; get the filename and put 0 at end
 40369 00003676 E80501                  	call	skip_comment
 40370 00003679 7464                    	jz	short org_put_zero
 40371                                  
 40372 0000367B E8E600                  	call	get2		; not a comment
 40373 0000367E E8680A                  	call	delim
 40374 00003681 74F3                    	jz	short org_file	; skip the possible delimiters
 40375                                  
 40376 00003683 AA                      	stosb			; copy the first non delim char found in buffer
 40377                                  
 40378                                  org_copy_file:
 40379 00003684 E8F700                  	call	skip_comment	; comment char in the filename?
 40380 00003687 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 40381                                  
 40382 00003689 E8D800                  	call	get2
 40383 0000368C 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 40384 0000368E 7457                    	je	short end_file_slash ; this will be the special case.
 40385                                  
 40386 00003690 AA                      	stosb			; save the char. in buffer
 40387 00003691 E8550A                  	call	delim
 40388 00003694 7459                    	jz	short end_copy_file
 40389                                  
 40390 00003696 3C20                    	cmp	al, ' '
 40391 00003698 77EA                    	ja	short org_copy_file ; keep copying
 40392 0000369A EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 40393                                  
 40394                                  get_cmt_token:			; get the token. just max. 2 char.
 40395 0000369C E8C500                  	call	get2
 40396 0000369F 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 40397 000036A1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 40398 000036A3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 40399 000036A5 74F5                    	je	short get_cmt_token ;  character.)
 40400 000036A7 3C3D                    	cmp	al,'='		; = is special in this case.
 40401 000036A9 74F1                    	je	short get_cmt_token
 40402 000036AB 3C0D                    	cmp	al,cr
 40403 000036AD 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 40404 000036AF 3C0A                    	cmp	al,lf
 40405 000036B1 7422                    	je	short get_cmt_end
 40406                                  
 40407                                  	; 03/01/2023
 40408                                  	; ds = cs
 40409                                  	;mov	[cs:cmmt1],al	; store it
 40410                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 40411 000036B3 A2[4E03]                	mov	[cmmt1],al	; store it
 40412 000036B6 C606[4D03]01            	mov	byte [cmmt],1	; 1 char. so far.
 40413 000036BB E8A600                  	call	get2
 40414 000036BE 3C20                    	cmp	al,' ' ; 20h
 40415 000036C0 7413                    	je	short get_cmt_end
 40416 000036C2 3C09                    	cmp	al,tab ; 9
 40417 000036C4 740F                    	je	short get_cmt_end
 40418 000036C6 3C0D                    	cmp	al,cr  ; 0Dh
 40419 000036C8 740B                    	je	short get_cmt_end
 40420 000036CA 3C0A                    	cmp	al,lf  ; 0Ah
 40421 000036CC 740E                    	je	short end_commd_line_brdg
 40422                                  
 40423                                  	;mov	[cs:cmmt2],al
 40424                                  	;inc	byte [cs:cmmt]
 40425                                  	; 03/01/2023
 40426 000036CE A2[4F03]                	mov	[cmmt2],al
 40427 000036D1 FE06[4D03]              	inc	byte [cmmt]
 40428                                  
 40429                                  get_cmt_end:
 40430 000036D5 E88C00                  	call	get2
 40431 000036D8 3C0A                    	cmp	al,lf
 40432 000036DA 75F9                    	jne	short get_cmt_end	; skip it.
 40433                                  end_commd_line_brdg: 
 40434 000036DC E9ACFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 40435                                  
 40436                                  org_put_zero:				; make the filename in front of
 40437 000036DF 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 40438 000036E3 47                      	inc	di
 40439 000036E4 E9A4FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 40440                                  
 40441                                  end_file_slash: 			; al = "/" option char.
 40442 000036E7 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 40443 000036EB 47                      	inc	di			; and
 40444 000036EC AA                      	stosb				; store "/" after that.
 40445 000036ED EB1A                    	jmp	short org5		; continue with the rest of the line
 40446                                  
 40447                                  end_copy_file:
 40448 000036EF 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 40449 000036F4 3C0A                    	cmp	al,lf
 40450 000036F6 74E4                    	je	short end_commd_line_brdg
 40451 000036F8 EB0F                    	jmp	short org5
 40452                                  
 40453                                  org4:					; org4 skips all delimiters after the command name except for '/'
 40454 000036FA E88100                  	call	skip_comment
 40455 000036FD 74DD                    	jz	short end_commd_line_brdg
 40456                                  
 40457 000036FF E86200                  	call	get2
 40458 00003702 E8EC09                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 40459 00003705 74F3                    	jz	short org4
 40460 00003707 EB08                    	jmp	short org51
 40461                                  
 40462                                  org5:					; rest of the line
 40463 00003709 E87200                  	call	skip_comment		; comment?
 40464 0000370C 74CE                    	jz	short end_commd_line_brdg
 40465 0000370E E85300                  	call	get2			; not a comment.
 40466                                  
 40467                                  org51:
 40468 00003711 AA                      	stosb				; copy the character
 40469 00003712 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 40470 00003714 743A                    	je	short at_quote
 40471 00003716 3C20                    	cmp	al,' '  ; 20h
 40472 00003718 77EF                    	ja	short org5
 40473                                  
 40474                                  	; 09/09/2023
 40475                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 40476                                  
 40477                                  					; M051 - Start
 40478                                  	; 03/01/2023
 40479                                  	; ds = cs
 40480 0000371A 803E[5003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 40481                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 40482 0000371F 7514                    	jne	short not_dh		; N: 
 40483 00003721 3C0A                    	cmp	al,lf			; Q: is this line feed
 40484 00003723 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 40485 00003725 3C0D                    	cmp	al,cr			; Q: is this a cr
 40486 00003727 75E0                    	jne	short org5		; N: 
 40487 00003729 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 40488 0000372E AA                      	stosb				; put cr after blank
 40489 0000372F FE06[E333]              	inc	byte [insert_blank]
 40490                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 40491                                  					; inserted
 40492 00003733 EBD4                    	jmp	short org5
 40493                                  not_dh:					; M051 - End
 40494                                  
 40495 00003735 3C0A                    	cmp	al,lf			; line feed?
 40496 00003737 740F                    	je	short org1_brdg		; handles the next command line.
 40497 00003739 EBCE                    	jmp	short org5		; handles next char in this line.
 40498                                  
 40499                                  org_dhlf:				; M051 - Start
 40500                                  	; 03/01/2023
 40501                                  	; ds = cs
 40502 0000373B 803E[E333]01            	cmp	byte [insert_blank],1
 40503                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 40504 00003740 7406                    	je	short org1_brdg		; Y:
 40505 00003742 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 40506 00003747 AA                      	stosb				; put lf after blank
 40507                                  					; M051 - End
 40508                                  org1_brdg:
 40509 00003748 C606[E333]00            	mov	byte [insert_blank],0 
 40510                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 40511                                  					; M051: devicehigh
 40512 0000374D E951FE                  	jmp	org1
 40513                                  
 40514                                  at_quote:
 40515 00003750 803E[4C03]00            	cmp	byte [com_level],0
 40516                                  	;cmp	byte [cs:com_level],0
 40517 00003755 7407                    	je	short up_level
 40518                                  	;mov	byte [cs:com_level],0	; reset it.
 40519 00003757 C606[4C03]00            	mov	byte [com_level],0
 40520 0000375C EBAB                    	jmp	short org5
 40521                                  
 40522                                  up_level:
 40523                                  	;inc	byte [cs:com_level]	; set it.
 40524 0000375E FE06[4C03]              	inc	byte [com_level]
 40525 00003762 EBA5                    	jmp	short org5
 40526                                  
 40527                                  ;----------------------------------------------------------------------------
 40528                                  ;
 40529                                  ; procedure : get2
 40530                                  ;
 40531                                  ;----------------------------------------------------------------------------
 40532                                  
 40533                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40534                                  	; (SYSINIT:33FAh)
 40535                                  
 40536                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40537                                  	; (SYSINIT:4270h)
 40538                                  get2:
 40539 00003764 E304                    	jcxz	noget
 40540                                  	;
 40541                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40542                                  	;;lods	byte ptr es:[si]
 40543                                  	; 12/12/2022
 40544 00003766 26                      	es	
 40545 00003767 AC                      	lodsb
 40546                                  	;mov	al, [es:si]
 40547                                  	;inc	si
 40548                                  	;
 40549 00003768 49                      	dec	cx
 40550 00003769 C3                      	retn
 40551                                  noget:
 40552 0000376A 59                      	pop	cx
 40553                                  	; 03/01/2023
 40554                                  	; ds = cs
 40555                                  	;mov	[cs:count],di ; 13/05/2019
 40556                                  	;mov	[cs:org_count],di
 40557 0000376B 893E[5203]              	mov	[count],di
 40558 0000376F 893E[5403]              	mov	[org_count],di
 40559 00003773 31F6                    	xor	si,si
 40560                                  	;mov	[cs:chrptr],si
 40561 00003775 8936[5603]              	mov	[chrptr],si
 40562                                  
 40563                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40564                                  
 40565                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40566                                  
 40567                                  ;ifndef MULTI_CONFIG
 40568                                  ;	retn
 40569                                  ;else
 40570                                  
 40571                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 40572                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 40573                                  ;   and the new boot menu stuff...
 40574                                  
 40575 00003779 89F9                    	mov     cx,di
 40576 0000377B E9E300                  	jmp     menu_check
 40577                                  
 40578                                  ;endif
 40579                                  	; 02/11/2022
 40580                                  	; 03/01/2023 - Retro DOS v4.2
 40581                                  	;retn
 40582                                  
 40583                                  ;----------------------------------------------------------------------------
 40584                                  ;
 40585                                  ; procedure : skip_comment
 40586                                  ;
 40587                                  ;skip the commented string until lf, if current es:si-> a comment string.
 40588                                  ;in) es:si-> string
 40589                                  ;	 cx -> length.
 40590                                  ;out) zero flag not set if not found a comment string.
 40591                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 40592                                  ;	  the line feed character at this moment when return.
 40593                                  ;	  ax register destroyed.
 40594                                  ;	  if found, si, cx register adjusted accordingly.
 40595                                  ;
 40596                                  ;----------------------------------------------------------------------------
 40597                                  
 40598                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40599                                  	; (SYSINIT:428Dh)
 40600                                  
 40601                                  skip_comment:
 40602 0000377E E3EA                    	jcxz	noget		; get out of the organize routine.
 40603                                  
 40604                                  	; 03/01/2023
 40605                                  	; ds = cs	
 40606                                  
 40607 00003780 803E[4C03]00            	cmp	byte [com_level],0
 40608                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 40609 00003785 752C                    	jne	short no_commt	 ; (not inside quotations)
 40610                                  
 40611 00003787 803E[4D03]01            	cmp	byte [cmmt],1
 40612                                  	;cmp	byte [cs:cmmt],1
 40613 0000378C 7225                    	jb	short no_commt
 40614                                  
 40615 0000378E 268A04                  	mov	al,[es:si]
 40616                                  	
 40617 00003791 3806[4E03]              	cmp	[cmmt1],al
 40618                                  	;cmp	[cs:cmmt1],al
 40619 00003795 751C                    	jne	short no_commt
 40620                                  
 40621 00003797 803E[4D03]02            	cmp	byte [cmmt],2
 40622                                  	;cmp	byte [cs:cmmt],2
 40623 0000379C 750A                    	jne	short skip_cmmt
 40624                                  
 40625 0000379E 268A4401                	mov	al,[es:si+1]
 40626                                  	
 40627 000037A2 3806[4F03]              	cmp	[cmmt2],al
 40628                                  	;cmp	[cs:cmmt2],al
 40629 000037A6 750B                    	jne	short no_commt
 40630                                  skip_cmmt:
 40631 000037A8 E3C0                    	jcxz	noget		; get out of organize routine.
 40632 000037AA 268A04                  	mov	al,[es:si]
 40633 000037AD 46                      	inc	si
 40634 000037AE 49                      	dec	cx
 40635 000037AF 3C0A                    	cmp	al,lf		; line feed?
 40636 000037B1 75F5                    	jne	short skip_cmmt
 40637                                  no_commt:
 40638 000037B3 C3                      	retn
 40639                                  
 40640                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40641                                  ; (SYSINIT:42C8h)
 40642                                  
 40643                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40644                                  ;%if 0
 40645                                  
 40646                                  ;ifdef	MULTI_CONFIG
 40647                                  
 40648                                  ;----------------------------------------------------------------------------
 40649                                  ;
 40650                                  ;   kbd_read: wait for keystroke
 40651                                  ;
 40652                                  ;   INPUT
 40653                                  ;       DS == CS == sysinitseg
 40654                                  ;
 40655                                  ;   OUTPUT
 40656                                  ;       Carry SET to clean boot, CLEAR otherwise
 40657                                  ;
 40658                                  ;   OTHER REGS USED
 40659                                  ;       All
 40660                                  ;
 40661                                  ;   HISTORY
 40662                                  ;       Created 16-Nov-1992 by JeffPar
 40663                                  ;
 40664                                  ;----------------------------------------------------------------------------
 40665                                  
 40666                                  kbd_read:
 40667 000037B4 F606[E045]02                    test    byte [bDisableUI],2
 40668 000037B9 7520                            jnz     short kbd_nodelay
 40669                                  
 40670 000037BB 1E                              push    ds              ; the bios timer tick count is incremented
 40671 000037BC 29C0                            sub     ax,ax           ; 18.2 times per second;
 40672 000037BE 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 40673                                  	;mov	dx,[046Ch]	; get initial value
 40674                                  kbd_loop:
 40675 000037C0 B401                            mov     ah,1            ;
 40676 000037C2 CD16                            int     16h             ; peek the keyboard
 40677 000037C4 7514                            jnz	short kbd_loopdone ; something's there, get out
 40678 000037C6 B402                            mov     ah,2            ; peek the shift states
 40679 000037C8 CD16                            int     16h             ;
 40680 000037CA A803                            test    al,03h          ; either right or left shift key bits set?
 40681 000037CC 750C                            jnz	short kbd_loopdone ; yes
 40682 000037CE A16C04                          mov     ax,[046Ch]	;
 40683                                  	;sub	ax,dx           ; get difference
 40684                                  	; 15/04/2019 - Retro DOS v4.0
 40685 000037D1 2E2B06[8203]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 40686                                  
 40687 000037D6 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 40688 000037D8 72E6                            jb	short kbd_loop	; not yet
 40689                                  kbd_loopdone:
 40690 000037DA 1F                              pop     ds              ; delay complete!
 40691                                  kbd_nodelay:
 40692 000037DB 29DB                            sub     bx,bx           ; assume clean boot
 40693 000037DD B402                            mov     ah,2            ; peek the shift states
 40694 000037DF CD16                            int     16h             ;
 40695 000037E1 A803                            test    al,03h          ; either right or left shift key bits set?
 40696 000037E3 7407                            jz      short kbd_notshift ; no
 40697 000037E5 43                              inc     bx              ; yes
 40698 000037E6 43                              inc     bx
 40699                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 40700 000037E7 800E[E445]04            	or	byte [bQueryOpt],4
 40701                                  kbd_notshift:                   ;
 40702 000037EC B401                            mov     ah,1            ; peek the keyboard
 40703 000037EE CD16                            int     16h             ;
 40704 000037F0 743E                            jz	short kbd_test	; no key present
 40705 000037F2 08C0                            or      al,al           ; is it a function key?
 40706 000037F4 753A                            jnz	short kbd_test	; no
 40707                                  
 40708                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 40709 000037F6 80FC62                          cmp     ah,62h          ; CTRL F5
 40710 000037F9 7405                            je	short kbd_cfg_bypass
 40711                                  	
 40712 000037FB 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 40713 000037FE 750D                            jne	short kbd_notf5	; no
 40714                                  kbd_cfg_bypass:
 40715 00003800 BA[424B]                        mov     dx,_$CleanMsg
 40716 00003803 E8AD0B                          call    print
 40717                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 40718 00003806 800E[E445]04            	or	byte [bQueryOpt],4 
 40719 0000380B EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 40720                                  kbd_notf5:
 40721                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 40722 0000380D 80FC65                          cmp     ah,65h          ; CTRL F8
 40723 00003810 7405                            je	short kbd_cfg_confirm
 40724                                  
 40725 00003812 80FC42                          cmp     ah,42h          ; F8 function key?
 40726 00003815 7523                            jne	short kbd_exit	; no
 40727                                  kbd_cfg_confirm:
 40728 00003817 BA[804B]                        mov     dx,_$InterMsg
 40729 0000381A E8960B                          call    print           ;
 40730 0000381D B301                            mov     bl,1            ; yes, interactive-boot option enabled
 40731 0000381F 881E[E445]                      mov     [bQueryOpt],bl  ; change default setting
 40732                                  kbd_eat:                        ;
 40733 00003823 B400                            mov     ah,0            ;
 40734 00003825 CD16                            int     16h             ; eat the key we assumed was a signal
 40735 00003827 C606[EA45]FF                    mov	byte [secElapsed],-1
 40736 0000382C 09DB                            or      bx,bx           ;
 40737 0000382E 7405                            jz	short kbd_clean	;
 40738                                  kbd_test:                       ;
 40739 00003830 80FB02                          cmp     bl,2            ;
 40740 00003833 7205                            jb	short kbd_exit	;
 40741                                  kbd_clean:                      ;
 40742 00003835 E83E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 40743 00003838 F9                              stc                     ; set carry to indicate abort
 40744 00003839 C3                              retn			;
 40745                                  kbd_exit:                       ;
 40746 0000383A F8                              clc                     ; clear carry to indicate success
 40747 0000383B C3                              retn			;
 40748                                  
 40749                                  ;----------------------------------------------------------------------------
 40750                                  ;
 40751                                  ;   set_numlock: set numlock LED
 40752                                  ;
 40753                                  ;   INPUT
 40754                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 40755                                  ;
 40756                                  ;   OUTPUT
 40757                                  ;       None
 40758                                  ;
 40759                                  ;   OTHER REGS USED
 40760                                  ;       None
 40761                                  ;
 40762                                  ;   HISTORY
 40763                                  ;       Created 16-Nov-1992 by JeffPar
 40764                                  ;
 40765                                  ;----------------------------------------------------------------------------
 40766                                  
 40767                                  	; 04/01/2023 - Retro DOS v4.2
 40768                                  
 40769                                  set_numlock:
 40770                                          ; 04/01/2023
 40771                                  	;push	ax
 40772 0000383C 1E                              push    ds
 40773 0000383D 29C0                            sub     ax,ax
 40774 0000383F 8ED8                            mov     ds,ax
 40775 00003841 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 40776 00003844 2E3B06[0A4B]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 40777 00003849 7507                            jne	short not_off	; no
 40778 0000384B 80261704DF                      and     byte [0417h],~20h ; 0DFh
 40779 00003850 EB0D                            jmp     short set_done
 40780                                  not_off:
 40781 00003852 2E3B06[084B]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 40782 00003857 F9                              stc
 40783 00003858 7505                            jne	short set_done	; no
 40784 0000385A 800E170420                      or      byte [0417h],20h
 40785                                  set_done:
 40786 0000385F 1F                              pop     ds
 40787                                  	; 04/01/2023
 40788                                  	;pop	ax
 40789 00003860 C3                              retn
 40790                                  
 40791                                  ; 16/04/2019 - Retro DOS v4.0
 40792                                  
 40793                                  ;----------------------------------------------------------------------------
 40794                                  ;
 40795                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 40796                                  ;
 40797                                  ;   INPUT
 40798                                  ;       CX == "organized" config.sys memory image length
 40799                                  ;    ES:SI -> "organized" config.sys memory image
 40800                                  ;       DS == CS == sysinitseg
 40801                                  ;
 40802                                  ;   OUTPUT
 40803                                  ;       Same as above; the idea is that menu_check simply transforms
 40804                                  ;       a block-structured config.sys image into a conventional image,
 40805                                  ;       based on the user's block selection and any other boot-time options
 40806                                  ;       the user may have employed...
 40807                                  ;
 40808                                  ;   OTHER REGS USED
 40809                                  ;       All
 40810                                  ;
 40811                                  ;   NOTES
 40812                                  ;       [count] and [org_count] are set to the new config.sys image length
 40813                                  ;
 40814                                  ;   HISTORY
 40815                                  ;       Created 16-Mar-1992 by JeffPar
 40816                                  ;
 40817                                  ;----------------------------------------------------------------------------
 40818                                  
 40819                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40820                                  	; (SYSINIT:4378h)
 40821                                  
 40822                                  menu_check:
 40823                                  
 40824                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 40825                                  ;   disable clean/interactive boot options
 40826                                  
 40827 00003861 51                              push    cx              ;
 40828 00003862 56                              push    si              ;
 40829 00003863 29DB                            sub     bx,bx           ; remains ZERO until first block
 40830                                  swchk_loop:                     ;
 40831 00003865 E80507                          call    get_char        ; get first char of current line
 40832 00003868 721C                            jc	short swchk_end	; hit eof
 40833 0000386A 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 40834 0000386C 7503                            jne	short swchk_next1 ;
 40835 0000386E 43                              inc     bx              ; remember that we've seen a block
 40836 0000386F EB10                            jmp     short swchk_nextline
 40837                                  swchk_next1:                    ;
 40838 00003871 3C4E                            cmp     al,CONFIG_NUMLOCK
 40839                                          ;jne	short swchk_next2
 40840                                  	; 18/03/2025 - MiniDOS 1.0
 40841 00003873 750C                    	jne	short swchk_nextline
 40842                                  
 40843 00003875 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 40844 00003877 7508                            jnz	short swchk_nextline ; before the first block
 40845 00003879 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 40846 0000387C 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 40847                                  
 40848                                  ; 18/03/2025 - MiniDOS 1.0
 40849                                  %if 0
 40850                                          jmp     short swchk_nextline
 40851                                  swchk_next2:                    ;
 40852                                          cmp     al,CONFIG_SWITCHES
 40853                                          jne	short swchk_nextline ; this line ain't it
 40854                                  swchk_scan:                     ;
 40855                                          call    get_char        ; look for /N or /F
 40856                                  swchk_scan1:                    ;
 40857                                          cmp     al,LF           ; end of line?
 40858                                          je	short swchk_nextline ; yes
 40859                                          cmp     al,'/'          ; switch-char?
 40860                                          jne	short swchk_scan ; no
 40861                                          call    get_char        ;
 40862                                          and     al,~20h ; 0DFh	; convert to upper case
 40863                                          cmp     al,[swit_n+1]	; 'N'
 40864                                          jne	short swchk_scan2 ; no
 40865                                          or      byte [bDisableUI],1
 40866                                          jmp	short swchk_scan ; continue looking for switches of interest
 40867                                  swchk_scan2:                    ;
 40868                                          cmp     al,[swit_f+1]	; 'F'
 40869                                          jne	short swchk_scan1 ; no
 40870                                          or      byte [bDisableUI],2
 40871                                          jmp     short swchk_scan ; continue looking for switches of interest
 40872                                  %endif
 40873                                  
 40874                                  swchk_nextline:                 ;
 40875 00003881 E8C306                          call    skip_opt_line   ;
 40876 00003884 EBDF                            jmp     short swchk_loop ;
 40877                                  swchk_end:                      ;
 40878 00003886 5E                              pop     si              ;
 40879 00003887 59                              pop     cx              ;
 40880                                  
 40881                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 40882                                  ;   the DisableUI flag is still clear
 40883                                  
 40884 00003888 F606[E045]01                    test    byte [bDisableUI],1
 40885 0000388D 7508                            jnz	short menu_search
 40886                                  ;
 40887                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 40888                                  ;   there is anything at all in the keyboard buffer
 40889                                  ;
 40890 0000388F E822FF                          call    kbd_read
 40891 00003892 7303                            jnc	short menu_search
 40892 00003894 E9EE01                          jmp	menu_abort
 40893                                  
 40894                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 40895                                  
 40896                                  menu_search:
 40897 00003897 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 40898 00003899 BF[2546]                        mov     di,szMenu	;
 40899 0000389C E80304                          call    find_block      ; find the MENU block
 40900 0000389F 7337                            jnc	short menu_found ;
 40901 000038A1 C606[1D46]00                    mov     byte [szBoot],0
 40902 000038A6 E90C02                          jmp	no_selection ; not found
 40903                                  
 40904                                  ;   Process the requested menu color(s)
 40905                                  
 40906                                  menu_color:
 40907 000038A9 51                      	push	cx              ;
 40908 000038AA 52                      	push	dx              ;
 40909                                  	;;mov	dx,0007h        ; default color setting
 40910                                  	; 10/09/2023
 40911                                  	;mov	dl,7 ; !*!
 40912 000038AB E89E06                  	call	get_number	; get first number
 40913 000038AE 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 40914 000038B1 88DD                    	mov	ch,bl           ; save it in CH
 40915                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 40916                                  	; (high nibble of dl is 0)
 40917                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 40918                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 40919 000038B3 88DA                    	mov	dl,bl	; 14/08/2023
 40920 000038B5 E83108                  	call	delim           ; did we hit a delimiter
 40921 000038B8 750E                    	jne	short check_color ; no, all done
 40922 000038BA E88F06                  	call	get_number	; get next number
 40923 000038BD 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 40924 000038C0 88DE                    	mov	dh,bl           ; save it in DH
 40925                                  	; 10/09/2023
 40926                                  	;and	dl,0Fh	; !**!	;
 40927 000038C2 B104                    	mov	cl,4            ;
 40928 000038C4 D2E3                    	shl	bl,cl           ;
 40929 000038C6 08DA                    	or	dl,bl           ;
 40930                                  check_color:
 40931 000038C8 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 40932 000038CA 7503                    	jne	short set_color	; no
 40933 000038CC 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 40934                                  set_color:
 40935 000038CF 8816[DB45]              	mov	[bMenuColor],dl ;
 40936 000038D3 5A                      	pop	dx              ;
 40937 000038D4 59                      	pop	cx              ;
 40938 000038D5 E9A900                  	jmp	menu_nextitem
 40939                                  
 40940                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 40941                                  ;   above is there simply to alleviate short jump problems)
 40942                                  
 40943                                  menu_found:
 40944 000038D8 C606[E545]01                    mov     byte [bDefBlock],1
 40945                                          ;mov	word [offDefBlock],0
 40946 000038DD C606[E945]FF                    mov     byte [secTimeOut],-1
 40947 000038E2 8026[E445]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 40948                                  	; 10/09/2023
 40949 000038E7 29D2                    	sub	dx,dx
 40950 000038E9 8916[E745]              	mov	[offDefBlock],dx ; 0
 40951                                  
 40952 000038ED E85706                          call    skip_opt_line   ; skip to next line
 40953                                  	; 10/09/2023
 40954                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 40955                                  
 40956                                  ;   Process the menu block now
 40957                                  
 40958                                  menu_process:
 40959 000038F0 E87A06                          call    get_char        ; get first char of current line
 40960 000038F3 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 40961 000038F5 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 40962 000038F7 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 40963 000038F9 7428                            je	short to_menu_getdefault
 40964 000038FB 3C4F                            cmp     al,CONFIG_SUBMENU
 40965 000038FD 744D                            je	short menu_item	; go process sub-menu
 40966 000038FF 3C45                            cmp     al,CONFIG_MENUITEM
 40967 00003901 7449                            je	short menu_item	; go process menu item
 40968 00003903 3C41                            cmp     al,CONFIG_MENUDEFAULT
 40969 00003905 741E                            je	short menu_default ; go process menu default
 40970 00003907 3C52                            cmp     al,CONFIG_MENUCOLOR
 40971 00003909 749E                            je	short menu_color ; go process menu color
 40972 0000390B 3C4E                            cmp     al,CONFIG_NUMLOCK
 40973 0000390D 740F                            je	short menu_numlock ;
 40974 0000390F 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 40975 00003911 746E                            je	short menu_nextitem ;
 40976 00003913 E8C307                          call    any_delim       ; allow blank lines and such
 40977 00003916 7469                            je	short menu_nextitem ;
 40978 00003918 F9                              stc                     ;
 40979 00003919 E82607                          call    print_error     ; non-MENU command!
 40980 0000391C EB63                            jmp     short menu_nextitem
 40981                                  menu_numlock:
 40982 0000391E E81BFF                          call    set_numlock
 40983 00003921 EB5E                            jmp     short menu_nextitem
 40984                                  to_menu_getdefault:
 40985 00003923 EB62                            jmp     short menu_getdefault
 40986                                  
 40987                                  ;   Save the offset of the default block name, we'll need it later
 40988                                  
 40989                                  menu_default:
 40990 00003925 8936[E745]                      mov     [offDefBlock],si; save address of default block name
 40991 00003929 803E[EA45]00                    cmp     byte [secElapsed],0
 40992 0000392E 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 40993 00003930 E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 40994 00003933 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 40995 00003935 E8FB05                          call    skip_delim      ; something is typed
 40996 00003938 7247                            jc	short menu_nextitem ;
 40997 0000393A 89DE                            mov     si,bx           ;
 40998 0000393C E80D06                          call    get_number      ; get number (of seconds for timeout)
 40999 0000393F 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 41000                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 41001 00003942 7602                            jna	short timeout_ok ; 01/08/2023
 41002 00003944 B35A                    	mov     bl,90           ;  display function can handle)
 41003                                  timeout_ok:                    ;
 41004 00003946 881E[E945]                      mov     [secTimeOut],bl ;
 41005                                  timeout_skip:
 41006 0000394A EB35                            jmp     short menu_nextitem
 41007                                  
 41008                                  ;   Verify that this is a valid menu item by searching for the named block
 41009                                  
 41010                                  menu_item:
 41011                                  	;cmp	dl,9	; 04/01/2023
 41012 0000394C 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 41013 0000394F 7330                            jae	short menu_nextitem ;
 41014 00003951 89F7                            mov     di,si           ; DS:DI -> block name to search for
 41015 00003953 E83303                          call    srch_block      ;
 41016 00003956 7406                            je	short menu_itemfound ;
 41017 00003958 F9                              stc                     ;
 41018 00003959 E8E606                          call    print_error     ; print error and pause
 41019 0000395C EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 41020                                  
 41021                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 41022                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 41023                                  ;   and CX are unmodified
 41024                                  
 41025                                  menu_itemfound:
 41026 0000395E 42                              inc     dx              ; otherwise, increment total block count
 41027 0000395F 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 41028 00003961 8887[EB45]                      mov	[abBlockType+bx],al
 41029 00003965 01DB                            add     bx,bx           ; of recorded block names and descriptions
 41030                                  
 41031                                  ;   There should be a description immediately following the block name on
 41032                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 41033                                  ;   description...
 41034                                  
 41035 00003967 89B7[F545]                      mov     [aoffBlockName+bx],si
 41036 0000396B 89B7[0946]                      mov     [aoffBlockDesc+bx],si
 41037 0000396F 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 41038 00003971 E8A905                          call    skip_token      ;
 41039 00003974 720B                            jc	short menu_nextitem ; hit eol/eof
 41040 00003976 E8BA05                          call    skip_delim      ;
 41041 00003979 7206                            jc	short menu_nextitem ; hit eol/eof
 41042 0000397B 87FB                            xchg    bx,di           ;
 41043 0000397D 89BF[0946]                      mov     [aoffBlockDesc+bx],di
 41044                                  
 41045                                  menu_nextitem:
 41046 00003981 E8C305                          call    skip_opt_line   ;
 41047 00003984 E969FF                          jmp     menu_process    ; go back for more lines
 41048                                  
 41049                                  ;   Display menu items now, after determining which one is default
 41050                                  
 41051                                  menu_getdefault:
 41052 00003987 08D2                            or      dl,dl           ; where there any valid blocks at all?
 41053 00003989 7505                            jnz	short menu_valid ; yes
 41054 0000398B 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 41055 0000398D E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 41056                                  menu_valid:
 41057 00003990 29DB                            sub     bx,bx           ;
 41058 00003992 8816[E645]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 41059 00003996 8B3E[E745]                      mov     di,[offDefBlock];
 41060 0000399A 09FF                            or      di,di           ; does a default block exist?
 41061 0000399C 741C                            jz	short menu_nodefault ; no
 41062 0000399E 43                              inc     bx              ; yes, walk name table, looking for default
 41063                                  menu_chkdefault:
 41064 0000399F 53                              push    bx              ;
 41065 000039A0 01DB                            add     bx,bx           ;
 41066 000039A2 8BB7[F545]                      mov     si,[aoffBlockName+bx]
 41067 000039A6 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 41068 000039A9 1E                              push    ds              ;
 41069 000039AA 06                              push    es              ;
 41070 000039AB 1F                              pop     ds              ;
 41071 000039AC E81A03                          call    comp_names      ; is this block the same as the default?
 41072 000039AF 1F                              pop     ds              ;
 41073 000039B0 5B                              pop     bx              ;
 41074 000039B1 7409                            je	short menu_setdefault ; yes
 41075 000039B3 43                              inc     bx              ;
 41076 000039B4 3A1E[E645]                      cmp     bl,[bMaxBlock]  ; all done searching?
 41077 000039B8 76E5                            jbe	short menu_chkdefault ; not yet
 41078                                  menu_nodefault:
 41079 000039BA B301                            mov     bl,1            ; if no default, force default to #1
 41080                                  menu_setdefault:
 41081 000039BC 881E[E545]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 41082                                  
 41083                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 41084                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 41085                                  ;   supposed to skip menu display and run with the specified default block;
 41086                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 41087                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 41088                                  ;   with no timeout)
 41089                                  
 41090 000039C0 803E[E945]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 41091 000039C5 750A                            jne	short menu_display ; no
 41092 000039C7 F606[E445]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 41093 000039CC 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 41094 000039CE E9C700                          jmp     not_topmenu	;
 41095                                  
 41096                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 41097                                  
 41098                                  menu_display:
 41099 000039D1 B40F                            mov     ah,0Fh          ; get current video mode
 41100 000039D3 CD10                            int     10h             ;
 41101 000039D5 B400                            mov     ah,00h          ; just re-select that mode
 41102 000039D7 CD10                            int     10h             ;
 41103 000039D9 06                              push    es              ;
 41104 000039DA B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 41105 000039DD 8EC0                            mov     es,ax           ; and save the current (default) video page
 41106 000039DF 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 41107 000039E3 A3[E245]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 41108 000039E6 26A06200                        mov     al,[es:0062h]   ;
 41109 000039EA A2[E145]                        mov     [bCRTPage],al   ;
 41110 000039ED A1[DC45]                        mov     ax,[bMenuPage]	; select new page for menu
 41111 000039F0 CD10                            int     10h             ;
 41112 000039F2 B80006                          mov     ax,0600h        ; clear entire screen
 41113 000039F5 8A3E[DB45]                      mov     bh,[bMenuColor] ; using this color
 41114 000039F9 29C9                            sub     cx,cx           ; upper left row/col
 41115                                          ;mov	dl,[es:CRT_Cols] 
 41116 000039FB 268A164A00                      mov	dl,[es:4Ah]
 41117 00003A00 FECA                    	dec     dl              ;
 41118                                          ;mov	dh,[es:CRT_Rows];
 41119 00003A02 268A368400                      mov	dh,[es:84h]
 41120 00003A07 08F6                    	or      dh,dh           ; # of rows valid?
 41121 00003A09 7504                            jnz	short menu_clear ; hopefully
 41122 00003A0B 8A36[DF45]                      mov     dh,[bLastRow]   ; no, use a default
 41123                                  menu_clear:
 41124 00003A0F CD10                            int     10h             ; clear the screen using the req. attribute
 41125 00003A11 07                              pop     es              ;
 41126 00003A12 8836[DF45]                      mov     [bLastRow],dh   ; save DH
 41127 00003A16 BA[BD4B]                        mov     dx,_$MenuHeader
 41128 00003A19 E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 41129                                  
 41130 00003A1C F606[E045]01                    test    byte [bDisableUI],1
 41131 00003A21 751F                            jnz     short menu_nostatus
 41132 00003A23 8A3E[DC45]                      mov     bh,[bMenuPage]  ;
 41133 00003A27 8A36[DF45]                      mov     dh,[bLastRow]   ; restore DH
 41134 00003A2B B200                            mov     dl,0            ; print the status line on row DH, col 0,
 41135 00003A2D B402                            mov     ah,02h          ; now that we can trash the cursor position
 41136 00003A2F CD10                            int     10h             ;
 41137 00003A31 BA[094C]                        mov     dx,_$StatusLine
 41138 00003A34 E87C09                          call    print           ;
 41139 00003A37 B403                            mov     ah,3            ; get cursor position
 41140 00003A39 CD10                            int     10h             ;
 41141 00003A3B 80EA02                          sub     dl,2            ;
 41142 00003A3E 8816[DE45]                      mov     [bLastCol],dl   ; save column where status char will go
 41143                                  
 41144                                  menu_nostatus:
 41145 00003A42 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 41146                                  menu_disploop:
 41147 00003A45 E8B002                          call    print_item	; print item #BL
 41148 00003A48 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 41149 00003A49 3A1E[E645]                      cmp     bl,[bMaxBlock]  ; all done?
 41150 00003A4D 76F6                            jbe	short menu_disploop ; not yet
 41151                                  
 41152                                  ;   Set cursor position to just below the menu items
 41153                                  
 41154 00003A4F B200                            mov     dl,0            ; select column
 41155 00003A51 88DE                            mov     dh,bl           ;
 41156 00003A53 80C604                          add     dh,4            ; select row below menu
 41157 00003A56 8A3E[DC45]                      mov     bh,[bMenuPage]  ;
 41158 00003A5A B402                            mov     ah,02h          ; set cursor position beneath the block list
 41159 00003A5C CD10                            int     10h             ;
 41160                                  
 41161 00003A5E BA[F64B]                        mov     dx,_$MenuPrmpt
 41162 00003A61 E84F09                          call    print           ;
 41163 00003A64 E82903                          call    select_item     ; make a selection, return # in BX
 41164 00003A67 BA[B649]                        mov     dx,crlfm	
 41165 00003A6A E84609                          call    print           ;
 41166 00003A6D FF36[E045]                      push    word [bDisableUI]
 41167 00003A71 800E[E045]01                    or      byte [bDisableUI],1
 41168 00003A76 E86704                          call    show_status     ; clear the status line now
 41169 00003A79 8F06[E045]                      pop     word [bDisableUI]
 41170                                  
 41171                                  ;   Now begins the "re-organization" process...
 41172                                  
 41173                                  menu_autoselect:
 41174 00003A7D 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 41175 00003A80 7508                            jne	short normal_boot ; no
 41176 00003A82 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 41177                                  menu_abort:
 41178 00003A85 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 41179 00003A87 E9E400                          jmp	menu_exit	;
 41180                                  
 41181                                  normal_boot:
 41182 00003A8A 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 41183 00003A8D 7509                            jne	short not_topmenu ; no
 41184 00003A8F 8B0E[5203]                      mov     cx,[count]      ; yes, start all over
 41185 00003A93 29F6                            sub     si,si           ;
 41186 00003A95 E9FFFD                          jmp     menu_search
 41187                                  
 41188                                  not_topmenu:
 41189 00003A98 80BF[EB45]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 41190 00003A9D 7510                            jne	short not_submenu
 41191 00003A9F 01DB                            add     bx,bx           ;
 41192 00003AA1 8BBF[F545]                      mov     di,[aoffBlockName+bx]
 41193 00003AA5 E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 41194 00003AA8 89FE                            mov     si,di           ;
 41195 00003AAA 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 41196 00003AAC E929FE                          jmp     menu_found
 41197                                  
 41198                                  not_submenu:
 41199 00003AAF 01DB                            add     bx,bx           ; get BX -> name of selected block
 41200 00003AB1 8B9F[F545]                      mov     bx,[aoffBlockName+bx]
 41201                                  
 41202                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 41203                                  ;   the offset relative to ES of the block name to be processed (along with
 41204                                  ;   all the "common" lines of course)
 41205                                  
 41206                                  no_selection:
 41207 00003AB5 891E[E745]                      mov     [offDefBlock],bx; save selection
 41208 00003AB9 8B0E[5203]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 41209 00003ABD 29F6                            sub     si,si           ;
 41210 00003ABF 1E                              push    ds              ;
 41211 00003AC0 8E1E[D114]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 41212 00003AC4 29FF                            sub     di,di           ;
 41213                                  
 41214                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 41215                                  ;
 41216                                  ;   Work our way through the config.sys image again, this time copying
 41217                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 41218                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 41219                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 41220                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 41221                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 41222                                  ;
 41223                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 41224                                  ;   stack we're running on, then we should check it inside copy_block
 41225                                  
 41226                                  copyblock_loop:
 41227 00003AC6 53                              push    bx              ; save selected block name
 41228 00003AC7 E82F01                          call    copy_block      ; process (named or common) block
 41229 00003ACA 5B                              pop     bx              ;
 41230 00003ACB 7232                            jc	short move_config ; hit eof
 41231                                  
 41232                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 41233                                  
 41234                                  copyblock_begin:
 41235                                  
 41236                                  ; 10/09/2023
 41237                                  %if 0
 41238                                          push    ax              ;
 41239                                          push    cx              ;
 41240                                          push    si              ;
 41241                                          push    di              ; always do "common" blocks
 41242                                          mov     di,szCommon
 41243                                          push    ds              ;
 41244                                          push    cs              ;
 41245                                          pop     ds              ;
 41246                                          call    comp_names      ;
 41247                                          pop     ds              ;
 41248                                          pop     di              ;
 41249                                          pop     si              ;
 41250                                          pop     cx              ;
 41251                                          pop     ax              ;
 41252                                          je	short copyblock_check
 41253                                  %endif
 41254                                  	; 10/09/2023
 41255 00003ACD 57                      	push	di
 41256 00003ACE BF[2A46]                	mov	di,szCommon	; always do "common" blocks
 41257 00003AD1 E81602                  	call	comp_names_x	; (comp_names_safe)
 41258 00003AD4 5F                      	pop	di
 41259 00003AD5 740F                    	je	short copyblock_check
 41260                                  
 41261 00003AD7 09DB                            or      bx,bx           ; is there a block name to check?
 41262 00003AD9 7414                            jz	short copyblock_skip ; no
 41263 00003ADB 57                              push    di              ;
 41264 00003ADC 89DF                            mov     di,bx           ; check block against given block name
 41265 00003ADE 1E                              push    ds              ;
 41266 00003ADF 06                              push    es              ;
 41267 00003AE0 1F                              pop     ds              ;
 41268 00003AE1 E8E501                          call    comp_names      ; is this the block we really want to do?
 41269 00003AE4 1F                              pop     ds              ;
 41270 00003AE5 5F                              pop     di              ;
 41271                                  copyblock_check:
 41272 00003AE6 7217                            jc	short move_config ; hit eof
 41273 00003AE8 7505                            jne	short copyblock_skip ;
 41274 00003AEA E85A04                          call    skip_opt_line   ;
 41275 00003AED EBD7                            jmp	short copyblock_loop
 41276                                  
 41277                                  copyblock_skip:                 ;
 41278 00003AEF E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 41279 00003AF2 E87804                          call    get_char        ;
 41280 00003AF5 7208                            jc	short move_config ; hit eof
 41281 00003AF7 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41282 00003AF9 3C5B                            cmp     al,CONFIG_BEGIN ;
 41283 00003AFB 74D0                            je	short copyblock_begin
 41284 00003AFD EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 41285                                  ;
 41286                                  ;   To create as little risk to the rest of SysInit as little as possible,
 41287                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 41288                                  ;   copy the new config.sys image to "confbot"
 41289                                  ;
 41290                                  move_config:
 41291 00003AFF 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 41292 00003B01 51                              push    cx              ;
 41293                                  ;
 41294                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 41295                                  ;   since the configuration name only currently exists in the "confbot" area
 41296                                  ;
 41297                                   	;mov	cx,7
 41298 00003B02 B90700                  	mov     cx,szMenu-szBoot-1
 41299 00003B05 BE[1D46]                        mov     si,szBoot	; first copy the CONFIG= part
 41300 00003B08 47                              inc     di              ; skip a byte, in case absolutely nothing
 41301                                                                  ; was copied to the workspace, because we always
 41302                                                                  ; zero the first byte of the workspace (below)
 41303                                  copy_boot: 
 41304                                  	;lods    byte ptr cs:[si];
 41305 00003B09 2E                              cs
 41306 00003B0A AC                      	lodsb
 41307 00003B0B 8805                    	mov     [di],al         ;
 41308 00003B0D 47                              inc     di              ;
 41309 00003B0E E2F9                            loop    copy_boot       ;
 41310                                  
 41311 00003B10 06                              push    es              ; then copy the configuration name
 41312                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 41313                                  	; 04/01/2023
 41314 00003B11 B179                    	mov	cl,128-7
 41315 00003B13 2E8B36[E745]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 41316 00003B18 09F6                            or      si,si           ; valid?
 41317 00003B1A 7505                            jnz	short l1	; yes
 41318 00003B1C 0E                              push    cs              ;
 41319 00003B1D 07                              pop     es              ;
 41320 00003B1E BE[2A46]                        mov     si,szCommon
 41321 00003B21 268A04                  l1:     mov     al,[es:si]      ;
 41322 00003B24 E8B205                          call    any_delim       ;
 41323 00003B27 7406                            je	short l2	;
 41324 00003B29 8805                            mov     [di],al         ;
 41325 00003B2B 46                              inc     si              ;
 41326 00003B2C 47                              inc     di              ;
 41327 00003B2D E2F2                            loop    l1              ;
 41328 00003B2F C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 41329 00003B32 07                              pop     es              ;
 41330                                  
 41331                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 41332                                  
 41333 00003B33 29FF                            sub     di,di           ;
 41334 00003B35 2E893E[CF14]                    mov     [cs:config_envlen],di
 41335 00003B3A 29F6                            sub     si,si           ;
 41336 00003B3C 59                              pop     cx              ; recover the size of "config_wrkseg"
 41337                                  
 41338 00003B3D 51                              push    cx              ;
 41339 00003B3E F3A4                            rep     movsb           ; moved!
 41340 00003B40 59                              pop     cx              ;
 41341 00003B41 8CD8                            mov     ax,ds           ;
 41342 00003B43 1F                              pop     ds              ;
 41343                                  
 41344                                  ;   Now that the config_wrkseg is available once again, we shall
 41345                                  ;   use it to create an environment. The first thing to go in will be
 41346                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 41347                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 41348                                  ;   is empty.
 41349                                  
 41350 00003B44 06                              push    es              ;
 41351 00003B45 8EC0                            mov     es,ax           ;
 41352 00003B47 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 41353 00003B48 26C606000000                    mov     byte [es:0],0	;empty the environment block
 41354 00003B4E E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 41355 00003B51 07                              pop     es
 41356                                  
 41357                                  ;   Before returning, restore the default video page setting but do NOT
 41358                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 41359                                  ;   displayed on a different page, then it's because we don't want to see
 41360                                  ;   all the device driver/TSR goop (which goes to the default page)
 41361                                  
 41362                                  menu_done:
 41363 00003B52 803E[DC45]00                    cmp     byte [bMenuPage],0
 41364 00003B57 7415                            je	short menu_exit	;
 41365 00003B59 06                              push    es              ;
 41366 00003B5A B84000                          mov     ax,40h          ;
 41367 00003B5D 8EC0                            mov     es,ax           ;
 41368 00003B5F A1[E245]                        mov     ax,[wCRTStart]  ;
 41369 00003B62 26A34E00                        mov     [es:004Eh],ax   ;
 41370 00003B66 A0[E145]                        mov     al,[bCRTPage]   ;
 41371 00003B69 26A26200                        mov     [es:0062h],al   ;
 41372 00003B6D 07                              pop     es              ;
 41373                                  menu_exit:
 41374 00003B6E 890E[5203]                      mov     [count],cx      ; set new counts
 41375 00003B72 890E[5403]                      mov     [org_count],cx  ;
 41376                                          ; 10/09/2023 (*) - Erdogan Tan
 41377                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 41378                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 41379                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 41380 00003B76 C3                      	retn
 41381                                  
 41382                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 41383                                  ;	position (then 'retn' just after it)
 41384                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 41385                                  
 41386                                  ;----------------------------------------------------------------------------
 41387                                  ;
 41388                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 41389                                  ;
 41390                                  ;   INPUT
 41391                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 41392                                  ;
 41393                                  ;   OUTPUT
 41394                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 41395                                  ;       carry set if error (eg, missing =); clear otherwise
 41396                                  ;
 41397                                  ;   OTHER REGS USED
 41398                                  ;       None
 41399                                  ;
 41400                                  ;   NOTES
 41401                                  ;       None
 41402                                  ;
 41403                                  ;   HISTORY
 41404                                  ;       Created 29-Mar-1992 by JeffPar
 41405                                  ;
 41406                                  ;----------------------------------------------------------------------------
 41407                                  
 41408                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41409                                  	; (SYSINIT:46D4h)
 41410                                  
 41411                                  copy_envvar:
 41412 00003B77 51                              push    cx              ;
 41413 00003B78 56                              push    si              ;
 41414 00003B79 1E                              push    ds              ;
 41415 00003B7A 06                              push    es              ;
 41416 00003B7B 06                              push    es              ;
 41417 00003B7C 8E06[D114]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 41418 00003B80 1F                              pop     ds                 ; DS:SI to point to envvar
 41419                                  
 41420                                  ;   Have to calculate the length of the variable name (and if we hit
 41421                                  ;   the end of the line before we hit '=', then it's curtains for this
 41422                                  ;   config.sys line)
 41423                                  ;
 41424                                  ;   The check for NULL is important because copy_envvar is also used to copy
 41425                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 41426                                  ;   menu block existed (in order to prevent the creation of an environment)
 41427                                  
 41428 00003B81 29C9                            sub     cx,cx           ;
 41429                                  copy_varlen:                    ;
 41430 00003B83 AC                              lodsb                   ;
 41431 00003B84 08C0                            or      al,al           ; NULL?
 41432                                          ;stc	; 10/09/2023 (x)
 41433 00003B86 746B                            jz	short copy_envexit ; yes, abort
 41434 00003B88 3C0D                            cmp     al,cr           ;
 41435                                          ;stc	; 10/09/2023 (x)
 41436 00003B8A 7467                            je	short copy_envexit
 41437 00003B8C 3C0A                            cmp     al,lf           ;
 41438                                          ;stc	; 10/09/2023 (x)
 41439 00003B8E 7463                            je	short copy_envexit
 41440 00003B90 41                              inc     cx              ;
 41441 00003B91 3C3D                            cmp     al,'='          ;
 41442 00003B93 75EE                            jne	short copy_varlen
 41443 00003B95 B000                            mov     al,0            ;
 41444 00003B97 8A24                            mov     ah,[si]         ; save char after '='
 41445 00003B99 29CE                            sub     si,cx           ; back up to given varname
 41446 00003B9B 49                              dec     cx              ; CX == # of bytes in varname
 41447 00003B9C 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 41448                                  copy_varsrch:
 41449 00003B9E 263805                          cmp     byte [es:di],al
 41450 00003BA1 7425                            je	short copy_envprep ; search failed, just copy var
 41451 00003BA3 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 41452 00003BA5 51                              push    cx              ;
 41453 00003BA6 56                              push    si              ;
 41454 00003BA7 F3A6                            repe    cmpsb           ;
 41455 00003BA9 5E                              pop     si              ;
 41456 00003BAA 59                              pop     cx              ;
 41457 00003BAB 7531                            jne	short copy_varnext ; no match, skip to next varname
 41458 00003BAD 26803D3D                        cmp     byte [es:di],'='
 41459 00003BB1 752B                            jne     short copy_varnext ; no match, there's more characters
 41460                                  
 41461                                  ;   Previous occurrence of variable has been found; determine the
 41462                                  ;   entire length and then destroy it
 41463                                  
 41464 00003BB3 B9FFFF                          mov     cx,-1           ;
 41465 00003BB6 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 41466 00003BB8 56                              push    si              ;
 41467 00003BB9 89FE                            mov     si,di           ;
 41468 00003BBB 89DF                            mov     di,bx           ;
 41469 00003BBD 2E8B0E[CF14]                    mov     cx,[cs:config_envlen]
 41470 00003BC2 29F1                            sub     cx,si           ; destroy variable now
 41471                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 41472                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 41473                                  
 41474 00003BC4 F3                      	rep	; 0F3h
 41475 00003BC5 26                      	es	; 26h
 41476 00003BC6 A4                      	movsb	; 0A4h
 41477                                  
 41478 00003BC7 5E                      	pop     si
 41479                                  copy_envprep:
 41480 00003BC8 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 41481 00003BCB 741D                            je	short copy_envdel ; then just exit with variable deleted
 41482 00003BCD 80FC0A                          cmp     ah,lf           ;
 41483 00003BD0 7418                            je	short copy_envdel
 41484                                          ;jmp	short copy_envloop
 41485                                  	; 04/01/2023
 41486                                  copy_envloop:                  ;
 41487 00003BD2 AC                      	lodsb                   ;
 41488 00003BD3 3C0D                    	cmp	al,cr           ;
 41489 00003BD5 7410                    	je	short copy_envdone
 41490 00003BD7 3C0A                    	cmp	al,lf           ;
 41491 00003BD9 740C                    	je	short copy_envdone
 41492 00003BDB AA                      	stosb                   ;
 41493 00003BDC EBF4                    	jmp	short copy_envloop
 41494                                  
 41495                                  copy_varnext:                   ;
 41496 00003BDE 51                              push    cx              ;
 41497 00003BDF B9FFFF                          mov     cx,-1           ;
 41498 00003BE2 F2AE                            repne   scasb           ;
 41499 00003BE4 59                              pop     cx              ;
 41500 00003BE5 EBB7                            jmp	short copy_varsrch
 41501                                  
 41502                                  	; 04/01/2023
 41503                                  ;copy_envloop:                  ;
 41504                                  ;	lodsb                   ;
 41505                                  ;	cmp	al,cr           ;
 41506                                  ;	je	short copy_envdone
 41507                                  ;	cmp	al,lf           ;
 41508                                  ;	je	short copy_envdone
 41509                                  ;	stosb                   ;
 41510                                  ;	jmp	short copy_envloop
 41511                                  
 41512                                  copy_envdone:                   ;
 41513 00003BE7 28C0                            sub     al,al           ; do SUB to clear carry as well
 41514 00003BE9 AA                              stosb                   ; always null-terminate these puppies
 41515                                  copy_envdel:                    ;
 41516 00003BEA 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 41517 00003BED 2E893E[CF14]                    mov     [cs:config_envlen],di
 41518                                  	; 10/09/2023 (x) - Erdogan Tan
 41519 00003BF2 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 41520                                  copy_envexit:                   ;
 41521 00003BF3 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 41522 00003BF4 07                              pop     es              ;
 41523 00003BF5 1F                              pop     ds              ;
 41524 00003BF6 5E                              pop     si              ;
 41525 00003BF7 59                              pop     cx              ;
 41526                                  
 41527                                  copy_done:	; 18/12/2022
 41528 00003BF8 C3                              retn
 41529                                  
 41530                                  ;----------------------------------------------------------------------------
 41531                                  ;
 41532                                  ;   copy_block:  copy the current block to the new config.sys workspace
 41533                                  ;
 41534                                  ;   INPUT
 41535                                  ;       CX == remaining bytes in "organized" config.sys memory image
 41536                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 41537                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 41538                                  ;             config.sys image) where the current block is to be copied
 41539                                  ;
 41540                                  ;   OUTPUT
 41541                                  ;       Same as above
 41542                                  ;       AL also equals the last character read from the organized image
 41543                                  ;
 41544                                  ;   OTHER REGS USED
 41545                                  ;       All
 41546                                  ;
 41547                                  ;   NOTES
 41548                                  ;       None
 41549                                  ;
 41550                                  ;   HISTORY
 41551                                  ;       Created 16-Mar-1992 by JeffPar
 41552                                  ;
 41553                                  ;----------------------------------------------------------------------------
 41554                                  
 41555                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41556                                  	; (SYSINIT:4759h)
 41557                                  
 41558                                  copy_block:
 41559 00003BF9 E87103                          call    get_char        ; check for include
 41560 00003BFC 72FA                            jc	short copy_done	;
 41561 00003BFE 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41562 00003C00 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 41563 00003C02 74F4                            je	short copy_done ;
 41564                                  
 41565 00003C04 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 41566 00003C06 88E0                            mov     al,ah           ; AL == the original line code
 41567 00003C08 753A                            jne	short copy_line	; not an "include" line
 41568                                  
 41569                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 41570                                  ;   never try to include the block again (no infinite include loops please),
 41571                                  ;   then search for the named block and call copy_block again.
 41572                                  
 41573 00003C0A 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 41574 00003C0F 57                              push    di              ;
 41575                                  
 41576 00003C10 BF[2546]                        mov     di,szMenu
 41577 00003C13 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 41578 00003C16 7426                            je	short copy_skip	;
 41579                                  
 41580 00003C18 BF[2A46]                        mov     di,szCommon
 41581 00003C1B E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 41582 00003C1E 741E                            je	short copy_skip	;
 41583                                  
 41584 00003C20 89F7                            mov     di,si           ; try to find the block
 41585 00003C22 E86400                          call    srch_block      ;
 41586 00003C25 89FA                            mov     dx,di           ;
 41587                                  	; 10/09/2023
 41588                                  	;pop    di              ;
 41589 00003C27 7514                            jne	short copy_error ; no such block
 41590 00003C29 5F                      	pop	di  ; 10/09/2023
 41591 00003C2A 51                              push    cx              ;
 41592 00003C2B 89D9                            mov     cx,bx           ;
 41593 00003C2D 56                              push    si              ;
 41594 00003C2E 4A                              dec     dx              ;
 41595 00003C2F 89D6                            mov     si,dx           ;
 41596 00003C31 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 41597 00003C34 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 41598 00003C37 5E                              pop     si              ;
 41599 00003C38 59                              pop     cx              ;
 41600 00003C39 28C0                            sub     al,al           ; force skip_opt_line to skip...
 41601 00003C3B EB2B                            jmp     short copy_nextline
 41602                                  
 41603                                  copy_error:
 41604                                  	; 10/09/2023
 41605 00003C3D F8                      	clc
 41606                                  copy_skip:
 41607 00003C3E 5F                              pop     di
 41608                                  ;copy_error:
 41609                                  	; 10/09/2023 (cf=0)
 41610                                  	;clc                    ;
 41611 00003C3F E80004                          call    print_error     ; note that carry is clear, no pause
 41612 00003C42 EB24                            jmp     short copy_nextline
 41613                                  
 41614                                  ;   Copy the line at ES:SI to the current location at DS:DI
 41615                                  
 41616                                  copy_line:
 41617 00003C44 8805                            mov     [di],al         ;
 41618 00003C46 47                              inc     di              ;
 41619 00003C47 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 41620 00003C49 721D                            jb	short copy_nextline ; no
 41621 00003C4B 2E803E[D414]00                  cmp     byte [cs:config_multi],0
 41622 00003C51 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 41623 00003C53 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 41624 00003C56 891D                            mov     [di],bx         ; stash it immediately following the line code
 41625 00003C58 47                              inc     di              ;
 41626 00003C59 47                              inc     di              ;
 41627 00003C5A EB08                            jmp     short copy_next ;
 41628                                  copy_loop:                      ;
 41629 00003C5C E80E03                          call    get_char        ;
 41630 00003C5F 7297                            jc	short copy_done ; end of file
 41631 00003C61 8805                            mov     [di],al         ;
 41632 00003C63 47                              inc     di              ;
 41633                                  copy_next:
 41634 00003C64 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 41635 00003C66 75F4                            jne	short copy_loop	; nope
 41636                                  
 41637                                  copy_nextline:
 41638 00003C68 E8DC02                          call    skip_opt_line   ;
 41639 00003C6B EB8C                            jmp     short copy_block
 41640                                  
 41641                                  	; 18/12/2022
 41642                                  ;copy_done:
 41643                                          ;retn
 41644                                  
 41645                                  ;----------------------------------------------------------------------------
 41646                                  ;
 41647                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 41648                                  ;
 41649                                  ;   INPUT
 41650                                  ;    ES:SI -> some line in the config.sys memory image
 41651                                  ;
 41652                                  ;   OUTPUT
 41653                                  ;       BX == line # (relative to 1)
 41654                                  ;
 41655                                  ;   OTHER REGS USED
 41656                                  ;       DX
 41657                                  ;
 41658                                  ;   NOTES
 41659                                  ;       None
 41660                                  ;
 41661                                  ;   HISTORY
 41662                                  ;       Created 16-Mar-1992 by JeffPar
 41663                                  ;
 41664                                  ;----------------------------------------------------------------------------
 41665                                  
 41666                                  get_linenum:
 41667 00003C6D 50                              push    ax              ;
 41668 00003C6E 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 41669 00003C70 51                              push    cx              ;
 41670 00003C71 89F2                            mov     dx,si           ; DX == the offset we're looking for
 41671 00003C73 56                              push    si              ;
 41672 00003C74 2E8B0E[5203]                    mov     cx,[cs:count]   ;
 41673 00003C79 29F6                            sub     si,si           ; prepare to scan entire file
 41674                                  get_linenum_loop:               ;
 41675 00003C7B E8C402                          call    skip_line       ;
 41676 00003C7E 7205                            jc	short get_linenum_done
 41677 00003C80 43                              inc     bx              ;
 41678 00003C81 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 41679 00003C83 72F6                            jb	short get_linenum_loop ; no
 41680                                  get_linenum_done:               ;
 41681 00003C85 5E                              pop     si              ;
 41682 00003C86 59                              pop     cx              ;
 41683 00003C87 58                              pop     ax              ;
 41684 00003C88 C3                              retn
 41685                                  
 41686                                  ;----------------------------------------------------------------------------
 41687                                  ;
 41688                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 41689                                  ;
 41690                                  ;   INPUT
 41691                                  ;       ES -> config.sys image
 41692                                  ;    ES:DI -> block name to find
 41693                                  ;
 41694                                  ;   OUTPUT
 41695                                  ;       ZF flag set, if found
 41696                                  ;    ES:DI -> just past the name in the block heading, if found
 41697                                  ;       BX == # bytes remaining from that point, if found
 41698                                  ;
 41699                                  ;   OTHER REGS USED
 41700                                  ;       None
 41701                                  ;
 41702                                  ;   NOTES
 41703                                  ;       This differs from "find_block" in that it searches the ENTIRE
 41704                                  ;       config.sys image, not merely the remaining portion, and that it
 41705                                  ;       takes a pointer to block name that is *elsewhere* in the image
 41706                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 41707                                  ;
 41708                                  ;   HISTORY
 41709                                  ;       Created 16-Mar-1992 by JeffPar
 41710                                  ;
 41711                                  ;----------------------------------------------------------------------------
 41712                                  
 41713                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 41714 00003C89 50                              push    ax              ;
 41715 00003C8A 51                              push    cx              ;
 41716 00003C8B 2E8B0E[5203]                    mov     cx,[cs:count]   ;
 41717 00003C90 56                              push    si              ;
 41718 00003C91 29F6                            sub     si,si           ;
 41719 00003C93 1E                              push    ds              ;
 41720 00003C94 06                              push    es              ;
 41721 00003C95 1F                              pop     ds              ;
 41722 00003C96 E80900                          call    find_block      ;
 41723 00003C99 89F7                            mov     di,si           ;
 41724 00003C9B 89CB                            mov     bx,cx           ;
 41725 00003C9D 1F                              pop     ds              ;
 41726 00003C9E 5E                              pop     si              ;
 41727 00003C9F 59                              pop     cx              ;
 41728 00003CA0 58                              pop     ax              ;
 41729                                  find_exit: ; 16/04/2019
 41730 00003CA1 C3                              retn			;
 41731                                  
 41732                                  ;----------------------------------------------------------------------------
 41733                                  ;
 41734                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 41735                                  ;
 41736                                  ;   INPUT
 41737                                  ;    DS:DI -> block name to find
 41738                                  ;    ES:SI -> remainder of config.sys image
 41739                                  ;       CX == remaining size of config.sys image
 41740                                  ;
 41741                                  ;   OUTPUT
 41742                                  ;       ZF flag set, if found (also, CF set if EOF)
 41743                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 41744                                  ;       CX == # bytes remaining from that point
 41745                                  ;
 41746                                  ;   OTHER REGS USED
 41747                                  ;       AX
 41748                                  ;
 41749                                  ;   NOTES
 41750                                  ;       This differs from "srch_block" in that it searches only the
 41751                                  ;       remaining portion of the config.sys image and leaves SI and CX
 41752                                  ;       pointing to where the search left off, and that it takes a pointer
 41753                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 41754                                  ;
 41755                                  ;   HISTORY
 41756                                  ;       Created 16-Mar-1992 by JeffPar
 41757                                  ;
 41758                                  ;----------------------------------------------------------------------------
 41759                                  
 41760                                  find_block:
 41761 00003CA2 E8C802                          call    get_char        ; get line code
 41762 00003CA5 72FA                            jc	short find_exit	; end of file
 41763 00003CA7 247F                            and     al,~CONFIG_OPTION_QUERY
 41764 00003CA9 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 41765 00003CAB 740C                            je	short check_line ; no
 41766 00003CAD 3C4A                            cmp     al,CONFIG_INCLUDE
 41767 00003CAF 7513                            jne	short next_line	;
 41768 00003CB1 2E800E[D414]01                  or	byte [cs:config_multi],1
 41769 00003CB7 EB0B                            jmp     short next_line ;
 41770                                  check_line:
 41771 00003CB9 2E800E[D414]01                  or      byte [cs:config_multi],1
 41772 00003CBF E80700                          call    comp_names      ; compare block names
 41773 00003CC2 76DD                            jbe	short find_exit	; end of file, or names matched
 41774                                  next_line:
 41775 00003CC4 E88002                          call    skip_opt_line   ; no, so skip to next line
 41776 00003CC7 EBD9                            jmp	short find_block  ;
 41777                                  ;find_exit:
 41778                                  ;	retn
 41779                                  
 41780                                  ;----------------------------------------------------------------------------
 41781                                  ;
 41782                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 41783                                  ;
 41784                                  ;   INPUT
 41785                                  ;    DS:DI -> keyword to compare
 41786                                  ;    ES:SI -> position in config.sys
 41787                                  ;       CX == remaining bytes in config.sys
 41788                                  ;
 41789                                  ;   OUTPUT
 41790                                  ;       ZF flag set, if match (also, CF set if EOF)
 41791                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 41792                                  ;       CX == # bytes remaining from that point
 41793                                  ;
 41794                                  ;   OTHER REGS USED
 41795                                  ;       AX
 41796                                  ;
 41797                                  ;   NOTES
 41798                                  ;       None
 41799                                  ;
 41800                                  ;   HISTORY
 41801                                  ;       Created 16-Mar-1992 by JeffPar
 41802                                  ;
 41803                                  ;----------------------------------------------------------------------------
 41804                                  
 41805                                  comp_names:
 41806 00003CC9 57                              push    di              ;
 41807                                  comp_loop:                      ;
 41808 00003CCA E8A002                          call    get_char        ;
 41809 00003CCD 7210                            jc	short comp_exit	;
 41810 00003CCF E80704                          call    any_delim       ; is next character a delimiter?
 41811 00003CD2 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 41812 00003CD4 740B                            je	short comp_almost ; yes, it *could* be a match
 41813 00003CD6 47                              inc     di              ;
 41814 00003CD7 25DFDF                          and     ax,~2020h ; 0DFDFh 
 41815                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 41816 00003CDA 38E0                            cmp     al,ah           ; match?
 41817 00003CDC 74EC                            je	short comp_loop ; yes, keep looking at the characters
 41818 00003CDE F8                              clc                     ; prevent erroneous eof indication: clear carry
 41819                                  comp_exit:                      ;
 41820 00003CDF 5F                              pop     di              ;
 41821 00003CE0 C3                              retn			;
 41822                                  comp_almost:                    ;
 41823 00003CE1 86E0                            xchg    al,ah           ; we don't know for sure if it's a match
 41824 00003CE3 E8F303                          call    any_delim       ; until we verify that the second string has
 41825 00003CE6 86E0                            xchg    al,ah           ; been exhausted also...
 41826 00003CE8 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 41827                                  
 41828                                  ;----------------------------------------------------------------------------
 41829                                  
 41830                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 41831                                  comp_names_x:
 41832                                  	;
 41833                                  comp_names_safe:
 41834 00003CEA 50                              push    ax
 41835 00003CEB 51                              push    cx
 41836 00003CEC 56                              push	si
 41837 00003CED 1E                              push    ds
 41838 00003CEE 0E                              push    cs
 41839 00003CEF 1F                              pop     ds
 41840 00003CF0 E8D6FF                          call    comp_names
 41841 00003CF3 1F                              pop     ds
 41842 00003CF4 5E                      	pop	si
 41843 00003CF5 59                              pop     cx
 41844 00003CF6 58                              pop     ax
 41845 00003CF7 C3                              retn
 41846                                  
 41847                                  ;----------------------------------------------------------------------------
 41848                                  ;
 41849                                  ;   print_item:  display menu item #BL
 41850                                  ;
 41851                                  ;   INPUT
 41852                                  ;       BL == menu item # to display
 41853                                  ;
 41854                                  ;   OUTPUT
 41855                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 41856                                  ;
 41857                                  ;   OTHER REGS USED
 41858                                  ;       None
 41859                                  ;
 41860                                  ;   NOTES
 41861                                  ;       This function saves/restores the current cursor position, so you
 41862                                  ;       needn't worry about it.
 41863                                  ;
 41864                                  ;   HISTORY
 41865                                  ;       Created 16-Mar-1992 by JeffPar
 41866                                  ;
 41867                                  ;----------------------------------------------------------------------------
 41868                                  
 41869                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41870                                  	; (SYSINIT:485Ah)
 41871                                  
 41872                                  print_item:		; prints menu item #BL (1 to N)
 41873 00003CF8 50                              push    ax              ;
 41874 00003CF9 53                              push    bx              ;
 41875 00003CFA 51                              push    cx              ;
 41876 00003CFB 52                              push    dx              ;
 41877 00003CFC 56                              push    si              ;
 41878 00003CFD B403                            mov     ah,03h          ; get cursor position
 41879 00003CFF 8A3E[DC45]                      mov     bh,[bMenuPage]  ; always page zero
 41880 00003D03 CD10                            int     10h             ; DH/DL = row/column
 41881 00003D05 52                              push    dx              ; save it
 41882 00003D06 B402                            mov     ah,02h          ; set cursor position
 41883 00003D08 88DE                            mov     dh,bl           ;
 41884 00003D0A 80C603                          add     dh,3            ;
 41885 00003D0D B205                            mov     dl,5            ;
 41886 00003D0F CD10                            int     10h             ; set cursor position for correct row/col
 41887 00003D11 88D8                            mov     al,bl           ;
 41888 00003D13 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 41889 00003D15 8A26[DB45]                      mov     ah,[bMenuColor] ; normal attribute
 41890 00003D19 3A1E[E545]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 41891 00003D1D 7510                            jne	short print_other ; no
 41892 00003D1F 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 41893 00003D22 88E5                            mov     ch,ah           ;
 41894 00003D24 B104                            mov     cl,4            ;
 41895 00003D26 D2C5                            rol     ch,cl           ;
 41896 00003D28 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 41897 00003D2A 7503                            jne	short print_other ; no
 41898 00003D2C 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 41899                                  print_other:                    ;
 41900 00003D2F B700                            mov     bh,0            ;
 41901 00003D31 01DB                            add     bx,bx           ;
 41902 00003D33 8BBF[0946]                      mov     di,[aoffBlockDesc+bx]
 41903 00003D37 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 41904 00003D39 8A3E[DC45]                      mov     bh,[bMenuPage]  ; get correct video page #
 41905 00003D3D B409                            mov     ah,09h          ; write char/attr
 41906 00003D3F B90100                          mov     cx,1            ;
 41907 00003D42 CD10                            int     10h             ;
 41908 00003D44 FEC2                            inc     dl              ; increment column
 41909 00003D46 B402                            mov     ah,02h          ;
 41910 00003D48 CD10                            int     10h             ;
 41911                                          ;mov	ax,0900h+'.'    ;
 41912 00003D4A B82E09                          mov	ax,092Eh
 41913 00003D4D CD10                    	int     10h             ; display '.'
 41914 00003D4F FEC2                            inc     dl              ; increment column
 41915 00003D51 B402                            mov     ah,02h          ;
 41916 00003D53 CD10                            int     10h             ;
 41917                                          ;mov	ax,0900h+' '    ;
 41918 00003D55 B82009                          mov	ax,0920h
 41919 00003D58 CD10                    	int     10h             ; display ' '
 41920 00003D5A FEC2                            inc     dl              ; increment column
 41921 00003D5C B402                            mov     ah,02h          ;
 41922 00003D5E CD10                            int     10h             ;
 41923 00003D60 06                              push    es              ;
 41924                                  print_loop:                     ;
 41925 00003D61 268A05                          mov     al,[es:di]	; get a character of the description
 41926 00003D64 47                              inc     di              ;
 41927 00003D65 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 41928 00003D67 7502                            jne	short print_nontab ;
 41929 00003D69 B020                            mov     al,' '          ;
 41930                                  print_nontab:                   ;
 41931 00003D6B 3C20                            cmp     al,' '          ;
 41932 00003D6D 7215                            jb	short print_done ; stop at the 1st character < space
 41933 00003D6F 3C24                            cmp     al,'$'          ;
 41934 00003D71 7411                            je	short print_done ; also stop on $
 41935 00003D73 B409                            mov     ah,09h          ; display function #
 41936 00003D75 CD10                            int     10h             ;
 41937 00003D77 FEC2                            inc     dl              ; increment column
 41938 00003D79 80FA4E                          cmp     dl,78           ; far enough?
 41939 00003D7C 7306                            jae	short print_done ; yes
 41940 00003D7E B402                            mov     ah,02h          ;
 41941 00003D80 CD10                            int     10h             ;
 41942 00003D82 EBDD                            jmp	short  print_loop
 41943                                  print_done:                     ;
 41944 00003D84 07                              pop     es              ;
 41945 00003D85 5A                              pop     dx              ;
 41946 00003D86 B402                            mov     ah,02h          ;
 41947 00003D88 CD10                            int     10h             ; restore previous row/col
 41948 00003D8A 5E                              pop     si              ;
 41949 00003D8B 5A                              pop     dx              ;
 41950 00003D8C 59                              pop     cx              ;
 41951 00003D8D 5B                              pop     bx              ;
 41952 00003D8E 58                              pop     ax              ;
 41953 00003D8F C3                              retn			;
 41954                                  
 41955                                  ;----------------------------------------------------------------------------
 41956                                  ;
 41957                                  ;   select_item:  wait for user to select menu item, with time-out
 41958                                  ;
 41959                                  ;   INPUT
 41960                                  ;       None
 41961                                  ;
 41962                                  ;   OUTPUT
 41963                                  ;       BX == menu item # (1-N), or -1 for clean boot
 41964                                  ;       Selected menu item highlighted
 41965                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 41966                                  ;
 41967                                  ;   OTHER REGS USED
 41968                                  ;       None
 41969                                  ;
 41970                                  ;   NOTES
 41971                                  ;       None
 41972                                  ;
 41973                                  ;   HISTORY
 41974                                  ;       Created 16-Mar-1992 by JeffPar
 41975                                  ;
 41976                                  ;----------------------------------------------------------------------------
 41977                                  
 41978                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 41979 00003D90 8A1E[E545]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 41980 00003D94 88D8                            mov     al,bl           ;
 41981 00003D96 E83701                          call    disp_num        ;
 41982 00003D99 E84401                          call    show_status     ; display current interactive status
 41983 00003D9C 803E[E945]FF                    cmp     byte [secTimeOut],-1
 41984 00003DA1 7452                            je	short input_key	; no time-out, just go to input
 41985 00003DA3 B42C                            mov     ah,GET_TIME ; 2Ch
 41986 00003DA5 CD21                            int     21h             ;
 41987 00003DA7 88F7                            mov     bh,dh           ; BH = initial # of seconds
 41988                                  check_time:
 41989 00003DA9 A0[E945]                        mov     al,[secTimeOut] ;
 41990 00003DAC 2A06[EA45]                      sub     al,[secElapsed] ;
 41991 00003DB0 730D                            jae	short show_time	;
 41992 00003DB2 800E[E445]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 41993 00003DB7 C606[EA45]00                    mov     byte [secElapsed],0
 41994 00003DBC E9F600                          jmp	select_done	; time's up!
 41995                                  show_time:
 41996 00003DBF 53                              push    bx              ;
 41997 00003DC0 88C3                            mov     bl,al           ; save # in BL
 41998 00003DC2 8A3E[DC45]                      mov     bh,[bMenuPage]  ;
 41999 00003DC6 B403                            mov     ah,03h          ; get cursor position
 42000 00003DC8 CD10                            int     10h             ;
 42001 00003DCA 52                              push    dx              ;
 42002 00003DCB 80C208                  	add	dl,8		; move cursor to the right
 42003 00003DCE B402                            mov     ah,02h          ; set cursor position
 42004 00003DD0 CD10                            int     10h             ;
 42005 00003DD2 BA[6D4C]                        mov     dx,_$TimeOut
 42006 00003DD5 E8DB05                          call    print           ; print the "Time remaining: " prompt
 42007 00003DD8 88D8                            mov     al,bl           ; recover # from BL
 42008 00003DDA 98                              cbw                     ; this works because AL is always <= 90
 42009 00003DDB B10A                            mov     cl,10           ;
 42010 00003DDD F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 42011 00003DDF 88E1                            mov     cl,ah           ;
 42012 00003DE1 0430                            add     al,'0'          ;
 42013 00003DE3 B40E                            mov     ah,0Eh          ;
 42014 00003DE5 CD10                            int     10h             ; write TTY tens digit
 42015 00003DE7 88C8                            mov     al,cl           ;
 42016 00003DE9 0430                            add     al,'0'          ;
 42017 00003DEB B40E                            mov     ah,0Eh          ;
 42018 00003DED CD10                            int     10h             ; write TTY ones digit
 42019 00003DEF 5A                              pop     dx
 42020 00003DF0 B402                            mov     ah,02h          ; set cursor position back to where it was
 42021 00003DF2 CD10                            int     10h             ;
 42022 00003DF4 5B                              pop     bx              ;
 42023                                  input_key:
 42024 00003DF5 B406                            mov     ah,RAW_CON_IO ; 6
 42025 00003DF7 B2FF                            mov     dl,0FFh         ; input request
 42026 00003DF9 CD21                            int     21h             ;
 42027 00003DFB 751F                            jnz	short got_key	;
 42028 00003DFD 803E[E945]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 42029 00003E02 74F1                            je	short input_key	; no, just go back to input
 42030 00003E04 B42C                            mov     ah,GET_TIME     ;
 42031 00003E06 CD21                            int     21h             ; DH = seconds
 42032 00003E08 88F4                            mov     ah,dh           ;
 42033 00003E0A 28FE                            sub     dh,bh           ; should generally be zero or one
 42034 00003E0C 88E7                            mov     bh,ah           ;
 42035 00003E0E 7302                            jnc	short got_time	;
 42036 00003E10 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 42037                                  got_time:
 42038 00003E12 08F6                            or      dh,dh           ; any change?
 42039 00003E14 74DF                            jz	short input_key	; no
 42040 00003E16 0036[EA45]                      add     [secElapsed],dh ;
 42041 00003E1A EB8D                            jmp	short check_time ;
 42042                                  got_key:
 42043 00003E1C 50                              push    ax              ;
 42044 00003E1D B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 42045 00003E20 8706[E945]                      xchg    [secTimeOut],ax
 42046 00003E24 3CFF                            cmp     al,-1           ; was time-out already disabled?
 42047 00003E26 740E                            je	short timeout_disabled ; yes
 42048 00003E28 53                              push    bx              ; let's disable # seconds display
 42049 00003E29 B8200A                          mov     ax,0A20h        ; write multiple spaces
 42050 00003E2C 8B1E[DB45]                      mov     bx,[bMenuColor]
 42051 00003E30 B95000                          mov     cx,80           ; 80 of them, to be safe
 42052 00003E33 CD10                            int     10h             ; to completely obliterate # seconds display
 42053 00003E35 5B                              pop     bx   		;
 42054                                  
 42055                                  timeout_disabled:
 42056 00003E36 58                              pop     ax              ;
 42057 00003E37 08C0                            or      al,al           ; extended key pressed?
 42058 00003E39 755A                            jnz	short normal_key ; no
 42059 00003E3B CD21                            int     21h             ; get the next part of the key then
 42060 00003E3D 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 42061                                  
 42062 00003E3F 3C48                            cmp     al,48h          ; up arrow?
 42063 00003E41 7510                            jne	short not_up	; no
 42064 00003E43 80FB01                          cmp     bl,1            ; are we as up as up can get?
 42065 00003E46 76AD                            jbe	short input_key	; yes, ignore it
 42066 00003E48 FE0E[E545]                      dec     byte [bDefBlock] ;
 42067 00003E4C E8A9FE                          call    print_item      ; re-print the current item
 42068 00003E4F FECB                            dec     bl              ; and then print the new current item
 42069 00003E51 EB12                            jmp     short print1
 42070                                  not_up:
 42071 00003E53 3C50                            cmp     al,50h          ; down arrow?
 42072 00003E55 7518                            jne	short not_down	; no
 42073 00003E57 3A1E[E645]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 42074 00003E5B 7310                            jae	short to_input_key ; yes, ignore it
 42075 00003E5D FE06[E545]                      inc     byte [bDefBlock] ;
 42076 00003E61 E894FE                          call    print_item      ; re-print the current item
 42077 00003E64 43                              inc     bx              ; and then print the new current item
 42078                                  print1: 
 42079 00003E65 88D8                    	mov     al,bl           ;
 42080                                  print2: 
 42081 00003E67 E88EFE                  	call    print_item      ;
 42082 00003E6A E86300                          call    disp_num        ;
 42083                                  to_input_key:
 42084 00003E6D EB86                            jmp	short input_key ; 10/09/2023
 42085                                  not_down:
 42086 00003E6F F606[E045]01                    test    byte [bDisableUI],1
 42087 00003E74 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 42088 00003E76 3C42                            cmp     al,42h          ; F8 function key?
 42089 00003E78 750B                            jne	short not_f8	; no
 42090 00003E7A 8036[E445]01                    xor     byte [bQueryOpt],1
 42091 00003E7F E85E00                          call    show_status     ;
 42092 00003E82 E970FF                          jmp     input_key	;
 42093                                  not_f8:
 42094 00003E85 3C3F                            cmp     al,3Fh          ; F5 function key?
 42095 00003E87 75E4                            jne	short to_input_key ; no
 42096                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42097                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 42098                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 42099 00003E89 800E[E445]04            	or	byte [bQueryOpt],4 ; no more queries
 42100 00003E8E BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 42101 00003E91 B020                            mov     al,' '          ; don't want to display anything really;
 42102 00003E93 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 42103                                  
 42104                                  normal_key:
 42105 00003E95 3C0D                            cmp     al,0Dh          ; Enter?
 42106 00003E97 741C                            je	short select_done ; yes
 42107 00003E99 3C08                            cmp     al,08h          ; backspace?
 42108 00003E9B 7504                            jne	short not_backspace ; no
 42109 00003E9D BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 42110 00003EA0 C3                              retn			;
 42111                                  not_backspace:
 42112 00003EA1 2C30                            sub     al,'0'          ; is greater than '0'?
 42113 00003EA3 76C8                            jbe	short to_input_key ; no
 42114 00003EA5 3A06[E645]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 42115 00003EA9 77C2                            ja	short to_input_key ; no
 42116 00003EAB A2[E545]                        mov	[bDefBlock],al  ;
 42117 00003EAE E847FE                          call    print_item      ; redisplay the current selection
 42118 00003EB1 88C3                            mov     bl,al           ; set new selection
 42119 00003EB3 EBB2                            jmp	short print2
 42120                                  
 42121                                  select_done:
 42122 00003EB5 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 42123 00003EB7 88D8                            mov     al,bl           ;
 42124 00003EB9 0430                            add     al,'0'          ; convert it into a digit, then display it
 42125                                  
 42126                                  	; fall into disp_input
 42127                                  
 42128                                  ; 16/04/2019 - Retro DOS v4.0
 42129                                  
 42130                                  ;----------------------------------------------------------------------------
 42131                                  ;
 42132                                  ;   disp_input:  display a single character + cr/lf
 42133                                  ;
 42134                                  ;   INPUT
 42135                                  ;       AL == character to display
 42136                                  ;
 42137                                  ;   OUTPUT
 42138                                  ;       None
 42139                                  ;
 42140                                  ;   OTHER REGS USED
 42141                                  ;       None
 42142                                  ;
 42143                                  ;   NOTES
 42144                                  ;       This function is used not only for the menu input selection but
 42145                                  ;       also for the interactive line prompting (the y/n/a thing).
 42146                                  ;
 42147                                  ;   HISTORY
 42148                                  ;       Created 16-Mar-1992 by JeffPar
 42149                                  ;
 42150                                  ;----------------------------------------------------------------------------
 42151                                  
 42152                                  
 42153                                  disp_input:
 42154 00003EBB 50                      	push	ax
 42155                                  	;cmp	al,' '
 42156                                  	;jae	short disp_ok
 42157                                  	;mov	al,' '
 42158                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 42159 00003EBC B220                    	mov	dl,' ' ; 20h
 42160 00003EBE 38D0                    	cmp	al,dl
 42161 00003EC0 7602                    	jna	short disp_input_ok
 42162                                  disp_ok:
 42163 00003EC2 88C2                    	mov	dl,al
 42164                                  disp_input_ok:
 42165 00003EC4 B402                    	mov	ah,STD_CON_OUTPUT ; 2
 42166 00003EC6 CD21                    	int	21h
 42167 00003EC8 BA[B649]                	mov	dx,crlfm
 42168 00003ECB E8E504                  	call	print
 42169 00003ECE 58                      	pop	ax
 42170 00003ECF C3                      	retn
 42171                                  
 42172                                  ;----------------------------------------------------------------------------
 42173                                  
 42174                                  disp_num:
 42175 00003ED0 53                              push    bx
 42176 00003ED1 0430                            add     al,'0'
 42177 00003ED3 B40A                            mov     ah,0Ah
 42178 00003ED5 8B1E[DB45]                      mov     bx,[bMenuColor]
 42179 00003ED9 B90100                          mov     cx,1
 42180 00003EDC CD10                            int     10h
 42181 00003EDE 5B                              pop     bx
 42182 00003EDF C3                              retn
 42183                                  
 42184                                  ;----------------------------------------------------------------------------
 42185                                  ;
 42186                                  ;   show_status:  display current interactive mode setting (on/off/none)
 42187                                  ;
 42188                                  ;   INPUT
 42189                                  ;       None
 42190                                  ;
 42191                                  ;   OUTPUT
 42192                                  ;       None
 42193                                  ;
 42194                                  ;   OTHER REGS USED
 42195                                  ;       None
 42196                                  ;
 42197                                  ;   NOTES
 42198                                  ;       None
 42199                                  ;
 42200                                  ;   HISTORY
 42201                                  ;       Created 16-Mar-1992 by JeffPar
 42202                                  ;
 42203                                  ;----------------------------------------------------------------------------
 42204                                  
 42205                                  show_status:
 42206 00003EE0 53                              push    bx              ; BL = video page #
 42207 00003EE1 8B1E[DB45]                      mov     bx,[bMenuColor]
 42208 00003EE5 B403                            mov     ah,03h          ; get cursor position
 42209 00003EE7 CD10                            int     10h             ;
 42210 00003EE9 52                              push    dx              ; save it
 42211 00003EEA B402                            mov     ah,02h          ; set cursor position
 42212 00003EEC 8B16[DE45]                      mov     dx,[bLastCol]   ; set correct row/col
 42213 00003EF0 F606[E045]01                    test    byte [bDisableUI],1
 42214 00003EF5 740C                            jz	short show_onoff ; just show on/off
 42215 00003EF7 B200                            mov     dl,0            ;
 42216 00003EF9 CD10                            int     10h             ;
 42217 00003EFB B8200A                          mov     ax,0A20h        ; write multiple spaces
 42218 00003EFE B95000                          mov     cx,80           ; 80 of them, to be exact
 42219                                  	; 10/09/2023
 42220                                  	;int	10h             ; to obliterate the status line
 42221 00003F01 EB11                            jmp     short show_done ;
 42222                                  show_onoff: 
 42223 00003F03 CD10                            int     10h
 42224                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 42225                                  		; AL = character, BH = display page - alpha mode
 42226                                  		; BL = color of character (graphics mode, PCjr only)
 42227                                  		; CX = number of times to write character
 42228                                  
 42229 00003F05 A0[694C]                        mov     al,[_$NO]	; assume OFF
 42230 00003F08 803E[E445]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 42231 00003F0D 7503                            jne	short show_noton ; no
 42232 00003F0F A0[654C]                        mov     al,[_$YES]	; yes
 42233                                  show_noton:                     ;
 42234 00003F12 B40E                            mov     ah,0Eh          ; write TTY
 42235                                  show_done:	; 10/09/2023
 42236 00003F14 CD10                            int     10h             ;
 42237                                  ;show_done:                     ;
 42238 00003F16 5A                              pop     dx              ;
 42239 00003F17 B402                            mov     ah,02h          ;
 42240 00003F19 CD10                            int     10h             ; restore original cursor position
 42241 00003F1B 5B                              pop     bx              ;
 42242 00003F1C C3                              retn			;
 42243                                  
 42244                                  ; 16/04/2019 - Retro DOS v4.0
 42245                                  
 42246                                  ;----------------------------------------------------------------------------
 42247                                  ;
 42248                                  ;   skip_token: advances ES:SI/CX past the current token
 42249                                  ;
 42250                                  ;   INPUT
 42251                                  ;    ES:SI -> position in config.sys
 42252                                  ;       CX == remaining bytes in config.sys
 42253                                  ;
 42254                                  ;   OUTPUT
 42255                                  ;       CF set if EOL/EOF hit
 42256                                  ;       AL == 1st char of delimiter
 42257                                  ;    ES:SI -> just past the delimiter
 42258                                  ;       CX == # bytes remaining from that point
 42259                                  ;
 42260                                  ;   OTHER REGS USED
 42261                                  ;       AX
 42262                                  ;
 42263                                  ;   NOTES
 42264                                  ;       None
 42265                                  ;
 42266                                  ;   HISTORY
 42267                                  ;       Created 16-Mar-1992 by JeffPar
 42268                                  ;
 42269                                  ;----------------------------------------------------------------------------
 42270                                  
 42271                                  skip_token:
 42272 00003F1D E84D00                          call    get_char
 42273 00003F20 7210                            jc	short skip_token_done
 42274 00003F22 E8B401                          call    any_delim
 42275 00003F25 75F6                            jne	short skip_token
 42276                                  skip_check_eol:
 42277 00003F27 3C0D                            cmp     al,cr ; 0Dh
 42278 00003F29 7406                            je	short skip_token_eol
 42279 00003F2B 3C0A                            cmp     al,lf ; 0Ah
 42280 00003F2D 7402                            je	short skip_token_eol
 42281 00003F2F F8                              clc
 42282                                          ;jmp	short skip_token_done
 42283 00003F30 C3                      	retn
 42284                                  skip_token_eol:
 42285 00003F31 F9                              stc
 42286                                  skip_token_done:
 42287 00003F32 C3                              retn
 42288                                  
 42289                                  ;----------------------------------------------------------------------------
 42290                                  ;
 42291                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 42292                                  ;
 42293                                  ;   INPUT
 42294                                  ;    ES:SI -> position in config.sys
 42295                                  ;       CX == remaining bytes in config.sys
 42296                                  ;
 42297                                  ;   OUTPUT
 42298                                  ;       CF set if EOF hit
 42299                                  ;       AL == 1st char of token
 42300                                  ;    ES:SI -> just past the token
 42301                                  ;       CX == # bytes remaining from that point
 42302                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 42303                                  ;
 42304                                  ;   OTHER REGS USED
 42305                                  ;       AX
 42306                                  ;
 42307                                  ;   NOTES
 42308                                  ;       None
 42309                                  ;
 42310                                  ;   HISTORY
 42311                                  ;       Created 16-Mar-1992 by JeffPar
 42312                                  ;
 42313                                  ;----------------------------------------------------------------------------
 42314                                  
 42315                                  skip_delim:	; returns carry set if eol/eof
 42316 00003F33 E83700                          call    get_char        ;
 42317 00003F36 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 42318 00003F39 72F7                            jc	short skip_token_done ;
 42319 00003F3B E8AB01                          call    delim           ;
 42320 00003F3E 74F3                            je	short skip_delim ;
 42321 00003F40 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 42322                                  
 42323                                  ;----------------------------------------------------------------------------
 42324                                  ;
 42325                                  ;   skip_opt_line: same as skip_line provided AL != LF
 42326                                  ;
 42327                                  ;   INPUT
 42328                                  ;       AL == last character read
 42329                                  ;    ES:SI -> position in config.sys
 42330                                  ;       CX == remaining bytes in config.sys
 42331                                  ;
 42332                                  ;   OUTPUT
 42333                                  ;       CF set if EOF hit
 42334                                  ;       AL == 1st char of new line
 42335                                  ;    ES:SI -> just past 1st char of new line
 42336                                  ;       CX == # bytes remaining from that point
 42337                                  ;
 42338                                  ;   OTHER REGS USED
 42339                                  ;       AX
 42340                                  ;
 42341                                  ;   NOTES
 42342                                  ;       In other words, the purpose here is to skip to the next line,
 42343                                  ;       unless ES:SI is already sitting at the front of the next line (which
 42344                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 42345                                  ;
 42346                                  ;   HISTORY
 42347                                  ;       Created 16-Mar-1992 by JeffPar
 42348                                  ;
 42349                                  ;----------------------------------------------------------------------------
 42350                                  
 42351                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42352                                  ;skip_opt_line:
 42353                                  ;	cmp     al,lf ; 0Ah
 42354                                  ;	je	short skip_line_done
 42355                                       
 42356                                  	; fall into skip_line
 42357                                  
 42358                                  ;----------------------------------------------------------------------------
 42359                                  ;
 42360                                  ;   skip_line: skip to the next line
 42361                                  ;
 42362                                  ;   INPUT
 42363                                  ;    ES:SI -> position in config.sys
 42364                                  ;       CX == remaining bytes in config.sys
 42365                                  ;
 42366                                  ;   OUTPUT
 42367                                  ;       CF set if EOF hit
 42368                                  ;    ES:SI -> just past 1st char of new line
 42369                                  ;       CX == # bytes remaining from that point
 42370                                  ;
 42371                                  ;   OTHER REGS USED
 42372                                  ;       AX
 42373                                  ;
 42374                                  ;   NOTES
 42375                                  ;       None
 42376                                  ;
 42377                                  ;   HISTORY
 42378                                  ;       Created 16-Mar-1992 by JeffPar
 42379                                  ;
 42380                                  ;----------------------------------------------------------------------------
 42381                                  
 42382                                  skip_line:
 42383 00003F42 E82800                          call    get_char
 42384 00003F45 7204                            jc	short skip_line_done
 42385                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42386 00003F47 3C0A                            cmp     al,lf ; 0Ah
 42387 00003F49 75F7                            jne	short skip_line
 42388                                  skip_line_done:
 42389                                  num_done:	; 18/12/2022
 42390 00003F4B C3                              retn
 42391                                  
 42392                                  ;----------------------------------------------------------------------------
 42393                                  ;
 42394                                  ;   get_number: return binary equivalent of numeric string
 42395                                  ;
 42396                                  ;   INPUT
 42397                                  ;    ES:SI -> position in config.sys
 42398                                  ;       CX == remaining bytes in config.sys
 42399                                  ;
 42400                                  ;   OUTPUT
 42401                                  ;       AL == non-digit encountered
 42402                                  ;       BX == binary #
 42403                                  ;    ES:SI -> just past 1st non-digit
 42404                                  ;       CX == # bytes remaining from that point
 42405                                  ;
 42406                                  ;   OTHER REGS USED
 42407                                  ;       AX
 42408                                  ;
 42409                                  ;   NOTES
 42410                                  ;       None
 42411                                  ;
 42412                                  ;   HISTORY
 42413                                  ;       Created 16-Mar-1992 by JeffPar
 42414                                  ;
 42415                                  ;----------------------------------------------------------------------------
 42416                                  
 42417                                  ; 13/05/2019
 42418                                  
 42419                                  get_number:
 42420 00003F4C 29DB                            sub     bx,bx           ; BX = result
 42421                                  num_loop:
 42422 00003F4E E81C00                          call    get_char        ;
 42423 00003F51 72F8                            jc	short num_done	;
 42424 00003F53 3C30                            cmp     al,'0'          ; convert to value
 42425 00003F55 72F4                            jb	short num_done	; no more number
 42426 00003F57 3C39                            cmp     al,'9'          ;
 42427 00003F59 77F0                            ja	short num_done	;
 42428 00003F5B 50                              push    ax              ;
 42429 00003F5C B80A00                          mov     ax,10           ;
 42430 00003F5F 52                              push    dx              ;
 42431 00003F60 F7E3                            mul     bx              ;
 42432 00003F62 5A                              pop     dx              ;
 42433 00003F63 89C3                            mov     bx,ax           ;
 42434 00003F65 58                              pop     ax              ;
 42435 00003F66 2C30                            sub     al,'0'          ;
 42436 00003F68 98                              cbw                     ;
 42437 00003F69 01C3                            add     bx,ax           ;
 42438 00003F6B EBE1                            jmp	short num_loop	;
 42439                                  
 42440                                  	; 18/12/2022
 42441                                  ;num_done:
 42442                                          ;retn
 42443                                  
 42444                                  ;----------------------------------------------------------------------------
 42445                                  ;
 42446                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 42447                                  ;
 42448                                  ;   INPUT
 42449                                  ;    ES:SI -> position in config.sys
 42450                                  ;       CX == remaining bytes in config.sys
 42451                                  ;
 42452                                  ;   OUTPUT
 42453                                  ;       AL == next character
 42454                                  ;    ES:SI -> just past next character
 42455                                  ;       CX == # bytes remaining from that point
 42456                                  ;
 42457                                  ;   OTHER REGS USED
 42458                                  ;       AX
 42459                                  ;
 42460                                  ;   NOTES
 42461                                  ;       None
 42462                                  ;
 42463                                  ;   HISTORY
 42464                                  ;       Created 16-Mar-1992 by JeffPar
 42465                                  ;
 42466                                  ;----------------------------------------------------------------------------
 42467                                  
 42468                                  get_char:
 42469 00003F6D 83E901                          sub     cx,1            ; use SUB to set carry,zero
 42470 00003F70 7205                            jb	short get_fail	; out of data
 42471                                          ;lods	byte ptr es:[si] ;
 42472 00003F72 26                      	es	
 42473 00003F73 AC                      	lodsb
 42474 00003F74 88C4                            mov     ah,al           ;
 42475 00003F76 C3                              retn			;
 42476                                  get_fail:                       ; restore CX to zero
 42477 00003F77 B90000                          mov     cx,0            ; leave carry set, zero not set
 42478                                  nearby_ret:
 42479 00003F7A C3                              retn
 42480                                  
 42481                                  ;----------------------------------------------------------------------------
 42482                                  ;
 42483                                  ;   query_user: ask user whether to execute current config.sys command
 42484                                  ;
 42485                                  ;   INPUT
 42486                                  ;       AL == current command code
 42487                                  ;    ES:SI -> current command line in config.sys
 42488                                  ;    config_cmd == current command code, but with QUERY bit intact
 42489                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 42490                                  ;
 42491                                  ;   OUTPUT
 42492                                  ;       CF set if command should be ignored (it is also REM'ed out)
 42493                                  ;
 42494                                  ;   OTHER REGS USED
 42495                                  ;       BX, CX, DX, DI
 42496                                  ;
 42497                                  ;   NOTES
 42498                                  ;       None
 42499                                  ;
 42500                                  ;   HISTORY
 42501                                  ;       Created 16-Mar-1992 by JeffPar
 42502                                  ;
 42503                                  ;----------------------------------------------------------------------------
 42504                                  
 42505                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 42506                                  	; (SYSINIT:4AE5h)
 42507                                  
 42508                                  	; 12/12/2022
 42509                                  query_user:
 42510 00003F7B F606[E445]04                    test    byte [bQueryOpt],4	; answer no to everything?
 42511                                  	; 01/01/2023
 42512 00003F80 7403                    	jz	short qu_1		;
 42513 00003F82 E9B900                  	jmp	skip_all
 42514                                  	; 12/12/2022
 42515                                  	;;jmp	short skip_all		;
 42516                                  	;jnz	short skip_all
 42517                                  qu_1:
 42518 00003F85 F606[E445]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 42519 00003F8A 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 42520 00003F8C 50                              push    ax                      ;
 42521 00003F8D A0[D314]                        mov     al,[config_cmd]         ;
 42522 00003F90 F606[E445]01                    test    byte [bQueryOpt],1	; query every command?
 42523 00003F95 7506                            jnz	short query_all		; yes
 42524 00003F97 A880                            test    al,CONFIG_OPTION_QUERY  ;
 42525                                  	; 01/01/2023
 42526 00003F99 7502                    	jnz	short query_all		;
 42527                                  	; 12/12/2022
 42528                                  	;;jmp	short do_cmd		;
 42529                                  	;jz	short do_cmd ; cf=0
 42530                                  
 42531                                  	; 01/01/2023
 42532 00003F9B 58                      	pop	ax
 42533 00003F9C C3                      	retn
 42534                                  
 42535                                  query_all:
 42536                                  
 42537                                  ;   Search for the command code (AL) in "comtab", and then print
 42538                                  ;   out the corresponding keyword, followed by the rest of the actual
 42539                                  ;   line pointed to by ES:SI
 42540                                  
 42541 00003F9D 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 42542 00003F9E BA[C84C]                        mov     dx,_$AutoPrmpt    	;
 42543 00003FA1 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42544 00003FA3 7450                            jz	short generic_prompt	; config_cmd must have been 0
 42545                                  
 42546 00003FA5 88C6                            mov     dh,al                   ; save config_cmd in DH
 42547 00003FA7 29DB                            sub     bx,bx                   ;
 42548 00003FA9 BF[3146]                        mov     di,comtab		;
 42549                                  find_match:                             ;
 42550 00003FAC 8A1D                            mov     bl,[di]                 ; get size of current keyword
 42551 00003FAE 08DB                            or      bl,bl                   ;
 42552 00003FB0 7425                            jz	short line_print	; end of table
 42553 00003FB2 47                              inc     di                      ;
 42554 00003FB3 3A01                            cmp     al,[di+bx]              ; match?
 42555 00003FB5 7405                            je	short cmd_match		; yes
 42556 00003FB7 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 42557                                  	; 13/05/2019	
 42558 00003FBA EBF0                            jmp	short find_match	; loop
 42559                                  cmd_match:                              ;
 42560 00003FBC 8A4DFF                          mov     cl,[di-1]               ;
 42561 00003FBF B500                            mov	ch,0                    ;
 42562 00003FC1 B402                            mov     ah,STD_CON_OUTPUT ; 2
 42563                                  cmd_print:                              ;
 42564 00003FC3 8A05                            mov     al,[di]                 ;
 42565 00003FC5 47                              inc     di                      ;
 42566 00003FC6 88C2                            mov     dl,al                   ;
 42567 00003FC8 CD21                            int     21h                     ;
 42568 00003FCA E2F7                            loop    cmd_print               ;
 42569 00003FCC B23D                            mov     dl,'='                  ;
 42570 00003FCE 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 42571 00003FD1 7502                            jne	short cmd_notset	;
 42572 00003FD3 B220                            mov     dl,' '                  ;
 42573                                  cmd_notset:
 42574 00003FD5 CD21                            int     21h                     ; '=' looks funny on SET commands
 42575                                  line_print:                             ;
 42576                                  	;lods	byte ptr es:[si]        ;
 42577 00003FD7 26                              es
 42578 00003FD8 AC                      	lodsb
 42579 00003FD9 08C0                    	or      al,al                   ;
 42580 00003FDB 7502                            jnz	short non_null		;
 42581 00003FDD B020                            mov     al,' '                  ;
 42582                                  non_null:                               ;
 42583 00003FDF 3C20                            cmp     al,' '                  ; control code?
 42584 00003FE1 720F                            jb	short prompt_user	; yes, assume end of line
 42585 00003FE3 7505                            jne	short non_space		;
 42586                                          ; 10/09/2023
 42587 00003FE5 263804                  	cmp	[es:si],al ; 20h
 42588                                  	;cmp	byte [es:si],' '	;
 42589 00003FE8 7208                            jb	short prompt_user	;
 42590                                  non_space:                              ;
 42591 00003FEA 88C2                            mov     dl,al                   ;
 42592 00003FEC B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 42593 00003FEE CD21                            int     21h                     ;
 42594 00003FF0 EBE5                            jmp	short line_print	;
 42595                                  
 42596                                  prompt_user:                            ;
 42597 00003FF2 BA[594C]                        mov     dx,_$InterPrmpt		;
 42598                                  
 42599                                  generic_prompt:
 42600 00003FF5 E8BB03                          call    print                   ;
 42601                                  input_loop:                             ;
 42602 00003FF8 B400                            mov     ah,0                    ; read a key
 42603 00003FFA CD16                            int     16h                     ;
 42604 00003FFC 08C0                            or      al,al                   ; is it a function key?
 42605 00003FFE 750F                            jnz	short not_func		; no
 42606 00004000 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 42607 00004003 75F3                            jne	short input_loop	; no
 42608 00004005 A0[694C]                        mov     al,[_$NO]                  ;
 42609 00004008 800E[E445]04                    or      byte [bQueryOpt],4	; no more queries
 42610 0000400D EB21                            jmp     short legal_char        ;
 42611                                  not_func:
 42612 0000400F 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 42613 00004011 3A06[694C]                      cmp     al,[_$NO]		; verify character is legal
 42614 00004015 7419                            je	short legal_char	;
 42615 00004017 3A06[654C]                      cmp     al,[_$YES]		;
 42616 0000401B 7413                            je	short legal_char	;
 42617 0000401D 803E[D314]00                    cmp     byte [config_cmd],0	;
 42618 00004022 74D4                            je	short input_loop	; don't allow Esc on this query
 42619 00004024 3C1B                            cmp     al,1Bh                  ; Esc?
 42620 00004026 75D0                            jne	short input_loop	;
 42621 00004028 800E[E445]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 42622 0000402D A0[654C]                        mov     al,[_$YES]
 42623                                  legal_char:                             ;
 42624 00004030 E888FE                          call    disp_input              ;
 42625 00004033 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 42626                                  
 42627 00004034 3A06[694C]                      cmp     al,[_$NO]		; process line?
 42628 00004038 7403                            je	short skip_cmd		; no
 42629                                  	; 12/12/2022
 42630 0000403A F8                      	clc
 42631                                  do_cmd:
 42632 0000403B 58                      	pop     ax			;
 42633                                  	; 12/12/2022
 42634                                  	; cf=0
 42635                                  	;clc				; just do the command
 42636 0000403C C3                      	retn
 42637                                  
 42638                                  skip_cmd:
 42639 0000403D 58                      	pop     ax			;
 42640                                  skip_all:
 42641 0000403E B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 42642 00004040 F9                      	stc
 42643 00004041 C3                      	retn
 42644                                  
 42645                                  ;----------------------------------------------------------------------------
 42646                                  ;
 42647                                  ;   print_error: displays multi-config error conditions
 42648                                  ;
 42649                                  ;   INPUT
 42650                                  ;    Carry set to pause, clear to not
 42651                                  ;    ES:SI -> current command line in config.sys
 42652                                  ;
 42653                                  ;   OUTPUT
 42654                                  ;       None
 42655                                  ;
 42656                                  ;   OTHER REGS USED
 42657                                  ;       None
 42658                                  ;
 42659                                  ;   NOTES
 42660                                  ;       None
 42661                                  ;
 42662                                  ;   HISTORY
 42663                                  ;       Created 16-Mar-1992 by JeffPar
 42664                                  ;
 42665                                  ;----------------------------------------------------------------------------
 42666                                  
 42667                                  print_error:
 42668 00004042 50                              push    ax
 42669 00004043 53                              push    bx
 42670 00004044 51                              push    cx
 42671 00004045 52                              push    dx
 42672 00004046 1E                              push    ds
 42673 00004047 0E                              push    cs
 42674 00004048 1F                              pop     ds
 42675 00004049 9C                              pushf
 42676 0000404A E820FC                          call    get_linenum
 42677 0000404D 891E[AB02]                      mov     [linecount],bx
 42678 00004051 E827E8                          call    error_line
 42679 00004054 9D                              popf
 42680 00004055 7319                            jnc	short pe_ret
 42681 00004057 BA[234B]                        mov     dx,_$PauseMsg
 42682 0000405A E85603                          call    print
 42683 0000405D B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 42684 00004060 CD21                            int     21h			; wait for a key
 42685 00004062 08C0                            or      al,al			; extended key?
 42686 00004064 7504                            jnz	short pe_1		; no
 42687 00004066 B407                            mov     ah,07h			; yes
 42688 00004068 CD21                            int     21h			; eat it too
 42689                                  pe_1:     
 42690 0000406A BA[B649]                	mov     dx,crlfm
 42691 0000406D E84303                          call    print
 42692                                  pe_ret: 
 42693 00004070 1F                      	pop     ds
 42694 00004071 5A                              pop     dx
 42695 00004072 59                              pop     cx
 42696 00004073 5B                              pop     bx
 42697 00004074 58                              pop     ax
 42698 00004075 C3                      	retn
 42699                                  
 42700                                  ;----------------------------------------------------------------------------
 42701                                  
 42702                                  ;   This function is very simple: it merely prepends a "/D" to the
 42703                                  ;   command-line for the shell; this (undocumented) switch disables
 42704                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 42705                                  ;   displayed when there's no AUTOEXEC.BAT.
 42706                                  
 42707                                  disable_autoexec:
 42708                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 42709                                  	; 17/04/2019 - Retro DOS v4.0
 42710                                  
 42711 00004076 F606[E445]04            	test	byte [bQueryOpt],4
 42712 0000407B 7443                    	jz	short disable_exit
 42713 0000407D F606[DA45]01            	test	byte [dae_flag],1
 42714 00004082 753C                    	jnz	short disable_exit
 42715 00004084 800E[DA45]01            	or	byte [dae_flag],1
 42716                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 42717 00004089 810E[E445]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 42718 0000408F BA4420                  	mov     dx,'D ' ; 2044h
 42719                                  dae_1:
 42720                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42721 00004092 A0[1945]                        mov	al,[def_swchr]
 42722                                  	;mov	al,[command_line-1]     ; get default switchchar
 42723 00004095 08C0                            or      al,al                   ; anything there?
 42724 00004097 7427                            jz	short disable_exit	; no, disable_autoexec already called
 42725 00004099 8A1E[1A45]                      mov     bl,[command_line]       ;
 42726 0000409D B700                            mov     bh,0                    ; BX == command-line length
 42727 0000409F 89D9                            mov     cx,bx                   ;
 42728 000040A1 80C303                          add     bl,3                    ;
 42729 000040A4 80FB7E                          cmp     bl,126                  ;
 42730 000040A7 7717                            ja	short disable_exit	;
 42731 000040A9 881E[1A45]                      mov     [command_line],bl       ; update length
 42732 000040AD 81C3[1B45]                      add     bx,command_line+1	; make sure we move the NULL too
 42733 000040B1 41                              inc     cx                      ; (just for consistency sake)
 42734                                  disable_loop:                           ;
 42735 000040B2 8A67FD                          mov     ah,[bx-3]               ;
 42736 000040B5 8827                            mov     [bx],ah                 ;
 42737 000040B7 4B                              dec     bx                      ;
 42738 000040B8 E2F8                            loop    disable_loop            ;
 42739 000040BA 8847FE                          mov     [bx-2],al               ;
 42740                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 42741 000040BD 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 42742                                          ;mov	byte [command_line-1],0 ;
 42743                                  disable_exit:                           ;
 42744 000040C0 C3                              retn
 42745                                  
 42746                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 42747 000040C1 803E[E445]01            	cmp     byte [bQueryOpt],1
 42748 000040C6 75F8                    	jnz     short disable_exit
 42749 000040C8 F606[DA45]02            	test	byte [dae_flag],2
 42750 000040CD 75F1                    	jnz     short disable_exit
 42751 000040CF 800E[DA45]02            	or      byte [dae_flag],2
 42752                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 42753                                  	; 10/09/2023 (BugFix)
 42754 000040D4 BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 42755 000040D7 EBB9                    	jmp     short dae_1
 42756                                  
 42757                                  ;endif  ;MULTI_CONFIG
 42758                                  
 42759                                  ;%endif	; 02/11/2022
 42760                                  
 42761                                  
 42762                                  ; 19/04/2019 - Retro DOS v4.0
 42763                                  
 42764                                  ;----------------------------------------------------------------------------
 42765                                  ;
 42766                                  ; procedure : delim
 42767                                  ;
 42768                                  ;----------------------------------------------------------------------------
 42769                                  
 42770                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42771                                  ; (SYSINIT:4C45h)
 42772                                  
 42773                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42774                                  ;%if 0
 42775                                  ;;ifdef	MULTI_CONFIG
 42776                                  ;
 42777                                  any_delim:
 42778 000040D9 3C0D                    	cmp	al,cr
 42779 000040DB 7427                    	je	short delim_ret
 42780 000040DD 3C0A                    	cmp	al,lf
 42781 000040DF 7423                    	je	short delim_ret
 42782 000040E1 3C5B                    	cmp	al,'['
 42783 000040E3 741F                    	je	short delim_ret
 42784 000040E5 3C5D                    	cmp	al,']'
 42785 000040E7 741B                    	je	short delim_ret
 42786                                  ;
 42787                                  ;;endif ;MULTI_CONFIG
 42788                                  ;%endif ; 02/11/2022
 42789                                  
 42790                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42791                                  	; (SYSINIT:3450h)	
 42792                                  delim:
 42793 000040E9 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 42794 000040EB 7417                    	je	short delim_ret
 42795                                  
 42796 000040ED 3C00                    	cmp	al,0		; special case for sysinit!!!
 42797 000040EF 7413                    	je	short delim_ret
 42798                                  
 42799                                  org_delim:			; used by organize routine except for getting
 42800 000040F1 3C20                    	cmp	al,' '          ; the filename.
 42801 000040F3 740F                    	je	short delim_ret
 42802 000040F5 3C09                            cmp     al,tab ; 9
 42803 000040F7 740B                    	je	short delim_ret
 42804 000040F9 3C3D                    	cmp	al,'='
 42805 000040FB 7407                    	je	short delim_ret
 42806 000040FD 3C2C                    	cmp	al,','
 42807 000040FF 7403                    	je	short delim_ret
 42808 00004101 3C3B                    	cmp	al,';'
 42809                                  
 42810                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42811                                  
 42812                                  ; 04/01/2023 - Retro DOS v4.2
 42813                                  ;ifdef	MULTI_CONFIG
 42814                                  ;   Make sure there's no chance of a false EOF indication
 42815 00004103 F8                      	clc
 42816                                  ;endif
 42817                                  	; 02/11/2022
 42818                                  delim_ret:
 42819                                  	; 04/01/2023
 42820                                  	; cf = 0
 42821                                  nl_ret:	; 10/09/2023
 42822 00004104 C3                      	retn
 42823                                  
 42824                                  ;----------------------------------------------------------------------------
 42825                                  ;
 42826                                  ; procedure : newline
 42827                                  ;
 42828                                  ;  newline returns with first character of next line
 42829                                  ;
 42830                                  ;----------------------------------------------------------------------------
 42831                                  
 42832                                  newline:
 42833 00004105 E80600                  	call	getchr			;skip non-control characters
 42834 00004108 72FA                    	jc	short nl_ret
 42835 0000410A 3C0A                    	cmp	al,lf			;look for line feed
 42836 0000410C 75F7                    	jne	short newline
 42837                                  
 42838                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42839                                  	;call	getchr
 42840                                  ;nl_ret:
 42841                                  	;retn
 42842                                  	; 10/09/2023
 42843                                  	;jmp	short getchr
 42844                                  
 42845                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42846                                  %if 1
 42847                                  
 42848                                  ;----------------------------------------------------------------------------
 42849                                  ;
 42850                                  ; procedure : getchr
 42851                                  ;
 42852                                  ;----------------------------------------------------------------------------
 42853                                  
 42854                                  	; 24/10/2022
 42855                                  getchr:
 42856                                  	; 12/12/2022
 42857                                  	;push	cx
 42858                                  	;mov	cx,[count]
 42859                                  	;jcxz	nochar
 42860                                  	; 12/12/2022
 42861 0000410E 833E[5203]01            	cmp	word [count],1 
 42862 00004113 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 42863                                  	
 42864 00004115 8B36[5603]              	mov	si,[chrptr]
 42865 00004119 268A04                  	mov	al,[es:si]
 42866 0000411C FF0E[5203]              	dec	word [count]
 42867 00004120 FF06[5603]              	inc	word [chrptr]
 42868                                  	; 12/12/202
 42869                                  	; cf=0
 42870                                  	;clc
 42871                                  ;get_ret:
 42872                                  	;pop	cx
 42873                                  	;retn
 42874                                  nochar: 
 42875                                  	; 12/12/2022
 42876                                  	; cf=1
 42877                                  	;stc
 42878                                  	;jmp	short get_ret
 42879                                  	
 42880 00004124 C3                      	retn
 42881                                  %endif
 42882                                  
 42883                                  ;----------------------------------------------------------------------------
 42884                                  ; 
 42885                                  ; procedure : mapcase
 42886                                  ;
 42887                                  ;----------------------------------------------------------------------------
 42888                                  
 42889                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 42890                                  
 42891                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 42892                                  	; (SYSINIT:4C7Eh)
 42893                                  mapcase:
 42894 00004125 51                      	push	cx
 42895 00004126 56                      	push	si
 42896 00004127 1E                      	push	ds
 42897                                  
 42898 00004128 06                      	push	es
 42899 00004129 1F                      	pop	ds
 42900                                  
 42901                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42902                                  
 42903                                  ; 04/01/2023 - Retro DOS 4.2
 42904                                  
 42905                                  ;ifdef	MULTI_CONFIG
 42906 0000412A 88C3                    	mov	bl,al			; same cmd code this line
 42907                                  ;else
 42908                                  ;	xor	si,si
 42909                                  ;endif
 42910                                  	; 02/11/2022
 42911                                  	; 04/01/2023 - Retro DOS 4.2
 42912                                  	;xor	si, si
 42913                                  
 42914                                  convloop:
 42915 0000412C AC                      	lodsb
 42916 0000412D 3C61                    	cmp	al,'a'
 42917 0000412F 7209                    	jb	short noconv
 42918 00004131 3C7A                    	cmp	al,'z'
 42919 00004133 7705                    	ja	short noconv
 42920 00004135 2C20                    	sub	al,20h
 42921 00004137 8844FF                  	mov	[si-1],al
 42922                                  noconv:
 42923                                  
 42924                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42925                                  
 42926                                  ; 04/01/2023 - Retro DOS 4.2
 42927                                  ;ifdef	MULTI_CONFIG
 42928                                  
 42929                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 42930                                  ;   upper-case a line at a time, after we've been able to figure out whether
 42931                                  ;   the line is a SET command or not (since we don't want to upper-case
 42932                                  ;   anything after the "=" in a SET)
 42933                                  ;
 42934 0000413A 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 42935 0000413D 7504                    	jne	short check_eol		; no, just check for end-of-line
 42936 0000413F 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 42937 00004141 740A                    	je	short convdone		; yes
 42938                                  check_eol:
 42939 00004143 3C0D                    	cmp	al,cr
 42940 00004145 7406                    	je	short convdone
 42941 00004147 3C0A                    	cmp	al,lf
 42942 00004149 7402                    	je	short convdone
 42943                                  ;endif
 42944                                  	; 02/11/2022
 42945 0000414B E2DF                    	loop	convloop
 42946                                  convdone:
 42947 0000414D 1F                      	pop	ds
 42948 0000414E 5E                      	pop	si
 42949 0000414F 59                      	pop	cx
 42950 00004150 C3                      	retn
 42951                                  
 42952                                  ;----------------------------------------------------------------------------
 42953                                  ;
 42954                                  ; procedure : round
 42955                                  ;
 42956                                  ; round the values in memlo and memhi to paragraph boundary.
 42957                                  ; perform bounds check.
 42958                                  ;
 42959                                  ;----------------------------------------------------------------------------
 42960                                  
 42961                                  round:
 42962                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 42963 00004151 1E                      	push	ds
 42964 00004152 0E                      	push	cs
 42965 00004153 1F                      	pop	ds
 42966                                  
 42967 00004154 50                      	push	ax
 42968                                  	;mov	ax,[cs:memlo]
 42969 00004155 A1[5E03]                	mov	ax,[memlo]
 42970                                  
 42971 00004158 E808D0                  	call	ParaRound		; para round up
 42972                                  
 42973                                  	;add	[cs:memhi],ax
 42974 0000415B 0106[6003]              	add	[memhi],ax
 42975                                  	;mov	word [cs:memlo],0
 42976 0000415F C706[5E03]0000          	mov	word [memlo],0
 42977                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 42978 00004165 A1[6003]                	mov	ax,[memhi]
 42979                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 42980 00004168 3B06[A102]              	cmp	ax,[ALLOCLIM]
 42981                                  	;jae	short mem_err
 42982                                  	; 13/04/2024
 42983 0000416C 7322                    	jae	short mem_err2 ; ds = cs
 42984                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 42985 0000416E F606[D814]02            	test	byte [setdevmarkflag],for_devmark ; 2
 42986 00004173 7416                    	jz	short skip_set_devmarksize
 42987 00004175 06                      	push	es
 42988 00004176 56                      	push	si
 42989                                  	;mov	si,[cs:devmark_addr]
 42990 00004177 8B36[D614]              	mov	si,[devmark_addr]
 42991 0000417B 8EC6                    	mov	es,si
 42992 0000417D 29F0                    	sub	ax,si
 42993 0000417F 48                      	dec	ax
 42994                                  	;mov	[es:3],ax
 42995 00004180 26A30300                	mov	[es:devmark.size],ax	; paragraph
 42996                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 42997 00004184 8026[D814]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 42998 00004189 5E                      	pop	si
 42999 0000418A 07                      	pop	es
 43000                                  skip_set_devmarksize:
 43001 0000418B 58                      	pop	ax
 43002                                  
 43003                                  	; 10/09/2023
 43004 0000418C 1F                      	pop	ds
 43005                                  
 43006                                  	; 11/12/2022
 43007                                  	; cf = 0
 43008                                  	; 02/11/2022
 43009                                  	;clc	; ? (not needed here)	; clear carry
 43010 0000418D C3                      	retn
 43011                                  
 43012                                  ;----------------------------------------------------------------------------
 43013                                  
 43014                                  mem_err:
 43015                                  	; 11/12/2022
 43016 0000418E 0E                      	push	cs
 43017 0000418F 1F                      	pop	ds
 43018                                  mem_err2:
 43019 00004190 BA[8F4A]                	mov	dx,badmem
 43020                                  	;push	cs
 43021                                  	;pop	ds
 43022 00004193 E81D02                  	call	print
 43023 00004196 E903D0                  	jmp	stall
 43024                                  
 43025                                  ;----------------------------------------------------------------------------
 43026                                  ;
 43027                                  ; procedure : calldev
 43028                                  ;
 43029                                  ;----------------------------------------------------------------------------
 43030                                  
 43031                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43032                                  	; (SYSINIT:34E0h)
 43033                                  
 43034                                  	; 13/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 43035                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4F3Eh)
 43036                                  
 43037                                  calldev:
 43038 00004199 2E8E1E[551F]            	mov	ds,[cs:DevEntry+2]
 43039 0000419E 2E031E[531F]            	add	bx,[cs:DevEntry]	; do a little relocation
 43040 000041A3 8B07                    	mov	ax,[bx]
 43041                                  
 43042 000041A5 2EFF36[531F]            	push	word [cs:DevEntry]
 43043 000041AA 2EA3[531F]              	mov	[cs:DevEntry],ax
 43044 000041AE BB[6603]                	mov	bx,packet
 43045 000041B1 2EFF1E[531F]            	call	far [cs:DevEntry]
 43046 000041B6 2E8F06[531F]            	pop	word [cs:DevEntry]
 43047 000041BB C3                      	retn
 43048                                  
 43049                                  ;----------------------------------------------------------------------------
 43050                                  ;
 43051                                  ; procedure : todigit
 43052                                  ;
 43053                                  ;----------------------------------------------------------------------------
 43054                                  
 43055                                  todigit:
 43056 000041BC 2C30                    	sub	al,'0'
 43057                                  	;jb	short notdig  ; 02/11/2022
 43058                                  	; 12/12/2022
 43059 000041BE 7203                    	jb	short notdig2
 43060                                  	;cmp	al,9
 43061                                  	;ja	short notdig
 43062                                  	;clc
 43063                                  	;retn
 43064                                  	; 12/12/2022
 43065 000041C0 3C0A                    	cmp	al,10
 43066 000041C2 F5                      	cmc
 43067                                  notdig:
 43068                                  	;stc
 43069                                  notdig2:
 43070 000041C3 C3                      	retn
 43071                                  
 43072                                  ;----------------------------------------------------------------------------
 43073                                  ;
 43074                                  ; procedure : getnum
 43075                                  ;
 43076                                  ; getnum parses a decimal number.
 43077                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 43078                                  ; error), if number is bad carry is set, zero is set, ax=0.
 43079                                  ;
 43080                                  ;----------------------------------------------------------------------------
 43081                                  
 43082                                  getnum:
 43083 000041C4 53                      	push	bx
 43084 000041C5 31DB                    	xor	bx,bx			; running count is zero
 43085                                  b2:
 43086 000041C7 E8F2FF                  	call	todigit 		; do we have a digit ?
 43087 000041CA 7247                    	jc	short badnum		; no, bomb
 43088                                  
 43089 000041CC 93                      	xchg	ax,bx			; put total in ax
 43090 000041CD 53                      	push	bx			; save digit (0 to 9)
 43091                                  	;mov	bx,10			; base of arithmetic
 43092                                  	; 12/12/2022
 43093 000041CE B30A                    	mov	bl,10
 43094 000041D0 F7E3                    	mul	bx			; shift by one decimal digit
 43095 000041D2 5B                      	pop	bx			; get back digit (0 to 9)
 43096 000041D3 00D8                    	add	al,bl			; get total
 43097 000041D5 80D400                  	adc	ah,0			; make that 16 bits
 43098 000041D8 7239                    	jc	short badnum		; too big a number
 43099                                  
 43100 000041DA 93                      	xchg	ax,bx			; stash total
 43101                                  
 43102 000041DB E830FF                  	call	getchr			;get next digit
 43103 000041DE 722D                    	jc	short b1		; no more characters
 43104 000041E0 3C20                    	cmp	al,' ' 			; space?
 43105 000041E2 741F                    	je	short b15		; then end of digits
 43106 000041E4 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 43107 000041E6 741B                    	je	short b15		; then end of digits.
 43108 000041E8 3C09                    	cmp	al, tab ; 9		; tab
 43109 000041EA 7417                    	je	short b15
 43110 000041EC 2E3A06[AA02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 43111 000041F1 7410                    	je	short b15
 43112 000041F3 3C2F                    	cmp	al,'/'			; see if another switch follows
 43113                                  	; 12/12/2022
 43114                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43115                                  	;nop				; cas - remnant of old bad code
 43116                                  	;nop
 43117 000041F5 740C                    	je	short b15
 43118 000041F7 3C0A                    	cmp	al,lf			; line-feed?
 43119 000041F9 7408                    	je	short b15
 43120 000041FB 3C0D                    	cmp	al,cr			; carriage return?
 43121 000041FD 7404                    	je	short b15
 43122 000041FF 08C0                    	or	al,al			; end of line separator?
 43123 00004201 75C4                    	jnz	short b2		; no, try as a valid char...
 43124                                  b15:
 43125 00004203 2EFF06[5203]            	inc	word [cs:count]		; one more character to s...
 43126 00004208 2EFF0E[5603]            	dec	word [cs:chrptr]	; back up over separator
 43127                                  b1:
 43128 0000420D 89D8                    	mov	ax,bx			; get proper count
 43129 0000420F 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 43130 00004211 5B                      	pop	bx
 43131 00004212 C3                      	retn
 43132                                  badnum:
 43133                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43134                                  	;mov	byte [cs:sepchr],0
 43135 00004213 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 43136                                  	; 12 /12/2022
 43137 00004215 2EA2[AA02]              	mov	[cs:sepchr],al ; 0
 43138 00004219 5B                      	pop	bx
 43139 0000421A F9                      	stc				; and carry set
 43140 0000421B C3                      	retn
 43141                                  
 43142                                  ;****************************************************************************
 43143                                  
 43144                                  setdoscountryinfo:
 43145                                  
 43146                                  ;----------------------------------------------------------------------------
 43147                                  ;input: es:di -> pointer to dos_country_cdpg_info
 43148                                  ;	ds:0  -> buffer.
 43149                                  ;	si = 0
 43150                                  ;	ax = country id
 43151                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 43152                                  ;	bx = file handle
 43153                                  ;	this routine can handle maximum 438 country_data entries.
 43154                                  ;
 43155                                  ;output: dos_country_cdpg_info set.
 43156                                  ;	 carry set if any file read failure or wrong information in the file.
 43157                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 43158                                  ;	 codepage_id in the file.
 43159                                  ;----------------------------------------------------------------------------
 43160                                  
 43161                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43162                                  	; (SYSINIT:4D83h)
 43163                                  
 43164                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43165                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 43166                                  
 43167 0000421C 57                      	push	di
 43168 0000421D 50                      	push	ax
 43169 0000421E 52                      	push	dx
 43170                                  
 43171 0000421F 31C9                    	xor	cx,cx
 43172 00004221 31D2                    	xor	dx,dx
 43173 00004223 B80002                  	mov	ax,512			;read 512 bytes
 43174 00004226 E84301                  	call	readincontrolbuffer	;read the file header
 43175 00004229 724A                    	jc	short setdosdata_fail
 43176                                  
 43177 0000422B 06                      	push	es
 43178 0000422C 56                      	push	si
 43179                                  
 43180 0000422D 0E                      	push	cs
 43181 0000422E 07                      	pop	es
 43182                                  
 43183 0000422F BF[7F44]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 43184 00004232 B90800                  	mov	cx,8			;length of the signature
 43185 00004235 F3A6                    	repz	cmpsb
 43186                                  
 43187 00004237 5E                      	pop	si
 43188 00004238 07                      	pop	es
 43189 00004239 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 43190                                  
 43191 0000423B 83C612                  	add	si,18			;si -> county info type
 43192 0000423E 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 43193 00004241 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 43194                                  
 43195 00004243 46                      	inc	si			;si -> file offset
 43196 00004244 8B14                    	mov	dx,[si]			;get the info file offset.
 43197 00004246 8B4C02                  	mov	cx,[si+2]
 43198 00004249 B80018                  	mov	ax,6144			;read 6144 bytes.
 43199 0000424C E81D01                  	call	readincontrolbuffer	;read info
 43200 0000424F 7224                    	jc	short setdosdata_fail
 43201                                  
 43202 00004251 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 43203 00004253 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 43204 00004257 771C                    	ja	short setdosdata_fail
 43205                                  
 43206 00004259 46                      	inc	si
 43207 0000425A 46                      	inc	si			;si -> entry information packet
 43208 0000425B 5A                      	pop	dx			;restore code page id
 43209 0000425C 58                      	pop	ax			;restore country id
 43210 0000425D 5F                      	pop	di
 43211                                  
 43212                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 43213 0000425E 3B4402                  	cmp	ax,[si+2]		;compare country_id
 43214 00004261 7509                    	jne	short setdoscntry_next
 43215                                  
 43216                                  	;cmp	dx,0			;no user specified code page ?
 43217                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 43218                                  	; 10/09/2023
 43219 00004263 09D2                    	or	dx,dx ; cmp dx,0
 43220 00004265 7413                    	jz	short setdoscntry_any_codepage
 43221 00004267 3B5404                  	cmp	dx,[si+4]		;compare code page id
 43222 0000426A 7411                    	je	short setdoscntry_got_it
 43223                                  
 43224                                  setdoscntry_next:
 43225 0000426C 0334                    	add	si,[si]			;next entry
 43226 0000426E 46                      	inc	si
 43227 0000426F 46                      	inc	si			;take a word for size of entry itself
 43228 00004270 E2EC                    	loop	setdoscntry_find
 43229                                  
 43230                                  	;mov	cx,-1			;signals that bad country id entered.
 43231                                  	; 10/09/2023
 43232 00004272 49                      	dec	cx ; 0 -> -1
 43233                                  setdoscntry_fail:
 43234 00004273 F9                      	stc
 43235 00004274 C3                      	retn
 43236                                  
 43237                                  setdosdata_fail:
 43238 00004275 5E                      	pop	si
 43239 00004276 59                      	pop	cx
 43240 00004277 5F                      	pop	di
 43241 00004278 EBF9                    	jmp	short setdoscntry_fail
 43242                                  
 43243                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 43244 0000427A 8B5404                  	mov	dx,[si+4]
 43245                                  
 43246                                  setdoscntry_got_it:			;found the matching entry
 43247 0000427D 2E8916[8744]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 43248 00004282 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 43249 00004285 8B4C0C                  	mov	cx,[si+12]
 43250 00004288 B80002                  	mov	ax,512 			;read 512 bytes
 43251 0000428B E8DE00                  	call	readincontrolbuffer
 43252 0000428E 72E3                    	jc	short setdoscntry_fail
 43253                                  
 43254 00004290 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 43255 00004292 46                      	inc	si
 43256 00004293 46                      	inc	si			;si -> first entry
 43257                                  
 43258                                  setdoscntry_data:
 43259 00004294 57                      	push	di			;es:di -> dos_country_cdpg_info
 43260 00004295 51                      	push	cx			;save # of entry left
 43261 00004296 56                      	push	si			;si -> current entry in control buffer
 43262                                  
 43263 00004297 8A4402                  	mov	al,[si+2]		;get data entry id
 43264 0000429A E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 43265 0000429D 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 43266                                  
 43267 0000429F 8B5404                  	mov	dx,[si+4]		;get offset of data
 43268 000042A2 8B4C06                  	mov	cx,[si+6]
 43269 000042A5 B80042                  	mov	ax,4200h
 43270 000042A8 F9                      	stc
 43271 000042A9 CD21                    	int	21h			;move pointer
 43272 000042AB 72C8                    	jc	short setdosdata_fail
 43273                                  
 43274 000042AD BA0002                  	mov	dx,512			;start of data buffer
 43275 000042B0 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 43276 000042B3 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 43277 000042B5 F9                      	stc
 43278 000042B6 CD21                    	int	21h			;read the country.sys data
 43279 000042B8 72BB                    	jc	short setdosdata_fail 	;read failure
 43280                                  
 43281 000042BA 39C8                    	cmp	ax,cx
 43282 000042BC 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 43283                                  
 43284 000042BE 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 43285 000042C1 8B4C06                  	mov	cx,[si+6]
 43286 000042C4 B80042                  	mov	ax,4200h
 43287 000042C7 F9                      	stc
 43288 000042C8 CD21                    	int	21h			;move pointer back again
 43289 000042CA 72A9                    	jc	short setdosdata_fail
 43290                                  
 43291 000042CC 56                      	push	si
 43292 000042CD BE0802                  	mov	si,(512+8)		;get length of the data from the file
 43293 000042D0 8B0C                    	mov	cx,[si]
 43294 000042D2 5E                      	pop	si
 43295 000042D3 BA0002                  	mov	dx,512			;start of data buffer
 43296 000042D6 83C10A                  	add	cx,10			;signature + a word for the length itself
 43297 000042D9 B43F                    	mov	ah,3Fh			;read the data from the file.
 43298 000042DB F9                      	stc
 43299 000042DC CD21                    	int	21h
 43300 000042DE 7295                    	jc	short setdosdata_fail
 43301                                  
 43302 000042E0 39C8                    	cmp	ax,cx
 43303 000042E2 7591                    	jne	short setdosdata_fail
 43304                                  
 43305 000042E4 8A4402                  	mov	al,[si+2]		;save data id for future use.
 43306 000042E7 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 43307 000042EA 8B0C                    	mov	cx,[si]			;get the length of the file
 43308 000042EC 41                      	inc	cx			;take care of a word for lenght of tab
 43309 000042ED 41                      	inc	cx			;itself.
 43310 000042EE 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 43311 000042F2 7781                    	ja	short setdosdata_fail
 43312                                  
 43313                                  	;if	bugfix
 43314 000042F4 E83100                  	call	setdbcs_before_copy
 43315                                  	;endif
 43316                                  
 43317 000042F7 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 43318 000042F9 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 43319                                  
 43320 000042FB 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 43321                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 43322 000042FF 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 43323                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 43324                                  	
 43325 00004303 57                      	push	di			;save di
 43326                                  
 43327                                  	;push	ax
 43328                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 43329                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 43330                                  	;pop	ax
 43331                                  	; 10/09/2023
 43332 00004304 2EFF36[8744]            	push	word [cs:cntrycodepage_id]
 43333 00004309 8F4404                  	pop	word [si+4]
 43334                                  
 43335                                  setdoscntry_mov:
 43336 0000430C F3A4                    	rep	movsb			;copy the table into dos
 43337 0000430E 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 43338 00004310 7509                    	jne	short setdoscntry_data_next
 43339                                  
 43340 00004312 5F                      	pop	di			;restore di
 43341 00004313 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 43342                                  	;pop	word [es:di+26]		;restore
 43343 00004317 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 43344                                  	;pop	word [es:di+24]
 43345                                  
 43346                                  setdoscntry_data_next:
 43347 0000431B 5E                      	pop	si			;restore control buffer pointer
 43348 0000431C 59                      	pop	cx			;restore # of entries left
 43349 0000431D 5F                      	pop	di			;restore pointer to dso_country_cdpg
 43350 0000431E 0334                    	add	si,[si]			;try to get the next entry
 43351 00004320 46                      	inc	si
 43352 00004321 46                      	inc	si			;take a word of entry length itself
 43353 00004322 49                      	dec	cx
 43354                                  	; 10/09/2023
 43355 00004323 741B                    	jz	short setdoscntry_ok 
 43356                                  	;cmp	cx,0
 43357                                  	;je	short setdoscntry_ok
 43358 00004325 E96CFF                  	jmp	setdoscntry_data
 43359                                  
 43360                                  	; 18/12/2022
 43361                                  ;setdoscntry_ok:
 43362                                  	;retn
 43363                                  
 43364                                  ;----------------------------------------------------------------------------
 43365                                  	
 43366                                  	;if	bugfix
 43367                                  
 43368                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43369                                  
 43370                                  setdbcs_before_copy:
 43371 00004328 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 43372 0000432A 7514                    	jne	short sdbcsbc		; jump if not
 43373                                  	
 43374                                  	; 10/09/2023
 43375 0000432C 50                      	push	ax
 43376 0000432D 31C0                    	xor	ax,ax
 43377 0000432F 263905                  	cmp	[es:di],ax ; 0
 43378 00004332 740B                    	je	short sdbcsbc_pop
 43379                                  	
 43380                                  	;cmp	word [es:di],0		; zero byte data block?
 43381                                  	;je	short sdbcsbc		; jump if so
 43382                                  
 43383 00004334 57                      	push	di
 43384                                  	; 10/09/2023
 43385                                  	;push	ax
 43386 00004335 51                      	push	cx
 43387 00004336 268B0D                  	mov	cx,[es:di]		; load block length
 43388                                  	;add	di,2			; points actual data
 43389 00004339 47                      	inc	di
 43390 0000433A 47                      	inc	di
 43391                                  	;xor	al,al			; fill bytes
 43392 0000433B F3AA                    	rep	stosb			; clear data block
 43393 0000433D 59                      	pop	cx
 43394                                  	;pop	ax
 43395 0000433E 5F                      	pop	di
 43396                                  
 43397                                  sdbcsbc_pop:	; 10/09/2023
 43398 0000433F 58                      	pop	ax
 43399                                  sdbcsbc:
 43400                                  setdoscntry_ok:	; 18/12/2022
 43401 00004340 C3                      	retn
 43402                                  
 43403                                  	;endif
 43404                                  
 43405                                  ;----------------------------------------------------------------------------
 43406                                  
 43407                                  getcountrydestination:
 43408                                  
 43409                                  ;----------------------------------------------------------------------------
 43410                                  ;get the destination address in the dos country info table.
 43411                                  ;
 43412                                  ;input: al - data id
 43413                                  ;	es:di -> dos_country_cdpg_info
 43414                                  ;on return:
 43415                                  ;	es:di -> destination address of the matching data id
 43416                                  ;	carry set if no matching data id found in dos.
 43417                                  ;----------------------------------------------------------------------------
 43418                                  
 43419                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43420                                  	; (SYSINIT:4EB2h)
 43421                                  
 43422                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43423                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 43424                                  
 43425 00004341 51                      	push	cx
 43426                                  	;add	di,74
 43427 00004342 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 43428                                  					;skip the reserved area, syscodepage etc.
 43429 00004345 268B0D                  	mov	cx,[es:di]		;get the number of entries
 43430 00004348 47                      	inc	di
 43431 00004349 47                      	inc	di			;si -> the first start entry id
 43432                                  
 43433                                  getcntrydest:
 43434 0000434A 263805                  	cmp	byte [es:di],al
 43435 0000434D 7413                    	je	short getcntrydest_ok
 43436                                  
 43437 0000434F 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 43438 00004353 7405                    	je	short getcntrydest_1
 43439                                  
 43440 00004355 83C705                  	add	di,5			;next data id
 43441 00004358 EB03                    	jmp	short getcntrydest_loop
 43442                                  
 43443                                  getcntrydest_1:
 43444                                  	;add	di,41
 43445 0000435A 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 43446                                  getcntrydest_loop:
 43447 0000435D E2EB                    	loop	getcntrydest
 43448 0000435F F9                      	stc
 43449                                  	;jmp	short getcntrydest_exit
 43450                                  getcntrydest_exit:
 43451                                  	; 10/09/2023
 43452 00004360 59                      	pop	cx
 43453 00004361 C3                      	retn
 43454                                  
 43455                                  getcntrydest_ok:
 43456                                  	; 10/09/2023
 43457 00004362 47                      	inc	di
 43458                                  
 43459                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 43460                                  ;	jne	short getcntrydest_ok1
 43461                                  ;
 43462                                  ;	;inc	di			;now di -> cccountryinfolen
 43463                                  ;	jmp	short getcntrydest_exit
 43464                                  
 43465                                  	; 10/09/2023
 43466 00004363 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 43467 00004365 74F9                    	je	short getcntrydest_exit
 43468                                  
 43469                                  getcntrydest_ok1:
 43470                                  	;les	di,[es:di+1]		;get the destination in es:di
 43471                                  	; 10/09/2023
 43472 00004367 26C43D                  	les	di,[es:di]
 43473                                  ;getcntrydest_exit:
 43474 0000436A 59                      	pop	cx
 43475 0000436B C3                      	retn
 43476                                  
 43477                                  ;----------------------------------------------------------------------------
 43478                                  
 43479                                  readincontrolbuffer:
 43480                                  
 43481                                  ;----------------------------------------------------------------------------
 43482                                  ;move file pointer to cx:dx
 43483                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 43484                                  ;si will be set to 0 hence ds:si points to the control buffer.
 43485                                  ;
 43486                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 43487                                  ;	 be moved.
 43488                                  ;	 ax - # of bytes to read
 43489                                  ;	 bx - file handle
 43490                                  ;	 ds - buffer seg.
 43491                                  ;return: the control data information is read into ds:0 - ds:0200.
 43492                                  ;	 cx,dx value destroyed.
 43493                                  ;	 carry set if error in reading file.
 43494                                  ;----------------------------------------------------------------------------
 43495                                  
 43496 0000436C 50                      	push	ax			;# of bytes to read
 43497 0000436D B80042                  	mov	ax,4200h
 43498 00004370 F9                      	stc
 43499 00004371 CD21                    	int	21h			;move pointer
 43500 00004373 59                      	pop	cx			;# of bytes to read
 43501 00004374 7209                    	jc	short ricb_exit
 43502                                  
 43503 00004376 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 43504 00004378 31F6                    	xor	si,si
 43505 0000437A B43F                    	mov	ah,3Fh			;read into the buffer
 43506 0000437C F9                      	stc
 43507 0000437D CD21                    	int	21h			;should be less than 1024 bytes.
 43508                                  ricb_exit:
 43509 0000437F C3                      	retn
 43510                                  
 43511                                  ;----------------------------------------------------------------------------
 43512                                  
 43513                                  ;! set_country_path procedure is not called from anywhere !
 43514                                  ; Erdogan Tan - 04/08/2023
 43515                                  %if 0
 43516                                  
 43517                                  set_country_path:
 43518                                  
 43519                                  ;----------------------------------------------------------------------------
 43520                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 43521                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 43522                                  ;     assumes current directory is the root directory.
 43523                                  ;out: ds:di -> full path (cntry_drv).
 43524                                  ;     set the cntry_drv string from the country=,,path command.
 43525                                  ;     ds, es, si value saved.
 43526                                  ;----------------------------------------------------------------------------
 43527                                  
 43528                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43529                                  	; (SYSINIT:4EF4h)
 43530                                  
 43531                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43532                                  	; (Retrodos v5.0 Pre-Works)
 43533                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 43534                                  
 43535                                  	push	si
 43536                                  
 43537                                  	push	ds			;switch ds, es
 43538                                  	push	es
 43539                                  	pop	ds
 43540                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 43541                                  
 43542                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 43543                                  	jc	short scp_default_drv 	;no, use current default drive.
 43544                                  
 43545                                  	mov	al,[si]
 43546                                  	inc	si
 43547                                  	inc	si			;si -> next char after ":"
 43548                                  	jmp	short scp_setdrv
 43549                                  
 43550                                  scp_default_drv:
 43551                                  	mov	ah,19h
 43552                                  	int	21h
 43553                                  	add	al,"A"			;convert it to a character.
 43554                                  
 43555                                  scp_setdrv:
 43556                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 43557                                  	mov	di,cntry_path
 43558                                  	mov	al,[si]
 43559                                  	cmp	al, "\"
 43560                                  	je	short scp_root_dir
 43561                                  
 43562                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 43563                                  	;je	short scp_root_dir
 43564                                  	;jmp	short scp_path
 43565                                  	; 04/01/2023
 43566                                  	jne	short scp_path
 43567                                  
 43568                                  scp_root_dir:
 43569                                  	dec	di			;di -> cntry_root
 43570                                  scp_path:
 43571                                  	call	move_asciiz		;copy it
 43572                                  
 43573                                  	mov	di,cntry_drv
 43574                                  scpath_exit:
 43575                                  
 43576                                  	push	ds			;switch ds, es
 43577                                  	push	es
 43578                                  	pop	ds
 43579                                  	pop	es			;ds, es value restored
 43580                                  
 43581                                  	pop	si
 43582                                  	retn
 43583                                  
 43584                                  ;----------------------------------------------------------------------------
 43585                                  
 43586                                  chk_drive_letter:
 43587                                  
 43588                                  ;check if ds:[si] is a drive letter followed by ":".
 43589                                  ;assume that every alpha character is already converted to upper case.
 43590                                  ;carry set if not.
 43591                                  
 43592                                  	; 04/01/2023 - Retrodos v4.2
 43593                                  
 43594                                  	push	ax
 43595                                  	cmp	byte [si],"A"
 43596                                  	;jb	short cdletter_no
 43597                                  	jb	short cdletter_exit
 43598                                  	cmp	byte [si],"Z"
 43599                                  	ja	short cdletter_no
 43600                                  	cmp	byte [si+1],":"
 43601                                  	;jne	short cdletter_no
 43602                                  	;jmp	short cdletter_exit
 43603                                  	; 04/01/2023
 43604                                  	je	short cdletter_exit
 43605                                  
 43606                                  cdletter_no:
 43607                                  	stc
 43608                                  cdletter_exit:
 43609                                  	pop	ax
 43610                                  	retn
 43611                                  
 43612                                  %endif
 43613                                  
 43614                                  ;----------------------------------------------------------------------------
 43615                                  
 43616                                  move_asciiz:
 43617                                  
 43618                                  ;in: ds:si -> source es:di -> target
 43619                                  ;out: copy the string until 0.
 43620                                  ;assumes there exists a 0.
 43621                                  
 43622                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43623                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 43624                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 43625                                  
 43626                                  masciiz_loop:
 43627                                  	; 10/09/2023
 43628 00004380 F604FF                  	test	byte [si],0FFh
 43629 00004383 A4                      	movsb
 43630                                  	;cmp	byte [si-1],0	; was it 0?
 43631                                  	;jne	short masciiz_loop
 43632 00004384 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 43633 00004386 C3                      	retn
 43634                                  
 43635                                  ;----------------------------------------------------------------------------
 43636                                  
 43637                                  ;	ds:dx points to string to output (asciz)
 43638                                  ;
 43639                                  ;	prints <badld_pre> <string> <badld_post>
 43640                                  
 43641                                  badfil:
 43642 00004387 0E                      	push	cs
 43643 00004388 07                      	pop	es
 43644                                  
 43645 00004389 89D6                    	mov	si,dx
 43646                                  badload:
 43647 0000438B BA[F949]                	mov	dx,badld_pre	; want to print config error
 43648 0000438E BB[B649]                	mov	bx,crlfm
 43649                                  prnerr:
 43650 00004391 0E                      	push	cs
 43651 00004392 1F                      	pop	ds ; *
 43652 00004393 E81D00                  	call	print
 43653                                  prn1:
 43654 00004396 268A14                  	mov	dl,[es:si]
 43655 00004399 08D2                    	or	dl,dl
 43656 0000439B 7407                    	jz	short prn2
 43657 0000439D B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 43658 0000439F CD21                    	int	21h
 43659 000043A1 46                      	inc	si
 43660 000043A2 EBF2                    	jmp	short prn1
 43661                                  prn2:
 43662 000043A4 89DA                    	mov	dx,bx
 43663 000043A6 E80A00                  	call	print
 43664                                  	; 11/12/2022
 43665                                  	; ds = cs ; *
 43666 000043A9 803E[5103]01            	cmp	byte [donotshownum],1
 43667                                  				; suppress line number when handling command.com
 43668                                  	;cmp	byte [cs:donotshownum],1 
 43669 000043AE 7407                    	je	short prnexit
 43670                                  	
 43671                                  	; 18/12/2022
 43672                                  	;call	error_line
 43673 000043B0 E9C8E4                  	jmp	error_line
 43674                                  ;prnexit:
 43675                                  	;retn
 43676                                  
 43677                                  ;----------------------------------------------------------------------------
 43678                                  
 43679                                  print:
 43680 000043B3 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 43681 000043B5 CD21                    	int	21h
 43682                                  prnexit:	; 18/12/2022
 43683 000043B7 C3                      	retn
 43684                                  
 43685                                  ;----------------------------------------------------------------------------
 43686                                  
 43687                                  ;  open device pointed to by dx, al has access code
 43688                                  ;   if unable to open do a device open null device instead
 43689                                  
 43690                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43691                                  	; (SYSINIT:3764h)
 43692                                  open_dev:
 43693 000043B8 E80500                  	call	open_file
 43694 000043BB 7309                    	jnc	short open_dev3
 43695                                  
 43696                                  open_dev1:
 43697 000043BD BA[2044]                	mov	dx,nuldev
 43698                                  	; 18/12/2022
 43699                                  	;call	open_file
 43700                                  ;of_retn:
 43701                                  	;retn
 43702                                  	; 18/12/2022
 43703                                  	;jmp	short open_file
 43704                                  open_file:
 43705 000043C0 B43D                    	mov	ah,OPEN	; 3Dh
 43706 000043C2 F9                      	stc
 43707 000043C3 CD21                    	int	21h
 43708                                  of_retn:	; 18/12/2022
 43709 000043C5 C3                      	retn
 43710                                  
 43711                                  open_dev3:
 43712 000043C6 89C3                    	mov	bx,ax			; handle from open to bx
 43713                                  	;;xor	ax,ax			; get device info
 43714                                  	;;mov	ah,IOCTL ; 44h
 43715                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 43716                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43717                                  	;xor	ax,ax
 43718                                  	;mov	ah,44h	; IOCTL
 43719                                  	; 11/12/2022
 43720 000043C8 B80044                  	mov	ax,4400h ; IOCTL<<8 
 43721                                  
 43722 000043CB CD21                    	int	21h
 43723                                  
 43724 000043CD F6C280                  	test	dl,10000000b ; 80h
 43725 000043D0 75F3                    	jnz	short of_retn
 43726                                  
 43727 000043D2 B43E                    	mov	ah,CLOSE ; 3Eh
 43728 000043D4 CD21                    	int	21h
 43729 000043D6 EBE5                    	jmp	short open_dev1
 43730                                  
 43731                                  ;----------------------------------------------------------------------------
 43732                                  
 43733                                  ; 18/12/2022
 43734                                  %if 0
 43735                                  open_file:
 43736                                  	mov	ah,OPEN	; 3Dh
 43737                                  	stc
 43738                                  	int	21h
 43739                                  	retn
 43740                                  %endif
 43741                                  
 43742                                  ;----------------------------------------------------------------------------
 43743                                  
 43744                                  ; test int24. return back to dos with the fake user response of "fail"
 43745                                  
 43746                                  int24:
 43747 000043D8 B003                    	mov	al,3			; fail the system call
 43748 000043DA CF                      	iret				; return back to dos.
 43749                                  
 43750                                  ; 19/04/2019 - Retro DOS v4.0
 43751                                  
 43752                                  ;----------------------------------------------------------------------------
 43753                                  ; DATA
 43754                                  ;----------------------------------------------------------------------------
 43755                                  
 43756                                  ;include copyrigh.inc			; copyright statement
 43757                                  
 43758                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 43759                                  
 43760                                  ;MsDosVersion6Copyr:
 43761                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 43762                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 43763                                  
 43764                                  ; 22/10/2022
 43765                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 43766                                  
 43767                                  ; 28/12/2022
 43768                                  %if 0
 43769                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43770                                  MsDosVersion5Copyr:
 43771                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 43772                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 43773                                  %endif
 43774                                  
 43775                                  ; 13/04/2024 - Retro DOS v5.0
 43776                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:51EAh	(IBMBIO.COM offset 42266)
 43777                                  %if 0
 43778                                  IBMDOSV71COPYR:
 43779                                  	db 'IBM DOS Version 7.1 (C)Copyright 1981-2002 IBM Corporation '
 43780                                  	db 'Licensed Material - Property of IBM All rights reserved '
 43781                                  %endif
 43782                                  
 43783                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43784                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 43785                                  ; 20/04/2019 - Retro DOS v4.0
 43786                                  ;BOOTMES:
 43787                                  ;	db      13
 43788                                  ;	db      10
 43789                                  ;	db      "MS-DOS version "
 43790                                  ;	db      MAJOR_VERSION + "0"
 43791                                  ;	db      "."
 43792                                  ;	db      (MINOR_VERSION / 10) + "0"
 43793                                  ;	db      (MINOR_VERSION % 10) + "0"
 43794                                  ;	db      13,10
 43795                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 43796                                  ;	; 22/10/2022
 43797                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 43798                                  ;	;
 43799                                  ;	db	0
 43800                                  
 43801                                  	; 01/01/2023 - Retro DOS v4.2
 43802                                  
 43803                                  	; 28/12/2022 - Retro DOS v4.1
 43804                                  ;MsDosVersion5Copyr:
 43805                                  ;  	db	13,10,"MS DOS Version 5.0"
 43806                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 43807                                  
 43808                                  	; 12/12/2022
 43809 000043DB 00                      	db	0
 43810                                  ; 12/12/2022
 43811                                  BOOTMES:
 43812 000043DC 0D0A                    	db	13,10
 43813                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 43814                                  	; 28/12/2022
 43815                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 43816                                  	; 01/01/2023
 43817                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 43818                                  	; 30/12/2023
 43819                                  	;db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 43820                                  	; 09/03/2025
 43821 000043DE 4D696E69444F532076-     	db	"MiniDOS v1.0 (Simplified PCDOS 7.1) "
 43821 000043E7 312E30202853696D70-
 43821 000043F0 6C6966696564205043-
 43821 000043F9 444F5320372E312920 
 43822                                  	
 43823 00004402 0D0A                    	db	13,10
 43824                                  	;db	"by Erdogan Tan [2024] " ; 01/01/2024
 43825 00004404 6279204572646F6761-     	db	"by Erdogan Tan [2025] " ; 09/03/2025
 43825 0000440D 6E2054616E205B3230-
 43825 00004416 32355D20           
 43826 0000441A 0D0A                    	db	13,10
 43827 0000441C 0D0A2400                	db	13,10,"$",0
 43828                                  
 43829 00004420 4E554C00                nuldev:	db	"NUL",0
 43830 00004424 434F4E00                condev:	db	"CON",0
 43831 00004428 41555800                auxdev:	db	"AUX",0
 43832 0000442C 50524E00                prndev:	db	"PRN",0
 43833                                  
 43834                                  ;IFDEF	CONFIGPROC
 43835 00004430 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 43835 00004439 595300             
 43836                                  
 43837 0000443C 413A                    cntry_drv:  db	"A:"
 43838 0000443E 5C                      cntry_root: db	"\"
 43839 0000443F 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 43839 00004448 595300             
 43840                                  	    ;db	52 dup (0)
 43841 0000444B 00<rep 34h>             	    times 52 db 0	
 43842                                  
 43843                                  country_file_signature:
 43844 0000447F FF434F554E545259        	db	0FFh,'COUNTRY'
 43845                                  
 43846                                  cntrycodepage_id: 
 43847 00004487 0000                    	dw	0 	
 43848                                  
 43849                                  ;ENDIF ; CONFIGPROC
 43850                                  
 43851                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43852                                  ; (SYSINIT:5081h)
 43853                                  
 43854                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43855                                  ;ifdef	MULTI_CONFIG
 43856 00004489 00                      newcmd:  db	0			; non-zero if non-std shell specified
 43857 0000448A 40                      tmplate: db	64                      ; must precede commnd
 43858                                  ;endif
 43859                                  
 43860                                  ;ifdef ROMEXEC
 43861                                  ;	db      7                       ; size of commnd line (excl. null)
 43862                                  ;commnd: db	"COMMAND",0
 43863                                  ;	db	56 dup (0)
 43864                                  ;else
 43865                                  	; 02/11/2022
 43866 0000448B 0C                      	db	12                      ; size of commnd line (excl. null)
 43867 0000448C 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 43867 00004495 434F4D00           
 43868                                  	;db	51 dup (0)
 43869 00004499 00<rep 33h>             	times	51 db 0
 43870                                  ;endif
 43871                                  
 43872                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43873                                  ;ifdef	MULTI_CONFIG
 43874 000044CC 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 43874 000044D5 434F4D00           
 43875 000044D9 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 43876 000044DD 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 43876 000044E6 4D4D414E442E434F4D-
 43876 000044EF 00                 
 43877 000044F0 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 43877 000044F9 202F5000           
 43878 000044FD 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 43878 00004506 414E442E434F4D00   
 43879 0000450E 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 43879 00004517 5000               
 43880                                  def_swchr:	
 43881 00004519 00                      	 db	0			; default switchchar (referenced as command_line-1)
 43882                                  ;endif
 43883                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43884                                  command_line:
 43885 0000451A 022F50                  	db	2,"/P"			; default command.com args
 43886                                  	;db	125 dup (0)
 43887 0000451D 00<rep 7Dh>             	times	125 db 0
 43888                                  
 43889                                  pathstring:
 43890                                  	;db	64 dup (0)
 43891 0000459A 00<rep 40h>             	times	64 db 0
 43892                                  
 43893                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43894                                  ; (SYSINIT:51D3h)
 43895                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43896                                  ;%if 0
 43897                                  
 43898                                  dae_flag:
 43899 000045DA 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 43900                                  
 43901                                  ;ifdef	MULTI_CONFIG
 43902                                  
 43903                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 43904                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 43905                                  
 43906                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 43907                                  
 43908 000045DB 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 43909 000045DC 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 43910 000045DD 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 43911 000045DE 00                      bLastCol:	db      0               ; ending column on status line
 43912 000045DF 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 43913 000045E0 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 43914                                                                          ; 2=disable default 2-second delay
 43915 000045E1 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 43916 000045E2 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 43917 000045E4 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 43918 000045E5 01                      bDefBlock:	db      1               ; default block #
 43919 000045E6 00                      bMaxBlock:	db      0               ; maxmimum block #
 43920 000045E7 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 43921 000045E9 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 43922 000045EA 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 43923 000045EB 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 43924 000045F5 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 43925 00004609 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 43926                                  
 43927 0000461D 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 43928 00004625 4D454E5500              szMenu:		db      "MENU",0
 43929 0000462A 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 43930                                  
 43931                                  ;endif	;MULTI_CONFIG
 43932                                  
 43933                                  	; 10/09/2023
 43934                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 43935                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 43936                                  
 43937                                  comtab:	 ; label byte
 43938                                  
 43939                                  ;            cmd len    command         cmd code
 43940                                  ;            -------    -------         --------
 43941                                  
 43942                                  ;ifdef MULTI_CONFIG
 43943 00004631 015B5B                          db      1,      "[",            CONFIG_BEGIN
 43944                                  ;endif
 43945 00004634 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 43946 0000463B 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 43947 00004644 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 43948 0000464D 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 43949 00004656 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 43950 0000465E 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 43950 00004667 474855             
 43951 0000466A 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 43952 0000466F 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 43952 00004678 50                 
 43953                                  ; 07/04/2025 - Mini DOS 1.0
 43954                                  %if 0
 43955                                  	db     4,      "FCBS",         CONFIG_FCBS
 43956                                  %endif
 43957 00004679 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 43958                                  ;ifdef MULTI_CONFIG
 43959 00004680 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 43960                                  ;endif
 43961 00004689 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 43962 00004692 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 43962 0000469B 49474857           
 43963 0000469F 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 43963 000046A8 454C               
 43964                                  ;ifdef MULTI_CONFIG
 43965 000046AA 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 43966 000046B3 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 43966 000046BC 5252               
 43967 000046BE 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 43967 000046C7 554C5441           
 43968 000046CB 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 43968 000046D4 45                 
 43969                                  ;endif
 43970 000046D5 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 43970 000046DE 434B4D             
 43971                                  ;ifdef MULTI_CONFIG
 43972 000046E1 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 43973                                  ;endif
 43974 000046EA 0352454D30                      db      3,      "REM",          CONFIG_REM
 43975                                  ;ifdef MULTI_CONFIG
 43976 000046EF 0353455456                      db      3,      "SET",          CONFIG_SET
 43977                                  ;endif
 43978 000046F4 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 43979                                  ;if    STACKSW
 43980 000046FB 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 43981                                  ;endif
 43982                                  
 43983                                  ; 18/03/2025 - MiniDOS v1.0
 43984                                  %if 0
 43985                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 43986                                  %endif
 43987                                  	; 18/03/2025
 43988 00004703 00                      	db	0
 43989                                  
 43990                                  ; 18/03/2025 - MiniDOS 1.0
 43991                                  %if 0
 43992                                  	; 10/09/2023
 43993                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h
 43994                                  	; 13/04/2024 - Retro DOS v5.0
 43995                                  	db	7,	"DOSDATA",	CONFIG_DOSDATA ; 'T'
 43996                                  	db	0
 43997                                  %endif
 43998                                  
 43999                                  ;%endif ; 02/11/2022
 44000                                  
 44001                                  ; 01/01/2023 - Retro DOS v4.2
 44002                                  %if 0
 44003                                  
 44004                                  comtab:
 44005                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44006                                  	; (SYSINIT:38EDh)
 44007                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 44008                                  	db      5,      "BREAK",        CONFIG_BREAK
 44009                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 44010                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 44011                                  	db      5,      "FILES",        CONFIG_FILES
 44012                                  	db      4,      "FCBS",         CONFIG_FCBS
 44013                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 44014                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 44015                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 44016                                  	db      6,      "STACKS",       CONFIG_STACKS
 44017                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 44018                                  	db      5,      "SHELL",        CONFIG_SHELL
 44019                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 44020                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 44021                                  	db      3,      "REM",          CONFIG_REM
 44022                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 44023                                  	db      3,      "DOS",          CONFIG_DOS
 44024                                  	db	0
 44025                                  
 44026                                  %endif
 44027                                  
 44028                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44029                                  ; (SYSINIT:530Ch)
 44030                                  
 44031                                  ; 13/04/2024 - Retro DOS v5.0
 44032                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:555Ah)
 44033                                  
 44034                                  deviceparameters:	
 44035                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 44036                                  devp.specialfunc:	; deviceparameters +
 44037 00004704 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 44038                                  devp.devtype:
 44039 00004705 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 44040                                  devp.devattr:
 44041 00004706 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 44042                                  devp.cylinders:
 44043 00004708 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 44044                                  
 44045                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44046                                  
 44047                                  	;times	286	db 0
 44048                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 44049 0000470A 00                      	db	0
 44050                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 44051                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 44052 0000470B 0000                    	dw	0
 44053                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 44054 0000470D 00                      	db	0	
 44055 0000470E 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 44056 00004710 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 44057 00004711 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 44058                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 44059 00004713 0000                    	dw	0
 44060                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 44061 00004715 00                      	db	0
 44062 00004716 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 44063                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 44064 00004718 0000                    	dw	0
 44065                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 44066 0000471A 0000                    	dw	0	
 44067                                  
 44068                                  	; 13/04/2024 - Retro DOS v5.0
 44069                                  	; (PCDOS 7.1 IBMBIO.COM)
 44070 0000471C 00<rep 44h>             	times	68 db 0	; PCDOS 7.1 (FAT32 BPB)
 44071                                  	;;times	14 db 0	; MSDOS 6.21
 44072                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 44073                                  	;dw	0
 44074                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 44075                                  	;dw	0
 44076                                  	;times	6 db 0	
 44077                                  
 44078                                  devp.trktblents:
 44079 00004760 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 44080                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 44081 00004762 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 44082                                  			; 63*4 bytes
 44083                                  
 44084                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44085                                  ; (SYSINIT:5430h)
 44086                                  
 44087                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44088                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:56B4h)
 44089                                  	
 44090 0000485E 0200                    hlim:	dw	2
 44091 00004860 0900                    slim:	dw	9
 44092                                  
 44093 00004862 00                      drive:	db	0
 44094                                  
 44095                                  switches:
 44096 00004863 0000                    	dw	0
 44097                                  
 44098                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44099                                  ; (SYSINIT:5437h)
 44100                                  
 44101                                  ; the following are the recommended bpbs for the media that
 44102                                  ; we know of so far.
 44103                                  
 44104                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44105                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 44106                                  
 44107                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44108                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 44109                                  
 44110                                  ; 48 tpi diskettes
 44111                                  
 44112 00004865 0002                    bpb48t:	dw	512
 44113 00004867 02                      	db	2
 44114 00004868 0100                    	dw	1
 44115 0000486A 02                      	db	2
 44116 0000486B 7000                    	dw	112
 44117 0000486D D002                    	dw	2*9*40 ; 720
 44118 0000486F FD                      	db	0FDh
 44119 00004870 0200                    	dw	2
 44120 00004872 0900                    	dw	9
 44121 00004874 0200                    	dw	2
 44122 00004876 00000000                	dd	0
 44123 0000487A 00000000                        dd      0
 44124                                  	; 27/12/2023
 44125 0000487E 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44126 0000489A 90                      	db	90h	
 44127                                  
 44128                                  ; 96tpi diskettes
 44129                                  
 44130 0000489B 0002                    bpb96t:	dw	512
 44131 0000489D 01                      	db	1
 44132 0000489E 0100                    	dw	1
 44133 000048A0 02                      	db	2
 44134 000048A1 E000                    	dw	224
 44135 000048A3 6009                    	dw	2*15*80 ; 2400
 44136 000048A5 F9                      	db	0F9h
 44137 000048A6 0700                    	dw	7
 44138 000048A8 0F00                    	dw	15
 44139 000048AA 0200                    	dw	2
 44140 000048AC 00000000                	dd	0
 44141 000048B0 00000000                        dd      0
 44142                                  	; 27/12/2023
 44143 000048B4 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44144 000048D0 90                      	db	90h	
 44145                                  
 44146                                  ; 3 1/2 inch diskette bpb
 44147                                  
 44148 000048D1 0002                    bpb35:	dw	512
 44149 000048D3 02                      	db	2
 44150 000048D4 0100                    	dw	1
 44151 000048D6 02                      	db	2
 44152 000048D7 7000                    	dw	112
 44153 000048D9 A005                    	dw	2*9*80 ; 1440
 44154 000048DB F9                      	db	0F9h
 44155 000048DC 0300                    	dw	3
 44156 000048DE 0900                    	dw	9
 44157 000048E0 0200                    	dw	2
 44158 000048E2 00000000                	dd	0
 44159 000048E6 00000000                        dd      0
 44160                                  	; 27/12/2023
 44161 000048EA 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44162 00004906 90                      	db	90h
 44163                                        
 44164 00004907 0002                    bpb35h:	dw	512
 44165 00004909 01                      	db	1
 44166 0000490A 0100                    	dw	1
 44167 0000490C 02                      	db	2
 44168 0000490D E000                    	dw	224
 44169 0000490F 400B                    	dw	2*18*80 ; 2880
 44170 00004911 F0                      	db	0F0h
 44171 00004912 0900                    	dw	9
 44172 00004914 1200                    	dw	18
 44173 00004916 0200                    	dw	2
 44174 00004918 00000000                	dd	0
 44175 0000491C 00000000                        dd      0
 44176                                  	; 27/12/2023
 44177 00004920 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44178 0000493C 90                      	db	90h
 44179                                  
 44180                                  ; m037 - BEGIN
 44181                                  
 44182 0000493D 0002                    bpb288:	dw	512
 44183 0000493F 02                      	db	2
 44184 00004940 0100                    	dw	1
 44185 00004942 02                      	db	2
 44186 00004943 F000                    	dw	240
 44187 00004945 8016                    	dw	2*36*80 ; 5760
 44188 00004947 F0                      	db	0F0h
 44189 00004948 0900                    	dw	9
 44190 0000494A 2400                    	dw	36
 44191 0000494C 0200                    	dw	2
 44192 0000494E 00000000                	dd	0
 44193 00004952 00000000                        dd      0
 44194                                  	; 27/12/2023
 44195 00004956 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44196 00004972 90                      	db	90h
 44197                                  
 44198                                  ; m037 - END
 44199                                  
 44200                                  ; 12/05/2019
 44201                                  
 44202 00004973 90                      align 2
 44203                                  
 44204                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44205                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 44206                                  
 44207                                  ; 13/04/2024 - Retro DOS v5.0
 44208                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5738h)
 44209                                  
 44210 00004974 [6548]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 44211 00004976 [9B48]                  	    dw	    bpb96t		; 96tpi drives
 44212 00004978 [D148]                  	    dw	    bpb35		; 3.5" drives
 44213                                  ; the following are not supported, so default to 3.5" media layout
 44214 0000497A [D148]                  	    dw	    bpb35		; not used - 8" drives
 44215 0000497C [D148]                  	    dw	    bpb35		; not used - 8" drives
 44216 0000497E [D148]                  	    dw	    bpb35		; not used - hard files
 44217 00004980 [D148]                  	    dw	    bpb35		; not used - tape drives
 44218 00004982 [0749]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 44219 00004984 [D148]                  	    dw	    bpb35		; ERIMO				m037
 44220 00004986 [3D49]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 44221                                  
 44222                                  switchlist: 
 44223 00004988 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 44224                                  
 44225                                  ;----------------------------------------------------------------------------
 44226                                  ; Messages
 44227                                  ;----------------------------------------------------------------------------
 44228                                  
 44229                                  ; 19/04/2019 - Retro DOS v4.0
 44230                                  
 44231                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 44232                                  
 44233 00004991 00                      	db 	0
 44234                                  
 44235                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44236                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 44237                                  
 44238                                  ; 13/04/2024
 44239                                  ; MSDOS 6.22 IO.SYS - SYSINIT:559Eh
 44240                                  
 44241                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44242                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5756h
 44243                                  
 44244                                  badopm:
 44245 00004992 0D0A                    	db	0Dh,0Ah 
 44246 00004994 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 44246 0000499D 7A656420636F6D6D61-
 44246 000049A6 6E6420696E20434F4E-
 44246 000049AF 4649472E535953     
 44247                                  crlfm:
 44248 000049B6 0D0A24                  	db	0Dh,0Ah,'$'
 44249                                  badparm:
 44250 000049B9 0D0A                    	db	0Dh,0Ah
 44251 000049BB 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 44251 000049C4 6E64206F7220706172-
 44251 000049CD 616D6574657273202D-
 44251 000049D6 2024               
 44252                                  badsiz_pre:
 44253 000049D8 0D0A                    	db	0Dh,0Ah
 44254 000049DA 536563746F72207369-     	db	'Sector size too large in file $'
 44254 000049E3 7A6520746F6F206C61-
 44254 000049EC 72676520696E206669-
 44254 000049F5 6C652024           
 44255                                  badld_pre:
 44256 000049F9 0D0A                    	db	0Dh,0Ah
 44257 000049FB 426164206F72206D69-     	db	'Bad or missing $'
 44257 00004A04 7373696E672024     
 44258                                  badcom:
 44259 00004A0B 436F6D6D616E642049-     	db	'Command Interpreter',0
 44259 00004A14 6E7465727072657465-
 44259 00004A1D 7200               
 44260                                  badcountry:
 44261 00004A1F 0D0A                    	db	0Dh,0Ah
 44262 00004A21 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 44262 00004A2A 6F756E74727920636F-
 44262 00004A33 6465206F7220636F64-
 44262 00004A3C 6520706167650D0A24 
 44263                                  badcountrycom:
 44264 00004A45 0D0A                    	db	0Dh,0Ah
 44265 00004A47 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 44265 00004A50 434F554E5452592063-
 44265 00004A59 6F6D6D616E640D0A24 
 44266                                  insufmemory:
 44267 00004A62 0D0A                    	db	0Dh,0Ah
 44268 00004A64 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 44268 00004A6D 656E74206D656D6F72-
 44268 00004A76 7920666F7220434F55-
 44268 00004A7F 4E5452592E53595320-
 44268 00004A88 66696C650D0A24     
 44269                                  badmem:
 44270 00004A8F 0D0A                    	db	0Dh,0Ah
 44271 00004A91 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 44271 00004A9A 74696F6E20746F6F20-
 44271 00004AA3 6C6172676520666F72-
 44271 00004AAC 206D656D6F72790D0A-
 44271 00004AB5 24                 
 44272                                  badblock:
 44273 00004AB6 0D0A                    	db	0Dh,0Ah
 44274 00004AB8 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 44274 00004AC1 626C6F636B20646576-
 44274 00004ACA 696365730D0A24     
 44275                                  badstack:
 44276 00004AD1 0D0A                    	db	0Dh,0Ah
 44277 00004AD3 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 44277 00004ADC 5441434B2070617261-
 44277 00004AE5 6D65746572730D0A24 
 44278                                  	; 18/12/2022
 44279                                  ;badorder:
 44280                                  	;db	0Dh,0Ah
 44281                                  	;db	'Incorrect order in CONFIG.SYS line $'
 44282                                  errorcmd:
 44283 00004AEE 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 44283 00004AF7 434F4E4649472E5359-
 44283 00004B00 53206C696E652024   
 44284                                  
 44285                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44286                                  ; (SYSINIT:566Eh)
 44287                                  
 44288                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44289                                  ;%if 0
 44290                                  
 44291 00004B08 4F4E                    OnOff:	db	'ON'
 44292 00004B0A 4F4646                  OnOff2:	db	'OFF'
 44293                                  
 44294                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44295                                  	; (SYSINIT:5673h)
 44296                                  ;StartMsg:
 44297                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 44298                                  ;	db	0Ah,0
 44299                                  
 44300                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44301                                  	; (SYSINIT:58F7h)
 44302                                  StartMsg:
 44303 00004B0D 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 44303 00004B16 504320444F532E2E2E-
 44303 00004B1F 0D0A               
 44304 00004B21 0A00                    	db	0Ah,0
 44305                                  
 44306                                  _$PauseMsg:
 44307                                  	; 17/12/2023
 44308                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 44309                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 44310 00004B23 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 44310 00004B2C 206B657920746F2063-
 44310 00004B35 6F6E74696E75652E2E-
 44310 00004B3E 2E0D0A24           
 44311                                  _$CleanMsg:
 44312                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44313                                  	; 17/12/2023
 44314 00004B42 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44314 00004B4B 20627970617373696E-
 44314 00004B54 6720796F757220434F-
 44314 00004B5D 4E4649472E53595320-
 44314 00004B66 616E64204155544F45-
 44314 00004B6F 5845432E4241542066-
 44314 00004B78 696C65732E0D0A24   
 44315                                  _$InterMsg:
 44316                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44317                                  	; 17/12/2023
 44318 00004B80 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44318 00004B89 6C6C2070726F6D7074-
 44318 00004B92 20796F7520746F2063-
 44318 00004B9B 6F6E6669726D206561-
 44318 00004BA4 636820434F4E464947-
 44318 00004BAD 2E53595320636F6D6D-
 44318 00004BB6 616E642E0D0A24     
 44319                                  _$MenuHeader:
 44320 00004BBD 0D0A                    	db	0Dh,0Ah
 44321                                  	; 17/12/2023
 44322                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 44323                                  	;db	'  '
 44324                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44325                                  	;db 	0Dh,0Ah,'$'
 44326                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 44327 00004BBF 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 44327 00004BC8 372E31205374617274-
 44327 00004BD1 7570204D656E750D0A 
 44328 00004BDA 2020                    	db	'  '
 44329 00004BDC CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44330 00004BF3 0D0A24                  	db 	0Dh,0Ah,'$'
 44331                                  _$MenuPrmpt:
 44332 00004BF6 2020456E7465722061-     	db	'  Enter a choice: $'
 44332 00004BFF 2063686F6963653A20-
 44332 00004C08 24                 
 44333                                  _$StatusLine:
 44334 00004C09 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 44334 00004C12 207374617274757020-
 44334 00004C1B 66696C65732046383D-
 44334 00004C24 436F6E6669726D2065-
 44334 00004C2D 616368206C696E6520-
 44334 00004C36 6F6620434F4E464947-
 44334 00004C3F 2E53595320         
 44335 00004C44 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 44335 00004C4D 5845432E424154205B-
 44335 00004C56 205D24             
 44336                                  _$InterPrmpt:
 44337                                  	;db	' [Y,N]?$'
 44338                                  	; 13/04/2024
 44339                                  	; 04/08/2023
 44340 00004C59 205B592C4E2C455343-     	db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 44340 00004C62 5D3F24             
 44341 00004C65 59455324                _$YES:	db	'YES$'
 44342 00004C69 4E4F2024                _$NO:	db	'NO $'
 44343                                  _$TimeOut:
 44344 00004C6D 54696D652072656D61-     	db	'Time remaining: $'
 44344 00004C76 696E696E673A2024   
 44345                                  badcomprmpt:
 44346                                  	;db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 44347                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 44348 00004C7E 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (for example, C:\COMMAND.COM)'
 44348 00004C87 72656374206E616D65-
 44348 00004C90 206F6620436F6D6D61-
 44348 00004C99 6E6420496E74657270-
 44348 00004CA2 72657465722028666F-
 44348 00004CAB 72206578616D706C65-
 44348 00004CB4 2C20433A5C434F4D4D-
 44348 00004CBD 414E442E434F4D29   
 44349 00004CC5 0D0A24                  	db	0Dh,0Ah,'$'
 44350                                  _$AutoPrmpt:
 44351 00004CC8 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 44351 00004CD1 55544F455845432E42-
 44351 00004CDA 4154205B592C4E5D3F-
 44351 00004CE3 24                 
 44352                                  
 44353                                  ;%endif ; 02/11/2022
 44354                                  
 44355                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44356                                  ; (SYSINIT:5840h)
 44357                                  
 44358                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44359                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 44360                                  
 44361                                  TooManyDrivesMsg:
 44362 00004CE4 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 44362 00004CED 4C6F676963616C2064-
 44362 00004CF6 726976657320706173-
 44362 00004CFF 74205A3A2065786973-
 44362 00004D08 7420616E642077696C-
 44362 00004D11 6C2062652069676E6F-
 44362 00004D1A 7265640D0A24       
 44363                                  
 44364                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 44365                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 44366                                  	;db	7 dup(0)
 44367                                  
 44368                                  	;times	7 db 0
 44369                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44370                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 44371                                  	; 09/12/2022
 44372                                  	;times 4 db 0
 44373                                  
 44374                                  	; 08/04/2024 - Retro DOS v5.0
 44375                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 44376                                  baddblspace:
 44377 00004D20 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 44377 00004D29 73797374656D20636F-
 44377 00004D32 6D706F6E656E742069-
 44377 00004D3B 73206E6F7420696E73-
 44377 00004D44 74616C6C65640D0A24-
 44377 00004D4D 00                 
 44378                                  	;db	7 dup(0)
 44379                                  
 44380                                  ;----------------------------------------------------------------------------
 44381                                  		; 09/12/2022
 44382                                  		;db 0
 44383                                  
 44384                                  number3div	equ ($-SYSINIT$)
 44385                                  number3mod	equ (number3div % 16)
 44386                                  
 44387                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 44388 00004D4E 00<rep 2h>              		times (16-number3mod) db 0
 44389                                  %endif
 44390                                  
 44391                                  ;---------------------------------------------------------------------------- 
 44392                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 44393                                  ;---------------------------------------------------------------------------- 
 44394                                  
 44395                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 44396                                  
 44397                                  ;----------------------------------------------------------------------------
 44398                                  ; 20/04/2019 - Retro DOS v4.0
 44399                                  
 44400                                  ; 09/12/2022
 44401                                  ;
 44402                                  ;bss_start:
 44403                                  ;
 44404                                  ;ABSOLUTE bss_start
 44405                                  ;
 44406                                  ;alignb 16
 44407                                  
 44408                                  SI_end:  ; SI_end equ $
 44409                                  
 44410                                  ;----------------------------------------------------------------------------
 44411                                  
 44412                                  ;sysinitseg	ends
 44413                                  
 44414                                  ; ***************************************************************************
 44415                                  
 44416                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 44417                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 44418                                  
 44419                                  SYSINITSIZE	equ SI_end - SYSINIT$
 44420                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 44421                                  
 44422                                  ;----------------------------------------------------------------------------
 44423                                  ; End of Retro DOS v5.0 IBMBIO.COM (IO.SYS) source by Erdogan Tan (2023)
 44424                                  ;----------------------------------------------------------------------------
 44425                                  
 44426                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 44427                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 44428                                  ;----------------------------------------------------------------------------
 44429                                  ;----------------------------------------------------------------------------
 44430                                  
 44431                                  ; ----------------------------------------------------------------------------
 44432                                  ; START OF PCDOS 7.1 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 44433                                  ; ----------------------------------------------------------------------------
 44434                                  ; 02/10/2023 - Retro DOS v5.0
 44435                                  ; 03/03/2025 - MiniDOS v1.0
 44436                                  
 44437                                  ;MSDOS_BIN_OFFSET:
 44438                                  IBMDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 44439                                  		
 44440                                  		; 10/07/2024
 44441                                  		; 07/07/2024
 44442                                  		; 08/05/2024
 44443                                  		; 14/04/2024
 44444                                  		; 02/10/2023 - Retro DOS v5.0 - PCDOS 7.1 KERNEL
 44445                                  		;incbin	'IBMDOS7.BIN'
 44446                                  
 44447                                  		; 11/05/2025
 44448                                  		; 10/05/2025
 44449                                  		; 24/04/2025
 44450                                  		; 16/03/2025
 44451                                  		; 07/03/2025
 44452                                  		; 03/03/2025 - MiniDOS v1.0 - PCDOS 7.1 KERNEL
 44453 00004D50 <bin 9848h>             		incbin	'KERNEL.BIN'
 44454                                  
 44455                                  ; 28/09/2023	
 44456                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 44457                                  
 44458                                  align 2
 44459                                  
 44460                                  ; 21/12/2022
 44461                                  ;;END_OF_KERNEL:
 44462                                  ;END_OF_KERNEL equ $
 44463                                  
 44464                                  ; 28/09/2023
 44465                                  S3SIZE equ $-$$
 44466                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 44467                                  
 44468                                  ;=============================================================================
 44469                                  ;	END
 44470                                  ;=============================================================================
 44471                                  ; Retro DOS v5.0 by Erdogan Tan (Redevelopment of PC-DOS 7.1 KERNEL via NASM)
 44472                                  ; ------------------------------
 44473                                  ; APRIL 2024, ISTANBUL - TURKIYE.
