;
; MSDOS2.ASM - MSDOS 2.11 KERNEL SOURCE CODE - Erdogan Tan, 18/04/2018
; 						(Assembler: NASM 2.11)
;
; ###########################################################################
; #	This file is generated by The Interactive Disassembler (IDA)	    #
; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
; #			 Licensed to: Freeware version			    #
; ###########################################################################
;
; Input	MD5   :	1D55763C742AEA72C3B64A0E8564E585

; ---------------------------------------------------------------------------
; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\IBMDOS.COM
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 4318h Loaded length: 4318h

ENTRYPOINTSEG   EQU     0CH
MAXDIF          EQU     0FFFH
SAVEXIT         EQU     10

; <interrupt definitions>

INTTAB          EQU     20H
INTBASE         EQU     4 * INTTAB
ENTRYPOINT      EQU     INTBASE+40H

;
; interrupt assignments
;
int_abort           EQU     INTTAB          ; abort process
int_command         EQU     int_abort+1     ; call MSDOS
int_terminate       EQU     int_abort+2     ; int to terminate address
int_ctrl_c          EQU     int_abort+3     ; ^c trapper
int_fatal_abort     EQU     int_abort+4     ; hard disk error
int_disk_read       EQU     int_abort+5     ; logical sector disk read
int_disk_write      EQU     int_abort+6     ; logical sector disk write
int_keep_process    EQU     int_abort+7     ; terminate program and stay resident
int_spooler         EQU     int_abort+8     ; spooler call
int_fastcon         EQU     int_abort+9     ; fast CON interrupt

addr_int_abort          EQU    4 * int_abort
addr_int_command        EQU    4 * int_command
addr_int_terminate      EQU    4 * int_terminate
addr_int_ctrl_c         EQU    4 * int_ctrl_c
addr_int_fatal_abort    EQU    4 * int_fatal_abort
addr_int_disk_read      EQU    4 * int_disk_read
addr_int_disk_write     EQU    4 * int_disk_write
addr_int_keep_process   EQU    4 * int_keep_process
addr_int_spooler        EQU    4 * int_spooler
addr_int_fastcon        EQU    4 * int_fastcon

;============================================================================
; MSDATA.ASM
;============================================================================

; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; SUBTTL Uninitialized data overlayed by initialization code
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;PAGE
;DATA    SEGMENT WORD PUBLIC 'DATA'
; Init code overlaps with data area below

;        ORG     0
;        i_am    INBUF,128
;        I_AM    CONBUF,131              ; The rest of INBUF and console buffer
;        i_am    TIMEBUF,6
;        I_AM    DEVIOBUF,2              ; Buffer for I/O under file assignment
;        I_AM    EXITHOLD,DWORD

; Retro DOS 2.0 NASM modifications !!! (02/03/2018)
INBUF	 EQU	DATASEGMENT+0	; DATASEGMENT = DOSINIT addr (parag aligned)
CONBUF	 EQU	INBUF+128	; DATASEGMENT+128
TIMEBUF	 EQU	CONBUF+131	; DATASEGMENT+259
DEVIOBUF EQU	TIMEBUF+6	; DATASEGMENT+265
EXITHOLD EQU	DEVIOBUF+2	; DATASEGMENT+267

        ;PUBLIC  DevFCB
;DEVFCB	LABEL   BYTE	; Uses NAME1, NAME2, NAME3 combined
DEVFCB	EQU	EXITHOLD+4	; DATASEGMENT+271

; WARNING..  do not alter size or relative location of the following 4 items
; without first examining FCB_RENAME
        ;I_AM    NAME1,12                ; File name buffer
        ;I_AM    ATTRIB,BYTE
        ;I_AM    NAME2,13
        ;I_AM    NAME3,14

        ;I_AM    EXTFCB,BYTE
NAME1	EQU	EXITHOLD+4	; DATASEGMENT+271 ; File name buffer
ATTRIB	EQU	NAME1+12	; DATASEGMENT+283
NAME2	EQU	ATTRIB+1	; DATASEGMENT+284
NAME3	EQU	NAME2+13	; DATASEGMENT+297
EXTFCB  EQU	NAME3+14	; DATASEGMENT+311

; WARNING - the following two items are accessed as a word
        ;I_AM    CREATING,BYTE
        ;I_AM    DELALL,BYTE
CREATING EQU	EXTFCB+1	; DATASEGMENT+312 
DELALL	EQU	CREATING+1	; DATASEGMENT+313 	

        ;I_AM    FoundDel,BYTE
FOUNDDEL EQU	DELALL+1	; DATASEGMENT+314	

        ;I_AM    user_SP,WORD
        ;I_AM    user_SS,WORD
        ;I_AM    CONTSTK,WORD
        ;I_AM    SECCLUSPOS,BYTE	; Position of first sector 
				 	; within cluster
        ;I_AM    DSKERR,BYTE
        ;I_AM    TRANS,BYTE
        ;I_AM    READOP,BYTE
        ;I_AM    THISDRV,BYTE
        ;I_AM    THISDPB,DWORD
        ;I_AM    CLUSFAC,BYTE

user_SP	EQU	FOUNDDEL+1	; DATASEGMENT+315		
user_SS	EQU	user_SP+2	; DATASEGMENT+317 
CONTSTK	EQU	user_SS+2	; DATASEGMENT+319 
SECCLUSPOS EQU	CONTSTK+2	; DATASEGMENT+321 
DSKERR	EQU	SECCLUSPOS+1	; DATASEGMENT+322 
TRANS	EQU	DSKERR+1	; DATASEGMENT+323 
READOP	EQU	TRANS+1		; DATASEGMENT+324 
THISDRV	EQU	READOP+1	; DATASEGMENT+325 
THISDPB	EQU	THISDRV+1	; DATASEGMENT+326 
CLUSFAC	EQU	THISDPB+4	; DATASEGMENT+330 

; WARNING - the following two items are accessed as a word
        ;I_AM    DRIVESPEC,BYTE
        ;I_AM    ROOTSTART,BYTE
DRIVESPEC EQU	CLUSFAC+1	; DATASEGMENT+331	
ROOTSTART EQU	DRIVESPEC+1	; DATASEGMENT+332 

        ;I_AM    CLUSSPLIT,BYTE
        ;i_am    INSMODE,BYTE
        ;I_AM    CLUSSAVE,WORD
        ;I_AM    CLUSSEC,WORD
        ;I_AM    PREREAD,WORD		; 0 means preread; 1 means optional
        ;I_AM    FATBYT,WORD
        ;I_AM    DEVPT,DWORD
        ;I_AM    THISFCB,DWORD		; Address of user FCB

CLUSSPLIT EQU	ROOTSTART+1  	; DATASEGMENT+333 
INSMODE	EQU	CLUSSPLIT+1	; DATASEGMENT+334	
CLUSSAVE EQU	INSMODE+1	; DATASEGMENT+335	
CLUSSEC	EQU	CLUSSAVE+2	; DATASEGMENT+337	
PREREAD	EQU	CLUSSEC+2	; DATASEGMENT+339 ; 0 means preread; 1 means optional
FATBYT	EQU	PREREAD+2	; DATASEGMENT+341	
DEVPT	EQU	FATBYT+2	; DATASEGMENT+343 
THISFCB	EQU	DEVPT+4		; DATASEGMENT+347 ; Address of user FCB  

        ;I_AM    NEXTADD,WORD
        ;I_AM    RECPOS,4
        ;I_AM    RECCNT,WORD
        ;I_AM    LASTPOS,WORD
        ;I_AM    CLUSNUM,WORD
        ;I_AM    DIRSEC,WORD
        ;I_AM    DIRSTART,WORD
        ;I_AM    SECPOS,WORD		; Position of first sector accessed
        ;I_AM    VALSEC,WORD		; Number of valid (previously written)
	;				; sectors

NEXTADD	EQU 	THISFCB+4	; DATASEGMENT+351
RECPOS	EQU	NEXTADD+2	; DATASEGMENT+353
RECCNT	EQU	RECPOS+4	; DATASEGMENT+357 
LASTPOS	EQU	RECCNT+2	; DATASEGMENT+359 
CLUSNUM	EQU	LASTPOS+2	; DATASEGMENT+361	
DIRSEC	EQU	CLUSNUM+2	; DATASEGMENT+363	
DIRSTART EQU	DIRSEC+2	; DATASEGMENT+365 
SECPOS	EQU	DIRSTART+2 	; DATASEGMENT+367 ; Position of first sector accessed
VALSEC	EQU	SECPOS+2	; DATASEGMENT+369 ; SECPOS+2 ; Number of valid
						  	     ; (previously written)
	;						     ; sectors

        ;I_AM    BYTSECPOS,WORD		; Position of first byte within sector
        ;I_AM    BYTPOS,4		; Byte position in file of access
        ;I_AM    BYTCNT1,WORD		; No. of bytes in first sector
        ;I_AM    BYTCNT2,WORD		; No. of bytes in last sector
        ;I_AM    SECCNT,WORD		; No. of whole sectors
        ;I_AM    ENTFREE,WORD
        ;I_AM    ENTLAST,WORD
        ;I_AM    NXTCLUSNUM,WORD
        ;I_AM    GROWCNT,DWORD
        ;I_AM    CURBUF,DWORD
        ;I_AM    VOLID,BYTE
        ;I_AM    NULLDEVPT,DWORD
        ;I_AM    CINSAV,DWORD
        ;I_AM    CINDSAV,BYTE
        ;I_AM    COUTDSAV,BYTE
        ;I_AM    COUTSAV,DWORD

BYTSECPOS EQU	VALSEC+2 	; DATASEGMENT+371 ; Position of first byte within sector
BYTPOS	EQU	BYTSECPOS+2	; DATASEGMENT+373 ; Byte position in file of access
BYTCNT1	EQU	BYTPOS+4 	; DATASEGMENT+377 ; No. of bytes in first sector
BYTCNT2	EQU	BYTCNT1+2 	; DATASEGMENT+379 ; No. of bytes in last sector
SECCNT	EQU	BYTCNT2+2 	; DATASEGMENT+381 ; No. of whole sectors
ENTFREE	EQU	SECCNT+2	; DATASEGMENT+383	
ENTLAST	EQU	ENTFREE+2	; DATASEGMENT+385	
NXTCLUSNUM EQU	ENTLAST+2	; DATASEGMENT+387	
GROWCNT	EQU	NXTCLUSNUM+2	; DATASEGMENT+389	
CURBUF	EQU	GROWCNT+4	; DATASEGMENT+393	
VOLID	EQU	CURBUF+4	; DATASEGMENT+397	
NULLDEVPT EQU	VOLID+1		; DATASEGMENT+398	
CINSAV	EQU	NULLDEVPT+4	; DATASEGMENT+402	
CINDSAV EQU	CINSAV+4	; DATASEGMENT+406	
COUTDSAV EQU	CINDSAV+1	; DATASEGMENT+407	
COUTSAV EQU	COUTDSAV+1	; DATASEGMENT+408 
        
	;PUBLIC  SaveBX
SaveBX	EQU	COUTSAV+4 	; DATASEGMENT+412 ; DW ?
        ;PUBLIC  SaveDS
SaveDS  EQU	SaveBX+2  	; DATASEGMENT+414 ; DW ?
        ;I_AM    ConC_spsave,WORD
ConC_spsave EQU	SaveDS+2	; DATASEGMENT+416 

        ;I_AM    exit_code,WORD		; exit code of last proc.
        ;I_am    exit_type,BYTE		; type of exit...
exit_code EQU	ConC_spsave+2	; DATASEGMENT+418 
exit_type EQU	exit_code+2	; DATASEGMENT+420 

;       IF      IBM
;;For 2.00 this pads the DOS so that on a 2 disk IBM PC with no
;;CONFIG.SYS file the space taken up by BIOS, DOS, res COMMAND is
;;about 24K
;IBMPAD  DB      540h DUP(?)
;       ENDIF

; make those pushes fast!!!
;EVEN
        ;DB      0A0H DUP (?)
        ;I_am    AuxStack,0A0h
        ;I_AM    DSKSTACK,0A0h		; Stack space
AUXSTACK EQU	exit_type+2+160	; DATASEGMENT+422+160
DSKSTACK EQU	AUXSTACK+160	; DATASEGMENT+742

	;PUBLIC  IOSTACK
;IOSTACK LABEL   BYTE
IOSTACK EQU	DSKSTACK+160	; DATASEGMENT+902	

        ;PUBLIC  NSS
;NSS         DW      ?
;        PUBLIC  NSP
;NSP         DW      ?
NSS	EQU	IOSTACK+0	; DATASEGMENT+902
NSP	EQU	NSS+2		; DATASEGMENT+904


;============================================================================
; XENIX.ASM
;============================================================================
; 02/04/2018

;DATA        SEGMENT BYTE PUBLIC 'DATA'
;
;open_name   DW  ?
;            DW  ?
;open_access DB  ?
;open_jfn    DW  ?                       ; accessed as DD
;open_jfn_b  DW  ?                       ; accessed as DD with above
;open_sfn    DW  ?
;open_sfoff  DW  ?                       ; accessed as DD
;open_sfn_b  DW  ?                       ; accessed as DD with above
;open_devid  DB  ?
;Cr_read_only    DB  ?
;rename_source   DD  ?
;rename_dest     DD  ?
;
;DATA        ENDS

open_name    equ NSP+2		; DATASEGMENT+906
open_access  equ open_name+4	; DATASEGMENT+910
open_jfn     equ open_access+1	; DATASEGMENT+911
open_jfn_b   equ open_jfn+2	; DATASEGMENT+913
open_sfn     equ open_jfn_b+2	; DATASEGMENT+915
open_sfoff   equ open_sfn+2	; DATASEGMENT+917
open_sfn_b   equ open_sfoff+2	; DATASEGMENT+919
open_devid   equ open_sfn_b+2	; DATASEGMENT+921
Cr_read_only equ open_devid+1	; DATASEGMENT+922
rename_source equ Cr_read_only+1 ; DATASEGMENT+923
rename_dest  equ rename_source+4 ; DATASEGMENT+927
;		

;============================================================================
; XENIX2.ASM
;============================================================================
; 02/04/2018

;DATA        SEGMENT BYTE PUBLIC 'DATA'

;PushSave    DW      ?
;PushES      DW      ?
;PushBX      DW      ?
;xenix_count DW      ?

;DATA	ENDS

;align 2

; 15/04/2018

PushSave     equ rename_dest+4	; DATASEGMENT+932
PushES	     equ PushSave+2	; DATASEGMENT+934
PushBX	     equ PushES+2	; DATASEGMENT+936
xenix_count  equ PushBX+2	; DATASEGMENT+938

; 16/04/2018
sf_default_number equ 5
sf_entry_size equ 40	 	
				

; *****	; Total uninitialized data (segment) size = 940 bytes ; *****
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

;PAGE
;        INCLUDE MSINIT.ASM


; ###########################################################################

[BITS 16]
[ORG 0]


		;jmp	SYSBUF
		jmp	DOSINIT

; ---------------------------------------------------------------------------
DEVSTRLEN	db 3			; DATA XREF: seg000:03D6w
					; arena_next+2r ...
DEVSTRING	db  44h	; D
		db  45h	; E		; DATA XREF: SETMEM+37w
		db  56h	; V		; DATA XREF: SETMEM+2Aw
SFTABL		dw 0FFFFh		; DATA XREF: seg000:SFT_ADDRo
					; SETMEM+2Dw
		dw 0FFFFh		; DATA XREF: seg000:33EAw

		dw sf_default_number	; Number of entries in table (=5)
		
		times (sf_default_number*sf_entry_size) db 0  ; 5*40=200

NoSetDir	db 0			; DATA XREF: STATCHK-2532w
					; GETPATH:loc_1726r ...
DidCTRLC	db 0			; DATA XREF: STATCHK+9Fw seg000:34CEw
SpaceFlag	db 0			; DATA XREF: seg000:MAKEFCBw
					; seg000:2E92r	...
CARPOS		db 0			; DATA XREF: OUTT+8w OUTT+53r	...
STARTPOS	db 0			; DATA XREF: $STD_CON_STRING_INPUT+23w
					; $STD_CON_STRING_INPUT+B6r ...
PFLAG		db 0			; DATA XREF: STATCHK:loc_2BE5w
					; OUTT+26r
VERFLG		db 0			; DATA XREF: seg000:$GET_VERIFY_ON_WRITEr
					; seg000:0C71w	...
CONTPOS		dw 0			; DATA XREF: LOAD+E5w LOAD+101r
CHARCO		db 3			; DATA XREF: OUTT+Fw OUTT+14w
DMAADD		dd 80h			; DATA XREF: seg000:09B8r
					; seg000:$GET_DMAr ...
ENDMEM		dw 0			; DATA XREF: seg000:exit_typer
					; seg000:4063w	...
switch_character db 2Fh			; DATA XREF: seg000:0D67r seg000:0D71w ...
device_availability db 0FFh		; DATA XREF: seg000:0D7Ar seg000:0D84w ...
FirstArena	dw 0			; DATA XREF: $ALLOC+4w
					; $ALLOC:loc_1105r ...
BestArena	dw 0			; DATA XREF: $ALLOC+8w
					; $ALLOC:loc_113Ar ...
LastArena	dw 0			; DATA XREF: $ALLOC+Cw
					; $ALLOC:loc_1155w ...
AllocMethod	db 0			; DATA XREF: $ALLOC:loc_1175r
					; seg000:loc_1202r ...
arena_head	dw 0			; DATA XREF: seg000:CINSAVw
					; arena_free_process+3r ...
SYSINITVAR:
DPBHEAD		dd 0			; DATA XREF: seg000:0352r seg000:03E1o ...
SFT_ADDR	dw SFTABL		; DATA XREF: Find_free_sfn+2r
					; get_sf_from_sfn+1r
		dw 0			; DATA XREF: seg000:035Bw seg000:4244w
BCLOCK		dd 0			; DATA XREF: seg000:2810r seg000:2824r ...
BCON		dd 0			; DATA XREF: DSKSTATCHK+25r
					; RealDivOv+25r ...
NUMIO		db 0			; DATA XREF: seg000:CREATING_x2r
					; seg000:$SET_DEFAULT_DRIVEr ...
MAXSEC		dw 0			; DATA XREF: seg000:411Br seg000:4122w ...
BUFFHEAD	dd 0			; DATA XREF: seg000:THISFCB_1w
					; FATREAD+4Fr ...
DEVHEAD		dw 0			; DATA XREF: DEVNAME+Ao seg000:407Ew
		dw 0			; DATA XREF: seg000:4079w
		dw 8004h
		dw SNULDEV
		dw INULDEV
		db  4Eh	; N
		db  55h	; U
		db  4Ch	; L
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
DAY		db 0			; DATA XREF: seg000:27A1r DATE16+20r ...
MONTH		db 0			; DATA XREF: DATE16+16r READTIME+5Ew
YEAR		dw 0			; DATA XREF: seg000:279Er SETYEARw ...
DAYCNT		dw 0FFFFh		; DATA XREF: READTIME+25r READTIME+30w ...
WEEKDAY		db 0			; DATA XREF: seg000:27B1r seg000:3904w
CURDRV		db 0			; DATA XREF: seg000:$GET_DEFAULT_DRIVEr
					; seg000:0D35w	...
LASTENT		dw 0			; DATA XREF: seg000:0998r seg000:1040w ...
INDOS		db 0			; DATA XREF: STATCHK-256Dw
					; seg000:06EAw	...
ERRORMODE	db 0			; DATA XREF: STATCHK:IOROUTr
					; STATCHK:DSKROUTw ...
WPERR		db 0FFh			; DATA XREF: STATCHK-2504w
					; FLUSHBUF+24r	...
CONSWAP		db 0			; DATA XREF: STATCHK-253Bw
					; SWAPBACK+41w	...
IDLEINT		db 1			; DATA XREF: STATCHK-2537w
					; SWAPBACK+46w	...
CNTCFLAG	db 0			; DATA XREF: STATCHK-24FCr
					; seg000:0C7Dr	...
LASTBUFFER	dw 0FFFFh		; DATA XREF: seg000:0A82w GETBUFFRB+7r	...
		dw 0FFFFh		; DATA XREF: seg000:0A7Cw GETBUFFRB+90w
DEVCALL		db 0			; DATA XREF: SETREAD+9o SETREAD+2Fo ...
DEVCALL_REQUNIT	db 0			; DATA XREF: CHARINIT+6w
DEVCALL_REQFUNC	db 0			; DATA XREF: FATREAD+Fw FATREAD+B4w ...
DEVCALL_REQSTAT	dw 0			; DATA XREF: LOAD+35r LOAD+82r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
CALLUNIT	db 0			; DATA XREF: FATREAD+1Ew FATREAD+C3w ...
CALLXAD		dd 0			; DATA XREF: LOAD:loc_1A51w STORE+D0w	...
CALLBPB		dd 0			; DATA XREF: SETXADDRw	RESTXADDRw ...
CALLDEVAD	dd 0			; DATA XREF: DEVIOCALL2+3w
					; DEVIOCALL2+Cr ...
IOCALL		db 0			; DATA XREF: IOFUNC:loc_126Aw
					; $IOCTL+C3w
IOCALL_REQUNIT	db 0
IOCALL_REQFUNC	db 0			; DATA XREF: IOFUNC+5Aw $IOCTL+B3w ...
IOCALL_REQSTAT	dw 0			; DATA XREF: IOFUNC+2Aw IOFUNC+64r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
IOMED		db 0			; DATA XREF: IOFUNC+2Ew IOFUNC+85r ...
IOXAD		dw 0			; DATA XREF: IOFUNC+5w	SETXADDR+1Dr ...
		dw    0			; DATA XREF: IOFUNCw SETXADDR+15r ...
IOSCNT		dw 0			; DATA XREF: IOFUNC+Cw	SETXADDR+25r ...
IOSSEC		dw 0
DSKSTCALL	db 0Eh			; DATA XREF: DSKSTATCHK+19w
					; DSKSTATCHK+43w ...
		db 0
DSKSTCOM	db 5			; DATA XREF: DSKSTATCHK+14w
					; DSKSTATCHK+3Dw ...
DSKSTST		dw 0			; DATA XREF: DSKSTATCHK+1Ew
					; DSKSTATCHK+2Cr ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
DSKCHRET	db 0			; DATA XREF: DSKSTATCHK+35r
					; DSKSTATCHK+49w
off_16B		dw DEVIOBUF		; DATA XREF: RealDivOv+21w
					; RealDivOv+2Cw
		dw 0			; DATA XREF: seg000:41A1w
DSKSTCNT	dw 1			; DATA XREF: DSKSTATCHK+54w
					; RealDivOv+1Aw ...
		dw 0
YRTAB		db 0C8h	; È
		db 0A6h	; ¦
		db 0C8h	; È
		db 0A5h	; ¥
		db 0C8h	; È
		db 0A5h	; ¥
		db 0C8h	; È
		db 0A5h	; ¥
MONTAB		db  1Fh
MONTAB_february	db  1Ch			; DATA XREF: SETYEAR:loc_3883w
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Fh
		db  1Eh
		db  1Fh
		db  1Eh
		db  1Fh
OEM_HANDLER	dd 0FFFFFFFFh		; DATA XREF: STATCHK-23D2w
					; STATCHK:DO_OEM_FUNCr ...
CurrentPDB	dw 0			; DATA XREF: seg000:NXTCLUSNUMr
					; seg000:GROWCNT+2w ...
CreatePDB	db 0			; DATA XREF: seg000:BYTCNT1w
					; seg000:CURBUF+2w ...
LEAVEADDR	dw _LEAVE		; DATA XREF: STATCHK:DISPCALLr
DIVMES		db 0Dh,0Ah		; DATA XREF: seg000:DIVOVo
		db 'Divide overflow',0Dh,0Ah
DivMesLen	db 13h			; DATA XREF: RealDivOv+14r
Current_Country	dw USTABLE		; DATA XREF: seg000:0C1Fr
					; seg000:loc_C64w ...
international_table:
		db  18h
		db    1
USTABLE		dw 0			; DATA XREF: seg000:Current_Countryo
Currency_sym	db  24h	; $
		db    0
		db    0
		db    0
		db    0
Thous_sep	db  2Ch	; ,
		db    0
Decimal_sep	db  2Eh	; .
		db    0
Date_sep	db  2Dh	; -
		db    0
Time_sep	db  3Ah	; :
		db    0
Bit_field	db    0
Currency_cents	db    2
Time_24		db    0
Map_call	dw MAP_DCASE
		dw 0
Data_sep	db  2Ch	; ,
		db    0
		db  18h
		db  2Ch	; ,
UKTABLE		dw 1
		db  9Ch	; 
		db    0
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db  2Eh	; .
		db    0
		db  2Dh	; -
		db    0
		db  3Ah	; :
		db    0
		db    0
		db    2
		db    0
		dw MAP_DCASE
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db  18h
		db  31h	; 1
GRMTABLE	dw 1
		db  44h	; D
		db  4Dh	; M
		db    0
		db    0
		db    0
		db  2Eh	; .
		db    0
		db  2Ch	; ,
		db    0
		db  2Eh	; .
		db    0
		db  2Eh	; .
		db    0
		db    3
		db    2
		db    1
		dw MAP_DCASE
		db    0
		db    0
		db  3Bh	; ;
		db    0
		db  18h
		db  21h	; !
FRNTABLE	dw 1
		db  46h	; F
		db    0
		db    0
		db    0
		db    0
		db  20h
		db    0
		db  2Ch	; ,
		db    0
		db  2Fh	; /
		db    0
		db  3Ah	; :
		db    0
		db    3
		db    2
		db    1
		dw MAP_DCASE
		db    0
		db    0
		db  3Bh	; ;
		db    0
		db  18h
		db  51h	; Q
JAPTABLE	dw 2
		db  9Dh	; 
		db    0
		db    0
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db  2Eh	; .
		db    0
		db  2Dh	; -
		db    0
		db  3Ah	; :
		db    0
		db    0
		db    0
		db    1
		dw MAP_DCASE
		db    0
		db    0
		db  2Ch	; ,
		db    0
		db 0FFh
		db    0

;align 2

DATASEGMENT equ $

INITBLOCK	times 272 db 0		; DATA XREF: seg000:4215o

INITSP		dw 0			; DATA XREF: seg000:MOVDPBr
					; seg000:4068w
INITSS		dw 0			; DATA XREF: seg000:ATTRIBr
					; seg000:406Dw
BUFFSTRT	dw 0			; DATA XREF: seg000:PREREADr
					; seg000:4151w
; ---------------------------------------------------------------------------

MOVDPB:					; CODE XREF: seg000:426Bj
		mov	sp, [cs:INITSP]
		mov	ss, [cs:INITSS]
		rep movsb
		cld
		mov	word [es:DMAADD+2], dx
		mov	si, word [DPBHEAD]
		mov	word [es:DPBHEAD+2], es
		mov	[es:SFT_ADDR+2], es
		mov	cl, [NUMIO]
		xor	ch, ch
SETFINDPB:
		mov	word [es:si+1Ah], es
		mov	byte [es:si+17h], -1
		add	si, 94
		loop	SETFINDPB
		sub	si, 94
		mov	word [es:si+1Ah], -1
		mov	di, [BUFFSTRT]
		mov	word [es:BUFFHEAD+2], es
		mov	word [es:BUFFHEAD], di
		mov	word [es:di+4], 0FFh
		mov	byte [es:di+6], 0
		mov	word [es:di], -1
		mov	word [es:di+2], -1
		push	es
		inc	dx
		mov	byte [CreatePDB], 0FFh
		call	_$CREATE_PROCESS_DATA_BLOCK
		pop	es
		push	ax
		mov	ax, [cs:CurrentPDB]
		mov	[es:CurrentPDB], ax
		mov	byte [es:CreatePDB], 0
		dec	ax
		mov	[es:arena_head], ax
		push	ds
		mov	ds, ax
		mov	byte [0], 5Ah ; 'Z'
		mov	word [1], 0
		sub	ax, [es:ENDMEM]
		neg	ax
		dec	ax
		mov	word [3], ax
		pop	ds
		pop	ax
		mov	di, 0Dh
		mov	al, 3
		stosb
		mov	di, DPBHEAD	; SYSINITVAR
		retf

FILL1	equ	$ - DATASEGMENT

; ---------------------------------------------------------------------------
		times (940-FILL1) db 0

; ---------------------------------------------------------------------------
HEADER		db 0Dh,0Ah		; DATA XREF: seg000:4248o
		db 'Microsoft MS-DOS version 2.11',0Dh,0Ah
		db 'Copyright 1981,82,83 Microsoft Corp.',0Dh,0Ah,'$'
; ---------------------------------------------------------------------------

QUIT:					; DATA XREF: seg000:41CDo
		mov	ah, 0
		jmp	short SAVREGS
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR STATCHK

COMMAND:				; CODE XREF: STATCHK:loc_2C53j
					; seg000:34C9j
					; DATA XREF: ...
		cmp	ah, 0F8h ; 'ø'
		jb	short NOTOEM
		jmp	_$SET_OEM_HANDLER
; ---------------------------------------------------------------------------

NOTOEM:					; CODE XREF: STATCHK-25A3j
		cmp	ah, 58h	; 'X'
		nop
		jbe	short SAVREGS

BADCALL:				; CODE XREF: seg000:0645j
					; STATCHK-23BFj
		mov	al, 0

_IRET:					; DATA XREF: seg000:41E3o seg000:41E9o ...
		iret
; END OF FUNCTION CHUNK	FOR STATCHK
; ---------------------------------------------------------------------------

CALL_ENTRY:				; DATA XREF: seg000:41B6o
		pop	ax
		pop	ax
		pop	word [cs:user_SP]
		pushf
		cli
		push	ax
		push	word [cs:user_SP]
		cmp	cl, 36
		nop
		ja	short BADCALL
		mov	ah, cl
; START	OF FUNCTION CHUNK FOR STATCHK

SAVREGS:				; CODE XREF: seg000:061Fj
					; STATCHK-259Aj
		call	save_world
		mov	[cs:SaveDS], ds
		mov	[cs:SaveBX], bx
		mov	bx, cs
		mov	ds, bx
		inc	byte [INDOS]
		mov	ax, [user_SP]
		mov	[NSP], ax
		mov	ax, [user_SS]
		mov	[NSS], ax
		pop	ax
		push	ax
		mov	[user_SP], sp
		mov	[user_SS], ss
		mov	ds, [CurrentPDB]
		mov	[2Eh], sp
		mov	[30h], ss
		mov	bx, cs
		mov	ss, bx

REDISP:					; CODE XREF: seg000:37D4j
		mov	sp, AUXSTACK
		sti
		push	cs
		pop	ds
		xor	bh, bh
		mov	[CONSWAP], bh
		mov	byte [IDLEINT], 1
		mov	byte [NoSetDir], 0
		mov	bl, ah
		shl	bx, 1
		cld
		or	ah, ah
		jz	short DSKROUT
		cmp	ah, 0Ch
		jbe	short IOROUT
		cmp	ah, 51h	; 'Q'
		jz	short IOROUT
		cmp	ah, 50h	; 'P'
		jnz	short DSKROUT

IOROUT:					; CODE XREF: STATCHK-2521j
					; STATCHK-251Cj
		cmp	byte [ERRORMODE], 0
		jnz	short DISPCALL
		mov	sp, NSS
		jmp	short DISPCALL
; ---------------------------------------------------------------------------

DSKROUT:				; CODE XREF: STATCHK-2526j
					; STATCHK-2517j
		mov	byte [ERRORMODE], 0
		mov	byte [WPERR], -1
		mov	sp, DSKSTACK
		test	byte [CNTCFLAG], -1
		jz	short DISPCALL
		push	ax
		call	DSKSTATCHK
		pop	ax

DISPCALL:				; CODE XREF: STATCHK-2510j
					; STATCHK-250Bj ...
		push	word [LEAVEADDR]
		push	word [cs:bx+DISPATCH]
		mov	bx, [SaveBX]
		mov	ds, [SaveDS]
		retn
; END OF FUNCTION CHUNK	FOR STATCHK
; ---------------------------------------------------------------------------

_LEAVE:					; DATA XREF: seg000:LEAVEADDRo
		cli
		dec	byte [cs:INDOS]
		mov	sp, [cs:user_SP]
		mov	ss, [cs:user_SS]
		mov	bp, sp
		mov	[bp], al
		mov	ax, word [cs:NSP]
		mov	word [cs:user_SP], ax
		mov	ax, word [cs:NSS]
		mov	word [cs:user_SS], ax
		call	restore_world
		iret
; ---------------------------------------------------------------------------
restore_tmp	dw 0			; DATA XREF: seg000:restore_worldw
					; seg000:world_retr ...
; ---------------------------------------------------------------------------

restore_world:				; CODE XREF: seg000:070Ep
					; IOFUNC:IOFUNC_RETRYp	...
		pop	word [cs:restore_tmp]
		pop	ax
		pop	bx
		pop	cx
		pop	dx
		pop	si
		pop	di
		pop	bp
		pop	ds
		pop	es

world_ret:				; CODE XREF: seg000:0736j
		push	word [cs:restore_tmp]
		retn
; ---------------------------------------------------------------------------

save_world:				; CODE XREF: STATCHK:SAVREGSp
					; IOFUNC:loc_1234p ...
		pop	word [cs:restore_tmp]
		push	es
		push	ds
		push	bp
		push	di
		push	si
		push	dx
		push	cx
		push	bx
		push	ax
		jmp	short world_ret

; --------------- S U B	R O U T	I N E ---------------------------------------

get_user_stack:				; CODE XREF: seg000:$GET_CURRENT_PDBp
					; $CLOSE:SYS_RET_OKp ...
		lds	si, [cs:user_SP]
		retn

; ---------------------------------------------------------------------------
DISPATCH	dw _$ABORT		; DATA XREF: STATCHK-24ECr
		dw _$STD_CON_INPUT
		dw _$STD_CON_OUTPUT
		dw _$STD_AUX_INPUT
		dw _$STD_AUX_OUTPUT
		dw _$STD_PRINTER_OUTPUT
		dw _$RAW_CON_IO
		dw _$RAW_CON_INPUT
		dw _$STD_CON_INPUT_NO_ECHO
		dw _$STD_CON_STRING_OUTPUT
		dw _$STD_CON_STRING_INPUT
		dw _$STD_CON_INPUT_STATUS
		dw _$STD_CON_INPUT_FLUSH
		dw _$DISK_RESET
		dw _$SET_DEFAULT_DRIVE
		dw _$FCB_OPEN
		dw _$FCB_CLOSE
		dw _$DIR_SEARCH_FIRST
		dw _$DIR_SEARCH_NEXT
		dw _$FCB_DELETE
		dw _$FCB_SEQ_READ
		dw _$FCB_SEQ_WRITE
		dw _$FCB_CREATE
		dw _$FCB_RENAME
		dw CPMFUNC
		dw _$GET_DEFAULT_DRIVE
		dw _$SET_DMA
		dw _$SLEAZEFUNC
		dw _$SLEAZEFUNCDL
		dw CPMFUNC
		dw CPMFUNC
		dw _$GET_DEFAULT_DPB
		dw CPMFUNC
		dw _$FCB_RANDOM_READ
		dw _$FCB_RANDOM_WRITE
		dw _$GET_FCB_FILE_LENGTH
		dw _$GET_FCB_POSITION
		dw _$SET_INTERRUPT_VECTOR
		dw _$CREATE_PROCESS_DATA_BLOCK
		dw _$FCB_RANDOM_READ_BLOCK
		dw _$FCB_RANDOM_WRITE_BLOCK
		dw _$PARSE_FILE_DESCRIPTOR
		dw _$GET_DATE
		dw _$SET_DATE
		dw _$GET_TIME
		dw _$SET_TIME
		dw _$SET_VERIFY_ON_WRITE
		dw _$GET_DMA
		dw _$GET_VERSION
		dw _$KEEP_PROCESS
		dw _$GET_DPB
		dw _$SET_CTRL_C_TRAPPING
		dw _$GET_INDOS_FLAG
		dw _$GET_INTERRUPT_VECTOR
		dw _$GET_DRIVE_FREESPACE
		dw _$CHAR_OPER
		dw _$INTERNATIONAL
		dw _$MKDIR
		dw _$RMDIR
		dw _$CHDIR
		dw _$CREAT
		dw _$OPEN
		dw _$CLOSE
		dw _$READ
		dw _$WRITE
		dw _$UNLINK
		dw _$LSEEK
		dw _$CHMOD
		dw _$IOCTL
		dw _$DUP
		dw _$DUP2
		dw _$CURRENT_DIR
		dw _$ALLOC
		dw _$DEALLOC
		dw _$SETBLOCK
		dw _$EXEC
		dw _$EXIT
		dw _$WAIT
		dw _$FIND_FIRST
		dw _$FIND_NEXT
		dw _$SET_CURRENT_PDB
		dw _$GET_CURRENT_PDB
		dw _$GET_IN_VARS
		dw _$SETDPB
		dw _$GET_VERIFY_ON_WRITE
		dw _$DUP_PDB
		dw _$RENAME
		dw _$FILE_TIMES
		dw _$ALLOCOPER
; ---------------------------------------------------------------------------

CPMFUNC:				; DATA XREF: seg000:076Eo seg000:0778o ...
		xor	al, al
		retn
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR STATCHK

_$SET_OEM_HANDLER:			; CODE XREF: STATCHK-25A1j
		jnz	short DO_OEM_FUNC
		mov	word [cs:OEM_HANDLER], dx
		mov	word [cs:OEM_HANDLER+2], ds
		iret
; ---------------------------------------------------------------------------

DO_OEM_FUNC:				; CODE XREF: STATCHK:_$SET_OEM_HANDLERj
		cmp	word [cs:OEM_HANDLER], 0FFFFh
		jnz	short OEM_JMP
		jmp	BADCALL
; ---------------------------------------------------------------------------

OEM_JMP:				; CODE XREF: STATCHK-23C1j
		jmp	far [cs:OEM_HANDLER]
; END OF FUNCTION CHUNK	FOR STATCHK
; ---------------------------------------------------------------------------

_$SET_CURRENT_PDB:			; DATA XREF: seg000:07DEo
		mov	[cs:CurrentPDB], bx
		retn
; ---------------------------------------------------------------------------

_$GET_CURRENT_PDB:			; DATA XREF: seg000:07E0o
		call	get_user_stack
		push	word [cs:CurrentPDB]
		pop	word [si+2]
		retn
; ---------------------------------------------------------------------------

SNULDEV:				; DATA XREF: seg000:010Do
		mov	[cs:NULLDEVPT], bx
		mov	[cs:NULLDEVPT+2], es
		retf
; ---------------------------------------------------------------------------

INULDEV:				; DATA XREF: seg000:010Fo
		push	es
		push	bx
		les	bx, [cs:NULLDEVPT]
		or	word [es:bx+3], 100h
		pop	bx
		pop	es
		retf
; ---------------------------------------------------------------------------

ABSDRD:					; DATA XREF: seg000:41EFo
		cli
		mov	[cs:user_SS], ss
		mov	[cs:user_SP], sp
		push	cs
		pop	ss
		mov	sp, DSKSTACK
		inc	byte [ss:INDOS]
		sti
		cld
		push	es
		push	ds
		push	ss
		pop	ds
		call	GETBP
		pop	ds
		jb	short ILEAVE
		call	DSKREAD

TLEAVE:				; CODE XREF: seg000:089Bj
		jz	short ILEAVE
		stc

ILEAVE:				; CODE XREF: seg000:085Cj
					; seg000:TLEAVEj ...
		pop	es
		cli
		dec	byte [ss:INDOS]
		mov	sp, [ss:user_SP]
		mov	ss, [ss:user_SS]
		sti
		retf
; ---------------------------------------------------------------------------

ABSDWRT:				; DATA XREF: seg000:41F5o
		cli
		mov	[cs:user_SS], ss
		mov	[cs:user_SP], sp
		push	cs
		pop	ss
		mov	sp, DSKSTACK
		inc	byte [ss:INDOS]
		sti
		cld
		push	es
		push	ds
		push	ss
		pop	ds
		call	GETBP
		pop	ds
		jb	short ILEAVE
		call	DSKWRITE
		jmp	short TLEAVE
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR $CLOSE

SYS_RET_OK:				; CODE XREF: seg000:0C58j
					; seg000:loc_E89j ...
		call	get_user_stack
		push	word [si+16h]
		popf
		clc
		jmp	short DO_RET
; ---------------------------------------------------------------------------

SYS_RET_ERR:				; CODE XREF: seg000:loc_C31j
					; seg000:MKNERRj ...
		xor	ah, ah
		call	get_user_stack
		push	word [si+16h]
		popf
		stc

DO_RET:					; CODE XREF: $CLOSE-354Fj
		mov	[si], ax
		pushf
		pop	word [si+16h]
		retn
; END OF FUNCTION CHUNK	FOR $CLOSE
; ---------------------------------------------------------------------------

MAP_DCASE:				; DATA XREF: seg000:Map_callo
					; seg000:01D4o	...
		cmp	al, 80h	; ''
		jb	short L_RET
		cmp	al, 0A7h ; '§'
		ja	short L_RET
		sub	al, 80h	; ''
		push	ds
		push	bx
		push	cs
		pop	ds
		mov	bx, _TABLE
		xlat
		pop	bx
		pop	ds

L_RET:					; CODE XREF: seg000:08BAj seg000:08BEj
		retf
; ---------------------------------------------------------------------------
_TABLE		db  80h	; 		; DATA XREF: seg000:08C6o
		db  9Ah	; 
		db  45h	; E
		db  41h	; A
		db  8Eh	; 
		db  41h	; A
		db  8Fh	; 
		db  80h	; 
		db  45h	; E
		db  45h	; E
		db  45h	; E
		db  49h	; I
		db  49h	; I
		db  49h	; I
		db  8Eh	; 
		db  8Fh	; 
		db  90h	; 
		db  92h	; 
		db  92h	; 
		db  4Fh	; O
		db  99h	; 
		db  4Fh	; O
		db  55h	; U
		db  55h	; U
		db  59h	; Y
		db  99h	; 
		db  9Ah	; 
		db  9Bh	; 
		db  9Ch	; 
		db  9Dh	; 
		db  9Eh	; 
		db  9Fh	; 
		db  41h	; A
		db  49h	; I
		db  4Fh	; O
		db  55h	; U
		db 0A5h	; ¥
		db 0A5h	; ¥
		db 0A6h	; ¦
		db 0A7h	; §
ESCCHAR		db 0			; DATA XREF: _$STD_CON_STRING_INPUT+42r
					; _$STD_CON_STRING_INPUT:TWOESCr ...
ESCTAB		db  40h	; @		; DATA XREF: _$STD_CON_STRING_INPUT-2CBCo
		db  4Dh	; M
		db  3Bh	; ;
		db  53h	; S
		db  3Ch	; <
		db  3Eh	; >
		db  3Dh	; =
		db  3Dh	; =
		db  3Fh	; ?
		db  4Bh	; K
		db  52h	; R
		db  41h	; A
		db  41h	; A

ESCFUNC		dw GETCH		; DATA XREF: _$STD_CON_STRING_INPUT-2CB2r
		dw TWOESC
		dw ENTERINS
		dw BACKSP
		dw REEDIT
		dw KILNEW
		dw COPYLIN
		dw SKIPSTR
		dw COPYSTR
		dw SKIPONE
		dw COPYONE
		dw COPYONE
		dw CTRLZ
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _$STD_CON_STRING_INPUT

OEMFunctionKey:				; CODE XREF: _$STD_CON_STRING_INPUT:loc_3660j
		call	_$STD_CON_INPUT_NO_ECHO
		mov	cl, 13
		push	di
		mov	di, ESCTAB
		repne scasb
		pop	di
		shl	cx, 1
		mov	bp, cx
		jmp	word [ss:bp+ESCFUNC]

; END OF FUNCTION CHUNK	FOR _$STD_CON_STRING_INPUT
; ---------------------------------------------------------------------------

_$SLEAZEFUNC:				; DATA XREF: seg000:0774o
		mov	dl, 0

_$SLEAZEFUNCDL:				; DATA XREF: seg000:0776o
		push	ss
		pop	ds
		mov	al, dl
		call	GETTHISDRV
		mov	al, 0FFh
		jb	short loc_953
		call	FATREAD
		mov	dx, [es:bp+0Dh]
		dec	dx
		mov	al, [es:bp+4]
		inc	al
		mov	cx, [es:bp+2]
		add	bp, 16h

loc_953:				; CODE XREF: seg000:093Cj
		call	get_user_stack
		mov	[si+4],	cx
		mov	[si+6],	dx
		mov	[si+2],	bp
		mov	word [si+0Eh], es
		retn
; ---------------------------------------------------------------------------

_$ABORT:				; DATA XREF: seg000:DISPATCHo
		xor	al, al
		mov	byte [ss:exit_type], 0

abort_inner:				; CODE XREF: seg000:34EEj
		mov	ah, byte [ss:exit_type]
		mov	word [ss:exit_code], ax
		call	get_user_stack
		mov	ds, word [si+14h]
		xor	ax, ax
		mov	es, ax
		mov	si, 10
		mov	di, 88h	; ''
		movsw
		movsw
		movsw
		movsw
		movsw
		movsw
		jmp	reset_environment
; ---------------------------------------------------------------------------

_$DIR_SEARCH_FIRST:			; DATA XREF: seg000:0760o
		call	GETFILE

SAVPLCE:				; CODE XREF: seg000:0A21j
		mov	dl, 0
		jb	short loc_9E6
		or	ah, ah
		js	short loc_99D
		mov	ax, [LASTENT]
		inc	dl

loc_99D:				; CODE XREF: seg000:0996j
		mov	[es:di+10h], ax
		mov	ax, [THISDPB]
		mov	[es:di+12h], ax
		mov	ax, [THISDPB+2]
		mov	[es:di+14h], ax
		mov	ax, [DIRSTART]
		mov	[es:di+16h], ax
		mov	si, bx
		les	di, [DMAADD]
		mov	ax, 0FFh
		cmp	al, [EXTFCB]
		jnz	short loc_9CE
		stosw
		inc	al
		stosw
		stosw
		mov	al, [ATTRIB]
		stosb

loc_9CE:				; CODE XREF: seg000:09C3j
		mov	al, byte [THISDRV]
		inc	al
		stosb
		or	dl, dl
		jz	short loc_9DC
		mov	ds, word [CURBUF+2]

loc_9DC:				; CODE XREF: seg000:09D6j
		mov	cx, 10h
		rep movsw
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_9E4:				; CODE XREF: seg000:09F3j seg000:09FDj
		push	ds
		pop	es

loc_9E6:				; CODE XREF: seg000:0992j
		mov	ax, 0FFFFh
		mov	[es:di+10h], ax

locret_9ED:				; CODE XREF: seg000:0A29j
		retn
; ---------------------------------------------------------------------------

_$DIR_SEARCH_NEXT:			; DATA XREF: seg000:0762o
		call	MOVNAMENOSET
		mov	di, dx
		jb	short loc_9E4
		mov	ax, [di+10h]
		les	bp, [di+12h]
		or	ax, ax
		js	short loc_9E4
		mov	bx, [di+16h]
		push	dx
		push	ds
		push	ax
		mov	[ss:THISDPB], bp
		mov	[ss:THISDPB+2], es
		call	SETDIRSRCH
		pop	ax
		mov	word [ENTLAST], 0FFFFh
		call	GETENT
		call	NEXTENT
		pop	es
		pop	di
		jmp	SAVPLCE
; ---------------------------------------------------------------------------

_$GET_FCB_FILE_LENGTH:			; DATA XREF: seg000:0784o
		call	GETFILE
		mov	al, 0FFh
		jb	short locret_9ED
		add	di, 21h	; '!'
		mov	cx, [es:di-13h]
		or	cx, cx
		jnz	short loc_A39
		mov	cx, 80h

loc_A39:				; CODE XREF: seg000:0A34j
		xor	dx, dx
		inc	si
		inc	si
		mov	ds, word [CURBUF+2]
		mov	ax, [si+2]
		div	cx
		push	ax
		lodsw
		div	cx
		or	dx, dx
		pop	dx
		jz	short loc_A53
		inc	ax
		jnz	short loc_A53
		inc	dx

loc_A53:				; CODE XREF: seg000:0A4Dj seg000:0A50j
		stosw
		mov	ax, dx
		stosb
		mov	al, 0
		cmp	cx, 40h	; '@'
		jnb	short locret_A61
		mov	[es:di], ah

locret_A61:				; CODE XREF: seg000:0A5Cj
		retn
; ---------------------------------------------------------------------------

_$GET_FCB_POSITION:			; DATA XREF: seg000:0786o
		call	GETREC
		mov	[di+21h], ax
		mov	[di+23h], dl
		cmp	word [di+0Eh], 40h ; '@'
		jnb	short RET16
		mov	[di+24h], dh

RET16:					; CODE XREF: seg000:0A6Fj
		retn
; ---------------------------------------------------------------------------

_$DISK_RESET:				; DATA XREF: seg000:0758o
		push	ss
		pop	ds
		mov	al, 0FFh
		call	FLUSHBUF
		mov	word [LASTBUFFER+2], 0FFFFh
		mov	word [LASTBUFFER], 0FFFFh
		call	SETVISIT

loc_A8B:				; CODE XREF: seg000:0AA0j
		mov	byte [di+7], 1
		cmp	byte [di+4], 0FFh
		jz	short loc_A9D
		mov	word [di+4], 0FFh
		call	SCANPLACE

loc_A9D:				; CODE XREF: seg000:0A93j
		call	SKIPVISIT
		jnz	short loc_A8B

locret_AA2:				; CODE XREF: seg000:0AB3j
		retn
; ---------------------------------------------------------------------------

_$RAW_CON_IO:				; DATA XREF: seg000:074Ao
		mov	al, dl
		cmp	al, 0FFh
		jnz	short RAWOUT
		les	di, [ss:user_SP]
		xor	bx, bx
		call	GET_IO_FCB
		jb	short locret_AA2
		mov	ah, 1
		call	IOFUNC
		jnz	short loc_AC7
		call	SPOOLINT
		or	byte [es:di+16h], 40h
		xor	al, al

locret_AC6:				; CODE XREF: seg000:0AD4j
		retn
; ---------------------------------------------------------------------------

loc_AC7:				; CODE XREF: seg000:0ABAj
		and	byte [es:di+16h], 0BFh

loc_ACC:				; CODE XREF: seg000:0ADBj
		call	SPOOLINT

_$RAW_CON_INPUT:			; DATA XREF: seg000:074Co
		xor	bx, bx
		call	GET_IO_FCB
		jb	short locret_AC6
		mov	ah, 1
		call	IOFUNC
		jz	short loc_ACC
		xor	ah, ah
		call	IOFUNC
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

RAWOUT:					; CODE XREF: seg000:0AA7j
					; OUTT:loc_351Dp
		push	bx
		mov	bx, 1
		call	GET_IO_FCB
		jb	short loc_B07
		test	byte [si+18h], 80h
		jz	short loc_B03
		push	ds
		push	si
		lds	si, [si+19h]
		test	byte [si+4], 10h
		pop	si
		pop	ds
		jz	short loc_B03
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		jmp	short loc_B06
; ---------------------------------------------------------------------------

loc_B03:				; CODE XREF: RAWOUT+Dj	RAWOUT+1Aj
		call	RAWOUT3

loc_B06:				; CODE XREF: RAWOUT+1Ej
		clc

loc_B07:				; CODE XREF: RAWOUT+7j
		pop	bx

locret_B08:				; CODE XREF: RAWOUT2+3j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

RAWOUT2:				; CODE XREF: OUTT:loc_35BDp
		call	GET_IO_FCB
		jb	short locret_B08

; --------------- S U B	R O U T	I N E ---------------------------------------

RAWOUT3:				; CODE XREF: RAWOUT:loc_B03p
		push	ax
		jmp	short loc_B14
; ---------------------------------------------------------------------------

loc_B11:				; CODE XREF: RAWOUT3+Bj
		call	SPOOLINT

loc_B14:				; CODE XREF: RAWOUT3+1j
		mov	ah, 3
		call	IOFUNC
		jz	short loc_B11
		pop	ax
		mov	ah, 2
		call	IOFUNC
		clc

RET18:					; CODE XREF: OUTMES+4j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

OUTMES:					; CODE XREF: OUTMES+9j	seg000:424Bp
		cs	lodsb
		cmp	al, '$'
		jz	short RET18
		call	OUTT
		jmp	short OUTMES

; ---------------------------------------------------------------------------
		retn
; ---------------------------------------------------------------------------

_$PARSE_FILE_DESCRIPTOR:		; DATA XREF: seg000:0790o
		call	MAKEFCB
		push	si
		call	get_user_stack
		pop	word [si+8]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

_$DUP_PDB:				; CODE XREF: seg000:336Fp
					; DATA XREF: seg000:07E8o
		mov	byte [ss:CreatePDB], 0FFh

; --------------- S U B	R O U T	I N E ---------------------------------------


_$CREATE_PROCESS_DATA_BLOCK:		; CODE XREF: seg000:loc_3A8p
					; DATA XREF: seg000:078Ao
		mov	es, dx
		test	byte [cs:CreatePDB], 0FFh
		jz	short Create_PDB_old
		mov	ds, [cs:CurrentPDB]
		jmp	short Create_copy
; ---------------------------------------------------------------------------

Create_PDB_old:				; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+8j
		call	get_user_stack
		mov	ds, word [si+14h]

Create_copy:				; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+Fj
		xor	si, si
		mov	di, si
		mov	cx, 80h	; ''
		rep movsw
		test	byte [cs:CreatePDB], 0FFh
		jz	short Create_PDB_cont
		push	cs
		pop	ds
		xor	bx, bx
		mov	cx, 20

create_dup_jfn:				; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+4Bj
		push	es
		call	get_jfn_pointer
		jb	short create_skip
		push	es
		push	di
		call	get_sf_from_jfn
		jb	short create_no_inc
		inc	byte [es:di]

create_no_inc:				; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+3Aj
		pop	di
		pop	es
		mov	al, [es:di]
		pop	es
		push	es
		mov	al, [es:bx]

create_skip:				; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+33j
		pop	es
		inc	bx
		loop	create_dup_jfn
		push	word [CurrentPDB]
		pop	bx
		push	bx
		pop	word [es:16h]
		mov	[CurrentPDB], es
		mov	ds, bx

Create_PDB_cont:			; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+26j
		mov	byte [cs:CreatePDB], 0
		mov	ax, word [2]

; --------------- S U B	R O U T	I N E ---------------------------------------

SETMEM:					; CODE XREF: seg000:422Fp
		xor	cx, cx
		mov	ds, cx
		mov	es, dx
		mov	si, 88h	; ''
		mov	di, 0Ah
		mov	cx, 6
		rep movsw
		mov	word [es:2], ax
		sub	ax, dx
		cmp	ax, MAXDIF
		jbe	short HAVDIF
		mov	ax, MAXDIF
HAVDIF:				; CODE XREF: SETMEM+1Aj
		mov	bx, 0Ch
		sub	bx, ax
		mov	cl, 4
		shl	ax, cl
		mov	ds, dx
		mov	word [6], ax
		mov	word [8], bx
		mov	word [0], 20CDh
		mov	byte [5], 9Ah
		mov	word [50], 21CDh
		mov	byte [52], 0CBh
		retn

; ---------------------------------------------------------------------------
USERNUM		dw 0			; DATA XREF: seg000:0BFBr
		db 0			; DATA XREF: seg000:0BF7r
OEMNUM		db 0FFh
MSVERS:					; DATA XREF: seg000:0BFFr
MSMAJOR		db 02h
MSMINOR		db 0Bh			

; ---------------------------------------------------------------------------

_$GET_VERSION:				; DATA XREF: seg000:079Eo
		push	ss
		pop	ds
		mov	bx, [USERNUM+2]
		mov	cx, [USERNUM]
		mov	ax, word [MSVERS]
		call	get_user_stack
		mov	[si+2],	bx
		mov	[si+4],	cx
		mov	[si], ax
		retn
; ---------------------------------------------------------------------------

_$INTERNATIONAL:			; DATA XREF: seg000:07AEo
		mov	bl, al
		push	ds
		pop	es
		push	dx
		pop	di
		push	ss
		pop	ds
		cmp	di, 0FFFFh
		jz	short loc_C5B
		or	bl, bl
		jnz	short loc_C2A
		mov	si, [Current_Country]
		mov	ax, [si-2]
		mov	bl, ah
		jmp	short loc_C48
; ---------------------------------------------------------------------------

loc_C2A:				; CODE XREF: seg000:0C1Dj
		call	international_get
		jnb	short loc_C48
		mov	al, 2

loc_C31:				; CODE XREF: seg000:0C62j
		jmp	SYS_RET_ERR

; --------------- S U B	R O U T	I N E ---------------------------------------


international_get:			; CODE XREF: seg000:loc_C2Ap
					; seg000:loc_C5Bp
		mov	si, international_table ; 1A6h

loc_C37:				; CODE XREF: international_get+12j
		lodsw
		cmp	al, 0FFh
		jnz	short loc_C3E
		stc

locret_C3D:				; CODE XREF: international_get+Cj
		retn
; ---------------------------------------------------------------------------

loc_C3E:				; CODE XREF: international_get+6j
		cmp	bl, ah
		jz	short locret_C3D
		xor	ah, ah
		add	si, ax
		jmp	short loc_C37

; ---------------------------------------------------------------------------

loc_C48:				; CODE XREF: seg000:0C28j seg000:0C2Dj
		mov	cl, al
		xor	ch, ch
		push	di
		rep movsb
		pop	di
		mov	word [es:di+14h], cs

loc_C54:				; CODE XREF: seg000:0C68j
		xor	ax, ax
		mov	al, bl
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

loc_C5B:				; CODE XREF: seg000:0C19j
		call	international_get
		jnb	short loc_C64
		mov	al, 2
		jmp	short loc_C31
; ---------------------------------------------------------------------------

loc_C64:				; CODE XREF: seg000:0C5Ej
		mov	[Current_Country], si
		jmp	short loc_C54
; ---------------------------------------------------------------------------

_$GET_VERIFY_ON_WRITE:			; DATA XREF: seg000:07E6o
		mov	al, [ss:VERFLG]
		retn
; ---------------------------------------------------------------------------

_$SET_VERIFY_ON_WRITE:			; DATA XREF: seg000:079Ao
		and	al, 1
		mov	[ss:VERFLG], al
		retn
; ---------------------------------------------------------------------------

_$SET_CTRL_C_TRAPPING:			; DATA XREF: seg000:07A4o
		or	al, al
		jnz	short CTRL_C_set
		call	get_user_stack
		mov	al, [ss:CNTCFLAG]
		mov	[si+6],	al
		retn
; ---------------------------------------------------------------------------

CTRL_C_set:				; CODE XREF: seg000:0C78j
		dec	al
		jnz	short bad_val
		and	dl, 1
		mov	[ss:CNTCFLAG], dl
		retn
; ---------------------------------------------------------------------------

bad_val:				; CODE XREF: seg000:0C87j
		mov	al, 0FFh
		retn
; ---------------------------------------------------------------------------

_$GET_INDOS_FLAG:			; DATA XREF: seg000:07A6o
		call	get_user_stack
		mov	word [si+2], INDOS
		mov	[si+10h], ss
		retn
; ---------------------------------------------------------------------------

_$GET_IN_VARS:				; DATA XREF: seg000:07E2o
		call	get_user_stack
		mov	word [si+2], SYSINITVAR ; DPBHEAD
		mov	word [si+10h], ss
		retn
; ---------------------------------------------------------------------------

_$GET_DRIVE_FREESPACE:			; DATA XREF: seg000:07AAo
		push	ss
		pop	ds
		mov	al, dl
		call	GETTHISDRV
		mov	ax, 0FFFFh
		jb	short loc_CDD
		call	FATREAD
		xor	dx, dx
		mov	bx, 2
		mov	cx, [es:bp+0Dh]
		dec	cx
		push	cx

SCANFREE:				; CODE XREF: seg000:0CCEj
		call	UNPACK
		jnz	short loc_CCD
		inc	dx

loc_CCD:				; CODE XREF: seg000:0CCAj
		inc	bx
		loop	SCANFREE
		pop	bx
		mov	al, [es:bp+4]
		inc	al
		xor	ah, ah
		mov	cx, [es:bp+2]

loc_CDD:				; CODE XREF: seg000:0CB7j
		call	get_user_stack
		mov	[si+4],	cx
		mov	[si+6],	bx
		mov	[si+2],	dx
		mov	[si], ax
		retn
; ---------------------------------------------------------------------------

_$GET_DMA:				; DATA XREF: seg000:079Co
		mov	bx, [ss:DMAADD]
		mov	cx, [ss:DMAADD+2]
		call	get_user_stack
		mov	[si+2],	bx
		mov	[si+10h], cx
		retn
; ---------------------------------------------------------------------------

_$SET_DMA:				; DATA XREF: seg000:0772o
		mov	[ss:DMAADD], dx
		mov	[ss:DMAADD+2], ds
		retn
; ---------------------------------------------------------------------------

_$GET_DEFAULT_DPB:			; DATA XREF: seg000:077Co
		mov	dl, 0

; --------------- S U B	R O U T	I N E ---------------------------------------

_$GET_DPB:				; CODE XREF: seg000:3BB3p
					; DATA XREF: seg000:07A2o
		push	ss
		pop	ds
		mov	al, dl
		call	GETTHISDRV
		jb	short ISNODRV
		call	FATREAD
		call	get_user_stack
		mov	[si+2],	bp
		mov	word [si+0Eh], es
		xor	al, al
		retn
; ---------------------------------------------------------------------------

ISNODRV:				; CODE XREF: _$GET_DPB+7j
		mov	al, -1
		retn

; ---------------------------------------------------------------------------

_$GET_DEFAULT_DRIVE:			; DATA XREF: seg000:0770o
		mov	al, [ss:CURDRV]
		retn
; ---------------------------------------------------------------------------

_$SET_DEFAULT_DRIVE:			; DATA XREF: seg000:075Ao
		mov	al, [ss:NUMIO]
		cmp	dl, al
		jnb	short _RET17
		mov	[ss:CURDRV], dl

_RET17:					; CODE XREF: seg000:0D33j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


_$GET_INTERRUPT_VECTOR:			; CODE XREF: FATALC+71p
					; DATA XREF: seg000:07A8o
		call	RECSET
		les	bx, [es:bx]
		call	get_user_stack
		mov	[si+2],	bx
		mov	word [si+10h], es
		retn

; ---------------------------------------------------------------------------

_$SET_INTERRUPT_VECTOR:			; DATA XREF: seg000:0788o
		call	RECSET
		mov	[es:bx], dx
		mov	[es:bx+2], ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


RECSET:					; CODE XREF: _$GET_INTERRUPT_VECTORp
					; seg000:_$SET_INTERRUPT_VECTORp
		xor	bx, bx
		mov	es, bx
		mov	bl, al
		shl	bx, 1
		shl	bx, 1
		retn

; ---------------------------------------------------------------------------

_$CHAR_OPER:				; DATA XREF: seg000:07ACo
		push	ss
		pop	ds
		or	al, al
		jnz	short loc_D6D
		mov	dl, [switch_character]
		jmp	short loc_D8C
; ---------------------------------------------------------------------------

loc_D6D:				; CODE XREF: seg000:0D65j
		dec	al
		jnz	short loc_D76
		mov	[switch_character], dl
		retn
; ---------------------------------------------------------------------------

loc_D76:				; CODE XREF: seg000:0D6Fj
		dec	al
		jnz	short loc_D80
		mov	dl, [device_availability]
		jmp	short loc_D8C
; ---------------------------------------------------------------------------

loc_D80:				; CODE XREF: seg000:0D78j
		dec	al
		jnz	short loc_D89
		mov	[device_availability], dl
		retn
; ---------------------------------------------------------------------------

loc_D89:				; CODE XREF: seg000:0D82j
		mov	al, 0FFh
		retn
; ---------------------------------------------------------------------------

loc_D8C:				; CODE XREF: seg000:0D6Bj seg000:0D7Ej
		call	get_user_stack
		mov	[si+6],	dx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

_$SETDPB:				; CODE XREF: FATREAD+F3p seg000:4114p
					; DATA XREF: ...
		mov	di, bp
		add	di, 2
		lodsw
		stosw
		mov	dx, ax
		lodsb
		dec	al
		stosb
		inc	al
		xor	ah, ah

LOG2LOOP:				; CODE XREF: _$SETDPB+19j
		test	al, 1
		jnz	short SAVLOG
		inc	ah
		shr	al, 1
		jmp	short LOG2LOOP

SAVLOG:					; CODE XREF: _$SETDPB+13j
		mov	al, ah
		stosb
		mov	bl, al
		movsw
		lodsb
		stosb
		mov	bh, al
		lodsw
		stosw
		mov	cl, 5
		shr	dx, cl
		dec	ax
		add	ax, dx
		mov	cx, dx
		xor	dx, dx
		div	cx
		mov	cx, ax
		inc	di
		inc	di
		movsw
		lodsb
		mov	[es:bp+16h], al
		lodsw
		stosb
		mul	bh
		add	ax, [es:bp+6]
		stosw
		add	ax, cx
		mov	[es:bp+0Bh], ax
		sub	ax, [es:bp+0Dh]
		neg	ax
		mov	cl, bl
		shr	ax, cl
		inc	ax
		mov	[es:bp+0Dh], ax
		mov	word [es:bp+1Ch], 0
		retn

; ---------------------------------------------------------------------------

MKNERRJ:				; CODE XREF: seg000:0DFFj seg000:0E1Dj
		jmp	MKNERR
; ---------------------------------------------------------------------------

NODEEXISTSJ:				; CODE XREF: seg000:0E1Fj
		jmp	NODEEXISTS
; ---------------------------------------------------------------------------

_$MKDIR:					; DATA XREF: seg000:07B0o
		call	validate_path
		jb	short MKNERRJ
		mov	si, dx
		mov	word [ss:THISFCB+2], ss
		mov	word [ss:THISFCB], AUXSTACK - 40
		mov	al, 10h
		mov	word [ss:CREATING], 0E500h
		call	MAKENODE
		mov	al, 3
		jb	short MKNERRJ
		jnz	short NODEEXISTSJ
		lds	di, [CURBUF]
		sub	si, di
		push	si
		push	word [di+8]
		push	ss
		pop	ds
		push	word [DIRSTART]
		xor	ax, ax
		mov	word [DIRSTART], ax
		call	NEWDIR
		jb	short NODEEXISTSPOPDEL
		call	GETENT
		les	di, [CURBUF]
		mov	byte [es:di+5], 1
		add	di, 10h
		mov	ax, 202Eh
		stosw
		mov	dx, word [DIRSTART]
		call	SETDOTENT
		mov	ax, 2E2Eh
		stosw
		pop	dx
		call	SETDOTENT
		les	bp, [THISDPB]
		pop	dx
		xor	al, al
		call	GETBUFFR
		mov	dx, word [DIRSTART]
		lds	di, [CURBUF]
		pop	si
		add	si, di
		mov	[si], dx
		xor	dx, dx
		mov	[si+2],	dx
		mov	[si+4],	dx

DIRUP:					; CODE XREF: seg000:0EA4p seg000:106Ej
		mov	byte [di+5], 1
		push	ss
		pop	ds
		mov	al, [es:bp]
		call	FLUSHBUF

SYS_RET_OKJ:				; CODE XREF: seg000:0EC9j
		jmp	SYS_RET_OK

NODEEXISTSPOPDEL:			; CODE XREF: seg000:0E39j
		pop	dx
		pop	dx
		les	bp, [THISDPB]
		xor	al, al
		call	GETBUFFR
		lds	di, [CURBUF]
		pop	si
		add	si, di
		sub	si, 1Ah
		mov	byte [si], 0E5h ; 'å'
		call	DIRUP

NODEEXISTS:				; CODE XREF: seg000:NODEEXISTSJj
		mov	al, 5

MKNERR:					; CODE XREF: seg000:MKNERRJj
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

_$CHDIR:				; DATA XREF: seg000:07B4o
		call	validate_path
		jb	short loc_F0B
		push	ds
		push	dx
		mov	si, dx
		call	GETPATH
		jb	short loc_F09
		jnz	short loc_F09
		mov	ax, [DIRSTART]
		mov	bx, ax
		xchg	bx, [es:bp+1Ch]
		or	ax, ax
		pop	si
		pop	ds
		jz	short SYS_RET_OKJ
		mov	di, bp
		add	di, 1Eh
		mov	dx, di
		cmp	byte [ss:DRIVESPEC], 0
		jz	short loc_EDC
		inc	si
		inc	si

loc_EDC:				; CODE XREF: seg000:0ED8j
		mov	cx, si
		cmp	byte [ss:ROOTSTART], 0
		jz	short loc_EEA
		inc	si
		inc	cx
		jmp	short loc_F15
; ---------------------------------------------------------------------------

loc_EEA:				; CODE XREF: seg000:0EE4j
		or	bx, bx
		jz	short loc_F17
		xor	bx, bx

loc_EF0:				; CODE XREF: seg000:0EF8j
		cmp	byte [es:di], 0
		jz	short loc_EFA
		inc	di
		inc	bx
		jmp	short loc_EF0
; ---------------------------------------------------------------------------

loc_EFA:				; CODE XREF: seg000:0EF4j
		mov	al, '/'
		cmp	al, [ss:switch_character]
		jnz	short loc_F05
		mov	al, '\'

loc_F05:				; CODE XREF: seg000:0F01j
		stosb
		inc	bx
		jmp	short loc_F26
; ---------------------------------------------------------------------------

loc_F09:				; CODE XREF: seg000:0EB8j seg000:0EBAj
		pop	ax
		pop	ax

loc_F0B:				; CODE XREF: seg000:0EAFj seg000:0F3Ej
		mov	al, 3
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

INCBXCHK:				; CODE XREF: COPYELEM+18p COPYELEM+26p ...
		inc	bx

BXCHK:					; CODE XREF: COPYELEM+Ap COPYELEM+34p
		cmp	bx, 64
		retn
; ---------------------------------------------------------------------------

loc_F15:				; CODE XREF: seg000:0EE8j
		xor	bx, bx

loc_F17:				; CODE XREF: seg000:0EECj seg000:0F29j ...
		lodsb
		or	al, al
		jnz	short loc_F1F
		jmp	loc_FA8
; ---------------------------------------------------------------------------

loc_F1F:				; CODE XREF: seg000:0F1Aj
		cmp	al, '.'
		jz	short loc_F40
		call	COPYELEM

loc_F26:				; CODE XREF: seg000:0F07j
		cmp	bx, 64
		jb	short loc_F17
		mov	al, [es:di-1]
		call	PATHCHRCMP
		jnz	short loc_F35
		dec	di

loc_F35:				; CODE XREF: seg000:0F32j
		xor	al, al
		stosb
		mov	word [es:bp+1Ch], 0FFFFh
		jmp	short loc_F0B
; ---------------------------------------------------------------------------

loc_F40:				; CODE XREF: seg000:0F21j
		lodsb
		or	al, al
		jz	short loc_FA7
		cmp	al, '.'
		jnz	short loc_F17
		call	DELELMES
		lodsb
		or	al, al
		jz	short loc_FA7
		jmp	short loc_F17

; --------------- S U B	R O U T	I N E ---------------------------------------


COPYELEM:				; CODE XREF: seg000:0F23p
		push	di
		push	cx
		mov	cx, 800h
		mov	ah, '.'
		call	CopyPiece
		call	BXCHK
		jnb	short loc_F75
		cmp	ah, al
		jz	short loc_F78
		or	al, al
		jz	short loc_F71

loc_F6A:				; CODE XREF: COPYELEM+3Dj
		stosb
		call	INCBXCHK
		jnb	short loc_F75
		inc	si

loc_F71:				; CODE XREF: COPYELEM+15j COPYELEM+3Bj
		dec	si
		pop	cx
		pop	ax
		retn
; ---------------------------------------------------------------------------

loc_F75:				; CODE XREF: COPYELEM+Dj COPYELEM+1Bj	...
		pop	cx
		pop	di

locret_F77:				; CODE XREF: DELELMES+4j DELELMES+Fj
		retn
; ---------------------------------------------------------------------------

loc_F78:				; CODE XREF: COPYELEM+11j
		stosb
		call	INCBXCHK
		jnb	short loc_F75
		lodsb
		xor	ah, ah
		mov	cx, 300h
		call	CopyPiece
		call	BXCHK
		jnb	short loc_F75
		or	al, al
		jz	short loc_F71
		jmp	short loc_F6A

; --------------- S U B	R O U T	I N E ---------------------------------------

DELELMES:				; CODE XREF: seg000:0F49p
		dec	di
		dec	bx

loc_F94:				; CODE XREF: DELELMES+13j
		cmp	di, dx
		jz	short locret_F77
		push	ax
		mov	al, [es:di-1]
		call	PATHCHRCMP
		pop	ax
		jz	short locret_F77
		dec	di
		dec	bx
		jmp	short loc_F94

; ---------------------------------------------------------------------------

loc_FA7:				; CODE XREF: seg000:0F43j seg000:0F4Fj
		dec	di

loc_FA8:				; CODE XREF: seg000:0F1Cj
		stosb
		jmp	SYS_RET_OK

; --------------- S U B	R O U T	I N E ---------------------------------------

CopyPiece:				; CODE XREF: COPYELEM+7p COPYELEM+31p	...
		stosb
		inc	cl
		call	INCBXCHK
		jnb	short locret_FC8
		or	al, al
		jz	short locret_FC8
		cmp	cl, ch
		jbe	short loc_FBE
		dec	di
		dec	bx

loc_FBE:				; CODE XREF: CopyPiece+Ej
		lodsb
		call	PATHCHRCMP
		jz	short locret_FC8
		cmp	al, ah
		jnz	short CopyPiece

locret_FC8:				; CODE XREF: CopyPiece+6j CopyPiece+Aj ...
		retn

; ---------------------------------------------------------------------------

loc_FC9:				; CODE XREF: seg000:0FCFj seg000:0FD6j
		jmp	loc_1071
; ---------------------------------------------------------------------------

_$RMDIR:				; CODE XREF: seg000:0FF7j
					; DATA XREF: seg000:07B2o
		call	validate_path
		jb	short loc_FC9
		mov	si, dx
		call	GETPATH
		jb	short loc_FC9
		jnz	short loc_FFB
		mov	di, word [DIRSTART]
		or	di, di
		jz	short loc_FFB
		mov	cx, [es:bp+1Ch]
		cmp	cx, 0FFFFh
		jnz	short loc_1000
		call	GETCURRDIR
		call	get_user_stack
		mov	dx, [si+6]
		mov	ds, word [si+0Eh]
		jmp	short _$RMDIR
; ---------------------------------------------------------------------------

loc_FF9:				; CODE XREF: seg000:1033j seg000:103Cj ...
		pop	ax
		pop	ax

loc_FFB:				; CODE XREF: seg000:0FD8j seg000:0FE0j
		mov	al, 5

loc_FFD:				; CODE XREF: seg000:loc_1006j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_1000:				; CODE XREF: seg000:0FE9j
		cmp	di, cx
		jnz	short loc_1008
		mov	al, 10h

loc_1006:				; CODE XREF: seg000:1073j
		jmp	short loc_FFD
; ---------------------------------------------------------------------------

loc_1008:				; CODE XREF: seg000:1002j
		lds	di, [CURBUF]
		sub	bx, di
		push	bx
		push	word [di+8]
		push	ss
		pop	ds
		push	ss
		pop	es
		mov	di, NAME1
		mov	al, '?'
		mov	cx, 11
		rep stosb
		xor	al, al
		stosb
		call	STARTSRCH
		call	GETENTRY
		mov	ds, word [CURBUF+2]
		mov	si, bx
		lodsw
		cmp	ax, 202Eh
		jnz	short loc_FF9
		add	si, 1Eh
		lodsw
		cmp	ax, 2E2Eh
		jnz	short loc_FF9
		push	ss
		pop	ds
		mov	word [LASTENT], 2
		call	GETENTRY
		mov	byte [ATTRIB], 16h
		call	SRCH
		jnb	short loc_FF9
		les	bp, [THISDPB]
		mov	bx, [DIRSTART]
		call	RELEASE
		pop	dx
		xor	al, al
		call	GETBUFFR
		lds	di, [CURBUF]
		pop	bx
		add	bx, di
		mov	byte [bx], 0E5h ; 'å'
		jmp	DIRUP
; ---------------------------------------------------------------------------

loc_1071:				; CODE XREF: seg000:loc_FC9j
		mov	al, 3
		jmp	short loc_1006

; --------------- S U B	R O U T	I N E ---------------------------------------


arena_free_process:			; CODE XREF: FATALC+9Ap
		mov	di, 0
		mov	ax, [ss:arena_head]
		call	check_signature

loc_107F:				; CODE XREF: arena_free_process+21j
		jnb	short loc_1082

locret_1081:				; CODE XREF: arena_free_process+1Cj
		retn
; ---------------------------------------------------------------------------

loc_1082:				; CODE XREF: arena_free_process:loc_107Fj
		push	es
		pop	ds
		cmp	word [1], bx
		jnz	short loc_108E
		mov	word [1], di

loc_108E:				; CODE XREF: arena_free_process+13j
		cmp	byte [di], 5Ah ; 'Z'
		jz	short locret_1081
		call	arena_next
		jmp	short loc_107F

; --------------- S U B	R O U T	I N E ---------------------------------------

arena_next:				; CODE XREF: arena_free_process+1Ep
					; Coalesce+5p ...
		mov	ax, ds
		add	ax, word [3]
		inc	ax

; --------------- S U B	R O U T	I N E ---------------------------------------


check_signature:			; CODE XREF: arena_free_process+7p
					; _$ALLOC+15p ...
		mov	es, ax
		cmp	byte [es:di], 4Dh ;	'M'
		jz	short loc_10AF
		cmp	byte [es:di], 5Ah ;	'Z'
		jz	short loc_10AF
		stc
		retn
; ---------------------------------------------------------------------------

loc_10AF:				; CODE XREF: check_signature+6j
					; check_signature+Cj
		clc

locret_10B0:				; CODE XREF: Coalesce+3j Coalesce+8j ...
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

Coalesce:				; CODE XREF: Coalesce+20j
					; _$ALLOC:loc_1118p ...
		cmp	byte [di], 5Ah ; 'Z'
		jz	short locret_10B0
		call	arena_next
		jb	short locret_10B0
		cmp	[es:1], di
		jnz	short locret_10B0
		mov	cx, [es:3]
		inc	cx
		add	word [3], cx
		mov	cl, [es:di]
		mov	[di], cl
		jmp	short Coalesce

; --------------- S U B	R O U T	I N E ---------------------------------------

_$ALLOC:				; CODE XREF: seg000:30C6p seg000:315Bp ...
		xor	ax, ax
		mov	di, ax
		mov	[ss:FirstArena], ax
		mov	[ss:BestArena], ax
		mov	[ss:LastArena], ax
		push	ax
		mov	ax, [ss:arena_head]
		call	check_signature
		jb	short loc_10FF

loc_10ED:				; CODE XREF: _$ALLOC+2Aj
		push	es
		pop	ds
		cmp	[1], di
		jz	short loc_1118

loc_10F5:				; CODE XREF: _$ALLOC+58j _$ALLOC+87j
		cmp	byte [di], 5Ah ; 'Z'
		jz	short loc_1105
		call	arena_next
		jnb	short loc_10ED

loc_10FF:				; CODE XREF: _$ALLOC+18j _$ALLOC+48j
		pop	ax

loc_1100:				; CODE XREF: _$SETBLOCK:loc_11CBj
		mov	al, 7

loc_1102:				; CODE XREF: _$ALLOC+43j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_1105:				; CODE XREF: _$ALLOC+25j
		cmp	word [ss:FirstArena], 0
		jnz	short loc_1175

loc_110D:				; CODE XREF: _$SETBLOCK+1Ej
		call	get_user_stack
		pop	bx
		mov	[si+2],	bx
		mov	al, 8
		jmp	short loc_1102
; ---------------------------------------------------------------------------

loc_1118:				; CODE XREF: _$ALLOC+20j
		call	Coalesce
		jb	short loc_10FF
		mov	cx, [3]
		pop	dx
		cmp	cx, dx
		jbe	short loc_1128
		mov	dx, cx

loc_1128:				; CODE XREF: _$ALLOC+51j
		push	dx
		cmp	bx, cx
		ja	short loc_10F5
		cmp	word [ss:FirstArena], 0
		jnz	short loc_113A
		mov	[ss:FirstArena], ds

loc_113A:				; CODE XREF: _$ALLOC+60j
		cmp	word [ss:BestArena], 0
		jz	short loc_1150
		push	es
		mov	es, [ss:BestArena]
		cmp	word [es:3], cx
		pop	es
		jbe	short loc_1155

loc_1150:				; CODE XREF: _$ALLOC+6Dj
		mov	[ss:BestArena], ds

loc_1155:				; CODE XREF: _$ALLOC+7Bj
		mov	[ss:LastArena], ds
		jmp	short loc_10F5
; ---------------------------------------------------------------------------

loc_115C:				; CODE XREF: _$ALLOC+A8j
		mov	ds, [ss:LastArena]
		mov	cx, word [3]
		sub	cx, bx
		mov	dx, ds
		jz	short loc_11B0
		add	dx, cx
		mov	es, dx
		dec	cx
		xchg	bx, cx
		jmp	short loc_119B
; ---------------------------------------------------------------------------
		nop

loc_1175:				; CODE XREF: _$ALLOC+38j
		cmp	byte [ss:AllocMethod], 1
		ja	short loc_115C
		mov	ds, [ss:FirstArena]
		jb	short loc_1189
		mov	ds, [ss:BestArena]

loc_1189:				; CODE XREF: _$ALLOC+AFj _$SETBLOCK+1Cj
		mov	cx, word [3]
		sub	cx, bx
		mov	ax, ds
		mov	dx, ax
		jz	short loc_11B0
		add	ax, bx
		inc	ax
		mov	es, ax
		dec	cx

loc_119B:				; CODE XREF: _$ALLOC+9Fj
		mov	word [3], bx
		mov	word [es:3], cx
		mov	bl, 4Dh	; 'M'
		xchg	bl, [di]
		mov	[es:di], bl
		mov	word [es:1], di

loc_11B0:				; CODE XREF: _$ALLOC+96j _$ALLOC+C0j
		mov	ds, dx
		mov	ax, [ss:CurrentPDB]
		mov	word [1], ax
		mov	ax, ds
		inc	ax
		pop	bx

loc_11BD:				; CODE XREF: seg000:loc_11F1j
		jmp	SYS_RET_OK

; --------------- S U B	R O U T	I N E ---------------------------------------

_$SETBLOCK:				; CODE XREF: seg000:34AEp
					; DATA XREF: seg000:07D2o
		mov	di, 0
		mov	ax, es
		dec	ax
		call	check_signature
		jnb	short loc_11CE

loc_11CB:				; CODE XREF: _$SETBLOCK+13j
		jmp	loc_1100
; ---------------------------------------------------------------------------

loc_11CE:				; CODE XREF: _$SETBLOCK+9j
		mov	ds, ax
		call	Coalesce
		jb	short loc_11CB
		mov	cx, word [3]
		push	cx
		cmp	bx, cx
		jbe	short loc_1189
		jmp	loc_110D

; ---------------------------------------------------------------------------

_$DEALLOC:				; DATA XREF: seg000:07D0o
		mov	di, 0
		mov	ax, es
		dec	ax
		call	check_signature
		jb	short loc_11F3
		mov	word [es:1], di

loc_11F1:				; CODE XREF: seg000:loc_1208j
		jmp	short loc_11BD
; ---------------------------------------------------------------------------

loc_11F3:				; CODE XREF: seg000:11EAj
		mov	al, 9

loc_11F5:				; CODE XREF: seg000:1200j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

_$ALLOCOPER:				; DATA XREF: seg000:07EEo
		cmp	al, 1
		jb	short loc_1202
		jz	short loc_120A
		mov	al, 1
		jmp	short loc_11F5
; ---------------------------------------------------------------------------

loc_1202:				; CODE XREF: seg000:11FAj
		mov	al, [ss:AllocMethod]
		xor	ah, ah

loc_1208:				; CODE XREF: seg000:120Fj
		jmp	short loc_11F1
; ---------------------------------------------------------------------------

loc_120A:				; CODE XREF: seg000:11FCj
		mov	[ss:AllocMethod], bl
		jmp	short loc_1208
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR IOFUNC

IOFUNC_RETRY:				; CODE XREF: IOFUNC+76j
		call	restore_world
; END OF FUNCTION CHUNK	FOR IOFUNC

; --------------- S U B	R O U T	I N E ---------------------------------------

IOFUNC:					; CODE XREF: seg000:0AB7p seg000:0AD8p ...

; FUNCTION CHUNK AT 1211 SIZE 00000003 BYTES

		mov	[ss:IOXAD+2], ss
		mov	word [ss:IOXAD], DEVIOBUF
		mov	word [ss:IOSCNT], 1
		mov	word [ss:DEVIOBUF], ax
		test	byte [si+18h], 80h
		jnz	short loc_1234
		jmp	loc_12B4
; ---------------------------------------------------------------------------

loc_1234:				; CODE XREF: IOFUNC+1Bj
		call	save_world
		push	ds
		push	ss
		pop	es
		push	ss
		pop	ds
		xor	bx, bx
		mov	[IOCALL_REQSTAT], bx
		mov	[IOMED], bl
		mov	bx, IOCALL ; 147h
		mov	cx, 416h
		or	ah, ah
		jz	short loc_1268
		mov	cx, 50Eh
		dec	ah
		jz	short loc_1268
		mov	cx, 816h
		dec	ah
		jz	short loc_12B0
		mov	cx, 0A0Dh
		dec	ah
		jz	short loc_12B0
		mov	cx, 70Fh

loc_1268:				; CODE XREF: IOFUNC+3Aj IOFUNC+41j
		mov	ah, 86h	; ''

loc_126A:				; CODE XREF: IOFUNC+9Ej
		mov	[IOCALL], cl
		mov	[IOCALL_REQFUNC], ch
		mov	cl, ah
		pop	ds
		call	DEVIOCALL
		mov	di, [ss:IOCALL_REQSTAT]
		test	di, 8000h
		jz	short loc_1292
		mov	ah, cl
		call	CHARHARD
		cmp	al, 1
		jz	short IOFUNC_RETRY
		and	byte [ss:IOCALL_REQSTAT+1], 0FDh

loc_1292:				; CODE XREF: IOFUNC+6Dj
		push	ss
		pop	ds
		cmp	ch, 5
		jnz	short loc_129F
		mov	al, [IOMED]  ; [IORCHR]
		mov	[DEVIOBUF], al

loc_129F:				; CODE XREF: IOFUNC+83j
		mov	ah, [IOCALL_REQSTAT+1]
		not	ah
		and	ah, 2
		call	restore_world
		mov	ax, [ss:DEVIOBUF]
		retn
; ---------------------------------------------------------------------------

loc_12B0:				; CODE XREF: IOFUNC+48j IOFUNC+4Fj
		mov	ah, 87h	; ''
		jmp	short loc_126A
; ---------------------------------------------------------------------------

loc_12B4:				; CODE XREF: IOFUNC+1Dj
		or	ah, ah
		jz	short IOIN
		dec	ah
		jz	short loc_12C1
		dec	ah
		jz	short loc_12D1
		retn
; ---------------------------------------------------------------------------

loc_12C1:				; CODE XREF: IOFUNC+A6j
		push	word [si+21h]
		push	word [si+23h]
		call	IOIN
		pop	word [si+23h]
		pop	word [si+21h]
		retn
; ---------------------------------------------------------------------------

loc_12D1:				; CODE XREF: IOFUNC+AAj
		call	SETXADDR
		call	STORE
		call	FINNOSAV
		call	RESTXADDR

IOUT_RETN:				; CODE XREF: IOIN+14j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

IOIN:					; CODE XREF: IOFUNC+A2j IOFUNC+B3p
		call	SETXADDR
		call	LOAD
		push	cx
		call	FINNOSAV
		pop	cx
		or	cx, cx
		call	RESTXADDR
		mov	al, [ss:DEVIOBUF]
		jnz	short IOUT_RETN
		mov	al, 1Ah
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

SETXADDR:				; CODE XREF: IOFUNC:loc_12D1p IOINp
		pop	word [ss:CALLBPB]
		call	save_world
		push	word [ss:DMAADD]
		push	word [ss:DMAADD+2]
		push	ds
		push	ss
		pop	ds
		mov	cx, [IOXAD+2]
		mov	word [DMAADD+2], cx
		mov	cx, [IOXAD]
		mov	word [DMAADD], cx
		mov	cx, [IOSCNT]
		pop	ds
		mov	word [si+0Eh], 1
		mov	dx, si
		call	GETRRPOS
		jmp	short RESTRET

; --------------- S U B	R O U T	I N E ---------------------------------------

RESTXADDR:				; CODE XREF: IOFUNC+C6p IOIN+Dp
		pop	word [ss:CALLBPB]
		pop	word [ss:DMAADD+2]
		pop	word [ss:DMAADD]
		call	restore_world

RESTRET:				; CODE XREF: SETXADDR+34j
		jmp	word [ss:CALLBPB]   ; SS:CALLSCNT


; --------------- S U B	R O U T	I N E ---------------------------------------

DEVIOCALL:			; CODE XREF: IOFUNC+61p LOAD+2Ep ...
		lds	si, [si+19h]

; --------------- S U B	R O U T	I N E ---------------------------------------

DEVIOCALL2:			; CODE XREF: LOAD+7Cp STORE+A4p ...
		mov	ax, [si+6]
		mov	[ss:CALLDEVAD], ax
		mov	[ss:CALLDEVAD+2], ds
		call	far [ss:CALLDEVAD]
		mov	ax, [si+8]
		mov	[ss:CALLDEVAD], ax
		call	far [ss:CALLDEVAD]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DEVNAME:				; CODE XREF: FINDNAME+2p
					; GOTPRESTRING2+24p ...
		push	si
		push	di
		push	cx
		test	byte [ATTRIB], 8
		jnz	short loc_138F
		mov	si, DEVHEAD

LOOKIO:					; CODE XREF: DEVNAME+28j
		test	word [si+4], 8000h
		jz	short loc_1388
		push	si
		add	si, 10
		mov	di, NAME1
		mov	cx, 4
		repe cmpsw
		pop	si
		jz	short IOCHK

loc_1388:				; CODE XREF: DEVNAME+12j
		lds	si, [si]
		cmp	si, 0FFFFh
		jnz	short LOOKIO

loc_138F:				; CODE XREF: DEVNAME+8j
		stc

loc_1390:				; CODE XREF: DEVNAME+44j
		push	ss
		pop	ds
		pop	cx
		pop	di
		pop	si
		retn
; ---------------------------------------------------------------------------

IOCHK:				; CODE XREF: DEVNAME+21j
		mov	word [ss:DEVPT+2], ds
		mov	bh, [si+4]
		or	bh, 0C0h
		and	bh, 0DFh
		mov	word [ss:DEVPT], si
		jmp	short loc_1390

; --------------- S U B	R O U T	I N E ---------------------------------------


GETBP:					; CODE XREF: seg000:0858p seg000:0892p ...
		les	bp, [DPBHEAD]
		and	al, 3Fh
		cmp	al, [NUMIO]
		cmc
		jb	short GOTDPB

FNDDPB:					; CODE XREF: GETBP+17j
		cmp	al, [es:bp]
		jz	short GOTDPB
		les	bp, [es:bp+18h]
		jmp	short FNDDPB
; ---------------------------------------------------------------------------

GOTDPB:					; CODE XREF: GETBP+Bj GETBP+11j
		mov	word [THISDPB], bp
		mov	word [THISDPB+2], es
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

SETREAD:				; CODE XREF: LOAD+26p LOAD+6Dp ...
		push	di
		push	cx
		push	ax
		mov	cl, 4

SETCALLHEAD:				; CODE XREF: SETWRITE+Aj
		mov	al, 16h
		push	ss
		pop	es
		mov	di, DEVCALL
		stosb
		pop	ax
		stosb
		push	ax
		mov	al, cl
		stosb
		xor	ax, ax
		stosw
		add	di, 8
		pop	ax
		xchg	ah, al
		stosb
		xchg	al, ah
		push	ax
		mov	ax, bx
		stosw
		mov	ax, ds
		stosw
		pop	cx
		pop	ax
		stosw
		xchg	ax, dx
		stosw
		xchg	ax, cx
		xchg	dx, cx
		pop	di
		mov	bx, DEVCALL
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

SETWRITE:				; CODE XREF: STORE+35p	STORE+95p ...
		push	di
		push	cx
		push	ax
		mov	cl, 8
		add	cl, [ss:VERFLG]
		jmp	short SETCALLHEAD


; --------------- S U B	R O U T	I N E ---------------------------------------

BUILDDIR:				; CODE XREF: NEWENTRY-Ep
		mov	ax, [ENTFREE]
		cmp	ax, 0FFFFh
		jnz	short loc_148A
		cmp	word [DIRSTART], 0
		jnz	short NEWDIR
		stc

locret_141C:				; CODE XREF: BUILDDIR+22j
		retn
; ---------------------------------------------------------------------------

NEWDIR:					; CODE XREF: seg000:0E36p BUILDDIR+Dj
		mov	bx, [DIRSTART]
		or	bx, bx
		jz	short loc_1428
		call	GETEOF

loc_1428:				; CODE XREF: BUILDDIR+17j
		mov	cx, 1
		call	ALLOCATE
		jb	short locret_141C
		mov	dx, [DIRSTART]
		or	dx, dx
		jnz	short loc_1443
		call	SETDIRSRCH
		mov	word [LASTENT], 0FFFFh
		jmp	short loc_1456
; ---------------------------------------------------------------------------

loc_1443:				; CODE XREF: BUILDDIR+2Aj
		cmp	word [CLUSNUM], 0FF8h
		jb	short loc_144F
		mov	[CLUSNUM], bx

loc_144F:				; CODE XREF: BUILDDIR+3Dj
		mov	dx, bx
		xor	bl, bl
		call	FIGREC

loc_1456:				; CODE XREF: BUILDDIR+35j
		mov	cl, [es:bp+4]
		inc	cl
		xor	ch, ch

ZERODIR:				; CODE XREF: BUILDDIR+78j
		push	cx
		mov	al, 0FFh
		call	GETBUFFR
		mov	cx, [es:bp+2]
		push	es
		les	di, [CURBUF]
		push	di
		add	di, 10h
		xor	ax, ax
		shr	cx, 1
		rep stosw
		jnb	short loc_147A
		stosb

loc_147A:				; CODE XREF: BUILDDIR+6Bj
		pop	di
		inc	al
		mov	[es:di+5], al
		pop	es
		pop	cx
		inc	dx
		loop	ZERODIR
		mov	ax, [LASTENT]
		inc	ax

loc_148A:				; CODE XREF: BUILDDIR+6j
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

SETDOTENT:				; CODE XREF: seg000:0E52p seg000:0E5Ap
		mov	cx, 4
		mov	ax, 2020h
		rep stosw
		stosb
		mov	si, word [THISFCB]
		mov	al, 10h
		stosb
		add	di, 0Ah
		mov	ax, [si+16h]
		stosw
		mov	ax, [si+14h]
		stosw
		mov	ax, dx
		stosw
		xor	ax, ax
		stosw
		stosw
GETFILE_RETN:				; CODE XREF: GETFILE+3j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

GETFILE:				; CODE XREF: seg000:_$DIR_SEARCH_FIRSTp
					; seg000:_$GET_FCB_FILE_LENGTHp	...
		call	MOVNAME
		jb	short GETFILE_RETN
		push	dx
		push	ds
		call	FINDNAME
		pop	es
		pop	di
GETNAME_RETN:				; CODE XREF: seg000:14BFj
		retn

; ---------------------------------------------------------------------------

GETNAME:
		call	MOVNAME
		jb	short GETNAME_RETN

; --------------- S U B	R O U T	I N E ---------------------------------------

FINDNAME:				; CODE XREF: GETFILE+7p
					; seg000:loc_28C5p ...
		push	ss
		pop	ds
		call	DEVNAME
		jb	short FINDENTRY
		call	BUILDFCB
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

FINDENTRY:				; CODE XREF: FINDNAME+5j ROOTPATH+3Fp	...
		call	STARTSRCH
		cmp	byte [ATTRIB], 8
		jnz	short loc_14D9
		call	SETROOTSRCH

loc_14D9:				; CODE XREF: FINDENTRY+8j
		call	GETENTRY

SRCH:					; CODE XREF: seg000:104Ep
					; FINDENTRY+4Aj
		push	ds
		mov	ds, [CURBUF+2]
		mov	ah, [bx]
		or	ah, ah
		jz	short loc_151A
		cmp	ah, byte [ss:DELALL]
		jz	short loc_151A
		test	byte [bx+0Bh], 8
		jz	short loc_14F9
		inc	byte [ss:VOLID]

loc_14F9:				; CODE XREF: FINDENTRY+26j
		mov	si, bx
		push	ss
		pop	es
		mov	di, NAME1
		mov	cx, 11

loc_1503:				; CODE XREF: FINDENTRY+40j
		repe cmpsb
		jz	short FOUND
		cmp	byte [es:di-1], 3Fh	; '?'
		jz	short loc_1503
		pop	ds

NEXTENT:				; CODE XREF: seg000:0A1Cp
					; FINDENTRY+61j ...
		les	bp, [THISDPB]
		call	NEXTENTRY
		jnb	short SRCH
		jmp	short loc_1567

loc_151A:				; CODE XREF: FINDENTRY+19j
					; FINDENTRY+20j
		pop	ds
		mov	cx, [LASTENT]
		cmp	cx, [ENTFREE]
		jnb	short loc_1529
		mov	[ENTFREE], cx

loc_1529:				; CODE XREF: FINDENTRY+57j
		cmp	ah, [DELALL]
		jz	short NEXTENT
		mov	[ENTLAST], cx
		stc
		jmp	short loc_1567
; ---------------------------------------------------------------------------

FOUND:				; CODE XREF: FINDENTRY+39j
		mov	ch, [si]
		pop	ds
		mov	ah, [ATTRIB]
		test	ch, 8
		jz	short loc_154B
		test	ah, 8
		jz	short NEXTENT
		xor	ah, ah
		jmp	short loc_155F
; ---------------------------------------------------------------------------

loc_154B:				; CODE XREF: FINDENTRY+74j
		cmp	ah, 8
		jz	short NEXTENT
		add	si, 0Fh
		call	MatchAttributes
		jz	short loc_155F
		test	byte [CREATING], 0FFh
		jz	short NEXTENT

loc_155F:				; CODE XREF: FINDENTRY+7Dj
					; FINDENTRY+8Aj
		les	bp, [THISDPB]
		mov	ah, [es:bp]

loc_1567:				; CODE XREF: FINDENTRY+4Cj
					; FINDENTRY+68j
		push	ss
		pop	es
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

GETENTRY:				; CODE XREF: seg000:1026p seg000:1046p ...
		mov	ax, [LASTENT]

GETENT:					; CODE XREF: seg000:0A19p seg000:0E3Bp ...
		mov	[LASTENT], ax
		mov	cl, 4
		shl	ax, cl
		xor	dx, dx
		shl	ax, 1
		rcl	dx, 1
		mov	bx, [es:bp+2]
		and	bl, 0E0h
		div	bx
		mov	bx, dx
		push	bx
		call	DIRREAD
		pop	bx

SETENTRY:				; CODE XREF: NEXTENTRY+4Bj
		mov	dx, [CURBUF]
		add	dx, 10h
		add	bx, dx
		add	dx, [es:bp+2]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

NEXTENTRY:				; CODE XREF: FINDENTRY+47p
		mov	ax, [LASTENT]
		cmp	ax, [ENTLAST]
		jz	short NONE
		inc	ax
		add	bx, 20h	; ' '
		cmp	bx, dx
		jb	short HAVIT
		mov	bl, [SECCLUSPOS]
		inc	bl
		cmp	bl, [CLUSFAC]
		jb	short SAMECLUS
		mov	bx, [NXTCLUSNUM]
		cmp	bx, 0FF8h
		jnb	short NONE
		cmp	bx, 2
		jb	short NONE
		jmp	short GETENT

NONE:					; CODE XREF: NEXTENTRY+7j
					; NEXTENTRY+25j ...
		stc
		retn

HAVIT:					; CODE XREF: NEXTENTRY+Fj
		mov	[LASTENT], ax
		clc
		retn
; ---------------------------------------------------------------------------

SAMECLUS:				; CODE XREF: NEXTENTRY+1Bj
		mov	byte [SECCLUSPOS], bl
		mov	[LASTENT], ax
		push	ds
		lds	di, [CURBUF]
		mov	dx, [di+8]
		inc	dx
		pop	ds
		call	FIRSTCLUSTER
		xor	bx, bx
		jmp	short SETENTRY

; --------------- S U B	R O U T	I N E ---------------------------------------


GETCURRDIR:				; CODE XREF: seg000:0FEBp GETPATH+3Ap	...

; FUNCTION CHUNK AT 1623 SIZE 00000008 BYTES

		mov	bx, [es:bp+1Ch]
		or	bx, bx
		jz	short SETROOTSRCH
		cmp	bx, 0FF8h
		jb	short SETDIRSRCH
		push	es
		pop	ds
		lea	si, [bp+1Eh]
		call	ROOTPATH
		jnb	short SETCURR
		mov	word [es:bp+1Ch], 0

; --------------- S U B	R O U T	I N E ---------------------------------------

SETROOTSRCH:				; CODE XREF: FINDENTRY+Ap
					; GETCURRDIR+6j ...
		push	ss
		pop	ds
		xor	ax, ax
		mov	[DIRSTART], ax
		mov	[SECCLUSPOS], al
		dec	ax
		mov	[CLUSNUM], ax
		mov	ax, [es:bp+0Bh]
		mov	dx, [es:bp+10h]
		sub	ax, dx
		mov	[CLUSFAC], al
		mov	[DIRSEC], dx
		retn

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR GETCURRDIR

SETCURR:				; CODE XREF: GETCURRDIR+16j
		mov	ax, [DIRSTART]
		mov	[es:bp+1Ch], ax
		retn
; END OF FUNCTION CHUNK	FOR GETCURRDIR

; --------------- S U B	R O U T	I N E ---------------------------------------

SETDIRSRCH:				; CODE XREF: seg000:0A0Fp BUILDDIR+2Cp ...
		or	bx, bx
		jz	short SETROOTSRCH
		push	ss
		pop	ds
		mov	[DIRSTART], bx
		mov	al, [es:bp+4]
		inc	al
		mov	[CLUSFAC], al
		call	UNPACK
		mov	[CLUSNUM], di
		mov	dx, bx
		xor	bl, bl
		mov	[SECCLUSPOS], bl
		call	FIGREC
		mov	[DIRSEC], dx
		retn

; ---------------------------------------------------------------------------

MAKENODE:				; CODE XREF: seg000:0E18p seg000:3B0Ep ...
		push	ax
		call	GETPATH
		mov	dl, cl
		pop	cx
		mov	byte [ss:ATTRIB], cl
		mov	cx, ax
		jnb	short loc_1674
		jnz	short loc_166B
		or	dl, dl
		jnz	short loc_166F

loc_166B:				; CODE XREF: seg000:1665j
		mov	al, 4

loc_166D:				; CODE XREF: seg000:169Aj seg000:16AAj
		stc
		retn
; ---------------------------------------------------------------------------

loc_166F:				; CODE XREF: seg000:1669j
		xor	al, al
		stc
		jmp	short loc_16AE
; ---------------------------------------------------------------------------

loc_1674:				; CODE XREF: seg000:1663j
		jz	short loc_16A2
		mov	al, 3
		test	byte [ss:ATTRIB], 18h
		jnz	short loc_1698
		or	ch, ch
		js	short loc_169C
		push	cx
		mov	ds, [ss:CURBUF+2]
		mov	ch, [bx+0Bh]
		test	ch, 1
		jnz	short loc_1695
		call	MatchAttributes

loc_1695:				; CODE XREF: seg000:1690j
		pop	cx
		jz	short loc_169C

loc_1698:				; CODE XREF: seg000:167Ej
		mov	al, 5
		jmp	short loc_166D
; ---------------------------------------------------------------------------

loc_169C:				; CODE XREF: seg000:1682j seg000:1696j
		xor	al, al
		mov	al, 3
		jmp	short loc_16AE
; ---------------------------------------------------------------------------

loc_16A2:				; CODE XREF: seg000:loc_1674j
		mov	al, 1
		test	byte [ss:ATTRIB], 10h
		jz	short loc_166D
		clc
		retn
; ---------------------------------------------------------------------------

loc_16AE:				; CODE XREF: seg000:1672j seg000:16A0j
		push	ax
		push	ss
		pop	ds
		pushf
		cmp	byte [NAME1], 2Eh ; '.'
		jnz	short loc_16BE
		popf
		mov	al, 1
		jmp	short loc_16CE
; ---------------------------------------------------------------------------

loc_16BE:				; CODE XREF: seg000:16B7j
		popf
		push	es
		les	di, [THISFCB]
		push	ds
		push	di
		push	es
		mov	ax, cx
		call	NEWENTRY
		pop	ds
		pop	es

loc_16CE:				; CODE XREF: seg000:16BCj
		or	al, al
		pop	ax
		jz	short loc_16D7
		mov	al, 2
		stc
		retn
; ---------------------------------------------------------------------------

loc_16D7:				; CODE XREF: seg000:16D1j
		push	es
		les	di, [THISFCB]
		inc	di
		push	ds
		push	si
		mov	ds, [CURBUF+2]
		mov	si, bx
		mov	cx, 0Bh
		rep movsb
		pop	si
		pop	ds
		pop	es
		cmp	al, 1
		ja	short loc_16F5
		or	al, al
		clc
		retn
; ---------------------------------------------------------------------------

loc_16F5:				; CODE XREF: seg000:16EFj
		stc

locret_16F6:				; CODE XREF: seg000:1743j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


GETPATH:				; CODE XREF: seg000:0EB5p seg000:0FD3p ...

; FUNCTION CHUNK AT 174C SIZE 00000057 BYTES

		xor	ax, ax
		mov	[ss:DRIVESPEC], ax
		mov	byte [ss:ATTRIB], 16h
		lodsb
		call	PATHCHRCMP
		jz	short DEFAULTROOT
		mov	ah, al
		lodsb
		cmp	al, ':'
		jz	short DRVSPEC
		dec	si
		dec	si
		push	ds
		push	si
		push	ss
		pop	es
		cmp	byte [ss:device_availability], 0
		jz	short loc_1723
		call	GOTPRESTRING2
		jnb	short loc_176B

loc_1723:				; CODE XREF: GETPATH+25j
		call	DEFPATH

loc_1726:				; CODE XREF: GETPATH+A4j
		mov	al, [ss:NoSetDir]
		push	ax
		mov	byte [ss:NoSetDir], 0
		call	GETCURRDIR
		pop	ax
		mov	[ss:NoSetDir], al
		pop	si
		pop	ds
		jmp	FINDPATH

; ---------------------------------------------------------------------------

DEFPATH:				; CODE XREF: GETPATH:loc_1723p
					; GETPATH+57p
		xor	al, al

DRVPATH:				; CODE XREF: GETPATH+94p
		call	GETTHISDRV
		jb	short locret_16F6
		push	ss
		pop	ds
		call	FATREAD
		clc
		retn
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR GETPATH

DEFAULTROOT:				; CODE XREF: GETPATH+10j
		push	ds
		push	si
		call	DEFPATH
		pop	si
		pop	ds

loc_1753:				; CODE XREF: GETPATH+9Fj
		inc	byte [ss:ROOTSTART]
		cmp	byte [si], 0
		jz	short loc_179D
		push	ds
		push	si
		push	es
		call	CHKDEV
		pop	es
		jnb	short loc_176B
		pop	si
		pop	ds
		jmp	ROOTPATH
; ---------------------------------------------------------------------------

loc_176B:				; CODE XREF: GETPATH+2Aj GETPATH+6Dj ...
		pop	ax
		pop	ax
		push	ss
		pop	es
		call	BUILDFCB
		inc	al

locret_1774:				; CODE XREF: GETPATH+99j
		retn
; ---------------------------------------------------------------------------

DRVSPEC:				; CODE XREF: GETPATH+17j
		inc	byte [ss:DRIVESPEC]
		mov	al, ah
		or	al, 20h
		sub	al, 60h	; '`'
		push	ds
		push	si
		push	ax
		push	ss
		pop	es
		call	GOTPRESTRING2
		pop	ax
		jnb	short loc_176B
		call	DRVPATH
		pop	si
		pop	ds
		jb	short locret_1774
		lodsb
		call	PATHCHRCMP
		jz	short loc_1753
		dec	si
		push	ds
		push	si
		jmp	short loc_1726
; ---------------------------------------------------------------------------

loc_179D:				; CODE XREF: GETPATH+64j
		call	SETROOTSRCH
		xor	al, al
		retn
; END OF FUNCTION CHUNK	FOR GETPATH

; --------------- S U B	R O U T	I N E ---------------------------------------


CHKDEV:					; CODE XREF: GETPATH+69p
		push	ss
		pop	es
		mov	di, 4
		xor	cx, cx
		mov	cl, [ss:DEVSTRLEN]

loc_17AF:				; CODE XREF: CHKDEV+18j
		repe cmpsb
		jz	short loc_17BF
		dec	si
		call	GETLET
		cmp	al, [es:di-1]
		jz	short loc_17AF

loc_17BD:				; CODE XREF: CHKDEV+20j
		stc
		retn
; ---------------------------------------------------------------------------

loc_17BF:				; CODE XREF: CHKDEV+Ej
		lodsb
		call	PATHCHRCMP
		jnz	short loc_17BD

; --------------- S U B	R O U T	I N E ---------------------------------------


GOTPRESTRING2:				; CODE XREF: GETPATH+27p GETPATH+8Ep
		mov	di, NAME1
		mov	cx, 9

loc_17CB:				; CODE XREF: GOTPRESTRING2+17j
		call	GETLET
		cmp	al, '.'
		jz	short loc_17E0
		call	PATHCHRCMP
		jz	short loc_17DE
		or	al, al
		jz	short loc_17E0
		stosb
		loop	loc_17CB

loc_17DE:				; CODE XREF: GOTPRESTRING2+10j
		stc
		retn
; ---------------------------------------------------------------------------

loc_17E0:				; CODE XREF: GOTPRESTRING2+Bj
					; GOTPRESTRING2+14j
		add	cx, 2
		mov	al, 20h	; ' '
		rep stosb
		push	ss
		pop	ds
		call	DEVNAME
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

ROOTPATH:				; CODE XREF: GETCURRDIR+13p
					; GETPATH+71j
		push	ds
		call	SETROOTSRCH
		pop	ds

FINDPATH:				; CODE XREF: GETPATH+44j ROOTPATH+9Ej
		push	es
		push	si
		call	NAMETRANS
		mov	cl, al
		or	cl, 80h
		pop	di
		pop	es
		cmp	si, di
		jnz	short check_device
		jmp	BADPATH
; ---------------------------------------------------------------------------

check_device:				; CODE XREF: ROOTPATH+13j
		push	ds
		push	si
		mov	al, [si]
		push	ss
		pop	ds
		cmp	byte [device_availability], 0
		jz	short FindFile
		push	es
		push	ss
		pop	es
		call	DEVNAME
		pop	es
		jb	short FindFile
		or	al, al
		jnz	short loc_1893
		pop	si
		pop	si
		push	ss
		pop	es
		call	BUILDFCB
		inc	al
		retn
; ---------------------------------------------------------------------------

FindFile:				; CODE XREF: ROOTPATH+23j ROOTPATH+2Cj
		push	di
		push	es
		push	cx
		call	FINDENTRY
		pop	cx
		pop	es
		pop	di
		jb	short loc_18A4
		lds	di, [CURBUF]
		test	byte [bx+0Bh], 10h
		jz	short loc_1893
		cmp	byte [ss:NoSetDir], 0
		jz	short loc_1857
		mov	dx, di
		mov	ax, ds
		pop	di
		pop	ds
		cmp	byte [di], 0
		jz	short loc_18A1
		push	ds
		push	di
		mov	di, dx
		mov	ds, ax

loc_1857:				; CODE XREF: ROOTPATH+57j
		mov	dx, [si]
		sub	bx, di
		sub	si, di
		push	bx
		push	ax
		push	si
		push	cx
		push	word [di+8]
		mov	bx, dx
		call	SETDIRSRCH
		pop	dx
		xor	al, al
		call	GETBUFFR
		pop	cx
		pop	si
		pop	ax
		pop	bx
		mov	di, [CURBUF]
		add	si, di
		add	bx, di
		pop	di
		pop	ds
		mov	al, [di]
		or	al, al
		jz	short loc_18A1
		inc	di
		mov	si, di
		call	PATHCHRCMP
		jnz	short loc_188E
		jmp	FINDPATH
; ---------------------------------------------------------------------------

loc_188E:				; CODE XREF: ROOTPATH+9Cj
		dec	si

BADPATH:				; CODE XREF: ROOTPATH+15j
		xor	cl, cl
		stc
		retn
; ---------------------------------------------------------------------------

loc_1893:				; CODE XREF: ROOTPATH+30j ROOTPATH+4Fj
		pop	di
		pop	ds
		mov	al, [di]
		or	al, al
		jz	short loc_189F
		mov	si, di
		stc
		retn
; ---------------------------------------------------------------------------

loc_189F:				; CODE XREF: ROOTPATH+ACj
		inc	al

loc_18A1:				; CODE XREF: ROOTPATH+62j ROOTPATH+94j
		push	ss
		pop	ds
		retn
; ---------------------------------------------------------------------------

loc_18A4:				; CODE XREF: ROOTPATH+45j
		pop	si
		pop	ds
		mov	al, [si]
		mov	si, di
		or	al, al
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


STARTSRCH:				; CODE XREF: seg000:1023p FINDENTRYp
		les	bp, [THISDPB]
		xor	ax, ax
		mov	[LASTENT], ax
		mov	[VOLID], al
		dec	ax
		mov	[ENTFREE], ax
		mov	[ENTLAST], ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


MatchAttributes:			; CODE XREF: FINDENTRY+87p
					; seg000:1692p	...
		push	ax
		mov	al, byte [ss:ATTRIB]
		not	al
		and	al, ch
		and	al, 16h
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


SWAPBACK:				; CODE XREF: LOAD+E2p STORE+2Ep ...
		push	es
		push	di
		push	si
		push	bx
		mov	bx, 1
		call	get_sf_from_jfn
		add	di, 3
		mov	bl, byte [COUTDSAV]
		lds	si, [COUTSAV]
		mov	[es:di+19h], si
		mov	[es:di+1Bh], ds
		mov	[es:di+18h], bl
		push	ss
		pop	ds
		xor	bx, bx
		call	get_sf_from_jfn
		add	di, 3
		mov	bl, byte [CINDSAV]
		lds	si, [CINSAV]
		mov	[es:di+19h], si
		mov	[es:di+1Bh], ds
		mov	[es:di+18h], bl
		push	ss
		pop	ds
		mov	byte [CONSWAP], 0
		mov	byte [IDLEINT], 1

SWAPRET:				; CODE XREF: SWAPCON+7Dj
		pop	bx
		pop	si
		pop	di
		pop	es
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


SWAPCON:				; CODE XREF: LOAD:READCONp STORE+19p
		push	es
		push	di
		push	si
		push	bx
		mov	byte [CONSWAP], 1
		mov	byte [IDLEINT], 0
		xor	bx, bx
		call	get_sf_from_jfn
		add	di, 3
		mov	bl, [es:di+18h]
		mov	byte [CINDSAV], bl
		lds	si, [es:di+19h]
		mov	[ss:CINSAV], si
		mov	[ss:CINSAV+2], ds
		lds	si, [ss:THISFCB]
		mov	bl, [si+18h]
		lds	si, [si+19h]
		mov	[es:di+18h], bl
		mov	[es:di+19h], si
		mov	[es:di+1Bh], ds
		push	ss
		pop	ds
		mov	bx, 1
		call	get_sf_from_jfn
		add	di, 3
		mov	bl, [es:di+18h]
		mov	byte [COUTDSAV], bl
		lds	si, [es:di+19h]
		mov	[ss:COUTSAV], si
		mov	[ss:COUTSAV+2], ds
		lds	si, [ss:THISFCB]
		mov	bl, [si+18h]
		lds	si, [si+19h]
		mov	[es:di+18h], bl
		mov	[es:di+19h], si
		mov	[es:di+1Bh], ds
		push	ss
		pop	ds
		jmp	SWAPRET

; --------------- S U B	R O U T	I N E ---------------------------------------

LOAD:					; CODE XREF: IOIN+3p seg000:2831p ...
		call	SETUP
		or	bl, bl
		js	short loc_19AA
		call	DISKREAD
		retn

loc_19AA:				; CODE XREF: LOAD+5j
		les	di, [DMAADD]
		test	bl, 40h
		jz	short loc_19BA
		test	bl, 4
		jz	short loc_19F1
		xor	al, al

loc_19BA:				; CODE XREF: LOAD+12j
		jmp	loc_1A67

loc_19BD:				; CODE XREF: LOAD+55j
		push	es
		pop	ds

loc_19BF:				; CODE XREF: LOAD+47j
		mov	bx, di
		xor	dx, dx
		xor	ax, ax
		call	SETREAD
		lds	si, [ss:THISFCB]
		call	DEVIOCALL
		mov	dx, di
		mov	ah, 86h	; ''
		mov	di, [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short loc_19E8
		call	CHARHARD
		mov	di, dx
		cmp	al, 1
		jz	short loc_19BF

loc_19E8:				; CODE XREF: LOAD+3Ej
		mov	di, dx
		add	di, [ss:CALLBPB]  ; SS:CALLSCNT
		jmp	short loc_1A67

loc_19F1:				; CODE XREF: LOAD+17j
		test	bl, 20h
		jnz	short loc_19BD
		test	bl, 1
		jz	short loc_19FE
		jmp	READCON

loc_19FE:				; CODE XREF: LOAD+5Aj
		mov	ax, es
		mov	ds, ax
		mov	bx, di
		xor	dx, dx
		mov	ax, dx
		push	cx
		mov	cx, 1
		call	SETREAD
		pop	cx
		lds	si, [ss:THISFCB]
		lds	si, [si+19h]

DVRDLP:					; CODE XREF: LOAD+9Aj LOAD+C5j
		call	DSKSTATCHK
		call	DEVIOCALL2
		push	di
		mov	ah, 86h	; ''
		mov	di, [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short loc_1A3F
		call	CHARHARD
		pop	di
		mov	word [ss:CALLBPB], 1	; SS:CALLSCNT
		cmp	al, 1
		jz	short DVRDLP
		xor	al, al
		jmp	short loc_1A51

loc_1A3F:				; CODE XREF: LOAD+8Bj
		pop	di
		cmp	word [ss:CALLBPB], 1	; SS:CALLSCNT
		jnz	short loc_1A67
		push	ds
		mov	ds, [ss:CALLXAD+2]
		mov	al, [di]
		pop	ds

loc_1A51:				; CODE XREF: LOAD+9Ej
		inc	word [ss:CALLXAD]
		mov	word [ss:DEVCALL_REQSTAT], 0
		inc	di
		cmp	al, 1Ah
		jz	short loc_1A66
		cmp	al, 0Dh
		loopne	DVRDLP

loc_1A66:				; CODE XREF: LOAD+C1j
		dec	di

loc_1A67:				; CODE XREF: LOAD:loc_19BAj LOAD+50j ...
		jmp	short loc_1A88
; ---------------------------------------------------------------------------

TRANBUF:				; CODE XREF: LOAD+D5j LOAD+107j ...
		lodsb
		stosb
		cmp	al, 0Dh
		jnz	short loc_1A72
		mov	byte [si], 0Ah

loc_1A72:				; CODE XREF: LOAD+CEj
		cmp	al, 0Ah
		loopne	TRANBUF
		jnz	short loc_1A7F
		xor	si, si
		call	OUTT
		or	al, 1

loc_1A7F:				; CODE XREF: LOAD+D7j LOAD+135j
		push	ss
		pop	ds
		call	SWAPBACK
		mov	[CONTPOS], si

loc_1A88:				; CODE XREF: LOAD:loc_1A67j
		push	ss
		pop	ds
		mov	[NEXTADD], di
		jnz	short loc_1A99
		les	di, [THISFCB]
		and	byte [es:di+18h], 0BFh

loc_1A99:				; CODE XREF: LOAD+EFj
		call	SETFCB
		retn
; ---------------------------------------------------------------------------

READCON:				; CODE XREF: LOAD+5Cj
		call	SWAPCON
		mov	si, [CONTPOS]
		or	si, si
		jnz	short TRANBUF
		cmp	byte [CONBUF], 80h	; ''
		jz	short GETBUF
		mov	word [CONBUF], 0FF80h

GETBUF:				; CODE XREF: LOAD+10Ej
		push	cx
		push	es
		push	di
		mov	dx, CONBUF   ; 2AAh
		call	_$STD_CON_STRING_INPUT
		pop	di
		pop	es
		pop	cx
		mov	si, CONBUF+2 ; 2ACh
		cmp	byte [si], 1Ah
		jnz	short TRANBUF
		mov	al, 1Ah
		stosb
		dec	di
		mov	al, 0Ah
		call	OUTT
		xor	si, si
		jmp	short loc_1A7F

; --------------- S U B	R O U T	I N E ---------------------------------------


STORE:					; CODE XREF: IOFUNC+C0p seg000:2839p ...
		call	SETUP
		or	bl, bl
		js	short WRTDEV
		call	DATE16
		mov	[es:di+14h], ax
		mov	[es:di+16h], dx
		call	DISKWRITE
		retn
; ---------------------------------------------------------------------------

WRITECON:				; CODE XREF: STORE+84j
		push	ds
		push	ss
		pop	ds
		call	SWAPCON
		pop	ds
		mov	si, bx
		push	cx

loc_1AF6:				; CODE XREF: STORE+28j
		lodsb
		cmp	al, 1Ah
		jz	short loc_1B00
		call	OUTT
		loop	loc_1AF6

loc_1B00:				; CODE XREF: STORE+23j
		pop	ax
		sub	ax, cx
		pop	ds
		call	SWAPBACK
		jmp	short loc_1B32
; ---------------------------------------------------------------------------

DVWRTRAW:				; CODE XREF: STORE+56j	STORE+80j
		xor	ax, ax
		call	SETWRITE
		lds	si, [ss:THISFCB]
		call	DEVIOCALL
		mov	dx, di
		mov	ah, 87h	; ''
		mov	di, [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short loc_1B2E
		call	CHARHARD
		mov	bx, dx
		cmp	al, 1
		jz	short DVWRTRAW

loc_1B2E:				; CODE XREF: STORE+4Dj
		pop	ds
		mov	ax, [CALLBPB]  ; CALLSCNT

loc_1B32:				; CODE XREF: STORE+31j	STORE+71j ...
		les	di, [THISFCB]
		xor	dx, dx
		div	word [es:di+0Eh]
		mov	cx, ax
		call	ADDREC
		retn
; ---------------------------------------------------------------------------

WRTDEV:					; CODE XREF: STORE+5j
		or	bl, 40h
		xor	ax, ax
		jcxz	loc_1B32
		push	ds
		mov	al, bl
		lds	bx, [DMAADD]
		mov	di, bx
		xor	dx, dx
		test	al, 20h
		jnz	short DVWRTRAW
		test	al, 2
		jnz	short WRITECON
		test	al, 4
		jnz	short loc_1BC7
		mov	ax, dx
		cmp	byte [bx], 1Ah
		jz	short loc_1BC1
		push	cx
		mov	cx, 1
		call	SETWRITE
		pop	cx
		lds	si, [ss:THISFCB]
		lds	si, [si+19h]

loc_1B77:				; CODE XREF: STORE+C2j	STORE+E9j
		call	DSKSTATCHK
		call	DEVIOCALL2
		push	di
		mov	ah, 87h	; ''
		mov	di, [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short loc_1B9C
		call	CHARHARD
		pop	di
		mov	word [ss:CALLBPB], 1  ; SS:CALLSCNT
		cmp	al, 1
		jz	short loc_1B77
		jmp	short loc_1BA5
; ---------------------------------------------------------------------------

loc_1B9C:				; CODE XREF: STORE+B3j
		pop	di
		cmp	word [ss:CALLBPB], 0  ; SS:CALLSCNT
		jz	short loc_1BC1

loc_1BA5:				; CODE XREF: STORE+C4j
		inc	dx
		inc	word [ss:CALLXAD]
		inc	di
		push	ds
		mov	ds, word [ss:CALLXAD+2]
		cmp	byte [di], 1Ah
		pop	ds
		jz	short loc_1BC1
		mov	word [ss:DEVCALL_REQSTAT], 0
		loop	loc_1B77

loc_1BC1:				; CODE XREF: STORE+8Fj	STORE+CDj ...
		mov	ax, dx
		pop	ds
		jmp	loc_1B32
; ---------------------------------------------------------------------------

loc_1BC7:				; CODE XREF: STORE+88j
		mov	dx, cx
		jmp	short loc_1BC1

; --------------- S U B	R O U T	I N E ---------------------------------------

GET_IO_FCB:				; CODE XREF: seg000:0AB0p seg000:0AD1p ...
		push	ss
		pop	ds
		push	es
		push	di
		call	get_sf_from_jfn
		jb	short loc_1BDB
		mov	si, di
		add	si, 3
		push	es
		pop	ds

loc_1BDB:				; CODE XREF: GET_IO_FCB+7j
		pop	di
		pop	es

locret_1BDD:				; CODE XREF: GETTHISDRV+5j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


GETTHISDRV:				; CODE XREF: seg000:0937p seg000:0CB1p ...
		cmp	[ss:NUMIO], al
		jb	short locret_1BDD
		dec	al
		jns	short loc_1BED
		mov	al, [ss:CURDRV]

loc_1BED:				; CODE XREF: GETTHISDRV+9j
		mov	byte [ss:THISDRV],	al

locret_1BF1:				; CODE XREF: DREAD+3j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DIRREAD:				; CODE XREF: GETENTRY+1Cp
		mov	cl, byte [CLUSFAC]
		div	cl
		mov	byte [SECCLUSPOS], ah
		mov	cl, al
		xor	ch, ch
		mov	dx, word [DIRSEC]
		add	dl, ah
		adc	dh, 0
		mov	bx, word [CLUSNUM]
		mov	word [NXTCLUSNUM], bx
		jcxz	FIRSTCLUSTER

loc_1C13:				; CODE XREF: DIRREAD+2Cj
		call	UNPACK
		xchg	bx, di
		cmp	bx, 0FF8h
		jnb	short loc_1C20
		loop	loc_1C13

loc_1C20:				; CODE XREF: DIRREAD+2Aj
		mov	[NXTCLUSNUM], bx
		mov	dx, di
		mov	bl, ah
		call	FIGREC

; --------------- S U B	R O U T	I N E ---------------------------------------


FIRSTCLUSTER:				; CODE XREF: NEXTENTRY+46p DIRREAD+1Fj
		xor	al, al
		mov	ah, 0Fh
		call	GETBUFFR
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


FATSECRD:				; CODE XREF: GETBUFFRB+59p

; FUNCTION CHUNK AT 1C67 SIZE 00000002 BYTES

		mov	di, cx
		mov	cl, [es:bp+8]
		mov	al, [es:bp+0Fh]
		xor	ah, ah
		mov	ch, ah
		push	dx

NXTFAT:					; CODE XREF: FATSECRD+1Cj
		push	cx
		push	ax
		mov	cx, di
		call	DSKREAD
		pop	ax
		pop	cx
		jz	short loc_1C67
		add	dx, ax
		loop	NXTFAT
		pop	dx
		mov	cx, di

; --------------- S U B	R O U T	I N E ---------------------------------------


DREAD:					; CODE XREF: DREAD+10j	DISKREAD+74p ...
		call	DSKREAD
		jz	short locret_1BF1
		mov	byte [ss:READOP], 0
		call	HARDERR
		cmp	al, 1
		jz	short DREAD
		retn

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR FATSECRD

loc_1C67:				; CODE XREF: FATSECRD+18j
		pop	dx

locret_1C68:				; CODE XREF: DWRITE+3j
		retn
; END OF FUNCTION CHUNK	FOR FATSECRD

; --------------- S U B	R O U T	I N E ---------------------------------------

DSKREAD:				; CODE XREF: seg000:085Ep FATSECRD+13p ...
		push	cx
		mov	ah, [es:bp+16h]
		mov	al, [es:bp+1]
		push	bx
		push	es
		call	SETREAD
		jmp	short DODSKOP

; ---------------------------------------------------------------------------
		db  90h

; --------------- S U B	R O U T	I N E ---------------------------------------

DWRITE:					; CODE XREF: DWRITE+10j DISKWRITE+139p ...
		call	DSKWRITE
		jz	short locret_1C68
		mov	byte [ss:READOP], 1
		call	HARDERR
		cmp	al, 1
		jz	short DWRITE
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DSKWRITE:				; CODE XREF: seg000:0898p DWRITEp
		push	cx
		mov	ah, [es:bp+16h]
		mov	al, [es:bp+1]
		push	bx
		push	es
		call	SETWRITE

DODSKOP:				; CODE XREF: DSKREAD+Ej
		mov	cx, ds
		pop	ds
		push	ds
		lds	si, [ds:bp+12h]
		call	DEVIOCALL2
		mov	ds, cx
		pop	es
		pop	bx
		mov	cx, [ss:CALLBPB]  ; SS:CALLSCNT
		pop	di
		sub	cx, di
		neg	cx
		mov	ax, [ss:DEVCALL_REQSTAT]
		test	ax, 8000h
		retn

; ---------------------------------------------------------------------------

SETUP:					; CODE XREF: LOADp STOREp
		push	ax
		mov	al, [di]
		dec	al
		mov	[ss:THISDRV], al
		mov	al, [di+18h]
		mov	si, [di+0Eh]
		or	si, si
		jnz	short loc_1CD5
		mov	si, 80h	; ''
		mov	[di+0Eh], si

loc_1CD5:				; CODE XREF: seg000:1CCDj
		mov	[ss:THISFCB+2], ds
		push	ss
		pop	ds
		mov	[THISFCB], di
		or	al, al
		jns	short loc_1CE6
		xor	al, al

loc_1CE6:				; CODE XREF: seg000:1CE2j
		call	GETBP
		pop	ax
		jnb	short loc_1CF5
		xor	cx, cx
		mov	byte [DSKERR], 4
		pop	bx
		retn
; ---------------------------------------------------------------------------

loc_1CF5:				; CODE XREF: seg000:1CEAj
		cmp	si, 40h	; '@'
		jb	short loc_1CFC
		xor	dh, dh

loc_1CFC:				; CODE XREF: seg000:1CF8j
		mov	[RECCNT], cx
		mov	[RECPOS], ax
		mov	[RECPOS+2], dx
		mov	bx, [DMAADD]
		mov	[NEXTADD], bx
		mov	byte [DSKERR], 0
		mov	byte [TRANS], 0
		mov	bx, dx
		mul	si
		mov	[BYTPOS], ax
		push	dx
		mov	ax, bx
		mul	si
		pop	bx
		add	ax, bx
		adc	dx, 0
		jnz	short loc_1D8B
		mov	word [BYTPOS+2], ax
		mov	dx, ax
		mov	ax, [BYTPOS]
		mov	bx, [es:bp+2]
		cmp	dx, bx
		jnb	short loc_1D8B
		div	bx
		mov	[SECPOS], ax
		mov	[BYTSECPOS], dx
		mov	dx, ax
		and	al, [es:bp+4]
		mov	[SECCLUSPOS], al
		mov	ax, cx
		mov	cl, [es:bp+5]
		shr	dx, cl
		mov	[CLUSNUM], dx
		mul	si
		mov	cx, ax
		add	ax, [DMAADD]
		adc	dx, 0
		jz	short loc_1D82
		mov	ax, [DMAADD]
		neg	ax
		jnz	short loc_1D70
		dec	ax

loc_1D70:				; CODE XREF: seg000:1D6Dj
		xor	dx, dx
		div	si
		mov	[RECCNT], ax
		mul	si
		mov	byte [DSKERR], 2
		mov	cx, ax
		jcxz	loc_1D92

loc_1D82:				; CODE XREF: seg000:1D66j
		les	di, [THISFCB]
		mov	bl, [es:di+18h]
		retn
; ---------------------------------------------------------------------------

loc_1D8B:				; CODE XREF: seg000:1D2Bj seg000:1D3Bj
		mov	byte [DSKERR], 1
		xor	cx, cx

loc_1D92:				; CODE XREF: seg000:1D80j
		les	di, [THISFCB]
		pop	bx

locret_1D97:				; CODE XREF: BREAKDOWN+2Dj BREAKDOWN+32j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

BREAKDOWN:				; CODE XREF: DISKREAD+22p DISKWRITE+Bp
		mov	ax, [BYTSECPOS]
		mov	bx, cx
		or	ax, ax
		jz	short loc_1DAF
		sub	ax, [es:bp+2]
		neg	ax
		sub	bx, ax
		jnb	short loc_1DAF
		add	ax, bx
		xor	bx, bx

loc_1DAF:				; CODE XREF: BREAKDOWN+7j BREAKDOWN+11j
		mov	[BYTCNT1], ax
		mov	ax, bx
		xor	dx, dx
		div	word [es:bp+2]
		mov	[SECCNT], ax
		mov	[BYTCNT2], dx
		or	dx, [BYTCNT1]
		jnz	short locret_1D97
		cmp	ax, 1
		jnz	short locret_1D97
		mov	ax, [es:bp+2]
		mov	[BYTCNT2], ax
		mov	[SECCNT], dx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DISKREAD:				; CODE XREF: LOAD+7p
		mov	ax, [es:di+10h]
		mov	bx, [es:di+12h]
		sub	ax, [BYTPOS]
		sbb	bx, [BYTPOS+2]
		jb	short loc_1E08
		jnz	short loc_1DF6
		or	ax, ax
		jz	short loc_1E08
		cmp	ax, cx
		jnb	short loc_1DF6
		mov	cx, ax

loc_1DF6:				; CODE XREF: DISKREAD+12j DISKREAD+1Aj
		les	bp, [THISDPB]
		call	BREAKDOWN
		mov	cx, word [CLUSNUM]
		call	FNDCLUS
		or	cx, cx
		jz	short loc_1E11

loc_1E08:				; CODE XREF: DISKREAD+10j DISKREAD+16j
		jmp	loc_1FBC
; ---------------------------------------------------------------------------

loc_1E0B:				; CODE XREF: DISKREAD+50j
		jmp	loc_1EBE
; ---------------------------------------------------------------------------

loc_1E0E:				; CODE XREF: DISKREAD+55j
		jmp	SETFCB
; ---------------------------------------------------------------------------

loc_1E11:				; CODE XREF: DISKREAD+2Ej
		mov	[LASTPOS], dx
		mov	[CLUSNUM], bx
		cmp	word [BYTCNT1], 0
		jz	short loc_1E23
		call	BUFRD

loc_1E23:				; CODE XREF: DISKREAD+46j
		cmp	word [SECCNT], 0
		jz	short loc_1E0B
		call	NEXTSEC
		jb	short loc_1E0E
		mov	byte [TRANS], 1
		mov	dl, [SECCLUSPOS]
		mov	cx, [SECCNT]
		mov	bx, [CLUSNUM]

loc_1E40:				; CODE XREF: DISKREAD+E4j
		call	OPTIMIZE
		push	di
		push	ax
		push	bx
		mov	ds, [DMAADD+2]
		push	dx
		push	cx
		call	DREAD
		pop	bx
		pop	dx
		add	bx, dx
		mov	al, [es:bp]
		call	SETVISIT

loc_1E5A:				; CODE XREF: DISKREAD+CFj
		mov	byte [di+7], 1
		cmp	al, [di+4]
		jnz	short loc_1EA4
		cmp	[di+8],	dx
		jb	short loc_1EA4
		cmp	[di+8],	bx
		jnb	short loc_1EA4
		cmp	byte [di+5], 0
		jz	short loc_1EA1
		pop	ax
		push	ax
		push	di
		push	dx
		sub	dx, [di+8]
		neg	dx
		mov	si, di
		mov	di, ax
		mov	ax, dx
		mov	cx, [es:bp+2]
		mul	cx
		add	di, ax
		add	si, 10h
		shr	cx, 1
		push	es
		mov	es, [ss:DMAADD+2]
		rep movsw
		jnb	short loc_1E9A
		movsb

loc_1E9A:				; CODE XREF: DISKREAD+BFj
		pop	es
		pop	dx
		pop	di
		mov	al, [es:bp]

loc_1EA1:				; CODE XREF: DISKREAD+99j
		call	SCANPLACE

loc_1EA4:				; CODE XREF: DISKREAD+89j DISKREAD+8Ej ...
		call	SKIPVISIT
		jnz	short loc_1E5A
		push	ss
		pop	ds
		pop	cx
		pop	cx
		pop	bx
		jcxz	loc_1EBE
		cmp	bx, 0FF8h
		jnb	short SETFCB
		mov	dl, 0
		inc	word [LASTPOS]
		jmp	short loc_1E40
; ---------------------------------------------------------------------------

loc_1EBE:				; CODE XREF: DISKREAD:loc_1E0Bj
					; DISKREAD+D6j
		mov	ax, word [BYTCNT2]
		or	ax, ax
		jz	short SETFCB
		mov	word [BYTCNT1], ax
		call	NEXTSEC
		jb	short SETFCB
		mov	word [BYTSECPOS], 0
		call	BUFRD

; --------------- S U B	R O U T	I N E ---------------------------------------

SETFCB:					; CODE XREF: LOAD:loc_1A99p
					; DISKREAD:loc_1E0Ej ...
		les	si, [THISFCB]
		mov	ax, word [NEXTADD]
		mov	di, ax
		sub	ax, word [DMAADD]
		xor	dx, dx
		mov	cx, [es:si+0Eh]
		div	cx
		cmp	ax, word [RECCNT]
		jz	short loc_1F13
		mov	byte [DSKERR], 1
		or	dx, dx
		jz	short loc_1F13
		mov	byte [DSKERR], 3
		sub	cx, dx
		push	es
		mov	es, word [DMAADD+2]
		xchg	ax, bx
		xor	ax, ax
		shr	cx, 1
		jnb	short loc_1F0E
		stosb

loc_1F0E:				; CODE XREF: SETFCB+35j
		rep stosw
		xchg	ax, bx
		pop	es
		inc	ax

loc_1F13:				; CODE XREF: SETFCB+19j SETFCB+22j
		mov	cx, ax
		mov	di, si

loc_1F17:				; CODE XREF: DISKWRITE+182j
		test	byte [es:di+18h], 0FFh
		js	short ADDREC
		mov	ax, word [CLUSNUM]
		and	word [es:di+1Dh], 0F000h
		or	[es:di+1Dh], ax
		mov	ax, word [LASTPOS]
		mov	[es:di+1Bh], ax

; --------------- S U B	R O U T	I N E ---------------------------------------

ADDREC:					; CODE XREF: STORE+68p	SETFCB+46j ...
		mov	ax, [RECPOS]
		mov	dx, [RECPOS+2]
		jcxz	locret_1F42
		dec	cx
		add	ax, cx
		adc	dx, 0
		inc	cx

locret_1F42:				; CODE XREF: ADDREC+7j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DISKWRITE:				; CODE XREF: STORE+12p
		and	bl, 3Fh
		mov	[es:di+18h], bl
		les	bp, [THISDPB]
		call	BREAKDOWN
		mov	ax, [BYTPOS]
		mov	dx, [BYTPOS+2]
		jcxz	loc_1FD2
		add	ax, cx
		adc	dx, 0
		div	word [es:bp+2]
		mov	bx, ax
		or	dx, dx
		jnz	short loc_1F6A
		dec	ax

loc_1F6A:				; CODE XREF: DISKWRITE+24j
		mov	cl, [es:bp+5]
		shr	ax, cl
		push	ax
		push	dx
		push	es
		les	di, [THISFCB]
		mov	ax, [es:di+10h]
		mov	dx, [es:di+12h]
		pop	es
		div	word [es:bp+2]
		mov	cx, ax
		or	dx, dx
		jz	short loc_1F8B
		inc	ax

loc_1F8B:				; CODE XREF: DISKWRITE+45j
		mov	[VALSEC], ax
		xor	ax, ax
		mov	[GROWCNT], ax
		mov	[GROWCNT+2], ax
		pop	ax
		sub	bx, cx
		jb	short loc_1FE2
		jz	short loc_1FD5
		mov	cx, dx
		xchg	ax, bx
		mul	word [es:bp+2]
		sub	ax, cx
		sbb	dx, 0
		add	ax, bx
		adc	dx, 0
		jmp	short loc_1FDB
; ---------------------------------------------------------------------------

loc_1FB0:				; CODE XREF: DISKWRITE+B3j
		mov	cx, ax
		call	SKPCLP
		jcxz	loc_1FCF
		call	ALLOCATE
		jnb	short loc_1FCF

loc_1FBC:				; CODE XREF: DISKREAD:loc_1E08j
					; DISKWRITE+BCj ...
		xor	cx, cx
		mov	byte [DSKERR], 1
		mov	ax, [RECPOS]
		mov	dx, [RECPOS+2]
		les	di, [THISFCB]
		retn
; ---------------------------------------------------------------------------

loc_1FCF:				; CODE XREF: DISKWRITE+72j
					; DISKWRITE+77j
		jmp	short loc_2016
; ---------------------------------------------------------------------------
		db  90h
; ---------------------------------------------------------------------------

loc_1FD2:				; CODE XREF: DISKWRITE+15j
		jmp	loc_20C8
; ---------------------------------------------------------------------------

loc_1FD5:				; CODE XREF: DISKWRITE+58j
		sub	ax, dx
		jbe	short loc_1FE2
		xor	dx, dx

loc_1FDB:				; CODE XREF: DISKWRITE+6Bj
		mov	[GROWCNT], ax
		mov	[GROWCNT+2], dx

loc_1FE2:				; CODE XREF: DISKWRITE+56j
					; DISKWRITE+94j
		pop	ax
		mov	cx, [CLUSNUM]
		call	FNDCLUS
		mov	[CLUSNUM], bx
		mov	word [LASTPOS], dx
		sub	ax, dx
		jz	short loc_2016
		jcxz	loc_1FB0
		push	cx
		mov	cx, ax
		call	ALLOCATE
		pop	ax
		jb	short loc_1FBC
		mov	cx, ax
		mov	dx, [LASTPOS]
		inc	dx
		dec	cx
		jz	short loc_200E
		call	SKPCLP

loc_200E:				; CODE XREF: DISKWRITE+C6j
		mov	[CLUSNUM], bx
		mov	[LASTPOS], dx

loc_2016:				; CODE XREF: DISKWRITE:loc_1FCFj
					; DISKWRITE+B1j
		cmp	word [BYTCNT1], 0
		jz	short loc_2024
		mov	bx, word [CLUSNUM]
		call	BUFWRT

loc_2024:				; CODE XREF: DISKWRITE+D8j
		mov	ax, [SECCNT]
		or	ax, ax
		jz	short loc_2090
		add	word [SECPOS], ax
		call	NEXTSEC
		mov	byte [TRANS], 1
		mov	dl, [SECCLUSPOS]
		mov	bx, [CLUSNUM]
		mov	cx, [SECCNT]

loc_2043:				; CODE XREF: DISKWRITE+148j
		call	OPTIMIZE
		push	di
		push	ax
		push	dx
		push	bx
		mov	al, [es:bp]
		mov	bx, cx
		add	bx, dx
		call	SETVISIT

loc_2055:				; CODE XREF: DISKWRITE+130j
		mov	byte [di+7], 1
		cmp	al, [di+4]
		jnz	short loc_2070
		cmp	[di+8],	dx
		jb	short loc_2070
		cmp	[di+8],	bx
		jnb	short loc_2070
		mov	word [di+4], 0FFh
		call	SCANPLACE

loc_2070:				; CODE XREF: DISKWRITE+119j
					; DISKWRITE+11Ej ...
		call	SKIPVISIT
		jnz	short loc_2055
		pop	bx
		pop	dx
		mov	ds, [ss:DMAADD+2]
		call	DWRITE
		pop	cx
		pop	bx
		push	ss
		pop	ds
		jcxz	loc_2090
		mov	dl, 0
		inc	word [LASTPOS]
		jmp	short loc_2043

; ---------------------------------------------------------------------------

loc_208D:				; CODE XREF: DISKWRITE+1A5j
		jmp	loc_1FBC
; ---------------------------------------------------------------------------

loc_2090:				; CODE XREF: DISKWRITE+E6j
					; DISKWRITE+140j
		mov	ax, [BYTCNT2]
		or	ax, ax
		jz	short loc_20A6
		mov	[BYTCNT1], ax
		call	NEXTSEC
		mov	word [BYTSECPOS], 0
		call	BUFWRT

loc_20A6:				; CODE XREF: DISKWRITE+152j
		les	di, [THISFCB]
		mov	ax, [GROWCNT]
		mov	cx, [GROWCNT+2]
		or	ax, ax
		jnz	short loc_20B9
		or	cx, cx
		jz	short loc_20C1

loc_20B9:				; CODE XREF: DISKWRITE+170j
		add	[es:di+10h], ax
		adc	[es:di+12h], cx

loc_20C1:				; CODE XREF: DISKWRITE+174j
		mov	cx, [RECCNT]
		jmp	loc_1F17
; ---------------------------------------------------------------------------

loc_20C8:				; CODE XREF: DISKWRITE:loc_1FD2j
		mov	cx, ax
		or	cx, dx
		jz	short loc_2109
		sub	ax, 1
		sbb	dx, 0
		div	word [es:bp+2]
		mov	cl, [es:bp+5]
		shr	ax, cl
		mov	cx, ax
		call	FNDCLUS
		jcxz	loc_2101
		call	ALLOCATE
		jb	short loc_208D

loc_20EA:				; CODE XREF: DISKWRITE+1C4j
					; DISKWRITE+1DEj ...
		les	di, [THISFCB]
		mov	ax, word [BYTPOS]
		mov	[es:di+10h], ax
		mov	ax, word [BYTPOS+2]
		mov	[es:di+12h], ax
		xor	cx, cx
		jmp	ADDREC
; ---------------------------------------------------------------------------

loc_2101:				; CODE XREF: DISKWRITE+1A0j
		mov	dx, 0FFFh
		call	RELBLKS
		jmp	short loc_20EA
; ---------------------------------------------------------------------------

loc_2109:				; CODE XREF: DISKWRITE+189j
		xor	bx, bx
		push	es
		les	di, [THISFCB]
		mov	[es:di+1Bh], bx
		xchg	bx, [es:di+19h]
		and	word [es:di+1Dh], 0F000h
		pop	es
		or	bx, bx
		jz	short loc_20EA
		call	RELEASE
		jmp	short loc_20EA

; --------------- S U B	R O U T	I N E ---------------------------------------

UNPACK:					; CODE XREF: seg000:SCANFREEp
					; SETDIRSRCH+13p ...
		cmp	bx, [es:bp+0Dh]
		ja	short loc_2143
		call	MAPCLUSTER
		mov	di, [di]
		jnb	short loc_213C
		push	cx
		mov	cl, 4
		shr	di, cl
		pop	cx
		stc

loc_213C:				; CODE XREF: UNPACK+Bj
		and	di, 0FFFh
		push	ss
		pop	ds
		retn
; ---------------------------------------------------------------------------

loc_2143:				; CODE XREF: UNPACK+4j
		push	ax
		mov	ah, 80h	; ''
		mov	di, 0FFFh
		call	FATAL
		pop	ax

locret_214D:				; CODE XREF: PACK+2Cj
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

PACK:					; CODE XREF: ALLOCATE+59p ALLOCATE+63p ...
		call	MAPCLUSTER
		mov	si, [di]
		jnb	short loc_2161
		push	cx
		mov	cl, 4
		shl	dx, cl
		pop	cx
		and	si, 0Fh
		jmp	short loc_2165
; ---------------------------------------------------------------------------

loc_2161:				; CODE XREF: PACK+5j
		and	si, 0F000h

loc_2165:				; CODE XREF: PACK+11j
		or	si, dx
		mov	[di], si
		lds	si, [ss:CURBUF]
		mov	byte [si+5], 1
		cmp	byte [ss:CLUSSPLIT], 0
		push	ss
		pop	ds
		jz	short locret_214D
		push	ax
		push	bx
		push	cx
		mov	ax, word [CLUSSAVE]
		mov	ds, word [CURBUF+2]
		add	si, 10h
		mov	[si], ah
		push	ss
		pop	ds
		push	ax
		mov	dx, word [CLUSSEC]
		mov	si, 1
		xor	al, al
		call	GETBUFFRB
		lds	di, [CURBUF]
		mov	byte [di+5], 1
		add	di, 10h
		dec	di
		add	di, [es:bp+2]
		pop	ax
		mov	[di], al
		push	ss
		pop	ds
		pop	cx
		pop	bx
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

MAPCLUSTER:				; CODE XREF: UNPACK+6p	PACKp
		mov	byte [CLUSSPLIT], 0
		push	ax
		push	bx
		push	cx
		push	dx
		mov	ax, bx
		shr	ax, 1
		add	ax, bx
		xor	dx, dx
		mov	cx, [es:bp+2]
		div	cx
		add	ax, [es:bp+6]
		dec	cx
		push	ax
		push	dx
		push	cx
		mov	dx, ax
		xor	al, al
		mov	si, 1
		call	GETBUFFRB
		lds	si, [CURBUF]
		lea	di, [si+10h]
		pop	cx
		pop	ax
		pop	dx
		add	di, ax
		cmp	ax, cx
		jnz	short loc_2215
		mov	al, [di]
		push	ss
		pop	ds
		inc	byte [CLUSSPLIT]
		mov	byte [CLUSSAVE], al
		mov	word [CLUSSEC], dx
		inc	dx
		xor	al, al
		mov	si, 1
		call	GETBUFFRB
		lds	si, [CURBUF]
		lea	di, [si+10h]
		mov	al, [di]
		push	ss
		pop	ds
		mov	byte [CLUSSAVE+1], al
		mov	di, CLUSSAVE ; 379h

loc_2215:				; CODE XREF: MAPCLUSTER+37j
		pop	dx
		pop	cx
		pop	bx
		mov	ax, bx
		shr	ax, 1
		pop	ax
		retn

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR FATREAD

loc_221E:				; CODE XREF: FATREAD+39j
					; FATREAD:loc_2341j
		and	di, 0FFh
		mov	ah, 2
		mov	al, byte [THISDRV]
		call	FATAL1
; END OF FUNCTION CHUNK	FOR FATREAD

; --------------- S U B	R O U T	I N E ---------------------------------------


FATREAD:				; CODE XREF: seg000:093Ep seg000:0CB9p ...

; FUNCTION CHUNK AT 221E SIZE 0000000C BYTES

		mov	al, byte [THISDRV]
		call	GETBP
		mov	al, 0Fh
		mov	ah, [es:bp+1]
		mov	[DEVCALL], ax
		mov	byte [DEVCALL_REQFUNC], 1
		mov	word [DEVCALL_REQSTAT], 0
		mov	al, [es:bp+16h]
		mov	[CALLUNIT], al
		push	es
		push	ds
		mov	bx, DEVCALL ; 12Dh
		lds	si, [es:bp+12h]
		pop	es
		call	DEVIOCALL2
		push	ss
		pop	ds
		pop	es
		mov	di, [DEVCALL_REQSTAT]
		test	di, 8000h
		jnz	short loc_221E
		xor	ah, ah
		xchg	ah, [es:bp+17h]
		mov	al, byte [THISDRV]
		or	ah, byte [CALLXAD]
		js	short loc_2289
		jz	short loc_2277

locret_2276:				; CODE XREF: FATREAD+56j
		retn
; ---------------------------------------------------------------------------

loc_2277:				; CODE XREF: FATREAD+4Aj
		inc	ah
		lds	di, [BUFFHEAD]

loc_227D:				; CODE XREF: FATREAD+5Dj
		cmp	ax, [di+4]
		jz	short locret_2276
		lds	di, [di]
		cmp	di, 0FFFFh
		jnz	short loc_227D

loc_2289:				; CODE XREF: FATREAD+48j
		call	SETVISIT

loc_228C:				; CODE XREF: FATREAD+76j
		mov	byte [di+7], 1
		cmp	al, [di+4]
		jnz	short loc_229D
		mov	word [di+4], 0FFh
		call	SCANPLACE

loc_229D:				; CODE XREF: FATREAD+69j
		call	SKIPVISIT
		jnz	short loc_228C
		lds	di, [es:bp+12h]
		test	word [di+4], 2000h
		jnz	short loc_22BB
		push	ss
		pop	ds
		mov	bx, 2
		call	UNPACK
		lds	di, [CURBUF]
		jmp	short loc_22C7
; ---------------------------------------------------------------------------

loc_22BB:				; CODE XREF: FATREAD+81j
		push	es
		push	bp
		lds	di, [ss:BUFFHEAD]
		call	BUFWRITE
		pop	bp
		pop	es

loc_22C7:				; CODE XREF: FATREAD+8Fj
		add	di, 10h
		mov	[ss:CALLXAD+2], ds
		push	ss
		pop	ds
		mov	word [CALLXAD], di
		mov	al, 16h
		mov	ah, [es:bp+1]
		mov	word [DEVCALL], ax
		mov	byte [DEVCALL_REQFUNC], 2
		mov	word [DEVCALL_REQSTAT], 0
		mov	al, [es:bp+16h]
		mov	[CALLUNIT], al
		push	es
		push	ds
		push	word [es:bp+14h]
		push	word [es:bp+12h]
		mov	bx, DEVCALL ; 12Dh
		pop	si
		pop	ds
		pop	es
		call	DEVIOCALL2
		pop	es
		push	ss
		pop	ds
		mov	di, [DEVCALL_REQSTAT]
		test	di, 8000h
		jnz	short loc_2341
		mov	al, [es:bp+16h]
		lds	si, [CALLBPB]
		cmp	al, [si+0Ah]
		jz	short loc_2330
		call	_$SETDPB
		lds	di, [ss:CALLXAD]
		mov	al, [es:bp+8]
		mov	ah, [es:bp+0Fh]
		mov	[di-6],	ax

loc_2330:				; CODE XREF: FATREAD+F1j
		push	ss
		pop	ds
		mov	ax, 0FFFFh
		test	[es:bp+1Ch], ax
		jnz	short loc_233C
		retn
; ---------------------------------------------------------------------------

loc_233C:				; CODE XREF: FATREAD+10Fj
		mov	[es:bp+1Ch], ax
		retn
; ---------------------------------------------------------------------------

loc_2341:				; CODE XREF: FATREAD+E4j
		jmp	loc_221E

; --------------- S U B	R O U T	I N E ---------------------------------------


GET_random_record:			; CODE XREF: seg000:_$FCB_RANDOM_READp
					; seg000:_$FCB_RANDOM_WRITEp
		mov	cx, 1

; --------------- S U B	R O U T	I N E ---------------------------------------

GETRRPOS:				; CODE XREF: SETXADDR+31p
					; _$FCB_RANDOM_READ_BLOCKp ...
		mov	di, dx
		cmp	byte [di], 0FFh
		jnz	short loc_2351
		add	di, 7

loc_2351:				; CODE XREF: GETRRPOS+5j
		mov	ax, [di+21h]
		mov	dx, [di+23h]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

FNDCLUS:				; CODE XREF: DISKREAD+29p
					; DISKWRITE+A4p ...

; FUNCTION CHUNK AT 238B SIZE 00000004 BYTES

		push	es
		les	di, [THISFCB]
		mov	bx, [es:di+1Dh]
		and	bx, 0FFFh
		mov	dx, [es:di+1Bh]
		or	bx, bx
		jz	short NOCLUS
		sub	cx, dx
		jnb	short loc_2379
		add	cx, dx
		xor	dx, dx
		mov	bx, [es:di+19h]

loc_2379:				; CODE XREF: FNDCLUS+17j
		pop	es
		jcxz	locret_238A

; --------------- S U B	R O U T	I N E ---------------------------------------

SKPCLP:					; CODE XREF: DISKWRITE+6Fp
					; DISKWRITE+C8p ...
		call	UNPACK
		cmp	di, 0FF8h
		jnb	short locret_238A
		xchg	bx, di
		inc	dx
		loop	SKPCLP

locret_238A:				; CODE XREF: FNDCLUS+22j SKPCLP+7j
		retn

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR FNDCLUS

NOCLUS:					; CODE XREF: FNDCLUS+13j
		pop	es
		inc	cx
		dec	dx
		retn
; END OF FUNCTION CHUNK	FOR FNDCLUS

; --------------- S U B	R O U T	I N E ---------------------------------------

BUFSEC:					; CODE XREF: BUFRD+4p sub_23F12p
		mov	dx, word [CLUSNUM]
		mov	bl, byte [SECCLUSPOS]
		call	FIGREC
		call	GETBUFFR
		mov	byte [TRANS], 1
		mov	si, word [NEXTADD]
		mov	di, si
		mov	cx, word [BYTCNT1]
		add	di, cx
		mov	word [NEXTADD], di
		les	di, [CURBUF]
		add	di, 10h
		add	di, word [BYTSECPOS]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

BUFRD:					; CODE XREF: DISKREAD+48p DISKREAD+FBp
		push	es
		mov	ax, 200h
		call	BUFSEC
		mov	bx, es
		mov	es, word [DMAADD+2]
		mov	ds, bx
		xchg	di, si
		shr	cx, 1
		jnb	short loc_23D4
		movsb

loc_23D4:				; CODE XREF: BUFRD+13j
		rep movsw
		pop	es
		lds	di, [ss:CURBUF]
		lea	bx, [di+10h]
		sub	si, bx
		call	PLACEBUF
		cmp	si, [es:bp+2]
		jb	short loc_23ED
		call	PLACEHEAD

loc_23ED:				; CODE XREF: BUFRD+2Aj
		push	ss
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

BUFWRT:					; CODE XREF: DISKWRITE+DEp
					; DISKWRITE+160p
		mov	ax, word [SECPOS]
		inc	ax
		mov	word [SECPOS], ax
		cmp	ax, word [VALSEC]
		mov	al, 1
		ja	short loc_2401
		xor	al, al

loc_2401:				; CODE XREF: BUFWRT+Dj
		push	es
		call	BUFSEC
		mov	ds, word [DMAADD+2]
		shr	cx, 1
		jnb	short loc_240E
		movsb

loc_240E:				; CODE XREF: sub_23F1Bj
		rep movsw
		pop	es
		lds	bx, [ss:CURBUF]
		mov	byte [bx+5], 1
		lea	si, [bx+10h]
		sub	di, si
		mov	si, di
		mov	di, bx
		call	PLACEBUF
		cmp	si, [es:bp+2]
		jb	short loc_242F
		call	PLACEHEAD

loc_242F:				; CODE XREF: BUFWRT+3Aj
		push	ss
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

NEXTSEC:				; CODE XREF: DISKREAD+52p DISKREAD+F0p ...
		test	byte [TRANS], 0FFh
		jz	short loc_245E
		mov	al, [SECCLUSPOS]
		inc	al
		cmp	al, [es:bp+4]
		jbe	short loc_245B
		mov	bx, [CLUSNUM]
		cmp	bx, 0FF8h
		jnb	short loc_2460
		call	UNPACK
		mov	word [CLUSNUM], di
		inc	word [LASTPOS]
		mov	al, 0

loc_245B:				; CODE XREF: NEXTSEC+10j
		mov	byte [SECCLUSPOS], al

loc_245E:				; CODE XREF: NEXTSEC+5j
		clc
		retn
; ---------------------------------------------------------------------------

loc_2460:				; CODE XREF: NEXTSEC+1Aj
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

OPTIMIZE:				; CODE XREF: DISKREAD:loc_1E40p
					; DISKWRITE:loc_2043p
		push	dx
		push	bx
		mov	al, [es:bp+4]
		inc	al
		mov	ah, al
		sub	al, dl
		mov	dx, cx
		mov	cx, 0

loc_2473:				; CODE XREF: OPTIMIZE+22j
		call	UNPACK
		add	cl, al
		adc	ch, 0
		cmp	cx, dx
		jnb	short loc_24AC
		mov	al, ah
		inc	bx
		cmp	di, bx
		jz	short loc_2473
		dec	bx

loc_2487:				; CODE XREF: OPTIMIZE+56j
		mov	[CLUSNUM], bx
		sub	dx, cx
		push	dx
		mov	ax, cx
		mul	word [es:bp+2]
		mov	si, [NEXTADD]
		add	ax, si
		mov	[NEXTADD], ax
		pop	ax
		pop	dx
		sub	bx, dx
		add	[LASTPOS], bx
		pop	bx
		call	FIGREC
		mov	bx, si
		retn

loc_24AC:				; CODE XREF: OPTIMIZE+1Bj
		sub	cx, dx
		sub	ah, cl
		dec	ah
		mov	[SECCLUSPOS], ah
		mov	cx, dx
		jmp	short loc_2487

; --------------- S U B	R O U T	I N E ---------------------------------------

FIGREC:					; CODE XREF: BUILDDIR+47p
					; SETDIRSRCH+22p ...
		push	cx
		mov	cl, [es:bp+5]
		dec	dx
		dec	dx
		shl	dx, cl
		or	dl, bl
		add	dx, [es:bp+0Bh]
		pop	cx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

GETREC:					; CODE XREF: seg000:_$GET_FCB_POSITIONp
					; seg000:_$FCB_SEQ_READp ...
		mov	di, dx
		cmp	byte [di], 0FFh
		jnz	short loc_24D5
		add	di, 7

loc_24D5:				; CODE XREF: GETREC+5j
		mov	cx, 1
		mov	al, [di+20h]
		mov	dx, [di+0Ch]
		shl	al, 1
		shr	dx, 1
		rcr	al, 1
		mov	ah, dl
		mov	dl, dh
		mov	dh, 0
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

ALLOCATE:				; CODE XREF: BUILDDIR+1Fp
					; DISKWRITE+74p ...
		push	bx
		xor	bx, bx
		call	UNPACK
		mov	 [FATBYT], di
		pop	bx
		push	dx
		push	cx
		push	bx
		mov	ax, bx

loc_24FB:				; CODE XREF: ALLOCATE+5Ej
		mov	dx, bx

loc_24FD:				; CODE XREF: ALLOCATE+4Aj ALLOCATE+53j
		inc	bx
		cmp	bx, [es:bp+0Dh]
		jle	short loc_252F
		cmp	ax, 1
		jg	short loc_2534
		pop	bx
		mov	dx, 0FFFh
		call	RELBLKS
		pop	ax
		sub	ax, cx
		pop	dx
		call	RESTFATBYT
		inc	dx
		add	ax, dx
		mov	dl, [es:bp+4]
		mov	dh, 0
		inc	dx
		mul	dx
		mov	cx, ax
		sub	cx, [RECPOS]
		ja	short loc_252D
		xor	cx, cx

loc_252D:				; CODE XREF: ALLOCATE+3Ej
		stc

locret_252E:				; CODE XREF: ALLOCATE+73j
		retn
; ---------------------------------------------------------------------------

loc_252F:				; CODE XREF: ALLOCATE+17j
		call	UNPACK
		jz	short loc_2540

loc_2534:				; CODE XREF: ALLOCATE+1Cj
		dec	ax
		jle	short loc_24FD
		xchg	ax, bx
		call	UNPACK
		jz	short loc_2540
		xchg	ax, bx
		jmp	short loc_24FD
; ---------------------------------------------------------------------------

loc_2540:				; CODE XREF: ALLOCATE+47j ALLOCATE+50j
		xchg	bx, dx
		mov	ax, dx
		call	PACK
		mov	bx, ax
		loop	loc_24FB
		mov	dx, 0FFFh
		call	PACK
		pop	bx
		pop	cx
		pop	dx
		call	UNPACK
		call	RESTFATBYT
		xchg	bx, di
		or	di, di
		jnz	short locret_252E
		push	es
		les	di, [THISFCB]
		and	bx, 0FFFh
		mov	[es:di+19h], bx
		and	word [es:di+1Dh], 0F000h
		or	[es:di+1Dh], bx
		pop	es
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

RESTFATBYT:				; CODE XREF: ALLOCATE+29p ALLOCATE+6Cp
		push	bx
		push	dx
		push	di
		xor	bx, bx
		mov	dx, word [FATBYT]
		call	PACK
		pop	di
		pop	dx
		pop	bx

locret_2588:				; CODE XREF: RELBLKS+3j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

RELEASE:				; CODE XREF: seg000:105Bp
					; DISKWRITE+1E0p ...
		xor	dx, dx

; --------------- S U B	R O U T	I N E ---------------------------------------


RELBLKS:				; CODE XREF: DISKWRITE+1C1p
					; ALLOCATE+22p
		call	UNPACK
		jz	short locret_2588
		mov	ax, di
		call	PACK
		cmp	ax, 0FF8h
		mov	bx, ax
		jb	short RELEASE

locret_259C:				; CODE XREF: GETEOF+7j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

GETEOF:					; CODE XREF: BUILDDIR+19p GETEOF+Bj
		call	UNPACK
		cmp	di, 0FF8h
		jnb	short locret_259C
		mov	bx, di
		jmp	short GETEOF

; --------------- S U B	R O U T	I N E ---------------------------------------

SETVISIT:				; CODE XREF: seg000:0A88p DISKREAD+7Fp ...
		lds	di, [ss:BUFFHEAD]
		push	ax
		xor	ax, ax

loc_25B2:				; CODE XREF: SETVISIT+10j
		mov	[di+7],	al
		lds	di, [di]
		cmp	di, 0FFFFh
		jnz	short loc_25B2
		lds	di, [ss:BUFFHEAD]
		pop	ax

locret_25C2:				; CODE XREF: SKIPVISIT+3j SKIPVISIT+9j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

SKIPVISIT:				; CODE XREF: seg000:loc_A9Dp
					; DISKREAD:loc_1EA4p ...
		cmp	di, 0FFFFh
		jz	short locret_25C2
		cmp	byte [di+7], 1
		jnz	short locret_25C2
		lds	di, [di]
		jmp	short SKIPVISIT

; ---------------------------------------------------------------------------
		db 0C3h

; --------------- S U B	R O U T	I N E ---------------------------------------

SCANPLACE:				; CODE XREF: seg000:0A9Ap
					; DISKREAD:loc_1EA1p ...
		push	es
		les	si, [di]
		call	PLACEBUF
		push	es
		pop	ds
		mov	di, si
		pop	es
		retn

; ---------------------------------------------------------------------------
		db 0EBh
		db  57h

; --------------- S U B	R O U T	I N E ---------------------------------------

PLACEBUF:				; CODE XREF: BUFRD+23p BUFWRT+33p ...
		call	save_world
		les	cx, [di]
		cmp	cx, 0FFFFh
		jz	short NRET
		mov	bp, es
		push	ds
		pop	es
		lds	si, [ss:BUFFHEAD]
		call	POINTCOMP
		jnz	short loc_2605
		mov	word [ss:BUFFHEAD], cx
		mov	word [ss:BUFFHEAD+2], bp
		jmp	short loc_2619
; ---------------------------------------------------------------------------

loc_2605:				; CODE XREF: PLACEBUF+16j PLACEBUF+2Fj
		push	ds
		push	si
		lds	si, [si]
		call	POINTCOMP
		jz	short loc_2612
		pop	ax
		pop	ax
		jmp	short loc_2605
; ---------------------------------------------------------------------------

loc_2612:				; CODE XREF: PLACEBUF+2Bj
		pop	si
		pop	ds
		mov	[si], cx
		mov	[si+2],	bp

loc_2619:				; CODE XREF: PLACEBUF+22j PLACEBUF+43j
		push	ds
		push	si
		lds	si, [si]
		cmp	si, 0FFFFh
		jz	short loc_2626
		pop	ax
		pop	ax
		jmp	short loc_2619
; ---------------------------------------------------------------------------

loc_2626:				; CODE XREF: PLACEBUF+3Fj
		pop	si
		pop	ds
		mov	[si], di
		mov	word [si+2], es
		mov	word [es:di], 0FFFFh
		mov	word [es:di+2], 0FFFFh

NRET:					; CODE XREF: PLACEBUF+8j PLACEHEAD+33j
		call	restore_world

locret_263B:				; CODE XREF: POINTCOMP+2j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

PLACEHEAD:				; CODE XREF: BUFRD+2Cp BUFWRT+3Cp
		call	save_world
		push	ds
		pop	es
		lds	si, [ss:BUFFHEAD]
		mov	word [ss:BUFFHEAD], di
		mov	word [ss:BUFFHEAD+2], es
		mov	[es:di], si
		mov	word [es:di+2], ds

loc_2657:				; CODE XREF: PLACEHEAD+26j
		push	ds
		push	si
		lds	si, [si]
		call	POINTCOMP
		jz	short loc_2664
		pop	ax
		pop	ax
		jmp	short loc_2657
; ---------------------------------------------------------------------------

loc_2664:				; CODE XREF: PLACEHEAD+22j
		pop	si
		pop	ds
		mov	word [si], 0FFFFh
		mov	word [si+2], 0FFFFh
		jmp	short NRET

; --------------- S U B	R O U T	I N E ---------------------------------------

POINTCOMP:				; CODE XREF: PLACEBUF+13p PLACEBUF+28p ...
		cmp	si, di
		jnz	short locret_263B
		push	cx
		push	dx
		mov	cx, ds
		mov	dx, es
		cmp	cx, dx
		pop	dx
		pop	cx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

GETBUFFR:				; CODE XREF: seg000:0E64p seg000:0E94p ...
		xor	si, si

; --------------- S U B	R O U T	I N E ---------------------------------------

GETBUFFRB:				; CODE XREF: PACK+49p MAPCLUSTER+26p ...
		mov	word [PREREAD], ax
		mov	al, [es:bp]
		lds	di, [LASTBUFFER]
		cmp	di, 0FFFFh
		jz	short loc_269E
		cmp	dx, [di+8]
		jnz	short loc_269E
		cmp	al, [di+4]
		jnz	short loc_269E
		jmp	short loc_270D
; ---------------------------------------------------------------------------

loc_269E:				; CODE XREF: GETBUFFRB+Ej GETBUFFRB+13j ...
		lds	di, [ss:BUFFHEAD]

loc_26A3:				; CODE XREF: GETBUFFRB+32j
		cmp	dx, [di+8]
		jnz	short loc_26AF
		cmp	al, [di+4]
		jnz	short loc_26AF
		jmp	short loc_26F8
; ---------------------------------------------------------------------------

loc_26AF:				; CODE XREF: GETBUFFRB+24j GETBUFFRB+29j
		lds	di, [di]
		cmp	di, 0FFFFh
		jnz	short loc_26A3
		lds	di, [ss:BUFFHEAD]
		push	si
		push	dx
		push	bp
		push	es
		call	BUFWRITE
		pop	es
		pop	bp
		pop	dx
		pop	si
		test	byte [ss:PREREAD], 0FFh
		jnz	short loc_26E6
		lea	bx, [di+10h]
		mov	cx, 1
		push	si
		push	di
		push	dx
		or	si, si
		jz	short loc_26E0
		call	FATSECRD
		jmp	short loc_26E3
; ---------------------------------------------------------------------------

loc_26E0:				; CODE XREF: GETBUFFRB+57j
		call	DREAD

loc_26E3:				; CODE XREF: GETBUFFRB+5Cj
		pop	dx
		pop	di
		pop	si

loc_26E6:				; CODE XREF: GETBUFFRB+4Aj
		mov	[di+8],	dx
		mov	[di+0Ch], bp
		mov	[di+0Eh], es
		xor	ah, ah
		mov	al, [es:bp]
		mov	[di+4],	ax

loc_26F8:				; CODE XREF: GETBUFFRB+2Bj
		mov	ax, 1
		or	si, si
		jz	short loc_2707
		mov	al, [es:bp+8]
		mov	ah, [es:bp+0Fh]

loc_2707:				; CODE XREF: GETBUFFRB+7Bj
		mov	[di+0Ah], ax
		call	PLACEBUF

loc_270D:				; CODE XREF: GETBUFFRB+1Aj
		mov	word [ss:CURBUF+2], ds
		mov	[ss:LASTBUFFER+2], ds
		push	ss
		pop	ds
		mov	word [CURBUF], di
		mov	[LASTBUFFER], di
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

FLUSHBUF:				; CODE XREF: seg000:0A79p seg000:0E86p ...
		lds	di, [BUFFHEAD]
		mov	ah, 0FFh

loc_2728:				; CODE XREF: FLUSHBUF+36j
		cmp	[di+4],	ah
		jz	short loc_2753
		cmp	ah, al
		jz	short loc_2736
		cmp	al, [di+4]
		jnz	short loc_2753

loc_2736:				; CODE XREF: FLUSHBUF+Dj
		cmp	byte [di+5], 0
		jz	short loc_2753
		push	ax
		push	word [di+4]
		call	BUFWRITE
		pop	ax
		xor	ah, ah
		cmp	al, [ss:WPERR]
		jnz	short loc_274F
		mov	al, 0FFh

loc_274F:				; CODE XREF: FLUSHBUF+29j
		mov	[di+4],	ax
		pop	ax

loc_2753:				; CODE XREF: FLUSHBUF+9j FLUSHBUF+12j	...
		lds	di, [di]
		cmp	di, 0FFFFh
		jnz	short loc_2728
		push	ss
		pop	ds

locret_275C:				; CODE XREF: BUFWRITE+8j BUFWRITE+Cj ...
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

BUFWRITE:				; CODE XREF: FATREAD+98p GETBUFFRB+3Dp ...
		mov	ax, 0FFh
		xchg	ax, [di+4]
		cmp	al, 0FFh
		jz	short locret_275C
		or	ah, ah
		jz	short locret_275C
		cmp	al, [ss:WPERR]
		jz	short locret_275C
		les	bp, [di+0Ch]
		lea	bx, [di+10h]
		mov	dx, [di+8]
		mov	cx, [di+0Ah]
		mov	al, ch
		xor	ch, ch
		mov	ah, ch
		push	di

loc_2785:				; CODE XREF: BUFWRITE+38j
		push	cx
		push	ax
		mov	cx, 1
		push	bx
		push	dx
		call	DWRITE
		pop	dx
		pop	bx
		pop	ax
		pop	cx
		add	dx, ax
		loop	loc_2785
		pop	di
		retn

; ---------------------------------------------------------------------------

_$GET_DATE:				; DATA XREF: seg000:0792o
		push	ss
		pop	ds
		call	READTIME
		mov	ax, [YEAR]
		mov	bx, [DAY]
		call	get_user_stack
		mov	[si+6],	bx
		add	ax, 1980	; 7BCh
		mov	[si+4],	ax
		mov	al, [ss:WEEKDAY]
		retn
; ---------------------------------------------------------------------------

_$SET_DATE:				; DATA XREF: seg000:0794o
		mov	al, 0FFh
		sub	cx, 1980	; 7BCh
		jb	short locret_27D5
		cmp	cx, 119		; 77h
		ja	short locret_27D5
		or	dh, dh
		jz	short locret_27D5
		or	dl, dl
		jz	short locret_27D5
		cmp	dh, 0Ch
		ja	short locret_27D5
		push	ss
		pop	ds
		call	DODATE

locret_27D5:				; CODE XREF: seg000:27BCj seg000:27C1j ...
		retn
; ---------------------------------------------------------------------------

_$GET_TIME:				; DATA XREF: seg000:0796o
		push	ss
		pop	ds
		call	READTIME
		call	get_user_stack
		mov	[si+6],	dx
		mov	[si+4],	cx
		xor	al, al

locret_27E6:				; CODE XREF: seg000:27ECj seg000:27F1j ...
		retn
; ---------------------------------------------------------------------------

_$SET_TIME:				; DATA XREF: seg000:0798o
		mov	al, 0FFh
		cmp	ch, 24		; 18h
		jnb	short locret_27E6
		cmp	cl, 60		; 3Ch
		jnb	short locret_27E6
		cmp	dh, 60		; 3Ch
		jnb	short locret_27E6
		cmp	dl, 100		; 64h
		jnb	short locret_27E6
		push	cx
		push	dx
		push	ss
		pop	ds
		mov	bx, TIMEBUF ; 32Dh
		mov	cx, 6
		xor	dx, dx
		mov	ax, dx
		push	bx
		call	SETREAD
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		call	SETWRITE
		pop	word [TIMEBUF+4]
		pop	word [TIMEBUF+2]
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		xor	al, al
		retn
; ---------------------------------------------------------------------------

_$FCB_SEQ_READ:				; DATA XREF: seg000:0766o
		call	GETREC
		call	LOAD
		jmp	short loc_283C
; ---------------------------------------------------------------------------

_$FCB_SEQ_WRITE:			; DATA XREF: seg000:0768o
		call	GETREC
		call	STORE

loc_283C:				; CODE XREF: seg000:2834j
		jcxz	loc_2882
		add	ax, 1
		adc	dx, 0
		jmp	short loc_2882
; ---------------------------------------------------------------------------

_$FCB_RANDOM_READ:			; DATA XREF: seg000:0780o
		call	GET_random_record  ; GETRRPOS1
		call	LOAD
		jmp	short loc_2872
; ---------------------------------------------------------------------------

_$FCB_RANDOM_WRITE:			; DATA XREF: seg000:0782o
		call	GET_random_record ; GETRRPOS1
		call	STORE
		jmp	short loc_2872

; --------------- S U B	R O U T	I N E ---------------------------------------


_$FCB_RANDOM_READ_BLOCK:		; CODE XREF: _$READ:loc_3EAAp
					; DATA XREF: seg000:078Co
		call	GETRRPOS
		call	LOAD
		jmp	short loc_2864
; ---------------------------------------------------------------------------

_$FCB_RANDOM_WRITE_BLOCK:		; CODE XREF: seg000:3ED0p
					; DATA XREF: seg000:078Eo
		call	GETRRPOS
		call	STORE

loc_2864:				; CODE XREF: _$FCB_RANDOM_READ_BLOCK+6j
		call	get_user_stack
		mov	[si+4],	cx

; --------------- S U B	R O U T	I N E ---------------------------------------


FINNOSAV:				; CODE XREF: IOFUNC+C3p IOIN+7p
		jcxz	loc_2872
		add	ax, 1
		adc	dx, 0

loc_2872:				; CODE XREF: seg000:284Cj seg000:2854j ...
		mov	[es:di+21h], ax
		mov	[es:di+23h], dl
		or	dh, dh
		jz	short loc_2882
		mov	[es:di+24h], dh

loc_2882:				; CODE XREF: seg000:loc_283Cj
					; seg000:2844j	...
		mov	cx, ax
		and	al, 7Fh
		mov	[es:di+20h], al
		and	cl, 80h
		shl	cx, 1
		rcl	dx, 1
		mov	al, ch
		mov	ah, dl
		mov	[es:di+0Ch], ax
		mov	al, [ss:DSKERR]

locret_289D:				; CODE XREF: seg000:28A7j seg000:28CAj ...
		retn

; ---------------------------------------------------------------------------

_$FCB_DELETE:				; DATA XREF: seg000:0764o
		call	MOVNAME
		mov	al, 0FFh
		mov	[ss:FOUNDDEL], al
		jb	short locret_289D
		mov	al, [ss:ATTRIB]
		and	al, 1Fh
		cmp	al, 1Fh
		jnz	short loc_28C5
		mov	cx, 11
		mov	al, 3Fh	; '?'
		mov	di, NAME1
		repe scasb
		jnz	short loc_28C5
		mov	byte [ss:DELALL], 0

loc_28C5:				; CODE XREF: seg000:28B1j seg000:28BDj
		call	FINDNAME
		mov	al, 0FFh
		jb	short locret_289D
		or	ah, ah
		js	short locret_289D

loc_28D0:				; CODE XREF: seg000:2910j
		les	bp, [THISDPB]
		mov	ah, [DELALL]
		push	ds
		lds	di, [CURBUF]
		test	byte [ss:ATTRIB], 1
		jnz	short loc_28EE
		test	byte [bx+0Bh], 1
		jz	short loc_28EE
		pop	ds
		jmp	short loc_290A
; ---------------------------------------------------------------------------

loc_28EE:				; CODE XREF: seg000:28E3j seg000:28E9j
		mov	byte [ss:FOUNDDEL], 0
		mov	byte [di+5], 1
		mov	[bx], ah
		mov	bx, [si]
		pop	ds
		or	bx, bx
		jz	short loc_290A
		cmp	bx, [es:bp+0Dh]
		ja	short loc_290A
		call	RELEASE

loc_290A:				; CODE XREF: seg000:28ECj seg000:28FFj ...
		call	GETENTRY
		call	NEXTENT
		jnb	short loc_28D0
		call	FLUSHRET1
		mov	al, byte [FOUNDDEL]
		retn
; ---------------------------------------------------------------------------

loc_2919:				; CODE XREF: seg000:291Fj seg000:292Aj ...
		jmp	ERRET
; ---------------------------------------------------------------------------

_$FCB_RENAME:				; DATA XREF: seg000:076Co
		call	MOVNAME
		jb	short loc_2919
		add	si, 5
		mov	di, NAME2 ; 346h
		call	LODNAME
		jb	short loc_2919
		call	FINDNAME
		jb	short loc_2919
		or	ah, ah
		js	short loc_2919
		mov	si, NAME1 ; 339h
		mov	di, NAME3 ; 353h
		mov	cx, 13
		rep movsb

loc_2940:				; CODE XREF: seg000:299Dj
		mov	di, NAME1 ; 339h
		mov	si, NAME2 ; 346h
		mov	cx, 11

loc_2949:				; CODE XREF: seg000:2958j
		lodsb
		cmp	al, 3Fh	; '?'
		jnz	short loc_2956
		push	ds
		mov	ds, word [CURBUF+2]
		mov	al, [bx]
		pop	ds

loc_2956:				; CODE XREF: seg000:294Cj
		stosb
		inc	bx
		loop	loc_2949
		inc	di
		mov	byte [di], 16h
		call	DEVNAME
		jnb	short loc_29A2
		xor	ax, ax
		push	word [LASTENT]
		call	FINDENTRY
		pop	ax
		jnb	short loc_29A2
		les	bp, [THISDPB]
		call	GETENT
		mov	di, bx
		mov	es, word [CURBUF+2]
		mov	si, NAME1  ; 339h
		mov	cx, 11
		rep movsb
		mov	di, word [CURBUF]
		mov	byte [es:di+5], 1
		push	ss
		pop	es
		mov	si, NAME3 ; 353h
		mov	di, NAME1 ; 339h
		mov	cx, 13
		rep movsb
		call	NEXTENT
		jnb	short loc_2940
		jmp	FLUSHRET1
; ---------------------------------------------------------------------------

loc_29A2:				; CODE XREF: seg000:2961j seg000:296Dj
		call	FLUSHRET1
; START	OF FUNCTION CHUNK FOR DOOPEN

ERRET:				; CODE XREF: seg000:loc_2919j
					; DOOPENj
		mov	al, 0FFh
		retn
; END OF FUNCTION CHUNK	FOR DOOPEN
; ---------------------------------------------------------------------------

_$FCB_OPEN:				; DATA XREF: seg000:075Co
		call	GETFILE

; --------------- S U B	R O U T	I N E ---------------------------------------

DOOPEN:					; CODE XREF: NEWENTRY+87j $OPEN+A9p

; FUNCTION CHUNK AT 29A5 SIZE 00000003 BYTES

		jb	short ERRET
		push	si
		push	ax
		xor	al, al
		or	ah, ah
		js	short OPENDEV
		mov	al, byte [THISDRV]
		mov	ds, word [CURBUF+2]
		inc	ax

OPENDEV:			; CODE XREF: DOOPEN+8j
		stosb
		xor	ax, ax
		add	di, 0Bh
		stosw
		mov	al, 80h	; ''
		stosw
		lodsw
		mov	dx, ax
		movsw
		movsw
		mov	ax, [si-8]
		stosw
		mov	ax, [si-0Ah]
		stosw
		pop	ax
		pop	si
		mov	al, ah
		or	al, 40h
		stosb
		js	short SAVDEVPT
		mov	ax, dx
		stosw
		push	ax
		xor	ax, ax
		stosw
		pop	ax
		stosb
		mov	al, ah
		mov	ah, [ss:DIRSTART]
		push	cx
		mov	cl, 4
		shl	ah, cl
		or	al, ah
		stosb
		mov	ax, [ss:DIRSTART]
		mov	cl, 4
		shl	ax, cl
		pop	cx
		mov	al, ah
		stosb

OPEN_RET:				; CODE XREF: DOOPEN+61j
		xor	ax, ax
		retn

SAVDEVPT:				; CODE XREF: DOOPEN+30j
		lds	ax, [DEVPT]
		stosw
		mov	word [es:di], ds
		jmp	short OPEN_RET

; ---------------------------------------------------------------------------

_$FCB_CLOSE:				; DATA XREF: seg000:075Eo
		mov	di, dx
		cmp	byte [di], 0FFh
		jnz	short NORMFCB3
		add	di, 7

NORMFCB3:				; CODE XREF: seg000:2A13j
		test	byte [di+18h], 0C0h
		jnz	short loc_2A7A
		call	MOVNAMENOSET
		jb	short BADCLOSE

; --------------- S U B	R O U T	I N E ---------------------------------------

FCB_CLOSE_INNER:			; CODE XREF: _$CLOSE+37p
		push	dx
		push	ds
		mov	si, dx
		mov	bx, [si+1Eh]
		mov	cl, 4
		shr	bx, cl
		push	bx
		push	ss
		pop	ds
		call	FATREAD
		pop	bx
		call	SETDIRSRCH
		call	FINDENTRY
		pop	es
		pop	di
		jb	short BADCLOSE
		lds	bx, [CURBUF]
		or	byte [si-0Fh], 20h
		mov	cx, [es:di+19h]
		mov	[si], cx
		mov	dx, [es:di+10h]
		mov	[si+2],	dx
		mov	dx, [es:di+12h]
		mov	[si+4],	dx
		mov	dx, [es:di+14h]
		mov	[si-2],	dx
		mov	dx, [es:di+16h]
		mov	[si-4],	dx
		mov	byte [bx+5], 1
		push	ss
		pop	ds

FLUSHRET1:				; CODE XREF: seg000:2912p seg000:299Fj ...
		les	bp, [THISDPB]
		mov	al, [es:bp]
		call	FLUSHBUF

loc_2A7A:				; CODE XREF: seg000:2A1Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

BADCLOSE:				; CODE XREF: seg000:2A21j FCB_CLOSE_INNER+1Aj ...
		mov	al, 0FFh
		retn

; ---------------------------------------------------------------------------

_$FCB_CREATE:				; DATA XREF: seg000:076Ao
		call	MOVNAME
		jb	short loc_2AAE
		mov	di, NAME1 ; 339h
		mov	cx, 11
		mov	al, 3Fh	; '?'
		repne scasb
		jz	short loc_2AAE
		mov	byte [ss:CREATING], 0FFh
		push	dx
		push	ds
		call	FINDNAME
; START	OF FUNCTION CHUNK FOR NEWENTRY

loc_2A9C:				; CODE XREF: NEWENTRY+6j
		les	bp, [THISDPB]
		jnb	short loc_2AB8
		call	BUILDDIR
		jb	short loc_2AAC
		call	GETENT
		jmp	short loc_2AE5
; ---------------------------------------------------------------------------

loc_2AAC:				; CODE XREF: NEWENTRY-Bj
					; NEWENTRY:loc_2AB8j ...
		pop	ds
		pop	dx

loc_2AAE:				; CODE XREF: seg000:2A83j seg000:2A8Fj
		jmp	short BADCLOSE
; END OF FUNCTION CHUNK	FOR NEWENTRY

; --------------- S U B	R O U T	I N E ---------------------------------------

NEWENTRY:				; CODE XREF: seg000:16C9p

; FUNCTION CHUNK AT 2A9C SIZE 00000014 BYTES
; FUNCTION CHUNK AT 2AB8 SIZE 00000082 BYTES

		pop	dx
		pop	es
		pop	cx
		push	dx
		push	cx
		push	es
		jmp	short loc_2A9C

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR NEWENTRY

loc_2AB8:				; CODE XREF: NEWENTRY-10j
		jnz	short loc_2AAC
		or	ah, ah
		js	short loc_2B34
		push	ds
		lds	di, [CURBUF]
		mov	cx, [si]
		mov	si, [di+8]
		pop	ds
		jcxz	loc_2AE5
		cmp	cx, [es:bp+0Dh]
		ja	short loc_2AE5
		sub	bx, di
		push	bx
		push	si
		mov	bx, cx
		call	RELEASE
		pop	dx
		xor	al, al
		call	GETBUFFR
		pop	bx
		add	bx, word [CURBUF]

loc_2AE5:				; CODE XREF: NEWENTRY-6j NEWENTRY+19j	...
		test	byte [ATTRIB], 8
		jz	short loc_2AF3
		cmp	byte [VOLID], 0
		jnz	short loc_2AAC

loc_2AF3:				; CODE XREF: NEWENTRY+3Aj
		mov	es, word [CURBUF+2]
		mov	di, bx
		mov	si, NAME1 ; 339h
		mov	cx, 5
		movsb
		rep movsw
		mov	al, byte [ATTRIB]
		stosb
		mov	cl, 5
		xor	ax, ax
		rep stosw
		call	DATE16
		xchg	ax, dx
		stosw
		xchg	ax, dx
		stosw
		xor	ax, ax
		push	di
		stosw
		stosw
		stosw
		mov	si, word [CURBUF]
		mov	byte [es:si+5], 1
		les	bp, [THISDPB]
		mov	al, [es:bp]
		push	ax
		push	bx
		call	FLUSHBUF
		pop	bx
		pop	ax
		pop	si
		mov	ah, al

loc_2B34:				; CODE XREF: NEWENTRY+Cj
		clc
		pop	es
		pop	di
		jmp	DOOPEN
; END OF FUNCTION CHUNK	FOR NEWENTRY

; --------------- S U B	R O U T	I N E ---------------------------------------

DSKSTATCHK:				; CODE XREF: STATCHK-24F4p
					; LOAD:DVRDLPp	...
		cmp	byte [ss:INDOS], 1
		jz	short loc_2B43
		retn
; ---------------------------------------------------------------------------

loc_2B43:				; CODE XREF: DSKSTATCHK+6j
		push	cx
		push	es
		push	bx
		push	ds
		push	si
		push	cs
		pop	es
		push	cs
		pop	ds
		xor	cx, cx
		mov	byte [DSKSTCOM], 5
		mov	byte [DSKSTCALL], 0Eh
		mov	[DSKSTST], cx
		mov	bx, DSKSTCALL ; 15Dh
		lds	si, [BCON]
		call	DEVIOCALL2
		test	word [ss:DSKSTST], 200h
		jnz	short loc_2B9D
		mov	al, [ss:DSKCHRET]
		cmp	al, 3
		jnz	short loc_2B9F
		mov	byte [ss:DSKSTCOM], 4
		mov	byte [ss:DSKSTCALL], 16h
		mov	[ss:DSKCHRET], cl
		mov	[ss:DSKSTST], cx
		inc	cx
		mov	[ss:DSKSTCNT], cx
		call	DEVIOCALL2
		pop	si
		pop	ds
		pop	bx
		pop	es
		pop	cx
		jmp	short loc_2C0F
; ---------------------------------------------------------------------------

loc_2B9D:				; CODE XREF: DSKSTATCHK+33j
		xor	al, al

loc_2B9F:				; CODE XREF: DSKSTATCHK+3Bj
		pop	si
		pop	ds
		pop	bx
		pop	es
		pop	cx
		retn

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR STATCHK

loc_2BA5:				; CODE XREF: STATCHK+15j
		cmp	al, 10h
		jz	short loc_2BF5
		cmp	al, 0Eh
		jz	short loc_2BF5
		cmp	al, 3
		jz	short loc_2BF5
		retn
; END OF FUNCTION CHUNK	FOR STATCHK

; --------------- S U B	R O U T	I N E ---------------------------------------

SPOOLINT:				; CODE XREF: seg000:0ABCp
					; seg000:loc_ACCp ...
		pushf
		cmp	byte [ss:IDLEINT], 0
		jz	short loc_2BC5
		cmp	byte [ss:ERRORMODE], 0
		jnz	short loc_2BC5
		int	28h		; DOS 2+ internal - KEYBOARD BUSY LOOP

loc_2BC5:				; CODE XREF: SPOOLINT+7j SPOOLINT+Fj
		popf

locret_2BC6:				; CODE XREF: STATCHK+Aj STATCHK+35j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

STATCHK:				; CODE XREF: OUTT+1Dp
					; seg000:_$STD_AUX_INPUTp ...

; FUNCTION CHUNK AT 0621 SIZE 00000011 BYTES
; FUNCTION CHUNK AT 0649 SIZE 000000A0 BYTES
; FUNCTION CHUNK AT 07F3 SIZE 0000001D BYTES
; FUNCTION CHUNK AT 2BA5 SIZE 0000000D BYTES

		call	DSKSTATCHK
		push	bx
		xor	bx, bx
		call	GET_IO_FCB
		pop	bx
		jb	short locret_2BC6
		mov	ah, 1
		call	IOFUNC
		jz	short SPOOLINT
		cmp	al, 13h
		jnz	short loc_2BA5
		xor	ah, ah
		call	IOFUNC
		jmp	short loc_2BEE
; ---------------------------------------------------------------------------

loc_2BE5:				; CODE XREF: STATCHK+3Ej STATCHK+42j
		not	byte [ss:PFLAG]

locret_2BEA:				; CODE XREF: STATCHK+46j
		retn
; ---------------------------------------------------------------------------

loc_2BEB:				; CODE XREF: STATCHK+2Cj
		call	SPOOLINT

loc_2BEE:				; CODE XREF: STATCHK+1Cj
		mov	ah, 1
		call	IOFUNC
		jz	short loc_2BEB

loc_2BF5:				; CODE XREF: STATCHK-20j STATCHK-1Cj ...
		push	bx
		xor	bx, bx
		call	GET_IO_FCB
		pop	bx
		jb	short locret_2BC6
		xor	ah, ah
		call	IOFUNC
		cmp	al, 10h
		jz	short loc_2BE5
		cmp	al, 0Eh
		jz	short loc_2BE5
		cmp	al, 3
		jnz	short locret_2BEA

loc_2C0F:				; CODE XREF: DSKSTATCHK+61j
		mov	al, 3
		call	BUFOUT
		call	CRLF
		push	ss
		pop	ds
		cmp	byte [CONSWAP], 0
		jz	short loc_2C23
		call	SWAPBACK

loc_2C23:				; CODE XREF: STATCHK+57j
		cli
		mov	sp, [user_SP]
		mov	ss, [user_SS]
		call	restore_world
		mov	byte [cs:INDOS], 0
		mov	byte [cs:ERRORMODE], 0
		mov	[cs:ConC_spsave], sp
		int	23h		; DOS -	CONTROL	"C" EXIT ADDRESS
					; Return: return via RETF 2 with CF set
					; DOS will abort program with errorlevel 0
					; else
					; interrupted DOS call continues
		mov	[cs:user_SS], ax
		pushf
		pop	ax
		cmp	sp, [cs:ConC_spsave]
		jnz	short loc_2C56

loc_2C4F:				; CODE XREF: STATCHK+AEj
		mov	ax, [cs:user_SS]

loc_2C53:				; CODE XREF: STATCHK+A5j
		jmp	COMMAND
; ---------------------------------------------------------------------------

loc_2C56:				; CODE XREF: STATCHK+86j
		sub	word [cs:ConC_spsave], 2
		cmp	sp, [cs:ConC_spsave]
		jz	short loc_2C6E

loc_2C63:				; CODE XREF: STATCHK+B0j seg000:2C7Fj
		mov	ax, 4C00h
		mov	byte [cs:DidCTRLC], 0FFh
		jmp	short loc_2C53
; ---------------------------------------------------------------------------

loc_2C6E:				; CODE XREF: STATCHK+9Aj
		push	ax
		popf
		pop	word [cs:user_SS]
		jnb	short loc_2C4F
		jmp	short loc_2C63

; ---------------------------------------------------------------------------

DIVOV:					; DATA XREF: seg000:41BFo
		mov	si, DIVMES 	; "\r\nDivide overflow\r\n"
		call	RealDivOv
		jmp	short loc_2C63

; --------------- S U B	R O U T	I N E ---------------------------------------

RealDivOv:				; CODE XREF: seg000:2C7Cp
		push	cs
		pop	es
		push	cs
		pop	ds
		mov	byte [DSKSTCOM], 8
		mov	byte [DSKSTCALL], 16h
		mov	word [DSKSTST], 0
		mov	bl, [DivMesLen]
		xor	bh, bh
		mov	[DSKSTCNT], bx
		mov	bx, DSKSTCALL ; 15Dh
		mov	[DSKCHRET+1], si
		lds	si, [BCON]
		call	DEVIOCALL2
		mov	word [cs:DSKCHRET+1], DEVIOBUF ; 333h
		mov	word [cs:DSKSTCNT], 1
		retn

; ---------------------------------------------------------------------------

CHARHARD:				; CODE XREF: IOFUNC+71p LOAD+40p ...
		mov	word [ss:EXITHOLD+2], es
		mov	word [ss:EXITHOLD], bp
		push	si
		and	di, 0FFh
		mov	bp, ds
		call	FATALC
		pop	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

HARDERR:				; CODE XREF: DREAD+Bp DWRITE+Bp
		xchg	ax, di
		and	di, 0FFh
		cmp	di, 0
		jnz	short loc_2CE6
		push	ax
		mov	al, [es:bp]
		mov	[ss:WPERR], al
		pop	ax

loc_2CE6:				; CODE XREF: HARDERR+8j
		sub	ax, cx
		add	dx, ax
		push	dx
		mul	word [es:bp+2]
		pop	dx
		add	bx, ax
		xor	ah, ah
		cmp	dx, [es:bp+6]
		jb	short loc_2D0C
		inc	ah
		cmp	dx, [es:bp+10h]
		jb	short loc_2D0C
		inc	ah
		cmp	dx, [es:bp+0Bh]
		jb	short loc_2D0C
		inc	ah

loc_2D0C:				; CODE XREF: HARDERR+26j HARDERR+2Ej ...
		shl	ah, 1
		or	ah, [ss:READOP]

FATAL:					; CODE XREF: UNPACK+21p
		mov	al, [es:bp]

FATAL1:					; CODE XREF: FATREAD-3p
		mov	[ss:EXITHOLD+2], es
		mov	[ss:EXITHOLD], bp
		les	si, [es:bp+12h]
		mov	bp, es

; --------------- S U B	R O U T	I N E ---------------------------------------

FATALC:					; CODE XREF: seg000:2CCDp
		cmp	byte [ss:ERRORMODE], 0
		jnz	short loc_2D7C
		mov	[ss:CONTSTK], sp
		push	ss
		pop	es
		cli
		inc	byte [ss:ERRORMODE]
		dec	byte [ss:INDOS]
		mov	ss, [ss:user_SS]
		mov	sp, [es:user_SP]
		int	24h		; DOS -	FATAL ERROR HANDLER ADDRESS
			; Automatically	called upon detection of unrecoverable I/O error.
		mov	[es:user_SP], sp
		mov	[es:user_SS], ss
		mov	sp, es
		mov	ss, sp
		mov	sp, [ss:CONTSTK]
		inc	byte [ss:INDOS]
		mov	byte [ss:ERRORMODE], 0
		sti

loc_2D6C:				; CODE XREF: FATALC+57j
		les	bp, [ss:EXITHOLD]
		cmp	al, 2
		jz	short loc_2D80
		mov	byte [ss:WPERR], 0FFh
		retn
; ---------------------------------------------------------------------------

loc_2D7C:				; CODE XREF: FATALC+6j
		xor	al, al
		jmp	short loc_2D6C
; ---------------------------------------------------------------------------

loc_2D80:				; CODE XREF: FATALC+4Cj
		push	ss
		pop	ds
		cmp	byte [CONSWAP], 0
		jz	short loc_2D8C
		call	SWAPBACK

loc_2D8C:				; CODE XREF: FATALC+60j
		mov	byte [exit_type], 2
		mov	ds, [CurrentPDB]

reset_environment:			; CODE XREF: seg000:098Aj
		push	ds
		mov	al, 22h	; '"'
		call	_$GET_INTERRUPT_VECTOR
		mov	[ss:EXITHOLD+2], es
		mov	[ss:EXITHOLD], bx
		mov	bx, [ss:CurrentPDB]
		mov	ds, bx
		mov	ax, [16h]
		pop	cx
		cmp	ax, bx
		jz	short loc_2DD6
		cmp	bx, cx
		jnz	short loc_2DD6
		push	ax
		cmp	byte [ss:exit_type], 3
		jz	short loc_2DD1
		call	arena_free_process
		mov	cx, 20

loc_2DC7:				; CODE XREF: FATALC+A8j
		mov	bx, cx
		push	cx
		dec	bx
		call	_$CLOSE
		pop	cx
		loop	loc_2DC7

loc_2DD1:				; CODE XREF: FATALC+98j
		pop	word [ss:CurrentPDB]

loc_2DD6:				; CODE XREF: FATALC+8Bj FATALC+8Fj
		push	cs
		pop	ds
		mov	al, 0FFh
		call	FLUSHBUF
		cli
		mov	byte [INDOS], 0
		mov	byte [WPERR], 0FFh
		mov	ds, [CurrentPDB]
		mov	ss, [30h]
		mov	sp, [2Eh]
		call	restore_world
		pop	ax
		pop	ax
		pop	ax
		mov	ax, 0F202h
		push	ax
		push	word [cs:EXITHOLD+2]
		push	word [cs:EXITHOLD]
		sti
		iret

; ---------------------------------------------------------------------------

MAKEFCB:				; CODE XREF: seg000:_$PARSE_FILE_DESCRIPTORp
		mov	byte [ss:SpaceFlag], 0
		xor	dl, dl
		test	al, 2
		jnz	short loc_2E1A
		mov	byte [es:di], 0

loc_2E1A:				; CODE XREF: seg000:2E14j
		inc	di
		mov	cx, 8
		test	al, 4
		xchg	ax, bx
		mov	al, 20h	; ' '
		jz	short loc_2E29
		add	di, cx
		xor	cx, cx

loc_2E29:				; CODE XREF: seg000:2E23j
		rep stosb
		mov	cl, 3
		test	bl, 8
		jz	short loc_2E36
		add	di, cx
		xor	cx, cx

loc_2E36:				; CODE XREF: seg000:2E30j
		rep stosb
		xchg	ax, cx
		stosw
		stosw
		sub	di, 10h
		test	bl, 1
		jz	short loc_2E4C
		call	SCANB
		call	DELIM
		jnz	short loc_2E4F
		inc	si

loc_2E4C:				; CODE XREF: seg000:2E41j
		call	SCANB

loc_2E4F:				; CODE XREF: seg000:2E49j
		call	GETLET
		jbe	short loc_2E6A
		cmp	byte [si], 3Ah ; ':'
		jnz	short loc_2E6A
		inc	si
		sub	al, 40h	; '@'
		jbe	short loc_2E65
		cmp	al, [ss:NUMIO]
		jbe	short loc_2E67

loc_2E65:				; CODE XREF: seg000:2E5Cj
		mov	dl, 0FFh

loc_2E67:				; CODE XREF: seg000:2E63j
		stosb
		inc	si
		dec	di

loc_2E6A:				; CODE XREF: seg000:2E52j seg000:2E57j
		dec	si
		inc	di
; START	OF FUNCTION CHUNK FOR NAMETRANS

NORMSCAN:				; CODE XREF: NAMETRANS+1Cj
		mov	cx, 8
		call	GETWORD
		cmp	byte [si], 2Eh ; '.'
		jnz	short loc_2E7E
		inc	si
		mov	cx, 3
		call	MUST_GETWORD

loc_2E7E:				; CODE XREF: NAMETRANS-4Cj
		mov	al, dl
		retn
; END OF FUNCTION CHUNK	FOR NAMETRANS
; ---------------------------------------------------------------------------

loc_2E81:				; CODE XREF: seg000:2E88j
		add	di, cx
		dec	si
		retn
; ---------------------------------------------------------------------------

GETWORD:				; CODE XREF: NAMETRANS-52p
		call	GETLET
		jbe	short loc_2E81
		dec	si

MUST_GETWORD:				; CODE XREF: NAMETRANS-46p
					; seg000:loc_2E9Ej ...
		call	GETLET
		jb	short loc_2EB3
		jnz	short loc_2E9E
		test	byte [ss:SpaceFlag], 0FFh
		jz	short loc_2EB3
		cmp	al, 20h	; ' '
		jnz	short loc_2EB3

loc_2E9E:				; CODE XREF: seg000:2E90j
		jcxz	MUST_GETWORD
		dec	cx
		cmp	al, 2Ah	; '*'
		jnz	short loc_2EA9
		mov	al, 3Fh	; '?'
		rep stosb

loc_2EA9:				; CODE XREF: seg000:2EA3j
		stosb
		cmp	al, 3Fh	; '?'
		jnz	short MUST_GETWORD
		or	dl, 1
		jmp	short MUST_GETWORD
; ---------------------------------------------------------------------------

loc_2EB3:				; CODE XREF: seg000:2E8Ej seg000:2E98j ...
		mov	al, 20h	; ' '
		rep stosb
		dec	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

SCANB:					; CODE XREF: seg000:2E43p
					; seg000:loc_2E4Cp ...
		lodsb
		call	SPCHK
		jz	short SCANB
		dec	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

NAMETRANS:				; CODE XREF: ROOTPATH+7p

; FUNCTION CHUNK AT 2E6C SIZE 00000015 BYTES

		mov	byte [ss:SpaceFlag], 1
		push	ss
		pop	es
		mov	di, NAME1 ; 339h
		push	di
		mov	al, 20h	; ' '
		mov	cx, 11
		rep stosb
		xor	al, al
		mov	dl, al
		stosb
		pop	di
		cmp	byte [si], 2Eh ; '.'
		jnz	short NORMSCAN
		movsb
		lodsb
		call	PATHCHRCMP
		jz	short loc_2EFB
		or	al, al
		jz	short loc_2EFB
		cmp	al, 2Eh	; '.'
		jnz	short loc_2EFA
		stosb
		lodsb
		call	PATHCHRCMP
		jz	short loc_2EFB
		or	al, al
		jz	short loc_2EFB
		dec	si

loc_2EFA:				; CODE XREF: NAMETRANS+2Bj
		dec	si

loc_2EFB:				; CODE XREF: NAMETRANS+23j
					; NAMETRANS+27j ...
		dec	si
		xor	al, al
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

BUILDFCB:				; CODE XREF: FINDNAME+7p GETPATH+78p ...
		mov	ax, 2020h
		mov	di, DEVFCB+8 ; 341h
		stosw
		stosb
		xor	ax, ax
		mov	cx, 0Ah
		rep stosw
		stosb
		call	DATE16
		mov	di, DEVFCB+22 ; 34Fh
		xchg	ax, dx
		stosw
		xchg	ax, dx
		stosw
		xchg	ax, bx
		mov	bx, DEVFCB  ; 339h
		mov	si, di
		xor	al, al

BUILDFCB_RETN:				; CODE XREF: MOVNAMENOSET+28j
					; LODNAME+4j ...
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------


MOVNAMENOSET:				; CODE XREF: seg000:_$DIR_SEARCH_NEXTp
					; seg000:2A1Ep	...
		mov	di, 1
		jmp	short MOVSTART
; ---------------------------------------------------------------------------

MOVNAME:				; CODE XREF: GETFILEp seg000:GETNAMEp	...
		xor	di, di

MOVSTART:				; CODE XREF: MOVNAMENOSET+3j
		mov	word [ss:CREATING], 0E500h
		mov	si, dx
		lodsb
		mov	byte [ss:EXTFCB], al
		xor	ah, ah
		cmp	al, 0FFh
		jnz	short HAVATTRB
		add	dx, 7
		add	si, 6
		mov	ah, [si-1]
		lodsb

HAVATTRB:				; CODE XREF: MOVNAMENOSET+19j
		call	GETTHISDRV
		jb	short BUILDFCB_RETN
		push	ds
		push	dx
		push	si
		push	ax
		push	di
		push	ss
		pop	es
		mov	di, NAME1 ; 339h
		call	LODNAME
		pop	di
		jb	short DrvNoSet
		or	di, di
		jnz	short DrvNoSet
		push	ss
		pop	ds
		call	DEVNAME
		jnb	short DrvNoSet
		call	FATREAD
		mov	byte [ss:ATTRIB], 16h
		call	GETCURRDIR

DrvNoSet:				; CODE XREF: MOVNAMENOSET+38j
					; MOVNAMENOSET+3Cj ...
		pop	ax
		mov	byte [ss:ATTRIB], ah
		pop	si
		pop	dx
		pop	ds
		push	ss
		pop	es
		mov	di, NAME1 ; 339h

; --------------- S U B	R O U T	I N E ---------------------------------------

LODNAME:				; CODE XREF: seg000:2927p
					; MOVNAMENOSET+34p
		cmp	byte [si], 20h ; ' '
		stc
		jz	short BUILDFCB_RETN
		mov	cx, 11

MOVCHK:					; CODE XREF: LODNAME+16j
		call	GETLET
		jb	short RET6
		jnz	short STOLET
		cmp	al, 20h	; ' '
		stc
		jnz	short BUILDFCB_RETN

STOLET:					; CODE XREF: LODNAME+Ej
		stosb
		loop	MOVCHK
		clc

RET6:					; CODE XREF: LODNAME+Cj seg000:2FB6j
		retn

; ---------------------------------------------------------------------------

GETLET:					; CODE XREF: CHKDEV+11p
					; GOTPRESTRING2:loc_17CBp ...
		lodsb
		cmp	al, 61h	; 'a'
		jb	short loc_2FA6
		cmp	al, 7Ah	; 'z'
		ja	short loc_2FA6
		sub	al, 20h	; ' '

loc_2FA6:				; CODE XREF: seg000:2F9Ej seg000:2FA2j
		push	si
		mov	si, [ss:Current_Country]
		add	si, 12h
		push	cs
		call	word [cs:si]
		pop	si
		cmp	al, 2Eh	; '.'
		jz	short RET6
		cmp	al, 22h	; '"'
		jz	short RET6
		call	PATHCHRCMP
		jz	short RET6
		cmp	al, 5Bh	; '['
		jz	short RET6
		cmp	al, 5Dh	; ']'
		jz	short RET6

DELIM:					; CODE XREF: seg000:2E46p
		cmp	al, 3Ah	; ':'
		jz	short RET6
		cmp	al, 3Ch	; '<'
		jz	short RET6
		cmp	al, 7Ch	; '|'
		jz	short RET6
		cmp	al, 3Eh	; '>'
		jz	short RET6
		cmp	al, 2Bh	; '+'
		jz	short RET6
		cmp	al, 3Dh	; '='
		jz	short RET6
		cmp	al, 3Bh	; ';'
		jz	short RET6
		cmp	al, 2Ch	; ','
		jz	short RET6

SPCHK:				; CODE XREF: SCANB+1p
		cmp	al, 9
		jz	short RET6
		cmp	al, 20h	; ' '

GETLET_RETN:				; CODE XREF: PATHCHRCMP+2j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

PATHCHRCMP:				; CODE XREF: seg000:0F2Fp DELELMES+Bp	...
		cmp	al, 2Fh	; '/'
		jz	short GETLET_RETN
		cmp	al, 5Ch	; '\'
		retn

; ---------------------------------------------------------------------------

_$WAIT:					; DATA XREF: seg000:07D8o
		mov	ax, [ss:exit_code]
		xor	dx, dx
		mov	[ss:exit_code], dx
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

exec_blk	dd 0			; DATA XREF: seg000:304Cw seg000:308Ar ...
exec_func	db 0			; DATA XREF: seg000:3056w seg000:3082r ...
exec_fh		dw 0			; DATA XREF: seg000:3067w seg000:30E1r ...
exec_rel_fac	dw 0			; DATA XREF: seg000:313Bw
					; seg000:loc_31B2w ...
exec_res_len_para dw 0			; DATA XREF: seg000:3123w seg000:31ABr ...
exec_init_IP	dW 0			; DATA XREF: seg000:3228w seg000:331Aw ...
exec_init_CS	dw 0			
exec_init_SP	dw 0			; DATA XREF: seg000:3221w seg000:3322w ...
exec_init_SS	dw 0	
exec_environ	dw 0			; DATA XREF: seg000:309Dw seg000:30D2w ...
exec_size	dw 0			; DATA XREF: seg000:3190w seg000:31A7r ...
exec_load_block	dw 0			; DATA XREF: seg000:loc_307Bw
					; seg000:319Aw	...
exec_load_high	db 0			; DATA XREF: seg000:305Aw seg000:3103w ...

exec_internal_buffer EQU $

exec_signature	dw 0			; DATA XREF: seg000:loc_3108r
exec_len_mod_512 dw 0
exec_pages	dw 0			; DATA XREF: seg000:exec_save_startr
exec_rle_count	dw 0			; DATA XREF: seg000:loc_3248r
exec_par_dir	dw 0			; DATA XREF: seg000:311Fr
					; seg000:loc_31B8r
exec_min_BSS	dw 0			; DATA XREF: seg000:3173r seg000:317Dr
exec_max_BSS	dw 0			; DATA XREF: seg000:30FCr seg000:3181r
exec_SS		dw 0			; DATA XREF: seg000:3216r
exec_SP		dw 0			; DATA XREF: seg000:321Er
exec_chksum	dw 0
exec_IP		dw 0			; DATA XREF: seg000:3224r
exec_CS		dw 0
exec_rle_table	dw 0			; DATA XREF: seg000:3234r
exec_iov	dw 0
exec_dma	dw 0			; DATA XREF: seg000:3134w seg000:31B5w ...

exec_internal_buffer_size EQU $-exec_internal_buffer

; ---------------------------------------------------------------------------

_$EXEC:					; DATA XREF: seg000:07D4o
		cmp	al, 3
		jbe	short loc_3048

loc_3041:				; CODE XREF: seg000:304Aj
		mov	al, 1

loc_3043:				; CODE XREF: seg000:loc_3046j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_3046:				; CODE XREF: seg000:3065j seg000:3079j
		jmp	short loc_3043
; ---------------------------------------------------------------------------

loc_3048:				; CODE XREF: seg000:303Fj
		cmp	al, 2
		jz	short loc_3041
		mov	[ss:exec_blk], bx
		mov	[ss:exec_blk+2], es
		mov	[ss:exec_func], al
		mov	byte [ss:exec_load_high], 0
		xor	al, al
		call	_$OPEN
		jb	short loc_3046
		mov	[ss:exec_fh], ax
		mov	bx, ax
		xor	al, al
		call	_$IOCTL
		test	dl, 80h
		jz	short loc_307B
		mov	al, 2
		jmp	short loc_3046
; ---------------------------------------------------------------------------

loc_307B:				; CODE XREF: seg000:3075j
		mov	word [ss:exec_load_block], 0
		test	byte [ss:exec_func], 2
		jnz	short loc_30DC
		lds	si, [ss:exec_blk]
		mov	ax, [si]
		or	ax, ax
		jnz	short loc_30A5
		mov	ds, [ss:CurrentPDB]
		mov	ax, [2Ch]
		mov	[ss:exec_environ], ax
		or	ax, ax
		jz	short loc_30DC

loc_30A5:				; CODE XREF: seg000:3093j
		cld
		mov	es, ax
		xor	di, di
		mov	cx, 7FFFh
		xor	al, al

loc_30AF:				; CODE XREF: seg000:30B9j
		repne scasb
		jz	short loc_30B8
		mov	al, 0Ah
		jmp	loc_3146
; ---------------------------------------------------------------------------

loc_30B8:				; CODE XREF: seg000:30B1j
		scasb
		jnz	short loc_30AF
		push	di
		mov	bx, di
		add	bx, 0Fh
		mov	cl, 4
		shr	bx, cl
		push	es
		call	_$ALLOC
		pop	ds
		pop	cx
		jnb	short loc_30D0
		jmp	short loc_3140
; ---------------------------------------------------------------------------
		db  90h
; ---------------------------------------------------------------------------

loc_30D0:				; CODE XREF: seg000:30CBj
		mov	es, ax
		mov	[ss:exec_environ], ax
		xor	si, si
		xor	di, di
		rep movsb

loc_30DC:				; CODE XREF: seg000:3088j seg000:30A3j
		push	ss
		pop	ds
		mov	cx, exec_internal_buffer_size	; 1Eh
		mov	bx, [exec_fh]
		mov	dx, exec_signature	; 301Fh
		push	es
		push	ds
		call	exec_dealloc
		call	_$READ
		call	exec_alloc
		pop	ds
		pop	es
		jb	short loc_3144
		cmp	ax, exec_internal_buffer_size	; 1Eh
		jnz	short loc_3115
		cmp	word [exec_max_BSS], 0
		jnz	short loc_3108
		mov	byte [exec_load_high], 0FFh

loc_3108:				; CODE XREF: seg000:3101j
		mov	ax, [exec_signature]
		cmp	ax, 5A4Dh	; exe_valid_signature
		jz	short exec_save_start
		cmp	ax, 4D5Ah	; exe_valid_old_signature
		jz	short exec_save_start

loc_3115:				; CODE XREF: seg000:30FAj
		jmp	loc_3295
; ---------------------------------------------------------------------------

exec_save_start:				; CODE XREF: seg000:310Ej seg000:3113j
		mov	ax, [exec_pages]
		mov	cl, 5
		shl	ax, cl
		sub	ax, [exec_par_dir]
		mov	[exec_res_len_para], ax
		test	byte [exec_func], 2
		jz	short exec_allocate
		les	di, [exec_blk]
		mov	ax, [es:di]
		mov	[exec_dma], ax
		mov	ax, [es:di+2]
		mov	[exec_rel_fac], ax
		jmp	short loc_31B8
; ---------------------------------------------------------------------------

loc_3140:				; CODE XREF: seg000:30CDj seg000:3166j ...
		mov	al, 8
		jmp	short loc_3146
; ---------------------------------------------------------------------------

loc_3144:				; CODE XREF: seg000:30F5j
					; seg000:loc_3245j
		mov	al, 0Bh

loc_3146:				; CODE XREF: seg000:30B5j seg000:3142j
		push	ax
		mov	bx, [ss:exec_fh]
		call	exec_dealloc
		call	_$CLOSE
		pop	ax
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

exec_allocate:				; CODE XREF: seg000:312Bj
		push	ax
		mov	bx, 0FFFFh
		push	ds
		call	_$ALLOC
		pop	ds
		pop	ax
		add	ax, 10h
		cmp	bx, 11h
		jb	short loc_3140
		cmp	ax, bx
		ja	short loc_3140
		cmp	byte [exec_load_high], 0
		jnz	short loc_318B
		add	ax, [exec_min_BSS]
		jb	short loc_3140
		cmp	ax, bx
		ja	short loc_3140
		sub	ax, [exec_min_BSS]
		add	ax, [exec_max_BSS]
		jb	short loc_318B
		cmp	ax, bx
		jbe	short loc_318D

loc_318B:				; CODE XREF: seg000:3171j seg000:3185j
		mov	ax, bx

loc_318D:				; CODE XREF: seg000:3189j
		push	ds
		mov	bx, ax
		mov	[exec_size], bx
		call	_$ALLOC
		pop	ds
		jb	short loc_3140
		mov	[exec_load_block], ax
		add	ax, 10h
		cmp	byte [exec_load_high], 0
		jz	short loc_31B2
		add	ax, [exec_size]
		sub	ax, [exec_res_len_para]
		sub	ax, 10h

loc_31B2:				; CODE XREF: seg000:31A5j
		mov	[exec_rel_fac], ax
		mov	[exec_dma], ax

loc_31B8:				; CODE XREF: seg000:313Ej
		mov	dx, [exec_par_dir]
		push	dx
		mov	cl, 4
		shl	dx, cl
		pop	ax
		mov	cl, 0Ch
		shr	ax, cl
		mov	cx, ax
		mov	bx, [exec_fh]
		push	ds
		xor	al, al
		call	_$LSEEK
		pop	ds

loc_31D3:				; CODE XREF: seg000:3210j
		mov	bx, [exec_res_len_para]
		cmp	bx, 1000h
		jb	short loc_31E0
		mov	bx, 0FE0h

loc_31E0:				; CODE XREF: seg000:31DBj
		sub	[exec_res_len_para], bx
		push	bx
		mov	cl, 4
		shl	bx, cl
		mov	cx, bx
		mov	bx, [exec_fh]
		push	ds
		mov	ds, [exec_dma]
		xor	dx, dx
		push	cx
		call	exec_dealloc
		call	_$READ
		call	exec_alloc
		pop	cx
		pop	ds
		cmp	cx, ax
		pop	bx
		jnz	short loc_3212
		add	[exec_dma], bx
		cmp	word [exec_res_len_para], 0
		jnz	short loc_31D3

loc_3212:				; CODE XREF: seg000:3205j
		mov	cx, [exec_rel_fac]
		mov	ax, [exec_SS]
		add	ax, cx
		mov	[exec_init_SS], ax
		mov	ax, [exec_SP]
		mov	[exec_init_SP], ax
		les	ax, [exec_IP]
		mov	[exec_init_IP], ax
		mov	ax, es
		add	ax, cx
		mov	[exec_init_CS], ax
		xor	cx, cx
		mov	dx, [exec_rle_table]
		mov	bx, [exec_fh]
		push	ds
		xor	ax, ax
		call	_$LSEEK
		pop	ds
		jnb	short loc_3248

loc_3245:				; CODE XREF: seg000:3264j
		jmp	loc_3144
; ---------------------------------------------------------------------------

loc_3248:				; CODE XREF: seg000:3243j
		mov	dx, [exec_rle_count]

loc_324C:				; CODE XREF: seg000:3290j
		push	dx
		mov	dx, exec_signature ; 301Fh
		mov	cx, ((exec_internal_buffer_size)/4)*4 ; 1Ch
		mov	bx, [ss:exec_fh]
		push	ds
		call	exec_dealloc
		call	_$READ
		call	exec_alloc
		pop	es
		pop	dx
		jb	short loc_3245
		mov	cx, (exec_internal_buffer_size)/4 ; 7
		mov	di, exec_signature ; 301Fh
		mov	si, [ss:exec_rel_fac]

loc_3271:				; CODE XREF: seg000:328Cj
		cmp	dx, 0
		jnz	short loc_3279
		jmp	loc_3331
; ---------------------------------------------------------------------------

loc_3279:				; CODE XREF: seg000:3274j
		lds	bx, [es:di]
		mov	ax, ds
		add	ax, si
		mov	ds, ax
		mov	ax, [bx]
		add	ax, si
		mov	[bx], ax
		add	di, 4
		dec	dx
		loop	loc_3271
		push	es
		pop	ds
		jmp	short loc_324C
; ---------------------------------------------------------------------------

loc_3292:				; CODE XREF: seg000:32B1j seg000:3305j
		jmp	loc_3140
; ---------------------------------------------------------------------------

loc_3295:				; CODE XREF: seg000:loc_3115j
		test	byte [ss:exec_func], 2
		jz	short loc_32A9
		lds	si, [ss:exec_blk]
		lodsw
		mov	[ss:exec_dma], ax
		jmp	short exec_64K
; ---------------------------------------------------------------------------

loc_32A9:				; CODE XREF: seg000:329Bj
		mov	bx, 0FFFFh
		call	_$ALLOC
		or	bx, bx
		jz	short loc_3292
		mov	[ss:exec_size], bx
		push	bx
		call	_$ALLOC
		pop	bx
		mov	[ss:exec_load_block], ax
		add	ax, 10h
		mov	[ss:exec_dma], ax
		sub	bx, 10h
		cmp	bx, 1000h
		jnb	short exec_64K
		mov	ax, bx
		mov	cl, 4
		shl	ax, cl
		jmp	short loc_32DC
; ---------------------------------------------------------------------------

exec_64K:				; CODE XREF: seg000:32A7j seg000:32CFj
		mov	ax, 0FFFFh

loc_32DC:				; CODE XREF: seg000:32D7j
		push	ax
		mov	bx, [ss:exec_fh]
		xor	cx, cx
		mov	dx, cx
		xor	ax, ax
		call	_$LSEEK
		mov	bx, [ss:exec_fh]
		pop	cx
		mov	ds, [ss:exec_dma]
		xor	dx, dx
		push	cx
		call	exec_dealloc
		call	_$READ
		call	exec_alloc
		pop	si
		cmp	ax, si
		jz	short loc_3292
		test	byte [ss:exec_func], 2
		jnz	short loc_3331
		mov	ax, [ss:exec_dma]
		sub	ax, 10h
		mov	[ss:exec_init_CS], ax
		mov	word [ss:exec_init_IP], 100h
		dec	si
		mov	[ss:exec_init_SP], si
		mov	[ss:exec_init_SS], ax
		mov	ds, ax
		mov	word [si], 0

loc_3331:				; CODE XREF: seg000:3276j seg000:330Dj
		mov	bx, [ss:exec_fh]
		call	exec_dealloc
		call	_$CLOSE
		call	exec_alloc
		test	byte [ss:exec_func], 2
		jz	short loc_334A
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

loc_334A:				; CODE XREF: seg000:3345j
		mov	dx, [ss:exec_load_block]
		mov	si, 1
		mov	ax, [ss:exec_environ]
		or	ax, ax
		jz	short loc_335F
		dec	ax
		mov	ds, ax
		mov	[si], dx

loc_335F:				; CODE XREF: seg000:3358j
		mov	ax, [ss:exec_load_block]
		dec	ax
		mov	ds, ax
		mov	[si], dx
		push	dx
		mov	byte [ss:CreatePDB], 0FFh
		call	_$DUP_PDB
		pop	dx
		push	word [ss:exec_environ]
		pop	word [es:2Ch]
		mov	si, [ss:exec_size]
		add	si, dx
		mov	word [es:2], si
		lds	si, [ss:exec_blk]
		push	ds
		push	si
		lds	si, [si+6]
		mov	cx, 0Ch
		push	cx
		mov	di, 5Ch	; '\'
		mov	bl, [si]
		rep movsb
		xor	ax, ax
		stosw
		stosw
		pop	cx
		pop	si
		pop	ds
		push	ds
		push	si
		lds	si, [si+0Ah]
		mov	di, 6Ch	; 'l'
		mov	bh, [si]
		rep movsb
		stosw
		stosw
		pop	si
		pop	ds
		lds	si, [si+2]
		mov	cx, 80h	; ''
		mov	di, cx
		rep movsb
		dec	cl
		cmp	bh, [ss:NUMIO]
		jbe	short loc_33CC
		mov	bh, cl
		jmp	short loc_33CE
; ---------------------------------------------------------------------------

loc_33CC:				; CODE XREF: seg000:33C6j
		xor	bh, bh

loc_33CE:				; CODE XREF: seg000:33CAj
		cmp	bl, [ss:NUMIO]
		jbe	short loc_33D9
		mov	bl, cl
		jmp	short loc_33DB
; ---------------------------------------------------------------------------

loc_33D9:				; CODE XREF: seg000:33D3j
		xor	bl, bl

loc_33DB:				; CODE XREF: seg000:33D7j
		call	get_user_stack
		push	word [si+14h]
		push	word [si+12h]
		push	word [si+14h]
		push	word [si+12h]
		pop	word [es:0Ah]
		pop	word [es:0Ch]
		xor	ax, ax
		mov	ds, ax
		pop	word [addr_int_terminate] ; 88h
		pop	word [addr_int_terminate+2] ; 8Ah
		mov	word [ss:DMAADD], 80h
		mov	ds, [ss:CurrentPDB]
		mov	word [ss:DMAADD+2], ds
		test	byte [ss:exec_func], 1
		jz	short exec_go
		lds	si, [ss:exec_init_SP]
		les	di, [ss:exec_blk]
		mov	word [es:di+10h], ds
		dec	si
		dec	si
		mov	[si], bx
		mov	[es:di+0Eh], si
		lds	ax, [ss:exec_init_IP]
		mov	word [es:di+14h], ds
		mov	[es:di+12h], ax
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

exec_go:				; CODE XREF: seg000:3417j
		lds	si, [ss:exec_init_IP]
		cli
		mov	byte [ss:INDOS], 0
		mov	ss, word [ss:exec_init_SS]
		mov	sp, word [cs:exec_init_SP]
		sti
		push	ds
		push	si
		mov	es, dx
		mov	ds, dx
		mov	ax, bx
		retf

; --------------- S U B	R O U T	I N E ---------------------------------------

exec_dealloc:				; CODE XREF: seg000:30EAp seg000:314Cp ...
		push	bx
		mov	bx, 0
		call	exec_do_change_owner
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

exec_alloc:				; CODE XREF: seg000:30F0p seg000:31FDp ...
		push	bx
		mov	bx, [cs:CurrentPDB]
		call	exec_do_change_owner
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

exec_do_change_owner:			; CODE XREF: exec_dealloc+4p exec_alloc+6p
		push	ds
		push	ax
		mov	ax, [cs:exec_environ]
		or	ax, ax
		jz	short loc_3484
		dec	ax
		mov	ds, ax
		mov	word [1], bx

loc_3484:				; CODE XREF: exec_do_change_owner+8j
		mov	ax, [cs:exec_load_block]
		or	ax, ax
		jz	short loc_3493
		dec	ax
		mov	ds, ax
		mov	word [1], bx

loc_3493:				; CODE XREF: exec_do_change_owner+17j
		pop	ax
		pop	ds
		retn

; ---------------------------------------------------------------------------

_$KEEP_PROCESS:				; DATA XREF: seg000:07A0o
		push	ax
		mov	byte [ss:exit_type], 3
		mov	es, [ss:CurrentPDB]
		cmp	dx, 6
		jnb	short loc_34AA
		mov	dx, 6

loc_34AA:				; CODE XREF: seg000:34A5j
		mov	bx, dx
		push	bx
		push	es
		call	_$SETBLOCK
		pop	ds
		pop	bx
		jb	short loc_34BC
		mov	ax, ds
		add	ax, bx
		mov	word [2], ax

loc_34BC:				; CODE XREF: seg000:34B3j
		pop	ax
		jmp	short exit_inner
; ---------------------------------------------------------------------------

Stay_resident:				; DATA XREF: seg000:41FBo
		mov	ax, 3100h
		add	dx, 0Fh
		mov	cl, 4
		shr	dx, cl
		jmp	COMMAND
; ---------------------------------------------------------------------------

_$EXIT:					; DATA XREF: seg000:07D6o
		xor	ah, ah
		xchg	ah, [ss:DidCTRLC]
		or	ah, ah
		mov	byte [ss:exit_type], 0
		jz	short exit_inner
		mov	byte [ss:exit_type], 1

exit_inner:				; CODE XREF: seg000:34BDj seg000:34DBj
		call	get_user_stack
		push	word [ss:CurrentPDB]
		pop	word [si+14h]
		jmp	abort_inner
; ---------------------------------------------------------------------------

_$STD_CON_INPUT:				; DATA XREF: seg000:0740o
		call	_$STD_CON_INPUT_NO_ECHO
		push	ax
		call	OUTT
		pop	ax

locret_34F9:				; CODE XREF: OUTT+2Cj
		retn
; ---------------------------------------------------------------------------

_$STD_CON_OUTPUT:			; DATA XREF: seg000:0742o
		mov	al, dl

; --------------- S U B	R O U T	I N E ---------------------------------------

OUTT:					; CODE XREF: OUTMES+6p	LOAD+DBp ...

; FUNCTION CHUNK AT 3567 SIZE 00000008 BYTES
; FUNCTION CHUNK AT 3571 SIZE 00000007 BYTES
; FUNCTION CHUNK AT 35BD SIZE 00000007 BYTES

		cmp	al, 20h	; ' '
		jb	short CTRLOUT
		cmp	al, 7Fh	; c_DEL
		jz	short OUTCH
		inc	byte [ss:CARPOS]

OUTCH:				; CODE XREF: OUTT+6j OUTT+51j	...
		push	ds
		push	si
		inc	byte [ss:CHARCO]
		and	byte [ss:CHARCO], 3
		jnz	short loc_351D
		push	ax
		call	STATCHK
		pop	ax

loc_351D:				; CODE XREF: OUTT+1Aj
		call	RAWOUT
		pop	si
		pop	ds
		test	byte [ss:PFLAG], 0FFh
		jz	short locret_34F9
		push	bx
		push	ds
		push	si
		mov	bx, 1
		call	GET_IO_FCB
		jb	short loc_3541
		test	byte [si+18h], 80h
		jz	short loc_3541
		mov	bx, 4
		jmp	short loc_35BD
; ---------------------------------------------------------------------------
		db 0C3h
; ---------------------------------------------------------------------------

loc_3541:				; CODE XREF: OUTT+37j OUTT+3Dj
		jmp	short loc_35C0
; ---------------------------------------------------------------------------

CTRLOUT:				; CODE XREF: OUTT+2j
		cmp	al, 0Dh
		jz	short ZERPOS
		cmp	al, 8
		jz	short BACKPOS
		cmp	al, 9
		jnz	short OUTCH
		mov	al, [ss:CARPOS]
		or	al, 0F8h
		neg	al

; --------------- S U B	R O U T	I N E ---------------------------------------

TAB:					; CODE XREF: _$STD_CON_STRING_INPUT+BAp
		push	cx
		mov	cl, al
		mov	ch, 0
		jcxz	loc_3565

loc_355E:				; CODE XREF: TAB+Cj
		mov	al, 20h	; ' '
		call	OUTT
		loop	loc_355E

loc_3565:				; CODE XREF: TAB+5j
		pop	cx
		retn

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR OUTT

ZERPOS:				; CODE XREF: OUTT+49j
		mov	byte [ss:CARPOS], 0
		jmp	short OUTCH
; END OF FUNCTION CHUNK	FOR OUTT
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR BUFOUT

OUTJ:				; CODE XREF: BUFOUT+2j BUFOUT+6j
		jmp	short OUTT
; END OF FUNCTION CHUNK	FOR BUFOUT
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR OUTT

BACKPOS:				; CODE XREF: OUTT+4Dj
		dec	byte [ss:CARPOS]
		jmp	short OUTCH
; END OF FUNCTION CHUNK	FOR OUTT

; --------------- S U B	R O U T	I N E ---------------------------------------

BUFOUT:					; CODE XREF: STATCHK+4Ap
					; _$STD_CON_STRING_INPUT+64p ...

; FUNCTION CHUNK AT 356F SIZE 00000002 BYTES

		cmp	al, 20h	; ' '
		jnb	short OUTJ
		cmp	al, 9
		jz	short OUTJ
		push	ax
		mov	al, 5Eh	; '^'
		call	OUTT
		pop	ax
		or	al, 40h
		call	OUTT

locret_358C:				; CODE XREF: seg000:3596j
		retn

; ---------------------------------------------------------------------------

_$STD_AUX_INPUT:				; DATA XREF: seg000:0744o
		call	STATCHK
		mov	bx, 3
		call	GET_IO_FCB
		jb	short locret_358C
		jmp	short loc_359D
; ---------------------------------------------------------------------------

loc_359A:				; CODE XREF: seg000:35A2j
		call	SPOOLINT

loc_359D:				; CODE XREF: seg000:3598j
		mov	ah, 1
		call	IOFUNC
		jz	short loc_359A
		xor	ah, ah
		call	IOFUNC
		retn
; ---------------------------------------------------------------------------

_$STD_AUX_OUTPUT:			; DATA XREF: seg000:0746o
		push	bx
		mov	bx, 3
		jmp	short loc_35B4
; ---------------------------------------------------------------------------

_$STD_PRINTER_OUTPUT:			; DATA XREF: seg000:0748o
		push	bx
		mov	bx, 4

loc_35B4:				; CODE XREF: seg000:35AEj
		mov	al, dl
		push	ax
		call	STATCHK
		pop	ax
		push	ds
		push	si
; START	OF FUNCTION CHUNK FOR OUTT

loc_35BD:				; CODE XREF: OUTT+42j
		call	RAWOUT2

loc_35C0:				; CODE XREF: OUTT:loc_3541j
		pop	si
		pop	ds
		pop	bx
		retn
; END OF FUNCTION CHUNK	FOR OUTT
; ---------------------------------------------------------------------------

_$STD_CON_INPUT_NO_ECHO:		; CODE XREF: _$STD_CON_STRING_INPUT:OEMFunctionKeyp
					; seg000:_$STD_CON_INPUTp ...
		push	ds
		push	si

loc_35C6:				; CODE XREF: seg000:35C9j
		call	STATCHK
		jz	short loc_35C6
		xor	ah, ah
		call	IOFUNC
		pop	si
		pop	ds

locret_35D2:				; CODE XREF: seg000:35D8j
					; _$STD_CON_STRING_INPUT+Bj
		retn
; ---------------------------------------------------------------------------

_$STD_CON_STRING_OUTPUT:		; DATA XREF: seg000:0750o
		mov	si, dx

loc_35D5:				; CODE XREF: seg000:35DDj
		lodsb
		cmp	al, 24h	; '$'
		jz	short locret_35D2
		call	OUTT
		jmp	short loc_35D5

; --------------- S U B	R O U T	I N E ---------------------------------------

_$STD_CON_STRING_INPUT:			; CODE XREF: LOAD+11Cp
					; DATA XREF: seg000:0752o

; FUNCTION CHUNK AT 091D SIZE 00000014 BYTES
; FUNCTION CHUNK AT 3687 SIZE 00000071 BYTES
; FUNCTION CHUNK AT 370A SIZE 00000044 BYTES
; FUNCTION CHUNK AT 377F SIZE 00000021 BYTES

		mov	ax, ss
		mov	es, ax
		mov	si, dx
		xor	ch, ch
		lodsw
		or	al, al
		jz	short locret_35D2
		mov	bl, ah
		mov	bh, ch
		cmp	al, bl
		jbe	short loc_35F9
		cmp	byte [bx+si], 0Dh
		jz	short loc_35FB

loc_35F9:				; CODE XREF: _$STD_CON_STRING_INPUT+13j
		mov	bl, ch

loc_35FB:				; CODE XREF: _$STD_CON_STRING_INPUT+18j
		mov	dl, al
		dec	dx

loc_35FE:				; CODE XREF: _$STD_CON_STRING_INPUT+BDj
		mov	al, [ss:CARPOS]
		mov	[ss:STARTPOS], al
		push	si
		mov	di, 22Ah
		mov	byte [ss:INSMODE], ch
		mov	bh, ch
		mov	dh, ch
		call	_$STD_CON_INPUT_NO_ECHO
		cmp	al, 0Ah
		jnz	short loc_361D

GETCH:					; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; _$STD_CON_STRING_INPUT+40j ...
		call	_$STD_CON_INPUT_NO_ECHO

loc_361D:				; CODE XREF: _$STD_CON_STRING_INPUT+39j
		cmp	al, 6
		jz	short GETCH
		cmp	al, [ss:ESCCHAR]
		jz	short loc_3660
		cmp	al, 7Fh		; c_DEL
		jz	short loc_3657
		cmp	al, 8		; c_BS
		jz	short loc_3657
		cmp	al, 0Dh		; c_CR
		jz	short loc_3663
		cmp	al, 0Ah		; c_LF
		jz	short PHYCRLF
		cmp	al, 1Bh		; CANCEL
		jz	short KILNEW

loc_363C:				; CODE XREF: _$STD_CON_STRING_INPUT+12Fj
					; _$STD_CON_STRING_INPUT+1BEj
		cmp	dh, dl
		jnb	short loc_3659
		stosb
		inc	dh
		call	BUFOUT
		cmp	byte [ss:INSMODE], 0
		jnz	short GETCH
		cmp	bh, bl
		jnb	short GETCH
		inc	si
		inc	bh
		jmp	short GETCH
; ---------------------------------------------------------------------------

loc_3657:				; CODE XREF: _$STD_CON_STRING_INPUT+4Bj
					; _$STD_CON_STRING_INPUT+4Fj
		jmp	short BACKSP
; ---------------------------------------------------------------------------

loc_3659:				; CODE XREF: _$STD_CON_STRING_INPUT+5Fj
		mov	al, 7
		call	OUTT
		jmp	short GETCH
; ---------------------------------------------------------------------------

loc_3660:				; CODE XREF: _$STD_CON_STRING_INPUT+47j
		jmp	OEMFunctionKey
; ---------------------------------------------------------------------------

loc_3663:				; CODE XREF: _$STD_CON_STRING_INPUT+53j
		stosb
		call	OUTT
		pop	di
		mov	[di-1],	dh
		inc	dh

; --------------- S U B	R O U T	I N E ---------------------------------------

COPYNEW:				; CODE XREF: _$STD_CON_STRING_INPUT+1A9p
		mov	bp, es
		mov	bx, ds
		mov	es, bx
		mov	ds, bp
		mov	si, INBUF ; 22Ah
		mov	cl, dh
		rep movsb
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

CRLF:					; CODE XREF: STATCHK+4Dp
					; _$STD_CON_STRING_INPUT:PHYCRLFp ...
		mov	al, 0Dh
		call	OUTT
		mov	al, 0Ah
		jmp	OUTT

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _$STD_CON_STRING_INPUT

PHYCRLF:				; CODE XREF: _$STD_CON_STRING_INPUT+57j
		call	CRLF
		jmp	short GETCH
; ---------------------------------------------------------------------------

KILNEW:					; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; _$STD_CON_STRING_INPUT+5Bj
					; DATA XREF: ...
		mov	al, 5Ch	; '\'
		call	OUTT
		pop	si

PUTNEW:				; CODE XREF: _$STD_CON_STRING_INPUT+1B1j
		call	CRLF
		mov	al, [ss:STARTPOS]
		call	TAB
		jmp	loc_35FE
; ---------------------------------------------------------------------------

BACKSP:					; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; _$STD_CON_STRING_INPUT:loc_3657j
					; DATA XREF: ...
		or	dh, dh
		jz	short loc_36B4
		call	BACKUP
		mov	al, [es:di]
		cmp	al, 20h	; ' '
		jnb	short loc_36B4
		cmp	al, 9
		jz	short loc_36C6
		call	BACKMES

loc_36B4:				; CODE XREF: _$STD_CON_STRING_INPUT+C2j
					; _$STD_CON_STRING_INPUT+CCj ...
		cmp	byte [ss:INSMODE], 0
		jnz	short loc_36C3
		or	bh, bh
		jz	short loc_36C3
		dec	bh
		dec	si

loc_36C3:				; CODE XREF: _$STD_CON_STRING_INPUT+DBj
					; _$STD_CON_STRING_INPUT+DFj
		jmp	GETCH
; ---------------------------------------------------------------------------

loc_36C6:				; CODE XREF: _$STD_CON_STRING_INPUT+D0j
		push	di
		dec	di
		std
		mov	cl, dh
		mov	al, 20h	; ' '
		push	bx
		mov	bl, 7
		jcxz	loc_36E0

loc_36D2:				; CODE XREF: _$STD_CON_STRING_INPUT:loc_36DEj
		scasb
		jbe	short loc_36DE
		cmp	byte [es:di+1], 9
		jz	short loc_36E5
		dec	bl

loc_36DE:				; CODE XREF: _$STD_CON_STRING_INPUT+F4j
		loop	loc_36D2

loc_36E0:				; CODE XREF: _$STD_CON_STRING_INPUT+F1j
		sub	bl, [ss:STARTPOS]

loc_36E5:				; CODE XREF: _$STD_CON_STRING_INPUT+FBj
		sub	bl, dh
		add	cl, bl
		and	cl, 7
		cld
		pop	bx
		pop	di
		jz	short loc_36B4

loc_36F1:				; CODE XREF: _$STD_CON_STRING_INPUT+115j
		call	BACKMES
		loop	loc_36F1
		jmp	short loc_36B4
; END OF FUNCTION CHUNK	FOR _$STD_CON_STRING_INPUT

; --------------- S U B	R O U T	I N E ---------------------------------------

BACKUP:					; CODE XREF: _$STD_CON_STRING_INPUT+C4p
		dec	dh
		dec	di

; --------------- S U B	R O U T	I N E ---------------------------------------

BACKMES:				; CODE XREF: _$STD_CON_STRING_INPUT+D2p
					; _$STD_CON_STRING_INPUT:loc_36F1p
		mov	al, 8  ; c_BS
		call	OUTT
		mov	al, 20h	; ' '
		call	OUTT
		mov	al, 8  ; c_BS
		jmp	OUTT

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _$STD_CON_STRING_INPUT

TWOESC:					; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:0905o
		mov	al, [ss:ESCCHAR]
		jmp	loc_363C
; ---------------------------------------------------------------------------

COPYLIN:				; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:090Fo
		mov	cl, bl
		sub	cl, bh
		jmp	short loc_371E
; ---------------------------------------------------------------------------

COPYSTR:				; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:0913o
		call	FINDOLD 
		jmp	short loc_371E
; ---------------------------------------------------------------------------

COPYONE:				; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:0917o ...
		mov	cl, 1

loc_371E:				; CODE XREF: _$STD_CON_STRING_INPUT+136j
					; _$STD_CON_STRING_INPUT+13Bj ...
		mov	byte [ss:INSMODE], 0
		cmp	dh, dl
		jz	short loc_3737
		cmp	bh, bl
		jz	short loc_3737
		lodsb
		stosb
		call	BUFOUT
		inc	bh
		inc	dh
		loop	loc_371E

loc_3737:				; CODE XREF: _$STD_CON_STRING_INPUT+147j
					; _$STD_CON_STRING_INPUT+14Bj ...
		jmp	GETCH
; ---------------------------------------------------------------------------

SKIPONE:				; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:0915o
		cmp	bh, bl
		jz	short loc_3737
		inc	bh
		inc	si
		jmp	GETCH
; ---------------------------------------------------------------------------

SKIPSTR:				; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:0911o
		call	FINDOLD 
		add	si, cx
		add	bh, cl
		jmp	GETCH
; END OF FUNCTION CHUNK	FOR _$STD_CON_STRING_INPUT

; --------------- S U B	R O U T	I N E ---------------------------------------

FINDOLD:				; CODE XREF: _$STD_CON_STRING_INPUT:COPYSTRp
					; _$STD_CON_STRING_INPUT:SKIPSTRp
		call	_$STD_CON_INPUT_NO_ECHO
		cmp	al, [ss:ESCCHAR]
		jnz	short FINDSETUP
		call	_$STD_CON_INPUT_NO_ECHO
		jmp	short NOTFND
; ---------------------------------------------------------------------------
		db  90h	
; ---------------------------------------------------------------------------

FINDSETUP:				; CODE XREF: FINDOLD +8j
		mov	cl, bl
		sub	cl, bh
		jz	short NOTFND
		dec	cx
		jz	short NOTFND
		push	es
		push	ds
		pop	es
		push	di
		mov	di, si
		inc	di
		repne scasb
		pop	di
		pop	es
		jnz	short NOTFND
		not	cl
		add	cl, bl
		sub	cl, bh

locret_377A:				; CODE XREF: seg000:37A5j
		retn
; ---------------------------------------------------------------------------

NOTFND:					; CODE XREF: FINDOLD +Dj FINDOLD +14j	...
		pop	bp
		jmp	GETCH

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _$STD_CON_STRING_INPUT

REEDIT:					; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:090Bo
		mov	al, 40h	; '@'
		call	OUTT
		pop	di
		push	di
		push	es
		push	ds
		call	COPYNEW
		pop	ds
		pop	es
		pop	si
		mov	bl, dh
		jmp	PUTNEW
; ---------------------------------------------------------------------------

ENTERINS:				; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:0907o
		not	byte [ss:INSMODE]
		jmp	GETCH
; ---------------------------------------------------------------------------

CTRLZ:					; CODE XREF: _$STD_CON_STRING_INPUT-2CB2j
					; DATA XREF: seg000:091Bo
		mov	al, 1Ah
		jmp	loc_363C
; END OF FUNCTION CHUNK	FOR _$STD_CON_STRING_INPUT
; ---------------------------------------------------------------------------

_$STD_CON_INPUT_STATUS:			; DATA XREF: seg000:0754o
		call	STATCHK
		mov	al, 0
		jz	short locret_377A
		or	al, 0FFh
		retn
; ---------------------------------------------------------------------------

_$STD_CON_INPUT_FLUSH:			; DATA XREF: seg000:0756o
		push	ax
		push	dx
		xor	bx, bx
		call	GET_IO_FCB
		jb	short BADJFNCON
		mov	ah, 4
		call	IOFUNC

BADJFNCON:				; CODE XREF: seg000:37B1j
		pop	dx
		pop	ax
		mov	ah, al
		cmp	al, 1
		jz	short REDISPJ
		cmp	al, 6
		jz	short REDISPJ
		cmp	al, 7
		jz	short REDISPJ
		cmp	al, 8
		jz	short REDISPJ
		cmp	al, 0Ah
		jz	short REDISPJ
		mov	al, 0
		retn
; ---------------------------------------------------------------------------

REDISPJ:				; CODE XREF: seg000:37BEj seg000:37C2j ...
		cli
		jmp	REDISP

; --------------- S U B	R O U T	I N E ---------------------------------------

DATE16:					; CODE XREF: STORE+7p NEWENTRY+5Cp ...
		push	cx
		push	es
		call	READTIME
		pop	es
		shl	cl, 1
		shl	cl, 1
		shl	cx, 1
		shl	cx, 1
		shl	cx, 1
		shr	dh, 1
		or	cl, dh
		mov	dx, cx
		mov	ax, [MONTH]
		mov	cl, 4
		shl	al, cl
		shl	ax, 1
		pop	cx
		or	al, [DAY]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

READTIME:				; CODE XREF: seg000:279Bp seg000:27D8p ...
		push	si
		push	bx
		mov	bx, TIMEBUF
		mov	cx, 6
		xor	dx, dx
		mov	ax, dx
		call	SETREAD
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		pop	si
		mov	ax, [TIMEBUF]
		mov	cx, [TIMEBUF+2]
		mov	dx, [TIMEBUF+4]
		cmp	ax, [DAYCNT]
		jz	short locret_3869
		cmp	ax, 0AB36h ; FOURYEARS*30 = 43830
		jnb	short locret_3869
		mov	[DAYCNT], ax
		push	si
		push	cx
		push	dx
		xor	dx, dx
		mov	cx, 5B5h ; FOURYEARS = 1461 days
		div	cx
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	cx, ax
		mov	si, YRTAB ; 173h
		call	DSLIDE
		shr	cx, 1
		jnb	short loc_384F
		add	dx, 0C8h ; 200

loc_384F:				; CODE XREF: READTIME+4Dj
		call	SETYEAR
		mov	cl, 1
		mov	si, MONTAB ; 17Bh
		call	DSLIDE
		mov	[MONTH], cl
		inc	dx
		mov	[DAY],	dl
		call	WKDAY
		pop	dx
		pop	cx
		pop	si

locret_3869:				; CODE XREF: READTIME+29j READTIME+2Ej
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DSLIDE:					; CODE XREF: READTIME+48p READTIME+5Bp
		mov	ah, 0

loc_386C:				; CODE XREF: DSLIDE+Aj
		lodsb
		cmp	dx, ax
		jb	short locret_3886
		sub	dx, ax
		inc	cx
		jmp	short loc_386C

; --------------- S U B	R O U T	I N E ---------------------------------------

SETYEAR:				; CODE XREF: READTIME:loc_384Fp
					; DODATE+Fp
		mov	byte [YEAR], cl

CHKYR:				; CODE XREF: DODATEp
		test	cl, 3
		mov	al, 28	; 1Ch
		jnz	short loc_3883
		inc	al

loc_3883:				; CODE XREF: SETYEAR+9j
		mov	[MONTAB_february], al

locret_3886:				; CODE XREF: DSLIDE+5j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DODATE:					; CODE XREF: seg000:27D2p
		call	CHKYR
		mov	al, dh
		mov	bx, MONTAB-1 ; 17Ah
		xlat
		cmp	al, dl
		mov	al, 0FFh
		jb	short RET25
		call	SETYEAR
		mov	[DAY], dx
		shr	cx, 1
		shr	cx, 1
		mov	ax, 5B5h ; FOURYEARS, 1461 days
		mov	bx, dx
		mul	cx
		mov	cl, byte [YEAR]
		and	cl, 3
		mov	si, YRTAB ; 173h		mov	dx, ax
		shl	cx, 1
		call	DSUM
		mov	cl, bh
		mov	si, MONTAB ; 17Bh
		dec	cx
		call	DSUM
		mov	cl, bl
		dec	cx
		add	dx, cx
		xchg	ax, dx
		mov	[DAYCNT], ax
		push	si
		push	bx
		push	ax
		mov	bx, TIMEBUF ; 32Dh
		mov	cx, 6
		xor	dx, dx
		mov	ax, dx
		push	bx
		call	SETREAD
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		call	SETWRITE
		pop	word [TIMEBUF]
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		pop	si

WKDAY:					; CODE XREF: READTIME+67p
		mov	ax, [DAYCNT]
		xor	dx, dx
		mov	cx, 7
		inc	ax
		inc	ax
		div	cx
		mov	[WEEKDAY], dl
		xor	al, al

RET25:					; CODE XREF: DODATE+Dj DSUM+2j
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

DSUM:					; CODE XREF: DODATE+2Fp DODATE+38p
		mov	ah, 0
		jcxz	RET25

DSUM1:					; CODE XREF: DSUM+7j
		lodsb
		add	dx, ax
		loop	DSUM1
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

validate_path:				; CODE XREF: seg000:$MKDIRp
					; seg000:$CHDIRp ...
		push	ax
		push	cx
		push	si
		mov	si, dx
		mov	cx, 0FFh
		mov	ax, [si]
		or	al, al
		jz	short loc_394C
		cmp	ah, 3Ah	; ':'
		jnz	short loc_392E
		cmp	byte [si+2], 0
		jz	short loc_394C

loc_392E:				; CODE XREF: validate_path+11j
					; validate_path+29j ...
		lodsb

loc_392F:				; CODE XREF: validate_path+35j
		or	al, al
		jz	short loc_3969
		cmp	al, 3Fh	; '?'
		jz	short loc_3951
		cmp	al, 2Ah	; '*'
		jz	short loc_3951
		call	PATHCHRCMP
		jnz	short loc_392E
		jcxz	loc_394C
		lodsb
		or	al, al
		jz	short loc_3955
		call	PATHCHRCMP
		jnz	short loc_392F

loc_394C:				; CODE XREF: validate_path+Cj
					; validate_path+17j ...
		inc	cx
		or	cx, cx
		jmp	short loc_396D
; ---------------------------------------------------------------------------

loc_3951:				; CODE XREF: validate_path+20j
					; validate_path+24j
		xor	cx, cx
		jmp	short loc_392E
; ---------------------------------------------------------------------------

loc_3955:				; CODE XREF: validate_path+30j
		sub	si, dx
		cmp	si, 2
		jz	short loc_3969
		cmp	si, 4
		jnz	short loc_394C
		mov	si, dx
		cmp	byte [si+1], 3Ah ; ':'
		jnz	short loc_394C

loc_3969:				; CODE XREF: validate_path+1Cj
					; validate_path+45j
		or	cx, cx
		jnz	short loc_396E

loc_396D:				; CODE XREF: validate_path+3Aj
		stc

loc_396E:				; CODE XREF: validate_path+56j
		pop	si
		pop	cx
		pop	ax

locret_3971:				; CODE XREF: access_path+Aj
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

access_path:				; CODE XREF: $OPEN+44p	seg000:$UNLINKp ...
		call	validate_path
		jb	short loc_3984
		mov	si, dx
		call	GETPATH
		jnb	short locret_3971
		mov	al, 2
		or	cl, cl
		jnz	short loc_3986

loc_3984:				; CODE XREF: access_path+3j
		mov	al, 3

loc_3986:				; CODE XREF: access_path+10j
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

Find_free_jfn:				; CODE XREF: $OPEN+1Dp	seg000:3B26p
		push	ax
		push	cx
		mov	al, 0FFh
		mov	es, [ss:CurrentPDB]
		mov	di, 18h
		mov	cx, 14h
		repne scasb
		stc
		jnz	short loc_399E
		dec	di
		clc

loc_399E:				; CODE XREF: Find_free_jfn+12j
		pop	cx
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

Find_free_sfn:				; CODE XREF: $OPEN+2Ep
		push	bx
		push	cx
		les	bx, [ss:SFT_ADDR]
		xor	si, si

loc_39AA:				; CODE XREF: Find_free_sfn+24j
		cmp	bx, 0FFFFh
		jz	short loc_39C7
		mov	di, 6
		mov	cx, [es:bx+4]

VALSEC6:				; CODE XREF: Find_free_sfn+1Fj
		cmp	byte [es:bx+di], 0
		jz	short loc_39CA
		add	di, 28h
		inc	si
		loop	VALSEC6
		les	bx, [es:bx]
		jmp	short loc_39AA
; ---------------------------------------------------------------------------

loc_39C7:				; CODE XREF: Find_free_sfn+Cj
		stc
		jmp	short loc_39CD
; ---------------------------------------------------------------------------

loc_39CA:				; CODE XREF: Find_free_sfn+19j
		add	di, bx
		clc

loc_39CD:				; CODE XREF: Find_free_sfn+27j
		pop	cx
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

_$OPEN:					; CODE XREF: seg000:3062p
					; DATA XREF: seg000:07B8o
		mov	byte [ss:Cr_read_only], 0

loc_39D6:				; CODE XREF: seg000:3B21j
		cmp	al, 2
		jbe	short loc_39DF
		mov	al, 0Ch

loc_39DC:				; CODE XREF: _$OPEN:loc_39F4j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_39DF:				; CODE XREF: _$OPEN+8j
		mov	[ss:open_name+2], ds
		push	ss
		pop	ds
		mov	[open_name], dx
		mov	byte [open_access], al
		call	Find_free_jfn
		jnb	short loc_39F6

loc_39F2:				; CODE XREF: _$OPEN+31j
		mov	al, 4

loc_39F4:				; CODE XREF: _$OPEN:BYTPOS+2Aj
		jmp	short loc_39DC
; ---------------------------------------------------------------------------

loc_39F6:				; CODE XREF: _$OPEN+20j
		mov	[open_jfn_b], es
		mov	[open_jfn], di
		call	Find_free_sfn
		jb	short loc_39F2
		mov	[open_sfn], si
		mov	[open_sfoff], di
		mov	[open_sfn_b], es
		push	ds
		lds	dx, [open_name]
		call	access_path
		pop	ds
		jnb	short open_check_access

oca_retn:				; CODE XREF: _$OPEN+63j
		jmp	short loc_39F4
; ---------------------------------------------------------------------------

open_check_access:				; CODE XREF: _$OPEN+48j
		mov	es, [CURBUF+2]
		mov	byte [open_devid], ah
		test	ah, 80h
		jnz	short loc_3A4D
		mov	al, [es:bx+0Bh]
		test	al, 10h
		jz	short open_try_volid

open_bad_access:			; CODE XREF: _$OPEN+67j _$OPEN+79j
		mov	al, 5
		jmp	short oca_retn
; ---------------------------------------------------------------------------

open_try_volid:				; CODE XREF: _$OPEN+5Fj
		test	al, 8
		jnz	short open_bad_access
		test	al, 1
		jz	short loc_3A4F
		cmp	byte [Cr_read_only], 0
		jnz	short loc_3A4F
		cmp	byte [open_access], 0
		jnz	short open_bad_access
		jmp	short loc_3A4F
; ---------------------------------------------------------------------------

loc_3A4D:				; CODE XREF: _$OPEN+57j
		push	ss
		pop	es

loc_3A4F:				; CODE XREF: _$OPEN+6Bj _$OPEN+72j ...
		mov	cx, 11
		push	si
		mov	si, bx
		mov	di, [open_sfoff]
		push	ds
		push	es
		mov	es, [open_sfn_b]
		pop	ds
		mov	ah, [bx+0Bh]
		mov	[es:di+2], ah
		add	di, 4
		rep movsb
		pop	ds
		pop	si
		les	di, [open_sfoff]
		add	di, 3
		mov	ah, [open_devid]
		call	DOOPEN
		push	ss
		pop	ds
		les	di, [open_sfoff]
		inc	byte [es:di]
		mov	al, [open_access]
		mov	[es:di+1], al
		xor	ax, ax
		mov	[es:di+24h], ax
		mov	[es:di+26h], ax
		inc	ax
		mov	[es:di+11h], ax
		les	di, [open_jfn]
		mov	ax, [open_sfn]
		mov	[es:di], al
		sub	di, 18h
		mov	ax, di

loc_3AAA:				; CODE XREF: seg000:loc_3AE2j
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

_$UNLINK:				; DATA XREF: seg000:07C0o
		call	access_path
		jnb	short loc_3AB5

loc_3AB2:				; CODE XREF: seg000:loc_3AC4j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_3AB5:				; CODE XREF: seg000:3AB0j
		jz	short loc_3AC2
		lds	di, [ss:CURBUF]
		test	byte [bx+0Bh], 1
		jz	short loc_3AC6

loc_3AC2:				; CODE XREF: seg000:loc_3AB5j
		mov	al, 5

loc_3AC4:				; CODE XREF: seg000:loc_3AEBj
		jmp	short loc_3AB2
; ---------------------------------------------------------------------------

loc_3AC6:				; CODE XREF: seg000:3AC0j
		mov	byte [bx], 0E5h ; 'å'
		mov	byte [di+5], 1
		lodsw
		mov	bx, ax
		and	bx, 0FFFh
		push	ss
		pop	ds
		jz	short loc_3ADB
		call	RELEASE

loc_3ADB:				; CODE XREF: seg000:3AD6j
		mov	al, [es:bp]
		call	FLUSHBUF

loc_3AE2:				; CODE XREF: seg000:loc_3B41j
		jmp	short loc_3AAA
; ---------------------------------------------------------------------------

_$CREAT:				; DATA XREF: seg000:07B6o
		call	validate_path
		jnb	short loc_3AED
		mov	al, 3

loc_3AEB:				; CODE XREF: seg000:loc_3B1Dj
		jmp	short loc_3AC4
; ---------------------------------------------------------------------------

loc_3AED:				; CODE XREF: seg000:3AE7j
		push	dx
		push	ds
		push	ss
		pop	ds
		mov	word [CREATING], 0E5FFh
		mov	word [THISFCB+2], ss
		mov	word [THISFCB], AUXSTACK-40 ; 448h
		mov	si, dx
		mov	al, cl
		and	cl, 1
		mov	byte [Cr_read_only], cl
		pop	ds
		push	ds
		call	MAKENODE
		pop	ds
		pop	dx
		or	al, al
		jz	short loc_3B1F
		cmp	al, 3
		jz	short loc_3B1F
		mov	al, 5

loc_3B1D:				; CODE XREF: seg000:loc_3B45j
		jmp	short loc_3AEB
; ---------------------------------------------------------------------------

loc_3B1F:				; CODE XREF: seg000:3B15j seg000:3B19j
		mov	al, 2
		jmp	loc_39D6
; ---------------------------------------------------------------------------

_$DUP:					; DATA XREF: seg000:07C8o
		push	ss
		pop	ds
		call	Find_free_jfn
		jb	short loc_3B43

loc_3B2B:				; CODE XREF: seg000:3B5Bj
		push	es
		push	di
		call	get_sf_from_jfn
		pop	si
		pop	ds
		jb	short loc_3B47
		inc	byte [es:di]
		mov	al, [bx+18h]
		mov	[si], al
		sub	si, 18h
		mov	ax, si

loc_3B41:				; CODE XREF: seg000:loc_3BA0j
		jmp	short loc_3AE2
; ---------------------------------------------------------------------------

loc_3B43:				; CODE XREF: seg000:3B29j
		mov	al, 4

loc_3B45:				; CODE XREF: seg000:loc_3B49j
		jmp	short loc_3B1D
; ---------------------------------------------------------------------------

loc_3B47:				; CODE XREF: seg000:3B32j
		mov	al, 6

loc_3B49:				; CODE XREF: seg000:loc_3B5Fj
		jmp	short loc_3B45
; ---------------------------------------------------------------------------

_$DUP2:					; DATA XREF: seg000:07CAo
		xchg	bx, cx
		push	bx
		push	cx
		call	_$CLOSE
		push	ss
		pop	ds
		pop	cx
		pop	bx
		call	get_jfn_pointer
		xchg	bx, cx
		jnb	short loc_3B2B
		mov	al, 6

loc_3B5F:				; CODE XREF: seg000:loc_3B67j
		jmp	short loc_3B49
; ---------------------------------------------------------------------------

_$CHMOD:				; DATA XREF: seg000:07C4o
		cmp	al, 1
		jbe	short loc_3B69
		mov	al, 1

loc_3B67:				; CODE XREF: seg000:loc_3B75j
		jmp	short loc_3B5F
; ---------------------------------------------------------------------------

loc_3B69:				; CODE XREF: seg000:3B63j
		jb	short loc_3B79
		mov	bx, cx
		and	bx, 0FFD8h
		jz	short loc_3B79
		mov	al, 5

loc_3B75:				; CODE XREF: seg000:loc_3B77j
		jmp	short loc_3B67
; ---------------------------------------------------------------------------

loc_3B77:				; CODE XREF: seg000:3B80j
					; seg000:loc_3BBFj
		jmp	short loc_3B75
; ---------------------------------------------------------------------------

loc_3B79:				; CODE XREF: seg000:loc_3B69j
					; seg000:3B71j
		push	cx
		push	ax
		call	access_path
		pop	dx
		pop	cx
		jb	short loc_3B77
		les	di, [ss:CURBUF]
		push	ss
		pop	ds
		or	dl, dl
		jz	short loc_3BA2
		and	byte [es:bx+0Bh], 0D8h
		or	[es:bx+0Bh], cl
		mov	byte [es:di+5], 1
		mov	al, 0FFh
		call	FLUSHBUF

loc_3BA0:				; CODE XREF: seg000:loc_3BAEj
		jmp	short loc_3B41
; ---------------------------------------------------------------------------

loc_3BA2:				; CODE XREF: seg000:3B8Bj
		xor	cx, cx
		mov	cl, [es:bx+0Bh]
		call	get_user_stack
		mov	[si+4],	cx

loc_3BAE:				; CODE XREF: seg000:3BF9j
		jmp	short loc_3BA0
; ---------------------------------------------------------------------------

_$CURRENT_DIR:				; DATA XREF: seg000:07CCo
		push	ds
		push	bx
		push	si
		call	_$GET_DPB
		cmp	al, 0FFh
		jnz	short current_copy
		pop	ax
		pop	ax
		pop	ax
		mov	al, 0Fh

loc_3BBF:				; CODE XREF: seg000:loc_3C14j
		jmp	short loc_3B77
; ---------------------------------------------------------------------------

current_copy:				; CODE XREF: seg000:3BB8j
		pop	di
		pop	word [si+2]
		pop	bx
		mov	[si+0Eh], bx
		cmp	word [es:bp+1Ch], 0FFFFh
		jnz	short loc_3BDD
		push	bx
		push	di
		mov	byte [ss:ATTRIB], 16h
		call	GETCURRDIR
		pop	di
		pop	bx

loc_3BDD:				; CODE XREF: seg000:3BCEj
		mov	si, bp
		push	es
		pop	ds
		mov	es, bx
		cmp	word [si+1Ch], 0
		jnz	short loc_3BED
		mov	byte [si+1Eh], 0

loc_3BED:				; CODE XREF: seg000:3BE7j
		add	si, 1Eh
		mov	cx, 40h	; '@'

loc_3BF3:				; CODE XREF: seg000:3BF7j
		lodsb
		stosb
		or	al, al
		loopne	loc_3BF3
		jmp	short loc_3BAE
; ---------------------------------------------------------------------------

_$RENAME:				; DATA XREF: seg000:07EAo
		mov	[ss:rename_source], dx
		mov	[ss:rename_source+2], ds
		mov	[ss:rename_dest], di
		mov	[ss:rename_dest+2], es
		call	access_path
		jnb	short loc_3C16

loc_3C14:				; CODE XREF: seg000:loc_3C44j
		jmp	short loc_3BBF
; ---------------------------------------------------------------------------

loc_3C16:				; CODE XREF: seg000:3C12j
		jz	short loc_3C42
		mov	ds, [ss:CURBUF+2]
		push	word [bx+18h]
		push	word [bx+1Ah]
		push	word [bx+1Eh]
		push	word [bx+1Ch]
		push	word [bx+16h]
		push	word [bx+0Bh]
		push	word [ss:THISDRV]
		lds	si, [ss:rename_dest]
		call	GETPATH
		pop	ax
		jb	short loc_3C46

loc_3C3F:				; CODE XREF: seg000:3C71j
		add	sp, 0Ch

loc_3C42:				; CODE XREF: seg000:loc_3C16j
		mov	al, 5

loc_3C44:				; CODE XREF: seg000:loc_3C52j
		jmp	short loc_3C14
; ---------------------------------------------------------------------------

loc_3C46:				; CODE XREF: seg000:3C3Dj
		cmp	al, byte [ss:THISDRV]
		jz	short rename_create
		add	sp, 0Ch
		mov	al, 11h

loc_3C52:				; CODE XREF: seg000:loc_3CB6j
		jmp	short loc_3C44
; ---------------------------------------------------------------------------

rename_create:				; CODE XREF: seg000:3C4Bj
		lds	si, [ss:rename_dest]
		pop	ax
		push	ax
		mov	word [ss:CREATING], 0E5FFh
		mov	[ss:THISFCB+2], ss
		mov	word [ss:THISFCB], AUXSTACK - 40
		call	MAKENODE
		jb	short loc_3C3F
		lds	si, [ss:CURBUF]
		pop	ax
		mov	[bx+0Bh], al
		pop	word [bx+16h]
		pop	word [bx+1Ch]
		pop	word [bx+1Eh]
		pop	word [bx+1Ah]
		pop	word [bx+18h]
		mov	byte [si+5], 1
		lds	si, [ss:rename_source]
		call	GETPATH
		lds	si, [ss:CURBUF]
		mov	byte [bx], 0E5h ; 'å'
		mov	byte [si+5], 1
		push	ss
		pop	ds
		mov	al, 0FFh
		call	FLUSHBUF
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

_$FIND_FIRST:				; DATA XREF: seg000:07DAo
		call	validate_path
		jnb	short loc_3CB8
		jz	short loc_3CB8
		mov	al, 2

loc_3CB6:				; CODE XREF: seg000:3CD4j
		jmp	short loc_3C52
; ---------------------------------------------------------------------------

loc_3CB8:				; CODE XREF: seg000:3CB0j seg000:3CB2j
		mov	si, dx
		push	cx
		inc	byte [ss:NoSetDir]
		mov	word [ss:CREATING], 0E500h
		call	GETPATH
		pop	cx
		mov	byte [ss:ATTRIB], cl

loc_3CD0:				; CODE XREF: seg000:3DA0j
		jnb	short loc_3CD6
		mov	al, 12h
		jmp	short loc_3CB6
; ---------------------------------------------------------------------------

loc_3CD6:				; CODE XREF: seg000:loc_3CD0j
		mov	ds, [ss:CURBUF+2]
		mov	ch, [bx+0Bh]
		call	MatchAttributes
		jz	short found_it
		push	word [ss:LASTENT]
		mov	bx, [ss:DIRSTART]
		jmp	loc_3D90
; ---------------------------------------------------------------------------

found_it:				; CODE XREF: seg000:3CE1j
		les	di, [ss:DMAADD]
		mov	al, byte [ss:ATTRIB]
		stosb
		mov	al, byte [ss:THISDRV]
		stosb
		mov	cx, 11
		push	bx
		mov	si, NAME1
		push	ds
		push	ss
		pop	ds
		rep movsb
		pop	ds
		mov	ax, [ss:LASTENT]
		stosw
		mov	ax, [ss:THISDPB]
		stosw
		mov	ax, [ss:THISDPB+2]
		stosw
		mov	ax, [ss:DIRSTART]
		stosw
		mov	al, [bx+0Bh]
		stosb
		mov	ax, [bx+16h]
		stosw
		mov	ax, [bx+18h]
		stosw
		mov	ax, [bx+1Ch]
		stosw
		mov	ax, [bx+1Eh]
		stosw
		pop	si
		mov	cx, 8

loc_3D38:				; CODE XREF: seg000:3D3Cj
		lodsb
		stosb
		cmp	al, 20h	; ' '
		loopne	loc_3D38
		jnz	short loc_3D41
		dec	di

loc_3D41:				; CODE XREF: seg000:3D3Ej
		add	si, cx
		cmp	byte [si], 20h ; ' '
		jz	short loc_3D57
		mov	al, 2Eh	; '.'
		stosb
		mov	cx, 3

loc_3D4E:				; CODE XREF: seg000:3D52j
		lodsb
		stosb
		cmp	al, 20h	; ' '
		loopne	loc_3D4E
		jnz	short loc_3D57
		dec	di

loc_3D57:				; CODE XREF: seg000:3D46j seg000:3D54j
		xor	al, al
		stosb
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

_$FIND_NEXT:				; DATA XREF: seg000:07DCo
		lds	si, [ss:DMAADD]
		mov	dx, si
		inc	dx
		push	si
		call	MOVNAMENOSET
		pop	si
		jnb	short loc_3D71

loc_3D6C:				; CODE XREF: seg000:3D79j
		mov	al, 12h
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_3D71:				; CODE XREF: seg000:3D6Aj
		mov	ax, [si+0Dh]
		les	bp, [si+0Fh]
		or	ax, ax
		js	short loc_3D6C
		mov	bx, [si+13h]
		mov	dl, [si]
		mov	byte [ss:ATTRIB], dl
		push	ax
		mov	[ss:THISDPB], bp
		mov	[ss:THISDPB+2], es

loc_3D90:				; CODE XREF: seg000:3CEDj
		call	SETDIRSRCH
		pop	ax
		mov	word [ENTLAST], -1
		call	GETENT
		call	NEXTENT
		jmp	loc_3CD0

; --------------- S U B	R O U T	I N E ---------------------------------------

get_sf_from_sfn:			; CODE XREF: get_sf_from_jfn+Fp
					; _$CLOSE+19p
		push	ax
		les	di, [SFT_ADDR]

loc_3DA8:				; CODE XREF: get_sf_from_sfn+13j
		cmp	di, 0FFFFh
		jz	short loc_3DCB
		sub	ax, [es:di+4]
		jl	short loc_3DB8
		les	di, [es:di]
		jmp	short loc_3DA8
; ---------------------------------------------------------------------------

loc_3DB8:				; CODE XREF: get_sf_from_sfn+Ej
		add	ax, [es:di+4]
		push	bx
		mov	bx, 28h
		mul	bl
		pop	bx
		add	ax, 6
		add	di, ax
		clc
		jmp	short loc_3DCC
; ---------------------------------------------------------------------------

loc_3DCB:				; CODE XREF: get_sf_from_sfn+8j
					; get_sf_from_jfn+4j ...
		stc

loc_3DCC:				; CODE XREF: get_sf_from_sfn+26j
					; get_sf_from_jfn+12j
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

get_sf_from_jfn:			; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+37p
					; SWAPBACK+7p ...
		push	ax
		call	get_jfn_pointer
		jb	short loc_3DCB
		mov	al, [es:di]
		cmp	al, 0FFh
		jz	short loc_3DCB
		xor	ah, ah
		call	get_sf_from_sfn
		jmp	short loc_3DCC

; --------------- S U B	R O U T	I N E ---------------------------------------

get_jfn_pointer:			; CODE XREF: _$CREATE_PROCESS_DATA_BLOCK+30p
					; seg000:3B56p	...
		cmp	bx, 20 ; FILPERPROC
		jnb	short loc_3DF2
		mov	es, [CurrentPDB]
		mov	di, bx
		add	di, 18h
		clc
		retn
; ---------------------------------------------------------------------------

loc_3DF2:				; CODE XREF: get_jfn_pointer+3j
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

_$CLOSE:				; CODE XREF: FATALC+A4p seg000:314Fp ...

; FUNCTION CHUNK AT 089D SIZE 0000001B BYTES

		push	ss
		pop	ds
		call	get_jfn_pointer
		jnb	short loc_3E00

loc_3DFB:				; CODE XREF: _$CLOSE+11j _$CLOSE+1Cj
		mov	al, 6

loc_3DFD:				; CODE XREF: _$CLOSE:loc_3E34j
		jmp	SYS_RET_ERR
; ---------------------------------------------------------------------------

loc_3E00:				; CODE XREF: _$CLOSE+5j
		mov	al, [es:di]
		cmp	al, 0FFh
		jz	short loc_3DFB
		mov	byte [es:di], 0FFh
		xor	ah, ah
		call	get_sf_from_sfn
		jb	short loc_3DFB
		push	es
		pop	ds
		dec	byte [di]
		lea	dx, [di+3]
		test	byte [di+1Bh], 0C0h
		jnz	short loc_3E36
		push	word [di+2]
		call	MOVNAMENOSET
		pop	bx
		mov	byte [ss:ATTRIB], bl
		call	FCB_CLOSE_INNER
		cmp	al, 0FFh
		jnz	short loc_3E36
		mov	al, 2

loc_3E34:				; CODE XREF: _$READ:loc_3EA8j
		jmp	short loc_3DFD
; ---------------------------------------------------------------------------

loc_3E36:				; CODE XREF: _$CLOSE+29j _$CLOSE+3Cj
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

PushDMA:				; CODE XREF: _$READp seg000:_$WRITEp
		mov	[ss:PushES], es
		mov	[ss:PushBX], bx
		pop	word [ss:PushSave]
		les	bx, [ss:DMAADD]
		push	es
		push	bx
		push	word [ss:PushSave]
		call	ptr_normalize
		mov	[ss:DMAADD], dx
		mov	[ss:DMAADD+2], ds
		mov	es, [ss:PushES]
		mov	bx, [ss:PushBX]
		retn
; ---------------------------------------------------------------------------

PopDMA:					; CODE XREF: _$READ:loc_3EA5p _$READ+27p
		pop	word [ss:PushSave]
		pop	word [ss:DMAADD]
		pop	word [ss:DMAADD+2]
		push	word [ss:PushSave]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

ptr_normalize:				; CODE XREF: seg000:3E54p
		push	cx
		push	dx
		mov	cl, 4
		shr	dx, cl
		mov	cx, ds
		add	cx, dx
		mov	ds, cx
		pop	dx
		and	dx, 0Fh
		pop	cx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

_$READ:					; CODE XREF: seg000:30EDp seg000:31FAp ...
		call	PushDMA
		call	IO_setup
		jb	short loc_3EA5
		cmp	byte [es:di+1], 1
		jnz	short loc_3EAA

loc_3EA3:				; CODE XREF: seg000:3ECEj
		mov	al, 5

loc_3EA5:				; CODE XREF: _$READ+6j seg000:3EC7j
		call	PopDMA

loc_3EA8:				; CODE XREF: _$LSEEK:loc_3EF0j
		jmp	short loc_3E34
; ---------------------------------------------------------------------------

loc_3EAA:				; CODE XREF: _$READ+Dj
		call	_$FCB_RANDOM_READ_BLOCK

loc_3EAD:				; CODE XREF: seg000:3ED3j
		call	get_user_stack
		mov	ax, [si+4]
		mov	cx, [ss:xenix_count]
		mov	[si+4],	cx
		call	PopDMA

loc_3EBE:				; CODE XREF: _$LSEEK:loc_3F2Bj
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

_$WRITE:				; DATA XREF: seg000:07BEo
		call	PushDMA
		call	IO_setup
		jb	short loc_3EA5
		cmp	byte [es:di+1], 0
		jz	short loc_3EA3
		call	_$FCB_RANDOM_WRITE_BLOCK
		jmp	short loc_3EAD

; --------------- S U B	R O U T	I N E ---------------------------------------

IO_setup:				; CODE XREF: _$READ+3p seg000:3EC4p
		push	ss
		pop	ds
		mov	[xenix_count],cx
		call	get_sf_from_jfn
		mov	al, 6
		mov	cx, [xenix_count]
		lea	dx, [di+3]
		push	es
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

_$LSEEK:				; CODE XREF: seg000:31CFp seg000:323Fp ...
		cmp	al, 3
		jb	short loc_3EF2
		mov	al, 1

loc_3EF0:				; CODE XREF: _$LSEEK:loc_3F3Aj
		jmp	short loc_3EA8
; ---------------------------------------------------------------------------

loc_3EF2:				; CODE XREF: _$LSEEK+2j
		push	ss
		pop	ds
		call	get_sf_from_jfn
		push	es
		pop	ds
		jb	short loc_3F38
		test	byte [di+1Bh], 80h
		jz	short loc_3F07
		xor	ax, ax
		xor	dx, dx
		jmp	short loc_3F1D
; ---------------------------------------------------------------------------

loc_3F07:				; CODE XREF: _$LSEEK+15j
		dec	al
		jl	short loc_3F1A
		dec	al
		jl	short loc_3F2D
		xchg	ax, dx
		xchg	dx, cx
		add	ax, [di+13h]
		adc	dx, [di+15h]
		jmp	short loc_3F1D
; ---------------------------------------------------------------------------

loc_3F1A:				; CODE XREF: _$LSEEK+1Fj
		xchg	ax, dx
		xchg	dx, cx

loc_3F1D:				; CODE XREF: _$LSEEK+1Bj _$LSEEK+2Ej ...
		mov	[di+24h], ax
		mov	[di+26h], dx
		call	get_user_stack
		mov	[si+6],	dx
		mov	[si], ax

loc_3F2B:				; CODE XREF: _$IOCTL:loc_3F6Bj
		jmp	short loc_3EBE
; ---------------------------------------------------------------------------

loc_3F2D:				; CODE XREF: _$LSEEK+23j
		xchg	ax, dx
		xchg	dx, cx
		add	ax, [di+24h]
		adc	dx, [di+26h]
		jmp	short loc_3F1D
; ---------------------------------------------------------------------------

loc_3F38:				; CODE XREF: _$LSEEK+Fj
		mov	al, 6

loc_3F3A:				; CODE XREF: _$IOCTL:loc_3F4Dj
		jmp	short loc_3EF0

; --------------- S U B	R O U T	I N E ---------------------------------------

_$IOCTL:				; CODE XREF: seg000:306Fp
					; DATA XREF: seg000:07C6o
		mov	si, ds
		push	ss
		pop	ds
		cmp	al, 3
		ja	short loc_3F94
		push	dx
		call	get_sf_from_jfn
		pop	dx
		jnb	short loc_3F4F
		mov	al, 6

loc_3F4D:				; CODE XREF: _$IOCTL:loc_3F61j
		jmp	short loc_3F3A
; ---------------------------------------------------------------------------

loc_3F4F:				; CODE XREF: _$IOCTL+Dj
		cmp	al, 2
		jnb	short loc_3F85
		cmp	al, 0
		mov	al, [es:di+1Bh]
		jz	short loc_3F6D
		or	dh, dh
		jz	short loc_3F63
		mov	al, 0Dh

loc_3F61:				; CODE XREF: _$IOCTL:loc_3FBEj
		jmp	short loc_3F4D
; ---------------------------------------------------------------------------

loc_3F63:				; CODE XREF: _$IOCTL+21j
		test	al, 80h
		jz	short loc_3FBC
		mov	[es:di+1Bh], dl

loc_3F6B:				; CODE XREF: _$IOCTL:loc_3F83j
		jmp	short loc_3F2B
; ---------------------------------------------------------------------------

loc_3F6D:				; CODE XREF: _$IOCTL+1Dj
		xor	ah, ah
		test	al, 80h
		jz	short loc_3F7B
		les	di, [es:di+1Ch]
		mov	ah, [es:di+5]

loc_3F7B:				; CODE XREF: _$IOCTL+35j
		call	get_user_stack
		mov	dx, ax
		mov	[si+6],	dx

loc_3F83:				; CODE XREF: _$IOCTL:loc_3FBAj
		jmp	short loc_3F6B
; ---------------------------------------------------------------------------

loc_3F85:				; CODE XREF: _$IOCTL+15j
		test	byte [es:di+1Bh], 80h
		jz	short loc_3FBC
		les	di, [es:di+1Ch]
		xor	bl, bl
		jmp	short loc_3FE1
; ---------------------------------------------------------------------------

loc_3F94:				; CODE XREF: _$IOCTL+6j
		dec	al
		dec	al
		cmp	al, 3
		jbe	short loc_3FC4
		mov	ah, 1
		sub	al, 4
		jz	short loc_3FA8
		mov	ah, 3
		dec	al
		jnz	short loc_3FBC

loc_3FA8:				; CODE XREF: _$IOCTL+64j
		push	ax
		call	GET_IO_FCB
		pop	ax
		jb	short loc_3FC0
		call	IOFUNC
		mov	ah, al
		mov	al, 0FFh
		jnz	short loc_3FBA
		inc	al

loc_3FBA:				; CODE XREF: _$IOCTL+7Aj
					; $IOCTL:loc_4026j
		jmp	short loc_3F83
; ---------------------------------------------------------------------------

loc_3FBC:				; CODE XREF: _$IOCTL+29j _$IOCTL+4Ej ...
		mov	al, 1

loc_3FBE:				; CODE XREF: _$IOCTL:loc_3FC2j
		jmp	short loc_3F61
; ---------------------------------------------------------------------------

loc_3FC0:				; CODE XREF: $IOCTL+71j $IOCTL+A3j
		mov	al, 5

loc_3FC2:				; CODE XREF: seg000:loc_402Ej
		jmp	short loc_3FBE
; ---------------------------------------------------------------------------

loc_3FC4:				; CODE XREF: _$IOCTL+5Ej
		push	cx
		push	dx
		push	ax
		push	si
		mov	al, bl
		call	GETTHISDRV
		jb	short loc_3FDB
		call	FATREAD
		mov	bl, [es:bp+1]
		les	di, [es:bp+12h]
		clc

loc_3FDB:				; CODE XREF: _$IOCTL+91j
		pop	si
		pop	ax
		pop	dx
		pop	cx
		jb	short loc_3FC0

loc_3FE1:				; CODE XREF: _$IOCTL+56j
		test	word [es:di+4], 4000h
		jz	short loc_3FBC
		dec	al
		dec	al
		jz	short loc_3FF6
		mov	byte [IOCALL_REQFUNC], 0Ch
		jmp	short loc_3FFB
; ---------------------------------------------------------------------------

loc_3FF6:				; CODE XREF: _$IOCTL+B1j
		mov	byte [IOCALL_REQFUNC], 3

loc_3FFB:				; CODE XREF: _$IOCTL+B8j
		mov	al, 16h
		mov	ah, bl
		mov	[IOCALL], ax
		xor	ax, ax
		mov	[IOCALL_REQSTAT], ax
		mov	[IOMED], al
		mov	[IOSCNT], cx
		mov	[IOXAD], dx
		mov	[IOXAD+2], si
		push	es
		pop	ds
		mov	si, di
		push	ss
		pop	es
		mov	bx, IOCALL ; 147h
		call	DEVIOCALL2
		mov	ax, [ss:IOSCNT]

loc_4026:				; CODE XREF: seg000:loc_4050j
		jmp	short loc_3FBA

; ---------------------------------------------------------------------------

_$FILE_TIMES:				; DATA XREF: seg000:07ECo
		cmp	al, 2
		jb	short loc_4030
		mov	al, 1

loc_402E:				; CODE XREF: seg000:4039j
		jmp	short loc_3FC2
; ---------------------------------------------------------------------------

loc_4030:				; CODE XREF: seg000:402Aj
		push	ss
		pop	ds
		call	get_sf_from_jfn
		jnb	short loc_403B
		mov	al, 6
		jmp	short loc_402E
; ---------------------------------------------------------------------------

loc_403B:				; CODE XREF: seg000:4035j
		or	al, al
		jnz	short loc_4052
		mov	cx, [es:di+19h]
		mov	dx, [es:di+17h]
		call	get_user_stack
		mov	[si+4],	cx
		mov	[si+6],	dx

loc_4050:				; CODE XREF: seg000:405Fj
		jmp	short loc_4026
; ---------------------------------------------------------------------------

loc_4052:				; CODE XREF: seg000:403Dj
		mov	[es:di+19h], cx
		mov	[es:di+17h], dx
		and	byte [es:di+1Bh], 0BFh
		jmp	short loc_4050
; ---------------------------------------------------------------------------

DOSINIT:
SYSBUF:					; CODE XREF: seg000:0j
					; DATA XREF: seg000:414Eo ...
		cli
		cld
		mov	[cs:ENDMEM], dx
		mov	[cs:INITSP], sp
		mov	[cs:INITSS], ss
		mov	sp, INITSTACK
		mov	ax, cs
		mov	ss, ax
		mov	[ss:DEVHEAD+2], ds
		mov	[ss:DEVHEAD], si
		call	CHARINIT
		push	si
		add	si, 10
		push	cs
		pop	es
		mov	di, 0Dh
		mov	al, 3
		stosb
		dec	al
		stosb
		xor	al, al
		stosb
		stosb
		mov	cx, 4
		rep movsw
		mov	cl, 3
		mov	al, 20h	; ' '
		rep stosb
		add	di, 12
		mov	al, 0C3h
		stosb
		pop	si
		mov	ax, si
		stosw
		mov	ax, ds
		stosw
		or	byte [si+4], 3
		mov	[ss:BCON], si
		mov	[ss:BCON+2], ds

CHAR_INIT_LOOP:				; CODE XREF: seg000:40C8j
		lds	si, [si]
		call	CHARINIT
		test	byte [si+4], 8
		jz	short CHAR_INIT_LOOP
		mov	[ss:BCLOCK], si
		mov	[ss:BCLOCK+2], ds
		mov	bp, MEMSTRT

PERDRV:					; CODE XREF: seg000:40E6j seg000:4144j
		lds	si, [si]
		cmp	si, -1
		jz	short CONTINIT
		call	CHARINIT
		test	word [si+4], 8000h
		jnz	short PERDRV
		mov	cl, [ss:CALLUNIT]
		xor	ch, ch
		mov	[si+0Ah], cl
		mov	dl, [ss:NUMIO]
		xor	dh, dh
		add	[ss:NUMIO], cl
		push	ds
		push	si
		lds	bx, [ss:CALLBPB]

PERUNIT:				; CODE XREF: seg000:4140j
		mov	si, [bx]
		inc	bx
		inc	bx
		mov	[es:bp], dl
		mov	[es:bp+1], dh
		push	bx
		push	cx
		push	dx
		call	_$SETDPB
		mov	ax, [es:bp+2]
		cmp	ax, [ss:MAXSEC]
		jbe	short NOTMAX
		mov	[ss:MAXSEC], ax

NOTMAX:					; CODE XREF: seg000:4120j
		pop	dx
		pop	cx
		pop	bx
		mov	ax, ds
		pop	si
		pop	ds
		mov	[es:bp+12h], si
		mov	[es:bp+14h], ds
		push	ds
		push	si
		inc	dh
		inc	dl
		mov	ds, ax
		add	bp, 94	; 5Eh ; DPBSIZ
		loop	PERUNIT
		pop	si
		pop	ds
		jmp	short PERDRV
; ---------------------------------------------------------------------------

CONTINIT:				; CODE XREF: seg000:40DCj
		push	cs
		pop	ds
		mov	di, bp
		mov	bp, [MAXSEC]
		mov	ax, SYSBUF
		mov	[BUFFSTRT], ax
		add	ax, bp
		add	ax, 10h
		mov	[DPBHEAD], ax
		mov	dx, ax
		sub	dx, SYSBUF
		mov	bp, dx
		add	bp, di
		sub	bp, ADJFAC
		push	bp
		mov	di, MEMSTRT
		add	di, 18h
		mov	cl, [NUMIO]
		xor	ch, ch

TRUEDPBAD:				; CODE XREF: seg000:417Ej
		add	ax, 94	; 5Eh	; DPBSIZ'
		stosw
		add	di, 92	; 5Ch	; DPBSIZ-2
		loop	TRUEDPBAD
		sub	di, 94	; 5Eh	; DPBSIZ
		mov	ax, -1
		stosw
		add	bp, 15
		mov	cl, 4
		shr	bp, cl
		mov	dx, cs
		add	dx, bp
		mov	bx, 0Fh ; ??
		mov	cx, [ENDMEM]
		mov	bp, cs
		mov	[ENDMEM], cx
		mov	es, bp
		mov	[es:DSKCHRET+3], es
		xor	ax, ax
		mov	ds, ax
		mov	es, ax
		mov	di, 82h	; INTBASE+2
		mov	ax, bp
		mov	byte [ENTRYPOINT], 0EAh
		mov	word [ENTRYPOINT+1], CALL_ENTRY
		mov	[ENTRYPOINT+3], ax
		mov	word [0], DIVOV
		mov	[2], ax
		mov	cx, 17
		rep stosw
		mov	word [addr_int_abort], QUIT
		mov	word [addr_int_command], COMMAND
		mov	word [addr_int_terminate], 100h
		mov	word [addr_int_terminate+2], dx
		mov	word [addr_int_ctrl_c], _IRET
		mov	word [addr_int_fatal_abort], _IRET
		mov	word [addr_int_disk_read], ABSDRD
		mov	word [addr_int_disk_write], ABSDWRT
		mov	word [addr_int_keep_process], Stay_resident
		mov	word [addr_int_spooler], _IRET
		mov	cx, 12
		xor	ax, ax
		mov	di, 0A8h ; 2Ah*4
		rep stosw
		push	cs
		pop	ds
		push	cs
		pop	es
		mov	ax, INITBLOCK
		add	ax, 0Fh
		mov	cl, 4
		shr	ax, cl
		mov	di, ds
		add	di, ax
		inc	di
		mov	[CurrentPDB], di
		push	bp
		push	dx
		mov	ax, [ENDMEM]
		mov	dx, di
		call	SETMEM
		push	cs
		pop	ds
		mov	di, 18h
		xor	ax, ax
		stosw
		stosb
		mov	al, 0FFh
		mov	cx, 17	; FILPERPROC - 3
		rep stosb
		push	cs
		pop	es
		mov	[SFT_ADDR+2], ds
		mov	si, HEADER ; "\r\nMicrosoft MS-DOS version 2.11\r\nCopyri"...
		call	OUTMES
		push	cs
		pop	ds
		push	cs
		pop	es
		pop	dx
		pop	bp
		pop	cx
		mov	si, MEMSTRT
		mov	di, [DPBHEAD]
		sub	cx, di
		cmp	di, si
		jbe	short MOVJMP
		dec	cx
		add	di, cx
		add	si, cx
		inc	cx
		std

MOVJMP:					; CODE XREF: seg000:4260j
		mov	es, bp
		jmp	MOVDPB

; --------------- S U B	R O U T	I N E ---------------------------------------

CHARINIT:				; CODE XREF: seg000:4083p seg000:40C1p ...
		mov	byte [ss:DEVCALL], 1Ah
		mov	byte [ss:DEVCALL_REQUNIT], 0
		mov	byte [ss:DEVCALL_REQFUNC], 0
		mov	word [ss:DEVCALL_REQSTAT], 0
		push	es
		push	bx
		push	ax
		mov	bx, DEVCALL
		push	cs
		pop	es
		call	DEVIOCALL2
		pop	ax
		pop	bx
		pop	es
		retn

; ---------------------------------------------------------------------------

align 2
		times	64 dw 0

INITSTACK	dw	0		; DATA XREF: seg000:4072o
MEMSTRT		equ	$		; DATA XREF: seg000:40D4o seg000:416Bo ...
ADJFAC		equ	MEMSTRT-SYSBUF
