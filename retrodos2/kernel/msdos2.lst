     1                                  ; ****************************************************************************
     2                                  ; MSDOS2.BIN (MSDOS 2.0 Kernel) - RETRO DOS v2.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 18/07/2018
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 24/02/2018 
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.11  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm msdos2.s -l msdos2.lst -o MSDOS2.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    13                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    14                                  ; ****************************************************************************
    15                                  ; main file: 'retrodos2.s'
    16                                  ; incbin 'MSDOS2.BIN' ; (DOSGROUP CODE SEGMENT)
    17                                  
    18                                  ; MSDOS 2.0 Kernel source files:
    19                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    20                                  ;	MSCODE.ASM
    21                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    22                                  
    23                                  ;============================================================================
    24                                  ; DOSLINK
    25                                  ;============================================================================
    26                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    27                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    28                                  ;stdio time xenix xenix2
    29                                  
    30                                  ;============================================================================
    31                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    32                                  ; output in TASM syntax (16/04/2018..18/04/2018 -> NASM syntax)
    33                                  ;============================================================================
    34                                  ; MSDOS2.ASM - MSDOS 2.11 KERNEL SOURCE CODE - Erdogan Tan, 18/04/2018
    35                                  ; 						(Assembler: NASM 2.11)
    36                                  ;
    37                                  ; ###########################################################################
    38                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    39                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    40                                  ; #			 Licensed to: Freeware version			    #
    41                                  ; ###########################################################################
    42                                  ;
    43                                  ; Input	MD5   :	1D55763C742AEA72C3B64A0E8564E585
    44                                  
    45                                  ; ---------------------------------------------------------------------------
    46                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\IBMDOS.COM
    47                                  ; Format      :	Binary file
    48                                  ; Base Address:	0000h Range: 0000h - 4318h Loaded length: 4318h
    49                                  ;============================================================================
    50                                  
    51                                  
    52                                  ;============================================================================
    53                                  ; MSDOS.ASM
    54                                  ;============================================================================
    55                                  
    56                                  ;TITLE   Standard MSDOS
    57                                  ;NAME    MSDOS_2
    58                                  
    59                                  ; Number of disk I/O buffers
    60                                  
    61                                  ;	INCLUDE STDSW.ASM
    62                                  ;       INCLUDE MSHEAD.ASM
    63                                  ;       INCLUDE MSDATA.ASM
    64                                  
    65                                  ;	END
    66                                  
    67                                  ;============================================================================
    68                                  ; STDSW.ASM
    69                                  ;============================================================================
    70                                  
    71                                  TRUE    EQU     0FFFFH
    72                                  FALSE   EQU     ~TRUE ; NOT TRUE
    73                                  
    74                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    75                                  ; version of the operating system
    76                                  ;MSVER   EQU     false
    77                                  ;IBM     EQU     true
    78                                  ;WANG    EQU     FALSE
    79                                  ;ALTVECT EQU     FALSE
    80                                  
    81                                  ; Set this switch to cause DOS to move itself to the end of memory
    82                                  ;HIGHMEM EQU     FALSE
    83                                  
    84                                  ;	IF      IBM
    85                                  ESCCH   EQU     0			; character to begin escape seq.
    86                                  CANCEL  EQU     27
    87                                  TOGLINS EQU     TRUE			;One key toggles insert mode
    88                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
    89                                  ZEROEXT EQU     TRUE
    90                                  ;       ELSE
    91                                  ;       IF      WANG			;Are we assembling for WANG?
    92                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
    93                                  ;       ELSE
    94                                  ;ESCCH   EQU     1BH
    95                                  ;       ENDIF
    96                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
    97                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
    98                                  					;and off if not WANG
    99                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   100                                  					;and off
   101                                  ;ZEROEXT EQU     TRUE
   102                                  ;        ENDIF
   103                                  
   104                                  ;============================================================================
   105                                  ; MSHEAD.ASM
   106                                  ;============================================================================
   107                                  
   108                                  ;--------------------------------------------------------------
   109                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   110                                  ;--------------------------------------------------------------
   111                                  
   112                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   113                                  ;        by Microsoft MSDOS development group:
   114                                  ;           Tim Paterson (Ret.)
   115                                  ;           Aaron Reynolds
   116                                  ;           Nancy Panners (Parenting)
   117                                  ;           Mark Zbikowski
   118                                  ;           Chris Peters (BIOS) (ret.)
   119                                  
   120                                  ; ****************** Revision History *************************
   121                                  ;          >> EVERY change must noted below!! <<
   122                                  ;
   123                                  ; 0.34 12/29/80 General release, updating all past customers
   124                                  ; 0.42 02/25/81 32-byte directory entries added
   125                                  ; 0.56 03/23/81 Variable record and sector sizes
   126                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   127                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   128                                  ; 0.75 04/17/81 Improve and correct buffer handling
   129                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   130                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   131                                  ; 1.00 04/28/81 Renumber for general release
   132                                  ; 1.01 05/12/81 Fix bug in `STORE'
   133                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   134                                  ;               RENAME fix, general cleanup
   135                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   136                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   137                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   138                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   139                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   140                                  ;               of smaller improvements
   141                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   142                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   143                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   144                                  ;               zero extent field in IBM version (back to 1.01!)
   145                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   146                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   147                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   148                                  ;               is searched first when possible to minimize I/O
   149                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   150                                  ;               full sector write when file is growing
   151                                  ;      03/09/82 Multiple I/O buffers
   152                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   153                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   154                                  ;               must invalidate all buffers (disk and directory).
   155                                  ; 1.27 03/31/82 Installable device drivers
   156                                  ;                 Function call 47 - Get pointer to device table list
   157                                  ;                 Function call 48 - Assign CON AUX LIST
   158                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   159                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   160                                  ;               call entries.  Most CS relative references changed to SS
   161                                  ;               relative with an eye toward putting a portion of the DOS in
   162                                  ;               ROM.  DOS source also broken into header, data and code pieces
   163                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   164                                  ;               return the current values.
   165                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   166                                  ;               call to return flag location (call 29)
   167                                  ;      04/15/82 Volume ID attribute added
   168                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   169                                  ;               avoid a CS relative reference.
   170                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   171                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   172                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   173                                  ;               call 49.
   174                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   175                                  ;               address of DPB
   176                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   177                                  ;               writting to console device via file I/O.  Added a console
   178                                  ;               output attribute to devices.
   179                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   180                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   181                                  ;               as devices....  pipes, redirection now possible
   182                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   183                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   184                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   185                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   186                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   187                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   188                                  ;               out back about 1.27 or so (oops).  ARR
   189                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   190                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   191                                  ;               RMDIR Xenix calls
   192                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   193                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   194                                  ;               Frees up lots of memory.
   195                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   196                                  ;               system buffers
   197                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   198                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   199                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   200                                  ;               changed to set file handle environment.
   201                                  ; 2.00 08/01/82 Number for IBM release
   202                                  ;      01/19/83 No environ bug in EXEC
   203                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   204                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   205                                  ;      01/27/83 Growcnt fixed for 32-bits
   206                                  ;      01/27/83 Find-first problem after create
   207                                  ; 2.01 02/17/83 International DOS
   208                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   209                                  ;               an IBM PC
   210                                  ;
   211                                  ; *************************************************************
   212                                  
   213                                  ; ----------------------------------------------------------------------------
   214                                  ; EQUATES
   215                                  
   216                                  ; Interrupt Entry Points:
   217                                  
   218                                  ; INTBASE:      ABORT
   219                                  ; INTBASE+4:    COMMAND
   220                                  ; INTBASE+8:    BASE EXIT ADDRESS
   221                                  ; INTBASE+C:    CONTROL-C ABORT
   222                                  ; INTBASE+10H:  FATAL ERROR ABORT
   223                                  ; INTBASE+14H:  BIOS DISK READ
   224                                  ; INTBASE+18H:  BIOS DISK WRITE
   225                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   226                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   227                                  ; INTBASE+40H:  Long jump to CALL entry point
   228                                  
   229                                  ENTRYPOINTSEG   EQU     0CH
   230                                  MAXDIF          EQU     0FFFH
   231                                  SAVEXIT         EQU     10
   232                                  
   233                                         ; INCLUDE DOSSYM.ASM
   234                                         ; INCLUDE DEVSYM.ASM
   235                                  
   236                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   237                                  ; PAGE
   238                                  ; There are three kinds of context resets that can occur during normal DOS
   239                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   240                                  ; be handles in a clean fashion that allows nested executions along with the
   241                                  ; ability to trap one's own errors.
   242                                  ;
   243                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   244                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   245                                  ;           follows:
   246                                  ;
   247                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   248                                  ;           Save it in static memory.
   249                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   250                                  ;
   251                                  ;           The interrupt service routine must preserve all registers and
   252                                  ;           return carry set iff the operation is to be aborted (via abort
   253                                  ;           system call), otherwise, carry is reset and the operation is
   254                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   255                                  ;           RESULTS.
   256                                  ;
   257                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   258                                  ;           restore INT int_ctrl_c from the saved vector.
   259                                  ;
   260                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   261                                  ;           also preserve registers and return one of three values in AL: 0 and
   262                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   263                                  ;           himself is not to issue the abort, rather, the dos will do it for
   264                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   265                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   266                                  ;
   267                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   268                                  ;           abort call.  This is reserved for knowledgeable system programs.
   269                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   270                                  
   271                                  ;SUBTTL SEGMENT DECLARATIONS
   272                                  
   273                                  ; The following are all of the segments used.  They are declared in the order
   274                                  ; that they should be placed in the executable
   275                                  
   276                                  ;
   277                                  ; segment ordering for MSDOS
   278                                  ;
   279                                  
   280                                  ;START           SEGMENT BYTE PUBLIC 'START'
   281                                  ;START           ENDS
   282                                  
   283                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   284                                  ;CONSTANTS       ENDS
   285                                  
   286                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   287                                  ;DATA            ENDS
   288                                  
   289                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   290                                  ;CODE            ENDS
   291                                  
   292                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   293                                  ;LAST            ENDS
   294                                  
   295                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   296                                  
   297                                  ; The following segment is defined such that the data/const classes appear
   298                                  ; before the code class for ROMification
   299                                  
   300                                  ;START		SEGMENT BYTE PUBLIC 'START'
   301                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   302                                  ;		JMP     DOSINIT
   303                                  ;START		ENDS
   304                                  
   305                                  ;============================================================================
   306                                  ; DOSSYM.ASM
   307                                  ;============================================================================
   308                                  
   309                                  ;<Control character definitions>
   310                                  
   311                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   312                                  c_BS        EQU     08h         ; ^H ASCII backspace
   313                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   314                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   315                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   316                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   317                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   318                                  c_HT        EQU     09h         ; ^I ASCII tab
   319                                  
   320                                  ;<BPB Definition>
   321                                  
   322                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   323                                  ;                                                                          ;
   324                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   325                                  ;                                                                          ;
   326                                  ; Certain structures, constants and system  calls  below  are  private  to ;
   327                                  ; the DOS  and  are  extremely  version-dependent.  They may change at any ;
   328                                  ; time at  the  implementors'  whim.   As  a  result,  they  must  not  be ;
   329                                  ; documented to  the  general  public.   If  an  extreme case arises, they ;
   330                                  ; must be documented with this warning.                                    ;
   331                                  ;                                                                          ;
   332                                  ; Those structures and constants that are subject to  the  above  will  be ;
   333                                  ; marked and bracketed with the flag:                                      ;
   334                                  ;                                                                          ;
   335                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   336                                  ;                                                                          ;
   337                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   338                                  
   339                                  ; <Bios Parameter Block>
   340                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   341                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   342                                  ;                                                                          ;
   343                                  
   344                                  ; Bios Parameter Block definition
   345                                  ; This structure is used to build a full DPB
   346                                  
   347                                  struc BPBLOCK
   348 00000000 <res 00000002>          .SECSZ: resw 1		; Size in bytes of physical sector
   349 00000002 <res 00000001>          .CLUS:  resb 1		; Sectors/Alloc unit
   350 00000003 <res 00000002>          .RES:   resw 1		; Number of reserved sectors
   351 00000005 <res 00000001>          .FTCNT: resb 1		; Number of FATs
   352 00000006 <res 00000002>          .DRCNT: resw 1		; Number of directory entries
   353 00000008 <res 00000002>          .SCCNT: resw 1		; Total number of sectors
   354 0000000A <res 00000001>          .MEDIA: resb 1		; Media descriptor byte
   355 0000000B <res 00000002>          .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   356                                  .size:
   357                                  endstruc
   358                                  ;                                                                          ;
   359                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   360                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   361                                  
   362                                  ; <Disk I/O Buffer Header>
   363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   364                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   365                                  ;                                                                          ;
   366                                  
   367                                  ; Field definition for I/O buffer information
   368                                  
   369                                  struc BUFFINFO
   370 00000000 <res 00000004>          .NEXTBUF:	resd 1		; Pointer to next buffer in list
   371                                  ; The next two items are often refed as a word
   372 00000004 <res 00000001>          .BUFDRV:	resb 1		; Logical drive # assoc with buffer FF = free
   373 00000005 <res 00000001>          .BUFDIRTY:	resb 1		; Dirty flag
   374 00000006 <res 00000001>          .BUFPRI:	resb 1		; Buffer selection priority (see EQUs below)
   375 00000007 <res 00000001>          .VISIT:		resb 1		; Visit flag for buffer pool scans
   376 00000008 <res 00000002>          .BUFSECNO:	resw 1		; Sector number of buffer
   377                                  ; The next two items are often refed as a word
   378 0000000A <res 00000001>          .BUFWRTCNT:	resb 1		; For FAT sectors, # times sector written out
   379 0000000B <res 00000001>          .BUFWRTINC:	resb 1		; "   "     "   , # sectors between each write
   380 0000000C <res 00000004>          .BUFDRVDP:	resd 1		; Pointer to drive parameters
   381                                  .size:
   382                                  endstruc
   383                                  
   384                                  BUFINSIZ        EQU     BUFFINFO.size
   385                                  
   386                                                                  ; Size of structure in bytes
   387                                  FREEPRI EQU     0
   388                                  LBRPRI  EQU     2               ; Last byte of buffer read
   389                                  LBWPRI  EQU     4               ; Last byte written
   390                                  RPRI    EQU     6               ; Read but not last byte
   391                                  WPRI    EQU     8               ; Written but not last byte
   392                                  DIRPRI  EQU     15              ; Directory Sector
   393                                  FATPRI  EQU     30              ; FAT sector
   394                                  ;                                                                          ;
   395                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   396                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   397                                  
   398                                  ; <User stack inside of system call>
   399                                  ; Location of user registers relative user stack pointer
   400                                  
   401                                  struc	user_env   ; user_environ
   402 00000000 <res 00000002>          .user_AX: resw 1
   403 00000002 <res 00000002>          .user_BX: resw 1
   404 00000004 <res 00000002>          .user_CX: resw 1
   405 00000006 <res 00000002>          .user_DX: resw 1
   406 00000008 <res 00000002>          .user_SI: resw 1
   407 0000000A <res 00000002>          .user_DI: resw 1
   408 0000000C <res 00000002>          .user_BP: resw 1
   409 0000000E <res 00000002>          .user_DS: resw 1
   410 00000010 <res 00000002>          .user_ES: resw 1
   411 00000012 <res 00000002>          .user_IP: resw 1
   412 00000014 <res 00000002>          .user_CS: resw 1
   413 00000016 <res 00000002>          .user_F:  resw 1
   414                                  .size:
   415                                  endstruc
   416                                  
   417                                  ; <interrupt definitions>
   418                                  
   419                                  INTTAB          EQU     20H
   420                                  INTBASE         EQU     4 * INTTAB
   421                                  ENTRYPOINT      EQU     INTBASE+40H
   422                                  
   423                                  ;	IF      ALTVECT
   424                                  ;ALTTAB  EQU     0F0H
   425                                  ;ALTBASE EQU     4 * ALTTAB
   426                                  ;	ENDIF
   427                                  
   428                                  ;
   429                                  ; interrupt assignments
   430                                  ;
   431                                  ;	IF	NOT ALTVECT
   432                                  int_abort           EQU     INTTAB          ; abort process
   433                                  int_command         EQU     int_abort+1     ; call MSDOS
   434                                  int_terminate       EQU     int_abort+2     ; int to terminate address
   435                                  int_ctrl_c          EQU     int_abort+3     ; ^c trapper
   436                                  int_fatal_abort     EQU     int_abort+4     ; hard disk error
   437                                  int_disk_read       EQU     int_abort+5     ; logical sector disk read
   438                                  int_disk_write      EQU     int_abort+6     ; logical sector disk write
   439                                  int_keep_process    EQU     int_abort+7     ; terminate program and stay resident
   440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   442                                  ;                                                                          ;
   443                                  int_spooler         EQU     int_abort+8     ; spooler call
   444                                  int_fastcon         EQU     int_abort+9     ; fast CON interrupt
   445                                  ;                                                                          ;
   446                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   447                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   448                                          ;ELSE
   449                                  ;int_abort          EQU     INTTAB          ; abort process
   450                                  ;int_command        EQU     int_abort+1     ; call MSDOS
   451                                  ;int_terminate      EQU     ALTTAB          ; int to terminate address
   452                                  ;int_ctrl_c         EQU     int_terminate+1 ; ^c trapper
   453                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   454                                  ;int_disk_read      EQU     int_abort+5     ; logical sector disk read
   455                                  ;int_disk_write     EQU     int_abort+6     ; logical sector disk write
   456                                  ;int_keep_process   EQU     int_abort+7     ; terminate program and stay resident
   457                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   458                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   459                                  ;                                                                          ;
   460                                  ;int_spooler        EQU     int_terminate+3 ; spooler call
   461                                  ;int_fastcon        EQU     int_abort+9     ; fast CON interrupt
   462                                  ;                                                                          ;
   463                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   464                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   465                                          ;ENDIF
   466                                  
   467                                  addr_int_abort          EQU    4 * int_abort
   468                                  addr_int_command        EQU    4 * int_command
   469                                  addr_int_terminate      EQU    4 * int_terminate
   470                                  addr_int_ctrl_c         EQU    4 * int_ctrl_c
   471                                  addr_int_fatal_abort    EQU    4 * int_fatal_abort
   472                                  addr_int_disk_read      EQU    4 * int_disk_read
   473                                  addr_int_disk_write     EQU    4 * int_disk_write
   474                                  addr_int_keep_process   EQU    4 * int_keep_process
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   477                                  ;                                                                          ;
   478                                  addr_int_spooler        EQU    4 * int_spooler
   479                                  addr_int_fastcon        EQU    4 * int_fastcon
   480                                  ;                                                                          ;
   481                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   482                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   483                                  
   484                                  ; <Disk map>
   485                                  ;  MSDOS partitions the disk into 4 sections:
   486                                  ;
   487                                  ;  phys sector 0:   +-------------------+
   488                                  ;       |           | boot/reserved     |
   489                                  ;       |           +-------------------+
   490                                  ;       |           |  File allocation  |
   491                                  ;       v           |      table(s)     |
   492                                  ;                   |  (multiple copies |
   493                                  ;                   |     are kept)     |
   494                                  ;                   +-------------------+
   495                                  ;                   |     Directory     |
   496                                  ;                   +-------------------+
   497                                  ;                   |     File space    |
   498                                  ;                   +-------------------+
   499                                  ;                   |   Unaddressable   |
   500                                  ;                   |  (to end of disk) |
   501                                  ;                   +-------------------+
   502                                  ;
   503                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   504                                  ; adjusted to maximize the file space addressable.
   505                                  
   506                                  ; BREAK <Directory entry>
   507                                  
   508                                  ;
   509                                  ;       +---------------------------+
   510                                  ;       |  (12 BYTE) filename/ext   |       0       0
   511                                  ;       +---------------------------+
   512                                  ;       |     (BYTE) attributes     |       11      B
   513                                  ;       +---------------------------+
   514                                  ;       |    (10 BYTE) reserved     |       12      C
   515                                  ;       +---------------------------+
   516                                  ;       | (WORD) time of last write |       22      16
   517                                  ;       +---------------------------+
   518                                  ;       | (WORD) date of last write |       24      18
   519                                  ;       +---------------------------+
   520                                  ;       |   (WORD) First cluster    |       26      1A
   521                                  ;       +---------------------------+
   522                                  ;       |     (DWORD) file size     |       28      1C
   523                                  ;       +---------------------------+
   524                                  ;
   525                                  ;   First byte of filename  = E5 -> free directory entry
   526                                  ;                           = 00 -> end of allocated directory
   527                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   528                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   529                                  ;
   530                                  struc dir_entry
   531 00000000 <res 0000000B>          .dir_name:	resb 11			; file name
   532 0000000B <res 00000001>          .dir_attr:	resb 1			; attribute bits
   533 0000000C <res 0000000A>          .dir_pad:	resb 10			; reserved for expansion
   534 00000016 <res 00000002>          .dir_time:	resw 1			; time of last write
   535 00000018 <res 00000002>          .dir_date:	resw 1			; date of last write
   536 0000001A <res 00000002>          .dir_first:	resw 1			; first allocation unit of file
   537 0000001C <res 00000002>          .dir_size_l:	resw 1			; low 16 bits of file size
   538 0000001E <res 00000002>          .dir_size_h:	resw 1			; high 16 bits of file size
   539                                  .size:
   540                                  endstruc
   541                                  
   542                                  attr_read_only      EQU      1h
   543                                  attr_hidden         EQU      2h
   544                                  attr_system         EQU      4h
   545                                  attr_volume_id      EQU      8h
   546                                  attr_directory      EQU     10h
   547                                  attr_archive        EQU     20h
   548                                  
   549                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   550                                                                          ; OR of hard attributes for FINDENTRY
   551                                  
   552                                  attr_ignore         EQU     attr_read_only+attr_archive
   553                                                                          ; ignore this(ese) attribute(s)
   554                                                                          ; during search first/next
   555                                  
   556                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   557                                                                          ; changeable via CHMOD
   558                                  
   559                                  ; <File allocation Table information>
   560                                  ;
   561                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   562                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   563                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   564                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   565                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   566                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   567                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   568                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   569                                  ; available allocation unit is assigned entry number two, and even though it is
   570                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   571                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   572                                  ; entry is the number of the next cluster in the file.
   573                                  ;
   574                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   575                                  ; because these clusters show as allocated, but are not part of any allocation
   576                                  ; chain and thus will never be allocated to a file.  A particular number is
   577                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   578                                  ; entry FF7H which is not in a chain is not an error).
   579                                  
   580                                  ; BREAK <DPB structure>
   581                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   582                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   583                                  ;                                                                          ;
   584                                  
   585                                  DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   586                                  
   587                                  struc	DPB
   588 00000000 <res 00000001>          .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   589 00000001 <res 00000001>          .UNIT:		resb 1		; Driver unit number of DPB
   590 00000002 <res 00000002>          .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   591 00000004 <res 00000001>          .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   592 00000005 <res 00000001>          .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   593 00000006 <res 00000002>          .FIRST_FAT:	resw 1		; Starting record of FATs
   594 00000008 <res 00000001>          .FAT_COUNT:	resb 1		; Number of FATs for this drive
   595 00000009 <res 00000002>          .ROOT_ENTRIES:	resw 1		; Number of directory entries
   596 0000000B <res 00000002>          .FIRST_SECTOR:	resw 1		; First sector of first cluster
   597 0000000D <res 00000002>          .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   598 0000000F <res 00000001>          .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   599 00000010 <res 00000002>          .DIR_SECTOR:	resw 1		; Starting record of directory
   600 00000012 <res 00000004>          .DRIVER_ADDR:	resd 1		; Pointer to driver
   601 00000016 <res 00000001>          .MEDIA:		resb 1		; Media byte
   602 00000017 <res 00000001>          .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   603                                  				; check the first time this DPB is used
   604 00000018 <res 00000004>          .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   605 0000001C <res 00000002>          .CURRENT_DIR:	resw 1		; Cluster number of start of current directory
   606                                  				; 0 indicates root, -1 indicates invalid
   607                                  				; (disk ? changed)
   608 0000001E <res 00000040>          .DIR_TEXT:	resb DIRSTRLEN	; ASCIZ string of current directory
   609                                  .size:
   610                                  endstruc
   611                                  
   612                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   613                                  
   614                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   615                                  
   616                                  ;                                                                          ;
   617                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   618                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   619                                  
   620                                  ; BREAK <File Control Block definition>
   621                                  ;
   622                                  ; Field definition for FCBs
   623                                  ; The FCB has the following structure:
   624                                  ;
   625                                  ;       +---------------------------+
   626                                  ;       |   Drive indicator(byte)   |
   627                                  ;       +---------------------------+
   628                                  ;       |    Filename (8 chars)     |
   629                                  ;       +---------------------------+
   630                                  ;       |    Extension (3 chars)    |
   631                                  ;       +---------------------------+
   632                                  ;       |   Current Extent(word)    |
   633                                  ;       +---------------------------+
   634                                  ;       |    Record size (word)     |
   635                                  ;       +---------------------------+
   636                                  ;       |    File Size (2 words)    |
   637                                  ;       +---------------------------+
   638                                  ;       |       Date of write       |
   639                                  ;       +---------------------------+
   640                                  ;       |       Time of write       |
   641                                  ;       +---------------------------+
   642                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   643                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   644                                  ;                                                                          ;
   645                                  ;       | Flags:                    |
   646                                  ;       |  bit 7=0 file/1 device    |
   647                                  ;       |  bit 6=0 if dirty         |
   648                                  ;       |  bits 0-5 deviceid        |
   649                                  ;       +---------------------------+
   650                                  ;       |   first cluster in file   |
   651                                  ;       +---------------------------+
   652                                  ;       | position of last cluster  |
   653                                  ;       +---------------------------+
   654                                  ;       |   last cluster accessed   |   12 bit-+--- packed in 3 bytes
   655                                  ;       +---------------------------+          |
   656                                  ;       |     parent directory      |   <------+
   657                                  ;       +---------------------------+
   658                                  ;                                                                          ;
   659                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   660                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   661                                  ;       |    next record number     |
   662                                  ;       +---------------------------+
   663                                  ;       |   random record number    |
   664                                  ;       +---------------------------+
   665                                  ;
   666                                  
   667                                  struc	SYS_FCB
   668 00000000 <res 00000001>          .drive:	resb 1
   669 00000001 <res 00000008>          .name:	resb 8
   670 00000009 <res 00000003>          .ext:	resb 3
   671 0000000C <res 00000002>          .EXTENT: resw 1
   672 0000000E <res 00000002>          .RECSIZ: resw 1	; Size of record (user settable)
   673 00000010 <res 00000002>          .FILSIZ: resw 1	; Size of file in bytes; used with the following
   674                                                          ; word
   675 00000012 <res 00000002>          .DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
   676 00000014 <res 00000002>          .FDATE:	resw 1	; Date of last writing
   677 00000016 <res 00000002>          .FTIME:	resw 1	; Time of last writing
   678                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   679                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   680                                  ;                                                                          ;
   681 00000018 <res 00000001>          .DEVID:	resb 1	; Device ID number, bits 0-5 if file.
   682                                                          ; bit 7=0 for file, bit 7=1 for I/O device
   683                                                          ; If file, bit 6=0 if dirty
   684                                                          ; If I/O device, bit 6=0 if EOF (input)
   685                                                          ;               Bit 5=1 if Raw mode
   686                                                          ;               Bit 0=1 if console input device
   687                                                          ;               Bit 1=1 if console output device
   688                                                          ;               Bit 2=1 if null device
   689                                                          ;               Bit 3=1 if clock device
   690 00000019 <res 00000002>          .FIRCLUS: resw 1	; First cluster of file
   691 0000001B <res 00000002>          .CLUSPOS: resw 1	; Position of last cluster accessed
   692 0000001D <res 00000002>          .LSTCLUS: resw 1	; Last cluster accessed and directory
   693 0000001F <res 00000001>                    resb 1	; pack 2 12 bit numbers into 24 bits...
   694                                  ;                                                                          ;
   695                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   696                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   697 00000020 <res 00000001>          .NR:	resb 1	; Next record
   698 00000021 <res 00000004>          .RR:	resb 4	; Random record
   699                                  .size:
   700                                  endstruc
   701                                  
   702                                  FILDIRENT       EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and
   703                                                                          ; SEARCH NEXT
   704                                  
   705                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   706                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   707                                  ;                                                                          ;
   708                                  devid_file_clean        EQU     40h     ; true if file and not written
   709                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   710                                  
   711                                  devid_device            EQU     80h     ; true if a device
   712                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   713                                  devid_device_raw        EQU     20h     ; true if in raw mode
   714                                  devid_device_special    EQU     10h     ; true if special device
   715                                  devid_device_clock      EQU     08h     ; true if clock device
   716                                  devid_device_null       EQU     04h     ; true if null device
   717                                  devid_device_con_out    EQU     02h     ; true if console output
   718                                  devid_device_con_in     EQU     01h     ; true if consle input
   719                                  
   720                                  ;
   721                                  ; structure of devid field as returned by IOCTL is:
   722                                  ;
   723                                  ;       BIT     7   6   5   4   3   2   1   0
   724                                  ;             |---|---|---|---|---|---|---|---|
   725                                  ;             | I | E | R | S | I | I | I | I |
   726                                  ;             | S | O | A | P | S | S | S | S |
   727                                  ;             | D | F | W | E | C | N | C | C |
   728                                  ;             | E |   |   | C | L | U | O | I |
   729                                  ;             | V |   |   | L | K | L | T | N |
   730                                  ;             |---|---|---|---|---|---|---|---|
   731                                  ;       ISDEV = 1 if this channel is a device
   732                                  ;             = 0 if this channel is a disk file
   733                                  ;
   734                                  ;       If ISDEV = 1
   735                                  ;
   736                                  ;             EOF = 0 if End Of File on input
   737                                  ;             RAW = 1 if this device is in Raw mode
   738                                  ;                 = 0 if this device is cooked
   739                                  ;             ISCLK = 1 if this device is the clock device
   740                                  ;             ISNUL = 1 if this device is the null device
   741                                  ;             ISCOT = 1 if this device is the console output
   742                                  ;             ISCIN = 1 if this device is the console input
   743                                  ;
   744                                  ;       If ISDEV = 0
   745                                  ;             EOF = 0 if channel has been written
   746                                  ;             Bits 0-5  are  the  block  device  number  for
   747                                  ;                 the channel (0 = A, 1 = B, ...)
   748                                  ;
   749                                  devid_ISDEV     EQU     80h
   750                                  devid_EOF       EQU     40h
   751                                  devid_RAW       EQU     20h
   752                                  devid_SPECIAL   EQU     10H
   753                                  devid_ISCLK     EQU     08h
   754                                  devid_ISNUL     EQU     04h
   755                                  devid_ISCOT     EQU     02h
   756                                  devid_ISCIN     EQU     01h
   757                                  
   758                                  devid_block_dev EQU     1Fh             ; mask for block device number
   759                                  
   760                                  ;
   761                                  ; find first/next buffer
   762                                  ;
   763                                  struc	find_buf
   764 00000000 <res 00000001>          .sattr:	   resb 1	; attribute of search
   765 00000001 <res 00000001>          .drive:	   resb 1	; drive of search
   766 00000002 <res 0000000B>          .name:	   resb 11	; formatted name
   767 0000000D <res 00000002>          .LastEnt:  resw 1	; LastEnt
   768 0000000F <res 00000004>          .ThisDPB:  resd 1	; This DPB
   769 00000013 <res 00000002>          .DirStart: resw 1	; DirStart
   770                                  ;                                                                          ;
   771                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   772                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   773                                  
   774 00000015 <res 00000001>          .attr:	 resb 1		; attribute found
   775 00000016 <res 00000001>          .time:   resb 1		; time
   776 00000017 <res 00000001>          .date:   resb 1		; date
   777 00000018 <res 00000002>          .size_l: resw 1		; low(size)
   778 0000001A <res 00000002>          .size_h: resw 1		; high(size)
   779 0000001C <res 0000000D>          .pname:	 resb 13	; packed name
   780                                  .size:
   781                                  endstruc
   782                                  
   783                                  ; BREAK <Process data block>
   784                                  ;
   785                                  ; Process data block (otherwise known as program header)
   786                                  ;
   787                                  
   788                                  FILPERPROC	EQU     20
   789                                  
   790                                  struc PDB	; Process_data_block
   791 00000000 <res 00000002>          .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   792 00000002 <res 00000002>          .BLOCK_LEN:	resw 1		; size of execution block
   793 00000004 <res 00000001>                          resb 1
   794 00000005 <res 00000005>          .CPM_CALL:	resb 5		; ancient call to system
   795 0000000A <res 00000004>          .EXIT:		resd 1		; pointer to exit routine
   796 0000000E <res 00000004>          .CTRL_C:	resd 1		; pointer to ^C routine
   797 00000012 <res 00000004>          .FATAL_ABORT:	resd 1		; pointer to fatal error
   798                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   799                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   800                                  ;                                                                          ;
   801 00000016 <res 00000002>          .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   802 00000018 <res 00000014>          .JFN_TABLE:     resb FILPERPROC ; indices into system table
   803                                  ;                                                                          ;
   804                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   805                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   806 0000002C <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   809                                  ;                                                                          ;
   810 0000002E <res 00000004>          .USER_STACK:	resd 1		; stack of self during system calls
   811 00000032 <res 0000001E>          .PAD1:		resb 30 ; 1Eh
   812                                  ;                                                                          ;
   813                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   814                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   815 00000050 <res 00000005>          .CALL_SYSTEM:	resb 5		; portable method of system call
   816                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;                                                                          ;
   819 00000055 <res 00000006>          .PAD2:		resb 6
   820                                  ;                                                                          ;
   821                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   822                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   823                                  endstruc
   824                                  
   825                                  ; BREAK <EXEC and EXE file structures>
   826                                  ;
   827                                  ; EXEC arg block - load/go program
   828                                  ;
   829                                  
   830                                  ;
   831                                  ; The following get used as arguments to the EXEC system call.  They indicate
   832                                  ; whether or not the program is executed or whether or not a program header
   833                                  ; gets created.
   834                                  ;
   835                                  exec_func_no_execute    EQU 1           ; no execute bit
   836                                  exec_func_overlay       EQU 2           ; overlay bit
   837                                  
   838                                  struc EXEC0
   839 00000000 <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   840 00000002 <res 00000004>          .COM_LINE:	resd 1		; pointer to asciz command line
   841 00000006 <res 00000004>          .5C_FCB:	resd 1		; default fcb at 5C
   842 0000000A <res 00000004>          .6C_FCB:	resd 1		; default fcb at 6C
   843                                  .size:
   844                                  endstruc
   845                                  
   846                                  struc EXEC1
   847 00000000 <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   848 00000002 <res 00000004>          .COM_LINE:	resd 1		; pointer to asciz command line
   849 00000006 <res 00000004>          .5C_FCB:	resd 1		; default fcb at 5C
   850 0000000A <res 00000004>          .6C_FCB:	resd 1		; default fcb at 6C
   851 0000000E <res 00000002>          .SP:		resw 1		; stack pointer of program
   852 00000010 <res 00000002>          .SS:		resw 1		; stack seg register of program
   853 00000012 <res 00000002>          .IP:		resw 1		; entry point IP
   854 00000014 <res 00000002>          .CS:		resw 1		; entry point CS
   855                                  .size:
   856                                  endstruc
   857                                  
   858                                  struc EXEC3
   859 00000000 <res 00000002>          .load_addr:	resw 1		; seg address of load point
   860 00000002 <res 00000002>          .reloc_fac:	resw 1		; relocation factor
   861                                  endstruc
   862                                  
   863                                  ;
   864                                  ; Exit codes in upper byte
   865                                  ;
   866                                  Exit_Terminate      EQU     0
   867                                  Exit_Abort          EQU     0
   868                                  Exit_Ctrl_C         EQU     1
   869                                  Exit_Hard_Error     EQU     2
   870                                  Exit_Keep_Process   EQU     3
   871                                  
   872                                  ;
   873                                  ; EXE file header
   874                                  ;
   875                                  
   876                                  struc EXE
   877 00000000 <res 00000002>          .signature:   resw 1		; must contain 4D5A (yay zibo!)
   878 00000002 <res 00000002>          .len_mod_512: resw 1		; low 9 bits of length
   879 00000004 <res 00000002>          .pages:       resw 1		; number of 512b pages in file
   880 00000006 <res 00000002>          .rle_count:   resw 1		; count of reloc entries
   881 00000008 <res 00000002>          .par_dir:     resw 1		; number of paragraphs before image
   882 0000000A <res 00000002>          .min_BSS:     resw 1		; minimum number of para of BSS
   883 0000000C <res 00000002>          .max_BSS:     resw 1		; max number of para of BSS
   884 0000000E <res 00000002>          .SS:          resw 1		; stack of image
   885 00000010 <res 00000002>          .SP:          resw 1		; SP of image
   886 00000012 <res 00000002>          .chksum:      resw 1		; checksum of file (ignored)
   887 00000014 <res 00000002>          .IP:          resw 1		; IP of entry
   888 00000016 <res 00000002>          .CS:          resw 1		; CS of entry
   889 00000018 <res 00000002>          .rle_table:   resw 1		; byte offset of reloc table
   890 0000001A <res 00000002>          .iov:         resw 1		; overlay number (0 for root)
   891 0000001C <res 00000004>          .sym_tab:     resd 1		; offset of symbol table in file
   892                                  .size:
   893                                  endstruc
   894                                  
   895                                  exe_valid_signature     EQU 5A4Dh
   896                                  exe_valid_old_signature EQU 4D5Ah
   897                                  
   898                                  struc symbol_entry
   899 00000000 <res 00000004>          .value:	resd 1
   900 00000004 <res 00000002>          .type:	resw 1
   901 00000006 <res 00000001>          .len:	resb 1
   902 00000007 <res 000000FF>          .name:	resb 255
   903                                  endstruc
   904                                  
   905                                  ; <Internal system file table format>
   906                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   907                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   908                                  ;                                                                          ;
   909                                  ;
   910                                  ; system file table
   911                                  ;
   912                                  
   913                                  struc	SFT
   914 00000000 <res 00000004>          .SFT_LINK:	resd 1
   915 00000004 <res 00000002>          .SFT_COUNT:	resw 1		; number of entries
   916 00000006 <res 00000002>          .SFT_TABLE:	resw 1		; beginning of array of the following
   917                                  .size:
   918                                  endstruc
   919                                  
   920                                  ;
   921                                  ; system file table entry
   922                                  ;
   923                                  
   924                                  struc	SF_ENTRY
   925 00000000 <res 00000001>          .sf_ref_count:	resb 1		; number of processes sharing fcb
   926 00000001 <res 00000001>          .sf_mode:	resb 1		; mode of access
   927 00000002 <res 00000001>          .sf_attr:	resb 1		; attribute of file
   928 00000003 <res 00000025>          .sf_fcb:	resb SYS_FCB.size  ; actual FCB
   929                                  .size:
   930                                  endstruc
   931                                  
   932                                  sf_default_number   EQU     5h
   933                                  ; 19/04/2018
   934                                  sf_entry_size equ SF_ENTRY.size ; 40
   935                                  
   936                                  ;                                                                          ;
   937                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   938                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   939                                  
   940                                  ; <Memory arena structure>
   941                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   942                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   943                                  ;                                                                          ;
   944                                  ;
   945                                  ; arena item
   946                                  ;
   947                                  
   948                                  struc ARENA
   949 00000000 <res 00000001>          .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
   950 00000001 <res 00000002>          .OWNER:		resw 1		; owner of arena item
   951 00000003 <res 00000002>          .SIZE:		resw 1		; size in paragraphs of item
   952                                  endstruc
   953                                  
   954                                  arena_owner_system  EQU 0               ; free block indication
   955                                  
   956                                  arena_signature_normal  EQU 4Dh         ; valid signature, not end of arena
   957                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
   958                                  ;                                                                          ;
   959                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   960                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   961                                  
   962                                  ; <Machine instruction definitions>
   963                                  
   964                                  mi_INT          EQU     0CDh
   965                                  mi_Long_JMP     EQU     0EAh
   966                                  mi_Long_CALL    EQU     09Ah
   967                                  mi_Long_RET     EQU     0CBh
   968                                  
   969                                  ; <Standard I/O assignments>
   970                                  
   971                                  stdin       EQU     0
   972                                  stdout      EQU     1
   973                                  stderr      EQU     2
   974                                  stdaux      EQU     3
   975                                  stdprn      EQU     4
   976                                  
   977                                  ; <Xenix subfunction assignments>
   978                                  
   979                                  open_for_read   EQU 0
   980                                  open_for_write  EQU 1
   981                                  open_for_both   EQU 2
   982                                  
   983                                  ; <Xenix error codes>
   984                                  
   985                                  ;
   986                                  ; XENIX calls all return error codes through AX.  If an error occurred then the
   987                                  ; carry bit will be set and the error code is in AX.  If no error occurred then
   988                                  ; the carry bit is reset and AX contains returned info.
   989                                  ;
   990                                  
   991                                  no_error_occurred		EQU     0
   992                                  
   993                                  error_invalid_function          EQU     1
   994                                  error_file_not_found            EQU     2
   995                                  error_path_not_found            EQU     3
   996                                  error_too_many_open_files       EQU     4
   997                                  error_access_denied             EQU     5
   998                                  error_invalid_handle            EQU     6
   999                                  error_arena_trashed             EQU     7
  1000                                  error_not_enough_memory         EQU     8
  1001                                  error_invalid_block             EQU     9
  1002                                  error_bad_environment           EQU     10
  1003                                  error_bad_format                EQU     11
  1004                                  error_invalid_access            EQU     12
  1005                                  error_invalid_data              EQU     13
  1006                                  ;**** unused                    EQU     14
  1007                                  error_invalid_drive             EQU     15
  1008                                  error_current_directory         EQU     16
  1009                                  error_not_same_device           EQU     17
  1010                                  error_no_more_files             EQU     18
  1011                                  
  1012                                  country_not_found               EQU     error_file_not_found ; DOSSYM_V211.ASM
  1013                                  alloc_not_enough_memory         EQU     error_not_enough_memory
  1014                                  alloc_arena_trashed             EQU     error_arena_trashed
  1015                                  
  1016                                  close_invalid_handle            EQU     error_invalid_handle
  1017                                  close_invalid_function          EQU     error_invalid_function
  1018                                  
  1019                                  chdir_path_not_found            EQU     error_path_not_found
  1020                                  
  1021                                  chmod_path_not_found            EQU     error_path_not_found
  1022                                  chmod_access_denied             EQU     error_access_denied
  1023                                  chmod_invalid_function          EQU     error_invalid_function
  1024                                  
  1025                                  creat_access_denied             EQU     error_access_denied
  1026                                  creat_path_not_found            EQU     error_path_not_found
  1027                                  creat_too_many_open_files       EQU     error_too_many_open_files
  1028                                  
  1029                                  curdir_invalid_drive            EQU     error_invalid_drive
  1030                                  
  1031                                  dealloc_invalid_block           EQU     error_invalid_block
  1032                                  dealloc_arena_trashed           EQU     error_arena_trashed
  1033                                  
  1034                                  dup_invalid_handle              EQU     error_invalid_handle
  1035                                  dup_too_many_open_files         EQU     error_too_many_open_files
  1036                                  
  1037                                  dup2_invalid_handle             EQU     error_invalid_handle
  1038                                  
  1039                                  exec_invalid_function           EQU     error_invalid_function
  1040                                  exec_bad_environment            EQU     error_bad_environment
  1041                                  exec_bad_format                 EQU     error_bad_format
  1042                                  exec_not_enough_memory          EQU     error_not_enough_memory
  1043                                  exec_file_not_found             EQU     error_file_not_found
  1044                                  
  1045                                  filetimes_invalid_function      EQU     error_invalid_function
  1046                                  filetimes_invalid_handle        EQU     error_invalid_handle
  1047                                  
  1048                                  findfirst_file_not_found        EQU     error_file_not_found
  1049                                  findfirst_no_more_files         EQU     error_no_more_files
  1050                                  findnext_no_more_files          EQU     error_no_more_files
  1051                                  
  1052                                  international_invalid_function  EQU     error_invalid_function
  1053                                  
  1054                                  ioctl_invalid_handle            EQU     error_invalid_handle
  1055                                  ioctl_invalid_function          EQU     error_invalid_function
  1056                                  ioctl_invalid_data              EQU     error_invalid_data
  1057                                  
  1058                                  lseek_invalid_handle            EQU     error_invalid_handle
  1059                                  lseek_invalid_function          EQU     error_invalid_function
  1060                                  
  1061                                  mkdir_path_not_found            EQU     error_path_not_found
  1062                                  mkdir_access_denied             EQU     error_access_denied
  1063                                  
  1064                                  open_invalid_access             EQU     error_invalid_access
  1065                                  open_file_not_found             EQU     error_file_not_found
  1066                                  open_access_denied              EQU     error_access_denied
  1067                                  open_too_many_open_files        EQU     error_too_many_open_files
  1068                                  
  1069                                  read_invalid_handle             EQU     error_invalid_handle
  1070                                  read_access_denied              EQU     error_access_denied
  1071                                  
  1072                                  rename_file_not_found           EQU     error_file_not_found
  1073                                  rename_not_same_device          EQU     error_not_same_device
  1074                                  rename_access_denied            EQU     error_access_denied
  1075                                  
  1076                                  rmdir_path_not_found            EQU     error_path_not_found
  1077                                  rmdir_access_denied             EQU     error_access_denied
  1078                                  rmdir_current_directory         EQU     error_current_directory
  1079                                  
  1080                                  setblock_invalid_block          EQU     error_invalid_block
  1081                                  setblock_arena_trashed          EQU     error_arena_trashed
  1082                                  setblock_not_enough_memory      EQU     error_not_enough_memory
  1083                                  setblock_invalid_function       EQU     error_invalid_function
  1084                                  
  1085                                  unlink_file_not_found           EQU     error_file_not_found
  1086                                  unlink_access_denied            EQU     error_access_denied
  1087                                  
  1088                                  write_invalid_handle            EQU     error_invalid_handle
  1089                                  write_access_denied             EQU     error_access_denied
  1090                                  
  1091                                  ; <system call definitions>
  1092                                  
  1093                                  ABORT                           EQU 0   ;  0      0
  1094                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1095                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1096                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1097                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1098                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1099                                  RAW_CON_IO                      EQU 6   ;  6      6
  1100                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1101                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1102                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1103                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1104                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1105                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1106                                  DISK_RESET                      EQU 13  ; 13      D
  1107                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1108                                  FCB_OPEN                        EQU 15  ; 15      F
  1109                                  FCB_CLOSE                       EQU 16  ; 16     10
  1110                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1111                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1112                                  FCB_DELETE                      EQU 19  ; 19     13
  1113                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1114                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1115                                  FCB_CREATE                      EQU 22  ; 22     16
  1116                                  FCB_RENAME                      EQU 23  ; 23     17
  1117                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1118                                  SET_DMA                         EQU 26  ; 26     1A
  1119                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1120                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1121                                  ;                                                                          ;
  1122                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1123                                  ;                                                                          ;
  1124                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1125                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1126                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1127                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1128                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1129                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1130                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1131                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1132                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1133                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1134                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1135                                  GET_DATE                        EQU 42  ; 42     2A
  1136                                  SET_DATE                        EQU 43  ; 43     2B
  1137                                  GET_TIME                        EQU 44  ; 44     2C
  1138                                  SET_TIME                        EQU 45  ; 45     2D
  1139                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1140                                  ; Extended functionality group
  1141                                  GET_DMA                         EQU 47  ; 47     2F
  1142                                  GET_VERSION                     EQU 48  ; 48     30
  1143                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1144                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1145                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1146                                  ;                                                                          ;
  1147                                  GET_DPB                         EQU 50  ; 50     32
  1148                                  ;                                                                          ;
  1149                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1150                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1151                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1152                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1153                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1154                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1155                                  CHAR_OPER                       EQU 55  ; 55     37
  1156                                  INTERNATIONAL                   EQU 56  ; 56     38
  1157                                  ; XENIX CALLS
  1158                                  ;   Directory Group
  1159                                  MKDIR                           EQU 57  ; 57     39
  1160                                  RMDIR                           EQU 58  ; 58     3A
  1161                                  CHDIR                           EQU 59  ; 59     3B
  1162                                  ;   File Group
  1163                                  CREAT                           EQU 60  ; 60     3C
  1164                                  OPEN                            EQU 61  ; 61     3D
  1165                                  CLOSE                           EQU 62  ; 62     3E
  1166                                  READ                            EQU 63  ; 63     3F
  1167                                  WRITE                           EQU 64  ; 64     40
  1168                                  UNLINK                          EQU 65  ; 65     41
  1169                                  LSEEK                           EQU 66  ; 66     42
  1170                                  CHMOD                           EQU 67  ; 67     43
  1171                                  IOCTL                           EQU 68  ; 68     44
  1172                                  XDUP                            EQU 69  ; 69     45
  1173                                  XDUP2                           EQU 70  ; 70     46
  1174                                  CURRENT_DIR                     EQU 71  ; 71     47
  1175                                  ;    Memory Group
  1176                                  ALLOC                           EQU 72  ; 72     48
  1177                                  DEALLOC                         EQU 73  ; 73     49
  1178                                  SETBLOCK                        EQU 74  ; 74     4A
  1179                                  ;    Process Group
  1180                                  EXEC                            EQU 75  ; 75     4B
  1181                                  EXIT                            EQU 76  ; 76     4C
  1182                                  _WAIT				EQU 77  ; 77     4D
  1183                                  FIND_FIRST                      EQU 78  ; 78     4E
  1184                                  ;   Special Group
  1185                                  FIND_NEXT                       EQU 79  ; 79     4F
  1186                                  ; SPECIAL SYSTEM GROUP
  1187                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1188                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1189                                  ;                                                                          ;
  1190                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1191                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1192                                  GET_IN_VARS                     EQU 82  ; 82     52
  1193                                  SETDPB                          EQU 83  ; 83     53
  1194                                  ;                                                                          ;
  1195                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1196                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1197                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1198                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1199                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1200                                  ;                                                                          ;
  1201                                  DUP_PDB                         EQU 85  ; 85     55
  1202                                  ;                                                                          ;
  1203                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1204                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1205                                  RENAME                          EQU 86  ; 86     56
  1206                                  FILE_TIMES                      EQU 87  ; 87     57
  1207                                  
  1208                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1209                                  ;OEM_C1				EQU 249 ; 249    F9
  1210                                  ;OEM_C2				EQU 250 ; 250    FA
  1211                                  ;OEM_C3				EQU 251 ; 251    FB
  1212                                  ;OEM_C4				EQU 252 ; 252    FC
  1213                                  ;OEM_C5				EQU 253 ; 253    FD
  1214                                  ;OEM_C6				EQU 254 ; 254    FE
  1215                                  ;OEM_C7				EQU 255 ; 255    FF
  1216                                  
  1217                                  ;============================================================================
  1218                                  ; DOSSYM_V211.ASM
  1219                                  ;============================================================================
  1220                                  
  1221                                  DOS_MAJOR_VERSION   EQU      2
  1222                                  DOS_MINOR_VERSION   EQU     11
  1223                                  
  1224                                  ;
  1225                                  ; Current structure of the data returned by the international call
  1226                                  ;
  1227                                  
  1228                                  struc	INTERNAT_BLOCK
  1229                                  .Date_tim_format:
  1230 00000000 <res 00000002>          		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1231                                  .Currency_sym:
  1232 00000002 <res 00000005>          		RESB 5		; Currency Symbol 5 bytes
  1233                                  .Thous_sep:
  1234 00000007 <res 00000002>          		RESB 2		; Thousands separator 2 bytes
  1235                                  .Decimal_sep:
  1236 00000009 <res 00000002>          		RESB 2		; Decimal separator 2 bytes
  1237                                  .Date_sep:
  1238 0000000B <res 00000002>          		RESB 2		; Date separator 2 bytes
  1239                                  .Time_sep:
  1240 0000000D <res 00000002>          		RESB 2		; Time separator 2 bytes
  1241                                  .Bit_field:	
  1242 0000000F <res 00000001>          		RESB 1		; Bit values
  1243                                                                     ;   Bit 0 = 0 if currency symbol first
  1244                                                                     ;         = 1 if currency symbol last
  1245                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1246                                                                     ;         = 1 if space after currency symbol
  1247                                  .Currency_cents:
  1248 00000010 <res 00000001>          		RESB 	1	; Number of places after currency dec point
  1249                                  .Time_24:
  1250 00000011 <res 00000001>          		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1251                                  .Map_call:
  1252 00000012 <res 00000002>          		RESW	1	; Address of case mapping call (DWORD)
  1253 00000014 <res 00000002>                          RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1254                                  				;  in pieces.
  1255                                  .Data_sep:
  1256 00000016 <res 00000002>          		RESB	2	; Data list separator character
  1257                                  .size:		
  1258                                  endstruc
  1259                                  
  1260                                  ;============================================================================
  1261                                  ; DEVSYM.ASM
  1262                                  ;============================================================================
  1263                                  
  1264                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1265                                  ;PAGE
  1266                                  
  1267                                  ; The device table list has the form:
  1268                                  struc	SYSDEV
  1269 00000000 <res 00000004>          .NEXT:		resd 1		;Pointer to next device header
  1270 00000004 <res 00000002>          .ATT:		resw 1		;Attributes of the device
  1271 00000006 <res 00000002>          .STRAT:		resw 1		;Strategy entry point
  1272 00000008 <res 00000002>          .INT:		resw 1		;Interrupt entry point
  1273 0000000A <res 00000008>          .NAME:		resb 8		;Name of device (only first byte used for block)
  1274                                  .size:
  1275                                  endstruc
  1276                                  
  1277                                  ;Attribute bit masks
  1278                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1279                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1280                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1281                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1282                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1283                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1284                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1285                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1286                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1287                                  
  1288                                  ;Static Reguest Header
  1289                                  struc	SRHEAD
  1290 00000000 <res 00000001>          .REQLEN:	resb 1		;Length in bytes of request block
  1291 00000001 <res 00000001>          .REQUNIT:	resb 1		;Device unit number
  1292 00000002 <res 00000001>          .REQFUNC:	resb 1		;Type of request
  1293 00000003 <res 00000002>          .REQSTAT:	resw 1		;Status Word
  1294 00000005 <res 00000008>                  	resb 8		;Reserved for queue links
  1295                                  .size:
  1296                                  endstruc
  1297                                  
  1298                                  ;Status word masks
  1299                                  STERR   EQU     8000H           ;Bit 15 - Error
  1300                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1301                                  STDON   EQU     0100H           ;Bit 8 - Done
  1302                                  STECODE EQU     00FFH           ;Error code
  1303                                  WRECODE EQU     0
  1304                                  
  1305                                  ;Function codes
  1306                                  DEVINIT EQU     0               ;Initialization
  1307                                  DINITHL EQU     26              ;Size of init header
  1308                                  DEVMDCH EQU     1               ;Media check
  1309                                  DMEDHL  EQU     15              ;Size of media check header
  1310                                  DEVBPB  EQU     2               ;Get BPB
  1311                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1312                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1313                                  DEVRD   EQU     4               ;Read
  1314                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1315                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1316                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1317                                  DEVIST  EQU     6               ;Input status
  1318                                  DSTATHL EQU     13              ;Size of status header
  1319                                  DEVIFL  EQU     7               ;Input flush
  1320                                  DFLSHL  EQU     15              ;Size of flush header
  1321                                  DEVWRT  EQU     8               ;Write
  1322                                  DEVWRTV EQU     9               ;Write with verify
  1323                                  DEVOST  EQU     10              ;Output status
  1324                                  DEVOFL  EQU     11              ;Output flush
  1325                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1326                                  
  1327                                  ;============================================================================
  1328                                  ; MSDATA.ASM
  1329                                  ;============================================================================
  1330                                  
  1331                                  ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1332                                  ; SUBTTL Uninitialized data overlayed by initialization code
  1333                                  ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1334                                  ;PAGE
  1335                                  ;DATA    SEGMENT WORD PUBLIC 'DATA'
  1336                                  ; Init code overlaps with data area below
  1337                                  
  1338                                  ;        ORG     0
  1339                                  ;        i_am    INBUF,128
  1340                                  ;        I_AM    CONBUF,131              ; The rest of INBUF and console buffer
  1341                                  ;        i_am    TIMEBUF,6
  1342                                  ;        I_AM    DEVIOBUF,2              ; Buffer for I/O under file assignment
  1343                                  ;        I_AM    EXITHOLD,DWORD
  1344                                  
  1345                                  ; Retro DOS 2.0 NASM modifications !!! (02/03/2018)
  1346                                  INBUF	 EQU	DATASEGMENT+0	; DATASEGMENT = DOSINIT addr (parag aligned)
  1347                                  CONBUF	 EQU	INBUF+128	; DATASEGMENT+128
  1348                                  TIMEBUF	 EQU	CONBUF+131	; DATASEGMENT+259
  1349                                  DEVIOBUF EQU	TIMEBUF+6	; DATASEGMENT+265
  1350                                  EXITHOLD EQU	DEVIOBUF+2	; DATASEGMENT+267
  1351                                  
  1352                                          ;PUBLIC  DevFCB
  1353                                  ;DEVFCB	LABEL   BYTE	; Uses NAME1, NAME2, NAME3 combined
  1354                                  DEVFCB	EQU	EXITHOLD+4	; DATASEGMENT+271
  1355                                  
  1356                                  ; WARNING..  do not alter size or relative location of the following 4 items
  1357                                  ; without first examining FCB_RENAME
  1358                                          ;I_AM    NAME1,12                ; File name buffer
  1359                                          ;I_AM    ATTRIB,BYTE
  1360                                          ;I_AM    NAME2,13
  1361                                          ;I_AM    NAME3,14
  1362                                  
  1363                                          ;I_AM    EXTFCB,BYTE
  1364                                  NAME1	EQU	EXITHOLD+4	; DATASEGMENT+271 ; File name buffer
  1365                                  ATTRIB	EQU	NAME1+12	; DATASEGMENT+283
  1366                                  NAME2	EQU	ATTRIB+1	; DATASEGMENT+284
  1367                                  NAME3	EQU	NAME2+13	; DATASEGMENT+297
  1368                                  EXTFCB  EQU	NAME3+14	; DATASEGMENT+311
  1369                                  
  1370                                  ; WARNING - the following two items are accessed as a word
  1371                                          ;I_AM    CREATING,BYTE
  1372                                          ;I_AM    DELALL,BYTE
  1373                                  CREATING EQU	EXTFCB+1	; DATASEGMENT+312 
  1374                                  DELALL	EQU	CREATING+1	; DATASEGMENT+313 	
  1375                                  
  1376                                          ;I_AM    FoundDel,BYTE
  1377                                  FOUNDDEL EQU	DELALL+1	; DATASEGMENT+314	
  1378                                  
  1379                                          ;I_AM    user_SP,WORD
  1380                                          ;I_AM    user_SS,WORD
  1381                                          ;I_AM    CONTSTK,WORD
  1382                                          ;I_AM    SECCLUSPOS,BYTE	; Position of first sector 
  1383                                  				 	; within cluster
  1384                                          ;I_AM    DSKERR,BYTE
  1385                                          ;I_AM    TRANS,BYTE
  1386                                          ;I_AM    READOP,BYTE
  1387                                          ;I_AM    THISDRV,BYTE
  1388                                          ;I_AM    THISDPB,DWORD
  1389                                          ;I_AM    CLUSFAC,BYTE
  1390                                  
  1391                                  user_SP	EQU	FOUNDDEL+1	; DATASEGMENT+315		
  1392                                  user_SS	EQU	user_SP+2	; DATASEGMENT+317 
  1393                                  CONTSTK	EQU	user_SS+2	; DATASEGMENT+319 
  1394                                  SECCLUSPOS EQU	CONTSTK+2	; DATASEGMENT+321 
  1395                                  DSKERR	EQU	SECCLUSPOS+1	; DATASEGMENT+322 
  1396                                  TRANS	EQU	DSKERR+1	; DATASEGMENT+323 
  1397                                  READOP	EQU	TRANS+1		; DATASEGMENT+324 
  1398                                  THISDRV	EQU	READOP+1	; DATASEGMENT+325 
  1399                                  THISDPB	EQU	THISDRV+1	; DATASEGMENT+326 
  1400                                  CLUSFAC	EQU	THISDPB+4	; DATASEGMENT+330 
  1401                                  
  1402                                  ; WARNING - the following two items are accessed as a word
  1403                                          ;I_AM    DRIVESPEC,BYTE
  1404                                          ;I_AM    ROOTSTART,BYTE
  1405                                  DRIVESPEC EQU	CLUSFAC+1	; DATASEGMENT+331	
  1406                                  ROOTSTART EQU	DRIVESPEC+1	; DATASEGMENT+332 
  1407                                  
  1408                                          ;I_AM    CLUSSPLIT,BYTE
  1409                                          ;i_am    INSMODE,BYTE
  1410                                          ;I_AM    CLUSSAVE,WORD
  1411                                          ;I_AM    CLUSSEC,WORD
  1412                                          ;I_AM    PREREAD,WORD		; 0 means preread; 1 means optional
  1413                                          ;I_AM    FATBYT,WORD
  1414                                          ;I_AM    DEVPT,DWORD
  1415                                          ;I_AM    THISFCB,DWORD		; Address of user FCB
  1416                                  
  1417                                  CLUSSPLIT EQU	ROOTSTART+1  	; DATASEGMENT+333 
  1418                                  INSMODE	EQU	CLUSSPLIT+1	; DATASEGMENT+334	
  1419                                  CLUSSAVE EQU	INSMODE+1	; DATASEGMENT+335	
  1420                                  CLUSSEC	EQU	CLUSSAVE+2	; DATASEGMENT+337	
  1421                                  PREREAD	EQU	CLUSSEC+2	; DATASEGMENT+339 ; 0 means preread; 1 means optional
  1422                                  FATBYT	EQU	PREREAD+2	; DATASEGMENT+341	
  1423                                  DEVPT	EQU	FATBYT+2	; DATASEGMENT+343 
  1424                                  THISFCB	EQU	DEVPT+4		; DATASEGMENT+347 ; Address of user FCB  
  1425                                  
  1426                                          ;I_AM    NEXTADD,WORD
  1427                                          ;I_AM    RECPOS,4
  1428                                          ;I_AM    RECCNT,WORD
  1429                                          ;I_AM    LASTPOS,WORD
  1430                                          ;I_AM    CLUSNUM,WORD
  1431                                          ;I_AM    DIRSEC,WORD
  1432                                          ;I_AM    DIRSTART,WORD
  1433                                          ;I_AM    SECPOS,WORD		; Position of first sector accessed
  1434                                          ;I_AM    VALSEC,WORD		; Number of valid (previously written)
  1435                                  	;				; sectors
  1436                                  
  1437                                  NEXTADD	EQU 	THISFCB+4	; DATASEGMENT+351
  1438                                  RECPOS	EQU	NEXTADD+2	; DATASEGMENT+353
  1439                                  RECCNT	EQU	RECPOS+4	; DATASEGMENT+357 
  1440                                  LASTPOS	EQU	RECCNT+2	; DATASEGMENT+359 
  1441                                  CLUSNUM	EQU	LASTPOS+2	; DATASEGMENT+361	
  1442                                  DIRSEC	EQU	CLUSNUM+2	; DATASEGMENT+363	
  1443                                  DIRSTART EQU	DIRSEC+2	; DATASEGMENT+365 
  1444                                  SECPOS	EQU	DIRSTART+2 	; DATASEGMENT+367 ; Position of first sector accessed
  1445                                  VALSEC	EQU	SECPOS+2	; DATASEGMENT+369 ; SECPOS+2 ; Number of valid
  1446                                  						  	     ; (previously written)
  1447                                  	;						     ; sectors
  1448                                  
  1449                                          ;I_AM    BYTSECPOS,WORD		; Position of first byte within sector
  1450                                          ;I_AM    BYTPOS,4		; Byte position in file of access
  1451                                          ;I_AM    BYTCNT1,WORD		; No. of bytes in first sector
  1452                                          ;I_AM    BYTCNT2,WORD		; No. of bytes in last sector
  1453                                          ;I_AM    SECCNT,WORD		; No. of whole sectors
  1454                                          ;I_AM    ENTFREE,WORD
  1455                                          ;I_AM    ENTLAST,WORD
  1456                                          ;I_AM    NXTCLUSNUM,WORD
  1457                                          ;I_AM    GROWCNT,DWORD
  1458                                          ;I_AM    CURBUF,DWORD
  1459                                          ;I_AM    VOLID,BYTE
  1460                                          ;I_AM    NULLDEVPT,DWORD
  1461                                          ;I_AM    CINSAV,DWORD
  1462                                          ;I_AM    CINDSAV,BYTE
  1463                                          ;I_AM    COUTDSAV,BYTE
  1464                                          ;I_AM    COUTSAV,DWORD
  1465                                  
  1466                                  BYTSECPOS EQU	VALSEC+2 	; DATASEGMENT+371 ; Position of first byte within sector
  1467                                  BYTPOS	EQU	BYTSECPOS+2	; DATASEGMENT+373 ; Byte position in file of access
  1468                                  BYTCNT1	EQU	BYTPOS+4 	; DATASEGMENT+377 ; No. of bytes in first sector
  1469                                  BYTCNT2	EQU	BYTCNT1+2 	; DATASEGMENT+379 ; No. of bytes in last sector
  1470                                  SECCNT	EQU	BYTCNT2+2 	; DATASEGMENT+381 ; No. of whole sectors
  1471                                  ENTFREE	EQU	SECCNT+2	; DATASEGMENT+383	
  1472                                  ENTLAST	EQU	ENTFREE+2	; DATASEGMENT+385	
  1473                                  NXTCLUSNUM EQU	ENTLAST+2	; DATASEGMENT+387	
  1474                                  GROWCNT	EQU	NXTCLUSNUM+2	; DATASEGMENT+389	
  1475                                  CURBUF	EQU	GROWCNT+4	; DATASEGMENT+393	
  1476                                  VOLID	EQU	CURBUF+4	; DATASEGMENT+397	
  1477                                  NULLDEVPT EQU	VOLID+1		; DATASEGMENT+398	
  1478                                  CINSAV	EQU	NULLDEVPT+4	; DATASEGMENT+402	
  1479                                  CINDSAV EQU	CINSAV+4	; DATASEGMENT+406	
  1480                                  COUTDSAV EQU	CINDSAV+1	; DATASEGMENT+407	
  1481                                  COUTSAV EQU	COUTDSAV+1	; DATASEGMENT+408 
  1482                                          
  1483                                  	;PUBLIC  SaveBX
  1484                                  SaveBX	EQU	COUTSAV+4 	; DATASEGMENT+412 ; DW ?
  1485                                          ;PUBLIC  SaveDS
  1486                                  SaveDS  EQU	SaveBX+2  	; DATASEGMENT+414 ; DW ?
  1487                                          ;I_AM    ConC_spsave,WORD
  1488                                  ConC_spsave EQU	SaveDS+2	; DATASEGMENT+416 
  1489                                  
  1490                                          ;I_AM    exit_code,WORD		; exit code of last proc.
  1491                                          ;I_am    exit_type,BYTE		; type of exit...
  1492                                  exit_code EQU	ConC_spsave+2	; DATASEGMENT+418 
  1493                                  exit_type EQU	exit_code+2	; DATASEGMENT+420 
  1494                                  
  1495                                  ;       IF      IBM
  1496                                  ;;For 2.00 this pads the DOS so that on a 2 disk IBM PC with no
  1497                                  ;;CONFIG.SYS file the space taken up by BIOS, DOS, res COMMAND is
  1498                                  ;;about 24K
  1499                                  ;IBMPAD  DB      540h DUP(?)
  1500                                  ;       ENDIF
  1501                                  
  1502                                  ; make those pushes fast!!!
  1503                                  ;EVEN
  1504                                          ;DB      0A0H DUP (?)
  1505                                          ;I_am    AuxStack,0A0h
  1506                                          ;I_AM    DSKSTACK,0A0h		; Stack space
  1507                                  AUXSTACK EQU	exit_type+2+160	; DATASEGMENT+422+160
  1508                                  DSKSTACK EQU	AUXSTACK+160	; DATASEGMENT+742
  1509                                  
  1510                                  	;PUBLIC  IOSTACK
  1511                                  ;IOSTACK LABEL   BYTE
  1512                                  IOSTACK EQU	DSKSTACK+160	; DATASEGMENT+902	
  1513                                  
  1514                                          ;PUBLIC  NSS
  1515                                  ;NSS         DW      ?
  1516                                  ;        PUBLIC  NSP
  1517                                  ;NSP         DW      ?
  1518                                  NSS	EQU	IOSTACK+0	; DATASEGMENT+902
  1519                                  NSP	EQU	NSS+2		; DATASEGMENT+904
  1520                                  
  1521                                  
  1522                                  ;============================================================================
  1523                                  ; XENIX.ASM
  1524                                  ;============================================================================
  1525                                  ; 02/04/2018
  1526                                  
  1527                                  ;DATA        SEGMENT BYTE PUBLIC 'DATA'
  1528                                  ;
  1529                                  ;open_name   DW  ?
  1530                                  ;            DW  ?
  1531                                  ;open_access DB  ?
  1532                                  ;open_jfn    DW  ?                       ; accessed as DD
  1533                                  ;open_jfn_b  DW  ?                       ; accessed as DD with above
  1534                                  ;open_sfn    DW  ?
  1535                                  ;open_sfoff  DW  ?                       ; accessed as DD
  1536                                  ;open_sfn_b  DW  ?                       ; accessed as DD with above
  1537                                  ;open_devid  DB  ?
  1538                                  ;Cr_read_only    DB  ?
  1539                                  ;rename_source   DD  ?
  1540                                  ;rename_dest     DD  ?
  1541                                  ;
  1542                                  ;DATA        ENDS
  1543                                  
  1544                                  open_name    equ NSP+2		; DATASEGMENT+906
  1545                                  open_access  equ open_name+4	; DATASEGMENT+910
  1546                                  open_jfn     equ open_access+1	; DATASEGMENT+911
  1547                                  open_jfn_b   equ open_jfn+2	; DATASEGMENT+913
  1548                                  open_sfn     equ open_jfn_b+2	; DATASEGMENT+915
  1549                                  open_sfoff   equ open_sfn+2	; DATASEGMENT+917
  1550                                  open_sfn_b   equ open_sfoff+2	; DATASEGMENT+919
  1551                                  open_devid   equ open_sfn_b+2	; DATASEGMENT+921
  1552                                  Cr_read_only equ open_devid+1	; DATASEGMENT+922
  1553                                  rename_source equ Cr_read_only+1 ; DATASEGMENT+923
  1554                                  rename_dest  equ rename_source+4 ; DATASEGMENT+927
  1555                                  ;		
  1556                                  
  1557                                  ;============================================================================
  1558                                  ; XENIX2.ASM
  1559                                  ;============================================================================
  1560                                  ; 02/04/2018
  1561                                  
  1562                                  ;DATA        SEGMENT BYTE PUBLIC 'DATA'
  1563                                  
  1564                                  ;PushSave    DW      ?
  1565                                  ;PushES      DW      ?
  1566                                  ;PushBX      DW      ?
  1567                                  ;xenix_count DW      ?
  1568                                  
  1569                                  ;DATA	ENDS
  1570                                  
  1571                                  ;align 2
  1572                                  
  1573                                  ; 15/04/2018
  1574                                  
  1575                                  PushSave     equ rename_dest+4	; DATASEGMENT+932
  1576                                  PushES:      equ PushSave+2	; DATASEGMENT+934
  1577                                  PushBX:      equ PushES+2	; DATASEGMENT+936
  1578                                  xenix_count  equ PushBX+2	; DATASEGMENT+938
  1579                                  
  1580                                  ; 16/04/2018
  1581                                  ;sf_default_number equ 5
  1582                                  ;sf_entry_size equ SF_ENTRY.size ; 40
  1583                                  				
  1584                                  
  1585                                  ; *****	; Total uninitialized data (segment) size = 940 bytes ; *****
  1586                                  ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1587                                  
  1588                                  ;============================================================================
  1589                                  ; MSHEAD.ASM
  1590                                  ;============================================================================
  1591                                  
  1592                                  [BITS 16]
  1593                                  [ORG 0]
  1594                                  
  1595                                  START:
  1596 00000000 E9BC40                          JMP     DOSINIT
  1597                                  
  1598                                  ;============================================================================
  1599                                  ; MSDATA.ASM
  1600                                  ;============================================================================
  1601                                  
  1602                                  ;SUBTTL Initialized data and data used at DOS initialization
  1603                                  ;PAGE
  1604                                  
  1605                                  ; DATA AREA for MS-DOS
  1606                                  
  1607                                  ;IFNDEF  KANJI
  1608                                  ;KANJI   EQU     0       ;FALSE
  1609                                  ;ENDIF
  1610                                  
  1611                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
  1612                                  ;        EXTRN   international_table:BYTE
  1613                                  ;        EXTRN   Current_Country:WORD
  1614                                  
  1615                                  ;	ORG     0
  1616                                  
  1617                                  ;CONSTRT EQU	$		; Start of constants segment
  1618                                  
  1619                                  ;       PUBLIC  DevStrLen
  1620                                  DEVSTRLEN:
  1621 00000003 03                      	DB	3		; Size of below
  1622                                  ;	PUBLIC  DevString
  1623                                  DEVSTRING:
  1624 00000004 444556                  	DB	"DEV"		; Dummy device directory
  1625                                  
  1626                                  ;
  1627                                  ; Table of routines for assignable devices
  1628                                  ;
  1629                                  ; MSDOS allows assignment if the following standard devices:
  1630                                  ;   stdin  (usually CON input)
  1631                                  ;   stdout (usually CON output)
  1632                                  ;   auxin  (usually AUX input)
  1633                                  ;   auxout (usually AUX output)
  1634                                  ;   stdlpt (usually PRN output)
  1635                                  ;
  1636                                  ; SPECIAL NOTE:
  1637                                  ;   Status of a file is a strange idea.  We choose to handle it in this manner:
  1638                                  ;   If we're not at end-of-file, then we always say that we have a character.
  1639                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag.  In this
  1640                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  1641                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  1642                                  ;   as EOF).
  1643                                  
  1644                                  ; Default FCBs for boot up
  1645                                  
  1646                                  ;sf_entry_size equ SF_ENTRY.size
  1647                                  
  1648                                  SFTABL:	   ; LABEL   DWORD		; file table
  1649 00000007 FFFF                    		DW -1
  1650 00000009 FFFF                    		DW -1
  1651 0000000B 0500                    		DW  sf_default_number  ; Number of entries in table
  1652 0000000D 00<rept>                		times (sf_default_number*sf_entry_size) db 0
  1653                                  
  1654 000000D5 00                      NoSetDir:	db  0			; true -> do not set directory
  1655 000000D6 00                      DidCTRLC:	db  0			; true -> we did a ^C exit
  1656 000000D7 00                      SpaceFlag:	db  0			; true -> embedded spaces are allowed
  1657                                                                          ; in FCB
  1658                                  ; the next two variables relate to the position of the logical stdout/stdin
  1659                                  ; cursor.  They are only meaningful when stdin/stdout are assigned to the
  1660                                  ; console.
  1661                                  
  1662 000000D8 00                      CARPOS:		db  0			; cursor position in stdin
  1663 000000D9 00                      STARTPOS:	db  0			; position of cursor at beginning
  1664                                                                          ; of buffered input call
  1665 000000DA 00                      PFLAG:		db  0
  1666 000000DB 00                      VERFLG:		db  0			; Initialize with verify off
  1667 000000DC 0000                    CONTPOS:	dw  0
  1668                                          ; PUBLIC  CHARCO
  1669 000000DE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  1670                                  
  1671                                          ;I_AM    DMAADD,DWORD 
  1672 000000DF 8000                    DMAADD:		dw  80H			; User's disk transfer address
  1673 000000E1 0000                                    dw  0			; (disp/seg)
  1674                                              ;ORG     $-CONSTRT-4
  1675                                              ;DW      80H
  1676                                              ;DW      ?
  1677                                  
  1678 000000E3 0000                    ENDMEM:		dw  0
  1679                                  
  1680                                              ;PUBLIC  switch_character
  1681                                  switch_character: 
  1682 000000E5 2F                      		DB  '/'
  1683                                  
  1684                                              ;PUBLIC  device_availability
  1685                                  device_availability:
  1686 000000E6 FF                      		DB  0FFH
  1687                                  
  1688                                              ;I_AM    FirstArena,WORD        
  1689 000000E7 0000                    FirstArena:	dw 0			; first free block found
  1690 000000E9 0000                    BestArena:	dw 0			; best free block found
  1691 000000EB 0000                    LastArena:	dw 0			; last free block found
  1692 000000ED 00                      AllocMethod:	db 0		        ; how to alloc first(best)last
  1693 000000EE 0000                    arena_head:	dw 0
  1694                                  
  1695                                  ; ****************************************************************************
  1696                                  ; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  1697                                  ; ****************************************************************************
  1698                                  ; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  1699                                  ;
  1700                                  ;	AH = 52h
  1701                                  ;
  1702                                  ;	on return:
  1703                                  ;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  1704                                  ;		Known "invars" fields follow (varies with DOS version):
  1705                                  ;
  1706                                  ;	Offset Size		 Description
  1707                                  ;
  1708                                  ;	 -12   word   sharing retry count (DOS 3.1-3.3)
  1709                                  ;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  1710                                  ;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  1711                                  ;	  -4   word   pointer in DOS code segment of unread CON input;
  1712                                  ;		      0 indicates no unread input (DOS 3.x)
  1713                                  ;	  -2   word   segment of first Memory Control Block (MCB)
  1714                                  ;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  1715                                  ;	  04   dword  pointer to DOS System File Table (SFT)
  1716                                  ;	  08   dword  pointer to $CLOCK device driver
  1717                                  ;	  0C   dword  pointer to CON device driver
  1718                                  ;	  10   byte   number of logical drives in system
  1719                                  ;	  11   word   maximum bytes/block of any block device
  1720                                  ;	  13   dword  pointer to DOS cache buffer header
  1721                                  ;	  17 18bytes  NUL device header, first 4 bytes of device header
  1722                                  ;		      point to the next device in device chain
  1723                                  ;
  1724                                  ; ****************************************************************************
  1725                                  
  1726                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  1727                                  ; size of this block
  1728                                  
  1729                                              ;PUBLIC  SYSINITVAR
  1730                                  
  1731                                  SYSINITVAR:	; LABEL   WORD
  1732                                          ;I_AM	DPBHEAD,DWORD           
  1733 000000F0 00000000                DPBHEAD:	dd	0		; Pointer to head of DPB-FAT list
  1734                                          ;I_AM    sft_addr,DWORD      
  1735 000000F4 [0700]                  SFT_ADDR:	dw	SFTABL		; Pointer to first FCB table
  1736 000000F6 0000                                    dw	0  
  1737                                  	    ;ORG     $-CONSTRT-4
  1738                                              ;short_addr  SFTABL
  1739                                              ;DW      ?                   ; DOS segment set at INIT
  1740                                  
  1741                                  ; The following address points to the CLOCK device
  1742 000000F8 00000000                BCLOCK:		dd	0
  1743                                  ; The following address is used by DISKSTATCHK it is always points to the
  1744                                  ; console input device header
  1745 000000FC 00000000                BCON:		dd	0		; Console device entry points
  1746 00000100 00                      NUMIO:		db	0		; Number of disk tables
  1747 00000101 0000                    MAXSEC:		dw 	0		; Maximum allowed sector size
  1748 00000103 00000000                BUFFHEAD:	dd	0		; Pointer to head of buffer queue
  1749                                  DEVHEAD:	; LABEL   DWORD	
  1750 00000107 00000000                NULDEV:		dd	0		; Set to list start passed by 
  1751                                  					; BIOS at DOS Init
  1752 0000010B 0480                    		dw	DEVTYP | ISNULL	; DEVTYP OR ISNULL	
  1753 0000010D [6808]                  		dw	SNULDEV
  1754 0000010F [7308]                          	dw	INULDEV
  1755 00000111 4E554C2020202020                	db	"NUL     "
  1756                                  ; ---
  1757                                          ;i_am    DAY,BYTE
  1758 00000119 00                      DAY:		DB  0		
  1759 0000011A 00                      MONTH:		DB  0
  1760 0000011B 0000                    YEAR:		DW  0
  1761 0000011D FFFF                    DAYCNT:		DW  -1
  1762 0000011F 00                      WEEKDAY:	DB  0
  1763                                  	;ORG     $-CONSTRT-7
  1764                                          ;DB      0,0
  1765                                          ;DW      0,-1
  1766                                          ;DB      0
  1767                                  
  1768 00000120 00                      CURDRV:		DB  0			; Default to drive A
  1769 00000121 0000                    LASTENT:	DW  0
  1770 00000123 00                      INDOS:		DB  0			; DOS status for interrupt processing
  1771                                              ;ORG     $-CONSTRT-1
  1772                                              ;DB      0
  1773 00000124 00                      ERRORMODE:	DB  0			; Flag for INT 24 processing
  1774                                          ;PUBLIC  WPErr
  1775 00000125 FF                      WPERR:		DB  -1			; Write protect error flag
  1776 00000126 00                      CONSWAP:	DB  0
  1777                                          ;PUBLIC  IDLEINT
  1778 00000127 01                      IDLEINT:	DB  1
  1779                                          ;PUBLIC  CNTCFLAG
  1780 00000128 00                      CNTCFLAG:	DB  0			; ^C check in dispatch disabled
  1781                                  
  1782                                          ;PUBLIC  LastBuffer
  1783                                  LASTBUFFER:	;  LABEL   DWORD	; Buffer queue recency pointer
  1784 00000129 FFFF                    		DW	-1
  1785 0000012B FFFF                    		DW	-1
  1786                                  
  1787                                  ; Combination of all device call parameters
  1788                                  
  1789                                  ; 29/03/2018
  1790                                          ;PUBLIC  DEVCALL
  1791                                  ;DEVCALL SRHEAD  <>			; (Structure variable)
  1792                                  DEVCALL:
  1793 0000012D 00                      DEVCALL_REQLEN:	 db	0		;Length in bytes of request block	
  1794 0000012E 00                      DEVCALL_REQUNIT: db	0		;Device unit number
  1795 0000012F 00                      DEVCALL_REQFUNC: db	0		;Type of request
  1796 00000130 0000                    DEVCALL_REQSTAT: dw	0		;Status Word
  1797 00000132 00<rept>                		 times	8 db 0		;Reserved for queue links	
  1798                                  
  1799                                  CALLUNIT:	; LABEL   BYTE
  1800                                  CALLFLSH:	; LABEL   WORD
  1801                                  	;I_AM    CALLMED,BYTE
  1802 0000013A 00                      CALLMED:	db	0
  1803                                  CALLBR:		; LABEL   DWORD
  1804                                          ;PUBLIC  CALLXAD
  1805                                  ;CALLXAD     LABEL   DWORD
  1806                                  CALLXAD:
  1807                                          ;I_AM    CALLRBYT,BYTE
  1808 0000013B 00                      CALLRBYT:	db	0        
  1809 0000013C 00<rept>                		times	3 db 0
  1810                                          ;PUBLIC CallBPB
  1811                                  CALLBPB:	; LABEL   DWORD
  1812                                          ;I_AM    CALLSCNT,WORD
  1813 0000013F 0000                    CALLSCNT:	dw	0
  1814 00000141 0000                    CALLSSEC:	dw	0
  1815                                          ;I_AM    CALLDEVAD,DWORD
  1816 00000143 00000000                CALLDEVAD:	dd	0		; stash for device entry point
  1817                                  
  1818                                  ; Same as above for I/O calls
  1819                                  
  1820                                  ; 29/03/2018
  1821                                          ;PUBLIC  IOCall
  1822                                  ;IOCALL  SRHEAD  <>			; (Structure variable)
  1823                                  IOCALL:
  1824 00000147 00                      IOCALL_REQLEN:	db	0		;Length in bytes of request block	
  1825 00000148 00                      IOCALL_REQUNIT:	db	0		;Device unit number
  1826 00000149 00                      IOCALL_REQFUNC: db	0		;Type of request
  1827 0000014A 0000                    IOCALL_REQSTAT: dw	0		;Status Word
  1828 0000014C 00<rept>                		times	8 db 0		;Reserved for queue links
  1829                                  IOFLSH:		; LABEL   WORD
  1830                                          ;PUBLIC  IORCHR
  1831                                  IORCHR:		; LABEL   BYTE
  1832 00000154 00                      IOMED:		db	0
  1833 00000155 00000000                IOXAD:		dd	0
  1834 00000159 0000                    IOSCNT:		dw	0
  1835 0000015B 0000                    IOSSEC:		dw	0
  1836                                  
  1837                                  ; Call struct for DSKSTATCHK
  1838                                          ;PUBLIC  DSKSTCALL
  1839 0000015D 0E                      DSKSTCALL:	DB	DRDNDHL
  1840 0000015E 00                                      DB	0
  1841                                          ;PUBLIC  DSKSTCOM
  1842 0000015F 05                      DSKSTCOM:	DB	DEVRDND
  1843 00000160 0000                    DSKSTST:	DW	0
  1844 00000162 00<rept>                                TIMES	8 DB 0
  1845 0000016A 00                      DSKCHRET:	DB	0
  1846 0000016B [5D03]                  	        DW	DEVIOBUF
  1847 0000016D 0000                                    DW      0		; DOS segment set at Init
  1848                                          ;PUBLIC  DSKSTCNT
  1849 0000016F 0100                    DSKSTCNT:	DW      1
  1850 00000171 0000                    		DW      0
  1851                                  
  1852                                  ; ---
  1853                                  ; Days in year
  1854                                          ;i_am    YRTAB,8
  1855                                  	;ORG     $-CONSTRT-8
  1856                                  
  1857                                  YRTAB:   
  1858 00000173 C8A6                    	DB	200,166			; Leap year
  1859 00000175 C8A5                    	DB	200,165
  1860 00000177 C8A5                    	DB	200,165
  1861 00000179 C8A5                    	DB	200,165
  1862                                  
  1863                                  
  1864                                  ; Days of each month
  1865                                          ;i_am    MONTAB,12
  1866                                          ;ORG     $-CONSTRT-12
  1867                                  MONTAB:        
  1868 0000017B 1F                      	DB      31                      ; January
  1869                                  february:
  1870 0000017C 1C                      	DB	28 			; February--reset each 
  1871                                  					; time year changes
  1872 0000017D 1F                              DB      31                      ; March
  1873 0000017E 1E                              DB      30                      ; April
  1874 0000017F 1F                              DB      31                      ; May
  1875 00000180 1E                              DB      30                      ; June
  1876 00000181 1F                              DB      31                      ; July
  1877 00000182 1F                              DB      31                      ; August
  1878 00000183 1E                              DB      30                      ; September
  1879 00000184 1F                              DB      31                      ; October
  1880 00000185 1E                              DB      30                      ; November
  1881 00000186 1F                              DB      31                      ; December
  1882                                  
  1883                                          ;IF      NOT IBM
  1884                                          ;PUBLIC  OEM_HANDLER
  1885 00000187 FFFFFFFF                OEM_HANDLER     DD  -1
  1886                                          ;ENDIF
  1887                                  
  1888                                  ;WARNING For HIGHMEM version, these two vars must be at the end of the
  1889                                  ; Constants segment to prevent them getting overwritten.
  1890                                          ;I_AM    CurrentPDB,WORD
  1891                                          ;i_am    CreatePDB,BYTE
  1892 0000018B 0000                    CurrentPDB:	dw 0
  1893 0000018D 00                      CreatePDB:	db 0			; flag for creating a process
  1894                                  
  1895                                          ;PUBLIC  LEAVEADDR
  1896                                  align 2
  1897                                  LEAVEADDR:	; LABEL WORD
  1898                                          ;short_addr    _LEAVE
  1899 0000018E [3007]                  	dw	_LEAVE
  1900                                  
  1901                                  ;CONSTANTS       ENDS
  1902                                  
  1903                                  ;============================================================================
  1904                                  ; DOSMES.ASM
  1905                                  ;============================================================================
  1906                                  ; 02/04/2018
  1907                                  
  1908                                  ;CONSTANTS	SEGMENT BYTE PUBLIC 'CONST'
  1909                                  
  1910                                  DIVMES:
  1911 00000190 0D0A44697669646520-     	DB      13,10,"Divide overflow",13,10
  1912 00000199 6F766572666C6F770D-
  1913 000001A2 0A                 
  1914                                  DivMesLen:
  1915 000001A3 13                      	DB	$-DIVMES	; Length of the above message in bytes
  1916                                  
  1917                                  ;
  1918                                  ; The next variable points to the country table for the current country
  1919                                  ;       ( the table returned by the AL=0 INTERNATIONAL call).
  1920                                  ;
  1921                                  
  1922                                  Current_Country:
  1923 000001A4 [A801]                  	DW	USTABLE
  1924                                  ;
  1925                                  ; The international table(s).
  1926                                  ; This is simply a sequence of tables of the following form:
  1927                                  ;
  1928                                  ;               BYTE  Size of this table excluding this byte and the next
  1929                                  ;               BYTE  Country code represented by this table
  1930                                  ;	                A sequence of n bytes, where n is the number specified
  1931                                  ;                       by the first byte above and is not > internat_block_max,
  1932                                  ;                       in the correct order for being returned by the
  1933                                  ;                       INTERNATIONAL call as follows:
  1934                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  1935                                  ;		5 BYTE	Currency symbol null terminated
  1936                                  ;		2 BYTE	thousands separator null terminated
  1937                                  ;		2 BYTE	Decimal point null terminated
  1938                                  ;		2 BYTE	Date separator null terminated
  1939                                  ;		2 BYTE	Time separator null terminated
  1940                                  ;		1 BYTE	Bit field.  Currency format.
  1941                                  ;			Bit 0.  =0 $ before #  =1 $ after #
  1942                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  1943                                  ;		1 BYTE	No. of significant decimal digits in currency
  1944                                  ;		1 BYTE	Bit field.  Time format.
  1945                                  ;			Bit 0.  =0 12 hour clock  =1 24 hour
  1946                                  ;		WORD	Segment offset for address of case conversion routine
  1947                                  ;		WORD	RESERVED.  Filled in by DOS.  Segment value for above routine
  1948                                  ;		2 BYTE	Data list separator null terminated.
  1949                                  ;                  NOTE: The segment part of the DWORD Map_call is set
  1950                                  ;                       by the INTERNATIONAL call. Do not try to initialize
  1951                                  ;                       it to anything meaningful.
  1952                                  ;
  1953                                  ; The list of tables is terminated by putting a byte of -1 after the last
  1954                                  ;       table (a table with length -1).
  1955                                  
  1956                                  international_table:
  1957                                  		
  1958 000001A6 18                      	db INTERNAT_BLOCK.size	; Size in bytes of this table
  1959 000001A7 01                      	db 1			; Country code
  1960                                  USTABLE:	; INTERNAT_BLOCK structure
  1961 000001A8 0000                    	dW 0		; .Date_tim_format
  1962 000001AA 2400000000              	db '$',0,0,0,0	; .Currency_sym
  1963 000001AF 2C00                    	db ',',0	; .Thous_sep	
  1964 000001B1 2E00                    	db '.',0	; .Decimal_sep
  1965 000001B3 2D00                    	db '-',0	; .Date_sep
  1966 000001B5 3A00                    	db ':',0	; .Time_sep
  1967 000001B7 00                      	db 0		; .Bit_field
  1968 000001B8 02                      	db 2		; .Currency_cents
  1969 000001B9 00                      	db 0		; .Time_24
  1970 000001BA [FE08]0000              	dw MAP_DCASE,0	; .Map_call
  1971 000001BE 2C00                    	db ',',0	; .Data_sep
  1972                                  
  1973                                  ;	Tables for the IBM PC character set follow.  The values
  1974                                  ;	associated with some of the currency symbols may change with
  1975                                  ;	other character sets.  You may wish to add or delete country
  1976                                  ;	entries.  NOTE: It is not a mistake that the JAPANESE entry
  1977                                  ;	has different currency symbols for the KANJI and
  1978                                  ;	non-KANJI versions.
  1979                                  
  1980 000001C0 18                      	db INTERNAT_BLOCK.size	; Size in bytes of this table
  1981 000001C1 2C                      	db 44			; Country code
  1982                                  UKTABLE:
  1983 000001C2 0100                    	dW 1 ; Europe
  1984 000001C4 9C00000000              	db 9Ch,0,0,0,0
  1985 000001C9 2C00                    	db ',',0
  1986 000001CB 2E00                    	db '.',0
  1987 000001CD 2D00                    	db '-',0
  1988 000001CF 3A00                    	db ':',0
  1989 000001D1 00                      	db 0
  1990 000001D2 02                      	db 2
  1991 000001D3 00                      	db 0
  1992 000001D4 [FE08]0000              	dw MAP_DCASE,0
  1993 000001D8 2C00                    	db ',',0
  1994                                  
  1995 000001DA 18                      	db INTERNAT_BLOCK.size	; Size in bytes of this table
  1996 000001DB 31                      	db 49			; Country code
  1997                                  GRMTABLE:
  1998 000001DC 0100                    	dW 1
  1999 000001DE 444D000000              	db 'D','M',0,0,0
  2000 000001E3 2E00                    	db '.',0
  2001 000001E5 2C00                    	db ',',0
  2002 000001E7 2E00                    	db '.',0
  2003 000001E9 2E00                    	db '.',0
  2004 000001EB 03                      	db 3 ; bit 0 = 1 : Currency symbol last
  2005                                  	     ; bit 1 = 1 : space after currency symbol
  2006 000001EC 02                      	db 2
  2007 000001ED 01                      	db 1 ; 24 hour time		
  2008 000001EE [FE08]0000              	dW MAP_DCASE,0
  2009 000001F2 3B00                    	db ';',0
  2010                                  
  2011 000001F4 18                      	db INTERNAT_BLOCK.size	; Size in bytes of this table
  2012 000001F5 21                      	db 33			; Country code
  2013                                  FRNTABLE:
  2014 000001F6 0100                    	dW 1
  2015 000001F8 4600000000              	db 'F',0,0,0,0
  2016 000001FD 2000                    	db ' ',0
  2017 000001FF 2C00                    	db ',',0
  2018 00000201 2F00                    	db '/',0
  2019 00000203 3A00                    	db ':',0
  2020 00000205 03                      	db 3
  2021 00000206 02                      	db 2
  2022 00000207 01                      	db 1
  2023 00000208 [FE08]0000              	dw MAP_DCASE,0
  2024 0000020C 3B00                    	db ';',0
  2025                                  
  2026 0000020E 18                      	db INTERNAT_BLOCK.size	; Size in bytes of this table
  2027 0000020F 51                      	db 81			; Country code
  2028                                  JAPTABLE:
  2029 00000210 0200                    	dW 2 ; Japan
  2030 00000212 9D00000000              	db 9DH,0,0,0,0
  2031 00000217 2C00                    	db ',',0
  2032 00000219 2E00                    	db '.',0
  2033 0000021B 2D00                    	db '-',0
  2034 0000021D 3A00                    	db ':',0
  2035 0000021F 00                      	db 0
  2036 00000220 00                      	db 0
  2037 00000221 01                      	db 1
  2038 00000222 [FE08]0000              	dw MAP_DCASE,0
  2039 00000226 2C00                    	db ',',0
  2040                                  
  2041 00000228 FF                      	DB  -1              ; End of tables
  2042                                  
  2043                                  ;CONSTANTS       ENDS
  2044                                  
  2045                                  ;04/05/2018
  2046                                  ;============================================================================
  2047                                  ; 	Retro DOS v2.0
  2048                                  ;============================================================================
  2049 00000229 00                      	db 	0
  2050                                  RETRODOSMSG:
  2051 0000022A 0D0A                    	DB	13,10
  2052 0000022C 526574726F20444F53-     	db	"Retro DOS v2.0 by Erdogan Tan [2018]"
  2053 00000235 2076322E3020627920-
  2054 0000023E 4572646F67616E2054-
  2055 00000247 616E205B323031385D 
  2056 00000250 0D0A2400                	db	13,10,"$", 0 
  2057                                  
  2058                                  ;----------------------------------------------------------------------------
  2059                                  
  2060                                  align 2
  2061                                  
  2062                                  DATASEGMENT EQU $ ; 17/04/2018
  2063                                  
  2064                                  ;PAGE
  2065                                  ;        INCLUDE MSINIT.ASM
  2066                                  
  2067                                  ; 31/03/2018
  2068                                  
  2069                                  ;============================================================================
  2070                                  ; MSINIT.ASM
  2071                                  ;============================================================================
  2072                                  
  2073                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  2074                                  
  2075                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  2076                                  
  2077                                  ;       ORG     0                       ; reset to beginning of data segment
  2078                                  ; Init code below overlaps with data area
  2079                                  
  2080                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  2081 00000254 00<rept>                INITBLOCK:	TIMES 272 DB 0
  2082                                  
  2083 00000364 0000                    INITSP:		DW 0
  2084 00000366 0000                    INITSS:		DW 0
  2085 00000368 0000                    BUFFSTRT:	DW 0
  2086                                  
  2087                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  2088                                  ;
  2089                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  2090                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  2091                                  ;        IF      NOT IBM
  2092                                  ;        EXTRN   HEADER:BYTE
  2093                                  ;        ENDIF
  2094                                  
  2095                                  MOVDPB:
  2096                                  ; This section of code is safe from being overwritten by block move
  2097                                          ;MOV     SP,[CS:INITSP]
  2098                                          ;MOV     SS,[CS:INITSS]
  2099                                          ; 30/03/2018
  2100 0000036A 8B26[6403]              	MOV     SP,[INITSP]
  2101 0000036E 8E16[6603]                      MOV     SS,[INITSS]
  2102                                  
  2103                                  	;REP	MOVS BYTE PTR [DI], [SI]
  2104 00000372 F3A4                            REP     MOVSB
  2105 00000374 FC                              CLD
  2106 00000375 268916[E100]                    MOV     [ES:DMAADD+2],DX
  2107 0000037A 8B36[F000]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  2108 0000037E 268C06[F200]                    MOV     [ES:DPBHEAD+2],ES
  2109 00000383 268C06[F600]                    MOV     [ES:SFT_ADDR+2],ES
  2110 00000388 8A0E[0001]                      MOV     CL,[NUMIO]	; Number of DPBs
  2111 0000038C 30ED                            XOR     CH,CH
  2112                                  SETFINDPB:
  2113 0000038E 268C441A                        MOV     [ES:SI+1AH],ES
  2114 00000392 26C64417FF                      MOV     BYTE [ES:SI+17H],-1  ; Never accessed before
  2115 00000397 83C65E                          ADD     SI,DPBSIZ       ; Point to next DPB
  2116 0000039A E2F2                            LOOP    SETFINDPB
  2117 0000039C 83EE5E                          SUB     SI,DPBSIZ
  2118 0000039F 26C7441AFFFF                    MOV     WORD [ES:SI+1AH],-1
  2119 000003A5 8B3E[6803]                      MOV     DI,[BUFFSTRT]                   ; Set up one default buffer
  2120 000003A9 268C06[0501]                    MOV     [ES:BUFFHEAD+2],ES
  2121 000003AE 26893E[0301]                    MOV     [ES:BUFFHEAD],DI
  2122 000003B3 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  2123 000003B9 26C6450600                      MOV     BYTE [ES:DI+6],FREEPRI
  2124 000003BE 26C705FFFF                      MOV     WORD [ES:DI],-1
  2125 000003C3 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  2126 000003C9 06                              PUSH    ES
  2127 000003CA 42                              INC     DX			; Leave enough room for the ARENA
  2128 000003CB C606[8D01]FF                    MOV     BYTE [CreatePDB],0FFh	; create jfns and set CurrentPDB
  2129                                          ;invoke $CREATE_PROCESS_DATA_BLOCK   ; Set up segment
  2130 000003D0 E8B207                  	CALL	_$CREATE_PROCESS_DATA_BLOCK  ; 30/03/2018
  2131 000003D3 07                              POP     ES
  2132                                  ;
  2133                                  ; set up memory arena
  2134                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  2135                                  ; At this point a process header has been built where the start of the 
  2136                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  2137                                  ; below be careful about references off of CS.
  2138                                  ;
  2139                                  	; 13/04/2018 ; *
  2140                                          ;PUSH	AX ; *
  2141                                          ;MOV	AX,[CurrentPDB]
  2142 000003D4 2EA1[8B01]                      MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  2143 000003D8 26A3[8B01]              	MOV     [ES:CurrentPDB],AX	; Put it in the REAL location
  2144 000003DC 26C606[8D01]00                  MOV     BYTE [ES:CreatePDB],0	; reset flag in REAL location
  2145 000003E2 48                              DEC     AX
  2146 000003E3 26A3[EE00]                      MOV     [ES:arena_head],AX
  2147 000003E7 1E                              PUSH    DS
  2148 000003E8 8ED8                            MOV     DS,AX
  2149 000003EA C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  2150 000003EF C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  2151 000003F5 262B06[E300]                    SUB     AX,[ES:ENDMEM]
  2152 000003FA F7D8                            NEG     AX
  2153 000003FC 48                              DEC     AX
  2154 000003FD A30300                          MOV     [ARENA.SIZE],AX
  2155 00000400 1F                              POP     DS
  2156                                          ;POP	AX ; *
  2157                                  
  2158 00000401 BF[0D00]                        MOV     DI,SFTABL + SFT.SFT_TABLE   ; Point to sft 0
  2159 00000404 B003                            MOV     AL,3
  2160 00000406 AA                              STOSB           ; Adjust Refcount
  2161 00000407 BF[F000]                	MOV     DI,SYSINITVAR  ; 16/03/2018
  2162 0000040A CB                              RETF
  2163                                  	
  2164                                  	; 18/04/2018
  2165                                  FILL1	equ	$ - DATASEGMENT
  2166                                  ; ---------------------------------------------------------------------------
  2167 0000040B 00<rept>                	times (940-FILL1) db 0
  2168                                  
  2169                                  ;============================================================================
  2170                                  ; MSCODE.ASM
  2171                                  ;============================================================================
  2172                                  
  2173                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  2174                                  ; 03/03/2018
  2175                                  
  2176                                  ;
  2177                                  ; MSCODE.ASM -- MSDOS code
  2178                                  ;
  2179                                  
  2180                                  ;INCLUDE DOSSEG.ASM
  2181                                  ;INCLUDE STDSW.ASM
  2182                                  
  2183                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  2184                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  2185                                  
  2186                                  ;.xcref
  2187                                  ;INCLUDE DOSSYM.ASM
  2188                                  ;INCLUDE DEVSYM.ASM
  2189                                  ;.cref
  2190                                  ;.list
  2191                                  
  2192                                  ;IFNDEF  KANJI
  2193                                  ;KANJI   EQU     0       ; FALSE
  2194                                  ;ENDIF
  2195                                  
  2196                                  ;IFNDEF  IBM
  2197                                  ;IBM     EQU     0
  2198                                  ;ENDIF
  2199                                  
  2200                                  ;IFNDEF  HIGHMEM
  2201                                  ;HIGHMEM  EQU     0
  2202                                  ;ENDIF
  2203                                  
  2204                                          ;i_need  USER_SP,WORD
  2205                                          ;i_need  USER_SS,WORD
  2206                                          ;i_need  SAVEDS,WORD
  2207                                          ;i_need  SAVEBX,WORD
  2208                                          ;i_need  INDOS,BYTE
  2209                                          ;i_need  NSP,WORD
  2210                                          ;i_need  NSS,WORD
  2211                                          ;i_need  CURRENTPDB,WORD
  2212                                          ;i_need  AUXSTACK,BYTE
  2213                                          ;i_need  CONSWAP,BYTE
  2214                                          ;i_need  IDLEINT,BYTE
  2215                                          ;i_need  NOSETDIR,BYTE
  2216                                          ;i_need  ERRORMODE,BYTE
  2217                                          ;i_need  IOSTACK,BYTE
  2218                                          ;i_need  WPERR,BYTE
  2219                                          ;i_need  DSKSTACK,BYTE
  2220                                          ;i_need  CNTCFLAG,BYTE
  2221                                          ;i_need  LEAVEADDR,WORD
  2222                                          ;i_need  NULLDEVPT,DWORD
  2223                                  
  2224                                          ;IF NOT IBM
  2225                                          ;i_need  OEM_HANDLER,DWORD
  2226                                          ;ENDIF
  2227                                  
  2228                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  2229                                  
  2230                                  ; ----------------------------------------------------------------------------
  2231                                  ; BREAK   <Copyright notice and version>
  2232                                  ; ----------------------------------------------------------------------------
  2233                                  
  2234                                  CODSTRT EQU     $
  2235                                  
  2236                                          ;IF      NOT IBM
  2237                                          ;IF      NOT KANJI
  2238                                          ;PUBLIC  HEADER
  2239 00000600 0D0A4D6963726F736F-     HEADER: DB      13,10,"Microsoft MS-DOS version "
  2240 00000609 6674204D532D444F53-
  2241 00000612 2076657273696F6E20 
  2242 0000061B 32                              DB      DOS_MAJOR_VERSION + "0"
  2243 0000061C 2E                              DB      "."
  2244 0000061D 31                              DB      (DOS_MINOR_VERSION / 10) + "0"
  2245                                          ;DB	(DOS_MINOR_VERSION MOD 10) + "0"
  2246 0000061E 31                              DB	(DOS_MINOR_VERSION % 10) + "0"
  2247                                  	;IF      HIGHMEM
  2248                                          ;DB      "H"
  2249                                          ;ENDIF
  2250                                          ;ENDIF
  2251                                  ;        IF      KANJI
  2252                                  ;        PUBLIC  HEADER
  2253                                  ;HEADER  DB      13,10,82h,"M"+1fh,82h,"i"+20h,82h,"c"+20h,82h,"r"+20h,82h,"o"+20h
  2254                                  ;        DB      82h,"s"+20h,82h,"o"+20h,82h,"f"+20h,82h,"t"+20h
  2255                                  ;        DB      81h,40h,82h,"M"+1fh,82h,"S"+1fh,81h,5dh+1fh
  2256                                  ;        DB      82h,"D"+1fh,82h,"O"+1fh,82h,"S"+1fh,81h,40h
  2257                                  ;        DB      82h,DOS_MAJOR_VERSION+"0"+1fh
  2258                                  ;        DB      81h,25h+1fh
  2259                                  ;        DB      82h,(DOS_MINOR_VERSION / 10)+"0"+1fh
  2260                                  ;        DB      82h,(DOS_MINOR_VERSION MOD 10)+"0"+1fh
  2261                                  ;        DB      94h,0c5h
  2262                                  ;        ENDIF
  2263 0000061F 0D0A                            DB      13,10
  2264 00000621 436F70797269676874-             DB      "Copyright 1981,82,83 Microsoft Corp.",13,10,"$"
  2265 0000062A 20313938312C38322C-
  2266 00000633 3833204D6963726F73-
  2267 0000063C 6F667420436F72702E-
  2268 00000645 0D0A24             
  2269                                          ;ENDIF
  2270                                  
  2271                                  ; ----------------------------------------------------------------------------
  2272                                  ; BREAK   <System call entry points and dispatcher>
  2273                                  ; ----------------------------------------------------------------------------
  2274                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  2275                                  
  2276                                          ;procedure   SYSTEM_CALL,NEAR
  2277                                  SYSTEM_CALL:
  2278                                  ;entry	QUIT				; INT 20H entry point
  2279                                  QUIT:
  2280 00000648 B400                            MOV     AH,0
  2281 0000064A EB44                            JMP     SHORT SAVREGS
  2282                                  
  2283                                  COMMAND:				; CODE XREF: STATCHK:loc_2C53j
  2284                                  	;IF	NOT IBM
  2285 0000064C 80FCF8                          CMP	AH,SET_OEM_HANDLER
  2286 0000064F 7221                            JB      SHORT NOTOEM
  2287                                  	; 18/07/2018
  2288 00000651 0F84E601                	je	_$SET_OEM_HANDLER	
  2289                                  
  2290                                  	;
  2291                                  	; 20/04/2018
  2292                                          ;JMP	_$SET_OEM_HANDLER
  2293                                  
  2294                                  	; Retro DOS v2.0 - 20/04/2018
  2295 00000655 83F8FF                  	CMP	AX, 0FFFFh
  2296                                  	;JNE	_$SET_OEM_HANDLER
  2297                                  	; 18/07/2018
  2298 00000658 0F85EA01                	jne	DO_OEM_FUNC
  2299                                  
  2300 0000065C 60                      	PUSHA
  2301 0000065D BE[2A02]                	MOV     SI,RETRODOSMSG
  2302                                          ;CALL	OUTMES
  2303                                  wrdosmsg:
  2304 00000660 B40E                    	mov	ah, 0Eh
  2305 00000662 BB0700                  	mov	bx, 7
  2306                                  wrdosmsg_nxt:
  2307 00000665 2EAC                    	cs	lodsb
  2308 00000667 3C24                    	cmp	al, '$'
  2309 00000669 7404                    	je	short wrdosmsg_ok		
  2310 0000066B CD10                    	int	10h
  2311 0000066D EBF6                    	jmp	short wrdosmsg_nxt
  2312                                  wrdosmsg_ok:
  2313 0000066F 61                      	POPA
  2314 00000670 EB05                    	JMP	SHORT BADCALL 
  2315                                  	;
  2316                                  
  2317                                  NOTOEM:
  2318                                  	;ENDIF
  2319                                  
  2320 00000672 80FC58                          CMP     AH,MAXCOM
  2321 00000675 7619                            JBE     SHORT SAVREGS
  2322                                  
  2323                                  BADCALL:
  2324 00000677 B000                            MOV     AL,0
  2325                                  ;entry	IRET
  2326                                  _IRET:
  2327 00000679 CF                              IRET
  2328                                  
  2329                                  ; ---------------------------------------------------------------------------
  2330                                  
  2331                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  2332                                  CALL_ENTRY:
  2333 0000067A 58                              POP     AX                      ; IP from the long call at 5
  2334 0000067B 58                              POP     AX                      ; Segment from the long call at 5
  2335                                          ;POP	WORD [user_SP]		; IP from the CALL 5
  2336 0000067C 2E8F06[8F03]                    POP	WORD [CS:user_SP] ; 12/03/2018
  2337 00000681 9C                      	PUSHF                           ; Start re-ordering the stack
  2338 00000682 FA                              CLI
  2339 00000683 50                              PUSH    AX                      ; Save segment
  2340                                          ;PUSH	WORD [user_SP]		; Stack now ordered as if INT had been used
  2341 00000684 2EFF36[8F03]                    PUSH	WORD [CS:user_SP] ; 12/03/2018
  2342 00000689 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  2343 0000068C 77E9                            JA      SHORT BADCALL
  2344 0000068E 88CC                            MOV     AH,CL
  2345                                  SAVREGS:
  2346 00000690 E8DC00                          CALL    save_world
  2347                                          ;MOV	[SaveDS],DS
  2348                                          ;MOV	[SaveBX],BX
  2349 00000693 2E8C1E[F203]                    MOV	[CS:SaveDS],DS	; 12/03/2018
  2350 00000698 2E891E[F003]                    MOV	[CS:SaveBX],BX	; 12/03/2018
  2351 0000069D 8CCB                            MOV     BX,CS
  2352 0000069F 8EDB                            MOV     DS,BX
  2353                                  ;ASSUME  DS:DOSGROUP
  2354 000006A1 FE06[2301]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  2355 000006A5 A1[8F03]                        MOV     AX,[user_SP]
  2356 000006A8 A3[DC05]                        MOV     [NSP],AX
  2357 000006AB A1[9103]                        MOV     AX,[user_SS]
  2358 000006AE A3[DA05]                        MOV     [NSS],AX
  2359 000006B1 58                              POP     AX
  2360 000006B2 50                              PUSH    AX
  2361 000006B3 8926[8F03]                      MOV     [user_SP],SP
  2362 000006B7 8C16[9103]                      MOV     [user_SS],SS
  2363                                  ;
  2364                                  ; save user stack in his area for later returns (possibly from EXEC)
  2365                                  ; Here comes multitasking!!!
  2366                                  ;
  2367 000006BB 8E1E[8B01]                      MOV     DS,[CurrentPDB]
  2368 000006BF 89262E00                        MOV     [PDB.USER_STACK],SP
  2369 000006C3 8C163000                        MOV     [PDB.USER_STACK+2],SS
  2370                                  
  2371 000006C7 8CCB                            MOV     BX,CS                   ; no holes here.
  2372 000006C9 8ED3                            MOV     SS,BX
  2373                                  ;ASSUME  SS:DOSGROUP
  2374                                  
  2375                                  ;entry	REDISP
  2376                                  REDISP:
  2377 000006CB BC[9A04]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  2378 000006CE FB                              STI                             ; Stack OK now
  2379 000006CF 0E                              PUSH    CS
  2380 000006D0 1F                              POP     DS
  2381 000006D1 30FF                            XOR     BH,BH
  2382 000006D3 883E[2601]                      MOV     [CONSWAP],BH
  2383 000006D7 C606[2701]01                    MOV     BYTE [IDLEINT],1
  2384 000006DC C606[D500]00                    MOV     BYTE [NoSetDir],0	; set directories on search
  2385 000006E1 88E3                            MOV     BL,AH
  2386 000006E3 D1E3                            SHL     BX,1
  2387 000006E5 FC                              CLD
  2388 000006E6 08E4                            OR      AH,AH
  2389 000006E8 741B                            JZ      SHORT DSKROUT		; ABORT
  2390 000006EA 80FC0C                          CMP     AH,12
  2391 000006ED 760A                            JBE     SHORT IOROUT		; Character I/O
  2392 000006EF 80FC51                          CMP     AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  2393 000006F2 7405                            JZ      SHORT IOROUT
  2394 000006F4 80FC50                          CMP     AH,SET_CURRENT_PDB
  2395 000006F7 750C                            JNZ     SHORT DSKROUT
  2396                                  IOROUT:
  2397 000006F9 803E[2401]00                    CMP     BYTE [ERRORMODE],0
  2398 000006FE 751E                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  2399 00000700 BC[DA05]                        MOV     SP,IOSTACK
  2400 00000703 EB19                            JMP     SHORT DISPCALL
  2401                                  
  2402                                  DSKROUT:
  2403 00000705 C606[2401]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  2404 0000070A C606[2501]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  2405                                                                          ; make sure flags are reset
  2406 0000070F BC[3A05]                        MOV     SP,DSKSTACK
  2407 00000712 F606[2801]FF                    TEST    BYTE [CNTCFLAG],-1
  2408 00000717 7405                            JZ      SHORT DISPCALL
  2409 00000719 50                              PUSH    AX
  2410                                          ;invoke	DSKSTATCHK
  2411 0000071A E85C24                          CALL	DSKSTATCHK
  2412 0000071D 58                      	POP     AX
  2413                                  DISPCALL:
  2414 0000071E FF36[8E01]                      PUSH    WORD [LEAVEADDR]
  2415 00000722 2EFFB7[8607]                    PUSH	WORD [CS:BX+DISPATCH]
  2416                                          ;PUSH	WORD [BX+DISPATCH]
  2417 00000727 8B1E[F003]                      MOV     BX,[SaveBX]
  2418 0000072B 8E1E[F203]                      MOV     DS,[SaveDS]
  2419                                  ;ASSUME	DS:NOTHING
  2420                                          ;return
  2421 0000072F C3                      	RETN	
  2422                                  
  2423                                  ;entry LEAVE
  2424                                  _LEAVE:
  2425                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  2426 00000730 FA                              CLI
  2427                                          ;DEC     BYTE [INDOS]
  2428                                          ;MOV     SP,[user_SP]
  2429                                          ;MOV     SS,[user_SS]
  2430                                          ; 12/03/2018
  2431 00000731 2EFE0E[2301]            	DEC     BYTE [CS:INDOS]
  2432 00000736 2E8B26[8F03]                    MOV     SP,[CS:user_SP]
  2433 0000073B 2E8E16[9103]                    MOV     SS,[CS:user_SS]
  2434 00000740 89E5                    	MOV     BP,SP
  2435                                  	;MOV	[BP.user_AX],AL	
  2436                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  2437 00000742 884600                          MOV     [BP],AL
  2438                                  	;MOV     AX,[NSP]
  2439                                          ;MOV     [user_SP],AX
  2440                                          ;MOV     AX,[NSS]
  2441                                          ;MOV     [user_SS],AX
  2442                                          ; 12/03/2018
  2443 00000745 2EA1[DC05]              	MOV     AX,[CS:NSP]
  2444 00000749 2EA3[8F03]                      MOV     [CS:user_SP],AX
  2445 0000074D 2EA1[DA05]                      MOV     AX,[CS:NSS]
  2446 00000751 2EA3[9103]                      MOV     [CS:user_SS],AX
  2447 00000755 E80300                  	CALL    restore_world
  2448                                  
  2449 00000758 CF                              IRET
  2450                                  
  2451                                  ;SYSTEM_CALL ENDP
  2452                                  
  2453                                  ;
  2454                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  2455                                  ; the stack prior to giving the user control
  2456                                  ;
  2457                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  2458                                  ;restore_tmp DW  ?
  2459                                  restore_tmp: 
  2460 00000759 0000                    	dw	0
  2461                                          ;procedure restore_world,NEAR
  2462                                  restore_world:
  2463                                          ;POP	WORD [restore_tmp] ; POP     restore_tmp
  2464 0000075B 2E8F06[5907]                    POP	WORD [CS:restore_tmp] ; 12/03/2018
  2465 00000760 58                              POP     AX              ; PUSH    ES
  2466 00000761 5B                              POP     BX              ; PUSH    DS
  2467 00000762 59                              POP     CX              ; PUSH    BP
  2468 00000763 5A                              POP     DX              ; PUSH    DI
  2469 00000764 5E                              POP     SI              ; PUSH    SI
  2470 00000765 5F                              POP     DI              ; PUSH    DX
  2471 00000766 5D                              POP     BP              ; PUSH    CX
  2472 00000767 1F                              POP     DS              ; PUSH    BX
  2473 00000768 07                              POP     ES              ; PUSH    AX
  2474                                  world_ret:
  2475                                          ;PUSH	WORD [restore_tmp] ; PUSH    restore_tmp
  2476 00000769 2EFF36[5907]                    PUSH	WORD [CS:restore_tmp] ; 12/03/2018
  2477                                          ;return
  2478                                  
  2479 0000076E C3                      	RETN
  2480                                  
  2481                                  ;restore_world   ENDP
  2482                                  
  2483                                  ;
  2484                                  ; save_world saves complete registers on the stack
  2485                                  ;
  2486                                          ;procedure   save_world,NEAR
  2487                                  save_world:
  2488                                          ;POP	WORD [restore_tmp] ; POP     restore_tmp
  2489 0000076F 2E8F06[5907]                    POP	WORD [CS:restore_tmp] ; 12/03/2018
  2490 00000774 06                              PUSH    ES
  2491 00000775 1E                              PUSH    DS
  2492 00000776 55                              PUSH    BP
  2493 00000777 57                              PUSH    DI
  2494 00000778 56                              PUSH    SI
  2495 00000779 52                              PUSH    DX
  2496 0000077A 51                              PUSH    CX
  2497 0000077B 53                              PUSH    BX
  2498 0000077C 50                              PUSH    AX
  2499 0000077D EBEA                            JMP     SHORT world_ret
  2500                                  
  2501                                  ;save_world      ENDP
  2502                                  
  2503                                  ;
  2504                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  2505                                  ;
  2506                                          ;procedure   get_user_stack,NEAR
  2507                                  get_user_stack:
  2508                                          ;LDS	SI,DWORD PTR [user_SP]
  2509                                          ;LDS	SI, [user_SP]
  2510 0000077F 2EC536[8F03]                    LDS	SI, [CS:user_SP] ; 12/03/2018
  2511                                  	;return
  2512 00000784 C3                      	RETN
  2513                                  
  2514                                  ;get_user_stack  ENDP
  2515                                  
  2516 00000785 90                      align 2
  2517                                  
  2518                                  ; ---------------------------------------------------------------------------
  2519                                  ; Standard Functions
  2520                                  ;DISPATCH    LABEL WORD
  2521                                  DISPATCH:
  2522                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  2523                                  ;.lall
  2524 00000786 [A909]                          short_addr  _$ABORT			    ;  0      0
  2525                                  ;.xall
  2526 00000788 [2A35]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  2527 0000078A [3335]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  2528 0000078C [C535]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  2529 0000078E [E235]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  2530 00000790 [E835]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  2531 00000792 [E90A]                          short_addr  _$RAW_CON_IO		    ;  6      6
  2532 00000794 [150B]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  2533 00000796 [FC35]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  2534 00000798 [0B36]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  2535 0000079A [1736]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  2536 0000079C [DC37]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  2537 0000079E [E637]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  2538 000007A0 [BB0A]                          short_addr  _$DISK_RESET		    ; 13      D
  2539 000007A2 [730D]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  2540 000007A4 [E729]                          short_addr  _$FCB_OPEN			    ; 15      F
  2541 000007A6 [4D2A]                          short_addr  _$FCB_CLOSE			    ; 16     10
  2542 000007A8 [D309]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  2543 000007AA [340A]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  2544 000007AC [DD28]                          short_addr  _$FCB_DELETE		    ; 19     13
  2545 000007AE [6D28]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  2546 000007B0 [7528]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  2547 000007B2 [BF2A]                          short_addr  _$FCB_CREATE		    ; 22     16
  2548 000007B4 [5B29]                          short_addr  _$FCB_RENAME		    ; 23     17
  2549 000007B6 [3808]                          short_addr  _CPMFUNC			    ; 24     18
  2550 000007B8 [6E0D]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  2551 000007BA [460D]                          short_addr  _$SET_DMA			    ; 26     1A
  2552                                  
  2553                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2554                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2555                                  ;                                                                          ;
  2556 000007BC [7709]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  2557 000007BE [7909]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  2558                                  ;                                                                          ;
  2559                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2560                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2561                                  
  2562 000007C0 [3808]                          short_addr  _CPMFUNC			    ; 29     1D
  2563 000007C2 [3808]                          short_addr  _CPMFUNC			    ; 30     1E
  2564                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2565                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2566                                  ;                                                                          ;
  2567 000007C4 [510D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  2568                                  ;                                                                          ;
  2569                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2570                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2571 000007C6 [3808]                          short_addr  _CPMFUNC			    ; 32     20
  2572 000007C8 [8528]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  2573 000007CA [8D28]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  2574 000007CC [6A0A]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  2575 000007CE [A80A]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  2576                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  2577                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  2578                                  
  2579                                  ; Extended Functions
  2580 000007D0 [910D]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  2581                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2582                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2583                                  ;                                                                          ;
  2584 000007D2 [850B]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  2585                                  ;                                                                          ;
  2586                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588 000007D4 [9528]                          short_addr  _$FCB_RANDOM_READ_BLOCK	   ; 39     27
  2589 000007D6 [9D28]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK       ; 40     28
  2590 000007D8 [740B]                          short_addr  _$PARSE_FILE_DESCRIPTOR	   ; 41     29
  2591 000007DA [D827]                          short_addr  _$GET_DATE                     ; 42     2A
  2592 000007DC [F527]                          short_addr  _$SET_DATE                     ; 43     2B
  2593 000007DE [1528]                          short_addr  _$GET_TIME                     ; 44     2C
  2594 000007E0 [2628]                          short_addr  _$SET_TIME                     ; 45     2D
  2595 000007E2 [B50C]                          short_addr  _$SET_VERIFY_ON_WRITE          ; 46     2E
  2596                                  
  2597                                  ; Extended functionality group
  2598 000007E4 [320D]                          short_addr  _$GET_DMA                      ; 47     2F
  2599 000007E6 [3A0C]                          short_addr  _$GET_VERSION                  ; 48     30
  2600 000007E8 [CF34]                          short_addr  _$KEEP_PROCESS		   ; 49     31
  2601                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2602                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2603                                  ;                                                                          ;
  2604 000007EA [530D]                          short_addr  _$GET_DPB			   ; 50     32
  2605                                  ;                                                                          ;
  2606                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2607                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2608 000007EC [BC0C]                          short_addr  _$SET_CTRL_C_TRAPPING          ; 51     33
  2609 000007EE [DB0C]                          short_addr  _$GET_INDOS_FLAG               ; 52     34
  2610 000007F0 [810D]                          short_addr  _$GET_INTERRUPT_VECTOR         ; 53     35
  2611 000007F2 [F30C]                          short_addr  _$GET_DRIVE_FREESPACE          ; 54     36
  2612 000007F4 [A80D]                          short_addr  _$CHAR_OPER                    ; 55     37
  2613 000007F6 [530C]                          short_addr  _$INTERNATIONAL                ; 56     38
  2614                                  ; XENIX CALLS
  2615                                  ;   Directory Group
  2616 000007F8 [430E]                          short_addr  _$MKDIR			   ; 57     39
  2617 000007FA [1210]                          short_addr  _$RMDIR			   ; 58     3A
  2618 000007FC [F30E]                          short_addr  _$CHDIR			   ; 59     3B
  2619                                  ;   File Group
  2620 000007FE [263B]                          short_addr  _$CREAT			   ; 60     3C
  2621 00000800 [0C3A]                          short_addr  _$OPEN			   ; 61     3D
  2622 00000802 [443E]                          short_addr  _$CLOSE			   ; 62     3E
  2623 00000804 [E43E]                          short_addr  _$READ			   ; 63     3F
  2624 00000806 [123F]                          short_addr  _$WRITE			   ; 64     40
  2625 00000808 [EC3A]                          short_addr  _$UNLINK			   ; 65     41
  2626 0000080A [3B3F]                          short_addr  _$LSEEK			   ; 66     42
  2627 0000080C [A93B]                          short_addr  _$CHMOD			   ; 67     43
  2628 0000080E [903F]                          short_addr  _$IOCTL			   ; 68     44
  2629 00000810 [683B]                          short_addr  _$DUP			   ; 69     45
  2630 00000812 [923B]                          short_addr  _$DUP2			   ; 70     46
  2631 00000814 [F93B]                          short_addr  _$CURRENT_DIR		   ; 71     47
  2632                                  ;    Memory Group
  2633 00000816 [1811]                          short_addr  _$ALLOC			   ; 72     48
  2634 00000818 [2612]                          short_addr  _$DEALLOC                      ; 73     49
  2635 0000081A [0512]                          short_addr  _$SETBLOCK                     ; 74     4A
  2636                                  ;    Process Group
  2637 0000081C [7C30]                          short_addr  _$EXEC			   ; 75     4B
  2638 0000081E [0535]                          short_addr  _$EXIT			   ; 76     4C
  2639 00000820 [3630]                          short_addr  _$WAIT			   ; 77     4D
  2640 00000822 [FB3C]                          short_addr  _$FIND_FIRST		   ; 78     4E
  2641                                  ;   Special Group
  2642 00000824 [AD3D]                          short_addr  _$FIND_NEXT			   ; 79     4F
  2643                                  ; SPECIAL SYSTEM GROUP
  2644                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2645                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2646                                  ;                                                                          ;
  2647 00000826 [5608]                          short_addr  _$SET_CURRENT_PDB		   ; 80     50
  2648 00000828 [5C08]                          short_addr  _$GET_CURRENT_PDB              ; 81     51
  2649 0000082A [E70C]                          short_addr  _$GET_IN_VARS                  ; 82     52
  2650 0000082C [DA0D]                          short_addr  _$SETDPB			   ; 83     53
  2651                                  ;                                                                          ;
  2652                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2653                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2654 0000082E 5400                            short_addr  $GET_VERIFY_ON_WRITE           ; 84     54
  2655                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2656                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2657                                  ;                                                                          ;
  2658 00000830 [7F0B]                          short_addr  _$DUP_PDB                      ; 85     55
  2659                                  ;                                                                          ;
  2660                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2661                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2662 00000832 [463C]                          short_addr  _$RENAME			   ; 86     56
  2663 00000834 [8240]                          short_addr  _$FILE_TIMES                   ; 87     57
  2664 00000836 [3E12]                          short_addr  _$ALLOCOPER                    ; 88     58
  2665                                  
  2666                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  2667                                  
  2668                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  2669                                  
  2670                                  ; ---------------------------------------------------------------------------
  2671                                  
  2672                                  _CPMFUNC:
  2673 00000838 30C0                            XOR     AL,AL
  2674                                          ;return
  2675 0000083A C3                      	RETN
  2676                                  
  2677                                  ; ---------------------------------------------------------------------------
  2678                                  _$SET_OEM_HANDLER:
  2679                                  	; 18/07/2018
  2680                                  ;ASSUME  DS:NOTHING,ES:NOTHING
  2681                                  ;
  2682                                  ;; Inputs:
  2683                                  ;;       User registers, User Stack, INTS disabled
  2684                                  ;;       If CALL F8, DS:DX is new handler address
  2685                                  ;; Function:
  2686                                  ;;       Process OEM INT 21 extensions
  2687                                  ;; Outputs:
  2688                                  ;;       Jumps to OEM_HANDLER if appropriate
  2689                                  ;
  2690                                  	;JNE     short DO_OEM_FUNC	; If above F8 try to jump to handler
  2691 0000083B 2E8916[8701]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  2692 00000840 2E8C1E[8901]            	MOV     [CS:OEM_HANDLER+2],DS
  2693 00000845 CF                      	IRET                            ; Quick return, Have altered no registers
  2694                                  
  2695                                  DO_OEM_FUNC:
  2696 00000846 2E833E[8701]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  2697 0000084C 7503                    	JNZ     short OEM_JMP
  2698 0000084E E926FE                  	JMP     BADCALL                 ; Handler not initialized
  2699                                  
  2700                                  OEM_JMP:
  2701 00000851 2EFF2E[8701]            	JMP     FAR [CS:OEM_HANDLER]
  2702                                  
  2703                                  ;       ENDIF
  2704                                  ; ---------------------------------------------------------------------------
  2705                                  ;ASSUME  SS:DOSGROUP
  2706                                  ;
  2707                                  ; $Set_current_PDB takes BX and sets it to be the current process
  2708                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  2709                                  ;
  2710                                         ;procedure   $SET_CURRENT_PDB,NEAR
  2711                                  _$SET_CURRENT_PDB:
  2712                                          ;ASSUME  DS:NOTHING,SS:NOTHING
  2713                                          ;MOV     [CurrentPDB],BX
  2714 00000856 2E891E[8B01]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  2715                                          ;return
  2716 0000085B C3                      	RETN
  2717                                  ;$SET_CURRENT_PDB    ENDP
  2718                                  ; ---------------------------------------------------------------------------
  2719                                  ; $get_current_PDB returns in BX the current process
  2720                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  2721                                  ;
  2722                                          ;procedure $GET_CURRENT_PDB,NEAR
  2723                                  _$GET_CURRENT_PDB:
  2724                                          ;ASSUME  DS:NOTHING,SS:NOTHING
  2725                                          ;invoke  get_user_stack
  2726 0000085C E820FF                  	call	get_user_stack
  2727                                          ;PUSH	 word [CurrentPDB]
  2728 0000085F 2EFF36[8B01]                    PUSH    word [CS:CurrentPDB] ; 12/03/2018
  2729                                          ;POP	[SI.user_BX]
  2730 00000864 8F4402                  	pop	word [SI+2]
  2731                                          ;return
  2732 00000867 C3                      	retn
  2733                                  ;$GET_CURRENT_PDB    ENDP
  2734                                  ;									   ;	
  2735                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  2736                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2737                                  
  2738                                  ;BREAK <NullDev -- Driver for null device>
  2739                                          ;procedure   SNULDEV,FAR
  2740                                  SNULDEV:
  2741                                  ;ASSUME DS:NOTHING,ES:NOTHING,SS:NOTHING
  2742                                          ;MOV     [NULLDEVPT],BX
  2743                                          ;MOV     [NULLDEVPT+2],ES
  2744                                  	; 12/03/2018
  2745 00000868 2E891E[E203]                    MOV     [CS:NULLDEVPT],BX
  2746 0000086D 2E8C06[E403]                    MOV     [CS:NULLDEVPT+2],ES
  2747                                          ;return
  2748 00000872 CB                      	RETF	; ! FAR return !
  2749                                  ;SNULDEV ENDP
  2750                                  
  2751                                  ; ---------------------------------------------------------------------------
  2752                                          ;procedure   INULDEV,FAR
  2753                                  INULDEV:
  2754 00000873 06                              PUSH    ES
  2755 00000874 53                              PUSH    BX
  2756                                          ;LES	BX,[NULLDEVPT]
  2757 00000875 2EC41E[E203]                    LES	BX, [CS:NULLDEVPT] ; 12/03/2018
  2758 0000087A 26814F030001            	OR	WORD [ES:BX+3],STDON ; Set done bit
  2759 00000880 5B                              POP     BX
  2760 00000881 07                              POP     ES
  2761                                          ;return
  2762 00000882 CB                      	RETF	; ! FAR return !
  2763                                  
  2764                                  ;INULDEV ENDP
  2765                                  
  2766                                  ; ---------------------------------------------------------------------------
  2767                                  
  2768                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  2769                                  
  2770                                          ;IF      IBM
  2771                                  ;ERRIN:					; Codes returned by BIOS
  2772                                          ;DB      2			; NO RESPONSE
  2773                                          ;DB      6			; SEEK FAILURE
  2774                                          ;DB      12			; GENERAL ERROR
  2775                                          ;DB      4			; BAD CRC
  2776                                          ;DB      8			; SECTOR NOT FOUND
  2777                                          ;DB      0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  2778                                  ;ERROUT:				; DISK ERRORS RETURNED FROM INT 25 and 26
  2779                                          ;DB      80H			; NO RESPONSE
  2780                                          ;DB      40H			; Seek failure
  2781                                          ;DB      2			; Address Mark not found
  2782                                          ;DB      8			; DMA OVERRUN
  2783                                          ;DB      4			; SECTOR NOT FOUND
  2784                                          ;DB      3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  2785                                  
  2786                                  ;NUMERR	EQU	$-ERROUT
  2787                                          ;ENDIF
  2788                                  
  2789                                  ; ---------------------------------------------------------------------------
  2790                                          ;procedure   ABSDRD,FAR
  2791                                  ABSDRD:
  2792                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  2793 00000883 FA                              CLI
  2794                                          ;MOV     [user_SS],SS
  2795                                          ;MOV     [user_SP],SP
  2796                                  	; 15/03/2018
  2797 00000884 2E8C16[9103]                    MOV	[CS:user_SS],SS
  2798 00000889 2E8926[8F03]                    MOV	[CS:user_SP],SP        
  2799 0000088E 0E                      	PUSH    CS
  2800 0000088F 17                              POP     SS
  2801                                  ;ASSUME  SS:DOSGROUP
  2802 00000890 BC[3A05]                        MOV     SP,DSKSTACK
  2803                                          ;INC     BYTE [INDOS]
  2804 00000893 36FE06[2301]                    INC	BYTE [SS:INDOS]
  2805 00000898 FB                      	STI
  2806 00000899 FC                              CLD
  2807 0000089A 06                              PUSH    ES
  2808 0000089B 1E                              PUSH    DS
  2809 0000089C 16                              PUSH    SS
  2810 0000089D 1F                              POP     DS
  2811                                  ;ASSUME  DS:DOSGROUP
  2812                                          ;invoke	GETBP
  2813 0000089E E8520B                  	CALL	GETBP
  2814 000008A1 1F                              POP     DS
  2815                                  ;ASSUME  DS:NOTHING
  2816 000008A2 7206                            JC      SHORT ILEAVE
  2817                                          ;invoke	DSKREAD
  2818 000008A4 E80814                  	CALL	DSKREAD
  2819                                  TLEAVE:
  2820 000008A7 7401                            JZ      SHORT ILEAVE
  2821                                  
  2822                                          ;IF	IBM
  2823                                  ; Translate the error code to ancient 1.1 codes
  2824                                          ;PUSH    ES
  2825                                          ;PUSH    CS
  2826                                          ;POP     ES
  2827                                          ;XOR     AH,AH			; Nul error code
  2828                                          ;MOV     CX,NUMERR		; Number of possible error conditions
  2829                                          ;MOV     DI,ERRIN		; Point to error conditions
  2830                                          ;REPNE   SCASB
  2831                                          ;JNZ     SHORT LEAVECODE	; Not found
  2832                                          ;MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  2833                                  ;LEAVECODE:
  2834                                          ;POP     ES
  2835                                          ;ENDIF
  2836                                  
  2837 000008A9 F9                              STC
  2838                                  ILEAVE:
  2839 000008AA 07                              POP     ES
  2840 000008AB FA                              CLI
  2841                                          ;DEC     BYTE [INDOS]
  2842                                          ;15/03/2018
  2843 000008AC 36FE0E[2301]            	DEC	BYTE [SS:INDOS]
  2844                                  	;MOV     SP,[user_SP]
  2845                                          ;MOV     SS,[user_SS]
  2846 000008B1 368B26[8F03]            	MOV     SP,[SS:user_SP]
  2847 000008B6 368E16[9103]                    MOV     SS,[SS:user_SS]
  2848                                  ;ASSUME  SS:NOTHING
  2849 000008BB FB                              STI
  2850                                          ;return
  2851 000008BC CB                      	RETF   ; ! FAR return !
  2852                                  
  2853                                  ;ABSDRD	ENDP
  2854                                  ; ---------------------------------------------------------------------------
  2855                                          ;procedure   ABSDWRT,FAR
  2856                                  ABSDWRT:
  2857                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  2858                                  
  2859 000008BD FA                              CLI
  2860                                  	; 15/03/2018
  2861                                          ;MOV     [user_SS],SS
  2862                                          ;MOV     [user_SP],SP
  2863 000008BE 2E8C16[9103]                    MOV     [CS:user_SS],SS
  2864 000008C3 2E8926[8F03]                    MOV     [CS:user_SP],SP
  2865 000008C8 0E                              PUSH    CS
  2866 000008C9 17                              POP     SS
  2867                                  ;ASSUME	SS:DOSGROUP
  2868                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  2869 000008CA BC[3A05]                        MOV	SP, DSKSTACK
  2870                                  	;INC	BYTE PTR [INDOS]
  2871 000008CD 36FE06[2301]                    INC	BYTE [SS:INDOS]
  2872 000008D2 FB                      	STI
  2873 000008D3 FC                              CLD
  2874 000008D4 06                              PUSH    ES
  2875 000008D5 1E                              PUSH    DS
  2876 000008D6 16                              PUSH    SS
  2877 000008D7 1F                              POP     DS
  2878                                  ;ASSUME  DS:DOSGROUP
  2879                                          ;invoke	GETBP
  2880 000008D8 E8180B                          CALL	GETBP
  2881 000008DB 1F                      	POP     DS
  2882                                  ;ASSUME  DS:NOTHING
  2883 000008DC 72CC                            JC      SHORT ILEAVE
  2884                                          ;invoke DSKWRITE
  2885 000008DE E8F113                          CALL	DSKWRITE
  2886 000008E1 EBC4                    	JMP     SHORT TLEAVE
  2887                                  
  2888                                  ;ABSDWRT ENDP
  2889                                  
  2890                                  ; ---------------------------------------------------------------------------
  2891                                          ;procedure   SYS_RETURN,NEAR
  2892                                  SYS_RETURN:        
  2893                                  	;ASSUME  DS:NOTHING,ES:NOTHING
  2894                                          ;entry   SYS_RET_OK
  2895                                  SYS_RET_OK:        
  2896 000008E3 E899FE                  	call    get_user_stack
  2897                                          ;PUSH	[SI.user_F]
  2898 000008E6 FF7416                          PUSH	WORD [SI+16H]
  2899 000008E9 9D                      	POPF
  2900 000008EA F8                              CLC
  2901 000008EB EB0A                            JMP     SHORT DO_RET
  2902                                  
  2903                                          ;entry   SYS_RET_ERR
  2904                                  SYS_RET_ERR:        
  2905 000008ED 30E4                    	XOR     AH,AH                   ; hack to allow for smaller error rets
  2906 000008EF E88DFE                          call    get_user_stack
  2907                                          ;PUSH	[SI.user_F]
  2908 000008F2 FF7416                          PUSH	WORD [SI+16H]
  2909 000008F5 9D                              POPF
  2910 000008F6 F9                              STC
  2911                                  DO_RET:
  2912                                          ;MOV	[SI.user_AX],AX         ; Really only sets AH
  2913                                  	;MOV	[SI+user_env.user_AX], AX ; user_env.user_AX = 0
  2914 000008F7 8904                    	MOV	[SI], AX
  2915 000008F9 9C                              PUSHF
  2916                                          ;POP	[SI.user_F]             ; dump on his flags
  2917 000008FA 8F4416                          POP	WORD [SI+16H]
  2918                                  	;return
  2919 000008FD C3                      	RETN
  2920                                  
  2921                                  ;SYS_RETURN  ENDP
  2922                                  
  2923                                  ;do_ext
  2924                                  
  2925                                  ;CODE    ENDS
  2926                                  
  2927                                  ;============================================================================
  2928                                  ; DOSMES.ASM
  2929                                  ;============================================================================
  2930                                  ; Retro DOS v2.0 - 14/03/2018
  2931                                  
  2932                                  ;CODE	SEGMENT BYTE PUBLIC 'CODE'
  2933                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  2934                                  
  2935                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range
  2936                                  ;     ENTRY: AL = Character to map
  2937                                  ;     EXIT:  AL = The converted character
  2938                                  ; Alters no registers except AL and flags.
  2939                                  ; The routine should do nothing to chars below 80H.
  2940                                  ;
  2941                                  ; Example:
  2942                                  MAP_DCASE:
  2943 000008FE 3C80                    	CMP     AL,80H
  2944 00000900 7210                    	JB	SHORT L_RET	;Map no chars below 80H ever
  2945 00000902 3CA7                    	CMP     AL,0A7H
  2946 00000904 770C                    	JA	SHORT L_RET	;This routine maps chars between 80H and A7H
  2947 00000906 2C80                    	SUB	AL,80H		;Turn into index value
  2948 00000908 1E                      	PUSH	DS
  2949 00000909 53                      	PUSH	BX
  2950 0000090A 0E                      	PUSH	CS		;Move to DS
  2951 0000090B 1F                      	POP	DS
  2952 0000090C BB[1309]                	MOV	BX,_TABLE
  2953 0000090F D7                      	XLAT			;Get upper case character
  2954 00000910 5B                      	POP	BX
  2955 00000911 1F                      	POP	DS
  2956                                  L_RET:  
  2957 00000912 CB                      	RETF	; 02/04/2018
  2958                                  
  2959                                  _TABLE:
  2960 00000913 809A45418E418F80        	DB	80H,9AH,"E","A",8EH,"A",8FH,80H
  2961 0000091B 4545454949498E8F        	DB	"E","E","E","I","I","I",8EH,8FH
  2962 00000923 9092924F994F5555        	DB	90H,92H,92H,"O",99H,"O","U","U"
  2963 0000092B 59999A9B9C9D9E9F        	DB	"Y",99H,9AH,9BH,9CH,9DH,9EH,9FH
  2964 00000933 41494F55A5A5A6A7        	DB	"A","I","O","U",0A5H,0A5H,0A6H,0A7H
  2965                                  
  2966                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  2967                                  
  2968                                  ; The following two tables implement the current buffered input editing
  2969                                  ; routines.  The tables are pairwise associated in reverse order for ease
  2970                                  ; in indexing.  That is; The first entry in ESCTAB corresponds to the last
  2971                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  2972                                  
  2973                                  ESCCHAR:
  2974 0000093B 00                      	DB	ESCCH		;Lead-in character for escape sequences
  2975                                  ESCTAB:
  2976 0000093C 40                              DB      64		; Ctrl-Z - F6
  2977 0000093D 4D                              DB      77		; Copy one char - -->
  2978 0000093E 3B                              DB      59		; Copy one char - F1
  2979 0000093F 53                              DB      83		; Skip one char - DEL
  2980 00000940 3C                              DB      60		; Copy to char - F2
  2981 00000941 3E                              DB      62		; Skip to char - F4
  2982 00000942 3D                              DB      61		; Copy line - F3
  2983 00000943 3D                              DB      61		; Kill line (no change to template ) - Not used
  2984 00000944 3F                              DB      63		; Reedit line (new template) - F5
  2985 00000945 4B                              DB      75		; Backspace - <--
  2986 00000946 52                              DB      82		; Enter insert mode - INS (toggle)
  2987 00000947 41                              DB      65		; Escape character - F7
  2988 00000948 41                              DB      65		; End of table
  2989                                  ESCEND:
  2990                                  ESCTABLEN EQU   ESCEND-ESCTAB
  2991                                  
  2992                                  ESCFUNC:
  2993 00000949 [5236]                  	DW	GETCH               ; Ignore the escape sequence
  2994 0000094B [4237]                  	DW	TWOESC
  2995 0000094D [CF37]                  	DW	ENTERINS
  2996 0000094F [D736]                  	DW	BACKSP
  2997 00000951 [BB37]                  	DW	REEDIT
  2998 00000953 [C436]                  	DW	KILNEW
  2999 00000955 [4937]                  	DW	COPYLIN
  3000 00000957 [7C37]                  	DW	SKIPSTR
  3001 00000959 [4F37]                  	DW	COPYSTR
  3002 0000095B [7237]                  	DW	SKIPONE
  3003 0000095D [5437]                  	DW	COPYONE
  3004 0000095F [5437]                  	DW	COPYONE
  3005 00000961 [D737]                  	DW	CTRLZ
  3006                                  
  3007                                  ;
  3008                                  ; OEMFunction key is expected to process a single function
  3009                                  ;   key input from a device and dispatch to the proper
  3010                                  ;   routines leaving all registers UNTOUCHED.
  3011                                  ;
  3012                                  ; Inputs:   CS, SS are DOSGROUP
  3013                                  ; Outputs:  None. This function is expected to JMP to onw of
  3014                                  ;           the following labels:
  3015                                  ;
  3016                                  ;           GetCh       - ignore the sequence
  3017                                  ;           TwoEsc      - insert an ESCChar in the buffer
  3018                                  ;           ExitIns     - toggle insert mode
  3019                                  ;           EnterIns    - toggle insert mode
  3020                                  ;           BackSp      - move backwards one space
  3021                                  ;           ReEdit      - reedit the line with a new template
  3022                                  ;           KilNew      - discard the current line and start from scratch
  3023                                  ;           CopyLin     - copy the rest of the template into the line
  3024                                  ;           SkipStr     - read the next character and skip to it in the template
  3025                                  ;           CopyStr     - read next char and copy from template to line until char
  3026                                  ;           SkipOne     - advance position in template one character
  3027                                  ;           CopyOne     - copy next character in template into line
  3028                                  ;           CtrlZ       - place a ^Z into the template
  3029                                  ; Registers that are allowed to be modified by this function are:
  3030                                  ;           AX, CX, BP
  3031                                  
  3032                                  OEMFunctionKey:
  3033 00000963 E8962C                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  3034 00000966 B10D                    	MOV     CL,ESCTABLEN ; 13	; length of table for scan
  3035 00000968 57                      	PUSH    DI                      ; save DI (cannot change it!)
  3036 00000969 BF[3C09]                	MOV     DI,ESCTAB		; offset of second byte table
  3037 0000096C F2AE                    	REPNE   SCASB                   ; Look it up in the table
  3038 0000096E 5F                      	POP     DI                      ; restore DI
  3039 0000096F D1E1                    	SHL     CX,1                    ; convert byte offset to word
  3040 00000971 89CD                    	MOV     BP,CX                   ; move to indexable register
  3041                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  3042 00000973 FFA6[4909]              	jmp	word [BP+ESCFUNC] ; 16/04/2018
  3043                                  
  3044                                  ;CODE	ENDS
  3045                                  ;
  3046                                  ;	do_ext
  3047                                  ;	END
  3048                                  
  3049                                  ;============================================================================
  3050                                  ; MISC.ASM
  3051                                  ;============================================================================
  3052                                  ;TITLE MISC - Miscellanious routines for MS-DOS
  3053                                  ;NAME  MISC
  3054                                  ;
  3055                                  ; Miscellaneous system calls most of which are CAVEAT
  3056                                  ;
  3057                                  ; $SLEAZEFUNC
  3058                                  ; $SLEAZEFUNCDL
  3059                                  ; $GET_INDOS_FLAG
  3060                                  ; $GET_IN_VARS
  3061                                  ; $GET_DEFAULT_DPB
  3062                                  ; $GET_DPB
  3063                                  ; $DISK_RESET
  3064                                  ; $SETDPB
  3065                                  ; $Dup_PDB
  3066                                  ; $CREATE_PROCESS_DATA_BLOCK
  3067                                  ; sti
  3068                                  
  3069                                  ;
  3070                                  ;.xlist
  3071                                  ;
  3072                                  ; get the appropriate segment definitions
  3073                                  ;
  3074                                  ;INCLUDE DOSSEG.ASM
  3075                                  ;
  3076                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3077                                  ;        ASSUME  SS:DOSGROUP,CS:DOSGROUP
  3078                                  
  3079                                  ;.xcref
  3080                                  ;INCLUDE DOSSYM.ASM
  3081                                  ;INCLUDE DEVSYM.ASM
  3082                                  ;.cref
  3083                                  ;.list
  3084                                  
  3085                                  ;ENTRYPOINTSEG	EQU	0CH
  3086                                  ;MAXDIF		EQU	0FFFH
  3087                                  ;SAVEXIT	EQU	10
  3088                                  
  3089                                  ; BREAK <SleazeFunc -- get a pointer to media byte>
  3090                                  
  3091                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3092                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3093                                  ;                                                                          ;
  3094                                          ;procedure   $SLEAZEFUNC,NEAR
  3095                                  ;ASSUME  DS:NOTHING,ES:NOTHING
  3096                                  _$SLEAZEFUNC:
  3097                                  
  3098                                  ; Inputs:
  3099                                  ;       None
  3100                                  ; Function:
  3101                                  ;       Return Stuff sort of like old get fat call
  3102                                  ; Outputs:
  3103                                  ;       DS:BX = Points to FAT ID byte (IBM only)
  3104                                  ;               GOD help anyone who tries to do ANYTHING except
  3105                                  ;               READ this ONE byte.
  3106                                  ;       DX = Total Number of allocation units on disk
  3107                                  ;       CX = Sector size
  3108                                  ;       AL = Sectors per allocation unit
  3109                                  ;          = -1 if bad drive specified
  3110                                  
  3111 00000977 B200                            MOV     DL,0
  3112                                  _$SLEAZEFUNCDL:
  3113 00000979 16                              PUSH    SS
  3114 0000097A 1F                              POP     DS
  3115 0000097B 88D0                            MOV     AL,DL
  3116 0000097D E8A412                          CALL	GETTHISDRV
  3117 00000980 B0FF                            MOV     AL,-1
  3118 00000982 7215                            JC      SHORT BADSLDRIVE
  3119 00000984 E8E418                          CALL	FATREAD
  3120 00000987 268B560D                        MOV     DX,[ES:BP+0DH]
  3121 0000098B 4A                              DEC     DX
  3122 0000098C 268A4604                        MOV     AL,[ES:BP+4]
  3123 00000990 FEC0                            INC     AL
  3124 00000992 268B4E02                        MOV     CX,[ES:BP+2]
  3125 00000996 83C516                          ADD     BP,DPB.MEDIA
  3126                                  BADSLDRIVE:
  3127 00000999 E8E3FD                          CALL	get_user_stack
  3128 0000099C 894C04                          MOV     [SI+4],CX
  3129 0000099F 895406                          MOV     [SI+6],DX
  3130 000009A2 896C02                          MOV     [SI+2],BP
  3131 000009A5 8C440E                          MOV     [SI+0EH],ES
  3132 000009A8 C3                      	retn
  3133                                  ;                                                                          ;
  3134                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3135                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3136                                  
  3137                                  ;BREAK <$ABORT -- Terminate a process>
  3138                                          ;procedure   $ABORT,NEAR
  3139                                  _$ABORT:
  3140                                  ;ASSUME  DS:NOTHING,ES:NOTHING
  3141                                  
  3142                                  ; Inputs:
  3143                                  ;       CS:00 must point to valid program header block
  3144                                  ; Function:
  3145                                  ;       Restore terminate and Cntrl-C addresses, flush buffers
  3146                                  ;       and transfer to the terminate address
  3147                                  ; Returns:
  3148                                  ;       TO THE TERMINATE ADDRESS
  3149                                  
  3150 000009A9 30C0                            XOR     AL,AL
  3151                                          ;MOV     [exit_type],exit_abort
  3152 000009AB 36C606[F803]00          	MOV	BYTE [SS:exit_type],Exit_Abort  ; 12/03/2018
  3153                                  ;
  3154                                  ; abort_inner must have AL set as the exit code!
  3155                                  ;
  3156                                          ;entry   abort_inner
  3157                                  abort_inner:        
  3158                                  	;MOV     AH,[exit_type]
  3159 000009B1 368A26[F803]                    MOV	AH,[SS:exit_type] ; 31/03/2018
  3160                                  	;MOV     [exit_code],AX
  3161 000009B6 36A3[F603]                      MOV	[SS:exit_code],AX ; 12/03/2018
  3162                                  	;invoke Get_user_stack
  3163 000009BA E8C2FD                          call	get_user_stack
  3164                                  	;MOV	DS,[SI.user_CS]		; set up old interrupts
  3165 000009BD 8E5C14                          MOV	DS,[SI+14H]
  3166 000009C0 31C0                    	XOR     AX,AX
  3167 000009C2 8EC0                            MOV     ES,AX
  3168 000009C4 BE0A00                          MOV     SI,SAVEXIT
  3169 000009C7 BF8800                          MOV     DI,addr_int_terminate
  3170 000009CA A5                              MOVSW
  3171 000009CB A5                              MOVSW
  3172 000009CC A5                              MOVSW
  3173 000009CD A5                              MOVSW
  3174 000009CE A5                              MOVSW
  3175 000009CF A5                              MOVSW
  3176                                          ;transfer reset_environment
  3177 000009D0 E90124                  	jmp	reset_environment
  3178                                  ;$ABORT   ENDP
  3179                                  
  3180                                  ; ---------------------------------------------------------------------------
  3181                                  
  3182                                  ;BREAK <$Dir_Search_First -- Start a directory search>
  3183                                  
  3184                                  _$DIR_SEARCH_FIRST:
  3185                                  
  3186                                  ; Inputs:
  3187                                  ;       DS:DX Points to unopenned FCB
  3188                                  ; Function:
  3189                                  ;       Directory is searched for first matching entry and the directory
  3190                                  ;       entry is loaded at the disk transfer address
  3191                                  ; Returns:
  3192                                  ;       AL = -1 if no entries matched, otherwise 0
  3193                                  
  3194 000009D3 E8210B                          CALL	GETFILE
  3195                                  
  3196                                  SAVPLCE:
  3197                                  ; Search-for-next enters here to save place and report
  3198                                  ; findings.
  3199 000009D6 B200                            MOV     DL,0            ; Do not XOR!!!
  3200 000009D8 7252                            JC      SHORT KILLSRCH
  3201 000009DA 08E4                            OR      AH,AH           ; Is it I/O device?
  3202 000009DC 7805                            JS      SHORT KILLIT	; If so, sign bit will end search
  3203 000009DE A1[2101]                        MOV     AX,[LASTENT]
  3204 000009E1 FEC2                            INC     DL
  3205                                  KILLIT:
  3206 000009E3 26894510                        MOV     [ES:DI+10H],AX
  3207 000009E7 A1[9A03]                        MOV     AX,[THISDPB]
  3208 000009EA 26894512                        MOV     [ES:DI+12H],AX
  3209 000009EE A1[9C03]                        MOV     AX,[THISDPB+2]
  3210 000009F1 26894514                        MOV     [ES:DI+14H],AX
  3211 000009F5 A1[C103]                        MOV     AX,[DIRSTART]
  3212 000009F8 26894516                        MOV     [ES:DI+16H],AX
  3213                                  ; Information in directory entry must be copied into the first
  3214                                  ; 33 bytes starting at the disk transfer address.
  3215 000009FC 89DE                            MOV     SI,BX
  3216 000009FE C43E[DF00]                      LES     DI,[DMAADD]
  3217 00000A02 B8FF00                          MOV     AX,00FFH
  3218 00000A05 3A06[8B03]                      CMP     AL,[EXTFCB]
  3219 00000A09 7509                            JNZ     SHORT NORMFCB
  3220 00000A0B AB                              STOSW
  3221 00000A0C FEC0                            INC     AL
  3222 00000A0E AB                              STOSW
  3223 00000A0F AB                              STOSW
  3224 00000A10 A0[6F03]                        MOV     AL,[ATTRIB]
  3225 00000A13 AA                              STOSB
  3226                                  NORMFCB:
  3227 00000A14 A0[9903]                        MOV     AL,[THISDRV]
  3228 00000A17 FEC0                            INC     AL
  3229 00000A19 AA                              STOSB   ; Set drive number
  3230 00000A1A 08D2                            OR      DL,DL
  3231 00000A1C 7404                            JZ      SHORT DOSRELATIVE
  3232 00000A1E 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  3233                                  DOSRELATIVE:
  3234 00000A22 B91000                  	MOV     CX,16
  3235                                  
  3236 00000A25 F3A5                            REP     MOVSW   ; Copy 32 bytes of directory entry
  3237 00000A27 30C0                            XOR     AL,AL
  3238 00000A29 C3                              RETN
  3239                                  
  3240                                  KILLSRCH1:
  3241 00000A2A 1E                              PUSH    DS
  3242 00000A2B 07                              POP     ES      ; Make ES:DI point to the FCB
  3243                                  KILLSRCH:
  3244 00000A2C B8FFFF                          MOV     AX,-1
  3245 00000A2F 26894510                        MOV     [ES:DI+10H],AX
  3246 00000A33 C3                              RETN
  3247                                  
  3248                                  ; ---------------------------------------------------------------------------
  3249                                  
  3250                                  ;BREAK <$Dir_Search_Next -- Find next matching directory entry>
  3251                                  
  3252                                  _$DIR_SEARCH_NEXT:
  3253                                  
  3254                                  ; Inputs:
  3255                                  ;       DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
  3256                                  ; Function:
  3257                                  ;       Directory is searched for the next matching entry and the directory
  3258                                  ;       entry is loaded at the disk transfer address
  3259                                  ; Returns:
  3260                                  ;       AL = -1 if no entries matched, otherwise 0
  3261                                  
  3262 00000A34 E82A25                          CALL	MOVNAMENOSET
  3263 00000A37 89D7                            MOV     DI,DX
  3264 00000A39 72EF                            JC      SHORT KILLSRCH1
  3265 00000A3B 8B4510                          MOV     AX,[DI+10H]
  3266 00000A3E C46D12                          LES     BP,[DI+12H]
  3267 00000A41 09C0                            OR      AX,AX
  3268 00000A43 78E5                            JS      SHORT KILLSRCH1
  3269 00000A45 8B5D16                          MOV     BX,[DI+16H]
  3270 00000A48 52                              PUSH    DX
  3271 00000A49 1E                              PUSH    DS
  3272 00000A4A 50                              PUSH    AX
  3273                                          ;MOV     [THISDPB],BP
  3274                                          ;MOV     [THISDPB+2],ES
  3275 00000A4B 36892E[9A03]            	MOV	[SS:THISDPB],BP		; 12/03/2018
  3276 00000A50 368C06[9C03]                    MOV	[SS:THISDPB+2],ES	; 12/03/2018
  3277 00000A55 E81B0C                          CALL	SETDIRSRCH
  3278 00000A58 58                              POP     AX
  3279 00000A59 C706[D503]FFFF                  MOV     WORD [ENTLAST],-1
  3280 00000A5F E8530B                          CALL	GETENT
  3281 00000A62 E8F20A                          CALL	NEXTENT
  3282 00000A65 07                              POP     ES
  3283 00000A66 5F                              POP     DI
  3284 00000A67 E96CFF                          JMP     SAVPLCE
  3285                                  
  3286                                  ; ---------------------------------------------------------------------------
  3287                                  
  3288                                  ;BREAK <$Get_FCB_File_Length -- Return size of file in current records>
  3289                                  
  3290                                  _$GET_FCB_FILE_LENGTH:
  3291                                  
  3292                                  ; Inputs:
  3293                                  ;       DS:DX points to unopenned FCB
  3294                                  ; Function:
  3295                                  ;       Set random record field to size of file
  3296                                  ; Returns:
  3297                                  ;       AL = -1 if no entries matched, otherwise 0
  3298                                  
  3299 00000A6A E88A0A                          CALL	GETFILE
  3300 00000A6D B0FF                            MOV     AL,-1
  3301 00000A6F 7236                            JC	SHORT RET14
  3302 00000A71 83C721                          ADD     DI,SYS_FCB.RR	; Write size in RR field
  3303 00000A74 268B4DED                        MOV     CX,[ES:DI-13H]
  3304 00000A78 09C9                            OR      CX,CX
  3305 00000A7A 7503                            JNZ     SHORT RECOK
  3306 00000A7C B98000                          MOV     CX,128
  3307                                  RECOK:
  3308 00000A7F 31D2                            XOR     DX,DX           ; Intialize size to zero
  3309 00000A81 46                              INC     SI
  3310 00000A82 46                              INC     SI              ; Point to length field
  3311 00000A83 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  3312 00000A87 8B4402                          MOV     AX,[SI+2]       ; Get high word of size
  3313 00000A8A F7F1                            DIV     CX
  3314 00000A8C 50                              PUSH    AX              ; Save high part of result
  3315 00000A8D AD                              LODSW			; Get low word of size
  3316 00000A8E F7F1                            DIV     CX
  3317 00000A90 09D2                            OR      DX,DX           ; Check for zero remainder
  3318 00000A92 5A                              POP     DX
  3319 00000A93 7404                            JZ	SHORT DEVSIZ
  3320 00000A95 40                              INC     AX              ; Round up for partial record
  3321 00000A96 7501                            JNZ     SHORT DEVSIZ	; Propagate carry?
  3322 00000A98 42                              INC     DX
  3323                                  DEVSIZ:
  3324 00000A99 AB                              STOSW
  3325 00000A9A 89D0                            MOV     AX,DX
  3326 00000A9C AA                              STOSB
  3327 00000A9D B000                            MOV     AL,0
  3328 00000A9F 83F940                          CMP     CX,64
  3329 00000AA2 7303                            JAE     SHORT RET14	; Only 3-byte field if fcb_RECSIZ >= 64
  3330 00000AA4 268825                          MOV     [ES:DI],AH
  3331                                  RET14:  
  3332 00000AA7 C3                      	RETN
  3333                                  
  3334                                  ; BREAK <$Get_Fcb_Position -- Set random record field to current position>
  3335                                          ;procedure  $GET_FCB_POSITION,NEAR
  3336                                  
  3337                                  ; ---------------------------------------------------------------------------
  3338                                  
  3339                                  _$GET_FCB_POSITION:
  3340                                  
  3341                                  ; Inputs:
  3342                                  ;       DS:DX points to openned FCB
  3343                                  ; Function:
  3344                                  ;       Sets random record field to be same as current record fields
  3345                                  ; Returns:
  3346                                  ;       None
  3347                                  
  3348 00000AA8 E8601A                          CALL	GETREC
  3349 00000AAB 894521                          MOV     [DI+21H],AX
  3350 00000AAE 885523                          MOV     [DI+23H],DL
  3351 00000AB1 837D0E40                        CMP     WORD [DI+0EH],64
  3352 00000AB5 7303                            JAE     SHORT RET16
  3353 00000AB7 887524                          MOV     [DI+24H],DH	; Set 4th byte only if record size < 64
  3354                                  RET16:  
  3355 00000ABA C3                      	RETN
  3356                                  
  3357                                  ; ---------------------------------------------------------------------------
  3358                                  
  3359                                  ;BREAK <$Disk_Reset -- Flush out all dirty buffers>
  3360                                          ;procedure   $DISK_RESET,NEAR
  3361                                  
  3362                                  _$DISK_RESET:
  3363                                  
  3364                                  ; Inputs:
  3365                                  ;       None
  3366                                  ; Function:
  3367                                  ;       Flush and invalidate all buffers
  3368                                  ; Returns:
  3369                                  ;       Nothing
  3370                                  
  3371 00000ABB 16                              PUSH    SS
  3372 00000ABC 1F                              POP     DS
  3373 00000ABD B0FF                            MOV     AL,-1
  3374 00000ABF E89F1C                          CALL	FLUSHBUF
  3375 00000AC2 C706[2B01]FFFF                  MOV     WORD [LASTBUFFER+2],-1
  3376 00000AC8 C706[2901]FFFF                  MOV     WORD [LASTBUFFER],-1
  3377 00000ACE E8191B                          CALL	SETVISIT
  3378                                  NBFFR:					; Free ALL buffers
  3379 00000AD1 C6450701                        MOV     BYTE [DI+7],1 ; Mark as visited
  3380 00000AD5 807D04FF                        CMP     BYTE [DI+4],-1
  3381 00000AD9 7408                            JZ      SHORT SKPBF		; Save a call to PLACEBUF
  3382 00000ADB C74504FF00                      MOV     WORD [DI+4],00FFH
  3383 00000AE0 E82F1B                          CALL	SCANPLACE
  3384                                  SKPBF:
  3385 00000AE3 E81D1B                          CALL	SKIPVISIT
  3386 00000AE6 75E9                            JNZ     SHORT NBFFR
  3387 00000AE8 C3                              RETN
  3388                                  ; ---------------------------------------------------------------------------
  3389                                          ;procedure   $RAW_CON_IO,NEAR   ; System call 6
  3390                                  
  3391                                  _$RAW_CON_IO:
  3392                                  
  3393                                  ; Inputs:
  3394                                  ;       DL = -1 if input
  3395                                  ;       else DL is output character
  3396                                  ; Function:
  3397                                  ;       Input or output raw character from console, no echo
  3398                                  ; Returns:
  3399                                  ;       AL = character
  3400                                  
  3401 00000AE9 88D0                            MOV     AL,DL
  3402 00000AEB 3CFF                            CMP     AL,-1
  3403 00000AED 753A                            JNZ     SHORT RAWOUT
  3404                                          ;LES     DI,[user_SP]	; Get pointer to register save area
  3405 00000AEF 36C43E[8F03]                    LES     DI,[SS:user_SP] ; 12/03/2018
  3406 00000AF4 31DB                    	XOR     BX,BX
  3407 00000AF6 E81811                          CALL	GET_IO_FCB
  3408 00000AF9 7211                            JC	SHORT RET17
  3409 00000AFB B401                            MOV     AH,1
  3410 00000AFD E85D07                          CALL	IOFUNC
  3411 00000B00 750B                            JNZ     SHORT RESFLG
  3412 00000B02 E8EB20                          CALL	SPOOLINT
  3413 00000B05 26804D1640                      OR      BYTE [ES:DI+16H],40H ; Set user's zero flag
  3414 00000B0A 30C0                            XOR     AL,AL
  3415                                  RET17:
  3416 00000B0C C3                              RETN
  3417                                  
  3418                                  RESFLG:
  3419 00000B0D 26806516BF                      AND     BYTE [ES:DI+16H],0FFH-40H
  3420                                  					    ; Reset user's zero flag
  3421                                  RILP:
  3422 00000B12 E8DB20                          CALL	SPOOLINT
  3423                                      ;entry   $RAW_CON_INPUT        ; System call 7
  3424                                  
  3425                                  _$RAW_CON_INPUT:
  3426                                  
  3427                                  ; Inputs:
  3428                                  ;       None
  3429                                  ; Function:
  3430                                  ;       Input raw character from console, no echo
  3431                                  ; Returns:
  3432                                  ;       AL = character
  3433                                  
  3434 00000B15 31DB                            XOR     BX,BX
  3435 00000B17 E8F710                          CALL	GET_IO_FCB
  3436 00000B1A 72F0                            JC	SHORT RET17
  3437 00000B1C B401                            MOV     AH,1
  3438 00000B1E E83C07                          CALL	IOFUNC
  3439 00000B21 74EF                            JZ      SHORT RILP
  3440 00000B23 30E4                            XOR     AH,AH
  3441 00000B25 E83507                          CALL	IOFUNC
  3442 00000B28 C3                              RETN
  3443                                  ;
  3444                                  ;       Output the character in AL to stdout
  3445                                  ;
  3446                                  ;entry   RAWOUT
  3447                                  RAWOUT:
  3448 00000B29 53                              PUSH    BX
  3449 00000B2A BB0100                          MOV     BX,1
  3450                                  
  3451 00000B2D E8E110                          CALL	GET_IO_FCB
  3452 00000B30 721B                            JC      SHORT RAWRET1
  3453                                  
  3454 00000B32 F6441880                        TEST    BYTE [SI+18H],080H	; output to file?
  3455 00000B36 7411                            JZ      SHORT RAWNORM			; if so, do normally
  3456 00000B38 1E                              PUSH    DS
  3457 00000B39 56                              PUSH    SI
  3458 00000B3A C57419                          LDS     SI,[SI+19H]   	; output to special?
  3459 00000B3D F6440410                        TEST    BYTE [SI+4],ISSPEC
  3460 00000B41 5E                              POP     SI
  3461 00000B42 1F                              POP     DS
  3462 00000B43 7404                            JZ      SHORT RAWNORM			; if not, do normally
  3463 00000B45 CD29                            INT     int_fastcon                     ; quickly output the char
  3464 00000B47 EB03                            JMP     SHORT RAWRET
  3465                                  RAWNORM:
  3466 00000B49 E80800                          CALL    RAWOUT3
  3467                                  RAWRET: 
  3468 00000B4C F8                      	CLC
  3469                                  RAWRET1:
  3470 00000B4D 5B                              POP     BX
  3471 00000B4E C3                      	RETN
  3472                                  ;
  3473                                  ;       Output the character in AL to handle in BX
  3474                                  ;
  3475                                  ;entry   RAWOUT2
  3476                                  RAWOUT2:
  3477 00000B4F E8BF10                          CALL	GET_IO_FCB
  3478 00000B52 7214                            JC	SHORT RET18
  3479                                  RAWOUT3:
  3480 00000B54 50                              PUSH    AX
  3481 00000B55 EB03                            JMP     SHORT RAWOSTRT
  3482                                  ROLP:
  3483 00000B57 E89620                          CALL	SPOOLINT
  3484                                  RAWOSTRT:
  3485 00000B5A B403                            MOV     AH,3
  3486 00000B5C E8FE06                          CALL    IOFUNC
  3487 00000B5F 74F6                            JZ      SHORT ROLP
  3488 00000B61 58                              POP     AX
  3489 00000B62 B402                            MOV     AH,2
  3490 00000B64 E8F606                          CALL    IOFUNC
  3491 00000B67 F8                              CLC                     ; Clear carry indicating successful
  3492                                  RET18:    
  3493 00000B68 C3                      	RETN
  3494                                  
  3495                                  ; ---------------------------------------------------------------------------
  3496                                  
  3497                                  ; This routine is called at DOS init
  3498                                  
  3499                                          ;procedure   OUTMES,NEAR ; String output for internal messages
  3500                                  OUTMES:
  3501                                          ;LODS	CS:BYTE PTR [SI]
  3502 00000B69 2EAC                            CS	LODSB
  3503 00000B6B 3C24                    	CMP     AL,"$" ; 24h
  3504 00000B6D 74F9                            JZ	SHORT RET18
  3505 00000B6F E8C329                          CALL	OUTT
  3506 00000B72 EBF5                            JMP     SHORT OUTMES
  3507                                          ;RETN
  3508                                  
  3509                                  ; ---------------------------------------------------------------------------
  3510                                  
  3511                                  _$PARSE_FILE_DESCRIPTOR:
  3512                                  
  3513                                  ; Inputs:
  3514                                  ;       DS:SI Points to a command line
  3515                                  ;       ES:DI Points to an empty FCB
  3516                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  3517                                  ;                   = 0 Parse stops if separator encountered
  3518                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  3519                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  3520                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  3521                                  ;                   = 0  "       "      "       - put blanks in FCB
  3522                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  3523                                  ;                   = 0  "       "      "        - put blanks in FCB
  3524                                  ; Function:
  3525                                  ;       Parse command line into FCB
  3526                                  ; Returns:
  3527                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  3528                                  ;       DS:SI points to first character after filename
  3529                                  
  3530 00000B74 E8D222                          CALL	MAKEFCB
  3531 00000B77 56                              PUSH    SI
  3532 00000B78 E804FC                          CALL	get_user_stack
  3533 00000B7B 8F4408                          POP	WORD [SI+8]
  3534 00000B7E C3                              RETN
  3535                                  
  3536                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  3537                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3538                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3539                                  ;                                                                          ;
  3540                                  	;procedure   $Dup_PDB,NEAR
  3541                                  _$DUP_PDB:
  3542                                          ;MOV     BYTE [CreatePDB],0FFH	; indicate a new process
  3543 00000B7F 36C606[8D01]FF          	MOV     BYTE [SS:CreatePDB],0FFH ; 15/03/2018
  3544                                  
  3545                                          ;procedure   $CREATE_PROCESS_DATA_BLOCK,NEAR
  3546                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  3547                                  
  3548                                  _$CREATE_PROCESS_DATA_BLOCK:
  3549                                  
  3550                                  ; Inputs:
  3551                                  ;       DX = Segment number of new base
  3552                                  ; Function:
  3553                                  ;       Set up program base and copy term and ^C from int area
  3554                                  ; Returns:
  3555                                  ;       None
  3556                                  ; Called at DOS init
  3557                                  
  3558 00000B85 8EC2                            MOV     ES,DX
  3559                                          ;TEST    BYTE [CreatePDB],0FFh
  3560 00000B87 2EF606[8D01]FF                  TEST	BYTE [CS:CreatePDB],0FFh ; 15/03/2018
  3561 00000B8D 7407                    	JZ      SHORT Create_PDB_old
  3562                                          ;MOV     DS,[CurrentPDB]
  3563 00000B8F 2E8E1E[8B01]                    MOV     DS,[CS:CurrentPDB] ; 15/03/2018
  3564 00000B94 EB06                            JMP     SHORT Create_copy
  3565                                  
  3566                                  Create_PDB_old:
  3567 00000B96 E8E6FB                          CALL	get_user_stack
  3568 00000B99 8E5C14                          MOV     DS,[SI+14H]
  3569                                  
  3570                                  Create_copy:
  3571 00000B9C 31F6                            XOR     SI,SI                   ; copy all 80h bytes
  3572 00000B9E 89F7                            MOV     DI,SI
  3573 00000BA0 B98000                          MOV     CX,80H
  3574 00000BA3 F3A5                            REP     MOVSW
  3575                                  
  3576                                          ;TEST    BYTE [CreatePDB],0FFh	; Shall we create a process?
  3577 00000BA5 2EF606[8D01]FF                  TEST    BYTE [CS:CreatePDB],0FFh
  3578 00000BAB 7436                            JZ      SHORT Create_PDB_cont	; nope, old style call
  3579                                  ;
  3580                                  ; Here we set up for a new process...
  3581                                  ;
  3582                                  
  3583 00000BAD 0E                              PUSH    CS
  3584 00000BAE 1F                              POP     DS
  3585 00000BAF 31DB                            XOR     BX,BX                   ; dup all jfns
  3586 00000BB1 B91400                          MOV     CX,FILPERPROC
  3587                                  
  3588                                  create_dup_jfn:
  3589 00000BB4 06                              PUSH    ES                      ; save new PDB
  3590 00000BB5 E87A32                          CALL	get_jfn_pointer         ; ES:DI is jfn
  3591 00000BB8 7214                            JC      SHORT create_skip	; not a valid jfn
  3592 00000BBA 06                              PUSH    ES                      ; save him
  3593 00000BBB 57                              PUSH    DI
  3594 00000BBC E85F32                          CALL	get_sf_from_jfn         ; get sf pointer
  3595 00000BBF 7203                            JC      SHORT create_no_inc
  3596                                          ;INC	BYTE [ES:DI+SF_ENTRY.sf_ref_count] ; new fh
  3597 00000BC1 26FE05                          INC	BYTE [ES:DI]		; SF_ENTRY.sf_ref_count = 0
  3598                                  
  3599                                  create_no_inc:
  3600 00000BC4 5F                              POP     DI
  3601 00000BC5 07                              POP     ES			; get old jfn
  3602 00000BC6 268A05                          MOV     AL,[ES:DI]		; get sfn
  3603 00000BC9 07                              POP     ES
  3604 00000BCA 06                              PUSH    ES
  3605 00000BCB 268A07                          MOV     AL,[ES:BX]		; copy into new place!
  3606                                  
  3607                                  create_skip:
  3608 00000BCE 07                              POP     ES
  3609 00000BCF 43                              INC     BX                      ; next jfn...
  3610 00000BD0 E2E2                            LOOP    create_dup_jfn
  3611                                  
  3612 00000BD2 FF36[8B01]                      PUSH    word [CurrentPDB]	; get current process
  3613 00000BD6 5B                              POP     BX
  3614 00000BD7 53                              PUSH    BX
  3615 00000BD8 268F061600                      POP     word [ES:PDB.PARENT_PID] ; stash in child
  3616 00000BDD 8C06[8B01]                      MOV     [CurrentPDB],ES
  3617 00000BE1 8EDB                            MOV     DS,BX
  3618                                  ;
  3619                                  ; end of new process create
  3620                                  ;
  3621                                  Create_PDB_cont:
  3622                                          ;MOV     BYTE [CreatePDB],0h	; reset flag
  3623 00000BE3 2EC606[8D01]00                  MOV	BYTE [CS:CreatePDB],0	; 15/03/2018
  3624 00000BE9 A10200                  	MOV     AX,[2]			; set up size for fall through
  3625                                  
  3626                                  ;entry SETMEM
  3627                                  SETMEM:
  3628                                  
  3629                                  ; Inputs:
  3630                                  ;       AX = Size of memory in paragraphs
  3631                                  ;       DX = Segment
  3632                                  ; Function:
  3633                                  ;       Completely prepares a program base at the
  3634                                  ;       specified segment.
  3635                                  ; Called at DOS init
  3636                                  ; Outputs:
  3637                                  ;       DS = DX
  3638                                  ;       ES = DX
  3639                                  ;       [0] has INT int_abort
  3640                                  ;       [2] = First unavailable segment ([ENDMEM])
  3641                                  ;       [5] to [9] form a long call to the entry point
  3642                                  ;       [10] to [13] have exit address (from int_terminate)
  3643                                  ;       [14] to [17] have ctrl-C exit address (from int_ctrl_c)
  3644                                  ;       [18] to [21] have fatal error address (from int_fatal_abort)
  3645                                  ; DX,BP unchanged. All other registers destroyed.
  3646                                  
  3647 00000BEC 31C9                            XOR     CX,CX
  3648 00000BEE 8ED9                            MOV     DS,CX
  3649 00000BF0 8EC2                            MOV     ES,DX
  3650 00000BF2 BE8800                          MOV     SI,addr_int_terminate
  3651 00000BF5 BF0A00                          MOV     DI,SAVEXIT
  3652 00000BF8 B90600                          MOV     CX,6
  3653 00000BFB F3A5                            REP     MOVSW
  3654 00000BFD 26A30200                        MOV     [ES:2],AX
  3655 00000C01 29D0                            SUB     AX,DX
  3656 00000C03 3DFF0F                          CMP     AX,MAXDIF
  3657 00000C06 7603                            JBE     SHORT HAVDIF
  3658 00000C08 B8FF0F                          MOV     AX,MAXDIF
  3659                                  HAVDIF:
  3660 00000C0B BB0C00                          MOV     BX,ENTRYPOINTSEG
  3661 00000C0E 29C3                            SUB     BX,AX
  3662 00000C10 B104                            MOV     CL,4
  3663 00000C12 D3E0                            SHL     AX,CL
  3664 00000C14 8EDA                            MOV     DS,DX
  3665 00000C16 A30600                          MOV     WORD [PDB.CPM_CALL+1],AX
  3666 00000C19 891E0800                        MOV     WORD [PDB.CPM_CALL+3],BX
  3667 00000C1D C7060000CD20                    MOV     WORD [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  3668 00000C23 C60605009A                      MOV     BYTE [PDB.CPM_CALL],mi_Long_CALL
  3669 00000C28 C7065000CD21                    MOV     WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  3670 00000C2E C6065200CB                      MOV     BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  3671 00000C33 C3                              RETN
  3672                                  
  3673                                  ;$CREATE_PROCESS_DATA_BLOCK ENDP
  3674                                  ;	do_ext
  3675                                  
  3676                                  ;CODE   ENDS
  3677                                  ;       END
  3678                                  
  3679                                  ;============================================================================
  3680                                  ; GETSET.ASM
  3681                                  ;============================================================================
  3682                                  ; Retro DOS v2.0 - 12/03/2018
  3683                                  
  3684                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  3685                                  ;NAME	GETSET
  3686                                  
  3687                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  3688                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  3689                                  
  3690                                  USERNUM:
  3691 00000C34 0000                    	DW	0			; 24 bit user number
  3692 00000C36 00                              DB      0
  3693                                  ;	IF      IBM
  3694                                  ;OEMNUM: DB      0			; 8 bit OEM number
  3695                                  ;	ELSE
  3696 00000C37 FF                      OEMNUM:	DB      0FFH			; 8 bit OEM number
  3697                                  ;	ENDIF
  3698                                  
  3699                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3700 00000C38 02                      MSMAJOR: DB	DOS_MAJOR_VERSION
  3701 00000C39 0B                      MSMINOR: DB	DOS_MINOR_VERSION
  3702                                  
  3703                                  
  3704                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  3705                                  
  3706                                  _$GET_VERSION:
  3707                                  
  3708                                  ; Inputs:
  3709                                  ;       None
  3710                                  ; Function:
  3711                                  ;       Return MS-DOS version number
  3712                                  ; Outputs:
  3713                                  ;       OEM number in BH
  3714                                  ;       User number in BL:CX (24 bits)
  3715                                  ;       Version number as AL.AH in binary
  3716                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  3717                                  
  3718 00000C3A 16                              PUSH    SS
  3719 00000C3B 1F                              POP     DS
  3720 00000C3C 8B1E[360C]                      MOV     BX,[USERNUM+2]
  3721 00000C40 8B0E[340C]                      MOV     CX,[USERNUM]
  3722 00000C44 A1[380C]                        MOV     AX,[MSVERS]
  3723 00000C47 E835FB                          call	get_user_stack
  3724 00000C4A 895C02                          MOV     [SI+2],BX
  3725 00000C4D 894C04                          MOV     [SI+4],CX
  3726                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  3727 00000C50 8904                            MOV	[SI],AX ; 31/03/2018
  3728 00000C52 C3                      	RETN
  3729                                  
  3730                                  ;BREAK <$International - return country-dependent information>
  3731                                  
  3732                                  ;
  3733                                  ; Inputs:
  3734                                  ;       DS:DX point to a block
  3735                                  ; Function:
  3736                                  ;       give users an idea of what country the application is running
  3737                                  ; Outputs:
  3738                                  ;       AX = number of bytes transferred
  3739                                  ;       DS:DX ->+---------------------------------+
  3740                                  ;               | WORD Date/time format           |
  3741                                  ;               +---------------------------------+
  3742                                  ;               | BYTE ASCIZ currency symbol      |
  3743                                  ;               +---------------------------------+
  3744                                  ;               | BYTE ASCIZ thousands separator  |
  3745                                  ;               +---------------------------------+
  3746                                  ;               | BYTE ASCIZ decimal separator    |
  3747                                  ;               +---------------------------------+
  3748                                  
  3749                                  _$INTERNATIONAL:
  3750                                  
  3751 00000C53 88C3                            MOV     BL,AL
  3752 00000C55 1E                              PUSH    DS
  3753 00000C56 07                              POP     ES
  3754 00000C57 52                              PUSH    DX
  3755 00000C58 5F                              POP     DI
  3756 00000C59 16                              PUSH    SS
  3757 00000C5A 1F                              POP     DS
  3758 00000C5B 83FFFF                          CMP     DI,-1
  3759 00000C5E 7440                            JZ	SHORT international_set
  3760 00000C60 08DB                            OR      BL,BL
  3761 00000C62 750B                            JNZ	SHORT international_find
  3762 00000C64 8B36[A401]                      MOV     SI,[Current_Country]
  3763 00000C68 8B44FE                          MOV     AX,[SI-2]		; Get size in AL, country code in AH
  3764 00000C6B 88E3                            MOV     BL,AH			; Set country code
  3765 00000C6D EB1E                            JMP     SHORT international_copy
  3766                                  
  3767                                  international_find:
  3768 00000C6F E80700                          CALL    international_get
  3769 00000C72 7319                            JNC	SHORT international_copy
  3770                                          ;error	country_not_found
  3771 00000C74 B002                    	MOV	AL,country_not_found
  3772 00000C76 E974FC                  	jmp	SYS_RET_ERR
  3773                                  
  3774                                  international_get:
  3775 00000C79 BE[A601]                        MOV     SI,international_table
  3776                                  international_next:
  3777 00000C7C AD                              LODSW                           ; Get size in AL, country code in AH
  3778 00000C7D 3CFF                            CMP     AL,-1
  3779 00000C7F 7502                            JNZ     SHORT check_code
  3780 00000C81 F9                              STC
  3781                                  RET35:
  3782 00000C82 C3                              RETN
  3783                                  
  3784                                  check_code:
  3785 00000C83 38E3                            CMP     BL,AH
  3786 00000C85 74FB                            JZ      SHORT RET35		; Carry clear
  3787 00000C87 30E4                            XOR     AH,AH
  3788 00000C89 01C6                            ADD     SI,AX
  3789 00000C8B EBEF                            JMP     SHORT international_next
  3790                                  
  3791                                  international_copy:
  3792 00000C8D 88C1                            MOV     CL,AL
  3793 00000C8F 30ED                            XOR     CH,CH
  3794 00000C91 57                              PUSH    DI
  3795 00000C92 F3A4                            REP     MOVSB
  3796 00000C94 5F                              POP     DI
  3797 00000C95 268C4D14                        MOV     [ES:DI+14H],CS   
  3798                                  					; Set segment for case map call
  3799                                  international_ok:
  3800 00000C99 31C0                            XOR     AX,AX
  3801 00000C9B 88D8                            MOV     AL,BL           ; Return country code in AX
  3802 00000C9D E943FC                  	JMP	SYS_RET_OK
  3803                                  
  3804                                  international_set:
  3805 00000CA0 E8D6FF                          CALL    international_get
  3806 00000CA3 7305                            JNC	SHORT international_store
  3807                                          ;error	country_not_found
  3808 00000CA5 B002                    	MOV	AL,country_not_found
  3809 00000CA7 E943FC                  	jmp	SYS_RET_ERR
  3810                                  
  3811                                  international_store:
  3812 00000CAA 8936[A401]                      MOV     [Current_Country],SI
  3813 00000CAE EBE9                            JMP     SHORT international_ok
  3814                                  
  3815                                  ;BREAK <$Get_Verify_on_Write - return verify-after-write flag>
  3816                                  
  3817                                  _$GET_VERIFY_ON_WRITE:
  3818                                  
  3819                                  ; Inputs:
  3820                                  ;       none.
  3821                                  ; Function:
  3822                                  ;       returns flag
  3823                                  ; Returns:
  3824                                  ;       AL = value of VERIFY flag
  3825                                  
  3826                                          ;MOV	AL,[VERFLG]
  3827 00000CB0 36A0[DB00]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  3828 00000CB4 C3                              RETN
  3829                                  
  3830                                  ;BREAK <$Set_Verify_on_Write - Toggle verify-after-write flag>
  3831                                  
  3832                                  _$SET_VERIFY_ON_WRITE:
  3833                                  
  3834                                  ; Inputs:
  3835                                  ;       AL = desired value of VERIFY flag
  3836                                  ; Function:
  3837                                  ;       Sets flag
  3838                                  ; Returns:
  3839                                  ;       None
  3840                                  
  3841 00000CB5 2401                            AND     AL,1
  3842                                          ;MOV	[VERFLG],AL
  3843 00000CB7 36A2[DB00]                      MOV	[SS:VERFLG],AL ; Retro DOS v2.0 - 12/03/2018
  3844 00000CBB C3                      	RETN
  3845                                  
  3846                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  3847                                  
  3848                                  _$SET_CTRL_C_TRAPPING:
  3849                                  
  3850                                  ; Inputs:
  3851                                  ;       AL = 0 read ^C status
  3852                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3853                                  ; Function:
  3854                                  ;       Enable disable ^C checking in dispatcher
  3855                                  ; Outputs:
  3856                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  3857                                  
  3858 00000CBC 08C0                            OR      AL,AL
  3859 00000CBE 750B                            JNZ     SHORT CTRL_C_set
  3860 00000CC0 E8BCFA                  	CALL	get_user_stack
  3861                                          ;MOV	AL,[CNTCFLAG]
  3862 00000CC3 36A0[2801]              	MOV	AL,[SS:CNTCFLAG]  ; 12/03/2018
  3863 00000CC7 884406                          MOV     [SI+6],AL
  3864 00000CCA C3                              RETN
  3865                                  CTRL_C_set:
  3866 00000CCB FEC8                            DEC     AL
  3867 00000CCD 7509                            JNZ     SHORT bad_val
  3868 00000CCF 80E201                          AND     DL,01h
  3869                                          ;MOV	[CNTCFLAG],DL
  3870 00000CD2 368816[2801]            	MOV	[SS:CNTCFLAG],DL  ; 12/03/2018	
  3871 00000CD7 C3                              RETN
  3872                                  bad_val:
  3873 00000CD8 B0FF                            MOV     AL,0FFH
  3874 00000CDA C3                              RETN
  3875                                  
  3876                                  ;BREAK <$Get_INDOS_Flag -- Return location of DOS critical-section flag>
  3877                                  
  3878                                  _$GET_INDOS_FLAG:
  3879                                  
  3880                                  ; Inputs:
  3881                                  ;       None
  3882                                  ; Function:
  3883                                  ;       Returns location of DOS status for interrupt routines
  3884                                  ; Returns:
  3885                                  ;       Flag location in ES:BX
  3886                                  
  3887 00000CDB E8A1FA                          CALL	get_user_stack
  3888 00000CDE C74402[2301]                    MOV     WORD [SI+2],INDOS
  3889 00000CE3 8C5410                          MOV     [SI+10H],SS
  3890 00000CE6 C3                      	RETN 
  3891                                  
  3892                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3893                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3894                                  ;
  3895                                                                                                            ;
  3896                                  _$GET_IN_VARS:
  3897                                  
  3898                                  ; Return a pointer to interesting DOS variables This call is version
  3899                                  ; dependent and is subject to change without notice in future versions.
  3900                                  ; Use at risk.
  3901                                  
  3902 00000CE7 E895FA                          CALL	get_user_stack
  3903 00000CEA C74402[F000]                    MOV     WORD [SI+2],SYSINITVAR
  3904 00000CEF 8C5410                          MOV     [SI+10H],SS
  3905 00000CF2 C3                      	RETN
  3906                                  ;                                                                          ;
  3907                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3908                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3909                                  
  3910                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  3911                                  
  3912                                  _$GET_DRIVE_FREESPACE:
  3913                                  
  3914                                  ; Inputs:
  3915                                  ;       DL = Drive number
  3916                                  ; Function:
  3917                                  ;       Return number of free allocation units on drive
  3918                                  ; Outputs:
  3919                                  ;       BX = Number of free allocation units
  3920                                  ;       DX = Total Number of allocation units on disk
  3921                                  ;       CX = Sector size
  3922                                  ;       AX = Sectors per allocation unit
  3923                                  ;          = -1 if bad drive specified
  3924                                  ; This call returns the same info in the same registers (except for FAT pointer)
  3925                                  ;      as the old FAT pointer calls
  3926                                  
  3927 00000CF3 16                              PUSH    SS
  3928 00000CF4 1F                              POP     DS
  3929 00000CF5 88D0                            MOV     AL,DL
  3930 00000CF7 E82A0F                  	CALL	GETTHISDRV
  3931 00000CFA B8FFFF                          MOV     AX,-1
  3932 00000CFD 7224                            JC      SHORT BADFRDRIVE
  3933 00000CFF E86915                  	CALL	FATREAD
  3934 00000D02 31D2                            XOR     DX,DX
  3935 00000D04 BB0200                          MOV     BX,2
  3936 00000D07 268B4E0D                        MOV     CX,[ES:BP+0DH]
  3937 00000D0B 49                              DEC     CX
  3938 00000D0C 51                              PUSH    CX              ; Save Total
  3939                                  SCANFREE:
  3940 00000D0D E85A14                  	CALL	UNPACK
  3941 00000D10 7501                            JNZ     SHORT NOTFREECLUS
  3942 00000D12 42                              INC     DX
  3943                                  NOTFREECLUS:
  3944 00000D13 43                              INC     BX
  3945 00000D14 E2F7                            LOOP    SCANFREE
  3946 00000D16 5B                              POP     BX              ; Remember Total
  3947 00000D17 268A4604                        MOV     AL,[ES:BP+4]
  3948 00000D1B FEC0                            INC     AL
  3949 00000D1D 30E4                            XOR     AH,AH
  3950 00000D1F 268B4E02                        MOV     CX,[ES:BP+2]
  3951                                  BADFRDRIVE:
  3952 00000D23 E859FA                  	CALL	get_user_stack
  3953                                  	;ASSUME  DS:NOTHING
  3954 00000D26 894C04                          MOV     [SI+4],CX
  3955 00000D29 895C06                          MOV     [SI+6],BX
  3956 00000D2C 895402                          MOV     [SI+2],DX
  3957                                          ;MOV	[SI+user_env.user_AX],AX
  3958 00000D2F 8904                            MOV	[SI],AX ; 31/03/2018
  3959 00000D31 C3                      	RETN
  3960                                  
  3961                                  ;BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  3962                                  
  3963                                  _$GET_DMA:
  3964                                  
  3965                                  ; Inputs:
  3966                                  ;       None
  3967                                  ; Function:
  3968                                  ;       Get DISK TRANSFER ADDRESS
  3969                                  ; Returns:
  3970                                  ;       ES:BX is current transfer address
  3971                                  
  3972                                          ;MOV     BX,[DMAADD]
  3973                                          ;MOV     CX,[DMAADD+2]
  3974                                  	; 12/03/2018
  3975 00000D32 368B1E[DF00]                    MOV     BX,[SS:DMAADD]
  3976 00000D37 368B0E[E100]                    MOV     CX,[SS:DMAADD+2]
  3977 00000D3C E840FA                          CALL	get_user_stack
  3978 00000D3F 895C02                          MOV     [SI+2],BX
  3979 00000D42 894C10                          MOV     [SI+10H],CX
  3980 00000D45 C3                              RETN
  3981                                  
  3982                                  _$SET_DMA:		; System call 26
  3983                                  
  3984                                  ; Inputs:
  3985                                  ;       DS:DX is desired new disk transfer address
  3986                                  ; Function:
  3987                                  ;       Set DISK TRANSFER ADDRESS
  3988                                  ; Returns:
  3989                                  ;       None
  3990                                  
  3991                                          ;MOV     [DMAADD],DX
  3992                                          ;MOV     [DMAADD+2],DS
  3993                                  	; 12/03/2018
  3994 00000D46 368916[DF00]                    MOV     [SS:DMAADD],DX
  3995 00000D4B 368C1E[E100]                    MOV     [SS:DMAADD+2],DS
  3996 00000D50 C3                              RETN
  3997                                  
  3998                                  ;BREAK <$Get_Default_DPB,$Get_DPB -- Return pointer to DPB>
  3999                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4000                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4001                                  ;                                                                          ;
  4002                                  
  4003                                  _$GET_DEFAULT_DPB:
  4004                                  
  4005                                  ; Inputs:
  4006                                  ;       DL = Drive number (always default drive for call 31)
  4007                                  ; Function:
  4008                                  ;       Return pointer to drive parameter table for default drive
  4009                                  ; Returns:
  4010                                  ;       DS:BX points to the DPB
  4011                                  ;       AL = 0 If OK, = -1 if bad drive (call 50 only)
  4012                                  
  4013 00000D51 B200                            MOV     DL,0
  4014                                  _$GET_DPB:
  4015 00000D53 16                              PUSH    SS
  4016 00000D54 1F                              POP     DS
  4017 00000D55 88D0                            MOV     AL,DL
  4018 00000D57 E8CA0E                  	CALL	GETTHISDRV
  4019 00000D5A 720F                            JC      SHORT ISNODRV
  4020 00000D5C E80C15                  	CALL	FATREAD
  4021 00000D5F E81DFA                  	CALL	get_user_stack
  4022 00000D62 896C02                          MOV     [SI+2],BP
  4023 00000D65 8C440E                          MOV     [SI+0EH],ES
  4024 00000D68 30C0                            XOR     AL,AL
  4025 00000D6A C3                              RETN
  4026                                  ISNODRV:
  4027 00000D6B B0FF                            MOV     AL,-1
  4028 00000D6D C3                              RETN
  4029                                  ;                                                                          ;
  4030                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4031                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4032                                  
  4033                                  ;BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  4034                                  
  4035                                  _$GET_DEFAULT_DRIVE:
  4036                                  
  4037                                  ; Inputs:
  4038                                  ;       None
  4039                                  ; Function:
  4040                                  ;       Return current drive number
  4041                                  ; Returns:
  4042                                  ;       AL = drive number
  4043                                  
  4044                                          ;MOV     AL,[CURDRV]
  4045 00000D6E 36A0[2001]                      MOV	AL, [SS:CURDRV] ; 12/03/2018
  4046 00000D72 C3                      	RETN
  4047                                  
  4048                                  _$SET_DEFAULT_DRIVE:
  4049                                  
  4050                                  ; Inputs:
  4051                                  ;       DL = Drive number for new default drive
  4052                                  ; Function:
  4053                                  ;       Set the default drive
  4054                                  ; Returns:
  4055                                  ;       AL = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  4056                                  
  4057                                          ;MOV     AL,[NUMIO]
  4058 00000D73 36A0[0001]              	MOV	AL, [SS:NUMIO] ; 12/03/2018
  4059 00000D77 38C2                            CMP     DL,AL
  4060 00000D79 7305                            JNB	SHORT _RET17
  4061                                          ;MOV     [CURDRV],DL
  4062 00000D7B 368816[2001]            	MOV	[SS:CURDRV],DL ; 12/03/2018
  4063                                  _RET17:  
  4064 00000D80 C3                      	RETN
  4065                                  
  4066                                  
  4067                                  ;BREAK <$Get_Interrupt_Vector - Get/Set interrupt vectors>
  4068                                  
  4069                                  _$GET_INTERRUPT_VECTOR:
  4070                                  
  4071                                  ; Inputs:
  4072                                  ;       AL = interrupt number
  4073                                  ; Function:
  4074                                  ;       Get the interrupt vector
  4075                                  ; Returns:
  4076                                  ;       ES:BX is current interrupt vector
  4077                                  
  4078 00000D81 E81900                          CALL    RECSET
  4079 00000D84 26C41F                          LES     BX,[ES:BX]
  4080 00000D87 E8F5F9                  	CALL	get_user_stack
  4081 00000D8A 895C02                          MOV     [SI+2],BX
  4082 00000D8D 8C4410                          MOV     [SI+10H],ES
  4083 00000D90 C3                      	RETN
  4084                                  
  4085                                  _$SET_INTERRUPT_VECTOR:		; System call 37
  4086                                  
  4087                                  ; Inputs:
  4088                                  ;       AL = interrupt number
  4089                                  ;       DS:DX is desired new interrupt vector
  4090                                  ; Function:
  4091                                  ;       Set the interrupt vector
  4092                                  ; Returns:
  4093                                  ;       None
  4094                                  
  4095 00000D91 E80900                          CALL    RECSET
  4096 00000D94 268917                          MOV     [ES:BX],DX
  4097 00000D97 268C5F02                        MOV     [ES:BX+2],DS
  4098 00000D9B C3                      	RETN
  4099                                  
  4100                                          ;IF	ALTVECT
  4101                                  ;VECIN:  ; INPUT VECTORS
  4102                                  ;	DB	22H             ; Terminate
  4103                                  ;	DB      23H             ; ^C
  4104                                  ;	DB      24H             ; Hard error
  4105                                  ;	DB	28H             ; Spooler
  4106                                  ;LSTVEC:
  4107                                  ;	DB	0		; ALL OTHER
  4108                                  
  4109                                  ;VECOUT: ; GET MAPPED VECTOR
  4110                                  ;	DB	int_terminate
  4111                                  ;	DB      int_ctrl_c
  4112                                  ;	DB      int_fatal_abort
  4113                                  ;	DB      int_spooler
  4114                                  ;LSTVEC2:
  4115 00000D9C 00                      	DB	0		; Map to itself
  4116                                  
  4117                                  ;NUMVEC	EQU	VECOUT-VECIN
  4118                                  ;	ENDIF
  4119                                  
  4120                                  RECSET:
  4121                                  
  4122                                          ;IF	ALTVECT
  4123                                          ;PUSH	SS
  4124                                          ;POP	ES
  4125                                          ;MOV	[LSTVEC],AL     ; Terminate list with real vector
  4126                                          ;MOV	[LSTVEC2],AL    ; Terminate list with real vector
  4127                                          ;MOV	CX,NUMVEC       ; Number of possible translations
  4128                                          ;MOV	DI,VECIN	; Point to vectors
  4129                                          ;REPNE	SCASB
  4130                                          ;MOV	AL,[ES:DI+NUMVEC-1] ; Get translation
  4131                                          ;ENDIF
  4132                                  
  4133 00000D9D 31DB                            XOR     BX,BX
  4134 00000D9F 8EC3                            MOV     ES,BX
  4135 00000DA1 88C3                            MOV     BL,AL
  4136 00000DA3 D1E3                            SHL     BX,1
  4137 00000DA5 D1E3                            SHL     BX,1
  4138 00000DA7 C3                      	RETN
  4139                                  
  4140                                  ;BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  4141                                  
  4142                                  ; input:    AL = function:
  4143                                  ;                   0 - read switch char
  4144                                  ;                   1 - set switch char (char in DL)
  4145                                  ;                   2 - read device availability
  4146                                  ;                   3 - set device availability (0/FF in DL)
  4147                                  ;                       DL = 0 means /DEV/ must preceed device names
  4148                                  ;                       DL = Non 0 means /DEV/ need not preeceed
  4149                                  ; output:   (get) DL - character/flag
  4150                                  ;
  4151                                  
  4152                                  _$CHAR_OPER:
  4153                                  
  4154 00000DA8 16                              PUSH    SS
  4155 00000DA9 1F                              POP     DS
  4156 00000DAA 08C0                            OR      AL,AL
  4157 00000DAC 7506                            JNZ     SHORT char_oper_set_switch
  4158 00000DAE 8A16[E500]                      MOV     DL,[switch_character]
  4159 00000DB2 EB1F                            JMP     SHORT char_oper_ret
  4160                                  char_oper_set_switch:
  4161 00000DB4 FEC8                            DEC     AL
  4162 00000DB6 7505                            JNZ	SHORT char_oper_read_avail
  4163 00000DB8 8816[E500]                      MOV     [switch_character],DL
  4164 00000DBC C3                      	RETN
  4165                                  char_oper_read_avail:
  4166 00000DBD FEC8                            DEC     AL
  4167 00000DBF 7506                            JNZ	SHORT char_oper_set_avail
  4168 00000DC1 8A16[E600]                      MOV     DL,[device_availability]
  4169 00000DC5 EB0C                            JMP     SHORT char_oper_ret
  4170                                  char_oper_set_avail:
  4171 00000DC7 FEC8                            DEC     AL
  4172 00000DC9 7505                            JNZ     SHORT char_oper_bad_ret
  4173 00000DCB 8816[E600]                      MOV     [device_availability],DL
  4174 00000DCF C3                      	RETN
  4175                                  char_oper_bad_ret:
  4176 00000DD0 B0FF                            MOV     AL,0FFh
  4177 00000DD2 C3                      	RETN
  4178                                  char_oper_ret:
  4179 00000DD3 E8A9F9                  	CALL	get_user_stack
  4180 00000DD6 895406                          MOV     [SI+6],DX
  4181 00000DD9 C3                      	RETN
  4182                                  
  4183                                  ;BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  4184                                  
  4185                                  _$SETDPB:
  4186                                  
  4187                                  ; Inputs:
  4188                                  ;       ES:BP Points to DPB
  4189                                  ;       DS:SI Points to BPB
  4190                                  ; Function:
  4191                                  ;       Build a correct DPB from the BPB
  4192                                  ; Outputs:
  4193                                  ; ES:BP and DS preserved all others destroyed
  4194                                  
  4195 00000DDA 89EF                            MOV     DI,BP
  4196 00000DDC 83C702                          ADD     DI,2                    ; Skip over dpb_drive and dpb_UNIT
  4197 00000DDF AD                              LODSW
  4198 00000DE0 AB                              STOSW                           ; dpb_sector_size
  4199 00000DE1 89C2                            MOV     DX,AX
  4200 00000DE3 AC                              LODSB
  4201 00000DE4 FEC8                            DEC     AL
  4202 00000DE6 AA                              STOSB                           ; dpb_cluster_mask
  4203 00000DE7 FEC0                            INC     AL
  4204 00000DE9 30E4                            XOR     AH,AH
  4205                                  LOG2LOOP:
  4206 00000DEB A801                            TEST    AL,1
  4207 00000DED 7506                            JNZ     SHORT SAVLOG
  4208 00000DEF FEC4                            INC     AH
  4209 00000DF1 D0E8                            SHR     AL,1
  4210 00000DF3 EBF6                            JMP     SHORT LOG2LOOP
  4211                                  SAVLOG:
  4212 00000DF5 88E0                            MOV     AL,AH
  4213 00000DF7 AA                              STOSB                           ; dpb_cluster_shift
  4214 00000DF8 88C3                            MOV     BL,AL
  4215 00000DFA A5                              MOVSW                           ; dpb_first_FAT Start of FAT (# of reserved sectors)
  4216 00000DFB AC                              LODSB
  4217 00000DFC AA                              STOSB                           ; dpb_FAT_count Number of FATs
  4218 00000DFD 88C7                            MOV     BH,AL
  4219 00000DFF AD                              LODSW
  4220 00000E00 AB                              STOSW                           ; dpb_root_entries Number of directory entries
  4221 00000E01 B105                            MOV     CL,5
  4222 00000E03 D3EA                            SHR     DX,CL                   ; Directory entries per sector
  4223 00000E05 48                              DEC     AX
  4224 00000E06 01D0                            ADD     AX,DX                   ; Cause Round Up
  4225 00000E08 89D1                            MOV     CX,DX
  4226 00000E0A 31D2                            XOR     DX,DX
  4227 00000E0C F7F1                            DIV     CX
  4228 00000E0E 89C1                            MOV     CX,AX                   ; Number of directory sectors
  4229 00000E10 47                              INC     DI
  4230 00000E11 47                              INC     DI                      ; Skip dpb_first_sector
  4231 00000E12 A5                              MOVSW                           ; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  4232 00000E13 AC                              LODSB
  4233 00000E14 26884616                        MOV     [ES:BP+16H],AL    	; Media byte
  4234 00000E18 AD                              LODSW                           ; Number of sectors in a FAT
  4235 00000E19 AA                              STOSB                           ; dpb_FAT_size
  4236 00000E1A F6E7                            MUL     BH                      ; Space occupied by all FATs
  4237 00000E1C 26034606                        ADD     AX,[ES:BP+6]
  4238 00000E20 AB                              STOSW                           ; dpb_dir_sector
  4239 00000E21 01C8                            ADD     AX,CX                   ; Add number of directory sectors
  4240 00000E23 2689460B                        MOV     [ES:BP+0BH],AX
  4241 00000E27 262B460D                        SUB     AX,[ES:BP+0DH]
  4242 00000E2B F7D8                            NEG     AX                      ; Sectors in data area
  4243 00000E2D 88D9                            MOV     CL,BL                   ; dpb_cluster_shift
  4244 00000E2F D3E8                            SHR     AX,CL                   ; Div by sectors/cluster
  4245 00000E31 40                              INC     AX
  4246 00000E32 2689460D                        MOV     [ES:BP+0DH],AX
  4247 00000E36 26C7461C0000                    MOV     WORD [ES:BP+1CH],0 ; Current directory is root
  4248 00000E3C C3                      	RETN
  4249                                  ;                                                                          ;
  4250                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4251                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4252                                  
  4253                                  ;    do_ext
  4254                                  
  4255                                  ;CODE	ENDS
  4256                                  ;    END
  4257                                  
  4258                                  ;============================================================================
  4259                                  ; DIRCALL.ASM
  4260                                  ;============================================================================
  4261                                  ; Retro DOS v2.0 - 09/03/2018
  4262                                  
  4263                                  ;TITLE DIRCALL - Directory manipulation internal calls
  4264                                  ;NAME  DIRCALL
  4265                                  
  4266                                  ; $MKDIR
  4267                                  ; $CHDIR
  4268                                  ; $RMDIR
  4269                                  
  4270                                  ;.xlist
  4271                                  ;INCLUDE DOSSEG.ASM
  4272                                  
  4273                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  4274                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
  4275                                  
  4276                                  ; XENIX CALLS
  4277                                  ;BREAK <$MkDir - Make a directory entry>
  4278                                  
  4279                                  MKNERRJ: 
  4280 00000E3D E9B000                  	JMP	MKNERR
  4281                                  NODEEXISTSJ: 
  4282 00000E40 E9AB00                  	JMP	NODEEXISTS
  4283                                  
  4284                                  _$MKDIR:
  4285                                  
  4286                                  ; Inputs:
  4287                                  ;       DS:DX Points to asciz name
  4288                                  ; Function:
  4289                                  ;       Make a new directory
  4290                                  ; Returns:
  4291                                  ;       STD XENIX Return
  4292                                  ;       AX = mkdir_path_not_found if path bad
  4293                                  ;       AX = mkdir_access_denied  If
  4294                                  ;               Directory cannot be created
  4295                                  ;               Node already exists
  4296                                  ;               Device name given
  4297                                  ;               Disk or directory(root) full
  4298                                  
  4299 00000E43 E80B2B                          CALL	validate_path
  4300 00000E46 72F5                            JC      SHORT MKNERRJ
  4301 00000E48 89D6                            MOV     SI,DX
  4302                                          ; 15/03/2018
  4303                                  	;MOV     [THISFCB+2],SS
  4304                                          ;MOV     WORD [THISFCB],AUXSTACK-40  ; Scratch space
  4305 00000E4A 2E8C16[B103]            	MOV     [CS:THISFCB+2],SS
  4306 00000E4F 2EC706[AF03][7204]              MOV     WORD [CS:THISFCB],AUXSTACK-40
  4307 00000E56 B010                            MOV     AL,attr_directory
  4308                                          ;MOV     WORD [CREATING],0E500h
  4309 00000E58 2EC706[8C03]00E5        	MOV     WORD [CS:CREATING],0E500h
  4310 00000E5F E83B08                  	CALL	MAKENODE
  4311 00000E62 B003                            MOV     AL,mkdir_path_not_found
  4312 00000E64 72D7                            JC      SHORT MKNERRJ
  4313 00000E66 75D8                            JNZ     SHORT NODEEXISTSJ
  4314 00000E68 C53E[DD03]                      LDS     DI,[CURBUF]
  4315 00000E6C 29FE                            SUB     SI,DI
  4316 00000E6E 56                              PUSH    SI              ; Pointer to fcb_FIRCLUS
  4317 00000E6F FF7508                          PUSH    WORD [DI+8] ; Sector of new node
  4318 00000E72 16                              PUSH    SS
  4319 00000E73 1F                              POP     DS
  4320 00000E74 FF36[C103]                      PUSH    WORD [DIRSTART]	; Parent for .. entry
  4321 00000E78 31C0                            XOR     AX,AX
  4322 00000E7A A3[C103]                        MOV     [DIRSTART],AX   ; Null directory
  4323 00000E7D E8E505                          CALL	NEWDIR
  4324 00000E80 7251                            JC      SHORT NODEEXISTSPOPDEL	; No room
  4325 00000E82 E83007                          CALL	GETENT          ; First entry
  4326 00000E85 C43E[DD03]                      LES     DI,[CURBUF]
  4327 00000E89 26C6450501                      MOV     BYTE [ES:DI+5],1
  4328 00000E8E 83C710                          ADD     DI,BUFINSIZ     ; Point at buffer
  4329 00000E91 B82E20                          MOV     AX,202EH        ; ". "
  4330 00000E94 AB                              STOSW
  4331 00000E95 8B16[C103]                      MOV     DX,[DIRSTART]   ; Point at itself
  4332 00000E99 E83806                          CALL	SETDOTENT
  4333 00000E9C B82E2E                          MOV     AX,2E2EH        ; ".."
  4334 00000E9F AB                              STOSW
  4335 00000EA0 5A                              POP     DX              ; Parent
  4336 00000EA1 E83006                  	CALL	SETDOTENT
  4337 00000EA4 C42E[9A03]                      LES     BP,[THISDPB]
  4338 00000EA8 5A                              POP     DX              ; Entry sector
  4339 00000EA9 30C0                            XOR     AL,AL           ; Pre read
  4340 00000EAB E81118                  	CALL	GETBUFFR
  4341 00000EAE 8B16[C103]                      MOV     DX,[DIRSTART]
  4342 00000EB2 C53E[DD03]                      LDS     DI,[CURBUF]
  4343                                  ZAPENT:
  4344 00000EB6 5E                              POP     SI              ; fcb_Firclus pointer
  4345 00000EB7 01FE                            ADD     SI,DI
  4346 00000EB9 8914                            MOV     [SI],DX
  4347 00000EBB 31D2                            XOR     DX,DX
  4348 00000EBD 895402                          MOV     [SI+2],DX
  4349 00000EC0 895404                          MOV     [SI+4],DX
  4350                                  DIRUP:
  4351 00000EC3 C6450501                        MOV     BYTE [DI+5],1
  4352 00000EC7 16                              PUSH    SS
  4353 00000EC8 1F                              POP     DS
  4354 00000EC9 268A4600                        MOV     AL,[ES:BP]
  4355 00000ECD E89118                  	CALL	FLUSHBUF
  4356                                  SYS_RET_OKJ:
  4357 00000ED0 E910FA                          JMP     SYS_RET_OK
  4358                                  
  4359                                  NODEEXISTSPOPDEL:
  4360 00000ED3 5A                              POP     DX              ; Parent
  4361 00000ED4 5A                              POP     DX              ; Entry sector
  4362 00000ED5 C42E[9A03]                      LES     BP,[THISDPB]
  4363 00000ED9 30C0                            XOR     AL,AL           ; Pre read
  4364 00000EDB E8E117                  	CALL	GETBUFFR
  4365 00000EDE C53E[DD03]                      LDS     DI,[CURBUF]
  4366 00000EE2 5E                              POP     SI              ; dir_first pointer
  4367 00000EE3 01FE                            ADD     SI,DI
  4368 00000EE5 83EE1A                          SUB     SI,dir_entry.dir_first ; Point back to start of dir entry
  4369 00000EE8 C604E5                          MOV     BYTE [SI],0E5H	; Free the entry
  4370 00000EEB E8D5FF                          CALL    DIRUP
  4371                                  NODEEXISTS:
  4372 00000EEE B005                            MOV     AL,mkdir_access_denied
  4373                                  MKNERR:
  4374 00000EF0 E9FAF9                          JMP     SYS_RET_ERR
  4375                                  
  4376                                  ;BREAK <$ChDir -- Change current directory on a drive>
  4377                                  
  4378                                  _$CHDIR:
  4379                                  
  4380                                  ; Inputs:
  4381                                  ;       DS:DX Points to asciz name
  4382                                  ; Function:
  4383                                  ;       Change current directory
  4384                                  ; Returns:
  4385                                  ;       STD XENIX Return
  4386                                  ;       AX = chdir_path_not_found if error
  4387                                  
  4388 00000EF3 E85B2A                          CALL	validate_path
  4389 00000EF6 725A                            JC      SHORT PATHTOOLONG
  4390                                  
  4391 00000EF8 1E                              PUSH    DS
  4392 00000EF9 52                              PUSH    DX
  4393 00000EFA 89D6                            MOV     SI,DX
  4394 00000EFC E84008                  	CALL	GETPATH
  4395 00000EFF 724F                            JC      SHORT PATHNOGOOD
  4396 00000F01 754D                            JNZ     SHORT PATHNOGOOD
  4397 00000F03 A1[C103]                        MOV     AX,[DIRSTART]
  4398 00000F06 89C3                            MOV     BX,AX
  4399 00000F08 26875E1C                        XCHG    BX,[ES:BP+1CH]
  4400 00000F0C 09C0                            OR      AX,AX
  4401 00000F0E 5E                              POP     SI
  4402 00000F0F 1F                              POP     DS
  4403 00000F10 74BE                            JZ      SHORT SYS_RET_OKJ
  4404 00000F12 89EF                            MOV     DI,BP
  4405 00000F14 83C71E                          ADD     DI,DPB.DIR_TEXT
  4406 00000F17 89FA                            MOV     DX,DI
  4407                                  	;CMP     BYTE [DRIVESPEC],0
  4408 00000F19 2E803E[9F03]00                  CMP     BYTE [CS:DRIVESPEC],0 ; 15/03/2018
  4409 00000F1F 7402                    	JZ      SHORT NODRIVESPEC
  4410 00000F21 46                              INC     SI
  4411 00000F22 46                              INC     SI
  4412                                  NODRIVESPEC:
  4413 00000F23 89F1                            MOV     CX,SI
  4414                                  	;CMP     BYTE [ROOTSTART],0
  4415 00000F25 2E803E[A003]00          	CMP     BYTE [CS:ROOTSTART],0 ; 15/03/2018
  4416 00000F2B 7404                            JZ      SHORT NOTROOTPATH
  4417 00000F2D 46                              INC     SI
  4418 00000F2E 41                              INC     CX
  4419 00000F2F EB2B                            JMP     SHORT COPYTHESTRINGBXZ
  4420                                  NOTROOTPATH:
  4421 00000F31 09DB                            OR      BX,BX           ; Previous path root?
  4422 00000F33 7429                            JZ	SHORT COPYTHESTRING   ; Yes
  4423 00000F35 31DB                            XOR     BX,BX
  4424                                  ENDLOOP:
  4425 00000F37 26803D00                        CMP     BYTE [ES:DI],0
  4426 00000F3B 7404                            JZ      SHORT PATHEND
  4427 00000F3D 47                              INC     DI
  4428 00000F3E 43                              INC     BX
  4429 00000F3F EBF6                            JMP     SHORT ENDLOOP
  4430                                  PATHEND:
  4431 00000F41 B02F                            MOV     AL,'/'
  4432                                          ;CMP     AL,[switch_character]
  4433 00000F43 2E3A06[E500]                    CMP     AL,[CS:switch_character] ; 15/03/2018
  4434 00000F48 7502                    	JNZ     SHORT SLASHOK
  4435 00000F4A B05C                            MOV     AL,'\'		; Use the alternate character
  4436                                  SLASHOK:
  4437 00000F4C AA                              STOSB
  4438 00000F4D 43                              INC     BX
  4439 00000F4E EB1C                            JMP     SHORT CHECK_LEN
  4440                                  
  4441                                  PATHNOGOOD:
  4442 00000F50 58                              POP     AX
  4443 00000F51 58                              POP     AX
  4444                                  PATHTOOLONG:
  4445                                          ;error	error_path_not_found
  4446 00000F52 B003                    	MOV	AL,error_path_not_found
  4447 00000F54 E996F9                  	jmp	SYS_RET_ERR
  4448                                  
  4449                                  INCBXCHK:
  4450 00000F57 43                              INC     BX
  4451                                  BXCHK:
  4452 00000F58 83FB40                          CMP     BX,DIRSTRLEN
  4453 00000F5B C3                              RETN
  4454                                  
  4455                                  COPYTHESTRINGBXZ:
  4456 00000F5C 31DB                            XOR     BX,BX
  4457                                  COPYTHESTRING:
  4458 00000F5E AC                              LODSB
  4459 00000F5F 08C0                            OR      AL,AL
  4460                                          ;JNZ     SHORT FOOB
  4461                                          ;JMP     CPSTDONE
  4462 00000F61 0F848900                	JZ	CPSTDONE ; 15/03/2018
  4463                                  FOOB:
  4464 00000F65 3C2E                            CMP     AL,'.'
  4465 00000F67 741D                            JZ      SHORT SEEDOT
  4466 00000F69 E82D00                          CALL    COPYELEM
  4467                                  CHECK_LEN:
  4468 00000F6C 83FB40                          CMP     BX,DIRSTRLEN
  4469 00000F6F 72ED                            JB      SHORT COPYTHESTRING
  4470 00000F71 268A45FF                        MOV     AL,[ES:DI-1]
  4471 00000F75 E8B720                  	CALL	PATHCHRCMP
  4472 00000F78 7501                            JNZ	SHORT OK_DI
  4473 00000F7A 4F                              DEC     DI
  4474                                  OK_DI:
  4475 00000F7B 30C0                            XOR     AL,AL
  4476 00000F7D AA                              STOSB                   ; Correctly terminate the path
  4477 00000F7E 26C7461CFFFF                    MOV     WORD [ES:BP+1CH],-1 ; Force re-validation
  4478 00000F84 EBCC                            JMP     SHORT PATHTOOLONG
  4479                                  
  4480                                  SEEDOT:
  4481 00000F86 AC                              LODSB
  4482 00000F87 08C0                            OR      AL,AL           ; Check for null
  4483 00000F89 7462                            JZ      SHORT CPSTDONEDEC
  4484 00000F8B 3C2E                            CMP     AL,'.'
  4485 00000F8D 75CF                            JNZ     SHORT COPYTHESTRING ; eat ./
  4486 00000F8F E84600                          CALL    DELELMES        ; have   ..
  4487 00000F92 AC                              LODSB                   ; eat the /
  4488 00000F93 08C0                            OR      AL,AL           ; Check for null
  4489 00000F95 7456                            JZ      SHORT CPSTDONEDEC
  4490 00000F97 EBC5                            JMP     SHORT COPYTHESTRING
  4491                                  
  4492                                  ; Copy one element from DS:SI to ES:DI include trailing / not trailing null
  4493                                  ; LODSB has already been done
  4494                                  COPYELEM:
  4495 00000F99 57                              PUSH    DI                      ; Save in case too long
  4496 00000F9A 51                              PUSH    CX
  4497 00000F9B B90008                          MOV     CX,800h                 ; length of filename
  4498 00000F9E B42E                            MOV     AH,'.'                  ; char to stop on
  4499 00000FA0 E84F00                          CALL    CopyPiece               ; go for it!
  4500 00000FA3 E8B2FF                          CALL    BXCHK                   ; did we go over?
  4501 00000FA6 7313                            JAE     SHORT POPCXDI		; yep, go home
  4502 00000FA8 38C4                            CMP     AH,AL                   ; did we stop on .?
  4503 00000FAA 7412                            JZ      SHORT CopyExt		; yes, go copy ext
  4504 00000FAC 08C0                            OR      AL,AL                   ; did we end on nul?
  4505 00000FAE 7407                            JZ      SHORT DECSIRET		; yes, bye
  4506                                  CopyPathEnd:
  4507 00000FB0 AA                              STOSB                           ; save the path char
  4508 00000FB1 E8A3FF                          CALL    INCBXCHK                ; was there room for it?
  4509 00000FB4 7305                            JAE	SHORT POPCXDI		; Nope
  4510 00000FB6 46                              INC     SI                      ; guard against following dec
  4511                                  DECSIRET:
  4512 00000FB7 4E                              DEC     SI                      ; point back at null
  4513 00000FB8 59                              POP     CX
  4514 00000FB9 58                              POP     AX                      ; toss away saved DI
  4515 00000FBA C3                              RETN
  4516                                  POPCXDI:
  4517 00000FBB 59                              POP     CX                      ; restore
  4518 00000FBC 5F                              POP     DI                      ; point back...
  4519 00000FBD C3                      	RETN
  4520                                  CopyExt:
  4521 00000FBE AA                              STOSB                           ; save the dot
  4522 00000FBF E895FF                          CALL    INCBXCHK                ; room?
  4523 00000FC2 73F7                            JAE     SHORT POPCXDI		; nope.
  4524 00000FC4 AC                              LODSB                           ; get next char
  4525 00000FC5 30E4                            XOR     AH,AH                   ; NUL here
  4526 00000FC7 B90003                          MOV     CX,300h                 ; at most 3 chars
  4527 00000FCA E82500                          CALL    CopyPiece               ; go copy it
  4528 00000FCD E888FF                          CALL    BXCHK                   ; did we go over
  4529 00000FD0 73E9                            JAE     SHORT POPCXDI		; yep
  4530 00000FD2 08C0                            OR      AL,AL                   ; sucessful end?
  4531 00000FD4 74E1                            JZ      SHORT DECSIRET		; yes
  4532 00000FD6 EBD8                            JMP     SHORT CopyPathEnd	; go stash path char
  4533                                  
  4534                                  DELELMES:
  4535                                  ; Delete one path element from ES:DI
  4536 00000FD8 4F                              DEC     DI                      ; the '/'
  4537 00000FD9 4B                              DEC     BX
  4538                                  
  4539                                          ;IF      KANJI
  4540                                          ;PUSH    AX
  4541                                          ;PUSH    CX
  4542                                          ;PUSH    DI
  4543                                          ;PUSH    DX
  4544                                          ;MOV     CX,DI
  4545                                          ;MOV     DI,DX
  4546                                  ;DELLOOP:
  4547                                          ;CMP     DI,CX
  4548                                          ;JZ      GOTDELE
  4549                                          ;MOV     AL,ES:[DI]
  4550                                          ;INC     DI
  4551                                          ;invoke  TESTKANJ
  4552                                          ;JZ      NOTKANJ11
  4553                                          ;INC     DI
  4554                                          ;JMP     DELLOOP
  4555                                  
  4556                                  ;NOTKANJ11:
  4557                                          ;invoke  PATHCHRCMP
  4558                                          ;JNZ     DELLOOP
  4559                                          ;MOV     DX,DI                   ; Point to char after '/'
  4560                                          ;JMP     DELLOOP
  4561                                  
  4562                                  ;GOTDELE:
  4563                                          ;MOV     DI,DX
  4564                                          ;POP     DX
  4565                                          ;POP     AX                      ; Initial DI
  4566                                          ;SUB     AX,DI                   ; Distance moved
  4567                                          ;SUB     BX,AX                   ; Set correct BX
  4568                                          ;POP     CX
  4569                                          ;POP     AX
  4570                                          ;return
  4571                                          ;ELSE
  4572                                  DELLOOP:
  4573 00000FDA 39D7                            CMP     DI,DX
  4574                                          ;retz
  4575 00000FDC 7430                            JZ	SHORT CopyPieceRet
  4576 00000FDE 50                      	PUSH    AX
  4577 00000FDF 268A45FF                        MOV     AL,[ES:DI-1]
  4578 00000FE3 E84920                          CALL	PATHCHRCMP
  4579 00000FE6 58                              POP     AX
  4580                                          ;retz
  4581 00000FE7 7425                            JZ	SHORT CopyPieceRet
  4582 00000FE9 4F                              DEC     DI
  4583 00000FEA 4B                              DEC     BX
  4584 00000FEB EBED                            JMP     SHORT DELLOOP
  4585                                          ;ENDIF
  4586                                  
  4587                                  CPSTDONEDEC:
  4588 00000FED 4F                              DEC     DI                      ; Back up over trailing /
  4589                                  CPSTDONE:
  4590 00000FEE AA                              STOSB                           ; The NUL
  4591 00000FEF E9F1F8                          JMP     SYS_RET_OK
  4592                                  
  4593                                  ; copy a piece CH chars max until the char in AH (or path or NUL)
  4594                                  CopyPiece:
  4595 00000FF2 AA                              STOSB                           ; store the character
  4596 00000FF3 FEC1                            INC     CL                      ; moved a byte
  4597 00000FF5 E85FFF                          CALL    INCBXCHK                ; room enough?
  4598 00000FF8 7314                            JAE     SHORT CopyPieceRet	; no, pop CX and DI
  4599 00000FFA 08C0                            OR      AL,AL                   ; end of string?
  4600 00000FFC 7410                            JZ	SHORT CopyPieceRet	; yes, dec si and return
  4601                                  
  4602                                          ;IF KANJI
  4603                                          ;CALL    TestKanj                ; was it kanji?
  4604                                          ;JZ      NotKanj                 ; nope
  4605                                          ;MOVSB                           ; move the next byte
  4606                                          ;CALL    INCBXCHK                ; room for it?
  4607                                          ;JAE     CopyPieceRet            ; nope
  4608                                          ;INC     CL                      ; moved a byte
  4609                                  ;NotKanj:
  4610                                          ;ENDIF
  4611                                  
  4612 00000FFE 38E9                            CMP     CL,CH                   ; move too many?
  4613 00001000 7602                            JBE     SHORT CopyPieceNext	; nope
  4614                                  
  4615                                          ;IF KANJI
  4616                                          ;CALL    TestKanj                ; was the last byte kanji
  4617                                          ;JZ      NotKanj2                ; no only single byte backup
  4618                                          ;DEC     DI                      ; back up a char
  4619                                          ;DEC     BX
  4620                                  ;NotKanj2:
  4621                                          ;ENDIF
  4622                                  
  4623 00001002 4F                              DEC     DI                      ; back up a char
  4624 00001003 4B                              DEC     BX
  4625                                  CopyPieceNext:
  4626 00001004 AC                              LODSB                           ; get next character
  4627 00001005 E82720                          CALL	PATHCHRCMP              ; end of road?
  4628 00001008 7404                            JZ      SHORT CopyPieceRet	; yep, return and don't dec SI
  4629 0000100A 38E0                            CMP     AL,AH                   ; end of filename?
  4630 0000100C 75E4                            JNZ     SHORT CopyPiece		; go do name
  4631                                  CopyPieceRet:
  4632 0000100E C3                              RETN				; bye!
  4633                                  
  4634                                  ;BREAK <$RmDir -- Remove a directory>
  4635                                  
  4636                                  NOPATHJ: 
  4637 0000100F E9A600                  	JMP    NOPATH
  4638                                  
  4639                                  _$RMDIR:				; System call 47
  4640                                  
  4641                                  ; Inputs:
  4642                                  ;       DS:DX Points to asciz name
  4643                                  ; Function:
  4644                                  ;       Delete directory if empty
  4645                                  ; Returns:
  4646                                  ;       STD XENIX Return
  4647                                  ;       AX = rmdir_path_not_found If path bad
  4648                                  ;       AX = rmdir_access_denied If
  4649                                  ;               Directory not empty
  4650                                  ;               Path not directory
  4651                                  ;               Root directory specified
  4652                                  ;               Directory malformed (. and .. not first two entries)
  4653                                  ;       AX = rmdir_current_directory
  4654                                  
  4655 00001012 E83C29                  	CALL	validate_path
  4656 00001015 72F8                            JC      SHORT NOPATHJ
  4657 00001017 89D6                            MOV     SI,DX
  4658 00001019 E82307                  	CALL	GETPATH
  4659 0000101C 72F1                            JC      SHORT NOPATHJ
  4660 0000101E 7521                            JNZ     SHORT NOTDIRPATH
  4661 00001020 8B3E[C103]                      MOV     DI,[DIRSTART]
  4662 00001024 09FF                            OR      DI,DI
  4663 00001026 7419                            JZ      SHORT NOTDIRPATH
  4664 00001028 268B4E1C                        MOV     CX,[ES:BP+1CH]
  4665 0000102C 83F9FF                          CMP     CX,-1
  4666 0000102F 7515                            JNZ     SHORT rmdir_current_dir_check
  4667 00001031 E8F905                  	CALL	GETCURRDIR
  4668 00001034 E848F7                  	CALL	get_user_stack
  4669 00001037 8B5406                          MOV     DX,[SI+6]
  4670 0000103A 8E5C0E                          MOV     DS,[SI+0EH]
  4671 0000103D EBD3                            JMP     SHORT _$RMDIR
  4672                                  
  4673                                  NOTDIRPATHPOP:
  4674 0000103F 58                              POP     AX
  4675 00001040 58                              POP     AX
  4676                                  NOTDIRPATH:
  4677                                          ;error	error_access_denied
  4678 00001041 B005                    	MOV	AL,error_access_denied
  4679 00001043 E9A7F8                  	jmp	SYS_RET_ERR
  4680                                  
  4681                                  rmdir_current_dir_check:
  4682 00001046 39CF                            CMP     DI,CX
  4683 00001048 7505                            JNZ     SHORT rmdir_get_buf
  4684                                          ;error	error_current_directory
  4685 0000104A B010                    	MOV	AL,error_current_directory
  4686 0000104C E99EF8                  	jmp	SYS_RET_ERR 
  4687                                  
  4688                                  rmdir_get_buf:
  4689 0000104F C53E[DD03]                      LDS     DI,[CURBUF]
  4690 00001053 29FB                            SUB     BX,DI
  4691 00001055 53                              PUSH    BX                      ; Save entry pointer
  4692 00001056 FF7508                          PUSH    WORD [DI+8]	; Save sector number
  4693 00001059 16                              PUSH    SS
  4694 0000105A 1F                              POP     DS
  4695 0000105B 16                              PUSH    SS
  4696 0000105C 07                              POP     ES
  4697 0000105D BF[6303]                        MOV     DI,NAME1
  4698 00001060 B03F                            MOV     AL,'?'
  4699 00001062 B90B00                          MOV     CX,11
  4700 00001065 F3AA                            REP     STOSB
  4701 00001067 30C0                            XOR     AL,AL
  4702 00001069 AA                              STOSB
  4703 0000106A E88808                          CALL	STARTSRCH
  4704 0000106D E84205                  	CALL	GETENTRY
  4705 00001070 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  4706 00001074 89DE                            MOV     SI,BX
  4707 00001076 AD                              LODSW
  4708                                          ;CMP	AX,(' ' SHL 8) OR '.'
  4709 00001077 3D2E20                          CMP	AX, 202Eh ; '. '
  4710 0000107A 75C3                    	JNZ     SHORT NOTDIRPATHPOP
  4711 0000107C 83C61E                          ADD     SI,32-2
  4712 0000107F AD                              LODSW
  4713                                          ;CMP	AX,('.' SHL 8) OR '.'
  4714 00001080 3D2E2E                          CMP	AX, 2E2Eh ; '..'
  4715 00001083 75BA                    	JNZ	SHORT NOTDIRPATHPOP
  4716 00001085 16                              PUSH    SS
  4717 00001086 1F                              POP     DS
  4718 00001087 C706[2101]0200                  MOV     WORD [LASTENT],2	; Skip . and ..
  4719 0000108D E82205                          CALL	GETENTRY
  4720 00001090 C606[6F03]16                    MOV     BYTE [ATTRIB],attr_directory+attr_hidden+attr_system
  4721 00001095 E88C04                          CALL	SRCH
  4722 00001098 73A5                            JNC     SHORT NOTDIRPATHPOP
  4723 0000109A C42E[9A03]                      LES     BP,[THISDPB]
  4724 0000109E 8B1E[C103]                      MOV     BX,[DIRSTART]
  4725 000010A2 E82415                          CALL	RELEASE
  4726 000010A5 5A                              POP     DX
  4727 000010A6 30C0                            XOR     AL,AL
  4728 000010A8 E81416                  	CALL	GETBUFFR
  4729 000010AB C53E[DD03]                      LDS     DI,[CURBUF]
  4730 000010AF 5B                              POP     BX
  4731 000010B0 01FB                            ADD     BX,DI
  4732 000010B2 C607E5                          MOV     BYTE [BX],0E5H		; Free the entry
  4733 000010B5 E90BFE                          JMP     DIRUP
  4734                                  
  4735                                  NOPATH:
  4736                                          ;error	error_path_not_found
  4737 000010B8 B003                    	MOV	AL,error_path_not_found
  4738 000010BA E930F8                  	jmp	SYS_RET_ERR
  4739                                  
  4740                                  ;	do_ext
  4741                                  ;
  4742                                  ;CODE    ENDS
  4743                                  ;        END
  4744                                  
  4745                                  ;============================================================================
  4746                                  ; ALLOC.ASM
  4747                                  ;============================================================================
  4748                                  
  4749                                  ; xenix memory calls for MSDOS
  4750                                  ;
  4751                                  ; CAUTION: The following routines rely on the fact that arena_signature and
  4752                                  ; arena_owner_system are all equal to zero and are contained in DI.
  4753                                  ;
  4754                                  ;INCLUDE DOSSEG.ASM
  4755                                  
  4756                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  4757                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  4758                                  
  4759                                  ;.xlist
  4760                                  ;.xcref
  4761                                  ;INCLUDE DOSSYM.ASM
  4762                                  ;INCLUDE DEVSYM.ASM
  4763                                  ;.cref
  4764                                  ;.list
  4765                                  
  4766                                  ;TITLE ALLOC.ASM - memory arena manager
  4767                                  ;NAME Alloc
  4768                                  
  4769                                  ;SUBTTL memory allocation utility routines
  4770                                  ;PAGE
  4771                                  ;
  4772                                  ; arena data
  4773                                  ;
  4774                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
  4775                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
  4776                                  ;       i_need  FirstArena,WORD         ; first free block found
  4777                                  ;       i_need  BestArena,WORD          ; best free block found
  4778                                  ;       i_need  LastArena,WORD          ; last free block found
  4779                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
  4780                                  ;
  4781                                  ;
  4782                                  ; arena_free_process
  4783                                  ; input:    BX - PID of process
  4784                                  ; output:   free all blocks allocated to that PID
  4785                                  ;
  4786                                          ;procedure   arena_free_process,NEAR
  4787                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  4788                                  
  4789                                  arena_free_process:
  4790                                  
  4791 000010BD BF0000                          MOV     DI,ARENA.SIGNATURE ; 0	
  4792 000010C0 36A1[EE00]                      MOV     AX,[SS:arena_head] ; 15/04/2018  
  4793 000010C4 E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
  4794                                  
  4795                                  arena_free_process_loop:
  4796                                          ;retc
  4797 000010C7 722C                            JC	SHORT AFP_RETN	; Retro DOS v.20 - 05/03/2018
  4798 000010C9 06                      	PUSH    ES
  4799 000010CA 1F                              POP     DS
  4800 000010CB 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
  4801 000010CF 7504                            JNZ     SHORT arena_free_next	; no, skip to next
  4802 000010D1 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
  4803                                  
  4804                                  arena_free_next:
  4805 000010D5 803D5A                          CMP     BYTE [DI],arena_signature_end
  4806                                                                          ; end of road, Jack?
  4807                                          ;retz				; never come back no more
  4808 000010D8 741B                    	JZ	SHORT AFP_RETN
  4809 000010DA E80200                          CALL    arena_next              ; next item in ES/AX carry set if trash
  4810 000010DD EBE8                            JMP     SHORT arena_free_process_loop
  4811                                  
  4812                                  ;AFP_RETN:
  4813                                  ;	RETN
  4814                                  
  4815                                  ;arena_free_process  ENDP
  4816                                  
  4817                                  ;
  4818                                  ; arena_next
  4819                                  ; input:    DS - pointer to block head
  4820                                  ; output:   AX,ES - pointers to next head
  4821                                  ;           carry set if trashed arena
  4822                                  ;
  4823                                          ;procedure   arena_next,NEAR
  4824                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  4825                                  
  4826                                  arena_next:
  4827                                  
  4828 000010DF 8CD8                            MOV     AX,DS                   ; AX <- current block
  4829 000010E1 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
  4830 000010E5 40                              INC     AX                      ; remember that header!
  4831                                  ;
  4832                                  ;       fall into check_signature and return
  4833                                  ;
  4834                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
  4835                                  ;       RET
  4836                                  
  4837                                  ;arena_next  ENDP
  4838                                  
  4839                                  ;
  4840                                  ; check_signature
  4841                                  ; input:    AX - address of block header
  4842                                  ; output:   ES=AX, carry set if signature is bad
  4843                                  ;
  4844                                          ;procedure   check_signature,NEAR
  4845                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  4846                                  
  4847                                  check_signature:        
  4848                                  
  4849 000010E6 8EC0                    	MOV     ES,AX                   ; ES <- AX
  4850 000010E8 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
  4851                                                                          ; IF next signature = not_end THEN
  4852 000010EC 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
  4853 000010EE 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
  4854                                                                          ; IF next signature = end then
  4855 000010F2 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
  4856 000010F4 F9                              STC                             ; set error
  4857                                  AFP_RETN:
  4858                                   	;  Retro DOS v.20 - 05/03/2018
  4859                                  check_signature_ok:
  4860                                          ;return
  4861                                  COALESCE_RETN:
  4862 000010F5 C3                      	RETN
  4863                                  
  4864                                  ;check_signature_ok:
  4865                                          ;CLC
  4866                                          ;return
  4867                                  
  4868                                  ;Check_signature ENDP
  4869                                  
  4870                                  ;
  4871                                  ; Coalesce - combine free blocks ahead with current block
  4872                                  ; input:    DS - pointer to head of free block
  4873                                  ; output:   updated head of block, AX is next block
  4874                                  ;           carry set -> trashed arena
  4875                                  ;
  4876                                          ;procedure   Coalesce,NEAR
  4877                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  4878                                          
  4879                                  Coalesce:
  4880                                  	
  4881 000010F6 803D5A                  	CMP     BYTE [DI],arena_signature_end
  4882                                                                          ; IF current signature = END THEN
  4883                                          ;retz				;   GOTO ok
  4884 000010F9 74FA                            jz	short COALESCE_RETN
  4885 000010FB E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
  4886                                          ;retc				; IF no error THEN GOTO check
  4887 000010FE 72F5                    	jc	short COALESCE_RETN
  4888                                  
  4889                                  coalesce_check:
  4890 00001100 26393E0100                      CMP     [ES:ARENA.OWNER],DI
  4891                                          ;retnz				; IF next block isnt free THEN return
  4892 00001105 75EE                            JNZ	SHORT COALESCE_RETN
  4893 00001107 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
  4894 0000110C 41                              INC     CX                      ; CX <- CX + 1 (for header size)
  4895 0000110D 010E0300                        ADD     [ARENA.SIZE],CX		; current size <- current size + CX
  4896 00001111 268A0D                          MOV     CL,[ES:DI]              ; move up signature
  4897 00001114 880D                            MOV     [DI],CL
  4898 00001116 EBDE                            JMP     SHORT Coalesce		; try again
  4899                                  
  4900                                  ;Coalesce    ENDP
  4901                                  
  4902                                  ;SUBTTL $Alloc - allocate space in memory
  4903                                  ;PAGE
  4904                                  ;
  4905                                  ;   Assembler usage:
  4906                                  ;           MOV     BX,size
  4907                                  ;           MOV     AH,Alloc
  4908                                  ;           INT     21h
  4909                                  ;         AX:0 is pointer to allocated memory
  4910                                  ;         BX is max size if not enough memory
  4911                                  ;
  4912                                  ;   Description:
  4913                                  ;           Alloc returns  a  pointer  to  a  free  block of
  4914                                  ;       memory that has the requested  size  in  paragraphs.
  4915                                  ;
  4916                                  ;   Error return:
  4917                                  ;           AX = error_not_enough_memory
  4918                                  ;              = error_arena_trashed
  4919                                  ;
  4920                                          ;procedure   $ALLOC,NEAR
  4921                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  4922                                  
  4923                                  _$ALLOC:
  4924                                  
  4925 00001118 31C0                            XOR     AX,AX
  4926 0000111A 89C7                            MOV     DI,AX
  4927                                  	
  4928                                  	; 15/03/2018
  4929                                  	;MOV     [FirstArena],AX         ; init the options
  4930                                          ;MOV     [BestArena],AX
  4931                                          ;MOV     [LastArena],AX
  4932 0000111C 36A3[E700]                      MOV     [SS:FirstArena],AX         ; init the options
  4933 00001120 36A3[E900]                      MOV     [SS:BestArena],AX
  4934 00001124 36A3[EB00]                      MOV     [SS:LastArena],AX
  4935 00001128 50                              PUSH    AX                      ; alloc_max <- 0
  4936                                          ;MOV     AX,[arena_head]         ; AX <- beginning of arena
  4937 00001129 36A1[EE00]                      MOV     AX,[SS:arena_head]
  4938 0000112D E8B6FF                  	CALL    check_signature         ; ES <- AX, carry set if error
  4939 00001130 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
  4940                                  
  4941                                  alloc_scan:
  4942 00001132 06                              PUSH    ES
  4943 00001133 1F                              POP     DS                      ; DS <- ES
  4944 00001134 393E0100                        CMP     [ARENA.OWNER],DI
  4945 00001138 7424                            JZ      SHORT alloc_free	; IF current block is free THEN examine
  4946                                  
  4947                                  alloc_next:
  4948 0000113A 803D5A                          CMP     BYTE [DI],arena_signature_end
  4949                                                                          ; IF current block is last THEN
  4950 0000113D 740B                            JZ      SHORT alloc_end		;   GOTO end
  4951 0000113F E89DFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
  4952 00001142 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
  4953                                  
  4954                                  alloc_err:
  4955 00001144 58                              POP     AX
  4956                                  
  4957                                  alloc_trashed:
  4958                                          ;error	error_arena_trashed
  4959 00001145 B007                    	MOV	AL,error_arena_trashed
  4960 00001147 E9A3F7                  	JMP	SYS_RET_ERR
  4961                                  
  4962                                  alloc_end:
  4963                                          ;CMP     WORD [FirstArena],0
  4964 0000114A 36833E[E700]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
  4965 00001150 7568                    	JNZ     SHORT alloc_do_split
  4966                                  
  4967                                  alloc_fail:
  4968                                          ;invoke get_user_stack
  4969 00001152 E82AF6                          CALL	get_user_stack
  4970 00001155 5B                      	POP     BX
  4971                                          ;MOV	[SI].user_BX,BX
  4972 00001156 895C02                          MOV	[SI+2],BX
  4973                                  	;error	error_not_enough_memory
  4974 00001159 B008                    	MOV	AL,error_not_enough_memory
  4975 0000115B E98FF7                  	JMP	SYS_RET_ERR
  4976                                  
  4977                                  alloc_free:
  4978 0000115E E895FF                          CALL    Coalesce		; add following free block to current
  4979 00001161 72E1                            JC	SHORT alloc_err		; IF error THEN GOTO err
  4980 00001163 8B0E0300                        MOV     CX,[ARENA.SIZE]
  4981 00001167 5A                              POP     DX                      ; check for max found size
  4982 00001168 39D1                            CMP     CX,DX
  4983 0000116A 7602                            JNA     SHORT alloc_test
  4984 0000116C 89CA                            MOV     DX,CX
  4985                                  
  4986                                  alloc_test:
  4987 0000116E 52                              PUSH    DX
  4988 0000116F 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
  4989 00001171 77C7                            JA      SHORT alloc_next	;   GOTO next
  4990                                  
  4991                                  	; 15/03/2018
  4992                                          ;CMP     WORD [FirstArena],0
  4993 00001173 36833E[E700]00                  CMP     WORD [SS:FirstArena],0
  4994 00001179 7505                    	JNZ	SHORT alloc_best
  4995                                          ;MOV     [FirstArena],DS	; save first one found
  4996 0000117B 368C1E[E700]                    MOV     [SS:FirstArena],DS	
  4997                                  alloc_best:
  4998                                          ;CMP     WORD [BestArena],0
  4999 00001180 36833E[E900]00                  CMP     WORD [SS:BestArena],0
  5000 00001186 740E                            JZ      SHORT alloc_make_best	; initial best
  5001 00001188 06                              PUSH    ES
  5002                                          ;MOV     ES,[BestArena]
  5003 00001189 368E06[E900]                    MOV     ES,[SS:BestArena]
  5004 0000118E 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
  5005 00001193 07                              POP     ES
  5006 00001194 7605                            JBE     SHORT alloc_last
  5007                                  alloc_make_best:
  5008                                          ;MOV     [BestArena],DS		; assign best
  5009 00001196 368C1E[E900]                    MOV     [SS:BestArena],DS
  5010                                  alloc_last:
  5011                                          ;MOV     [LastArena],DS		; assign last
  5012 0000119B 368C1E[EB00]                    MOV     [SS:LastArena],DS 
  5013 000011A0 EB98                            JMP     SHORT alloc_next
  5014                                  
  5015                                  ;
  5016                                  ; split the block high
  5017                                  ;
  5018                                  alloc_do_split_high:
  5019                                          ;MOV     DS,[LastArena]
  5020 000011A2 368E1E[EB00]                    MOV     DS, [SS:LastArena]
  5021 000011A7 8B0E0300                        MOV     CX,[ARENA.SIZE]
  5022 000011AB 29D9                            SUB     CX,BX
  5023 000011AD 8CDA                            MOV     DX,DS
  5024 000011AF 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
  5025 000011B1 01CA                            ADD     DX,CX                   ; point to next block
  5026 000011B3 8EC2                            MOV     ES,DX                   ; no decrement!
  5027 000011B5 49                              DEC     CX
  5028 000011B6 87D9                            XCHG    BX,CX                   ; bx has size of lower block
  5029 000011B8 EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
  5030                                  ;
  5031                                  ; we have scanned memory and have found all appropriate blocks
  5032                                  ; check for the type of allocation desired; first and best are identical
  5033                                  ; last must be split high
  5034                                  ;
  5035                                  alloc_do_split:
  5036                                  	; 15/03/2018
  5037                                          ;CMP     BYTE [AllocMethod], 1
  5038 000011BA 36803E[ED00]01                  CMP     BYTE [SS:AllocMethod], 1
  5039 000011C0 77E0                            JA      SHORT alloc_do_split_high
  5040                                          ;MOV     DS,[FirstArena]
  5041 000011C2 368E1E[E700]                    MOV     DS,[SS:FirstArena]        
  5042 000011C7 7205                    	JB      SHORT alloc_get_size
  5043                                          ;MOV     DS,[BestArena]
  5044 000011C9 368E1E[E900]            	MOV     DS,[SS:BestArena]
  5045                                  alloc_get_size:
  5046 000011CE 8B0E0300                        MOV     CX,[ARENA.SIZE]
  5047 000011D2 29D9                            SUB     CX,BX                   ; get room left over
  5048 000011D4 8CD8                            MOV     AX,DS
  5049 000011D6 89C2                            MOV     DX,AX                   ; save for owner setting
  5050 000011D8 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
  5051 000011DA 01D8                            ADD     AX,BX
  5052 000011DC 40                              INC     AX                      ; remember the header
  5053 000011DD 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
  5054 000011DF 49                              DEC     CX                      ; CX <- size of split block
  5055                                  alloc_set_sizes:
  5056 000011E0 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
  5057 000011E4 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
  5058 000011E9 B34D                            MOV     BL,arena_signature_normal
  5059 000011EB 861D                            XCHG    BL,[DI]			; current signature <- 4D
  5060 000011ED 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
  5061 000011F0 26893E0100                      MOV     [ES:ARENA.OWNER],DI
  5062                                  
  5063                                  alloc_set_owner:
  5064 000011F5 8EDA                            MOV     DS,DX
  5065                                          ;MOV     AX,[CurrentPDB]
  5066 000011F7 36A1[8B01]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
  5067 000011FB A30100                          MOV     [ARENA.OWNER],AX
  5068 000011FE 8CD8                            MOV     AX,DS
  5069 00001200 40                              INC     AX
  5070 00001201 5B                              POP     BX
  5071                                          ;transfer SYS_RET_OK
  5072 00001202 E9DEF6                  	JMP	SYS_RET_OK
  5073                                  
  5074                                  ;$alloc  ENDP
  5075                                  
  5076                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
  5077                                  ;PAGE
  5078                                  ;
  5079                                  ;   Assembler usage:
  5080                                  ;           MOV     ES,block
  5081                                  ;           MOV     BX,newsize
  5082                                  ;           MOV     AH,setblock
  5083                                  ;           INT     21h
  5084                                  ;         if setblock fails for growing, BX will have the maximum
  5085                                  ;         size possible
  5086                                  ;   Error return:
  5087                                  ;           AX = error_invalid_block
  5088                                  ;              = error_arena_trashed
  5089                                  ;              = error_not_enough_memory
  5090                                  ;              = error_invalid_function
  5091                                  ;
  5092                                          ;procedure   $SETBLOCK,NEAR
  5093                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5094                                  
  5095                                  _$SETBLOCK:        
  5096                                  
  5097 00001205 BF0000                  	MOV     DI,ARENA.SIGNATURE
  5098 00001208 8CC0                            MOV     AX,ES
  5099 0000120A 48                              DEC     AX
  5100 0000120B E8D8FE                          CALL    check_signature
  5101 0000120E 7303                            JNC     SHORT setblock_grab
  5102                                  
  5103                                  setblock_bad:
  5104 00001210 E932FF                          JMP     alloc_trashed
  5105                                  
  5106                                  setblock_grab:
  5107 00001213 8ED8                            MOV     DS,AX
  5108 00001215 E8DEFE                          CALL    Coalesce
  5109 00001218 72F6                            JC      SHORT setblock_bad
  5110 0000121A 8B0E0300                        MOV     CX,[ARENA.SIZE]
  5111 0000121E 51                              PUSH    CX
  5112 0000121F 39CB                            CMP     BX,CX
  5113 00001221 76AB                            JBE     SHORT alloc_get_size
  5114 00001223 E92CFF                          JMP     alloc_fail
  5115                                  
  5116                                  ;$setblock   ENDP
  5117                                  
  5118                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
  5119                                  ;PAGE
  5120                                  ;
  5121                                  ;   Assembler usage:
  5122                                  ;           MOV     ES,block
  5123                                  ;           MOV     AH,dealloc
  5124                                  ;           INT     21h
  5125                                  ;
  5126                                  ;   Error return:
  5127                                  ;           AX = error_invalid_block
  5128                                  ;              = error_arena_trashed
  5129                                  ;
  5130                                          ;procedure   $DEALLOC,NEAR
  5131                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5132                                  
  5133                                  _$DEALLOC:        
  5134 00001226 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
  5135 00001229 8CC0                            MOV     AX,ES
  5136 0000122B 48                              DEC     AX
  5137 0000122C E8B7FE                          CALL    check_signature
  5138 0000122F 7208                            JC      SHORT dealloc_err
  5139 00001231 26893E0100                      MOV     [ES:ARENA.OWNER],DI
  5140                                          ;transfer SYS_RET_OK
  5141 00001236 E9AAF6                  	JMP	SYS_RET_OK
  5142                                  
  5143                                  dealloc_err:
  5144                                          ;error	error_invalid_block
  5145 00001239 B009                    	MOV	AL,error_invalid_block
  5146 0000123B E9AFF6                  	JMP	SYS_RET_ERR
  5147                                  
  5148                                  ;$DEALLOC    ENDP
  5149                                  
  5150                                  ;SUBTTL $AllocOper - get/set allocation mechanism
  5151                                  ;PAGE
  5152                                  
  5153                                  ;   Assembler usage:
  5154                                  ;           MOV     AH,AllocOper
  5155                                  ;           MOV     BX,method
  5156                                  ;           MOV     AL,func
  5157                                  ;           INT     21h
  5158                                  ;
  5159                                  ;   Error return:
  5160                                  ;           AX = error_invalid_function
  5161                                  ;
  5162                                          ;procedure   $AllocOper,NEAR
  5163                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5164                                  
  5165                                  _$ALLOCOPER:        
  5166                                  	; 15/04/2018
  5167 0000123E 3C01                    	CMP     AL,1
  5168 00001240 7207                            JB      SHORT AllocOperGet
  5169 00001242 740E                            JZ      SHORT AllocOperSet
  5170                                          ;error	error_invalid_function
  5171 00001244 B001                    	MOV	AL, error_invalid_function
  5172 00001246 E9A4F6                  	JMP	SYS_RET_ERR
  5173                                  AllocOperGet:
  5174 00001249 36A0[ED00]                      MOV     AL,[SS:AllocMethod]
  5175 0000124D 30E4                            XOR     AH,AH
  5176                                          ;transfer SYS_RET_OK
  5177 0000124F E991F6                  	JMP	SYS_RET_OK
  5178                                  AllocOperSet:
  5179 00001252 36881E[ED00]                    MOV     [SS:AllocMethod],BL
  5180                                          ;transfer SYS_RET_OK
  5181 00001257 E989F6                  	JMP	SYS_RET_OK
  5182                                  
  5183                                  ;$AllocOper  ENDP
  5184                                  
  5185                                  ;do_ext
  5186                                  
  5187                                  ;CODE	ENDS
  5188                                  ;    END
  5189                                  
  5190                                  ;============================================================================
  5191                                  ; DEV.ASM
  5192                                  ;============================================================================
  5193                                  ; Retro DOS v2.0 - 14/03/2018
  5194                                  
  5195                                  ; Device call routines for MSDOS
  5196                                  ;
  5197                                  
  5198                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  5199                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
  5200                                  
  5201                                  ;TITLE   DEV - Device call routines
  5202                                  ;NAME    Dev
  5203                                  
  5204                                  ;SUBTTL IOFUNC -- DO FUNCTION 1-12 I/O
  5205                                  
  5206                                  IOFUNC_RETRY:
  5207 0000125A E8FEF4                  	CALL	restore_world
  5208                                  IOFUNC:
  5209                                  
  5210                                  ; Inputs:
  5211                                  ;       DS:SI Points to FCB
  5212                                  ;       AH is function code
  5213                                  ;               = 0 Input
  5214                                  ;               = 1 Input Status
  5215                                  ;               = 2 Output
  5216                                  ;               = 3 Output Status
  5217                                  ;               = 4 Flush
  5218                                  ;       AL = character if output
  5219                                  ; Function:
  5220                                  ;       Perform indicated I/O to device or file
  5221                                  ; Outputs:
  5222                                  ;       AL is character if input
  5223                                  ;       If a status call
  5224                                  ;               zero set if not ready
  5225                                  ;               zero reset if ready (character in AL for input status)
  5226                                  ; For regular files:
  5227                                  ;       Input Status
  5228                                  ;               Gets character but restores fcb_RR field
  5229                                  ;               Zero set on EOF
  5230                                  ;       Input
  5231                                  ;               Gets character advances fcb_RR field
  5232                                  ;               Returns ^Z on EOF
  5233                                  ;       Output Status
  5234                                  ;               Always ready
  5235                                  ; AX altered, all other registers preserved
  5236                                  
  5237 0000125D 368C16[5701]                    MOV     [SS:IOXAD+2],SS
  5238 00001262 36C706[5501][5D03]              MOV     WORD [SS:IOXAD],DEVIOBUF
  5239 00001269 36C706[5901]0100                MOV     WORD [SS:IOSCNT],1
  5240 00001270 36A3[5D03]                      MOV     [SS:DEVIOBUF],AX
  5241                                  
  5242                                  IOFUNC2:
  5243 00001274 F6441880                        TEST    BYTE [SI+18H],080H
  5244                                          ;JNZ     SHORT IOTODEV
  5245                                          ;JMP     IOTOFILE
  5246 00001278 0F848000                	JZ	IOTOFILE ; 15/03/2018
  5247                                  IOTODEV:
  5248 0000127C E8F0F4                          CALL	save_world
  5249 0000127F 1E                              PUSH    DS
  5250 00001280 16                              PUSH    SS
  5251 00001281 07                              POP     ES
  5252 00001282 16                              PUSH    SS
  5253 00001283 1F                              POP     DS
  5254 00001284 31DB                            XOR     BX,BX
  5255 00001286 891E[4A01]                      MOV     [IOCALL_REQSTAT],BX
  5256 0000128A 881E[5401]                      MOV     [IOMED],BL
  5257                                  
  5258 0000128E BB[4701]                        MOV     BX,IOCALL
  5259                                  
  5260 00001291 B91604                          MOV     CX,(DEVRD*256) + DRDWRHL
  5261 00001294 08E4                            OR      AH,AH
  5262 00001296 7418                            JZ      SHORT DCALLR
  5263 00001298 B90E05                          MOV     CX,(DEVRDND*256) + DRDNDHL
  5264 0000129B FECC                            DEC     AH
  5265 0000129D 7411                            JZ      SHORT DCALLR
  5266 0000129F B91608                          MOV     CX,(DEVWRT*256) + DRDWRHL
  5267 000012A2 FECC                            DEC     AH
  5268 000012A4 7452                            JZ      SHORT DCALLO
  5269 000012A6 B90D0A                          MOV     CX,(DEVOST*256) + DSTATHL
  5270 000012A9 FECC                            DEC     AH
  5271 000012AB 744B                            JZ      SHORT DCALLO
  5272                                  DFLUSH:
  5273 000012AD B90F07                          MOV     CX,(DEVIFL*256) + DFLSHL
  5274                                  DCALLR:
  5275 000012B0 B486                            MOV     AH,86H
  5276                                  DCALL:
  5277 000012B2 880E[4701]                      MOV     [IOCALL_REQLEN],CL
  5278 000012B6 882E[4901]                      MOV     [IOCALL_REQFUNC],CH
  5279 000012BA 88E1                            MOV     CL,AH
  5280 000012BC 1F                              POP     DS
  5281 000012BD E8CC00                          CALL    DEVIOCALL
  5282 000012C0 368B3E[4A01]                    MOV     DI,[SS:IOCALL_REQSTAT]
  5283 000012C5 F7C70080                        TEST    DI,STERR
  5284 000012C9 740F                            JZ      SHORT OKDEVIO
  5285 000012CB 88CC                            MOV     AH,CL
  5286 000012CD E82B1A                          CALL	CHARHARD
  5287 000012D0 3C01                            CMP     AL,1
  5288 000012D2 7486                            JZ      SHORT IOFUNC_RETRY
  5289                                  ;Know user must have wanted ignore. Make sure device shows ready so
  5290                                  ;that DOS doesn't get caught in a status loop when user simply wants
  5291                                  ;to ignore the error.
  5292 000012D4 368026[4B01]FD                  AND     BYTE [SS:IOCALL_REQSTAT+1], ~(STBUI >> 8)  ; 0FDh
  5293                                  OKDEVIO:
  5294 000012DA 16                              PUSH    SS
  5295 000012DB 1F                              POP     DS
  5296 000012DC 80FD05                          CMP     CH,DEVRDND
  5297 000012DF 7506                            JNZ     SHORT DNODRD
  5298 000012E1 A0[5401]                        MOV     AL,[IORCHR]
  5299 000012E4 A2[5D03]                        MOV     [DEVIOBUF],AL
  5300                                  DNODRD: 
  5301 000012E7 8A26[4B01]              	MOV     AH,[IOCALL_REQSTAT+1]
  5302 000012EB F6D4                            NOT     AH                      ; Zero = busy, not zero = ready
  5303 000012ED 80E402                          AND     AH,(STBUI >> 8) ; STBUI SHR 8 ; = 2
  5304 000012F0 E868F4                    	CALL	restore_world
  5305 000012F3 36A1[5D03]                      MOV     AX,[SS:DEVIOBUF]
  5306 000012F7 C3                              RETN
  5307                                  
  5308                                  DCALLO:
  5309 000012F8 B487                            MOV     AH,87H
  5310 000012FA EBB6                            JMP     SHORT DCALL
  5311                                  
  5312                                  IOTOFILE:
  5313 000012FC 08E4                            OR      AH,AH
  5314 000012FE 7426                            JZ      SHORT IOIN
  5315 00001300 FECC                            DEC     AH
  5316 00001302 7405                            JZ      SHORT IOIST
  5317 00001304 FECC                            DEC     AH
  5318 00001306 7411                            JZ      SHORT IOUT
  5319 00001308 C3                              RETN			; NON ZERO FLAG FOR OUTPUT STATUS
  5320                                  
  5321                                  IOIST:
  5322 00001309 FF7421                          PUSH    WORD [SI+21H]        ; Save position
  5323 0000130C FF7423                          PUSH    WORD [SI+23H]
  5324 0000130F E81400                          CALL    IOIN
  5325 00001312 8F4423                          POP     WORD [SI+23H]      ; Restore position
  5326 00001315 8F4421                          POP     WORD [SI+21H]
  5327 00001318 C3                      	RETN
  5328                                  
  5329                                  IOUT:
  5330 00001319 E82300                          CALL    SETXADDR
  5331 0000131C E8FD07                          CALL	STORE
  5332 0000131F E88715                          CALL	FINNOSAV
  5333 00001322 E85000                          CALL    RESTXADDR       ; If you change this into a jmp don't come
  5334                                  IOUT_RETN:
  5335 00001325 C3                              RETN			; crying to me when things don't work ARR
  5336                                  
  5337                                  IOIN:
  5338 00001326 E81600                          CALL    SETXADDR
  5339 00001329 E8BA06                  	CALL	LOAD
  5340 0000132C 51                              PUSH    CX
  5341 0000132D E87915                  	CALL	FINNOSAV
  5342 00001330 59                              POP     CX
  5343 00001331 09C9                            OR      CX,CX           ; Check EOF
  5344 00001333 E83F00                          CALL    RESTXADDR
  5345 00001336 36A0[5D03]                      MOV     AL,[SS:DEVIOBUF]   ; Get byte from trans addr
  5346 0000133A 75E9                            JNZ	SHORT IOUT_RETN
  5347 0000133C B01A                            MOV     AL,1AH          ; ^Z if EOF
  5348 0000133E C3                              RETN
  5349                                  
  5350                                  SETXADDR:
  5351 0000133F 368F06[3F01]                    POP     WORD [SS:CALLSCNT]	; Return address
  5352 00001344 E828F4                          CALL	save_world
  5353 00001347 36FF36[DF00]                    PUSH    WORD [SS:DMAADD]	; Save Disk trans addr
  5354 0000134C 36FF36[E100]                    PUSH    WORD [SS:DMAADD+2]
  5355 00001351 1E                              PUSH    DS
  5356 00001352 16                              PUSH    SS
  5357 00001353 1F                              POP     DS
  5358 00001354 8B0E[5701]                      MOV     CX,[IOXAD+2]
  5359 00001358 890E[E100]                      MOV     [DMAADD+2],CX
  5360 0000135C 8B0E[5501]                      MOV     CX,[IOXAD]
  5361 00001360 890E[DF00]                      MOV     [DMAADD],CX		; Set byte trans addr
  5362 00001364 8B0E[5901]                      MOV     CX,[IOSCNT]             ; ioscnt specifies length of buffer
  5363 00001368 1F                              POP     DS
  5364 00001369 C7440E0100                      MOV     WORD [SI+0EH],1 ; One byte per record
  5365 0000136E 89F2                            MOV     DX,SI                   ; FCB to DS:DX
  5366 00001370 E81410                  	CALL	GETRRPOS
  5367 00001373 EB12                            JMP     SHORT RESTRET           ; RETURN ADDRESS
  5368                                  
  5369                                  RESTXADDR:
  5370 00001375 368F06[3F01]                    POP     WORD [SS:CALLSCNT]     ; Return address
  5371 0000137A 368F06[E100]                    POP     WORD [SS:DMAADD+2]     ; Restore Disk trans addr
  5372 0000137F 368F06[DF00]                    POP     WORD [SS:DMAADD]
  5373 00001384 E8D4F3                          CALL	restore_world
  5374                                  RESTRET:
  5375 00001387 36FF26[3F01]            	JMP     WORD [SS:CALLSCNT]	; Return address
  5376                                  
  5377                                  ;SUBTTL DEVIOCALL, DEVIOCALL2 - CALL A DEVICE
  5378                                  
  5379                                  DEVIOCALL:
  5380                                  
  5381                                  ; Inputs:
  5382                                  ;       DS:SI Points to device FCB
  5383                                  ;       ES:BX Points to request data
  5384                                  ; Function:
  5385                                  ;       Call the device
  5386                                  ; Outputs:
  5387                                  ;       None
  5388                                  ; DS:SI,AX destroyed, others preserved
  5389                                  
  5390 0000138C C57419                          LDS     SI,[SI+19H]
  5391                                  
  5392                                  DEVIOCALL2:
  5393                                  ; As above only DS:SI points to device header on entry, and DS:SI is preserved
  5394 0000138F 8B4406                          MOV     AX,[SI+6]
  5395 00001392 36A3[4301]                      MOV     [SS:CALLDEVAD],AX
  5396 00001396 368C1E[4501]                    MOV     [SS:CALLDEVAD+2],DS
  5397 0000139B 36FF1E[4301]                    CALL    FAR [SS:CALLDEVAD]  ; 28/03/2018
  5398 000013A0 8B4408                          MOV     AX,[SI+8]
  5399 000013A3 36A3[4301]                      MOV     [SS:CALLDEVAD],AX
  5400 000013A7 36FF1E[4301]                    CALL    FAR [SS:CALLDEVAD]  ; 28/03/2018	
  5401 000013AC C3                              RETN
  5402                                  
  5403                                  ;SUBTTL DEVNAME - LOOK FOR NAME OF DEVICE
  5404                                  
  5405                                  DEVNAME:
  5406                                  
  5407                                  ; Inputs:
  5408                                  ;       DS,ES:DOSGROUP
  5409                                  ;       Filename in NAME1
  5410                                  ; Function:
  5411                                  ;       Determine if file is in list of I/O drivers
  5412                                  ; Outputs:
  5413                                  ;       Carry set if name not found
  5414                                  ;       ELSE
  5415                                  ;       Zero flag set
  5416                                  ;       BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
  5417                                  ;            bits 0-4 set from low byte of attribute word
  5418                                  ;       DEVPT = DWORD pointer to Device header of device
  5419                                  ; Registers BX destroyed
  5420                                  
  5421 000013AD 56                              PUSH    SI
  5422 000013AE 57                              PUSH    DI
  5423 000013AF 51                              PUSH    CX
  5424                                  
  5425 000013B0 F606[6F03]08                    TEST    BYTE [ATTRIB],attr_volume_id 
  5426                                  			; If looking for VOL id don't find devs
  5427 000013B5 7520                            JNZ	SHORT RET31
  5428 000013B7 BE[0701]                        MOV     SI,NULDEV
  5429                                  LOOKIO:
  5430 000013BA F744040080                      TEST    WORD [SI+4],DEVTYP
  5431 000013BF 740F                            JZ      SHORT SKIPDEV		; Skip block devices
  5432 000013C1 56                              PUSH    SI
  5433 000013C2 83C60A                          ADD     SI,SYSDEV.NAME
  5434 000013C5 BF[6303]                        MOV     DI,NAME1
  5435 000013C8 B90400                          MOV     CX,4                    ; All devices are 8 letters
  5436 000013CB F3A7                            REPE    CMPSW                   ; Check for name in list
  5437 000013CD 5E                              POP     SI
  5438 000013CE 740E                            JZ      SHORT IOCHK		; Found it?
  5439                                  SKIPDEV:
  5440 000013D0 C534                            LDS     SI,[SI]			; Get address of next device
  5441 000013D2 83FEFF                          CMP     SI,-1                   ; At end of list?
  5442 000013D5 75E3                            JNZ     SHORT LOOKIO
  5443                                  RET31:  
  5444 000013D7 F9                      	STC				; Not found
  5445                                  RETNV:  
  5446 000013D8 16                      	PUSH    SS
  5447 000013D9 1F                              POP     DS
  5448 000013DA 59                              POP     CX
  5449 000013DB 5F                              POP     DI
  5450 000013DC 5E                              POP     SI
  5451 000013DD C3                              RETN
  5452                                  
  5453                                  IOCHK:
  5454 000013DE 368C1E[AD03]                    MOV     [SS:DEVPT+2],DS		; Save pointer to device
  5455 000013E3 8A7C04                          MOV     BH,[SI+4]
  5456 000013E6 80CFC0                          OR      BH,0C0H
  5457 000013E9 80E7DF                          AND     BH,~20H ; 0DFh		;Clears Carry
  5458 000013EC 368936[AB03]                    MOV     [SS:DEVPT],SI
  5459 000013F1 EBE5                            JMP     SHORT RETNV
  5460                                  
  5461                                  GETBP:
  5462                                  
  5463                                  ; Inputs:
  5464                                  ;       AL = Logical unit number (A = 0)
  5465                                  ; Function:
  5466                                  ;       Find Drive Parameter Block
  5467                                  ; Outputs:
  5468                                  ;       ES:BP points to DPB
  5469                                  ;       [THISDPB] = ES:BP
  5470                                  ;       Carry set if unit number bad
  5471                                  ; No other registers altered
  5472                                  
  5473 000013F3 C42E[F000]                      LES     BP,[DPBHEAD]    ; Just in case drive isn't valid
  5474 000013F7 243F                            AND     AL,3FH          ; Mask out dirty and device bits
  5475 000013F9 3A06[0001]                      CMP     AL,[NUMIO]
  5476 000013FD F5                              CMC
  5477 000013FE 720C                            JC      SHORT GOTDPB	; Get drive A
  5478                                  FNDDPB:
  5479 00001400 263A4600                        CMP     AL,[ES:BP]
  5480 00001404 7406                            JZ      SHORT GOTDPB	; Carry is clear if jump executed
  5481 00001406 26C46E18                        LES     BP,[ES:BP+18H]
  5482 0000140A EBF4                            JMP     SHORT FNDDPB
  5483                                  GOTDPB:
  5484 0000140C 892E[9A03]                      MOV     [THISDPB],BP
  5485 00001410 8C06[9C03]                      MOV     [THISDPB+2],ES
  5486 00001414 C3                              RETN
  5487                                  
  5488                                  ;SUBTTL SETREAD, SETWRITE -- SET UP HEADER BLOCK
  5489                                  
  5490                                  SETREAD:
  5491                                  
  5492                                  ; Inputs:
  5493                                  ;       DS:BX = Transfer Address
  5494                                  ;       CX = Record Count
  5495                                  ;       DX = Starting Record
  5496                                  ;       AH = Media Byte
  5497                                  ;       AL = Unit Code
  5498                                  ; Function:
  5499                                  ;       Set up the device call header at DEVCALL
  5500                                  ; Output:
  5501                                  ;       ES:BX Points to DEVCALL
  5502                                  ; No other registers effected
  5503                                  
  5504 00001415 57                              PUSH    DI
  5505 00001416 51                              PUSH    CX
  5506 00001417 50                              PUSH    AX
  5507 00001418 B104                            MOV     CL,DEVRD
  5508                                  SETCALLHEAD:
  5509 0000141A B016                            MOV     AL,DRDWRHL
  5510 0000141C 16                              PUSH    SS
  5511 0000141D 07                              POP     ES
  5512 0000141E BF[2D01]                        MOV     DI,DEVCALL
  5513 00001421 AA                              STOSB                   ; length
  5514 00001422 58                              POP     AX
  5515 00001423 AA                              STOSB                   ; Unit
  5516 00001424 50                              PUSH    AX
  5517 00001425 88C8                            MOV     AL,CL
  5518 00001427 AA                              STOSB                   ; Command code
  5519 00001428 31C0                            XOR     AX,AX
  5520 0000142A AB                              STOSW                   ; Status
  5521 0000142B 83C708                          ADD     DI,8            ; Skip link fields
  5522 0000142E 58                              POP     AX
  5523 0000142F 86E0                            XCHG    AH,AL
  5524 00001431 AA                              STOSB                   ; Media byte
  5525 00001432 86C4                            XCHG    AL,AH
  5526 00001434 50                              PUSH    AX
  5527 00001435 89D8                            MOV     AX,BX
  5528 00001437 AB                              STOSW
  5529 00001438 8CD8                            MOV     AX,DS
  5530 0000143A AB                              STOSW                   ; Transfer addr
  5531 0000143B 59                              POP     CX              ; Real AX
  5532 0000143C 58                              POP     AX              ; Real CX
  5533 0000143D AB                              STOSW                   ; Count
  5534 0000143E 92                              XCHG    AX,DX           ; AX=Real DX, DX=real CX, CX=real AX
  5535 0000143F AB                              STOSW                   ; Start
  5536 00001440 91                              XCHG    AX,CX
  5537 00001441 87D1                            XCHG    DX,CX
  5538 00001443 5F                              POP     DI
  5539 00001444 BB[2D01]                        MOV     BX,DEVCALL
  5540 00001447 C3                              RETN
  5541                                  
  5542                                  SETWRITE:
  5543                                  
  5544                                  ; Inputs:
  5545                                  ;       DS:BX = Transfer Address
  5546                                  ;       CX = Record Count
  5547                                  ;       DX = Starting Record
  5548                                  ;       AH = Media Byte
  5549                                  ;       AL = Unit Code
  5550                                  ; Function:
  5551                                  ;       Set up the device call header at DEVCALL
  5552                                  ; Output:
  5553                                  ;       ES:BX Points to DEVCALL
  5554                                  ; No other registers effected
  5555                                  
  5556 00001448 57                              PUSH    DI
  5557 00001449 51                              PUSH    CX
  5558 0000144A 50                              PUSH    AX
  5559 0000144B B108                            MOV     CL,DEVWRT
  5560 0000144D 36020E[DB00]                    ADD     CL,[SS:VERFLG]
  5561 00001452 EBC6                            JMP     SHORT SETCALLHEAD
  5562                                  
  5563                                  ;CODE	ENDS
  5564                                  ;    END
  5565                                  
  5566                                  ;============================================================================
  5567                                  ; DIR.ASM
  5568                                  ;============================================================================
  5569                                  ; Retro DOS v2 - 09/03/2018
  5570                                  
  5571                                  ; Directory routines for MSDOS
  5572                                  ;
  5573                                  
  5574                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  5575                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
  5576                                  
  5577                                  ;TITLE	DIR - Directory and path cracking
  5578                                  ;NAME	Dir
  5579                                  
  5580                                  ;SUBTTL BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES
  5581                                  ;PAGE
  5582                                  
  5583                                  BUILDDIR:
  5584                                  
  5585                                  ; Inputs:
  5586                                  ;       ES:BP Points to DPB
  5587                                  ;       [THISFCB] Set if using NEWDIR entry point
  5588                                  ;       [LASTENT] current last valid entry number in directory if no free
  5589                                  ;               entries
  5590                                  ; Function:
  5591                                  ;       Grow directory if no free entries and not root
  5592                                  ; Outputs:
  5593                                  ;       CARRY SET IF FAILURE
  5594                                  ;       ELSE
  5595                                  ;          AX entry number of new entry
  5596                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
  5597                                  ;               AX = first entry of new dir
  5598                                  ;       GETENT should be called to set [LASTENT]
  5599                                  
  5600 00001454 A1[D303]                        MOV     AX,[ENTFREE]
  5601 00001457 83F8FF                          CMP     AX,-1
  5602 0000145A 7576                            JNZ     SHORT GOTRET
  5603 0000145C 833E[C103]00                    CMP     WORD [DIRSTART],0
  5604 00001461 7502                            JNZ     SHORT NEWDIR
  5605 00001463 F9                              STC
  5606 00001464 C3                              RETN			; Can't grow root
  5607                                  
  5608                                  NEWDIR:
  5609 00001465 8B1E[C103]                      MOV     BX,[DIRSTART]
  5610 00001469 09DB                            OR      BX,BX
  5611 0000146B 7403                            JZ      SHORT NULLDIR
  5612 0000146D E86D11                          CALL	GETEOF
  5613                                  NULLDIR:
  5614 00001470 B90100                          MOV     CX,1
  5615 00001473 E8B510                          CALL	ALLOCATE
  5616 00001476 725B                            JC	SHORT BUILDDIR_RETN
  5617 00001478 8B16[C103]                      MOV     DX,[DIRSTART]
  5618 0000147C 09D2                            OR      DX,DX
  5619 0000147E 750B                            JNZ     SHORT ADDINGDIR
  5620 00001480 E8F001                          CALL	SETDIRSRCH
  5621 00001483 C706[2101]FFFF                  MOV     WORD [LASTENT],-1
  5622 00001489 EB13                            JMP     SHORT GOTDIRREC
  5623                                  ADDINGDIR:
  5624 0000148B 813E[BD03]F80F                  CMP     WORD [CLUSNUM],0FF8H
  5625 00001491 7204                            JB      SHORT NOTFIRSTGROW
  5626 00001493 891E[BD03]                      MOV     [CLUSNUM],BX
  5627                                  NOTFIRSTGROW:
  5628 00001497 89DA                            MOV     DX,BX
  5629 00001499 30DB                            XOR     BL,BL
  5630 0000149B E85C10                  	CALL	FIGREC
  5631                                  GOTDIRREC:
  5632 0000149E 268A4E04                        MOV     CL,[ES:BP+4]
  5633 000014A2 FEC1                            INC     CL
  5634 000014A4 30ED                            XOR     CH,CH
  5635                                  ZERODIR:
  5636 000014A6 51                              PUSH    CX
  5637 000014A7 B0FF                            MOV     AL,0FFH
  5638 000014A9 E81312                  	CALL	GETBUFFR
  5639 000014AC 268B4E02                        MOV     CX,[ES:BP+2]
  5640 000014B0 06                              PUSH    ES
  5641 000014B1 C43E[DD03]                      LES     DI,[CURBUF]
  5642 000014B5 57                              PUSH    DI
  5643 000014B6 83C710                          ADD     DI,BUFINSIZ
  5644 000014B9 31C0                            XOR     AX,AX
  5645 000014BB D1E9                            SHR     CX,1
  5646 000014BD F3AB                            REP     STOSW
  5647 000014BF 7301                            JNC     SHORT EVENZ
  5648 000014C1 AA                              STOSB
  5649                                  EVENZ:
  5650 000014C2 5F                              POP     DI
  5651 000014C3 FEC0                            INC     AL
  5652 000014C5 26884505                        MOV     [ES:DI+5],AL
  5653 000014C9 07                              POP     ES
  5654 000014CA 59                              POP     CX
  5655 000014CB 42                              INC     DX
  5656 000014CC E2D8                            LOOP    ZERODIR
  5657 000014CE A1[2101]                        MOV     AX,[LASTENT]
  5658 000014D1 40                              INC     AX
  5659                                  GOTRET:
  5660 000014D2 F8                              CLC
  5661                                  BUILDDIR_RETN:
  5662 000014D3 C3                              RETN
  5663                                  
  5664                                  ;
  5665                                  ; set up a . and .. directory entry for a directory
  5666                                  ;
  5667                                  
  5668                                  SETDOTENT:
  5669 000014D4 B90400                          MOV     CX,4
  5670 000014D7 B82020                          MOV     AX,2020H
  5671 000014DA F3AB                            REP     STOSW
  5672 000014DC AA                              STOSB
  5673 000014DD 8B36[AF03]                      MOV     SI,[THISFCB]
  5674 000014E1 B010                            MOV     AL,attr_directory
  5675 000014E3 AA                              STOSB
  5676 000014E4 83C70A                          ADD     DI,10
  5677 000014E7 8B4416                          MOV     AX,[SI+16H]
  5678 000014EA AB                              STOSW
  5679 000014EB 8B4414                          MOV     AX,[SI+14H]
  5680 000014EE AB                              STOSW
  5681 000014EF 89D0                            MOV     AX,DX
  5682 000014F1 AB                              STOSW
  5683 000014F2 31C0                            XOR     AX,AX
  5684 000014F4 AB                              STOSW
  5685 000014F5 AB                              STOSW
  5686 000014F6 C3                              RETN
  5687                                  
  5688                                  ;SUBTTL GETFILE, GETNAME, FINDNAME -- LOOK FOR A FILE
  5689                                  
  5690                                  ; Start of procedure SEARCH
  5691                                  
  5692                                  GETFILE:
  5693                                  ; Same as GETNAME except ES:DI points to FCB on successful return
  5694 000014F7 E86C1A                          CALL	MOVNAME
  5695 000014FA 7207                            JC	SHORT GETFILE_RETN
  5696 000014FC 52                              PUSH    DX
  5697 000014FD 1E                              PUSH    DS
  5698 000014FE E80800                          CALL    FINDNAME
  5699 00001501 07                              POP     ES
  5700 00001502 5F                              POP     DI
  5701                                  GETFILE_RETN:
  5702 00001503 C3                              RETN
  5703                                  
  5704                                  GETNAME:
  5705                                  
  5706                                  ; Inputs:
  5707                                  ;       DS,DX point to FCB
  5708                                  ; Function:
  5709                                  ;       Find file name in disk directory. First byte is
  5710                                  ;       drive number (0=current disk). "?" matches any
  5711                                  ;       character.
  5712                                  ; Outputs:
  5713                                  ;       Carry set if file not found
  5714                                  ;       ELSE
  5715                                  ;       Zero set if attributes match (always except when creating)
  5716                                  ;       AH = Device ID (bit 7 set if not disk)
  5717                                  ;       [THISDPB] = Base of drive parameters
  5718                                  ;       DS = DOSGROUP
  5719                                  ;       ES = DOSGROUP
  5720                                  ;       [CURBUF+2]:BX = Pointer into directory buffer
  5721                                  ;       [CURBUF+2]:SI = Pointer to First Cluster field in directory entry
  5722                                  ;       [CURBUF] has directory record with match
  5723                                  ;       [NAME1] has file name
  5724                                  ; All other registers destroyed.
  5725                                  
  5726 00001504 E85F1A                          CALL	MOVNAME
  5727 00001507 720A                    	JC	SHORT GETNAME_RETN	; Bad file name?
  5728                                  
  5729                                  FINDNAME:
  5730 00001509 16                              PUSH    SS
  5731 0000150A 1F                              POP     DS
  5732 0000150B E89FFE                  	CALL	DEVNAME
  5733 0000150E 7204                            JC	SHORT FINDENTRY
  5734 00001510 E82B1A                          CALL	BUILDFCB
  5735                                  FINDNAME_RETN:
  5736                                  GETNAME_RETN:
  5737 00001513 C3                              RETN
  5738                                  
  5739                                  ; NOTE THE FALL THROUGH
  5740                                  
  5741                                  ;SUBTTL FINDENTRY -- LOOK FOR AN ENTRY
  5742                                  
  5743                                  FINDENTRY:
  5744                                  
  5745                                  ; Inputs:
  5746                                  ;       [THISDPB] set
  5747                                  ;       [SECCLUSPOS] = 0
  5748                                  ;       [DIRSEC] = Starting directory sector number
  5749                                  ;       [CLUSNUM] = Next cluster of directory
  5750                                  ;       [CLUSFAC] = Sectors/Cluster
  5751                                  ;       [NAME1] = Name to look for
  5752                                  ; Function:
  5753                                  ;       Find file name in disk directory.
  5754                                  ;       "?" matches any character.
  5755                                  ; Outputs:
  5756                                  ;       Carry set if name not found
  5757                                  ;       ELSE
  5758                                  ;       Zero set if attributes match (always except when creating)
  5759                                  ;       AH = Device ID (bit 7 set if not disk)
  5760                                  ;       [THISDPB] = Base of drive parameters
  5761                                  ;       DS = DOSGROUP
  5762                                  ;       ES = DOSGROUP
  5763                                  ;       [CURBUF+2]:BX = Pointer into directory buffer
  5764                                  ;       [CURBUF+2]:SI = Pointer to First Cluster field in directory entry
  5765                                  ;       [CURBUF] has directory record with match
  5766                                  ;       [NAME1] has file name
  5767                                  ;       [LASTENT] is entry number of the entry
  5768                                  ; All other registers destroyed.
  5769                                  
  5770 00001514 E8DE03                          CALL    STARTSRCH
  5771 00001517 803E[6F03]08                    CMP     BYTE [ATTRIB],attr_volume_id
  5772                                  					; Looking for vol ID only ?
  5773 0000151C 7503                            JNZ     SHORT NOTVOLSRCH 	; No
  5774 0000151E E82A01                          CALL    SETROOTSRCH		; Yes force search of root
  5775                                  NOTVOLSRCH:
  5776 00001521 E88E00                          CALL    GETENTRY
  5777                                  SRCH:
  5778 00001524 1E                              PUSH    DS
  5779 00001525 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  5780 00001529 8A27                            MOV     AH,[BX]
  5781 0000152B 08E4                            OR      AH,AH                   ; End of directory?
  5782 0000152D 7433                            JZ      SHORT FREE
  5783                                          ;CMP     AH,[DELALL]		; Free entry?
  5784 0000152F 363A26[8D03]                    CMP	AH,[SS:DELALL] ; 15/03/2018
  5785 00001534 742C                    	JZ      SHORT FREE
  5786 00001536 F6470B08                        TEST    BYTE [BX+11],attr_volume_id
  5787                                  					; Volume ID file?
  5788 0000153A 7405                            JZ      SHORT CHKFNAM		; NO
  5789                                          ;INC     BYTE [VOLID]
  5790 0000153C 36FE06[E103]            	INC	BYTE [SS:VOLID] ; 15/03/2018
  5791                                  CHKFNAM:
  5792 00001541 89DE                            MOV     SI,BX
  5793 00001543 16                              PUSH    SS
  5794 00001544 07                              POP     ES
  5795 00001545 BF[6303]                        MOV     DI,NAME1
  5796 00001548 B90B00                          MOV     CX,11
  5797                                  WILDCRD:
  5798 0000154B F3A6                            REPE    CMPSB
  5799 0000154D 742F                            JZ      SHORT FOUND
  5800 0000154F 26807DFF3F                      CMP     BYTE [ES:DI-1],"?"
  5801 00001554 74F5                            JZ      SHORT WILDCRD
  5802 00001556 1F                              POP     DS
  5803                                  NEXTENT:
  5804 00001557 C42E[9A03]                      LES     BP,[THISDPB]
  5805 0000155B E88200                          CALL    NEXTENTRY
  5806 0000155E 73C4                            JNC     SHORT SRCH
  5807 00001560 EB4D                            JMP     SHORT SETESRET
  5808                                  
  5809                                  FREE:
  5810 00001562 1F                              POP     DS
  5811 00001563 8B0E[2101]                      MOV     CX,[LASTENT]
  5812 00001567 3B0E[D303]                      CMP     CX,[ENTFREE]
  5813 0000156B 7304                            JAE     SHORT TSTALL
  5814 0000156D 890E[D303]                      MOV     [ENTFREE],CX
  5815                                  TSTALL:
  5816 00001571 3A26[8D03]                      CMP     AH,[DELALL]		; At end of directory?
  5817 00001575 74E0                            JZ      SHORT NEXTENT		; No - continue search
  5818 00001577 890E[D503]                      MOV     [ENTLAST],CX
  5819 0000157B F9                              STC
  5820 0000157C EB31                            JMP     SHORT SETESRET
  5821                                  
  5822                                  FOUND:
  5823                                  ;
  5824                                  ; We have a file with a matching name.  We must now consider
  5825                                  ; the attributes:
  5826                                  ; ATTRIB        Action
  5827                                  ; ------        ------
  5828                                  ; Volume_ID     Is Volume_ID in test?
  5829                                  ; Otherwise     If no create then Is ATTRIB+extra superset of test?
  5830                                  ;               If create then Is ATTRIB equal to test?
  5831                                  ;
  5832 0000157E 8A2C                            MOV     CH,[SI]                 ; Attributes of file
  5833 00001580 1F                              POP     DS
  5834 00001581 8A26[6F03]                      MOV     AH,[ATTRIB]		; Attributes of search
  5835 00001585 F6C508                          TEST    CH,attr_volume_id       ; Volume ID file?
  5836 00001588 7409                            JZ      SHORT check_one_volume_id ; Nope check other attributes
  5837 0000158A F6C408                          TEST    AH,attr_volume_id       ; Can we find Volume ID?
  5838 0000158D 74C8                            JZ      SHORT NEXTENT		; Nope, (not even $FCB_CREATE)
  5839 0000158F 30E4                            XOR     AH,AH                   ; Set zero flag for $FCB_CREATE
  5840 00001591 EB14                            JMP     SHORT _RETF		; Found Volume ID
  5841                                  check_one_volume_id:
  5842 00001593 80FC08                          CMP     AH,attr_volume_id       ; Looking only for Volume ID?
  5843 00001596 74BF                            JZ      SHORT NEXTENT		; Yes, continue search
  5844 00001598 83C60F                          ADD     SI,15
  5845 0000159B E86B03                          CALL    MatchAttributes
  5846 0000159E 7407                            JZ      SHORT _RETF
  5847 000015A0 F606[8C03]FF                    TEST    BYTE [CREATING],-1	; Pass back mismatch if creating
  5848 000015A5 74B0                            JZ      SHORT NEXTENT		; Otherwise continue searching
  5849                                  _RETF:
  5850 000015A7 C42E[9A03]                      LES     BP,[THISDPB]
  5851 000015AB 268A6600                        MOV     AH,[ES:BP]
  5852                                  SETESRET:
  5853 000015AF 16                              PUSH    SS
  5854 000015B0 07                              POP     ES
  5855 000015B1 C3                              RETN
  5856                                  
  5857                                  ;SUBTTL GETENTRY, NEXTENTRY, GETENT -- STEP THROUGH DIRECTORY
  5858                                  
  5859                                  GETENTRY:
  5860                                  
  5861                                  ; Inputs:
  5862                                  ;       [LASTENT] has directory entry
  5863                                  ;       ES:BP points to drive parameters
  5864                                  ; Function:
  5865                                  ;       Locates directory entry in preparation for search
  5866                                  ;       GETENT provides entry for passing desired entry in AX
  5867                                  ;       A valid search environment MUST exist
  5868                                  ;               ENDENT,ENTLAST,ENTFREE
  5869                                  ; Outputs:
  5870                                  ;       [CURBUF+2]:BX = Pointer to next directory entry in CURBUF
  5871                                  ;       [CURBUF+2]:DX = Pointer to first byte after end of CURBUF
  5872                                  ;       [LASTENT] = New directory entry number
  5873                                  
  5874 000015B2 A1[2101]                        MOV     AX,[LASTENT]
  5875                                  GETENT:
  5876 000015B5 A3[2101]                        MOV     [LASTENT],AX
  5877 000015B8 B104                            MOV     CL,4
  5878 000015BA D3E0                            SHL     AX,CL
  5879 000015BC 31D2                            XOR     DX,DX
  5880 000015BE D1E0                            SHL     AX,1
  5881 000015C0 D1D2                            RCL     DX,1                    ; Account for overflow in last shift
  5882 000015C2 268B5E02                        MOV     BX,[ES:BP+2]
  5883 000015C6 80E3E0                          AND     BL,255-31               ; Must be multiple of 32
  5884 000015C9 F7F3                            DIV     BX
  5885 000015CB 89D3                            MOV     BX,DX                   ; Position within sector
  5886 000015CD 53                              PUSH    BX
  5887 000015CE E86706                  	CALL	DIRREAD
  5888 000015D1 5B                              POP     BX
  5889                                  SETENTRY:
  5890 000015D2 8B16[DD03]                      MOV     DX,[CURBUF]
  5891 000015D6 83C210                          ADD     DX,BUFINSIZ
  5892 000015D9 01D3                            ADD     BX,DX
  5893 000015DB 26035602                        ADD     DX,[ES:BP+2] ; Always clears carry
  5894 000015DF C3                              RETN
  5895                                  
  5896                                  NEXTENTRY:
  5897                                  
  5898                                  ; Inputs:
  5899                                  ;       Same as outputs of GETENTRY, above
  5900                                  ; Function:
  5901                                  ;       Update BX, and [LASTENT] for next directory entry.
  5902                                  ;       Carry set if no more.
  5903                                  
  5904 000015E0 A1[2101]                        MOV     AX,[LASTENT]
  5905 000015E3 3B06[D503]                      CMP     AX,[ENTLAST]
  5906 000015E7 7425                            JZ      SHORT NONE
  5907 000015E9 40                              INC     AX
  5908 000015EA 83C320                          ADD     BX,32
  5909 000015ED 39D3                            CMP     BX,DX
  5910 000015EF 721F                            JB      SHORT HAVIT
  5911 000015F1 8A1E[9503]                      MOV     BL,[SECCLUSPOS]
  5912 000015F5 FEC3                            INC     BL
  5913 000015F7 3A1E[9E03]                      CMP     BL,[CLUSFAC]
  5914 000015FB 7218                            JB      SHORT SAMECLUS
  5915 000015FD 8B1E[D703]                      MOV     BX,[NXTCLUSNUM]
  5916 00001601 81FBF80F                        CMP     BX,0FF8H
  5917 00001605 7307                            JAE     SHORT NONE
  5918 00001607 83FB02                          CMP     BX,2
  5919 0000160A 7202                            JB      SHORT NONE
  5920 0000160C EBA7                            JMP     SHORT GETENT
  5921                                  NONE:
  5922 0000160E F9                              STC
  5923 0000160F C3                              RETN
  5924                                  HAVIT:
  5925 00001610 A3[2101]                        MOV     [LASTENT],AX
  5926 00001613 F8                              CLC
  5927 00001614 C3                              RETN
  5928                                  
  5929                                  SAMECLUS:
  5930 00001615 881E[9503]                      MOV     [SECCLUSPOS],BL
  5931 00001619 A3[2101]                        MOV     [LASTENT],AX
  5932 0000161C 1E                              PUSH    DS
  5933 0000161D C53E[DD03]                      LDS     DI,[CURBUF]
  5934 00001621 8B5508                          MOV     DX,[DI+8]
  5935 00001624 42                              INC     DX
  5936 00001625 1F                              POP     DS
  5937 00001626 E84806                  	CALL	FIRSTCLUSTER
  5938 00001629 31DB                            XOR     BX,BX
  5939 0000162B EBA5                            JMP     SHORT SETENTRY
  5940                                  
  5941                                  ; end of procedure SEARCH
  5942                                  
  5943                                  ;SUBTTL GETCURRDIR -- GET CURRENT DIRECTORY
  5944                                  
  5945                                  ; Start of procedure DIR_SEARCH
  5946                                  
  5947                                  GETCURRDIR:
  5948                                  
  5949                                  ; Inputs:
  5950                                  ;       ES:BP Points to DPB
  5951                                  ;       FATREAD should be called before this routine
  5952                                  ; Function:
  5953                                  ;       Find current directory for drive
  5954                                  ;       If path is bad set current directory to the root
  5955                                  ; Outputs:
  5956                                  ;       DS = DOSGROUP
  5957                                  ;       [SECCLUSPOS] = 0
  5958                                  ;       [DIRSTART] = Cluster # of first cluster of directory ( 0 if root)
  5959                                  ;       [DIRSEC] Set to phys sec # of first sector first cluster of directory
  5960                                  ;       [CLUSNUM] Set to next cluster
  5961                                  ;       [CLUSFAC] Sectors/cluster
  5962                                  ; Destroys all registers
  5963                                  
  5964 0000162D 268B5E1C                        MOV     BX,[ES:BP+1CH]
  5965 00001631 09DB                            OR      BX,BX
  5966 00001633 7416                            JZ      SHORT SETROOTSRCH
  5967 00001635 81FBF80F                        CMP     BX,0FF8H
  5968 00001639 7238                            JB      SHORT SETDIRSRCH
  5969 0000163B 06                              PUSH    ES
  5970 0000163C 1F                              POP     DS
  5971 0000163D 8D761E                          LEA     SI,[BP+1EH]
  5972 00001640 E8F201                          CALL    ROOTPATH
  5973 00001643 7326                            JNC     SHORT SETCURR
  5974 00001645 26C7461C0000                    MOV     WORD [ES:BP+1CH],0
  5975                                  
  5976                                  SETROOTSRCH:
  5977 0000164B 16                              PUSH    SS
  5978 0000164C 1F                              POP     DS
  5979 0000164D 31C0                            XOR     AX,AX
  5980 0000164F A3[C103]                        MOV     [DIRSTART],AX
  5981 00001652 A2[9503]                        MOV     [SECCLUSPOS],AL
  5982 00001655 48                              DEC     AX
  5983 00001656 A3[BD03]                        MOV     [CLUSNUM],AX
  5984 00001659 268B460B                        MOV     AX,[ES:BP+0BH]
  5985 0000165D 268B5610                        MOV     DX,[ES:BP+10H]
  5986 00001661 29D0                            SUB     AX,DX
  5987 00001663 A2[9E03]                        MOV     [CLUSFAC],AL
  5988 00001666 8916[BF03]                      MOV     [DIRSEC],DX
  5989 0000166A C3                              RETN
  5990                                  
  5991                                  SETCURR:
  5992 0000166B A1[C103]                        MOV     AX,[DIRSTART]
  5993 0000166E 2689461C                        MOV     [ES:BP+1CH],AX
  5994 00001672 C3                              RETN
  5995                                  
  5996                                  SETDIRSRCH:
  5997                                  
  5998                                  ; Inputs:
  5999                                  ;       BX cluster number of start of directory
  6000                                  ;       ES:BP Points to DPB
  6001                                  ; Function:
  6002                                  ;       Set up a directory search
  6003                                  ; Outputs:
  6004                                  ;       DS = DOSGROUP
  6005                                  ;       [DIRSTART] = BX
  6006                                  ;       [CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
  6007                                  ; destroys AX,DX
  6008                                  
  6009 00001673 09DB                            OR      BX,BX
  6010 00001675 74D4                            JZ      SHORT SETROOTSRCH
  6011 00001677 16                              PUSH    SS
  6012 00001678 1F                              POP     DS
  6013 00001679 891E[C103]                      MOV     [DIRSTART],BX
  6014 0000167D 268A4604                        MOV     AL,[ES:BP+4]
  6015 00001681 FEC0                            INC     AL
  6016 00001683 A2[9E03]                        MOV     [CLUSFAC],AL
  6017 00001686 E8E10A                          CALL	UNPACK
  6018 00001689 893E[BD03]                      MOV     [CLUSNUM],DI
  6019 0000168D 89DA                            MOV     DX,BX
  6020 0000168F 30DB                            XOR     BL,BL
  6021 00001691 881E[9503]                      MOV     [SECCLUSPOS],BL
  6022 00001695 E8620E                          CALL	FIGREC
  6023 00001698 8916[BF03]                      MOV     [DIRSEC],DX
  6024 0000169C C3                              RETN
  6025                                  
  6026                                  ; End of procedure DIR_SEARCH
  6027                                  
  6028                                  ;SUBTTL MAKENODE -- CREATE A NEW NODE
  6029                                  
  6030                                  MAKENODE:
  6031                                  
  6032                                  ; Inputs:
  6033                                  ;       AL - attribute to create
  6034                                  ;       DS:SI Points to asciz path
  6035                                  ;       [THISFCB] Points to an empty FCB
  6036                                  ; Function:
  6037                                  ;       Make a new node
  6038                                  ; Outputs:
  6039                                  ;       DS=DOSGROUP
  6040                                  ;       ES:BP Points to DPB
  6041                                  ;       AX = 0 Success
  6042                                  ;       AX = 1 A node by this name exists and is a directory
  6043                                  ;       AX = 2 A new node could not be created                error
  6044                                  ;       AX = 3 A node by this name exists and is a file       error
  6045                                  ;       AX = 4 Bad Path                                       error
  6046                                  ;       AX = 5 Attribute mismatch                             error
  6047                                  ;       CARRY SET IF ERROR
  6048                                  ;       ELSE
  6049                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
  6050                                  ;               containing new node.
  6051                                  ;          [CURBUF+2]:BX Points to entry
  6052                                  ;          [CURBUF+2]:SI Points to entry.fcb_firclus
  6053                                  ;          [ThisFCB] is filled in
  6054                                  ;          If this is a new entry zero is set and
  6055                                  ;               Attribute byte in entry is directory
  6056                                  ;          else a file existed by this name and:
  6057                                  ;               [NAME1] has name
  6058                                  ;               entry is not changed in any way
  6059                                  ; Destroys all registers
  6060                                  
  6061 0000169D 50                              PUSH    AX
  6062 0000169E E89E00                          CALL    GETPATH
  6063 000016A1 88CA                            MOV     DL,CL           ; Save CL info
  6064 000016A3 59                              POP     CX
  6065                                          ;MOV     [ATTRIB],CL
  6066 000016A4 36880E[6F03]                    MOV	[SS:ATTRIB],CL ; 15/03/2018
  6067 000016A9 89C1                    	MOV     CX,AX
  6068 000016AB 730F                            JNC     SHORT make_exists ; File existed
  6069 000016AD 7504                            JNZ     SHORT make_err_4 ; Path bad
  6070 000016AF 08D2                            OR      DL,DL           ; Check "CL" return from GETPATH
  6071 000016B1 7504                            JNZ     SHORT make_type	; Name simply not found
  6072                                  make_err_4:
  6073 000016B3 B004                            MOV     AL,4            ; case 1 bad path
  6074                                  make_err_ret:
  6075 000016B5 F9                              STC
  6076 000016B6 C3                              RETN
  6077                                  
  6078                                  make_type:
  6079 000016B7 30C0                            XOR     AL,AL           ; nothing exists... assume 0
  6080 000016B9 F9                              STC
  6081 000016BA EB3A                            JMP     SHORT make_save
  6082                                  make_exists:
  6083 000016BC 742C                            JZ      SHORT make_exists_dir
  6084 000016BE B003                            MOV     AL,3            ; file exists type 3
  6085                                   	; 15/03/2018
  6086                                          ;TEST    BYTE [ATTRIB],(attr_volume_id+attr_directory)
  6087 000016C0 36F606[6F03]18          	TEST    BYTE [SS:ATTRIB],(attr_volume_id+attr_directory)
  6088 000016C6 7518                            JNZ     SHORT make_err_ret_5 ; but we wanted a volid or dir
  6089 000016C8 08ED                            OR      CH,CH
  6090 000016CA 7818                            JS      SHORT make_dev	; No furthur checks if device
  6091 000016CC 51                              PUSH    CX
  6092                                          ;MOV     DS,[CURBUF+2]
  6093 000016CD 368E1E[DF03]                    MOV     DS,[SS:CURBUF+2]
  6094 000016D2 8A6F0B                          MOV     CH,[BX+0BH] ; Get file attributes
  6095 000016D5 F6C501                          TEST    CH,attr_read_only
  6096 000016D8 7503                            JNZ     SHORT make_err_ret_5P ; Cannot create on read only files
  6097 000016DA E82C02                          CALL    MatchAttributes
  6098                                  make_err_ret_5P:
  6099 000016DD 59                              POP     CX
  6100 000016DE 7404                            JZ	SHORT make_dev	; Attributes ok
  6101                                  make_err_ret_5:
  6102 000016E0 B005                            MOV     AL,5            ; Attribute mismatch
  6103 000016E2 EBD1                            JMP     SHORT make_err_ret
  6104                                  
  6105                                  make_dev:
  6106 000016E4 30C0                            XOR     AL,AL           ; Make sure zero set(atts match), carry clear(exists)
  6107 000016E6 B003                            MOV     AL,3            ; Restore correct value
  6108 000016E8 EB0C                            JMP     SHORT make_save
  6109                                  make_exists_dir:
  6110 000016EA B001                            MOV     AL,1            ; directory exists
  6111                                          ;TEST    BYTE [ATTRIB],attr_directory
  6112 000016EC 36F606[6F03]10                  TEST    BYTE [SS:ATTRIB],attr_directory
  6113 000016F2 74C1                            JZ	SHORT make_err_ret ; we didn't want a directory
  6114 000016F4 F8                              CLC
  6115 000016F5 C3                              RETN			; just return
  6116                                  
  6117                                  make_save:
  6118 000016F6 50                              PUSH    AX
  6119                                  ;
  6120                                  ; set up for call to NewEntry - it is in the middle of FCB_CREATE
  6121                                  ; so we must also pre-push two registers.  They will be popped off
  6122                                  ; by FCB_CREATE
  6123                                  ;
  6124 000016F7 16                              PUSH    SS
  6125 000016F8 1F                              POP     DS
  6126 000016F9 9C                              PUSHF				;Save state of flags
  6127 000016FA 803E[6303]2E                    CMP     BYTE [NAME1],'.'	;Detect attempt to make '.' or '..'
  6128 000016FF 7505                            JNZ	SHORT NOTLDOT		; Needed because no '.' or '..' in root
  6129 00001701 9D                              POPF
  6130 00001702 B001                            MOV     AL,1                    ;Force type 2 error
  6131 00001704 EB10                            JMP     SHORT SET2ERR
  6132                                  
  6133                                  NOTLDOT:
  6134 00001706 9D                              POPF
  6135 00001707 06                              PUSH    ES
  6136 00001708 C43E[AF03]                      LES     DI,[THISFCB]
  6137 0000170C 1E                              PUSH    DS
  6138 0000170D 57                              PUSH    DI
  6139 0000170E 06                              PUSH    ES
  6140 0000170F 89C8                            MOV     AX,CX
  6141 00001711 E8DB13                          CALL	NEWENTRY
  6142 00001714 1F                              POP     DS
  6143 00001715 07                              POP     ES
  6144                                  SET2ERR:
  6145 00001716 08C0                            OR      AL,AL
  6146 00001718 58                              POP     AX
  6147 00001719 7404                            JZ      SHORT make_set_fcb
  6148 0000171B B002                            MOV     AL,2                ; create failed case 2
  6149 0000171D F9                              STC
  6150 0000171E C3                      	RETN
  6151                                  
  6152                                  make_set_fcb:
  6153 0000171F 06                              PUSH    ES
  6154 00001720 C43E[AF03]                      LES     DI,[THISFCB]
  6155 00001724 47                              INC     DI
  6156 00001725 1E                              PUSH    DS
  6157 00001726 56                              PUSH    SI
  6158 00001727 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  6159 0000172B 89DE                            MOV     SI,BX
  6160 0000172D B90B00                          MOV     CX,11
  6161 00001730 F3A4                            REP     MOVSB
  6162 00001732 5E                              POP     SI
  6163 00001733 1F                              POP     DS
  6164 00001734 07                              POP     ES
  6165 00001735 3C01                            CMP     AL,1
  6166 00001737 7704                            JA      SHORT make_errors
  6167 00001739 08C0                            OR      AL,AL
  6168 0000173B F8                              CLC
  6169 0000173C C3                              RETN
  6170                                  make_errors:
  6171 0000173D F9                              STC
  6172 0000173E C3                              RETN
  6173                                  
  6174                                  ;SUBTTL GETPATH -- PARSE AN asciz PATH
  6175                                  
  6176                                  GETPATH:
  6177                                  
  6178                                  ; Inputs:
  6179                                  ;       DS:SI Points to asciz path
  6180                                  ; Function:
  6181                                  ;       Crack the path
  6182                                  ; Outputs:
  6183                                  ;       [DRIVESPEC] is non zero if a drive was specified
  6184                                  ;       [ROOTSTART] is non zero if a / started the path
  6185                                  ;       [ATTRIB] set to attr_directory+attr_hidden+attr_system
  6186                                  ;       Same as FINDPATH except if path specifies a device in which case
  6187                                  ;       bit 7 of AH will be set and SI and BX will point DOSGROUP relative
  6188                                  ; Destroys all registers
  6189                                  
  6190 0000173F 31C0                            XOR     AX,AX
  6191                                          ; 15/03/2018
  6192                                  	;MOV     [DRIVESPEC],AX
  6193                                          ;MOV     BYTE [ATTRIB],attr_directory+attr_system+attr_hidden
  6194 00001741 36A3[9F03]              	MOV     [SS:DRIVESPEC],AX
  6195 00001745 36C606[6F03]16                  MOV     BYTE [SS:ATTRIB],attr_directory+attr_system+attr_hidden
  6196 0000174B AC                              LODSB
  6197 0000174C E8E018                  	CALL	PATHCHRCMP
  6198 0000174F 7443                            JZ	SHORT DEFAULTROOT
  6199 00001751 88C4                            MOV     AH,AL
  6200 00001753 AC                              LODSB
  6201 00001754 3C3A                            CMP     AL,':'
  6202 00001756 7465                            JZ	SHORT DRVSPEC
  6203 00001758 4E                              DEC     SI
  6204 00001759 4E                              DEC     SI
  6205 0000175A 1E                              PUSH    DS
  6206 0000175B 56                              PUSH    SI
  6207 0000175C 16                              PUSH    SS
  6208 0000175D 07                              POP     ES
  6209                                          ;CMP     BYTE [device_availability],0
  6210 0000175E 36803E[E600]00                  CMP     BYTE [SS:device_availability],0
  6211 00001764 7405                    	JZ      SHORT NOWDEV
  6212 00001766 E8A400                          CALL    GOTPRESTRING2
  6213 00001769 7348                            JNC	SHORT BUILDFCBJ	; If no carry then we have a device
  6214                                  NOWDEV:
  6215 0000176B E81800                          CALL    DEFPATH
  6216                                  GOFIND:
  6217                                          ;MOV     AL,[NoSetDir]
  6218 0000176E 36A0[D500]                      MOV     AL,[SS:NoSetDir]
  6219 00001772 50                              PUSH    AX
  6220                                          ;MOV     BYTE [NoSetDir],0
  6221 00001773 36C606[D500]00                  MOV     BYTE [SS:NoSetDir],0
  6222 00001779 E8B1FE                          CALL    GETCURRDIR
  6223 0000177C 58                              POP     AX
  6224                                          ;MOV     [NoSetDir],AL
  6225 0000177D 36A2[D500]                      MOV     [SS:NoSetDir],AL
  6226 00001781 5E                      	POP     SI
  6227 00001782 1F                              POP     DS
  6228 00001783 E9B400                          JMP	FINDPATH
  6229                                  
  6230                                  DEFPATH:
  6231 00001786 30C0                            XOR     AL,AL
  6232                                  DRVPATH:
  6233 00001788 E89904                          CALL	GETTHISDRV
  6234 0000178B 722F                            JC	SHORT GETPATH_RETN	; Bad drive
  6235 0000178D 16                              PUSH    SS
  6236 0000178E 1F                              POP     DS
  6237 0000178F E8D90A                          CALL	FATREAD
  6238 00001792 F8                              CLC
  6239                                  ;GETPATH_RETN:
  6240 00001793 C3                              RETN
  6241                                  
  6242                                  DEFAULTROOT:
  6243 00001794 1E                              PUSH    DS
  6244 00001795 56                              PUSH    SI
  6245 00001796 E8EDFF                          CALL    DEFPATH
  6246 00001799 5E                              POP     SI
  6247 0000179A 1F                              POP     DS
  6248                                  ROOTSRCH:
  6249                                  	; 15/03/2018
  6250                                          ;INC     BYTE [ROOTSTART]
  6251 0000179B 36FE06[A003]                    INC     BYTE [SS:ROOTSTART]
  6252 000017A0 803C00                          CMP     BYTE [SI],0
  6253 000017A3 7440                            JZ      SHORT PATHISNULL
  6254                                  
  6255 000017A5 1E                              PUSH    DS
  6256 000017A6 56                              PUSH    SI
  6257 000017A7 06                              PUSH    ES              ; Save pointer to DPB
  6258 000017A8 E84000                          CALL    CHKDEV
  6259 000017AB 07                              POP     ES
  6260 000017AC 7305                            JNC	SHORT BUILDFCBJ
  6261 000017AE 5E                              POP     SI
  6262 000017AF 1F                              POP     DS
  6263 000017B0 E98200                          JMP     ROOTPATH
  6264                                  
  6265                                  BUILDFCBJ:
  6266 000017B3 58                              POP     AX
  6267 000017B4 58                              POP     AX
  6268                                          ;context es
  6269 000017B5 16                              PUSH	SS
  6270 000017B6 07                      	POP	ES
  6271                                  	;invoke BUILDFCB	; Clears carry sets zero
  6272 000017B7 E88417                  	CALL	BUILDFCB
  6273 000017BA FEC0                            INC     AL		; reset zero
  6274                                          ;return
  6275                                  GETPATH_RETN:
  6276 000017BC C3                      	RETN
  6277                                  
  6278                                  DRVSPEC:
  6279                                          ;INC     BYTE [DRIVESPEC]
  6280 000017BD 36FE06[9F03]                    INC     BYTE [SS:DRIVESPEC]
  6281 000017C2 88E0                            MOV     AL,AH
  6282 000017C4 0C20                            OR      AL,20H          ; Convert to lower case
  6283 000017C6 2C60                            SUB     AL,60H          ; Make A=1
  6284 000017C8 1E                              PUSH    DS
  6285 000017C9 56                              PUSH    SI
  6286 000017CA 50                              PUSH    AX
  6287                                          ;context es
  6288 000017CB 16                              PUSH	SS
  6289 000017CC 07                      	POP	ES
  6290 000017CD E83D00                  	CALL    GOTPRESTRING2
  6291 000017D0 58                              POP     AX
  6292 000017D1 73E0                            JNC     SHORT BUILDFCBJ
  6293 000017D3 E8B2FF                          CALL    DRVPATH
  6294 000017D6 5E                              POP     SI
  6295 000017D7 1F                              POP     DS
  6296                                          ;retc			; Bad drive
  6297 000017D8 72E2                    	JC 	SHORT GETPATH_RETN
  6298 000017DA AC                              LODSB
  6299 000017DB E85118                          CALL	PATHCHRCMP
  6300 000017DE 74BB                            JZ      SHORT ROOTSRCH
  6301 000017E0 4E                              DEC     SI
  6302 000017E1 1E                              PUSH    DS
  6303 000017E2 56                              PUSH    SI
  6304 000017E3 EB89                            JMP	SHORT GOFIND
  6305                                  
  6306                                  PATHISNULL:
  6307 000017E5 E863FE                          CALL    SETROOTSRCH
  6308 000017E8 30C0                            XOR     AL,AL           ; Set zero (directory) clear carry
  6309 000017EA C3                              RETN
  6310                                  
  6311                                  CHKDEV:
  6312 000017EB 16                              PUSH    SS
  6313 000017EC 07                              POP     ES
  6314 000017ED BF[0400]                        MOV     DI,DEVSTRING
  6315 000017F0 31C9                            XOR     CX,CX
  6316 000017F2 368A0E[0300]                    MOV     CL,[SS:DEVSTRLEN] ; 15/03/2018
  6317                                  CHKPRESTRING:
  6318 000017F7 F3A6                            REPE    CMPSB
  6319 000017F9 740C                            JZ      SHORT GOTPRESTRING
  6320 000017FB 4E                              DEC     SI
  6321 000017FC E8DB17                          CALL	GETLET          ; Try convert to upper case
  6322 000017FF 263A45FF                        CMP     AL,[ES:DI-1]
  6323 00001803 74F2                            JZ      SHORT CHKPRESTRING
  6324                                  NOPRESTRING:
  6325 00001805 F9                              STC
  6326 00001806 C3                      	RETN
  6327                                  
  6328                                  GOTPRESTRING:
  6329 00001807 AC                              LODSB
  6330 00001808 E82418                          CALL	PATHCHRCMP
  6331 0000180B 75F8                            JNZ     SHORT NOPRESTRING
  6332                                  GOTPRESTRING2:
  6333 0000180D BF[6303]                        MOV     DI,NAME1
  6334 00001810 B90900                          MOV     CX,9
  6335                                  TESTLOOP:
  6336 00001813 E8C417                          CALL	GETLET
  6337 00001816 3C2E                            CMP     AL,'.'
  6338 00001818 740E                            JZ      SHORT TESTDEVICE
  6339 0000181A E81218                          CALL	PATHCHRCMP
  6340 0000181D 7407                            JZ      SHORT NOTDEV
  6341 0000181F 08C0                            OR      AL,AL
  6342 00001821 7405                            JZ      SHORT TESTDEVICE
  6343 00001823 AA                              STOSB
  6344 00001824 E2ED                            LOOP    TESTLOOP
  6345                                  NOTDEV:
  6346 00001826 F9                              STC
  6347 00001827 C3                              RETN
  6348                                  
  6349                                  TESTDEVICE:
  6350 00001828 83C102                          ADD     CX,2
  6351 0000182B B020                            MOV     AL,' '
  6352 0000182D F3AA                            REP     STOSB
  6353 0000182F 16                              PUSH    SS
  6354 00001830 1F                              POP     DS
  6355 00001831 E879FB                          CALL	DEVNAME
  6356 00001834 C3                      	RETN
  6357                                  
  6358                                  ;SUBTTL ROOTPATH, FINDPATH -- PARSE A PATH
  6359                                  
  6360                                  ROOTPATH:
  6361                                  
  6362                                  ; Inputs:
  6363                                  ;       ES:BP Points to DPB
  6364                                  ;       FATREAD should be called before this routine
  6365                                  ;       DS:SI Points to asciz string of path which is assumed to start at
  6366                                  ;               the root (no leading '/').
  6367                                  ; Function:
  6368                                  ;       Search from root for path
  6369                                  ; Outputs:
  6370                                  ;       Same as FINDPATH
  6371                                  ; Destroys all registers
  6372                                  
  6373 00001835 1E                              PUSH    DS
  6374 00001836 E812FE                          CALL    SETROOTSRCH
  6375 00001839 1F                              POP     DS
  6376                                  
  6377                                  ; NOTE FALL THROUGH
  6378                                  
  6379                                  FINDPATH:
  6380                                  
  6381                                  ; Inputs:
  6382                                  ;       ES:BP Points to DPB
  6383                                  ;       DS:SI Points to asciz string of path (no leading '/').
  6384                                  ;       [SECCLUSPOS] = 0
  6385                                  ;       [DIRSEC] = Phys sec # of first sector of directory
  6386                                  ;       [CLUSNUM] = Cluster # of next cluster
  6387                                  ;       [CLUSFAC] = Sectors per cluster
  6388                                  ;   Validate_path should be called before this routine is used,
  6389                                  ;       unless it is KNOWN the path is good.
  6390                                  ; Function:
  6391                                  ;       Parse path name
  6392                                  ; Outputs:
  6393                                  ;       ES:BP Points to DPB
  6394                                  ;       Carry set if bad path
  6395                                  ;          DS:SI Points to path element causing failure
  6396                                  ;          Zero set
  6397                                  ;             [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
  6398                                  ;             start a search on the last directory
  6399                                  ;             CL is zero if there is a bad name in the path
  6400                                  ;             CL is non-zero if the name was simply not found
  6401                                  ;                [ENTFREE] may have free spot in directory
  6402                                  ;                [NAME1] is the name.
  6403                                  ;                CL = 81H if '*'s or '?' in name 1, 80H otherwise
  6404                                  ;          Zero reset
  6405                                  ;             File in middle of path or bad name in path
  6406                                  ;               or path too long or malformed path
  6407                                  ;       ELSE
  6408                                  ;          DS = DOSGROUP
  6409                                  ;          AH = device ID
  6410                                  ;          [CURBUF] contains directory record with match
  6411                                  ;          [CURBUF+2]:BX Points into [CURBUF] to start of entry
  6412                                  ;          [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
  6413                                  ;          [NAME1] Has entry name
  6414                                  ;          If last element is a directory zero is set and:
  6415                                  ;             [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
  6416                                  ;             are set up to start a search on it.
  6417                                  ;          If last element is a file zero is reset
  6418                                  ; Destroys all registers
  6419                                  
  6420 0000183A 06                              PUSH    ES
  6421 0000183B 56                              PUSH    SI
  6422 0000183C E8C116                          CALL	NAMETRANS
  6423 0000183F 88C1                            MOV     CL,AL
  6424 00001841 80C980                          OR      CL,80H
  6425 00001844 5F                              POP     DI
  6426 00001845 07                              POP     ES
  6427 00001846 39FE                            CMP     SI,DI
  6428                                          ;JNZ     SHORT check_device
  6429                                          ;JMP     BADPATH
  6430 00001848 0F848A00                	JZ	BADPATH ; 15/03/2018
  6431                                  check_device:
  6432 0000184C 1E                              PUSH    DS
  6433 0000184D 56                              PUSH    SI
  6434 0000184E 8A04                            MOV     AL,[SI]
  6435                                  
  6436                                  ;
  6437                                  ; can we see all devices
  6438                                  ;
  6439 00001850 16                              PUSH	SS
  6440 00001851 1F                      	POP	DS
  6441 00001852 803E[E600]00                    CMP     BYTE [device_availability],0
  6442 00001857 7417                            JZ      SHORT FindFile
  6443                                  ;
  6444                                  ; check name1 to see if we have a device...
  6445                                  ;
  6446 00001859 06                              PUSH    ES
  6447                                          ;context ES
  6448 0000185A 16                              PUSH	SS
  6449 0000185B 07                      	POP	ES
  6450 0000185C E84EFB                  	CALL	DEVNAME		; blast BX
  6451 0000185F 07                              POP     ES
  6452 00001860 720E                            JC      SHORT FindFile
  6453 00001862 08C0                            OR      AL,AL
  6454 00001864 7574                            JNZ     SHORT FILEINPATH
  6455 00001866 5E                              POP     SI
  6456 00001867 5E                              POP     SI
  6457 00001868 16                              PUSH	SS
  6458 00001869 07                      	POP	ES
  6459 0000186A E8D116                  	CALL	BUILDFCB
  6460 0000186D FEC0                            INC     AL
  6461 0000186F C3                      	RETN
  6462                                  
  6463                                  FindFile:
  6464 00001870 57                              PUSH    DI              ; Start of this element
  6465 00001871 06                              PUSH    ES
  6466 00001872 51                              PUSH    CX
  6467 00001873 E89EFC                          CALL    FINDENTRY
  6468 00001876 59                              POP     CX
  6469 00001877 07                              POP     ES
  6470 00001878 5F                              POP     DI
  6471 00001879 7270                            JC      SHORT BADPATHPOP
  6472 0000187B C53E[DD03]                      LDS     DI,[CURBUF]
  6473 0000187F F6470B10                        TEST    BYTE [BX+0BH],attr_directory
  6474 00001883 7455                            JZ      SHORT FILEINPATH
  6475                                  
  6476                                  ;
  6477                                  ; if we are not setting the directory, then
  6478                                  ; check for end of string
  6479                                  ;
  6480                                          ;CMP     BYTE [NoSetDir],0
  6481 00001885 36803E[D500]00                  CMP     BYTE [SS:NoSetDir],0 ; 15/03/2018
  6482 0000188B 7411                    	JZ      SHORT SetDir
  6483 0000188D 89FA                            MOV     DX,DI
  6484 0000188F 8CD8                            MOV     AX,DS
  6485 00001891 5F                              POP     DI
  6486 00001892 1F                              POP     DS
  6487 00001893 803D00                          CMP     BYTE [DI],0
  6488 00001896 7450                            JZ      SHORT SETRET
  6489 00001898 1E                              PUSH    DS
  6490 00001899 57                              PUSH    DI
  6491 0000189A 89D7                            MOV     DI,DX
  6492 0000189C 8ED8                            MOV     DS,AX
  6493                                  
  6494                                  SetDir:
  6495 0000189E 8B14                            MOV     DX,[SI]
  6496 000018A0 29FB                            SUB     BX,DI
  6497 000018A2 29FE                            SUB     SI,DI
  6498 000018A4 53                              PUSH    BX
  6499 000018A5 50                              PUSH    AX
  6500 000018A6 56                              PUSH    SI
  6501 000018A7 51                              PUSH    CX
  6502 000018A8 FF7508                          PUSH    WORD [DI+8]
  6503 000018AB 89D3                            MOV     BX,DX
  6504 000018AD E8C3FD                          CALL    SETDIRSRCH
  6505 000018B0 5A                              POP     DX
  6506 000018B1 30C0                            XOR     AL,AL
  6507 000018B3 E8090E                  	CALL	GETBUFFR
  6508 000018B6 59                              POP     CX
  6509 000018B7 5E                              POP     SI
  6510 000018B8 58                              POP     AX
  6511 000018B9 5B                              POP     BX
  6512 000018BA 8B3E[DD03]                      MOV     DI,[CURBUF]
  6513 000018BE 01FE                            ADD     SI,DI
  6514 000018C0 01FB                            ADD     BX,DI
  6515 000018C2 5F                              POP     DI
  6516 000018C3 1F                              POP     DS
  6517 000018C4 8A05                            MOV     AL,[DI]
  6518 000018C6 08C0                            OR      AL,AL
  6519 000018C8 741E                            JZ      SHORT SETRET
  6520 000018CA 47                              INC     DI
  6521 000018CB 89FE                            MOV     SI,DI
  6522 000018CD E85F17                  	CALL	PATHCHRCMP
  6523 000018D0 7503                            JNZ     SHORT find_bad_name
  6524 000018D2 E965FF                          JMP     FINDPATH
  6525                                  
  6526                                  find_bad_name:
  6527 000018D5 4E                              DEC     SI
  6528                                  BADPATH:
  6529 000018D6 30C9                            XOR     CL,CL   ; Set zero
  6530 000018D8 F9                              STC
  6531 000018D9 C3                              RETN
  6532                                  
  6533                                  FILEINPATH:
  6534 000018DA 5F                              POP     DI
  6535 000018DB 1F                              POP     DS
  6536 000018DC 8A05                            MOV     AL,[DI]
  6537 000018DE 08C0                            OR      AL,AL
  6538 000018E0 7404                            JZ      SHORT INCRET
  6539 000018E2 89FE                            MOV     SI,DI   ; Path too long
  6540 000018E4 F9                              STC
  6541 000018E5 C3                              RETN
  6542                                  
  6543                                  INCRET:
  6544 000018E6 FEC0                            INC     AL      ; Reset zero
  6545                                  SETRET:
  6546 000018E8 16                              PUSH    SS
  6547 000018E9 1F                              POP     DS
  6548 000018EA C3                              RETN
  6549                                  
  6550                                  BADPATHPOP:
  6551 000018EB 5E                              POP     SI
  6552 000018EC 1F                              POP     DS
  6553 000018ED 8A04                            MOV     AL,[SI]
  6554 000018EF 89FE                            MOV     SI,DI   ; Start of bad element
  6555 000018F1 08C0                            OR      AL,AL   ; zero if bad element is last, non-zero if path too long
  6556 000018F3 F9                              STC
  6557 000018F4 C3                      	RETN
  6558                                  
  6559                                  ;SUBTTL STARTSRCH -- INITIATE DIRECTORY SEARCH
  6560                                  
  6561                                  STARTSRCH:
  6562                                  
  6563                                  ; Inputs:
  6564                                  ;       [THISDPB] Set
  6565                                  ; Function:
  6566                                  ;       Set up a search for GETENTRY and NEXTENTRY
  6567                                  ; Outputs:
  6568                                  ;       ES:BP = Drive parameters
  6569                                  ;       Sets up LASTENT, ENDENT, ENTFREE=ENTLAST=-1, VOLID=0
  6570                                  ; Destroys all registers (via FATREAD)
  6571                                  
  6572 000018F5 C42E[9A03]                      LES     BP,[THISDPB]
  6573 000018F9 31C0                            XOR     AX,AX
  6574 000018FB A3[2101]                        MOV     [LASTENT],AX
  6575 000018FE A2[E103]                        MOV     [VOLID],AL	; No volume ID found
  6576 00001901 48                              DEC     AX
  6577 00001902 A3[D303]                        MOV     [ENTFREE],AX
  6578 00001905 A3[D503]                        MOV     [ENTLAST],AX
  6579 00001908 C3                      	RETN
  6580                                  
  6581                                  ;BREAK <MatchAttributes - the final check for attribute matching>
  6582                                  
  6583                                  ;
  6584                                  ; Input:    [Attrib] = attribute to search for
  6585                                  ;           CH = found attribute
  6586                                  ; Output:   JZ <match>
  6587                                  ;           JNZ <nomatch>
  6588                                  ;
  6589                                  
  6590                                  MatchAttributes:
  6591 00001909 50                              PUSH    AX
  6592                                          ;MOV     AL,[Attrib]         ; AL <- SearchSet
  6593 0000190A 36A0[6F03]                      MOV	AL,[SS:ATTRIB] ; 14/03/2018
  6594 0000190E F6D0                    	NOT     AL                  ; AL <- SearchSet'
  6595 00001910 20E8                            AND     AL,CH               ; AL <- SearchSet' and FoundSet
  6596 00001912 2416                            AND     AL,attr_all         ; AL <- SearchSet' and FoundSet and Important
  6597                                  ;
  6598                                  ; the result is non-zero if an attribute is not in the search set
  6599                                  ; and in the found set and in the important set. This means that we do not
  6600                                  ; have a match.  Do a JNZ <nomatch> or JZ <match>
  6601                                  ;
  6602 00001914 58                              POP     AX
  6603 00001915 C3                      	RETN
  6604                                  
  6605                                  ;do_ext
  6606                                  
  6607                                  ;CODE    ENDS
  6608                                  ;    END
  6609                                  
  6610                                  ;============================================================================
  6611                                  ; DISK.ASM
  6612                                  ;============================================================================
  6613                                  
  6614                                  ; Disk routines for MSDOS
  6615                                  ;
  6616                                  
  6617                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6618                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6619                                  
  6620                                  ;TITLE	DISK - Disk utility routines
  6621                                  ;NAME	Disk
  6622                                  
  6623                                  ;SUBTTL LOAD -- MAIN READ ROUTINE AND DEVICE IN ROUTINES
  6624                                  ;PAGE
  6625                                  
  6626                                  ; * * * * Drivers for file input from devices * * * *
  6627                                  
  6628                                  SWAPBACK:
  6629 00001916 06                              PUSH    ES
  6630 00001917 57                              PUSH    DI
  6631 00001918 56                              PUSH    SI
  6632 00001919 53                              PUSH    BX
  6633 0000191A BB0100                          MOV     BX,1
  6634 0000191D E8FE24                          CALL	get_sf_from_jfn
  6635 00001920 83C703                          ADD     DI,SF_ENTRY.sf_fcb
  6636 00001923 8A1E[EB03]                      MOV     BL,[COUTDSAV]
  6637 00001927 C536[EC03]                      LDS     SI,[COUTSAV]
  6638 0000192B 26897519                        MOV     [ES:DI+19H],SI
  6639 0000192F 268C5D1B                        MOV     [ES:DI+1BH],DS
  6640 00001933 26885D18                        MOV     [ES:DI+18H],BL
  6641 00001937 16                              PUSH    SS
  6642 00001938 1F                              POP     DS
  6643 00001939 31DB                            XOR     BX,BX
  6644 0000193B E8E024                          CALL	get_sf_from_jfn
  6645 0000193E 83C703                          ADD     DI,SF_ENTRY.sf_fcb
  6646 00001941 8A1E[EA03]                      MOV     BL,[CINDSAV]
  6647 00001945 C536[E603]                      LDS     SI,[CINSAV]
  6648 00001949 26897519                        MOV     [ES:DI+19H],SI
  6649 0000194D 268C5D1B                        MOV     [ES:DI+1BH],DS
  6650 00001951 26885D18                        MOV     [ES:DI+18H],BL
  6651 00001955 16                              PUSH    SS
  6652 00001956 1F                              POP     DS
  6653 00001957 C606[2601]00                    MOV     BYTE [CONSWAP],0
  6654 0000195C C606[2701]01                    MOV     BYTE [IDLEINT],1
  6655                                  SWAPRET:
  6656 00001961 5B                              POP     BX
  6657 00001962 5E                              POP     SI
  6658 00001963 5F                              POP     DI
  6659 00001964 07                              POP     ES
  6660 00001965 C3                              RETN
  6661                                  
  6662                                  SWAPCON:
  6663 00001966 06                              PUSH    ES
  6664 00001967 57                              PUSH    DI
  6665 00001968 56                              PUSH    SI
  6666 00001969 53                              PUSH    BX
  6667 0000196A C606[2601]01                    MOV     BYTE [CONSWAP],1
  6668 0000196F C606[2701]00                    MOV     BYTE [IDLEINT],0
  6669 00001974 31DB                            XOR     BX,BX
  6670 00001976 E8A524                          CALL	get_sf_from_jfn
  6671 00001979 83C703                          ADD     DI,SF_ENTRY.sf_fcb
  6672 0000197C 268A5D18                        MOV     BL,[ES:DI+18H]
  6673 00001980 881E[EA03]                      MOV     [CINDSAV],BL
  6674 00001984 26C57519                        LDS     SI,[ES:DI+19H]
  6675                                  	; 15/03/2018
  6676                                          ;MOV     [CINSAV],SI
  6677                                          ;MOV     [CINSAV+2],DS
  6678                                          ;LDS     SI,[THISFCB]
  6679 00001988 368936[E603]                    MOV     [SS:CINSAV],SI
  6680 0000198D 368C1E[E803]                    MOV     [SS:CINSAV+2],DS
  6681 00001992 36C536[AF03]                    LDS     SI,[SS:THISFCB]
  6682 00001997 8A5C18                          MOV     BL,[SI+18H]
  6683 0000199A C57419                          LDS     SI,[SI+19H]
  6684 0000199D 26885D18                        MOV     [ES:DI+18H],BL
  6685 000019A1 26897519                        MOV     [ES:DI+19H],SI
  6686 000019A5 268C5D1B                        MOV     [ES:DI+1BH],DS
  6687 000019A9 16                              PUSH    SS
  6688 000019AA 1F                              POP     DS
  6689 000019AB BB0100                          MOV     BX,1
  6690 000019AE E86D24                          CALL	get_sf_from_jfn
  6691 000019B1 83C703                          ADD     DI,SF_ENTRY.sf_fcb
  6692 000019B4 268A5D18                        MOV     BL,[ES:DI+18H]
  6693 000019B8 881E[EB03]                      MOV     [COUTDSAV],BL
  6694 000019BC 26C57519                        LDS     SI,[ES:DI+19H]
  6695                                          ;MOV     [COUTSAV],SI
  6696                                          ;MOV     [COUTSAV+2],DS
  6697                                          ;LDS     SI,[THISFCB]
  6698 000019C0 368936[EC03]                    MOV     [SS:COUTSAV],SI
  6699 000019C5 368C1E[EE03]                    MOV     [SS:COUTSAV+2],DS
  6700 000019CA 36C536[AF03]                    LDS     SI,[SS:THISFCB]
  6701 000019CF 8A5C18                          MOV     BL,[SI+18H]
  6702 000019D2 C57419                          LDS     SI,[SI+19H]
  6703 000019D5 26885D18                        MOV     [ES:DI+18H],BL
  6704 000019D9 26897519                        MOV     [ES:DI+19H],SI
  6705 000019DD 268C5D1B                        MOV     [ES:DI+1BH],DS
  6706 000019E1 16                              PUSH    SS
  6707 000019E2 1F                              POP     DS
  6708 000019E3 E97BFF                          JMP     SWAPRET
  6709                                  
  6710                                  LOAD:
  6711                                  
  6712                                  ; Inputs:
  6713                                  ;       DS:DI point to FCB
  6714                                  ;       DX:AX = Position in file to read
  6715                                  ;       CX = No. of records to read
  6716                                  ; Outputs:
  6717                                  ;       DX:AX = Position of last record read
  6718                                  ;       CX = No. of bytes read
  6719                                  ;       ES:DI point to FCB
  6720                                  ;       fcb_LSTCLUS, fcb_CLUSPOS fields in FCB set
  6721                                  
  6722 000019E6 E81803                          call    SETUP
  6723 000019E9 08DB                            OR      BL,BL           ; Check for named device I/O
  6724 000019EB 7804                            JS      SHORT READDEV
  6725 000019ED E82D04                          CALL	DISKREAD
  6726 000019F0 C3                              RETN
  6727                                  
  6728                                  READDEV:
  6729 000019F1 C43E[DF00]                      LES     DI,[DMAADD]
  6730 000019F5 F6C340                          TEST    BL,40H                  ; End of file?
  6731 000019F8 7407                            JZ      SHORT ENDRDDEVJ3
  6732 000019FA F6C304                          TEST    BL,ISNULL               ; NUL device?
  6733 000019FD 7439                            JZ      SHORT TESTRAW		; NO
  6734 000019FF 30C0                            XOR     AL,AL                   ; Indicate EOF
  6735                                  ENDRDDEVJ3: 
  6736 00001A01 E9A900                  	JMP	ENDRDDEVJ2
  6737                                  
  6738                                  DVRDRAW:
  6739 00001A04 06                              PUSH    ES
  6740 00001A05 1F                              POP     DS
  6741                                  DVRDRAWR:
  6742 00001A06 89FB                            MOV     BX,DI                   ; DS:BX transfer addr
  6743 00001A08 31D2                            XOR     DX,DX                   ; Start at 0
  6744 00001A0A 31C0                            XOR     AX,AX                   ; Media Byte, unit = 0
  6745 00001A0C E806FA                          CALL	SETREAD
  6746                                  	; 15/03/2018
  6747                                          ;LDS     SI,[THISFCB]
  6748 00001A0F 36C536[AF03]                    LDS     SI,[SS:THISFCB]
  6749 00001A14 E875F9                  	CALL	DEVIOCALL
  6750 00001A17 89FA                            MOV     DX,DI                   ; DX is preserved by INT 24
  6751 00001A19 B486                            MOV     AH,86H                  ; Read error
  6752                                          ;MOV     DI,[DEVCALL_REQSTAT]
  6753 00001A1B 368B3E[3001]                    MOV     DI,[SS:DEVCALL_REQSTAT]
  6754 00001A20 F7C70080                	TEST    DI,STERR
  6755 00001A24 7409                            JZ      SHORT CRDROK		; No errors
  6756 00001A26 E8D212                          CALL	CHARHARD
  6757 00001A29 89D7                            MOV     DI,DX
  6758 00001A2B 3C01                            CMP     AL,1
  6759 00001A2D 74D7                            JZ      SHORT DVRDRAWR		; Retry
  6760                                  CRDROK:
  6761 00001A2F 89D7                            MOV     DI,DX
  6762                                          ;ADD     DI,[CALLSCNT]		; Amount transferred
  6763 00001A31 36033E[3F01]                    ADD     DI,[SS:CALLSCNT]
  6764 00001A36 EB75                    	JMP     SHORT ENDRDDEVJ2
  6765                                  
  6766                                  TESTRAW:
  6767 00001A38 F6C320                          TEST    BL,020H                 ; Raw mode?
  6768 00001A3B 75C7                            JNZ     SHORT DVRDRAW
  6769 00001A3D F6C301                          TEST    BL,ISCIN                ; Is it console device?
  6770                                          ;JZ      SHORT NOTRDCON
  6771                                          ;JMP     READCON
  6772 00001A40 0F859F00                	JNZ	READCON ; 15/03/2018
  6773                                  NOTRDCON:
  6774 00001A44 8CC0                            MOV     AX,ES
  6775 00001A46 8ED8                            MOV     DS,AX
  6776 00001A48 89FB                            MOV     BX,DI
  6777 00001A4A 31D2                            XOR     DX,DX
  6778 00001A4C 89D0                            MOV     AX,DX
  6779 00001A4E 51                              PUSH    CX
  6780 00001A4F B90100                          MOV     CX,1
  6781 00001A52 E8C0F9                          CALL	SETREAD
  6782 00001A55 59                              POP     CX
  6783                                          ;LDS     SI,[THISFCB]
  6784 00001A56 36C536[AF03]                    LDS     SI,[SS:THISFCB]
  6785 00001A5B C57419                          LDS     SI,[SI+19H]
  6786                                  DVRDLP:
  6787 00001A5E E81811                          CALL	DSKSTATCHK
  6788 00001A61 E82BF9                          CALL	DEVIOCALL2
  6789 00001A64 57                              PUSH    DI
  6790 00001A65 B486                            MOV     AH,86H
  6791                                          ;MOV     DI,[DEVCALL_REQSTAT]
  6792 00001A67 368B3E[3001]                    MOV     DI,[SS:DEVCALL_REQSTAT]
  6793 00001A6C F7C70080                        TEST    DI,STERR
  6794 00001A70 7413                            JZ      SHORT CRDOK
  6795 00001A72 E88612                          CALL	CHARHARD
  6796 00001A75 5F                              POP     DI
  6797                                          ;MOV     WORD [CALLSCNT],1
  6798 00001A76 36C706[3F01]0100                MOV     WORD [SS:CALLSCNT],1
  6799 00001A7D 3C01                    	CMP     AL,1
  6800 00001A7F 74DD                            JZ      SHORT DVRDLP		;Retry
  6801 00001A81 30C0                            XOR     AL,AL                   ;Pick some random character
  6802 00001A83 EB12                            JMP     SHORT DVRDIGN
  6803                                  CRDOK:
  6804 00001A85 5F                              POP     DI
  6805                                          ;CMP     WORD [CALLSCNT],1
  6806 00001A86 36833E[3F01]01          	CMP     WORD [SS:CALLSCNT],1
  6807 00001A8C 751F                            JNZ     SHORT ENDRDDEVJ2
  6808 00001A8E 1E                              PUSH    DS
  6809                                          ;MOV     DS,[CALLXAD+2]
  6810 00001A8F 368E1E[3D01]                    MOV     DS,[SS:CALLXAD+2]
  6811 00001A94 8A05                            MOV     AL,[DI]
  6812 00001A96 1F                              POP     DS
  6813                                  DVRDIGN:
  6814                                          ;INC     WORD [CALLXAD]
  6815                                          ;MOV     WORD [DEVCALL_REQSTAT],0
  6816 00001A97 36FF06[3B01]                    INC     WORD [SS:CALLXAD]
  6817 00001A9C 36C706[3001]0000                MOV     WORD [SS:DEVCALL_REQSTAT],0
  6818 00001AA3 47                              INC     DI
  6819 00001AA4 3C1A                            CMP     AL,1AH                  ; ^Z?
  6820 00001AA6 7404                            JZ      SHORT ENDRDDEVJ
  6821 00001AA8 3C0D                            CMP     AL,c_CR                 ; CR?
  6822 00001AAA E0B2                            LOOPNZ  DVRDLP
  6823                                  ENDRDDEVJ:
  6824 00001AAC 4F                              DEC     DI
  6825                                  ENDRDDEVJ2:
  6826 00001AAD EB1F                            JMP     SHORT ENDRDDEV
  6827                                  
  6828                                  TRANBUF:
  6829 00001AAF AC                              LODSB
  6830 00001AB0 AA                              STOSB
  6831 00001AB1 3C0D                            CMP     AL,c_CR         ; Check for carriage return
  6832 00001AB3 7503                            JNZ     SHORT NORMCH
  6833 00001AB5 C6040A                          MOV     BYTE [SI],c_LF
  6834                                  NORMCH:
  6835 00001AB8 3C0A                            CMP     AL,c_LF
  6836 00001ABA E0F3                            LOOPNZ  TRANBUF
  6837 00001ABC 7507                            JNZ     SHORT ENDRDCON
  6838 00001ABE 31F6                            XOR     SI,SI           ; Cause a new buffer to be read
  6839 00001AC0 E8721A                          CALL	OUTT		; Transmit linefeed
  6840 00001AC3 0C01                            OR      AL,1            ; Clear zero flag--not end of file
  6841                                  ENDRDCON:
  6842 00001AC5 16                              PUSH    SS
  6843 00001AC6 1F                              POP     DS
  6844 00001AC7 E84CFE                          CALL    SWAPBACK
  6845 00001ACA 8936[DC00]                      MOV     [CONTPOS],SI
  6846                                  ENDRDDEV:
  6847 00001ACE 16                              PUSH    SS
  6848 00001ACF 1F                              POP     DS
  6849 00001AD0 893E[B303]                      MOV     [NEXTADD],DI
  6850 00001AD4 7509                            JNZ     SHORT SETFCBC	; Zero set if Ctrl-Z found in input
  6851 00001AD6 C43E[AF03]                      LES     DI,[THISFCB]
  6852 00001ADA 26806518BF                      AND     BYTE [ES:DI+18H],0FFH-40H 
  6853                                  				; Mark as no more data available
  6854                                  SETFCBC:
  6855 00001ADF E83904                         	CALL	SETFCB
  6856 00001AE2 C3                             	RETN
  6857                                  
  6858                                  READCON:
  6859 00001AE3 E880FE                          CALL    SWAPCON
  6860 00001AE6 8B36[DC00]                      MOV     SI,[CONTPOS]
  6861 00001AEA 09F6                            OR      SI,SI
  6862 00001AEC 75C1                            JNZ     SHORT TRANBUF
  6863 00001AEE 803E[D402]80                    CMP     BYTE [CONBUF],128
  6864 00001AF3 7406                            JZ      SHORT GETBUF
  6865 00001AF5 C706[D402]80FF                  MOV     WORD [CONBUF],0FF80H	; Set up 128-byte buffer with no template
  6866                                  GETBUF:
  6867 00001AFB 51                              PUSH    CX
  6868 00001AFC 06                              PUSH    ES
  6869 00001AFD 57                              PUSH    DI
  6870 00001AFE BA[D402]                        MOV     DX,CONBUF
  6871 00001B01 E8131B                          CALL	_$STD_CON_STRING_INPUT	; Get input buffer
  6872 00001B04 5F                              POP     DI
  6873 00001B05 07                              POP     ES
  6874 00001B06 59                              POP     CX
  6875 00001B07 BE[D602]                        MOV     SI,CONBUF+2
  6876 00001B0A 803C1A                          CMP     BYTE [SI],1AH		; Check for Ctrl-Z in first character
  6877 00001B0D 75A0                            JNZ     SHORT TRANBUF
  6878 00001B0F B01A                            MOV     AL,1AH
  6879 00001B11 AA                              STOSB
  6880 00001B12 4F                              DEC     DI
  6881 00001B13 B00A                            MOV     AL,10
  6882 00001B15 E81D1A                          CALL	OUTT			; Send linefeed
  6883 00001B18 31F6                            XOR     SI,SI
  6884 00001B1A EBA9                            JMP     SHORT ENDRDCON
  6885                                  
  6886                                  ;SUBTTL STORE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES
  6887                                  
  6888                                  ; Inputs:
  6889                                  ;       DS:DI point to FCB
  6890                                  ;       DX:AX = Position in file of disk transfer
  6891                                  ;       CX = Record count
  6892                                  ; Outputs:
  6893                                  ;       DX:AX = Position of last record written
  6894                                  ;       CX = No. of records written
  6895                                  ;       ES:DI point to FCB
  6896                                  ;       fcb_LSTCLUS, fcb_CLUSPOS fields in FCB set
  6897                                  
  6898                                  STORE:
  6899 00001B1C E8E201                          CALL	SETUP
  6900 00001B1F 08DB                            OR      BL,BL
  6901 00001B21 7865                            JS      SHORT WRTDEV
  6902 00001B23 E8ED1C                          CALL	DATE16
  6903 00001B26 26894514                        MOV     [ES:DI+14H],AX
  6904 00001B2A 26895516                        MOV     [ES:DI+16H],DX
  6905 00001B2E E85704                          call    DISKWRITE
  6906 00001B31 C3                              RETN
  6907                                  
  6908                                  WRITECON:
  6909 00001B32 1E                              PUSH    DS
  6910 00001B33 16                              PUSH    SS
  6911 00001B34 1F                              POP     DS
  6912 00001B35 E82EFE                          CALL    SWAPCON
  6913 00001B38 1F                              POP     DS
  6914 00001B39 89DE                            MOV     SI,BX
  6915 00001B3B 51                              PUSH    CX
  6916                                  WRCONLP:
  6917 00001B3C AC                              LODSB
  6918 00001B3D 3C1A                            CMP     AL,1AH          ; ^Z?
  6919 00001B3F 7405                            JZ      SHORT CONEOF
  6920 00001B41 E8F119                          CALL	OUTT
  6921 00001B44 E2F6                            LOOP    WRCONLP
  6922                                  CONEOF:
  6923 00001B46 58                              POP     AX                      ; Count
  6924 00001B47 29C8                            SUB     AX,CX                   ; Amount actually written
  6925 00001B49 1F                              POP     DS
  6926 00001B4A E8C9FD                          CALL    SWAPBACK
  6927 00001B4D EB29                            JMP     SHORT ENDWRDEV
  6928                                  
  6929                                  DVWRTRAW:
  6930 00001B4F 31C0                            XOR     AX,AX                   ; Media Byte, unit = 0
  6931 00001B51 E8F4F8                          CALL	SETWRITE
  6932                                          ;LDS     SI,[THISFCB]
  6933 00001B54 36C536[AF03]                    LDS     SI,[SS:THISFCB] ; 14/03/2018        
  6934 00001B59 E830F8                  	CALL	DEVIOCALL
  6935 00001B5C 89FA                            MOV     DX,DI
  6936 00001B5E B487                            MOV     AH,87H
  6937                                          ;MOV     DI,[DEVCALL_REQSTAT]
  6938 00001B60 368B3E[3001]                    MOV     DI,[SS:DEVCALL_REQSTAT] ; 14/03/2018        
  6939 00001B65 F7C70080                	TEST    DI,STERR
  6940 00001B69 7409                            JZ      SHORT CWRTROK
  6941 00001B6B E88D11                          CALL	CHARHARD
  6942 00001B6E 89D3                            MOV     BX,DX                   ; Recall transfer addr
  6943 00001B70 3C01                            CMP     AL,1
  6944 00001B72 74DB                            JZ      SHORT DVWRTRAW		; Try again
  6945                                  CWRTROK:
  6946 00001B74 1F                              POP     DS
  6947 00001B75 A1[3F01]                        MOV     AX,[CALLSCNT]           ; Get actual number of bytes transferred
  6948                                  ENDWRDEV:
  6949 00001B78 C43E[AF03]                      LES     DI,[THISFCB]
  6950 00001B7C 31D2                            XOR     DX,DX
  6951 00001B7E 26F7750E                        DIV     WORD [ES:DI+0EH]
  6952 00001B82 89C1                            MOV     CX,AX                   ; Partial record is ignored
  6953 00001B84 E8F003                          call    ADDREC
  6954 00001B87 C3                      	RETN
  6955                                  
  6956                                  WRTDEV:
  6957 00001B88 80CB40                          OR      BL,40H          ; Reset EOF for input
  6958 00001B8B 31C0                            XOR     AX,AX
  6959 00001B8D E3E9                            JCXZ    ENDWRDEV        ; problem of creating on a device.
  6960 00001B8F 1E                              PUSH    DS
  6961 00001B90 88D8                            MOV     AL,BL
  6962 00001B92 C51E[DF00]                      LDS     BX,[DMAADD]
  6963 00001B96 89DF                            MOV     DI,BX
  6964 00001B98 31D2                            XOR     DX,DX                   ; Set starting point
  6965 00001B9A A820                            TEST    AL,020H                 ; Raw?
  6966 00001B9C 75B1                            JNZ     SHORT DVWRTRAW
  6967 00001B9E A802                            TEST    AL,ISCOUT               ; Console output device?
  6968 00001BA0 7590                            JNZ     WRITECON
  6969 00001BA2 A804                            TEST    AL,ISNULL
  6970 00001BA4 7567                            JNZ     SHORT WRTNUL
  6971 00001BA6 89D0                            MOV     AX,DX
  6972 00001BA8 803F1A                          CMP     BYTE [BX],1AH		; ^Z?
  6973 00001BAB 745A                            JZ      SHORT WRTCOOKDONE	; Yes, transfer nothing
  6974 00001BAD 51                              PUSH    CX
  6975 00001BAE B90100                          MOV     CX,1
  6976 00001BB1 E894F8                          CALL	SETWRITE
  6977 00001BB4 59                              POP     CX
  6978                                          ;LDS     SI,[THISFCB]
  6979 00001BB5 36C536[AF03]                    LDS     SI,[SS:THISFCB] ; 14/03/2018
  6980 00001BBA C57419                  	LDS     SI,[SI+19H]
  6981                                  DVWRTLP:
  6982 00001BBD E8B90F                          CALL	DSKSTATCHK
  6983 00001BC0 E8CCF7                          CALL	DEVIOCALL2
  6984 00001BC3 57                              PUSH    DI
  6985 00001BC4 B487                            MOV     AH,87H
  6986                                          ;MOV     DI,[DEVCALL_REQSTAT]
  6987 00001BC6 368B3E[3001]                    MOV     DI,[SS:DEVCALL_REQSTAT] ; 14/03/2018
  6988 00001BCB F7C70080                        TEST    DI,STERR
  6989 00001BCF 7411                            JZ      SHORT CWROK
  6990 00001BD1 E82711                          CALL	CHARHARD
  6991 00001BD4 5F                              POP     DI
  6992                                          ;MOV     WORD [CALLSCNT],1
  6993 00001BD5 36C706[3F01]0100                MOV     WORD [SS:CALLSCNT],1 ; 14/03/2018
  6994 00001BDC 3C01                            CMP     AL,1
  6995 00001BDE 74DD                            JZ      SHORT DVWRTLP
  6996 00001BE0 EB09                            JMP     SHORT DVWRTIGN
  6997                                  CWROK:
  6998 00001BE2 5F                              POP     DI
  6999                                          ;CMP     WORD [CALLSCNT],0
  7000 00001BE3 36833E[3F01]00                  CMP	WORD [SS:CALLSCNT],0 ; 14/03/2018
  7001 00001BE9 741C                    	JZ      SHORT WRTCOOKDONE
  7002                                  DVWRTIGN:
  7003 00001BEB 42                              INC     DX
  7004                                  	; 14/03/2018
  7005                                          ;INC     WORD [CALLXAD]
  7006 00001BEC 36FF06[3B01]                    INC     WORD [SS:CALLXAD]
  7007 00001BF1 47                              INC     DI
  7008 00001BF2 1E                              PUSH    DS
  7009                                          ;MOV     DS,[CALLXAD+2]
  7010 00001BF3 368E1E[3D01]                    MOV     DS,[SS:CALLXAD+2]
  7011 00001BF8 803D1A                          CMP     BYTE [DI],1AH       ; ^Z?
  7012 00001BFB 1F                              POP     DS
  7013 00001BFC 7409                            JZ      SHORT WRTCOOKDONE
  7014                                          ;MOV     WORD [DEVCALL_REQSTAT],0
  7015 00001BFE 36C706[3001]0000                MOV     WORD [SS:DEVCALL_REQSTAT],0
  7016 00001C05 E2B6                            LOOP    DVWRTLP
  7017                                  WRTCOOKDONE:
  7018 00001C07 89D0                            MOV     AX,DX
  7019 00001C09 1F                              POP     DS
  7020 00001C0A E96BFF                          JMP     ENDWRDEV
  7021                                  
  7022                                  WRTNUL:
  7023 00001C0D 89CA                            MOV     DX,CX                   ;Entire transfer done
  7024 00001C0F EBF6                            JMP     SHORT WRTCOOKDONE
  7025                                  
  7026                                  GET_IO_FCB:
  7027                                  ; Convert JFN number in BX to FCB in DS:SI
  7028 00001C11 16                              PUSH    SS
  7029 00001C12 1F                              POP     DS
  7030 00001C13 06                              PUSH    ES
  7031 00001C14 57                              PUSH    DI
  7032 00001C15 E80622                          CALL	get_sf_from_jfn
  7033 00001C18 7207                            JC      SHORT RET44P
  7034 00001C1A 89FE                            MOV     SI,DI
  7035 00001C1C 83C603                          ADD     SI,SF_ENTRY.sf_fcb
  7036 00001C1F 06                              PUSH    ES
  7037 00001C20 1F                              POP     DS
  7038                                  RET44P:
  7039 00001C21 5F                              POP     DI
  7040 00001C22 07                              POP     ES
  7041 00001C23 C3                              RETN
  7042                                  
  7043                                  ;SUBTTL GETTHISDRV -- FIND CURRENT DRIVE
  7044                                  
  7045                                  GETTHISDRV:
  7046                                  
  7047                                  ; Input:    AL has drive identifier (1=A, 0=default)
  7048                                  ; Output:   AL has physical drive (0=A)
  7049                                  ; Carry set if invalid drive (and AL is garbage anyway)
  7050                                  
  7051                                  	; 15/03/2018
  7052                                          ;CMP     [NUMIO],AL
  7053 00001C24 363806[0001]                    CMP     [SS:NUMIO],AL
  7054 00001C29 720C                            JC	SHORT GETTHISDRIVE_RETN
  7055 00001C2B FEC8                            DEC     AL
  7056 00001C2D 7904                            JNS     SHORT PHYDRV
  7057                                          ;MOV     AL,[CURDRV]
  7058 00001C2F 36A0[2001]                      MOV     AL,[SS:CURDRV]
  7059                                  PHYDRV:
  7060                                          ;MOV     [THISDRV],AL
  7061 00001C33 36A2[9903]                      MOV     [SS:THISDRV],AL
  7062                                  GETTHISDRIVE_RETN:
  7063 00001C37 C3                              RETN
  7064                                  
  7065                                  ;SUBTTL DIRREAD -- READ A DIRECTORY SECTOR
  7066                                  
  7067                                  DIRREAD:
  7068                                  
  7069                                  ; Inputs:
  7070                                  ;       AX = Directory block number (relative to first block of directory)
  7071                                  ;       ES:BP = Base of drive parameters
  7072                                  ;       [DIRSEC] = First sector of first cluster of directory
  7073                                  ;       [CLUSNUM] = Next cluster
  7074                                  ;       [CLUSFAC] = Sectors/Cluster
  7075                                  ; Function:
  7076                                  ;       Read the directory block into [CURBUF].
  7077                                  ; Outputs:
  7078                                  ;       [NXTCLUSNUM] = Next cluster (after the one skipped to)
  7079                                  ;       [SECCLUSPOS] Set
  7080                                  ;       ES:BP unchanged [CURBUF] Points to Buffer with dir sector
  7081                                  ; All other registers destroyed.
  7082                                  
  7083 00001C38 8A0E[9E03]                      MOV     CL,[CLUSFAC]
  7084 00001C3C F6F1                            DIV     CL              ; AL # clusters to skip, AH position in cluster
  7085 00001C3E 8826[9503]                      MOV     [SECCLUSPOS],AH
  7086 00001C42 88C1                            MOV     CL,AL
  7087 00001C44 30ED                            XOR     CH,CH
  7088 00001C46 8B16[BF03]                      MOV     DX,[DIRSEC]
  7089 00001C4A 00E2                            ADD     DL,AH
  7090 00001C4C 80D600                          ADC     DH,0
  7091 00001C4F 8B1E[BD03]                      MOV     BX,[CLUSNUM]
  7092 00001C53 891E[D703]                      MOV     [NXTCLUSNUM],BX
  7093 00001C57 E318                            JCXZ    FIRSTCLUSTER
  7094                                  SKPCLLP:
  7095 00001C59 E80E05                          CALL	UNPACK
  7096 00001C5C 87DF                            XCHG    BX,DI
  7097 00001C5E 81FBF80F                        CMP     BX,0FF8H
  7098 00001C62 7302                            JAE     SHORT HAVESKIPPED
  7099 00001C64 E2F3                            LOOP    SKPCLLP
  7100                                  HAVESKIPPED:
  7101 00001C66 891E[D703]                      MOV     [NXTCLUSNUM],BX
  7102 00001C6A 89FA                            MOV     DX,DI
  7103 00001C6C 88E3                            MOV     BL,AH
  7104 00001C6E E88908                          CALL	FIGREC
  7105                                  FIRSTCLUSTER:
  7106 00001C71 30C0                            XOR     AL,AL           ; Indicate pre-read
  7107 00001C73 B40F                            MOV     AH,DIRPRI
  7108 00001C75 E8470A                          CALL	GETBUFFR
  7109 00001C78 C3                              RETN
  7110                                  
  7111                                  ;SUBTTL FATSECRD -- READ A FAT SECTOR
  7112                                  
  7113                                  FATSECRD:
  7114                                  
  7115                                  ; Inputs:
  7116                                  ;       Same as DREAD
  7117                                  ;       DS:BX = Transfer address
  7118                                  ;       CX = Number of sectors
  7119                                  ;       DX = Absolute record number
  7120                                  ;       ES:BP = Base of drive parameters
  7121                                  ; Function:
  7122                                  ;       Calls BIOS to perform FAT read.
  7123                                  ; Outputs:
  7124                                  ;       Same as DREAD
  7125                                  
  7126 00001C79 89CF                            MOV     DI,CX
  7127 00001C7B 268A4E08                        MOV     CL,[ES:BP+8]
  7128 00001C7F 268A460F                        MOV     AL,[ES:BP+0FH]
  7129 00001C83 30E4                            XOR     AH,AH
  7130 00001C85 88E5                            MOV     CH,AH
  7131 00001C87 52                              PUSH    DX
  7132                                  NXTFAT:
  7133 00001C88 51                              PUSH    CX
  7134 00001C89 50                              PUSH    AX
  7135 00001C8A 89F9                            MOV     CX,DI
  7136 00001C8C E82000                          CALL    DSKREAD
  7137 00001C8F 58                              POP     AX
  7138 00001C90 59                              POP     CX
  7139 00001C91 741A                            JZ      SHORT RET41P
  7140 00001C93 01C2                            ADD     DX,AX
  7141 00001C95 E2F1                            LOOP    NXTFAT
  7142 00001C97 5A                              POP     DX
  7143 00001C98 89F9                            MOV     CX,DI
  7144                                  
  7145                                  ; NOTE FALL THROUGH
  7146                                  
  7147                                  ;SUBTTL DREAD -- DO A DISK READ
  7148                                  
  7149                                  DREAD:
  7150                                  
  7151                                  ; Inputs:
  7152                                  ;       DS:BX = Transfer address
  7153                                  ;       CX = Number of sectors
  7154                                  ;       DX = Absolute record number
  7155                                  ;       ES:BP = Base of drive parameters
  7156                                  ; Function:
  7157                                  ;       Calls BIOS to perform disk read. If BIOS reports
  7158                                  ;       errors, will call HARDERR for further action.
  7159                                  ; DS,ES:BP preserved. All other registers destroyed.
  7160                                  
  7161 00001C9A E81200                          CALL    DSKREAD
  7162 00001C9D 740F                            JZ	SHORT DREAD_RETN
  7163                                          ;MOV     BYTE [READOP],0
  7164 00001C9F 36C606[9803]00                  MOV     BYTE [SS:READOP],0 ; 15/03/2018
  7165 00001CA5 E86910                          CALL	HARDERR
  7166 00001CA8 3C01                            CMP     AL,1            ; Check for retry
  7167 00001CAA 74EE                            JZ      SHORT DREAD
  7168 00001CAC C3                              RETN			; Ignore otherwise
  7169                                  
  7170                                  RET41P: 
  7171 00001CAD 5A                      	POP     DX
  7172                                  DREAD_RETN:
  7173 00001CAE C3                              RETN
  7174                                  
  7175                                  ;SUBTTL DSKREAD -- PHYSICAL DISK READ
  7176                                  
  7177                                  DSKREAD: 
  7178                                  
  7179                                  ; Inputs:
  7180                                  ;       DS:BX = Transfer addr
  7181                                  ;       CX = Number of sectors
  7182                                  ;       DX = Absolute record number
  7183                                  ;       ES:BP = Base of drive parameters
  7184                                  ; Function:
  7185                                  ;       Call BIOS to perform disk read
  7186                                  ; Outputs:
  7187                                  ;       DI = CX on entry
  7188                                  ;       CX = Number of sectors unsuccessfully transfered
  7189                                  ;       AX = Status word as returned by BIOS (error code in AL if error)
  7190                                  ;       Zero set if OK (from BIOS)
  7191                                  ;       Zero clear if error
  7192                                  ; SI Destroyed, others preserved
  7193                                  
  7194 00001CAF 51                              PUSH    CX
  7195 00001CB0 268A6616                        MOV     AH,[ES:BP+16H]
  7196 00001CB4 268A4601                        MOV     AL,[ES:BP+1]
  7197 00001CB8 53                              PUSH    BX
  7198 00001CB9 06                              PUSH    ES
  7199 00001CBA E858F7                          CALL	SETREAD
  7200 00001CBD EB21                            JMP     SHORT DODSKOP
  7201                                  
  7202                                  ;SUBTTL DWRITE -- SEE ABOUT WRITING
  7203                                  
  7204                                  DWRITE:
  7205                                  
  7206                                  ; Inputs:
  7207                                  ;       DS:BX = Transfer address
  7208                                  ;       CX = Number of sectors
  7209                                  ;       DX = Absolute record number
  7210                                  ;       ES:BP = Base of drive parameters
  7211                                  ; Function:
  7212                                  ;       Calls BIOS to perform disk write. If BIOS reports
  7213                                  ;       errors, will call HARDERR for further action.
  7214                                  ; BP preserved. All other registers destroyed.
  7215                                  
  7216 00001CBF E81000                          CALL    DSKWRITE
  7217 00001CC2 740D                            JZ	SHORT DWRITE_RETN
  7218                                          ;MOV     BYTE [READOP],1
  7219 00001CC4 36C606[9803]01                  MOV	BYTE [SS:READOP],1 ; 14/03/22018
  7220 00001CCA E84410                  	CALL	HARDERR
  7221 00001CCD 3C01                            CMP     AL,1            ; Check for retry
  7222 00001CCF 74EE                            JZ      SHORT DWRITE
  7223                                  DWRITE_RETN:
  7224 00001CD1 C3                              RETN
  7225                                  
  7226                                  ;SUBTTL DSKWRITE -- PHYSICAL DISK WRITE
  7227                                  
  7228                                  DSKWRITE:
  7229                                  
  7230                                  ; Inputs:
  7231                                  ;       DS:BX = Transfer addr
  7232                                  ;       CX = Number of sectors
  7233                                  ;       DX = Absolute record number
  7234                                  ;       ES:BP = Base of drive parameters
  7235                                  ; Function:
  7236                                  ;       Call BIOS to perform disk read
  7237                                  ; Outputs:
  7238                                  ;       DI = CX on entry
  7239                                  ;       CX = Number of sectors unsuccessfully transfered
  7240                                  ;       AX = Status word as returned by BIOS (error code in AL if error)
  7241                                  ;       Zero set if OK (from BIOS)
  7242                                  ;       Zero clear if error
  7243                                  ; SI Destroyed, others preserved
  7244                                  
  7245 00001CD2 51                              PUSH    CX
  7246 00001CD3 268A6616                        MOV     AH,[ES:BP+16H]
  7247 00001CD7 268A4601                        MOV     AL,[ES:BP+1]
  7248 00001CDB 53                              PUSH    BX
  7249 00001CDC 06                              PUSH    ES
  7250 00001CDD E868F7                          CALL	SETWRITE
  7251                                  DODSKOP:
  7252 00001CE0 8CD9                            MOV     CX,DS           ; Save DS
  7253 00001CE2 1F                              POP     DS              ; DS:BP points to DPB
  7254 00001CE3 1E                              PUSH    DS
  7255 00001CE4 3EC57612                        LDS     SI,[DS:BP+12H]
  7256 00001CE8 E8A4F6                          CALL	DEVIOCALL2
  7257 00001CEB 8ED9                            MOV     DS,CX           ; Restore DS
  7258 00001CED 07                              POP     ES              ; Restore ES
  7259 00001CEE 5B                              POP     BX
  7260                                          ;MOV     CX,[CALLSCNT]   ; Number of sectors transferred
  7261 00001CEF 368B0E[3F01]                    MOV     CX,[SS:CALLSCNT] ; 14/03/2018	
  7262 00001CF4 5F                              POP     DI
  7263 00001CF5 29F9                            SUB     CX,DI
  7264 00001CF7 F7D9                            NEG     CX              ; Number of sectors not transferred
  7265                                          ;MOV     AX,[DEVCALL_REQSTAT]
  7266 00001CF9 36A1[3001]                      MOV     AX,[SS:DEVCALL_REQSTAT] ; 14/03/2018
  7267 00001CFD A90080                          TEST    AX,STERR
  7268 00001D00 C3                              RETN
  7269                                  
  7270                                  SETUP:
  7271                                  
  7272                                  ; Inputs:
  7273                                  ;       DS:DI point to FCB
  7274                                  ;       DX:AX = Record position in file of disk transfer
  7275                                  ;       CX = Record count
  7276                                  ; Outputs:
  7277                                  ;       DS = DOSGROUP
  7278                                  ;       BL = fcb_DEVID from FCB
  7279                                  ;       CX = No. of bytes to transfer  (0 = 64K)
  7280                                  ;       [THISDPB] = Base of drive parameters
  7281                                  ;       [RECCNT] = Record count
  7282                                  ;       [RECPOS] = Record position in file
  7283                                  ;       ES:DI Points to FCB
  7284                                  ;       [THISFCB] = ES:DI
  7285                                  ;       [NEXTADD] = Displacement of disk transfer within segment
  7286                                  ;       [SECPOS] = Position of first sector
  7287                                  ;       [BYTPOS] = Byte position in file
  7288                                  ;       [BYTSECPOS] = Byte position in first sector
  7289                                  ;       [CLUSNUM] = First cluster
  7290                                  ;       [SECCLUSPOS] = Sector within first cluster
  7291                                  ;       [DSKERR] = 0 (no errors yet)
  7292                                  ;       [TRANS] = 0 (No transfers yet)
  7293                                  ;       [THISDRV] = Physical drive unit number
  7294                                  
  7295 00001D01 50                              PUSH    AX
  7296 00001D02 8A05                            MOV     AL,[DI]
  7297 00001D04 FEC8                            DEC     AL
  7298                                  	; 15/03/2018
  7299                                          ;MOV     [THISDRV],AL
  7300 00001D06 36A2[9903]                      MOV     [SS:THISDRV],AL
  7301 00001D0A 8A4518                          MOV     AL,[DI+18H]
  7302 00001D0D 8B750E                          MOV     SI,[DI+0EH]
  7303 00001D10 09F6                            OR      SI,SI
  7304 00001D12 7506                            JNZ     SHORT HAVRECSIZ
  7305 00001D14 BE8000                          MOV     SI,128
  7306 00001D17 89750E                          MOV     [DI+0EH],SI
  7307                                  HAVRECSIZ:
  7308                                          ;MOV     [THISFCB+2],DS
  7309 00001D1A 368C1E[B103]                    MOV     [SS:THISFCB+2],DS
  7310 00001D1F 16                              PUSH    SS
  7311 00001D20 1F                              POP     DS              ; Set DS to DOSGROUP
  7312 00001D21 893E[AF03]                      MOV     [THISFCB],DI
  7313 00001D25 08C0                            OR      AL,AL           ; Is it a device?
  7314 00001D27 7902                            JNS     SHORT NOTDEVICE
  7315 00001D29 30C0                            XOR     AL,AL           ; Fake in drive 0 so we can get BP
  7316                                  NOTDEVICE:
  7317 00001D2B E8C5F6                          CALL	GETBP
  7318 00001D2E 58                              POP     AX
  7319 00001D2F 7309                            JNC     SHORT CheckRecLen
  7320 00001D31 31C9                            XOR     CX,CX
  7321 00001D33 C606[9603]04                    MOV     BYTE [DSKERR],4
  7322 00001D38 5B                              POP     BX
  7323 00001D39 C3                              RETN
  7324                                  
  7325                                  CheckRecLen:
  7326 00001D3A 83FE40                          CMP     SI,64           ; Check if highest byte of RECPOS is significant
  7327 00001D3D 7202                            JB      SHORT SMALREC
  7328 00001D3F 30F6                            XOR     DH,DH           ; Ignore MSB if record >= 64 bytes
  7329                                  SMALREC:
  7330 00001D41 890E[B903]                      MOV     [RECCNT],CX
  7331 00001D45 A3[B503]                        MOV     [RECPOS],AX
  7332 00001D48 8916[B703]                      MOV     [RECPOS+2],DX
  7333 00001D4C 8B1E[DF00]                      MOV     BX,[DMAADD]
  7334 00001D50 891E[B303]                      MOV     [NEXTADD],BX
  7335 00001D54 C606[9603]00                    MOV     BYTE [DSKERR],0
  7336 00001D59 C606[9703]00                    MOV     BYTE [TRANS],0
  7337 00001D5E 89D3                            MOV     BX,DX
  7338 00001D60 F7E6                            MUL     SI
  7339 00001D62 A3[C903]                        MOV     [BYTPOS],AX
  7340 00001D65 52                              PUSH    DX
  7341 00001D66 89D8                            MOV     AX,BX
  7342 00001D68 F7E6                            MUL     SI
  7343 00001D6A 5B                              POP     BX
  7344 00001D6B 01D8                            ADD     AX,BX
  7345 00001D6D 83D200                          ADC     DX,0            ; Ripple carry
  7346 00001D70 755E                            JNZ     SHORT EOFERR
  7347 00001D72 A3[CB03]                        MOV     [BYTPOS+2],AX
  7348 00001D75 89C2                            MOV     DX,AX
  7349 00001D77 A1[C903]                        MOV     AX,[BYTPOS]
  7350 00001D7A 268B5E02                        MOV     BX,[ES:BP+2]
  7351 00001D7E 39DA                            CMP     DX,BX           ; See if divide will overflow
  7352 00001D80 734E                            JNC     SHORT EOFERR
  7353 00001D82 F7F3                            DIV     BX
  7354 00001D84 A3[C303]                        MOV     [SECPOS],AX
  7355 00001D87 8916[C703]                      MOV     [BYTSECPOS],DX
  7356 00001D8B 89C2                            MOV     DX,AX
  7357 00001D8D 26224604                        AND     AL,[ES:BP+4]
  7358 00001D91 A2[9503]                        MOV     [SECCLUSPOS],AL
  7359 00001D94 89C8                            MOV     AX,CX           ; Record count
  7360 00001D96 268A4E05                        MOV     CL,[ES:BP+5]
  7361 00001D9A D3EA                            SHR     DX,CL
  7362 00001D9C 8916[BD03]                      MOV     [CLUSNUM],DX
  7363 00001DA0 F7E6                            MUL     SI              ; Multiply by bytes per record
  7364 00001DA2 89C1                            MOV     CX,AX
  7365 00001DA4 0306[DF00]                      ADD     AX,[DMAADD]     ; See if it will fit in one segment
  7366 00001DA8 83D200                          ADC     DX,0
  7367 00001DAB 741A                            JZ      SHORT OK	; Must be less than 64K
  7368 00001DAD A1[DF00]                        MOV     AX,[DMAADD]
  7369 00001DB0 F7D8                            NEG     AX              ; Amount of room left in segment
  7370 00001DB2 7501                            JNZ     SHORT PARTSEG
  7371 00001DB4 48                              DEC     AX
  7372                                  PARTSEG:
  7373 00001DB5 31D2                            XOR     DX,DX
  7374 00001DB7 F7F6                            DIV     SI              ; How many records will fit?
  7375 00001DB9 A3[B903]                        MOV     [RECCNT],AX
  7376 00001DBC F7E6                            MUL     SI              ; Translate that back into bytes
  7377 00001DBE C606[9603]02                    MOV     BYTE [DSKERR],2	; Flag that trimming took place
  7378 00001DC3 89C1                            MOV     CX,AX
  7379 00001DC5 E310                            JCXZ    NOROOM
  7380                                  OK:
  7381 00001DC7 C43E[AF03]                      LES     DI,[THISFCB]
  7382 00001DCB 268A5D18                        MOV     BL,[ES:DI+18H]
  7383 00001DCF C3                              RETN
  7384                                  
  7385                                  EOFERR:
  7386 00001DD0 C606[9603]01                    MOV     BYTE [DSKERR],1
  7387 00001DD5 31C9                            XOR     CX,CX
  7388                                  NOROOM:
  7389 00001DD7 C43E[AF03]                      LES     DI,[THISFCB]
  7390 00001DDB 5B                              POP     BX              ; Kill return address
  7391 00001DDC C3                              RETN
  7392                                  
  7393                                  ;SUBTTL BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES
  7394                                  
  7395                                  BREAKDOWN:
  7396                                  
  7397                                  ; Inputs:
  7398                                  ;       CX = Length of disk transfer in bytes
  7399                                  ;       ES:BP = Base of drive parameters
  7400                                  ;       [BYTSECPOS] = Byte position within first sector
  7401                                  ; Outputs:
  7402                                  ;       [BYTCNT1] = Bytes to transfer in first sector
  7403                                  ;       [SECCNT] = No. of whole sectors to transfer
  7404                                  ;       [BYTCNT2] = Bytes to transfer in last sector
  7405                                  ; AX, BX, DX destroyed. No other registers affected.
  7406                                  
  7407 00001DDD A1[C703]                        MOV     AX,[BYTSECPOS]
  7408 00001DE0 89CB                            MOV     BX,CX
  7409 00001DE2 09C0                            OR      AX,AX
  7410 00001DE4 740E                            JZ      SHORT SAVFIR	; Partial first sector?
  7411 00001DE6 262B4602                        SUB     AX,[ES:BP+2]
  7412 00001DEA F7D8                            NEG     AX              ; Max number of bytes left in first sector
  7413 00001DEC 29C3                            SUB     BX,AX           ; Subtract from total length
  7414 00001DEE 7304                            JAE     SHORT SAVFIR
  7415 00001DF0 01D8                            ADD     AX,BX           ; Don't use all of the rest of the sector
  7416 00001DF2 31DB                            XOR     BX,BX           ; And no bytes are left
  7417                                  SAVFIR:
  7418 00001DF4 A3[CD03]                        MOV     [BYTCNT1],AX
  7419 00001DF7 89D8                            MOV     AX,BX
  7420 00001DF9 31D2                            XOR     DX,DX
  7421 00001DFB 26F77602                        DIV     WORD [ES:BP+2]  ; How many whole sectors?
  7422 00001DFF A3[D103]                        MOV     [SECCNT],AX
  7423 00001E02 8916[CF03]                      MOV     [BYTCNT2],DX    ; Bytes remaining for last sector
  7424 00001E06 0B16[CD03]                      OR      DX,[BYTCNT1]
  7425 00001E0A 7510                            JNZ	SHORT BREAKDOWN_RETN ; NOT (BYTCNT1 = BYTCNT2 = 0)
  7426 00001E0C 83F801                          CMP     AX,1
  7427 00001E0F 750B                            JNZ	SHORT BREAKDOWN_RETN
  7428 00001E11 268B4602                        MOV     AX,[ES:BP+2] ; Buffer EXACT one sector I/O
  7429 00001E15 A3[CF03]                        MOV     [BYTCNT2],AX
  7430 00001E18 8916[D103]                      MOV     [SECCNT],DX	; DX = 0
  7431                                  BREAKDOWN_RETN:
  7432 00001E1C C3                      	RETN
  7433                                  
  7434                                  ;SUBTTL DISKREAD -- PERFORM USER DISK READ
  7435                                  
  7436                                  DISKREAD:
  7437                                  
  7438                                  ; Inputs:
  7439                                  ;       Outputs of SETUP
  7440                                  ; Function:
  7441                                  ;       Perform disk read
  7442                                  ; Outputs:
  7443                                  ;       DX:AX = Position of last record read
  7444                                  ;       CX = No. of records read
  7445                                  ;       ES:DI point to FCB
  7446                                  ;       fcb_LSTCLUS, fcb_CLUSPOS fields in FCB set
  7447                                  
  7448 00001E1D 268B4510                        MOV     AX,[ES:DI+10H]
  7449 00001E21 268B5D12                        MOV     BX,[ES:DI+12H]
  7450 00001E25 2B06[C903]                      SUB     AX,[BYTPOS]
  7451 00001E29 1B1E[CB03]                      SBB     BX,[BYTPOS+2]
  7452 00001E2D 721E                            JB      SHORT RDERR
  7453 00001E2F 750A                            JNZ     SHORT ENUF
  7454 00001E31 09C0                            OR      AX,AX
  7455 00001E33 7418                            JZ      SHORT RDERR
  7456 00001E35 39C8                            CMP     AX,CX
  7457 00001E37 7302                            JAE     SHORT ENUF
  7458 00001E39 89C1                            MOV     CX,AX
  7459                                  ENUF:
  7460 00001E3B C42E[9A03]                      LES     BP,[THISDPB]
  7461 00001E3F E89BFF                          CALL    BREAKDOWN
  7462 00001E42 8B0E[BD03]                      MOV     CX,[CLUSNUM]
  7463 00001E46 E84F05                          CALL	FNDCLUS
  7464 00001E49 09C9                            OR      CX,CX
  7465 00001E4B 7409                            JZ      SHORT SKIPERR
  7466                                  RDERR:
  7467 00001E4D E9B101                          JMP     WRTERR
  7468                                  RDLASTJ:
  7469 00001E50 E9B000                  	JMP	RDLAST
  7470                                  SETFCBJ2:
  7471 00001E53 E9C500                  	JMP	SETFCB
  7472                                  
  7473                                  SKIPERR:
  7474                                  
  7475 00001E56 8916[BB03]                      MOV     [LASTPOS],DX
  7476 00001E5A 891E[BD03]                      MOV     [CLUSNUM],BX
  7477 00001E5E 833E[CD03]00                    CMP     WORD [BYTCNT1],0
  7478 00001E63 7403                            JZ      SHORT RDMID
  7479 00001E65 E89605                          CALL	BUFRD
  7480                                  RDMID:
  7481 00001E68 833E[D103]00                    CMP     WORD [SECCNT],0
  7482 00001E6D 74E1                            JZ      SHORT RDLASTJ
  7483 00001E6F E80006                          CALL	NEXTSEC
  7484 00001E72 72DF                            JC      SHORT SETFCBJ2
  7485 00001E74 C606[9703]01                    MOV     BYTE [TRANS],1      ; A transfer is taking place
  7486                                  ONSEC:
  7487 00001E79 8A16[9503]                      MOV     DL,[SECCLUSPOS]
  7488 00001E7D 8B0E[D103]                      MOV     CX,[SECCNT]
  7489 00001E81 8B1E[BD03]                      MOV     BX,[CLUSNUM]
  7490                                  RDLP:
  7491 00001E85 E81A06                          CALL	OPTIMIZE
  7492 00001E88 57                              PUSH    DI
  7493 00001E89 50                              PUSH    AX
  7494 00001E8A 53                              PUSH    BX
  7495 00001E8B 8E1E[E100]                      MOV     DS,[DMAADD+2]
  7496 00001E8F 52                              PUSH    DX
  7497 00001E90 51                              PUSH    CX
  7498 00001E91 E806FE                          CALL    DREAD
  7499 00001E94 5B                              POP     BX
  7500 00001E95 5A                              POP     DX
  7501 00001E96 01D3                            ADD     BX,DX           ; Upper bound of read
  7502 00001E98 268A4600                        MOV     AL,[ES:BP+0]
  7503 00001E9C E84B07                          CALL	SETVISIT
  7504                                  NXTBUF:                         ; Must see if one of these sectors is buffered
  7505 00001E9F C6450701                        MOV     BYTE [DI+7],1  ; Mark as visited
  7506 00001EA3 3A4504                          CMP     AL,[DI+4]
  7507 00001EA6 7541                            JNZ     SHORT DONXTBUF	; Not for this drive
  7508 00001EA8 395508                          CMP     [DI+8],DX
  7509 00001EAB 723C                            JC      SHORT DONXTBUF	; Below first sector
  7510 00001EAD 395D08                          CMP     [DI+8],BX
  7511 00001EB0 7337                            JNC     SHORT DONXTBUF	; Above last sector
  7512 00001EB2 807D0500                        CMP     BYTE [DI+5],0
  7513 00001EB6 742E                            JZ      SHORT CLBUFF	; Buffer is clean, so OK
  7514                                  ; A sector has been read in when a dirty copy of it is in a buffer
  7515                                  ; The buffered sector must now be read into the right place
  7516 00001EB8 58                              POP     AX              ; Recall transfer address
  7517 00001EB9 50                              PUSH    AX
  7518 00001EBA 57                              PUSH    DI              ; Save search environment
  7519 00001EBB 52                              PUSH    DX
  7520 00001EBC 2B5508                          SUB     DX,[DI+8] ; How far into transfer?
  7521 00001EBF F7DA                            NEG     DX
  7522 00001EC1 89FE                            MOV     SI,DI
  7523 00001EC3 89C7                            MOV     DI,AX
  7524 00001EC5 89D0                            MOV     AX,DX
  7525 00001EC7 268B4E02                        MOV     CX,[ES:BP+2]
  7526 00001ECB F7E1                            MUL     CX
  7527 00001ECD 01C7                            ADD     DI,AX           ; Put the buffer here
  7528 00001ECF 83C610                          ADD     SI,BUFINSIZ
  7529 00001ED2 D1E9                            SHR     CX,1
  7530 00001ED4 06                              PUSH    ES
  7531                                          ;MOV     ES,[DMAADD+2]
  7532 00001ED5 368E06[E100]                    MOV     ES,[SS:DMAADD+2] ; 15/03/2018
  7533 00001EDA F3A5                            REP     MOVSW
  7534 00001EDC 7301                            JNC     SHORT EVENMOV
  7535 00001EDE A4                              MOVSB
  7536                                  EVENMOV:
  7537 00001EDF 07                              POP     ES
  7538 00001EE0 5A                              POP     DX
  7539 00001EE1 5F                              POP     DI
  7540 00001EE2 268A4600                        MOV     AL,[ES:BP+0]
  7541                                  CLBUFF:
  7542 00001EE6 E82907                          CALL	SCANPLACE
  7543                                  DONXTBUF:
  7544 00001EE9 E81707                          CALL	SKIPVISIT
  7545 00001EEC 75B1                            JNZ     SHORT NXTBUF
  7546 00001EEE 16                              PUSH    SS
  7547 00001EEF 1F                              POP     DS
  7548 00001EF0 59                              POP     CX
  7549 00001EF1 59                              POP     CX
  7550 00001EF2 5B                              POP     BX
  7551 00001EF3 E30E                            JCXZ    RDLAST
  7552 00001EF5 81FBF80F                        CMP     BX,0FF8H
  7553 00001EF9 7320                            JAE     SHORT SETFCB
  7554 00001EFB B200                            MOV     DL,0
  7555 00001EFD FF06[BB03]                      INC     WORD [LASTPOS]	; We'll be using next cluster
  7556 00001F01 EB82                            JMP     SHORT RDLP
  7557                                  
  7558                                  RDLAST:
  7559 00001F03 A1[CF03]                        MOV     AX,[BYTCNT2]
  7560 00001F06 09C0                            OR      AX,AX
  7561 00001F08 7411                            JZ      SHORT SETFCB
  7562 00001F0A A3[CD03]                        MOV     [BYTCNT1],AX
  7563 00001F0D E86205                          CALL	NEXTSEC
  7564 00001F10 7209                            JC      SHORT SETFCB
  7565 00001F12 C706[C703]0000                  MOV     WORD [BYTSECPOS],0
  7566 00001F18 E8E304                          CALL	BUFRD
  7567                                  
  7568                                  SETFCB:
  7569 00001F1B C436[AF03]                      LES     SI,[THISFCB]
  7570 00001F1F A1[B303]                        MOV     AX,[NEXTADD]
  7571 00001F22 89C7                            MOV     DI,AX
  7572 00001F24 2B06[DF00]                      SUB     AX,[DMAADD]     ; Number of bytes transfered
  7573 00001F28 31D2                            XOR     DX,DX
  7574 00001F2A 268B4C0E                        MOV     CX,[ES:SI+0EH]
  7575 00001F2E F7F1                            DIV     CX              ; Number of records
  7576 00001F30 3B06[B903]                      CMP     AX,[RECCNT]     ; Check if all records transferred
  7577 00001F34 7422                            JZ	SHORT FULLREC
  7578 00001F36 C606[9603]01                    MOV     BYTE [DSKERR],1
  7579 00001F3B 09D2                            OR      DX,DX
  7580 00001F3D 7419                            JZ      SHORT FULLREC	; If remainder 0, then full record transfered
  7581 00001F3F C606[9603]03                    MOV     BYTE [DSKERR],3	; Flag partial last record
  7582 00001F44 29D1                            SUB     CX,DX           ; Bytes left in last record
  7583 00001F46 06                              PUSH    ES
  7584 00001F47 8E06[E100]                      MOV     ES,[DMAADD+2]
  7585 00001F4B 93                              XCHG    AX,BX           ; Save the record count temporarily
  7586 00001F4C 31C0                            XOR     AX,AX           ; Fill with zeros
  7587 00001F4E D1E9                            SHR     CX,1
  7588 00001F50 7301                            JNC     SHORT EVENFIL
  7589 00001F52 AA                              STOSB
  7590                                  EVENFIL:
  7591 00001F53 F3AB                            REP     STOSW
  7592 00001F55 93                              XCHG    AX,BX           ; Restore record count to AX
  7593 00001F56 07                              POP     ES
  7594 00001F57 40                              INC     AX              ; Add last (partial) record to total
  7595                                  FULLREC:
  7596 00001F58 89C1                            MOV     CX,AX
  7597 00001F5A 89F7                            MOV     DI,SI           ; ES:DI point to FCB
  7598                                  SETCLUS:
  7599 00001F5C 26F64518FF                      TEST    BYTE [ES:DI+18H],-1
  7600 00001F61 7814                            JS      SHORT ADDREC	; don't set clisters if device
  7601 00001F63 A1[BD03]                        MOV     AX,[CLUSNUM]
  7602 00001F66 2681651D00F0                    AND     WORD [ES:DI+1DH],0F000h 
  7603                                  				; fcb_lstclus is packed with dir clus
  7604 00001F6C 2609451D                        OR      [ES:DI+1DH],AX ; drop in the correct part of fcb_lstclus
  7605 00001F70 A1[BB03]                        MOV     AX,[LASTPOS]
  7606 00001F73 2689451B                        MOV     [ES:DI+1BH],AX
  7607                                  ADDREC:
  7608 00001F77 A1[B503]                        MOV     AX,[RECPOS]
  7609 00001F7A 8B16[B703]                      MOV     DX,[RECPOS+2]
  7610 00001F7E E307                            JCXZ    RET28           ; If no records read, don't change position
  7611 00001F80 49                              DEC     CX
  7612 00001F81 01C8                            ADD     AX,CX           ; Update current record position
  7613 00001F83 83D200                          ADC     DX,0
  7614 00001F86 41                              INC     CX
  7615                                  RET28:  
  7616 00001F87 C3                      	RETN
  7617                                  
  7618                                  ;SUBTTL DISKWRITE -- PERFORM USER DISK WRITE
  7619                                  
  7620                                  DISKWRITE:
  7621                                  
  7622                                  ; Inputs:
  7623                                  ;       Outputs of SETUP
  7624                                  ; Function:
  7625                                  ;       Perform disk write
  7626                                  ; Outputs:
  7627                                  ;       DX:AX = Position of last record written
  7628                                  ;       CX = No. of records written
  7629                                  ;       ES:DI point to FCB
  7630                                  ;       fcb_LSTCLUS, fcb_CLUSPOS fields in FCB set
  7631                                  
  7632 00001F88 80E33F                          AND     BL,3FH          ; Mark file as dirty
  7633 00001F8B 26885D18                        MOV     [ES:DI+18H],BL
  7634 00001F8F C42E[9A03]                      LES     BP,[THISDPB]
  7635 00001F93 E847FE                          CALL    BREAKDOWN
  7636 00001F96 A1[C903]                        MOV     AX,[BYTPOS]
  7637 00001F99 8B16[CB03]                      MOV     DX,[BYTPOS+2]
  7638 00001F9D E375                            JCXZ    WRTEOFJ
  7639 00001F9F 01C8                            ADD     AX,CX
  7640 00001FA1 83D200                          ADC     DX,0            ; AX:DX=last byte accessed
  7641 00001FA4 26F77602                        DIV     WORD [ES:BP+2] ; AX=last sector accessed
  7642 00001FA8 89C3                            MOV     BX,AX           ; Save last full sector
  7643 00001FAA 09D2                            OR      DX,DX
  7644 00001FAC 7501                            JNZ     SHORT CALCLUS
  7645 00001FAE 48                              DEC     AX              ; AX must be zero base indexed
  7646                                  CALCLUS:
  7647 00001FAF 268A4E05                        MOV     CL,[ES:BP+5]
  7648 00001FB3 D3E8                            SHR     AX,CL           ; Last cluster to be accessed
  7649 00001FB5 50                              PUSH    AX
  7650 00001FB6 52                              PUSH    DX              ; Save the size of the "tail"
  7651 00001FB7 06                              PUSH    ES
  7652 00001FB8 C43E[AF03]                      LES     DI,[THISFCB]
  7653 00001FBC 268B4510                        MOV     AX,[ES:DI+10H]
  7654 00001FC0 268B5512                        MOV     DX,[ES:DI+12H]
  7655 00001FC4 07                              POP     ES
  7656 00001FC5 26F77602                        DIV     WORD [ES:BP+2]
  7657 00001FC9 89C1                            MOV     CX,AX           ; Save last full sector of current file
  7658 00001FCB 09D2                            OR      DX,DX
  7659 00001FCD 7401                            JZ      SHORT NORNDUP
  7660 00001FCF 40                              INC     AX              ; Round up if any remainder
  7661                                  NORNDUP:
  7662 00001FD0 A3[C503]                        MOV     [VALSEC],AX     ; Number of sectors that have been written
  7663 00001FD3 31C0                            XOR     AX,AX
  7664 00001FD5 A3[D903]                        MOV     [GROWCNT],AX
  7665 00001FD8 A3[DB03]                        MOV     [GROWCNT+2],AX
  7666 00001FDB 58                              POP     AX
  7667 00001FDC 29CB                            SUB     BX,CX           ; Number of full sectors
  7668 00001FDE 7244                            JB      SHORT NOGROW
  7669 00001FE0 7435                            JZ      SHORT TESTTAIL
  7670 00001FE2 89D1                            MOV     CX,DX
  7671 00001FE4 93                              XCHG    AX,BX
  7672 00001FE5 26F76602                        MUL     WORD [ES:BP+2] ; Bytes of full sector growth
  7673 00001FE9 29C8                            SUB     AX,CX           ; Take off current "tail"
  7674 00001FEB 83DA00                          SBB     DX,0            ; 32-bit extension
  7675 00001FEE 01D8                            ADD     AX,BX           ; Add on new "tail"
  7676 00001FF0 83D200                          ADC     DX,0            ; ripple tim's head off
  7677 00001FF3 EB28                            JMP     SHORT SETGRW
  7678                                  
  7679                                  HAVSTART:
  7680 00001FF5 89C1                            MOV     CX,AX
  7681 00001FF7 E8C203                          CALL	SKPCLP
  7682                                          ;JCXZ    DOWRTJ
  7683 00001FFA E35C                            JCXZ	DOWRT ; 15/03/2018
  7684 00001FFC E82C05                  	CALL	ALLOCATE
  7685                                          ;JNC     SHORT DOWRTJ
  7686 00001FFF 7357                    	JNC	SHORT DOWRT ; 15/03/2018
  7687                                  WRTERR:
  7688 00002001 31C9                            XOR     CX,CX
  7689 00002003 C606[9603]01                    MOV     BYTE [DSKERR],1
  7690 00002008 A1[B503]                        MOV     AX,[RECPOS]
  7691 0000200B 8B16[B703]                      MOV     DX,[RECPOS+2]
  7692 0000200F C43E[AF03]                      LES     DI,[THISFCB]
  7693 00002013 C3                              RETN
  7694                                  
  7695                                  ;DOWRTJ: 
  7696                                  ;	JMP	SHORT DOWRT
  7697                                  
  7698                                  WRTEOFJ:
  7699 00002014 E9F300                          JMP	WRTEOF
  7700                                  
  7701                                  TESTTAIL:
  7702 00002017 29D0                            SUB     AX,DX
  7703 00002019 7609                            JBE     SHORT NOGROW
  7704 0000201B 31D2                            XOR     DX,DX
  7705                                  SETGRW:
  7706 0000201D A3[D903]                        MOV     [GROWCNT],AX
  7707 00002020 8916[DB03]                      MOV     [GROWCNT+2],DX
  7708                                  NOGROW:
  7709 00002024 58                              POP     AX
  7710 00002025 8B0E[BD03]                      MOV     CX,[CLUSNUM]    ; First cluster accessed
  7711 00002029 E86C03                          CALL	FNDCLUS
  7712 0000202C 891E[BD03]                      MOV     [CLUSNUM],BX
  7713 00002030 8916[BB03]                      MOV     [LASTPOS],DX
  7714 00002034 29D0                            SUB     AX,DX           ; Last cluster minus current cluster
  7715 00002036 7420                            JZ      SHORT DOWRT	; If we have last clus, we must have first
  7716 00002038 E3BB                            JCXZ    HAVSTART        ; See if no more data
  7717 0000203A 51                              PUSH    CX              ; No. of clusters short of first
  7718 0000203B 89C1                            MOV     CX,AX
  7719 0000203D E8EB04                          CALL	ALLOCATE
  7720 00002040 58                              POP     AX
  7721 00002041 72BE                            JC      SHORT WRTERR
  7722 00002043 89C1                            MOV     CX,AX
  7723 00002045 8B16[BB03]                      MOV     DX,[LASTPOS]
  7724 00002049 42                              INC     DX
  7725 0000204A 49                              DEC     CX
  7726 0000204B 7403                            JZ      SHORT NOSKIP
  7727 0000204D E86C03                          CALL	SKPCLP
  7728                                  NOSKIP:
  7729 00002050 891E[BD03]                      MOV     [CLUSNUM],BX
  7730 00002054 8916[BB03]                      MOV     [LASTPOS],DX
  7731                                  DOWRT:
  7732 00002058 833E[CD03]00                    CMP     WORD [BYTCNT1],0
  7733 0000205D 7407                            JZ      SHORT WRTMID
  7734 0000205F 8B1E[BD03]                      MOV     BX,[CLUSNUM]
  7735 00002063 E8CA03                          CALL	BUFWRT
  7736                                  WRTMID:
  7737 00002066 A1[D103]                        MOV     AX,[SECCNT]
  7738 00002069 09C0                            OR      AX,AX
  7739 0000206B 7465                            JZ      SHORT WRTLAST
  7740 0000206D 0106[C303]                      ADD     [SECPOS],AX
  7741 00002071 E8FE03                          CALL	NEXTSEC
  7742 00002074 C606[9703]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
  7743 00002079 8A16[9503]                      MOV     DL,[SECCLUSPOS]
  7744 0000207D 8B1E[BD03]                      MOV     BX,[CLUSNUM]
  7745 00002081 8B0E[D103]                      MOV     CX,[SECCNT]
  7746                                  WRTLP:
  7747 00002085 E81A04                          CALL	OPTIMIZE
  7748 00002088 57                              PUSH    DI
  7749 00002089 50                              PUSH    AX
  7750 0000208A 52                              PUSH    DX
  7751 0000208B 53                              PUSH    BX
  7752 0000208C 268A4600                        MOV     AL,[ES:BP+0]
  7753 00002090 89CB                            MOV     BX,CX
  7754 00002092 01D3                            ADD     BX,DX           ; Upper bound of write
  7755 00002094 E85305                          CALL	SETVISIT
  7756                                  NEXTBUFF:                       ; Search for buffers
  7757 00002097 C6450701                        MOV     BYTE [DI+7],1 ; Mark as visited
  7758 0000209B 3A4504                          CMP     AL,[DI+4]
  7759 0000209E 7512                            JNZ     SHORT DONEXTBUFF  ; Not for this drive
  7760 000020A0 395508                          CMP     [DI+8],DX
  7761 000020A3 720D                            JC      SHORT DONEXTBUFF  ; Buffer is not in range of write
  7762 000020A5 395D08                          CMP     [DI+8],BX
  7763 000020A8 7308                            JNC     SHORT DONEXTBUFF  ; Buffer is not in range of write
  7764 000020AA C74504FF00                      MOV     WORD [DI+4],00FFH
  7765                                  				; Free the buffer, it is being over written
  7766 000020AF E86005                          CALL	SCANPLACE
  7767                                  DONEXTBUFF:
  7768 000020B2 E84E05                          CALL	SKIPVISIT
  7769 000020B5 75E0                            JNZ     SHORT NEXTBUFF
  7770 000020B7 5B                              POP     BX
  7771 000020B8 5A                              POP     DX
  7772                                          ;MOV     DS,[DMAADD+2]
  7773 000020B9 368E1E[E100]                    MOV     DS,[SS:DMAADD+2] ; 15/03/2018
  7774 000020BE E8FEFB                          CALL    DWRITE
  7775 000020C1 59                              POP     CX
  7776 000020C2 5B                              POP     BX
  7777 000020C3 16                              PUSH    SS
  7778 000020C4 1F                              POP     DS
  7779 000020C5 E30B                            JCXZ    WRTLAST
  7780 000020C7 B200                            MOV     DL,0
  7781 000020C9 FF06[BB03]                      INC     WORD [LASTPOS]	; We'll be using next cluster
  7782 000020CD EBB6                            JMP     SHORT WRTLP
  7783                                  
  7784                                  WRTERRJ: 
  7785 000020CF E92FFF                  	JMP     WRTERR
  7786                                  
  7787                                  WRTLAST:
  7788 000020D2 A1[CF03]                        MOV     AX,[BYTCNT2]
  7789 000020D5 09C0                            OR      AX,AX
  7790 000020D7 740F                            JZ      SHORT FINWRT
  7791 000020D9 A3[CD03]                        MOV     [BYTCNT1],AX
  7792 000020DC E89303                          CALL	NEXTSEC
  7793 000020DF C706[C703]0000                  MOV     WORD [BYTSECPOS],0
  7794 000020E5 E84803                          CALL	BUFWRT
  7795                                  FINWRT:
  7796 000020E8 C43E[AF03]                      LES     DI,[THISFCB]
  7797 000020EC A1[D903]                        MOV     AX,[GROWCNT]
  7798 000020EF 8B0E[DB03]                      MOV     CX,[GROWCNT+2]
  7799 000020F3 09C0                            OR      AX,AX
  7800 000020F5 7504                            JNZ     SHORT UPDATE_size
  7801 000020F7 09C9                            OR      CX,CX
  7802 000020F9 7408                            JZ      SHORT SAMSIZ
  7803                                  UPDATE_size:
  7804 000020FB 26014510                        ADD     [ES:DI+10H],AX
  7805 000020FF 26114D12                        ADC     [ES:DI+12H],CX
  7806                                  SAMSIZ:
  7807 00002103 8B0E[B903]                      MOV     CX,[RECCNT]
  7808 00002107 E952FE                          JMP     SETCLUS
  7809                                  
  7810                                  WRTEOF:
  7811 0000210A 89C1                            MOV     CX,AX
  7812 0000210C 09D1                            OR      CX,DX
  7813 0000210E 743B                            JZ      SHORT KILLFIL
  7814 00002110 83E801                          SUB     AX,1
  7815 00002113 83DA00                          SBB     DX,0
  7816 00002116 26F77602                        DIV     WORD [ES:BP+2]
  7817 0000211A 268A4E05                        MOV     CL,[ES:BP+5]
  7818 0000211E D3E8                            SHR     AX,CL
  7819 00002120 89C1                            MOV     CX,AX
  7820 00002122 E87302                          CALL	FNDCLUS
  7821 00002125 E31C                            JCXZ    RELFILE
  7822 00002127 E80104                          CALL	ALLOCATE
  7823 0000212A 72A3                            JC      SHORT WRTERRJ
  7824                                  UPDATE:
  7825 0000212C C43E[AF03]                      LES     DI,[THISFCB]
  7826 00002130 A1[C903]                        MOV     AX,[BYTPOS]
  7827 00002133 26894510                        MOV     [ES:DI+10H],AX
  7828 00002137 A1[CB03]                        MOV     AX,[BYTPOS+2]
  7829 0000213A 26894512                        MOV     [ES:DI+12H],AX
  7830 0000213E 31C9                            XOR     CX,CX
  7831 00002140 E934FE                          JMP     ADDREC
  7832                                  
  7833                                  RELFILE:
  7834 00002143 BAFF0F                          MOV     DX,0FFFH
  7835 00002146 E88204                          CALL	RELBLKS
  7836 00002149 EBE1                            JMP     SHORT UPDATE
  7837                                  
  7838                                  KILLFIL:
  7839 0000214B 31DB                            XOR     BX,BX
  7840 0000214D 06                              PUSH    ES
  7841 0000214E C43E[AF03]                      LES     DI,[THISFCB]
  7842 00002152 26895D1B                        MOV     [ES:DI+1BH],BX
  7843 00002156 26875D19                        XCHG    BX,[ES:DI+19H]
  7844 0000215A 2681651D00F0                    AND     WORD [ES:DI+1DH],0F000H
  7845 00002160 07                              POP     ES
  7846 00002161 09DB                            OR      BX,BX
  7847 00002163 74C7                            JZ      SHORT UPDATE
  7848 00002165 E86104                          CALL	RELEASE
  7849 00002168 EBC2                            JMP     SHORT UPDATE
  7850                                  
  7851                                  ;CODE    ENDS
  7852                                  ;    END
  7853                                  
  7854                                  ;============================================================================
  7855                                  ; FAT.ASM
  7856                                  ;============================================================================
  7857                                  ; Retro	DOS v2.0 - 13/03/2018
  7858                                  
  7859                                  ;
  7860                                  ; FAT operations for MSDOS
  7861                                  ;
  7862                                  
  7863                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  7864                                  ;        ASSUME  SS:DOSGROUP,CS:DOSGROUP
  7865                                  
  7866                                  ;TITLE	FAT - FAT maintenance routines
  7867                                  ;NAME	FAT
  7868                                  
  7869                                  ;SUBTTL UNPACK -- UNPACK FAT ENTRIES
  7870                                  
  7871                                  UNPACK:
  7872                                  
  7873                                  ; Inputs:
  7874                                  ;       BX = Cluster number
  7875                                  ;       ES:BP = Base of drive parameters
  7876                                  ; Outputs:
  7877                                  ;       DI = Contents of FAT for given cluster
  7878                                  ;       Zero set means DI=0 (free cluster)
  7879                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
  7880                                  
  7881 0000216A 263B5E0D                        CMP     BX,[ES:BP+0DH]
  7882 0000216E 7715                            JA      SHORT HURTFAT
  7883 00002170 E88100                          CALL    MAPCLUSTER
  7884 00002173 8B3D                            MOV     DI,[DI]
  7885 00002175 7307                            JNC     SHORT HAVCLUS
  7886 00002177 51                              PUSH    CX
  7887 00002178 B104                            MOV     CL,4
  7888 0000217A D3EF                            SHR     DI,CL
  7889 0000217C 59                              POP     CX
  7890 0000217D F9                              STC
  7891                                  HAVCLUS:
  7892 0000217E 81E7FF0F                        AND     DI,0FFFH
  7893 00002182 16                              PUSH    SS
  7894 00002183 1F                              POP     DS
  7895 00002184 C3                              RETN
  7896                                  
  7897                                  HURTFAT:
  7898 00002185 50                              PUSH    AX
  7899 00002186 B480                            MOV     AH,80H          ; Signal Bad FAT to INT int_fatal_abort handler
  7900 00002188 BFFF0F                          MOV     DI,0FFFH        ; In case INT int_fatal_abort returns (it shouldn't)
  7901 0000218B E8C40B                          CALL	FATAL
  7902 0000218E 58                              POP     AX              ; Try to ignore bad FAT
  7903                                  ;UNPACK_RETN:
  7904 0000218F C3                              RETN
  7905                                  
  7906                                  ;SUBTTL PACK -- PACK FAT ENTRIES
  7907                                  
  7908                                  PACK:
  7909                                  
  7910                                  ; Inputs:
  7911                                  ;       BX = Cluster number
  7912                                  ;       DX = Data
  7913                                  ;       ES:BP = Pointer to drive DPB
  7914                                  ; Outputs:
  7915                                  ;       The data is stored in the FAT at the given cluster.
  7916                                  ;       SI,DX,DI all destroyed
  7917                                  ;       No other registers affected
  7918                                  
  7919 00002190 E86100                          CALL    MAPCLUSTER
  7920 00002193 8B35                            MOV     SI,[DI]
  7921 00002195 730B                            JNC     SHORT ALIGNED
  7922 00002197 51                              PUSH    CX
  7923 00002198 B104                            MOV     CL,4
  7924 0000219A D3E2                            SHL     DX,CL
  7925 0000219C 59                              POP     CX
  7926 0000219D 83E60F                          AND     SI,0FH
  7927 000021A0 EB04                            JMP     SHORT PACKIN
  7928                                  ALIGNED:
  7929 000021A2 81E600F0                        AND     SI,0F000H
  7930                                  PACKIN:
  7931 000021A6 09D6                            OR      SI,DX
  7932 000021A8 8935                            MOV     [DI],SI
  7933                                          ;LDS     SI,[CURBUF]
  7934 000021AA 36C536[DD03]                    LDS	SI, [SS:CURBUF]
  7935 000021AF C6440501                	MOV     BYTE [SI+5],1
  7936                                          ;CMP     BYTE [CLUSSPLIT],0
  7937 000021B3 36803E[A103]00          	CMP     BYTE [SS:CLUSSPLIT],0
  7938 000021B9 16                              PUSH    SS
  7939 000021BA 1F                              POP     DS
  7940                                  	;retz
  7941                                  	;JZ	SORT UNPACK_RETN
  7942 000021BB 7436                    	JZ	SHORT PACK_RETN
  7943 000021BD 50                              PUSH    AX
  7944 000021BE 53                              PUSH    BX
  7945 000021BF 51                              PUSH    CX
  7946 000021C0 A1[A303]                        MOV     AX,[CLUSSAVE]
  7947 000021C3 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  7948 000021C7 83C610                          ADD     SI,BUFINSIZ
  7949 000021CA 8824                            MOV     [SI],AH
  7950 000021CC 16                              PUSH    SS
  7951 000021CD 1F                              POP     DS
  7952 000021CE 50                              PUSH    AX
  7953 000021CF 8B16[A503]                      MOV     DX,[CLUSSEC]
  7954 000021D3 BE0100                          MOV     SI,1
  7955 000021D6 30C0                            XOR     AL,AL
  7956                                          ;invoke  GETBUFFRB
  7957 000021D8 E8E604                          CALL	GETBUFFRB
  7958 000021DB C53E[DD03]              	LDS     DI,[CURBUF]
  7959 000021DF C6450501                        MOV     BYTE [DI+5],1
  7960 000021E3 83C710                          ADD     DI,BUFINSIZ
  7961 000021E6 4F                              DEC     DI
  7962 000021E7 26037E02                        ADD     DI,[ES:BP+2]
  7963 000021EB 58                              POP     AX
  7964 000021EC 8805                            MOV     [DI],AL
  7965 000021EE 16                              PUSH    SS
  7966 000021EF 1F                              POP     DS
  7967 000021F0 59                              POP     CX
  7968 000021F1 5B                              POP     BX
  7969 000021F2 58                              POP     AX
  7970                                  PACK_RETN:
  7971 000021F3 C3                              RETN
  7972                                  
  7973                                  ;SUBTTL MAPCLUSTER - BUFFER A FAT SECTOR
  7974                                  
  7975                                  MAPCLUSTER:
  7976                                  
  7977                                  ; Inputs:
  7978                                  ;       ES:BP Points to DPB
  7979                                  ;       BX Is cluster number
  7980                                  ; Function:
  7981                                  ;       Get a pointer to the cluster
  7982                                  ; Outputs:
  7983                                  ;       DS:DI Points to contents of FAT for given cluster
  7984                                  ;       DS:SI Points to start of buffer
  7985                                  ;       Carry set if cluster data is in high 12 bits of word
  7986                                  ; No other registers effected
  7987                                  
  7988 000021F4 C606[A103]00                    MOV     BYTE [CLUSSPLIT],0
  7989 000021F9 50                              PUSH    AX
  7990 000021FA 53                              PUSH    BX
  7991 000021FB 51                              PUSH    CX
  7992 000021FC 52                              PUSH    DX
  7993 000021FD 89D8                            MOV     AX,BX
  7994 000021FF D1E8                            SHR     AX,1
  7995 00002201 01D8                            ADD     AX,BX
  7996 00002203 31D2                            XOR     DX,DX
  7997 00002205 268B4E02                        MOV     CX,[ES:BP+2]
  7998 00002209 F7F1                            DIV     CX	; AX is FAT sector # DX is sector index
  7999 0000220B 26034606                        ADD     AX,[ES:BP+6]
  8000 0000220F 49                              DEC     CX
  8001 00002210 50                              PUSH    AX
  8002 00002211 52                              PUSH    DX
  8003 00002212 51                              PUSH    CX
  8004 00002213 89C2                            MOV     DX,AX
  8005 00002215 30C0                            XOR     AL,AL
  8006 00002217 BE0100                          MOV     SI,1
  8007 0000221A E8A404                          CALL	GETBUFFRB
  8008 0000221D C536[DD03]                      LDS     SI,[CURBUF]
  8009 00002221 8D7C10                          LEA     DI,[SI+10H]
  8010 00002224 59                              POP     CX
  8011 00002225 58                              POP     AX
  8012 00002226 5A                              POP     DX
  8013 00002227 01C7                            ADD     DI,AX
  8014 00002229 39C8                            CMP     AX,CX
  8015 0000222B 7529                            JNZ     SHORT MAPRET
  8016 0000222D 8A05                            MOV     AL,[DI]
  8017 0000222F 16                              PUSH    SS
  8018 00002230 1F                              POP     DS
  8019 00002231 FE06[A103]                      INC     BYTE [CLUSSPLIT]
  8020 00002235 A2[A303]                        MOV     [CLUSSAVE],AL
  8021 00002238 8916[A503]                      MOV     [CLUSSEC],DX
  8022 0000223C 42                              INC     DX
  8023 0000223D 30C0                            XOR     AL,AL
  8024 0000223F BE0100                          MOV     SI,1
  8025 00002242 E87C04                  	CALL	GETBUFFRB
  8026 00002245 C536[DD03]                      LDS     SI,[CURBUF]
  8027 00002249 8D7C10                          LEA     DI,[SI+10H]
  8028 0000224C 8A05                            MOV     AL,[DI]
  8029 0000224E 16                              PUSH    SS
  8030 0000224F 1F                              POP     DS
  8031 00002250 A2[A403]                        MOV     [CLUSSAVE+1],AL
  8032 00002253 BF[A303]                        MOV     DI,CLUSSAVE
  8033                                  MAPRET:
  8034 00002256 5A                              POP     DX
  8035 00002257 59                              POP     CX
  8036 00002258 5B                              POP     BX
  8037 00002259 89D8                            MOV     AX,BX
  8038 0000225B D1E8                            SHR     AX,1
  8039 0000225D 58                              POP     AX
  8040 0000225E C3                      	RETN
  8041                                  
  8042                                  ;SUBTTL FATREAD -- CHECK DRIVE GET FAT
  8043                                  
  8044                                  FAT_operation:
  8045                                  
  8046                                  FATERR:
  8047 0000225F 81E7FF00                        AND     DI,STECODE      ; Put error code in DI
  8048 00002263 B402                            MOV     AH,2            ; While trying to read FAT
  8049 00002265 A0[9903]                        MOV     AL,[THISDRV]    ; Tell which drive
  8050 00002268 E8EB0A                  	CALL	FATAL1
  8051                                  
  8052                                  FATREAD:
  8053                                  
  8054                                  ; Function:
  8055                                  ;       If disk may have been changed, FAT is read in and buffers are
  8056                                  ;       flagged invalid. If not, no action is taken.
  8057                                  ; Outputs:
  8058                                  ;       ES:BP = Base of drive parameters
  8059                                  ; All other registers destroyed
  8060                                  
  8061 0000226B A0[9903]                        MOV     AL,[THISDRV]
  8062 0000226E E882F1                  	CALL	GETBP
  8063 00002271 B00F                            MOV     AL,DMEDHL
  8064 00002273 268A6601                        MOV     AH,[ES:BP+1]
  8065 00002277 A3[2D01]                        MOV     [DEVCALL],AX
  8066 0000227A C606[2F01]01                    MOV     BYTE [DEVCALL_REQFUNC],DEVMDCH
  8067 0000227F C706[3001]0000                  MOV     WORD [DEVCALL_REQSTAT],0
  8068 00002285 268A4616                        MOV     AL,[ES:BP+16H]
  8069 00002289 A2[3A01]                        MOV     [CALLMED],AL
  8070 0000228C 06                              PUSH    ES
  8071 0000228D 1E                              PUSH    DS
  8072 0000228E BB[2D01]                        MOV     BX,DEVCALL
  8073 00002291 26C57612                        LDS     SI,[ES:BP+12H] ; DS:SI Points to device header
  8074 00002295 07                              POP     ES                      ; ES:BX Points to call header
  8075 00002296 E8F6F0                  	CALL	DEVIOCALL2
  8076 00002299 16                              PUSH    SS
  8077 0000229A 1F                              POP     DS
  8078 0000229B 07                              POP     ES                      ; Restore ES:BP
  8079                                  
  8080 0000229C 8B3E[3001]                      MOV     DI,[DEVCALL_REQSTAT]
  8081 000022A0 F7C70080                        TEST    DI,STERR
  8082 000022A4 75B9                            JNZ     SHORT FATERR
  8083                                  
  8084 000022A6 30E4                            XOR     AH,AH
  8085 000022A8 26866617                        XCHG    AH,[ES:BP+17H] ; Reset dpb_first_access
  8086 000022AC A0[9903]                        MOV     AL,[THISDRV]	; Use physical unit number
  8087 000022AF 0A26[3B01]                      OR      AH,[CALLRBYT]
  8088 000022B3 7815                            JS      SHORT NEWDSK	; new disk or first access?
  8089 000022B5 7401                            JZ      SHORT CHKBUFFDIRT
  8090                                  FATREAD_RETN1:
  8091 000022B7 C3                              RETN			; If Media not changed
  8092                                  CHKBUFFDIRT:
  8093 000022B8 FEC4                            INC     AH              ; Here if ?Media..Check buffers
  8094 000022BA C53E[0301]                      LDS     DI,[BUFFHEAD]
  8095                                  NBUFFER:                        ; Look for dirty buffers
  8096 000022BE 3B4504                          CMP     AX,[DI+4]
  8097                                          ;retz			; There is a dirty buffer, assume Media OK
  8098 000022C1 74F4                            JZ	SHORT FATREAD_RETN1
  8099 000022C3 C53D                    	LDS     DI,[DI]
  8100 000022C5 83FFFF                          CMP     DI,-1
  8101 000022C8 75F4                            JNZ     SHORT NBUFFER
  8102                                  ; If no dirty buffers, assume Media changed
  8103                                  NEWDSK:
  8104 000022CA E81D03                          CALL	SETVISIT
  8105                                  NXBUFFER:
  8106 000022CD C6450701                        MOV     BYTE [DI+7],1
  8107 000022D1 3A4504                          CMP     AL,[DI+4]	; For this drive?
  8108 000022D4 7508                            JNZ     SHORT SKPBUFF
  8109 000022D6 C74504FF00                      MOV     WORD [DI+4],00FFH  ; Free up buffer
  8110 000022DB E83403                  	CALL	SCANPLACE
  8111                                  SKPBUFF:
  8112 000022DE E82203                          CALL	SKIPVISIT
  8113 000022E1 75EA                            JNZ     SHORT NXBUFFER
  8114 000022E3 26C57E12                        LDS     DI,[ES:BP+12H]
  8115 000022E7 F745040020                      TEST    WORD [DI+4],ISFATBYDEV
  8116 000022EC 750E                            JNZ     SHORT GETFREEBUF
  8117                                          ;context DS
  8118 000022EE 16                              PUSH	SS
  8119 000022EF 1F                      	POP	DS
  8120 000022F0 BB0200                  	MOV     BX,2
  8121 000022F3 E874FE                          CALL    UNPACK                  ; Read the first FAT sector into  CURBUF
  8122 000022F6 C53E[DD03]                      LDS     DI,[CURBUF]
  8123 000022FA EB0C                            JMP     SHORT GOTGETBUF
  8124                                  GETFREEBUF:
  8125 000022FC 06                              PUSH    ES                      ; Get a free buffer for BIOS to use
  8126 000022FD 55                              PUSH    BP
  8127                                          ;LDS     DI,[BUFFHEAD]
  8128 000022FE 36C53E[0301]                    LDS	DI,[SS:BUFFHEAD]
  8129 00002303 E89604                  	CALL	BUFWRITE
  8130 00002306 5D                              POP     BP
  8131 00002307 07                              POP     ES
  8132                                  GOTGETBUF:
  8133 00002308 83C710                          ADD     DI,BUFINSIZ
  8134                                          ;MOV     [CALLXAD+2],DS
  8135 0000230B 368C1E[3D01]                    MOV     [SS:CALLXAD+2],DS
  8136 00002310 16                              PUSH    SS
  8137 00002311 1F                              POP     DS
  8138 00002312 893E[3B01]                      MOV     [CALLXAD],DI
  8139 00002316 B016                            MOV     AL,DBPBHL
  8140 00002318 268A6601                        MOV     AH,[ES:BP+1]
  8141 0000231C A3[2D01]                        MOV     [DEVCALL],AX
  8142 0000231F C606[2F01]02                    MOV     BYTE [DEVCALL_REQFUNC],DEVBPB
  8143 00002324 C706[3001]0000                  MOV     WORD [DEVCALL_REQSTAT],0
  8144 0000232A 268A4616                        MOV     AL,[ES:BP+16H]
  8145 0000232E A2[3A01]                        MOV     [CALLMED],AL
  8146 00002331 06                              PUSH    ES
  8147 00002332 1E                              PUSH    DS
  8148 00002333 26FF7614                        PUSH    WORD [ES:BP+14H]
  8149 00002337 26FF7612                        PUSH    WORD [ES:BP+12H]
  8150 0000233B BB[2D01]                        MOV     BX,DEVCALL
  8151 0000233E 5E                              POP     SI
  8152 0000233F 1F                              POP     DS                      ; DS:SI Points to device header
  8153 00002340 07                              POP     ES                      ; ES:BX Points to call header
  8154 00002341 E84BF0                  	CALL	DEVIOCALL2
  8155 00002344 07                              POP     ES                      ; Restore ES:BP
  8156 00002345 16                              PUSH    SS
  8157 00002346 1F                              POP     DS
  8158 00002347 8B3E[3001]                      MOV     DI,[DEVCALL_REQSTAT]
  8159 0000234B F7C70080                        TEST    DI,STERR
  8160 0000234F 7530                            JNZ     SHORT FATERRJ
  8161 00002351 268A4616                        MOV     AL,[ES:BP+16H]
  8162 00002355 C536[3F01]                      LDS     SI,[CALLBPB]
  8163 00002359 3A440A                          CMP     AL,[SI+0AH]
  8164 0000235C 7413                            JZ      SHORT DPBOK
  8165 0000235E E879EA                  	CALL	_$SETDPB
  8166                                          ;LDS     DI,[CALLXAD]            ; Get back buffer pointer
  8167 00002361 36C53E[3B01]                    LDS     DI,[SS:CALLXAD] ; 15/03/2018
  8168 00002366 268A4608                	MOV     AL,[ES:BP+8]
  8169 0000236A 268A660F                        MOV     AH,[ES:BP+0FH]
  8170 0000236E 8945FA                          MOV     [DI-6],AX 		;Correct buffer info
  8171                                  DPBOK:
  8172                                          ;context ds
  8173 00002371 16                              PUSH	SS
  8174 00002372 1F                      	POP	DS
  8175 00002373 B8FFFF                  	MOV     AX,-1
  8176 00002376 2685461C                        TEST    [ES:BP+1CH],AX
  8177                                          ;retz				; If root, leave as root
  8178 0000237A 7404                    	JZ	SHORT FATREAD_RETN2
  8179 0000237C 2689461C                        MOV     [ES:BP+1CH],AX ; Path may be bad, mark invalid
  8180                                  FATREAD_RETN2:
  8181 00002380 C3                      	RETN
  8182                                  
  8183                                  FATERRJ: 
  8184 00002381 E9DBFE                  	JMP	FATERR
  8185                                  
  8186                                  ;CODE	ENDS
  8187                                  ;   END
  8188                                  
  8189                                  ;============================================================================
  8190                                  ; ROM.ASM
  8191                                  ;============================================================================
  8192                                  ; Retro DOS v2.0 - 12/03/2018
  8193                                  
  8194                                  ; Disk utilities of MSDOS
  8195                                  ;
  8196                                  
  8197                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  8198                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
  8199                                  
  8200                                  ;TITLE   ROM - miscellaneous routines
  8201                                  ;NAME    ROM
  8202                                  
  8203                                  GET_random_record:
  8204                                  GETRRPOS1:
  8205 00002384 B90100                          MOV     CX,1
  8206                                  GETRRPOS:
  8207 00002387 89D7                            MOV     DI,DX
  8208 00002389 803DFF                          CMP     BYTE [DI],-1
  8209 0000238C 7503                            JNZ     short NORMFCB1
  8210 0000238E 83C707                          ADD     DI,7
  8211                                  NORMFCB1:
  8212 00002391 8B4521                          MOV     AX,[DI+21H]
  8213 00002394 8B5523                          MOV     DX,[DI+23H]
  8214 00002397 C3                      	RETN
  8215                                  
  8216                                  ;SUBTTL FNDCLUS -- Skip over allocation units
  8217                                  ;PAGE
  8218                                  
  8219                                  FNDCLUS:
  8220                                  
  8221                                  ; Inputs:
  8222                                  ;       CX = No. of clusters to skip
  8223                                  ;       ES:BP = Base of drive parameters
  8224                                  ;       [THISFCB] point to FCB
  8225                                  ; Outputs:
  8226                                  ;       BX = Last cluster skipped to
  8227                                  ;       CX = No. of clusters remaining (0 unless EOF)
  8228                                  ;       DX = Position of last cluster
  8229                                  ; DI destroyed. No other registers affected.
  8230                                  
  8231 00002398 06                              PUSH    ES
  8232 00002399 C43E[AF03]                      LES     DI,[THISFCB]
  8233 0000239D 268B5D1D                        MOV     BX,[ES:DI+1DH]  
  8234                                  				; fcb_lstclus is packed with dir clus
  8235 000023A1 81E3FF0F                        AND     BX,0FFFh	; get rid of dir nibble
  8236 000023A5 268B551B                        MOV     DX,[ES:DI+1BH]
  8237 000023A9 09DB                            OR      BX,BX
  8238 000023AB 741E                            JZ      SHORT NOCLUS
  8239 000023AD 29D1                            SUB     CX,DX
  8240 000023AF 7308                            JNB     SHORT FINDIT
  8241 000023B1 01D1                            ADD     CX,DX
  8242 000023B3 31D2                            XOR     DX,DX
  8243 000023B5 268B5D19                        MOV     BX,[ES:DI+19H]
  8244                                  FINDIT:
  8245 000023B9 07                              POP     ES
  8246 000023BA E30E                            JCXZ    RET10
  8247                                  SKPCLP:
  8248 000023BC E8ABFD                  	CALL	UNPACK
  8249 000023BF 81FFF80F                        CMP     DI,0FF8H
  8250 000023C3 7305                            JAE     SHORT RET10
  8251 000023C5 87DF                            XCHG    BX,DI
  8252 000023C7 42                              INC     DX
  8253 000023C8 E2F2                            LOOP    SKPCLP
  8254                                  RET10:  
  8255 000023CA C3                      	RETN
  8256                                  
  8257                                  NOCLUS:
  8258 000023CB 07                              POP     ES
  8259 000023CC 41                              INC     CX
  8260 000023CD 4A                              DEC     DX
  8261 000023CE C3                      	RETN
  8262                                  
  8263                                  ;SUBTTL BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER
  8264                                  ;PAGE
  8265                                  
  8266                                  BUFSEC:
  8267                                  
  8268                                  ; Inputs:
  8269                                  ;       AH = priority of buffer
  8270                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
  8271                                  ;       ES:BP = Base of drive parameters
  8272                                  ;       [CLUSNUM] = Physical cluster number
  8273                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
  8274                                  ;       [BYTCNT1] = Size of transfer
  8275                                  ; Function:
  8276                                  ;       Insure specified sector is in buffer, flushing buffer before
  8277                                  ;       read if necessary.
  8278                                  ; Outputs:
  8279                                  ;       ES:DI = Pointer to buffer
  8280                                  ;       SI = Pointer to transfer address
  8281                                  ;       CX = Number of bytes
  8282                                  ;       [NEXTADD] updated
  8283                                  ;       [TRANS] set to indicate a transfer will occur
  8284                                  
  8285 000023CF 8B16[BD03]                      MOV     DX,[CLUSNUM]
  8286 000023D3 8A1E[9503]                      MOV     BL,[SECCLUSPOS]
  8287 000023D7 E82001                          CALL    FIGREC
  8288 000023DA E8E202                  	CALL	GETBUFFR
  8289 000023DD C606[9703]01                    MOV     BYTE [TRANS],1		; A transfer is taking place
  8290 000023E2 8B36[B303]                      MOV     SI,[NEXTADD]
  8291 000023E6 89F7                            MOV     DI,SI
  8292 000023E8 8B0E[CD03]                      MOV     CX,[BYTCNT1]
  8293 000023EC 01CF                            ADD     DI,CX
  8294 000023EE 893E[B303]                      MOV     [NEXTADD],DI
  8295 000023F2 C43E[DD03]                      LES     DI,[CURBUF]
  8296 000023F6 83C710                          ADD     DI,BUFINSIZ             ; Point to buffer
  8297 000023F9 033E[C703]                      ADD     DI,[BYTSECPOS]
  8298 000023FD C3                      	RETN
  8299                                  
  8300                                  ;SUBTTL BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE
  8301                                  ;PAGE
  8302                                  
  8303                                  BUFRD:
  8304                                  
  8305                                  ; Do a partial sector read via one of the system buffers
  8306                                  ; ES:BP Points to DPB
  8307                                  
  8308 000023FE 06                              PUSH    ES
  8309                                  	;MOV	AX,LBRPRI SHL 8		; Assume last byte read
  8310 000023FF B80002                  	MOV	AX,LBRPRI*256
  8311 00002402 E8CAFF                          CALL    BUFSEC
  8312 00002405 8CC3                            MOV     BX,ES
  8313 00002407 8E06[E100]                      MOV     ES,[DMAADD+2]
  8314 0000240B 8EDB                            MOV     DS,BX
  8315 0000240D 87FE                            XCHG    DI,SI
  8316 0000240F D1E9                            SHR     CX,1
  8317 00002411 7301                            JNC     SHORT EVENRD
  8318 00002413 A4                              MOVSB
  8319                                  EVENRD:
  8320 00002414 F3A5                            REP     MOVSW
  8321 00002416 07                              POP     ES
  8322                                          ;LDS     DI,[CURBUF]
  8323 00002417 36C53E[DD03]                    LDS     DI,[SS:CURBUF] ; 15/03/2018
  8324 0000241C 8D5D10                          LEA     BX,[DI+10H]
  8325 0000241F 29DE                            SUB     SI,BX                   ; Position in buffer
  8326 00002421 E8FC01                          CALL	PLACEBUF
  8327 00002424 263B7602                        CMP     SI,[ES:BP+2]
  8328 00002428 7203                            JB      SHORT RBUFPLACED
  8329 0000242A E84E02                          CALL	PLACEHEAD
  8330                                  RBUFPLACED:
  8331 0000242D 16                              PUSH    SS
  8332 0000242E 1F                              POP     DS
  8333 0000242F C3                      	RETN
  8334                                  
  8335                                  BUFWRT:
  8336                                  
  8337                                  ; Do a partial sector write via one of the system buffers
  8338                                  ; ES:BP Points to DPB
  8339                                  
  8340 00002430 A1[C303]                        MOV     AX,[SECPOS]
  8341 00002433 40                              INC     AX              ; Set for next sector
  8342 00002434 A3[C303]                        MOV     [SECPOS],AX
  8343 00002437 3B06[C503]                      CMP     AX,[VALSEC]     ; Has sector been written before?
  8344 0000243B B001                            MOV     AL,1
  8345 0000243D 7702                            JA      SHORT NOREAD	; Skip preread if SECPOS>VALSEC
  8346 0000243F 30C0                            XOR     AL,AL
  8347                                  NOREAD:
  8348 00002441 06                              PUSH    ES
  8349 00002442 E88AFF                          CALL    BUFSEC
  8350 00002445 8E1E[E100]                      MOV     DS,[DMAADD+2]
  8351 00002449 D1E9                            SHR     CX,1
  8352 0000244B 7301                            JNC     SHORT EVENWRT
  8353 0000244D A4                              MOVSB
  8354                                  EVENWRT:
  8355 0000244E F3A5                            REP     MOVSW
  8356 00002450 07                              POP     ES
  8357                                          ;LDS     BX,[CURBUF]
  8358 00002451 36C51E[DD03]                    LDS     BX,[SS:CURBUF] ; 15/03/2018
  8359 00002456 C6470501                	MOV     BYTE [BX+5],1
  8360 0000245A 8D7710                          LEA     SI,[BX+10H]
  8361 0000245D 29F7                            SUB     DI,SI                   ; Position in buffer
  8362 0000245F 89FE                            MOV     SI,DI
  8363 00002461 89DF                            MOV     DI,BX
  8364 00002463 E8BA01                          CALL	PLACEBUF
  8365 00002466 263B7602                        CMP     SI,[ES:BP+2]
  8366 0000246A 7203                            JB      SHORT WBUFPLACED
  8367 0000246C E80C02                          CALL	PLACEHEAD
  8368                                  WBUFPLACED:
  8369 0000246F 16                              PUSH    SS
  8370 00002470 1F                              POP     DS
  8371 00002471 C3                      	RETN
  8372                                  
  8373                                  ;SUBTTL NEXTSEC -- Compute next sector to read or write
  8374                                  ;PAGE
  8375                                  
  8376                                  NEXTSEC:
  8377                                  
  8378                                  ; Compute the next sector to read or write
  8379                                  ; ES:BP Points to DPB
  8380                                  
  8381 00002472 F606[9703]FF                    TEST    BYTE [TRANS],-1
  8382 00002477 7425                            JZ      SHORT CLRET
  8383 00002479 A0[9503]                        MOV     AL,[SECCLUSPOS]
  8384 0000247C FEC0                            INC     AL
  8385 0000247E 263A4604                        CMP     AL,[ES:BP+4]
  8386 00002482 7617                            JBE     SHORT SAVPOS
  8387 00002484 8B1E[BD03]                      MOV     BX,[CLUSNUM]
  8388 00002488 81FBF80F                        CMP     BX,0FF8H
  8389 0000248C 7312                            JAE	SHORT NONEXT
  8390 0000248E E8D9FC                  	CALL	UNPACK
  8391 00002491 893E[BD03]                      MOV     [CLUSNUM],DI
  8392 00002495 FF06[BB03]                      INC     WORD [LASTPOS]
  8393 00002499 B000                            MOV     AL,0
  8394                                  SAVPOS:
  8395 0000249B A2[9503]                        MOV     [SECCLUSPOS],AL
  8396                                  CLRET:
  8397 0000249E F8                              CLC
  8398 0000249F C3                              RETN
  8399                                  NONEXT:
  8400 000024A0 F9                              STC
  8401 000024A1 C3                              RETN
  8402                                  
  8403                                  ;SUBTTL OPTIMIZE -- DO A USER DISK REQUEST WELL
  8404                                  ;PAGE
  8405                                  
  8406                                  OPTIMIZE:
  8407                                  
  8408                                  ; Inputs:
  8409                                  ;       BX = Physical cluster
  8410                                  ;       CX = No. of records
  8411                                  ;       DL = sector within cluster
  8412                                  ;       ES:BP = Base of drives parameters
  8413                                  ;       [NEXTADD] = transfer address
  8414                                  ; Outputs:
  8415                                  ;       AX = No. of records remaining
  8416                                  ;       BX = Transfer address
  8417                                  ;       CX = No. or records to be transferred
  8418                                  ;       DX = Physical sector address
  8419                                  ;       DI = Next cluster
  8420                                  ;       [CLUSNUM] = Last cluster accessed
  8421                                  ;       [NEXTADD] updated
  8422                                  ; ES:BP unchanged. Note that segment of transfer not set.
  8423                                  
  8424 000024A2 52                              PUSH    DX
  8425 000024A3 53                              PUSH    BX
  8426 000024A4 268A4604                        MOV     AL,[ES:BP+4]
  8427 000024A8 FEC0                            INC     AL              ; Number of sectors per cluster
  8428 000024AA 88C4                            MOV     AH,AL
  8429 000024AC 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
  8430 000024AE 89CA                            MOV     DX,CX
  8431 000024B0 B90000                          MOV     CX,0
  8432                                  
  8433                                  OPTCLUS:
  8434                                  ; AL has number of sectors available in current cluster
  8435                                  ; AH has number of sectors available in next cluster
  8436                                  ; BX has current physical cluster
  8437                                  ; CX has number of sequential sectors found so far
  8438                                  ; DX has number of sectors left to transfer
  8439                                  ; ES:BP Points to DPB
  8440                                  ; ES:SI has FAT pointer
  8441                                  
  8442 000024B3 E8B4FC                  	CALL	UNPACK
  8443 000024B6 00C1                            ADD     CL,AL
  8444 000024B8 80D500                          ADC     CH,0
  8445 000024BB 39D1                            CMP     CX,DX
  8446 000024BD 732D                            JAE     SHORT BLKDON
  8447 000024BF 88E0                            MOV     AL,AH
  8448 000024C1 43                              INC     BX
  8449 000024C2 39DF                            CMP     DI,BX
  8450 000024C4 74ED                            JZ      SHORT OPTCLUS
  8451 000024C6 4B                              DEC     BX
  8452                                  FINCLUS:
  8453 000024C7 891E[BD03]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
  8454 000024CB 29CA                            SUB     DX,CX           ; Number of sectors still needed
  8455 000024CD 52                              PUSH    DX
  8456 000024CE 89C8                            MOV     AX,CX
  8457 000024D0 26F76602                        MUL     WORD [ES:BP+2]  
  8458                                  				; Number of sectors times sector size
  8459 000024D4 8B36[B303]                      MOV     SI,[NEXTADD]
  8460 000024D8 01F0                            ADD     AX,SI           ; Adjust by size of transfer
  8461 000024DA A3[B303]                        MOV     [NEXTADD],AX
  8462 000024DD 58                              POP     AX              ; Number of sectors still needed
  8463 000024DE 5A                              POP     DX              ; Starting cluster
  8464 000024DF 29D3                            SUB     BX,DX           ; Number of new clusters accessed
  8465 000024E1 011E[BB03]                      ADD     [LASTPOS],BX
  8466 000024E5 5B                              POP     BX              ; BL = sector postion within cluster
  8467 000024E6 E81100                  	CALL	FIGREC
  8468 000024E9 89F3                            MOV     BX,SI
  8469 000024EB C3                      	RETN
  8470                                  BLKDON:
  8471 000024EC 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
  8472 000024EE 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
  8473 000024F0 FECC                            DEC     AH              ; Adjust to mean position within cluster
  8474 000024F2 8826[9503]                      MOV     [SECCLUSPOS],AH
  8475 000024F6 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
  8476 000024F8 EBCD                            JMP     SHORT FINCLUS
  8477                                  
  8478                                  ;SUBTTL FIGREC -- Figure sector in allocation unit
  8479                                  ;PAGE
  8480                                  
  8481                                  FIGREC:
  8482                                  
  8483                                  ; Inputs:
  8484                                  ;       DX = Physical cluster number
  8485                                  ;       BL = Sector position within cluster
  8486                                  ;       ES:BP = Base of drive parameters
  8487                                  ; Outputs:
  8488                                  ;       DX = physical sector number
  8489                                  ; No other registers affected.
  8490                                  
  8491 000024FA 51                              PUSH    CX
  8492 000024FB 268A4E05                        MOV     CL,[ES:BP+5]
  8493 000024FF 4A                              DEC     DX
  8494 00002500 4A                              DEC     DX
  8495 00002501 D3E2                            SHL     DX,CL
  8496 00002503 08DA                            OR      DL,BL
  8497 00002505 2603560B                        ADD     DX,[ES:BP+0BH]
  8498 00002509 59                              POP     CX
  8499 0000250A C3                      	RETN
  8500                                  
  8501                                  ;SUBTTL GETREC -- Figure record in file from fcb
  8502                                  ;PAGE
  8503                                  
  8504                                  GETREC:
  8505                                  
  8506                                  ; Inputs:
  8507                                  ;       DS:DX point to FCB
  8508                                  ; Outputs:
  8509                                  ;       CX = 1
  8510                                  ;       DX:AX = Record number determined by fcb_EXTENT and fcb_NR fields
  8511                                  ;       DS:DI point to FCB
  8512                                  ; No other registers affected.
  8513                                  
  8514 0000250B 89D7                            MOV     DI,DX
  8515 0000250D 803DFF                          CMP     BYTE [DI],-1		; Check for extended FCB
  8516 00002510 7503                            JNZ     SHORT NORMFCB2
  8517 00002512 83C707                          ADD     DI,7
  8518                                  NORMFCB2:
  8519 00002515 B90100                          MOV     CX,1
  8520 00002518 8A4520                          MOV     AL,[DI+20H]
  8521 0000251B 8B550C                          MOV     DX,[DI+0CH]
  8522 0000251E D0E0                            SHL     AL,1
  8523 00002520 D1EA                            SHR     DX,1
  8524 00002522 D0D8                            RCR     AL,1
  8525 00002524 88D4                            MOV     AH,DL
  8526 00002526 88F2                            MOV     DL,DH
  8527 00002528 B600                            MOV     DH,0
  8528 0000252A C3                      	RETN
  8529                                  
  8530                                  ;SUBTTL ALLOCATE -- Assign disk space
  8531                                  ;PAGE
  8532                                  
  8533                                  ALLOCATE:
  8534                                  
  8535                                  ; Inputs:
  8536                                  ;       BX = Last cluster of file (0 if null file)
  8537                                  ;       CX = No. of clusters to allocate
  8538                                  ;       DX = Position of cluster BX
  8539                                  ;       ES:BP = Base of drive parameters
  8540                                  ;       [THISFCB] = Points to FCB
  8541                                  ; Outputs:
  8542                                  ;       IF insufficient space
  8543                                  ;         THEN
  8544                                  ;       Carry set
  8545                                  ;       CX = max. no. of records that could be added to file
  8546                                  ;         ELSE
  8547                                  ;       Carry clear
  8548                                  ;       BX = First cluster allocated
  8549                                  ;       FAT is fully updated including dirty bit
  8550                                  ;       fcb_FIRCLUS field of FCB set if file was null
  8551                                  ; SI,BP unchanged. All other registers destroyed.
  8552                                  
  8553 0000252B 53                              PUSH    BX                      ; save the fat byte
  8554 0000252C 31DB                            XOR     BX,BX
  8555 0000252E E839FC                  	CALL	UNPACK
  8556 00002531 893E[A903]                      MOV     [FATBYT],DI
  8557 00002535 5B                              POP     BX
  8558                                  
  8559 00002536 52                              PUSH    DX
  8560 00002537 51                              PUSH    CX
  8561 00002538 53                              PUSH    BX
  8562 00002539 89D8                            MOV     AX,BX
  8563                                  CLUSALLOC:
  8564 0000253B 89DA                            MOV     DX,BX
  8565                                  FINDFRE:
  8566 0000253D 43                              INC     BX
  8567 0000253E 263B5E0D                        CMP     BX,[ES:BP+0DH]
  8568 00002542 7E2B                            JLE     SHORT TRYOUT
  8569 00002544 83F801                          CMP     AX,1
  8570 00002547 7F2B                            JG      SHORT TRYIN
  8571 00002549 5B                              POP     BX
  8572 0000254A BAFF0F                          MOV     DX,0FFFH
  8573 0000254D E87B00                  	CALL	RELBLKS
  8574 00002550 58                              POP     AX              ; No. of clusters requested
  8575 00002551 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
  8576 00002553 5A                              POP     DX
  8577 00002554 E86200                  	CALL	RESTFATBYT
  8578 00002557 42                              INC     DX              ; Position of first cluster allocated
  8579 00002558 01D0                            ADD     AX,DX           ; AX=max no. of cluster in file
  8580 0000255A 268A5604                        MOV     DL,[ES:BP+4]
  8581 0000255E B600                            MOV     DH,0
  8582 00002560 42                              INC     DX              ; DX=records/cluster
  8583 00002561 F7E2                            MUL     DX              ; AX=max no. of records in file
  8584 00002563 89C1                            MOV     CX,AX
  8585 00002565 2B0E[B503]                      SUB     CX,[RECPOS]	; CX=max no. of records that could be written
  8586 00002569 7702                            JA      SHORT MAXREC
  8587 0000256B 31C9                            XOR     CX,CX           ; If CX was negative, zero it
  8588                                  MAXREC:
  8589 0000256D F9                              STC
  8590 0000256E C3                              RETN
  8591                                  
  8592                                  TRYOUT:
  8593 0000256F E8F8FB                          CALL	UNPACK
  8594 00002572 740C                            JZ      SHORT HAVFRE
  8595                                  TRYIN:
  8596 00002574 48                              DEC     AX
  8597 00002575 7EC6                            JLE     SHORT FINDFRE
  8598 00002577 93                              XCHG    AX,BX
  8599 00002578 E8EFFB                  	CALL	UNPACK
  8600 0000257B 7403                            JZ      SHORT HAVFRE
  8601 0000257D 93                              XCHG    AX,BX
  8602 0000257E EBBD                            JMP     SHORT FINDFRE
  8603                                  HAVFRE:
  8604 00002580 87DA                            XCHG    BX,DX
  8605 00002582 89D0                            MOV     AX,DX
  8606 00002584 E809FC                  	CALL	PACK
  8607 00002587 89C3                            MOV     BX,AX
  8608 00002589 E2B0                            LOOP    CLUSALLOC
  8609 0000258B BAFF0F                          MOV     DX,0FFFH
  8610 0000258E E8FFFB                  	CALL	PACK
  8611 00002591 5B                              POP     BX
  8612 00002592 59                              POP     CX              ; Don't need this stuff since we're successful
  8613 00002593 5A                              POP     DX
  8614 00002594 E8D3FB                  	CALL	UNPACK
  8615 00002597 E81F00                  	CALL	RESTFATBYT
  8616 0000259A 87DF                            XCHG    BX,DI
  8617 0000259C 09FF                            OR      DI,DI
  8618                                          ;retnz
  8619 0000259E 7518                    	JNZ	SHORT ALLOCATE_RETN
  8620 000025A0 06                              PUSH    ES
  8621 000025A1 C43E[AF03]                      LES     DI,[THISFCB]
  8622 000025A5 81E3FF0F                        AND     BX,0FFFh
  8623 000025A9 26895D19                        MOV     [ES:DI+19H],BX
  8624 000025AD 2681651D00F0                    AND     WORD [ES:DI+1DH],0F000h  ; clear out old lstclus
  8625 000025B3 26095D1D                        OR      [ES:DI+1DH],BX      ; or the new guy in...
  8626 000025B7 07                              POP     ES
  8627                                  ALLOCATE_RETN:
  8628 000025B8 C3                              RETN
  8629                                  
  8630                                  RESTFATBYT:
  8631                                  
  8632 000025B9 53                              PUSH    BX
  8633 000025BA 52                              PUSH    DX
  8634 000025BB 57                              PUSH    DI
  8635 000025BC 31DB                            XOR     BX,BX
  8636 000025BE 8B16[A903]                      MOV     DX,[FATBYT]
  8637 000025C2 E8CBFB                          CALL	PACK
  8638 000025C5 5F                              POP     DI
  8639 000025C6 5A                              POP     DX
  8640 000025C7 5B                              POP     BX
  8641 000025C8 C3                      	RETN
  8642                                  
  8643                                  ;SUBTTL RELEASE -- DEASSIGN DISK SPACE
  8644                                  ;PAGE
  8645                                  
  8646                                  RELEASE:
  8647                                  
  8648                                  ; Inputs:
  8649                                  ;       BX = Cluster in file
  8650                                  ;       ES:BP = Base of drive parameters
  8651                                  ; Function:
  8652                                  ;       Frees cluster chain starting with [BX]
  8653                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
  8654                                  
  8655 000025C9 31D2                            XOR     DX,DX
  8656                                  RELBLKS:
  8657                                  ; Enter here with DX=0FFFH to put an end-of-file mark
  8658                                  ; in the first cluster and free the rest in the chain.
  8659                                          
  8660 000025CB E89CFB                  	CALL	UNPACK
  8661                                          ;retz
  8662 000025CE 740C                            JZ	SHORT RET12
  8663 000025D0 89F8                    	MOV     AX,DI
  8664 000025D2 E8BBFB                          CALL	PACK
  8665 000025D5 3DF80F                          CMP     AX,0FF8H
  8666 000025D8 89C3                            MOV     BX,AX
  8667 000025DA 72ED                            JB      SHORT RELEASE
  8668                                  RET12:  
  8669 000025DC C3                      	RETN
  8670                                  
  8671                                  ;SUBTTL GETEOF -- Find the end of a file
  8672                                  ;PAGE
  8673                                  
  8674                                  GETEOF:
  8675                                  
  8676                                  ; Inputs:
  8677                                  ;       ES:BP Points to DPB
  8678                                  ;       BX = Cluster in a file
  8679                                  ;       DS = CS
  8680                                  ; Outputs:
  8681                                  ;       BX = Last cluster in the file
  8682                                  ; DI destroyed. No other registers affected.
  8683                                  
  8684 000025DD E88AFB                          CALL	UNPACK
  8685 000025E0 81FFF80F                        CMP     DI,0FF8H
  8686 000025E4 73F6                            JAE	SHORT RET12
  8687 000025E6 89FB                            MOV     BX,DI
  8688 000025E8 EBF3                            JMP     SHORT GETEOF
  8689                                  
  8690                                  ;CODE	ENDS
  8691                                  ;    END
  8692                                  
  8693                                  ;============================================================================
  8694                                  ; STDBUF.ASM
  8695                                  ;============================================================================
  8696                                  ; Retro DOS v2.0 - 12/03/2018
  8697                                  
  8698                                  ;
  8699                                  ; Standard buffer management for MSDOS
  8700                                  ;
  8701                                  
  8702                                  ;.xlist
  8703                                  ;.xcref
  8704                                  ;INCLUDE STDSW.ASM
  8705                                  ;.cref
  8706                                  ;.list
  8707                                  
  8708                                  ;TITLE	STDBUF - MSDOS buffer management
  8709                                  ;NAME	STDBUF
  8710                                  
  8711                                  ;INCLUDE BUF.ASM
  8712                                  
  8713                                  ;============================================================================
  8714                                  ; BUF.ASM
  8715                                  ;============================================================================
  8716                                  ; Retro DOS v2.0 - 12/03/2018
  8717                                  
  8718                                  ;
  8719                                  ; buffer management for MSDOS
  8720                                  ;
  8721                                  
  8722                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  8723                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  8724                                  
  8725                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
  8726                                  
  8727                                  SETVISIT:
  8728                                  
  8729                                  ; Inputs:
  8730                                  ;       None
  8731                                  ; Function:
  8732                                  ;       Set up a scan of I/O buffers
  8733                                  ; Outputs:
  8734                                  ;       All visit flags = 0
  8735                                  ;               NOTE: This pre-scan is needed because a hard disk error
  8736                                  ;                     may cause a scan to stop in the middle leaving some
  8737                                  ;                     visit flags set, and some not set.
  8738                                  ;       DS:DI Points to [BUFFHEAD]
  8739                                  ; No other registers altered
  8740                                  
  8741                                          ;LDS     DI,[BUFFHEAD]
  8742 000025EA 36C53E[0301]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
  8743 000025EF 50                      	PUSH    AX
  8744 000025F0 31C0                            XOR     AX,AX
  8745                                  SETLOOP:
  8746 000025F2 884507                          MOV     [DI+7],AL
  8747 000025F5 C53D                            LDS     DI,[DI]
  8748 000025F7 83FFFF                          CMP     DI,-1
  8749 000025FA 75F6                            JNZ     SHORT SETLOOP
  8750                                          ;LDS     DI,[BUFFHEAD]
  8751 000025FC 36C53E[0301]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
  8752 00002601 58                              POP     AX
  8753                                  SVISIT_RETN:
  8754 00002602 C3                              RETN
  8755                                  
  8756                                  SKIPVISIT:
  8757                                  
  8758                                  ; Inputs:
  8759                                  ;       DS:DI Points to a buffer
  8760                                  ; Function:
  8761                                  ;       Skip visited buffers
  8762                                  ; Outputs:
  8763                                  ;       DS:DI Points to next unvisited buffer
  8764                                  ;       Zero is set if skip to LAST buffer
  8765                                  ; No other registers altered
  8766                                  
  8767 00002603 83FFFF                          CMP     DI,-1
  8768                                          ;retz
  8769 00002606 74FA                            JZ	SHORT SVISIT_RETN
  8770 00002608 807D0701                	CMP     BYTE [DI+7],1
  8771                                          ;retnz
  8772 0000260C 75F4                            JNZ	SHORT SVISIT_RETN
  8773 0000260E C53D                    	LDS     DI,[DI]
  8774 00002610 EBF1                            JMP     SHORT SKIPVISIT
  8775                                  	;RETN
  8776                                  
  8777                                  ;SUBTTL SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL
  8778                                  
  8779                                  SCANPLACE:
  8780                                  
  8781                                  ; Inputs:
  8782                                  ;       Same as PLACEBUF
  8783                                  ; Function:
  8784                                  ;       Save scan location and call PLACEBUF
  8785                                  ; Outputs:
  8786                                  ;       DS:DI Points to saved scan location
  8787                                  ; SI destroyed, other registers unchanged
  8788                                  
  8789 00002612 06                              PUSH    ES
  8790 00002613 C435                            LES     SI,[DI] ; Save scan location
  8791 00002615 E80800                          CALL    PLACEBUF
  8792 00002618 06                              PUSH    ES
  8793 00002619 1F                              POP     DS                      ; Restore scan location
  8794 0000261A 89F7                            MOV     DI,SI
  8795 0000261C 07                              POP     ES
  8796 0000261D C3                              RETN
  8797                                  
  8798                                  NRETJ:  
  8799 0000261E EB57                    	JMP     SHORT NRET
  8800                                  
  8801                                  PLACEBUF:
  8802                                  
  8803                                  ; Input:
  8804                                  ;       DS:DI points to buffer
  8805                                  ; Function:
  8806                                  ;       Remove buffer from queue and re-insert it in proper place.
  8807                                  ;       If buffer doesn't go at end, and isn't free, decrement
  8808                                  ;       priorities.
  8809                                  ; NO registers altered
  8810                                  ;
  8811                                  ; DS:SI -- Curbuf, current buffer in list
  8812                                  ; ES:DI -- Buf, buffer passed as argument
  8813                                  ; BP:CX -- Pointsave, saved Buf.nextbuf
  8814                                  ; DX:BX -- Lastbuf, previous buffer in list
  8815                                  ; AL    -- Inserted, Buf has been inserted
  8816                                  ; AH    -- Removed, Buf has been removed
  8817                                  
  8818 00002620 E84CE1                          CALL	save_world
  8819 00002623 C40D                            LES     CX,[DI]
  8820 00002625 83F9FF                          CMP     CX,-1           ; Buf is LAST?
  8821 00002628 744D                            JZ      SHORT NRET	; Buffer already last
  8822 0000262A 8CC5                            MOV     BP,ES           ; Pointsave = Buf.nextbuf
  8823 0000262C 1E                              PUSH    DS
  8824 0000262D 07                              POP     ES              ; Buf is ES:DI
  8825                                  	; 15/03/2018
  8826                                          ;LDS     SI,[BUFFHEAD]  ; Curbuf = HEAD
  8827 0000262E 36C536[0301]                    LDS     SI,[SS:BUFFHEAD]
  8828 00002633 E87A00                          CALL    POINTCOMP       ; Buf == HEAD?
  8829 00002636 750C                            JNZ     SHORT BUFLOOP
  8830                                          ;MOV     [BUFFHEAD],CX
  8831                                          ;MOV     [BUFFHEAD+2],BP ; HEAD = Pointsave
  8832 00002638 36890E[0301]                    MOV     [SS:BUFFHEAD],CX
  8833 0000263D 36892E[0501]                    MOV     [SS:BUFFHEAD+2],BP
  8834 00002642 EB14                            JMP     SHORT LOOKEND
  8835                                  
  8836                                  BUFLOOP:
  8837 00002644 1E                              PUSH    DS
  8838 00002645 56                              PUSH    SI
  8839 00002646 C534                            LDS     SI,[SI]
  8840 00002648 E86500                          CALL    POINTCOMP
  8841 0000264B 7404                            JZ	SHORT GOTTHEBUF
  8842 0000264D 58                              POP     AX
  8843 0000264E 58                              POP     AX
  8844 0000264F EBF3                            JMP     SHORT BUFLOOP
  8845                                  
  8846                                  GOTTHEBUF:
  8847 00002651 5E                              POP     SI
  8848 00002652 1F                              POP     DS
  8849 00002653 890C                            MOV     [SI],CX   ; If Curbuf.nextbuf == buf
  8850 00002655 896C02                          MOV     [SI+2],BP ; Curbuf.nextbuf = Pointsave
  8851                                  LOOKEND:
  8852 00002658 1E                              PUSH    DS
  8853 00002659 56                              PUSH    SI
  8854 0000265A C534                            LDS     SI,[SI]
  8855 0000265C 83FEFF                          CMP     SI,-1
  8856 0000265F 7404                            JZ      SHORT GOTHEEND
  8857 00002661 58                              POP     AX
  8858 00002662 58                              POP     AX
  8859 00002663 EBF3                            JMP     SHORT LOOKEND
  8860                                  
  8861                                  GOTHEEND:
  8862 00002665 5E                              POP     SI
  8863 00002666 1F                              POP     DS
  8864 00002667 893C                            MOV     [SI],DI
  8865 00002669 8C4402                          MOV     [SI+2],ES ; Curbuf.nextbuf = Buf
  8866 0000266C 26C705FFFF                      MOV     WORD [ES:DI],-1
  8867 00002671 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 ; Buf is LAST
  8868                                  NRET:
  8869 00002677 E8E1E0                          CALL	restore_world
  8870 0000267A C3                              RETN
  8871                                  
  8872                                  PLACEHEAD:
  8873                                  
  8874                                  ; SAME AS PLACEBUF except places buffer at head
  8875                                  
  8876 0000267B E8F1E0                          CALL	save_world
  8877 0000267E 1E                              PUSH    DS
  8878 0000267F 07                              POP     ES
  8879                                  	; 15/03/2018
  8880                                          ;LDS     SI,[BUFFHEAD]
  8881                                          ;MOV     [BUFFHEAD],DI
  8882                                          ;MOV     [BUFFHEAD+2],ES
  8883 00002680 36C536[0301]                    LDS     SI,[SS:BUFFHEAD]
  8884 00002685 36893E[0301]                    MOV     [SS:BUFFHEAD],DI
  8885 0000268A 368C06[0501]                    MOV     [SS:BUFFHEAD+2],ES
  8886 0000268F 268935                          MOV     [ES:DI],SI
  8887 00002692 268C5D02                        MOV     [ES:DI+2],DS
  8888                                  LOOKEND2:
  8889 00002696 1E                              PUSH    DS
  8890 00002697 56                              PUSH    SI
  8891 00002698 C534                            LDS     SI,[SI]
  8892 0000269A E81300                          CALL    POINTCOMP
  8893 0000269D 7404                            JZ      SHORT GOTHEEND2
  8894 0000269F 58                              POP     AX
  8895 000026A0 58                              POP     AX
  8896 000026A1 EBF3                            JMP     SHORT LOOKEND2
  8897                                  
  8898                                  GOTHEEND2:
  8899 000026A3 5E                              POP     SI
  8900 000026A4 1F                              POP     DS
  8901 000026A5 C704FFFF                        MOV     WORD [SI],-1
  8902 000026A9 C74402FFFF                      MOV     WORD [SI+2],-1	; Buf is LAST
  8903 000026AE EBC7                            JMP     SHORT NRET
  8904                                  
  8905                                  ;SUBTTL POINTCOMP -- 20 BIT POINTER COMPARE
  8906                                  
  8907                                  POINTCOMP:
  8908                                  
  8909                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
  8910                                  ; DO NOT USE FOR < or >
  8911                                  ; No Registers altered
  8912                                  
  8913 000026B0 39FE                            CMP     SI,DI
  8914                                          ;retnz
  8915 000026B2 750A                            JNZ	SHORT POINTCOMP_RETN
  8916 000026B4 51                      	PUSH    CX
  8917 000026B5 52                              PUSH    DX
  8918 000026B6 8CD9                            MOV     CX,DS
  8919 000026B8 8CC2                            MOV     DX,ES
  8920 000026BA 39D1                            CMP     CX,DX
  8921 000026BC 5A                              POP     DX
  8922 000026BD 59                              POP     CX
  8923                                  POINTCOMP_RETN:
  8924 000026BE C3                              RETN
  8925                                  
  8926                                  ;SUBTTL GETBUFFR -- GET A SECTOR INTO A BUFFER
  8927                                  
  8928                                  GETBUFFR:
  8929                                  
  8930                                  ; Input:
  8931                                  ;       AH = Priority buffer is to have
  8932                                  ;       AL = 0 means sector must be pre-read
  8933                                  ;          ELSE no pre-read
  8934                                  ;       DX = Desired physical sector number
  8935                                  ;       ES:BP = Pointer to drive parameters
  8936                                  ; Function:
  8937                                  ;       Get the specified sector into one of the I/O buffers
  8938                                  ;       And shuffle the queue
  8939                                  ; Output:
  8940                                  ;       [CURBUF] Points to the Buffer for the sector
  8941                                  ; DX,ES:BP unchanged, all other registers destroyed
  8942                                  
  8943 000026BF 31F6                            XOR     SI,SI
  8944                                  GETBUFFRB:
  8945 000026C1 A3[A703]                        MOV     [PREREAD],AX
  8946 000026C4 268A4600                        MOV     AL,[ES:BP]
  8947 000026C8 C53E[2901]                      LDS     DI,[LASTBUFFER]
  8948 000026CC 83FFFF                          CMP     DI,-1			; Recency pointer valid?
  8949 000026CF 740C                            JZ      SHORT SKBUF		; No
  8950 000026D1 3B5508                          CMP     DX,[DI+8]
  8951 000026D4 7507                            JNZ     SHORT SKBUF		; Wrong sector
  8952 000026D6 3A4504                          CMP     AL,[DI+4]
  8953 000026D9 7502                            JNZ     SHORT SKBUF		; Wrong Drive
  8954 000026DB EB6F                            JMP     SHORT JUSTBUF		; Just asked for same buffer
  8955                                  SKBUF:
  8956                                          ;LDS     DI,[BUFFHEAD]
  8957 000026DD 36C53E[0301]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
  8958                                  NXTBFF:
  8959 000026E2 3B5508                          CMP     DX,[DI+8]
  8960 000026E5 7507                            JNZ     SHORT BUMP
  8961 000026E7 3A4504                          CMP     AL,[DI+4]
  8962 000026EA 7502                            JNZ     SHORT BUMP
  8963 000026EC EB49                            JMP     SHORT SETINF
  8964                                  BUMP:
  8965 000026EE C53D                            LDS     DI,[DI]
  8966 000026F0 83FFFF                          CMP     DI,-1
  8967 000026F3 75ED                            JNZ     SHORT NXTBFF
  8968                                          ;LDS     DI,[BUFFHEAD]
  8969 000026F5 36C53E[0301]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
  8970 000026FA 56                              PUSH    SI
  8971 000026FB 52                              PUSH    DX
  8972 000026FC 55                              PUSH    BP
  8973 000026FD 06                              PUSH    ES
  8974 000026FE E89B00                          CALL    BUFWRITE		; Write out the dirty buffer
  8975 00002701 07                              POP     ES
  8976 00002702 5D                              POP     BP
  8977 00002703 5A                              POP     DX
  8978 00002704 5E                              POP     SI
  8979                                  RDSEC:					; Read in the new sector
  8980                                          ;TEST    BYTE [PREREAD],-1
  8981 00002705 36F606[A703]FF                  TEST    BYTE [SS:PREREAD],-1 ; 15/03/2018
  8982 0000270B 7518                    	JNZ     SHORT SETBUF
  8983 0000270D 8D5D10                          LEA     BX,[DI+10H]	; Point at buffer
  8984 00002710 B90100                          MOV     CX,1
  8985 00002713 56                              PUSH    SI
  8986 00002714 57                              PUSH    DI
  8987 00002715 52                              PUSH    DX
  8988 00002716 09F6                            OR      SI,SI
  8989 00002718 7405                            JZ      SHORT NORMSEC
  8990 0000271A E85CF5                  	CALL	FATSECRD
  8991 0000271D EB03                            JMP     SHORT GOTTHESEC	; Buffer is marked free if read barfs
  8992                                  NORMSEC:
  8993 0000271F E878F5                  	CALL	DREAD		; Buffer is marked free if read barfs
  8994                                  GOTTHESEC:
  8995 00002722 5A                              POP     DX
  8996 00002723 5F                              POP     DI
  8997 00002724 5E                              POP     SI
  8998                                  SETBUF:
  8999 00002725 895508                          MOV     [DI+8],DX
  9000 00002728 896D0C                          MOV     [DI+0CH],BP
  9001 0000272B 8C450E                          MOV     [DI+0EH],ES
  9002 0000272E 30E4                            XOR     AH,AH
  9003 00002730 268A4600                        MOV     AL,[ES:BP]
  9004 00002734 894504                          MOV     [DI+4],AX
  9005                                  SETINF:
  9006 00002737 B80100                          MOV     AX,1			; Default to not a FAT sector
  9007 0000273A 09F6                            OR      SI,SI
  9008 0000273C 7408                            JZ      SHORT SETSTUFFOK
  9009 0000273E 268A4608                        MOV     AL,[ES:BP+8]
  9010 00002742 268A660F                        MOV     AH,[ES:BP+0FH]
  9011                                  SETSTUFFOK:
  9012 00002746 89450A                          MOV     [DI+0AH],AX
  9013 00002749 E8D4FE                          CALL    PLACEBUF
  9014                                  JUSTBUF:
  9015                                  	; 15/03/2018
  9016                                          ;MOV     [CURBUF+2],DS
  9017                                          ;MOV     [LASTBUFFER+2],DS
  9018 0000274C 368C1E[DF03]                    MOV     [SS:CURBUF+2],DS
  9019 00002751 368C1E[2B01]                    MOV     [SS:LASTBUFFER+2],DS
  9020 00002756 16                              PUSH    SS
  9021 00002757 1F                              POP     DS
  9022 00002758 893E[DD03]                      MOV     [CURBUF],DI
  9023 0000275C 893E[2901]                      MOV     [LASTBUFFER],DI
  9024 00002760 C3                      	RETN
  9025                                  
  9026                                  ;SUBTTL FLUSHBUF -- WRITE OUT DIRTY BUFFERS
  9027                                  
  9028                                  FLUSHBUF:
  9029                                  
  9030                                  ; Input:
  9031                                  ;       DS = DOSGROUP
  9032                                  ;       AL = Physical unit number
  9033                                  ;          = -1 for all units
  9034                                  ; Function:
  9035                                  ;       Write out all dirty buffers for unit, and flag them as clean
  9036                                  ; DS Preserved, all others destroyed (ES too)
  9037                                  
  9038 00002761 C53E[0301]                      LDS     DI,[BUFFHEAD]
  9039 00002765 B4FF                            MOV     AH,-1
  9040                                  NXTBUFF:
  9041 00002767 386504                          CMP     [DI+4],AH
  9042 0000276A 7426                            JZ      SHORT SKIPBFF		; Skip free buffers
  9043 0000276C 38C4                            CMP     AH,AL
  9044 0000276E 7405                            JZ	SHORT DOBUFFER		; Do all dirty buffers
  9045 00002770 3A4504                          CMP     AL,[DI+4]
  9046 00002773 751D                            JNZ     SHORT SKIPBFF		; Buffer not for this unit
  9047                                  DOBUFFER:
  9048 00002775 807D0500                        CMP     BYTE [DI+5],0
  9049 00002779 7417                            JZ	SHORT SKIPBFF		; Buffer not dirty
  9050 0000277B 50                              PUSH    AX
  9051 0000277C FF7504                          PUSH    WORD [DI+4]
  9052 0000277F E81A00                          CALL    BUFWRITE
  9053 00002782 58                              POP     AX
  9054 00002783 30E4                            XOR     AH,AH                   ; Buffer is clean
  9055                                          ;CMP     AL,[WPERR]
  9056 00002785 363A06[2501]                    CMP     AL,[SS:WPERR] ; 15/03/2018
  9057 0000278A 7502                    	JNZ	SHORT NOZAP
  9058 0000278C B0FF                            MOV     AL,0FFH                 ; Invalidate buffer, it is inconsistent
  9059                                  NOZAP:
  9060 0000278E 894504                          MOV     [DI+4],AX
  9061 00002791 58                              POP     AX                      ; Search info
  9062                                  SKIPBFF:
  9063 00002792 C53D                            LDS     DI,[DI]
  9064 00002794 83FFFF                          CMP     DI,-1
  9065 00002797 75CE                            JNZ     SHORT NXTBUFF
  9066 00002799 16                              PUSH    SS
  9067 0000279A 1F                              POP     DS
  9068 0000279B C3                              RETN
  9069                                  
  9070                                  ;SUBTTL BUFWRITE -- WRITE OUT A BUFFER IF DIRTY
  9071                                  
  9072                                  BUFWRITE:
  9073                                  
  9074                                  ; Input:
  9075                                  ;       DS:DI Points to the buffer
  9076                                  ; Function:
  9077                                  ;       Write out all the buffer if dirty.
  9078                                  ; Output:
  9079                                  ;       Buffer marked free
  9080                                  ; DS:DI Preserved, ALL others destroyed (ES too)
  9081                                  
  9082 0000279C B8FF00                          MOV     AX,00FFH
  9083 0000279F 874504                          XCHG    AX,[DI+BUFFINFO.BUFDRV] ; Free, in case write barfs
  9084 000027A2 3CFF                            CMP     AL,0FFH
  9085                                          ;retz				; Buffer is free.
  9086 000027A4 7431                    	JZ	SHORT BUFWRITE_RETN ; 15/04/2018
  9087 000027A6 08E4                            OR      AH,AH
  9088                                          ;retz				; Buffer is clean.
  9089 000027A8 742D                    	JZ	SHORT BUFWRITE_RETN
  9090                                          ;CMP     AL,[WPERR]
  9091 000027AA 363A06[2501]                    CMP     AL,[SS:WPERR] ; 15/03/2018
  9092                                  	;retz				; If in WP error zap buffer
  9093 000027AF 7426                    	JZ	SHORT BUFWRITE_RETN
  9094 000027B1 C46D0C                          LES     BP,[DI+0CH]
  9095 000027B4 8D5D10                          LEA     BX,[DI+10H]		; Point at buffer
  9096 000027B7 8B5508                          MOV     DX,[DI+8]
  9097 000027BA 8B4D0A                          MOV     CX,[DI+0AH]
  9098 000027BD 88E8                            MOV     AL,CH                   ; [DI.BUFWRTINC]
  9099 000027BF 30ED                            XOR     CH,CH
  9100 000027C1 88EC                            MOV     AH,CH
  9101 000027C3 57                              PUSH    DI
  9102                                  WRTAGAIN:
  9103 000027C4 51                              PUSH    CX
  9104 000027C5 50                              PUSH    AX
  9105 000027C6 B90100                          MOV     CX,1
  9106 000027C9 53                              PUSH    BX
  9107 000027CA 52                              PUSH    DX
  9108 000027CB E8F1F4                  	CALL	DWRITE          ; Write out the dirty buffer
  9109 000027CE 5A                              POP     DX
  9110 000027CF 5B                              POP     BX
  9111 000027D0 58                              POP     AX
  9112 000027D1 59                              POP     CX
  9113 000027D2 01C2                            ADD     DX,AX
  9114 000027D4 E2EE                            LOOP    WRTAGAIN
  9115 000027D6 5F                              POP     DI
  9116                                  BUFWRITE_RETN:
  9117 000027D7 C3                              RETN
  9118                                  
  9119                                  ;CODE	ENDS
  9120                                  ;    END
  9121                                  
  9122                                  ;============================================================================
  9123                                  ; SYSCALL.ASM
  9124                                  ;============================================================================
  9125                                  ; Retro DOS v2.0 - 13/03/2018
  9126                                  
  9127                                  ;
  9128                                  ; system call entry points MSDOS
  9129                                  ;
  9130                                  
  9131                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  9132                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  9133                                  
  9134                                  ;SUBTTL DATE AND TIME - SYSTEM CALLS 42,43,44,45; S/G DATE,TIME
  9135                                  
  9136                                  _$GET_DATE:			;System call 42
  9137                                  
  9138                                  ; Inputs:
  9139                                  ;       None
  9140                                  ; Function:
  9141                                  ;       Return current date
  9142                                  ; Returns:
  9143                                  ;       Date in CX:DX
  9144                                  
  9145 000027D8 16                              PUSH    SS
  9146 000027D9 1F                              POP     DS
  9147 000027DA E85B10                          CALL	READTIME        ;Check for rollover to next day
  9148 000027DD A1[1B01]                        MOV     AX,[YEAR]
  9149 000027E0 8B1E[1901]                      MOV     BX,[DAY]
  9150 000027E4 E898DF                  	CALL	get_user_stack	;Get pointer to user registers
  9151 000027E7 895C06                          MOV     [SI+6],BX  ;DH=month, DL=day
  9152 000027EA 05BC07                          ADD     AX,1980         ;Put bias back
  9153 000027ED 894404                          MOV     [SI+4],AX  ;CX=year
  9154                                          ;MOV     AL,[WEEKDAY]
  9155 000027F0 36A0[1F01]                      MOV	AL,[SS:WEEKDAY]
  9156 000027F4 C3                      	RETN
  9157                                  
  9158                                  _$SET_DATE:			;System call 43
  9159                                  
  9160                                  ; Inputs:
  9161                                  ;       CX:DX valid date
  9162                                  ; Function:
  9163                                  ;       Set current date
  9164                                  ; Returns:
  9165                                  ;       AL = -1 date bad, = 0 OK
  9166                                  
  9167 000027F5 B0FF                            MOV     AL,-1           ;Be ready to flag error
  9168 000027F7 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  9169 000027FB 7217                            JC      SHORT RET24	;Error if not big enough
  9170 000027FD 83F977                          CMP     CX,119          ;Year must be less than 2100
  9171 00002800 7712                            JA      SHORT RET24
  9172 00002802 08F6                            OR      DH,DH
  9173 00002804 740E                            JZ      SHORT RET24
  9174 00002806 08D2                            OR      DL,DL
  9175 00002808 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  9176 0000280A 80FE0C                          CMP     DH,12           ;Check against max. month
  9177 0000280D 7705                            JA      SHORT RET24
  9178 0000280F 16                              PUSH    SS
  9179 00002810 1F                              POP     DS
  9180 00002811 E8AF10                  	CALL	DODATE
  9181                                  RET24:  
  9182 00002814 C3                      	RETN
  9183                                  
  9184                                  _$GET_TIME:			;System call 44
  9185                                  
  9186                                  ; Inputs:
  9187                                  ;       None
  9188                                  ; Function:
  9189                                  ;       Get current time
  9190                                  ; Returns:
  9191                                  ;       Time in CX:DX
  9192                                  
  9193 00002815 16                              PUSH    SS
  9194 00002816 1F                              POP     DS
  9195 00002817 E81E10                  	CALL	READTIME
  9196 0000281A E862DF                  	CALL	get_user_stack           ;Get pointer to user registers
  9197 0000281D 895406                          MOV     [SI+6],DX
  9198 00002820 894C04                          MOV     [SI+4],CX
  9199 00002823 30C0                            XOR     AL,AL
  9200                                  RET26:  
  9201 00002825 C3                      	RETN
  9202                                  
  9203                                  _$SET_TIME:			;System call 45
  9204                                  ;Time is in CX:DX in hours, minutes, seconds, 1/100 sec.
  9205                                  
  9206                                  ; Inputs:
  9207                                  ;       CX:DX = Time
  9208                                  ; Function:
  9209                                  ;       Set time
  9210                                  ; Returns:
  9211                                  ;       AL = -1 time bad, = 0 OK
  9212                                  
  9213 00002826 B0FF                            MOV     AL,-1           ;Flag in case of error
  9214 00002828 80FD18                          CMP     CH,24           ;Check hours
  9215 0000282B 73F8                            JAE     SHORT RET26
  9216 0000282D 80F93C                          CMP     CL,60           ;Check minutes
  9217 00002830 73F3                            JAE     SHORT RET26
  9218 00002832 80FE3C                          CMP     DH,60           ;Check seconds
  9219 00002835 73EE                            JAE     SHORT RET26
  9220 00002837 80FA64                          CMP     DL,100          ;Check 1/100's
  9221 0000283A 73E9                            JAE     SHORT RET26
  9222 0000283C 51                              PUSH    CX
  9223 0000283D 52                              PUSH    DX
  9224 0000283E 16                              PUSH    SS
  9225 0000283F 1F                              POP     DS
  9226 00002840 BB[5703]                        MOV     BX,TIMEBUF
  9227 00002843 B90600                          MOV     CX,6
  9228 00002846 31D2                            XOR     DX,DX
  9229 00002848 89D0                            MOV     AX,DX
  9230 0000284A 53                              PUSH    BX
  9231 0000284B E8C7EB                  	CALL	SETREAD
  9232 0000284E 1E                              PUSH    DS
  9233 0000284F C536[F800]                      LDS     SI,[BCLOCK]
  9234 00002853 E839EB                  	CALL	DEVIOCALL2      ;Get correct day count
  9235 00002856 1F                              POP     DS
  9236 00002857 5B                              POP     BX
  9237 00002858 E8EDEB                  	CALL	SETWRITE
  9238 0000285B 8F06[5B03]                      POP     WORD [TIMEBUF+4]
  9239 0000285F 8F06[5903]                      POP     WORD [TIMEBUF+2]
  9240 00002863 C536[F800]                      LDS     SI,[BCLOCK]
  9241 00002867 E825EB                  	CALL	DEVIOCALL2      ;Set the time
  9242 0000286A 30C0                            XOR     AL,AL
  9243 0000286C C3                              RETN
  9244                                  
  9245                                  ;SUBTTL DISK R/W ROUTINES
  9246                                  
  9247                                  _$FCB_SEQ_READ:			; System call 20
  9248                                  
  9249                                  ; Inputs:
  9250                                  ;       DS:DX Points to openned FCB
  9251                                  ; Function:
  9252                                  ;       Read next record from file to disk transfer address
  9253                                  ; Returns:
  9254                                  ;       AL = 1 EOF record is empty
  9255                                  ;       AL = 3 EOF record is partial zero filled
  9256                                  ;       AL = 2 No room at disk transfer address
  9257                                  ;       AL = 0 All OK
  9258                                  
  9259 0000286D E89BFC                          CALL	GETREC
  9260 00002870 E873F1                          CALL	LOAD
  9261 00002873 EB06                            JMP     SHORT FINSEQ
  9262                                  
  9263                                  _$FCB_SEQ_WRITE:		; System call 21
  9264                                  
  9265                                  ; Inputs:
  9266                                  ;       DS:DX Points to openned FCB
  9267                                  ; Function:
  9268                                  ;       Write next record to file from disk transfer address
  9269                                  ; Returns:
  9270                                  ;       AL = 1 Disk full
  9271                                  ;       AL = 2 No room in disk transfer segment
  9272                                  ;       AL = 0 All OK
  9273                                  
  9274 00002875 E893FC                          CALL	GETREC
  9275 00002878 E8A1F2                  	CALL	STORE
  9276                                  FINSEQ:
  9277 0000287B E344                            JCXZ    SETNREX
  9278 0000287D 83C001                          ADD     AX,1
  9279 00002880 83D200                          ADC     DX,0
  9280 00002883 EB3C                            JMP     SHORT SETNREX
  9281                                  
  9282                                  _$FCB_RANDOM_READ:		; System call 33
  9283                                  
  9284                                  ; Inputs:
  9285                                  ;       DS:DX Points to openned FCB
  9286                                  ; Function:
  9287                                  ;       Read record addressed by random record field from file to
  9288                                  ;         disk transfer address
  9289                                  ; Returns:
  9290                                  ;       AL = 1 EOF record is empty
  9291                                  ;       AL = 3 EOF record is partial zero filled
  9292                                  ;       AL = 2 No room at disk transfer address
  9293                                  ;       AL = 0 All OK
  9294                                  
  9295 00002885 E8FCFA                          CALL	GETRRPOS1
  9296 00002888 E85BF1                  	CALL	LOAD
  9297 0000288B EB24                            JMP     SHORT FINRND
  9298                                  
  9299                                  _$FCB_RANDOM_WRITE:		; System call 34
  9300                                  
  9301                                  ; Inputs:
  9302                                  ;       DS:DX Points to openned FCB
  9303                                  ; Function:
  9304                                  ;       Write record addressed by random record field to file from
  9305                                  ;         disk transfer address
  9306                                  ; Returns:
  9307                                  ;       AL = 1 Disk full
  9308                                  ;       AL = 2 No room in disk transfer segment
  9309                                  ;       AL = 0 All OK
  9310                                  
  9311 0000288D E8F4FA                  	CALL	GETRRPOS1
  9312 00002890 E889F2                  	CALL	STORE
  9313 00002893 EB1C                            JMP     SHORT FINRND
  9314                                  
  9315                                  _$FCB_RANDOM_READ_BLOCK:	; System call 39
  9316                                  
  9317                                  ; Inputs:
  9318                                  ;       DS:DX Points to openned FCB
  9319                                  ;       CX = Record count
  9320                                  ; Function:
  9321                                  ;       Read CX records starting at random record field from file
  9322                                  ;         to disk transfer address
  9323                                  ; Returns:
  9324                                  ;       AL = 1 EOF record is empty
  9325                                  ;       AL = 3 EOF record is partial zero filled
  9326                                  ;       AL = 2 No room at disk transfer address
  9327                                  ;       AL = 0 All OK
  9328                                  ;       CX = Actual number of records read
  9329                                  
  9330 00002895 E8EFFA                  	CALL	GETRRPOS
  9331 00002898 E84BF1                  	CALL	LOAD
  9332 0000289B EB06                            JMP     SHORT FINBLK
  9333                                  
  9334                                  _$FCB_RANDOM_WRITE_BLOCK:	; System call 40
  9335                                  
  9336                                  ; Inputs:
  9337                                  ;       DS:DX Points to openned FCB
  9338                                  ;       CX = Record count
  9339                                  ; Function:
  9340                                  ;       Write CX records starting at random record field to file
  9341                                  ;         from disk transfer address
  9342                                  ;       If CX = 0 File is set to length determined from random record field
  9343                                  ; Returns:
  9344                                  ;       AL = 1 Disk full
  9345                                  ;       AL = 2 No room in disk transfer segment
  9346                                  ;       AL = 0 All OK
  9347                                  ;       CX = Actual number of records written
  9348                                  
  9349 0000289D E8E7FA                          CALL	GETRRPOS
  9350 000028A0 E879F2                  	CALL	STORE
  9351                                  FINBLK:
  9352 000028A3 E8D9DE                  	CALL	get_user_stack
  9353 000028A6 894C04                          MOV     [SI+4],CX
  9354                                  FINNOSAV:
  9355 000028A9 E306                            JCXZ    FINRND
  9356 000028AB 83C001                          ADD     AX,1
  9357 000028AE 83D200                          ADC     DX,0
  9358                                  FINRND:
  9359 000028B1 26894521                        MOV     [ES:DI+21H],AX
  9360 000028B5 26885523                        MOV     [ES:DI+23H],DL
  9361 000028B9 08F6                            OR      DH,DH
  9362 000028BB 7404                            JZ      SHORT SETNREX
  9363 000028BD 26887524                        MOV     [ES:DI+24H],DH 
  9364                                  			; Save 4 byte of RECPOS only if significant
  9365                                  SETNREX:
  9366 000028C1 89C1                            MOV     CX,AX
  9367 000028C3 247F                            AND     AL,7FH
  9368 000028C5 26884520                        MOV     [ES:DI+20H],AL
  9369 000028C9 80E180                          AND     CL,80H
  9370 000028CC D1E1                            SHL     CX,1
  9371 000028CE D1D2                            RCL     DX,1
  9372 000028D0 88E8                            MOV     AL,CH
  9373 000028D2 88D4                            MOV     AH,DL
  9374 000028D4 2689450C                        MOV     [ES:DI+0CH],AX
  9375                                          ;MOV     AL,[DSKERR]
  9376 000028D8 36A0[9603]                      MOV     AL,[SS:DSKERR]
  9377                                  RET4:
  9378 000028DC C3                              RETN
  9379                                  
  9380                                  ;SUBTTL $FCB_DELETE -- SYSTEM CALL 19
  9381                                  
  9382                                  _$FCB_DELETE:		; System call 19
  9383                                  
  9384                                  ; Inputs:
  9385                                  ;       DS:DX point to unopened FCB
  9386                                  ; Function:
  9387                                  ;       Delete all matching entries
  9388                                  ; Returns:
  9389                                  ;       AL = -1 if no entries matched, otherwise 0
  9390                                  
  9391 000028DD E88606                  	CALL	MOVNAME
  9392 000028E0 B0FF                            MOV     AL,-1
  9393                                          ;MOV     [FOUNDDEL],AL
  9394 000028E2 36A2[8E03]                      MOV	[SS:FOUNDDEL],AL
  9395 000028E6 72F4                    	JC      SHORT RET4
  9396                                          ;MOV     AL,[ATTRIB]
  9397 000028E8 36A0[6F03]                      MOV	AL,[SS:ATTRIB]
  9398 000028EC 241F                    	AND     AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
  9399                                                                          ; Look only at hidden bits
  9400 000028EE 3C1F                            CMP     AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
  9401                                                                          ; All must be set
  9402 000028F0 7512                            JNZ	SHORT NOTALL
  9403 000028F2 B90B00                          MOV     CX,11
  9404 000028F5 B03F                            MOV     AL,"?"
  9405 000028F7 BF[6303]                        MOV     DI,NAME1
  9406 000028FA F3AE                            REPE    SCASB                   ; See if name is *.*
  9407 000028FC 7506                            JNZ     SHORT NOTALL
  9408                                  	;MOV	BYTE [DELALL],0		; DEL *.* - flag deleting all
  9409 000028FE 36C606[8D03]00          	MOV	BYTE [SS:DELALL],0		; DEL *.* - flag deleting all
  9410                                  NOTALL:
  9411 00002904 E802EC                  	CALL	FINDNAME
  9412 00002907 B0FF                            MOV     AL,-1
  9413 00002909 72D1                            JC      SHORT RET4
  9414 0000290B 08E4                            OR      AH,AH			; Check if device name
  9415 0000290D 78CD                            JS      SHORT RET4		; Can't delete I/O devices
  9416                                  DELFILE:
  9417 0000290F C42E[9A03]                      LES     BP,[THISDPB]
  9418 00002913 8A26[8D03]                      MOV     AH,[DELALL]
  9419 00002917 1E                              PUSH    DS
  9420 00002918 C53E[DD03]                      LDS     DI,[CURBUF]
  9421                                          ;TEST    [Attrib],attr_read_only ; are we deleting RO files too?
  9422 0000291C 36F606[6F03]01                  TEST	BYTE [SS:ATTRIB],attr_read_only
  9423 00002922 7509                    	JNZ     SHORT DoDelete		; yes
  9424 00002924 F6470B01                        TEST    BYTE [BX+0BH],attr_read_only
  9425 00002928 7403                            JZ      SHORT DoDelete		; not read only
  9426 0000292A 1F                              POP     DS
  9427 0000292B EB1C                            JMP     SHORT DELNXT
  9428                                  DoDelete:
  9429                                          ;MOV     BYTE PTR [FoundDel],0
  9430 0000292D 36C606[8E03]00                  MOV	BYTE [SS:FOUNDDEL], 0
  9431 00002933 C6450501                	MOV     BYTE [DI+5],1
  9432 00002937 8827                            MOV     [BX],AH
  9433 00002939 8B1C                            MOV     BX,[SI]
  9434 0000293B 1F                              POP     DS
  9435 0000293C 09DB                            OR      BX,BX
  9436 0000293E 7409                            JZ      SHORT DELNXT
  9437 00002940 263B5E0D                        CMP     BX,[ES:BP+0DH]
  9438 00002944 7703                            JA      SHORT DELNXT
  9439 00002946 E880FC                  	CALL	RELEASE
  9440                                  DELNXT:
  9441 00002949 E866EC                  	CALL	GETENTRY                        ; Registers need to be reset
  9442 0000294C E808EC                  	CALL	NEXTENT
  9443 0000294F 73BE                            JNC     SHORT DELFILE
  9444 00002951 E85A01                          CALL    FLUSHRET1
  9445 00002954 A0[8E03]                        MOV     AL,[FOUNDDEL]
  9446 00002957 C3                              RETN
  9447                                  
  9448                                  
  9449                                  ;SUBTTL $FCB_RENAME -- SYSTEM CALL 23	; RENAME FILES
  9450                                  
  9451                                  ERRETJ: 
  9452 00002958 E98900                  	JMP	ERRET
  9453                                  
  9454                                  _$FCB_RENAME:			; System call 23
  9455                                  
  9456                                  ; Inputs:
  9457                                  ;       DS:DX point to a modified FCB (DS:DX+11H points to destination
  9458                                  ;        name)
  9459                                  ; Function:
  9460                                  ;       Rename all matching entries to indicated name
  9461                                  ; Returns:
  9462                                  ;       AL = -1 if no entries matched, otherwise 0
  9463                                  
  9464 0000295B E80806                  	CALL	MOVNAME
  9465 0000295E 72F8                            JC      SHORT ERRETJ
  9466 00002960 83C605                          ADD     SI,5
  9467 00002963 BF[7003]                        MOV     DI,NAME2
  9468 00002966 E85706                  	CALL	LODNAME
  9469 00002969 72ED                            JC      SHORT ERRETJ	; Report error if second name invalid
  9470 0000296B E89BEB                  	CALL	FINDNAME
  9471 0000296E 72E8                            JC      SHORT ERRETJ
  9472 00002970 08E4                            OR      AH,AH           ; Check if I/O device name
  9473 00002972 78E4                            JS      SHORT ERRETJ	; If so, can't rename it
  9474 00002974 BE[6303]                        MOV     SI,NAME1
  9475 00002977 BF[7D03]                        MOV     DI,NAME3
  9476 0000297A B90D00                          MOV     CX,13
  9477 0000297D F3A4                            REP     MOVSB           ; Copy name to search for --include attribute byte
  9478                                  RENFIL:
  9479 0000297F BF[6303]                        MOV     DI,NAME1
  9480 00002982 BE[7003]                        MOV     SI,NAME2
  9481 00002985 B90B00                          MOV     CX,11
  9482                                  NEWNAM:
  9483 00002988 AC                              LODSB
  9484 00002989 3C3F                            CMP     AL,"?"
  9485 0000298B 7508                            JNZ     SHORT NOCHG
  9486 0000298D 1E                              PUSH    DS
  9487 0000298E 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  9488 00002992 8A07                            MOV     AL,[BX]
  9489 00002994 1F                              POP     DS
  9490                                  NOCHG:
  9491 00002995 AA                              STOSB
  9492 00002996 43                              INC     BX
  9493 00002997 E2EF                            LOOP    NEWNAM
  9494 00002999 47                              INC     DI
  9495 0000299A C60516                          MOV     BYTE [DI],attr_all  ;Sets ATTRIB
  9496                                                                  ; Stop duplicates with any attributes
  9497 0000299D E80DEA                  	CALL	DEVNAME         ; Check if giving it a device name
  9498 000029A0 733F                            JNC	short RENERR
  9499 000029A2 31C0                            XOR     AX,AX
  9500 000029A4 FF36[2101]                      PUSH    WORD [LASTENT]
  9501 000029A8 E869EB                  	CALL	FINDENTRY       ; See if new name already exists
  9502 000029AB 58                              POP     AX
  9503 000029AC 7333                            JNC	short RENERR	; Error if found
  9504 000029AE C42E[9A03]                      LES     BP,[THISDPB]
  9505 000029B2 E800EC                          CALL	GETENT                  ; Re-read matching entry
  9506 000029B5 89DF                            MOV     DI,BX           ; Leave BX,DX until call to NEXTENT
  9507 000029B7 8E06[DF03]                      MOV     ES,[CURBUF+2]
  9508 000029BB BE[6303]                        MOV     SI,NAME1
  9509 000029BE B90B00                          MOV     CX,11
  9510 000029C1 F3A4                            REP     MOVSB                   ; Replace old name with new one
  9511 000029C3 8B3E[DD03]                      MOV     DI,[CURBUF]
  9512 000029C7 26C6450501                      MOV     BYTE [ES:DI+5],1 ; Directory changed
  9513 000029CC 16                              PUSH    SS
  9514 000029CD 07                              POP     ES
  9515 000029CE BE[7D03]                        MOV     SI,NAME3
  9516 000029D1 BF[6303]                        MOV     DI,NAME1
  9517 000029D4 B90D00                          MOV     CX,13                   ; Include attribute byte
  9518 000029D7 F3A4                            REP     MOVSB                   ; Copy name back into search buffer
  9519 000029D9 E87BEB                  	CALL	NEXTENT
  9520 000029DC 73A1                            JNC     SHORT RENFIL
  9521 000029DE E9CD00                          JMP     FLUSHRET1
  9522                                  
  9523                                  RENERR:
  9524 000029E1 E8CA00                          CALL    FLUSHRET1
  9525                                  ERRET:
  9526 000029E4 B0FF                            MOV     AL,-1
  9527 000029E6 C3                              RETN
  9528                                  
  9529                                  ;SUBTTL $FCB_OPEN -- SYSTEM CALL 15	; OPEN A FILE
  9530                                  
  9531                                  _$FCB_OPEN:			; System call 15
  9532                                  
  9533                                  ; Inputs:
  9534                                  ;       DS:DX point to an unopened FCB
  9535                                  ; Function:
  9536                                  ;       Open indicated file and fill in FCB
  9537                                  ; Returns:
  9538                                  ;       AL = -1 if no entries matched, otherwise 0
  9539                                  ; FOR INTERNAL USE
  9540                                  ;       [CURBUF+2]:SI and [CURBUF+2]:BX Preserved
  9541                                  
  9542 000029E7 E80DEB                  	CALL	GETFILE
  9543                                  
  9544                                  DOOPEN:
  9545                                  
  9546                                  ; Enter here to perform $FCB_OPEN on file already found
  9547                                  ; in directory. AH=device ID number, DS=CS, BX points to directory
  9548                                  ; entry in [CURBUF], SI points to First Cluster field, and
  9549                                  ; ES:DI point to the FCB to be opened. This entry point
  9550                                  ; is used by $FCB_CREATE.
  9551 000029EA 72F8                            JC      SHORT ERRET
  9552 000029EC 56                              PUSH    SI
  9553 000029ED 50                              PUSH    AX              ; Save I/O driver number
  9554 000029EE 30C0                            XOR     AL,AL
  9555 000029F0 08E4                            OR      AH,AH
  9556 000029F2 7808                            JS      SHORT OPENDEV
  9557 000029F4 A0[9903]                        MOV     AL,[THISDRV]
  9558 000029F7 8E1E[DF03]                      MOV     DS,[CURBUF+2]
  9559 000029FB 40                              INC     AX
  9560                                  OPENDEV:
  9561 000029FC AA                              STOSB
  9562 000029FD 31C0                            XOR     AX,AX
  9563                                  ;IF ZEROEXT
  9564 000029FF 83C70B                          ADD     DI,11
  9565 00002A02 AB                              STOSW                   ; Zero low byte of extent field if ZERPEXT only
  9566                                  ;ELSE
  9567                                  ;	ADD     DI,12           ; Point to high half of CURRENT BLOCK field
  9568                                  ;	STOSB                   ; Set it to zero (CP/M programs set low byte)
  9569                                  ;ENDIF
  9570 00002A03 B080                            MOV     AL,128          ; Default record size
  9571 00002A05 AB                              STOSW                   ; Set record size
  9572 00002A06 AD                              LODSW                   ; Get starting cluster
  9573 00002A07 89C2                            MOV     DX,AX           ; Save it for the moment
  9574 00002A09 A5                              MOVSW                   ; Transfer size to FCB
  9575 00002A0A A5                              MOVSW
  9576 00002A0B 8B44F8                          MOV     AX,[SI-8]       ; Get date
  9577 00002A0E AB                              STOSW                   ; Save date in FCB
  9578 00002A0F 8B44F6                          MOV     AX,[SI-10]      ; Get time
  9579 00002A12 AB                              STOSW                   ; Save it in FCB
  9580 00002A13 58                              POP     AX              ; Restore I/O driver number
  9581 00002A14 5E                              POP     SI
  9582 00002A15 88E0                            MOV     AL,AH
  9583 00002A17 0C40                            OR      AL,40H          ; Not dirty
  9584 00002A19 AA                              STOSB
  9585 00002A1A 7827                            JS      SHORT SAVDEVPT	; If device, go save pointer to it
  9586 00002A1C 89D0                            MOV     AX,DX           ; Restore starting cluster
  9587 00002A1E AB                              STOSW                   ; first cluster
  9588 00002A1F 50                              PUSH    AX                      ; save cluster
  9589 00002A20 31C0                            XOR     AX,AX
  9590 00002A22 AB                              STOSW                           ; clus pos
  9591 00002A23 58                              POP     AX                      ; last cluster
  9592 00002A24 AA                              STOSB
  9593 00002A25 88E0                            MOV     AL,AH
  9594                                          ;MOV     AH,BYTE PTR [DIRSTART]
  9595 00002A27 368A26[C103]                    MOV     AH,[SS:DIRSTART]
  9596 00002A2C 51                      	PUSH    CX
  9597 00002A2D B104                            MOV     CL,4
  9598 00002A2F D2E4                            SHL     AH,CL
  9599 00002A31 08E0                            OR      AL,AH
  9600 00002A33 AA                              STOSB
  9601                                          ;MOV     AX,[DIRSTART]
  9602 00002A34 36A1[C103]                      MOV     AX,[SS:DIRSTART]
  9603 00002A38 B104                            MOV     CL,4
  9604 00002A3A D3E0                            SHL     AX,CL
  9605 00002A3C 59                              POP     CX
  9606 00002A3D 88E0                            MOV     AL,AH
  9607 00002A3F AA                              STOSB
  9608                                  OPEN_RET:
  9609 00002A40 31C0                            XOR     AX,AX
  9610 00002A42 C3                              RETN
  9611                                  
  9612                                  SAVDEVPT:
  9613 00002A43 C506[AB03]                      LDS     AX,[DEVPT]
  9614 00002A47 AB                              STOSW
  9615 00002A48 268C1D                          MOV     [ES:DI],DS
  9616 00002A4B EBF3                            JMP     SHORT OPEN_RET
  9617                                  
  9618                                  ;SUBTTL $FCB_CLOSE -- SYSTEM CALL 16; CLOSE FILE
  9619                                  
  9620                                  _$FCB_CLOSE:		; System call 16
  9621                                  
  9622                                  ; Inputs:
  9623                                  ;       DS:DX point to an opened FCB
  9624                                  ; Function:
  9625                                  ;       Close the indicated file
  9626                                  ; Returns:
  9627                                  ;       AL = -1 if disk has been changed, otherwise 0
  9628                                  
  9629 00002A4D 89D7                            MOV     DI,DX
  9630 00002A4F 803DFF                          CMP     BYTE [DI],-1		; Check for extended FCB
  9631 00002A52 7503                            JNZ     SHORT NORMFCB3
  9632 00002A54 83C707                          ADD     DI,7
  9633                                  NORMFCB3:
  9634 00002A57 F64518C0                        TEST    BYTE [DI+18H],devid_file_clean+devid_device
  9635                                                                          ; Allow only dirty files
  9636 00002A5B 755C                            JNZ     SHORT OKRET1		; can't close I/O device or not written
  9637 00002A5D E80105                  	CALL	MOVNAMENOSET
  9638 00002A60 725A                            JC      SHORT BADCLOSE		; Bad file name
  9639                                  FCB_CLOSE_INNER:
  9640 00002A62 52                              PUSH    DX
  9641 00002A63 1E                              PUSH    DS
  9642 00002A64 89D6                            MOV     SI,DX
  9643 00002A66 8B5C1E                          MOV     BX,[SI+1EH]
  9644 00002A69 B104                            MOV     CL,4
  9645 00002A6B D3EB                            SHR     BX,CL
  9646 00002A6D 53                              PUSH    BX
  9647 00002A6E 16                              PUSH    SS
  9648 00002A6F 1F                              POP     DS
  9649 00002A70 E8F8F7                  	CALL	FATREAD
  9650 00002A73 5B                              POP     BX
  9651 00002A74 E8FCEB                  	CALL	SETDIRSRCH
  9652 00002A77 E89AEA                  	CALL	FINDENTRY
  9653 00002A7A 07                              POP     ES
  9654 00002A7B 5F                              POP     DI
  9655 00002A7C 723E                            JC      SHORT BADCLOSE
  9656 00002A7E C51E[DD03]                      LDS     BX,[CURBUF]
  9657                                  
  9658                                          ; note that SI points to dir_first...
  9659                                  
  9660 00002A82 804CF120                        OR      BYTE [SI-0FH],attr_archive
  9661 00002A86 268B4D19                        MOV     CX,[ES:DI+19H]
  9662 00002A8A 890C                            MOV     [SI],CX
  9663 00002A8C 268B5510                        MOV     DX,[ES:DI+10H]
  9664 00002A90 895402                          MOV     [SI+2],DX
  9665 00002A93 268B5512                        MOV     DX,[ES:DI+12H]
  9666 00002A97 895404                          MOV     [SI+4],DX
  9667 00002A9A 268B5514                        MOV     DX,[ES:DI+14H]
  9668 00002A9E 8954FE                          MOV     [SI-2],DX
  9669 00002AA1 268B5516                        MOV     DX,[ES:DI+16H]
  9670 00002AA5 8954FC                          MOV     [SI-4],DX
  9671 00002AA8 C6470501                        MOV     BYTE [BX+5],1
  9672 00002AAC 16                              PUSH    SS
  9673 00002AAD 1F                              POP     DS
  9674                                  FLUSHRET1:
  9675 00002AAE C42E[9A03]                      LES     BP,[THISDPB]
  9676 00002AB2 268A4600                        MOV     AL,[ES:BP+0]
  9677 00002AB6 E8A8FC                  	CALL	FLUSHBUF
  9678                                  OKRET1:
  9679 00002AB9 30C0                            XOR     AL,AL
  9680 00002ABB C3                              RETN
  9681                                  
  9682                                  BADCLOSE:
  9683 00002ABC B0FF                            MOV     AL,-1
  9684 00002ABE C3                              RETN
  9685                                  
  9686                                  ;SUBTTL $FCB_CREATE -- SYSTEM CALL 22	; MAKE AND OPEN A NEW FILE
  9687                                  
  9688                                  _$FCB_CREATE:		; System call 22
  9689                                  
  9690                                  ; Inputs:
  9691                                  ;       DS:DX point to an unopened FCB
  9692                                  ; Function:
  9693                                  ;       If file does not exist, create it and open it
  9694                                  ;       If file exists, free up its contents and open the file
  9695                                  ; Returns:
  9696                                  ;       AL = -1 if file cannot be created, otherwise 0
  9697                                  
  9698 00002ABF E8A404                  	CALL	MOVNAME
  9699 00002AC2 7229                            JC      SHORT ERRET3
  9700 00002AC4 BF[6303]                        MOV     DI,NAME1
  9701 00002AC7 B90B00                          MOV     CX,11
  9702 00002ACA B03F                            MOV     AL,"?"
  9703 00002ACC F2AE                            REPNE   SCASB
  9704 00002ACE 741D                            JZ      SHORT ERRET3
  9705                                          ;MOV     BYTE [CREATING],-1
  9706 00002AD0 36C606[8C03]FF                  MOV     BYTE [SS:CREATING],-1 ; 15/03/2018
  9707 00002AD6 52                              PUSH    DX
  9708 00002AD7 1E                              PUSH    DS
  9709 00002AD8 E82EEA                          CALL	FINDNAME
  9710                                  NWENTY:
  9711 00002ADB C42E[9A03]                      LES     BP,[THISDPB]
  9712 00002ADF 7316                            JNC	SHORT EXISTENT
  9713 00002AE1 E870E9                  	CALL	BUILDDIR
  9714 00002AE4 7205                            JC      SHORT ERRPOP
  9715 00002AE6 E8CCEA                  	CALL	GETENT		; Point at that free entry
  9716 00002AE9 EB39                            JMP     SHORT FREESPOT
  9717                                  ERRPOP:
  9718 00002AEB 1F                              POP     DS
  9719 00002AEC 5A                              POP     DX
  9720                                  ERRET3:
  9721 00002AED EBCD                            JMP     SHORT BADCLOSE
  9722                                  
  9723                                  NEWENTRY:
  9724 00002AEF 5A                              POP     DX      ; Return address
  9725 00002AF0 07                              POP     ES      ; ES
  9726 00002AF1 59                              POP     CX      ; DI
  9727 00002AF2 52                              PUSH    DX
  9728 00002AF3 51                              PUSH    CX
  9729 00002AF4 06                              PUSH    ES
  9730 00002AF5 EBE4                            JMP	SHORT NWENTY
  9731                                  
  9732                                  EXISTENT:
  9733 00002AF7 75F2                            JNZ     SHORT ERRPOP	; Error if attributes don't match
  9734 00002AF9 08E4                            OR      AH,AH           ; Check if file is I/O device
  9735 00002AFB 7876                            JS      SHORT OPENJMP	; If so, no action
  9736 00002AFD 1E                              PUSH    DS
  9737 00002AFE C53E[DD03]                      LDS     DI,[CURBUF]
  9738 00002B02 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
  9739 00002B04 8B7508                          MOV     SI,[DI+8]
  9740 00002B07 1F                              POP     DS
  9741 00002B08 E31A                            JCXZ    FREESPOT
  9742 00002B0A 263B4E0D                        CMP     CX,[ES:BP+0DH]
  9743 00002B0E 7714                            JA      SHORT FREESPOT
  9744 00002B10 29FB                            SUB     BX,DI
  9745 00002B12 53                              PUSH    BX
  9746 00002B13 56                              PUSH    SI              ; Save sector number
  9747 00002B14 89CB                            MOV     BX,CX
  9748 00002B16 E8B0FA                  	CALL	RELEASE         ; Free any data already allocated
  9749 00002B19 5A                              POP     DX
  9750 00002B1A 30C0                            XOR     AL,AL
  9751 00002B1C E8A0FB                  	CALL	GETBUFFR
  9752 00002B1F 5B                              POP     BX
  9753 00002B20 031E[DD03]                      ADD     BX,[CURBUF]
  9754                                  FREESPOT:
  9755 00002B24 F606[6F03]08                    TEST    BYTE [ATTRIB],attr_volume_id
  9756 00002B29 7407                            JZ      SHORT NOTVOLID
  9757 00002B2B 803E[E103]00                    CMP     BYTE [VOLID],0
  9758 00002B30 75B9                            JNZ     SHORT ERRPOP	; Can't create a second volume ID
  9759                                  NOTVOLID:
  9760 00002B32 8E06[DF03]                      MOV     ES,[CURBUF+2]
  9761 00002B36 89DF                            MOV     DI,BX
  9762 00002B38 BE[6303]                        MOV     SI,NAME1
  9763 00002B3B B90500                          MOV     CX,5
  9764 00002B3E A4                              MOVSB
  9765 00002B3F F3A5                            REP     MOVSW
  9766 00002B41 A0[6F03]                        MOV     AL,[ATTRIB]
  9767 00002B44 AA                              STOSB
  9768 00002B45 B105                            MOV     CL,5
  9769 00002B47 31C0                            XOR     AX,AX
  9770 00002B49 F3AB                            REP     STOSW
  9771 00002B4B E8C50C                  	CALL	DATE16
  9772 00002B4E 92                              XCHG    AX,DX
  9773 00002B4F AB                              STOSW
  9774 00002B50 92                              XCHG    AX,DX
  9775 00002B51 AB                              STOSW
  9776 00002B52 31C0                            XOR     AX,AX
  9777 00002B54 57                              PUSH    DI
  9778 00002B55 AB                              STOSW
  9779 00002B56 AB                              STOSW
  9780 00002B57 AB                              STOSW
  9781 00002B58 8B36[DD03]                      MOV     SI,[CURBUF]
  9782 00002B5C 26C6440501                      MOV     BYTE [ES:SI+5],1
  9783 00002B61 C42E[9A03]                      LES     BP,[THISDPB]
  9784 00002B65 268A4600                        MOV     AL,[ES:BP+0]
  9785 00002B69 50                              PUSH    AX
  9786 00002B6A 53                              PUSH    BX
  9787 00002B6B E8F3FB                  	CALL	FLUSHBUF
  9788 00002B6E 5B                              POP     BX
  9789 00002B6F 58                              POP     AX
  9790 00002B70 5E                              POP     SI
  9791 00002B71 88C4                            MOV     AH,AL             ; Get I/O driver number back
  9792                                  OPENJMP:
  9793 00002B73 F8                              CLC                     ; Clear carry so OPEN won't fail
  9794 00002B74 07                              POP     ES
  9795 00002B75 5F                              POP     DI
  9796 00002B76 E971FE                          JMP     DOOPEN
  9797                                  
  9798                                  ;do_ext
  9799                                  ;
  9800                                  ;CODE	ENDS
  9801                                  ;    END
  9802                                  
  9803                                  ;============================================================================
  9804                                  ; CTRLC.ASM
  9805                                  ;============================================================================
  9806                                  
  9807                                  ;
  9808                                  ; ^C status routines for MSDOS
  9809                                  ;
  9810                                  
  9811                                  ;INCLUDE DOSSEG.ASM
  9812                                  
  9813                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  9814                                  ;        ASSUME  SS:DOSGROUP,CS:DOSGROUP
  9815                                  
  9816                                  ;.xlist
  9817                                  ;.xcref
  9818                                  ;INCLUDE DOSSYM.ASM
  9819                                  ;INCLUDE DEVSYM.ASM
  9820                                  ;.cref
  9821                                  ;.list
  9822                                  
  9823                                  ;SUBTTL Checks for ^C in CON I/O
  9824                                  ;PAGE
  9825                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
  9826                                  
  9827                                  DSKSTATCHK:        
  9828                                  	;CMP     BYTE [INDOS],1
  9829 00002B79 36803E[2301]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
  9830                                  	;retnz			; Do NOTHING
  9831 00002B7F 7561                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
  9832                                  
  9833 00002B81 51                      	PUSH    CX
  9834 00002B82 06                              PUSH    ES
  9835 00002B83 53                              PUSH    BX
  9836 00002B84 1E                              PUSH    DS
  9837 00002B85 56                              PUSH    SI
  9838 00002B86 0E                              PUSH    CS
  9839 00002B87 07                              POP     ES
  9840 00002B88 0E                              PUSH    CS
  9841 00002B89 1F                              POP     DS
  9842 00002B8A 31C9                            XOR     CX,CX
  9843 00002B8C C606[5F01]05                    MOV     BYTE [DSKSTCOM],DEVRDND
  9844 00002B91 C606[5D01]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
  9845 00002B96 890E[6001]                      MOV     [DSKSTST],CX
  9846 00002B9A BB[5D01]                        MOV     BX,DSKSTCALL
  9847 00002B9D C536[FC00]                      LDS     SI,[BCON]
  9848 00002BA1 E8EBE7                          CALL	DEVIOCALL2
  9849                                   	; 15/03/2018
  9850                                          ;TEST    WORD [DSKSTST],STBUI
  9851 00002BA4 36F706[6001]0002                TEST    WORD [SS:DSKSTST],STBUI
  9852 00002BAB 752E                    	JNZ     SHORT ZRET		; No characters available
  9853                                          ;MOV     AL,[DSKCHRET]
  9854 00002BAD 36A0[6A01]                      MOV     AL,[SS:DSKCHRET]
  9855                                  DSK1:
  9856 00002BB1 3C03                            CMP     AL,"C"-"@"
  9857 00002BB3 7528                            JNZ     SHORT RET36
  9858                                          ;MOV     BYTE [DSKSTCOM],DEVRD
  9859                                          ;MOV     BYTE [DSKSTCALL],DRDWRHL
  9860                                          ;MOV     [DSKCHRET],CL
  9861                                          ;MOV     [DSKSTST],CX
  9862 00002BB5 36C606[5F01]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
  9863 00002BBB 36C606[5D01]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
  9864 00002BC1 36880E[6A01]                    MOV     [SS:DSKCHRET],CL
  9865 00002BC6 36890E[6001]                    MOV     [SS:DSKSTST],CX
  9866 00002BCB 41                              INC     CX
  9867                                          ;MOV     [DSKSTCNT],CX
  9868 00002BCC 36890E[6F01]            	MOV     [SS:DSKSTCNT],CX    
  9869 00002BD1 E8BBE7                  	CALL	DEVIOCALL2              ; Eat the ^C
  9870 00002BD4 5E                              POP     SI
  9871 00002BD5 1F                              POP     DS
  9872 00002BD6 5B                              POP     BX                      ; Clean stack
  9873 00002BD7 07                              POP     ES
  9874 00002BD8 59                              POP     CX
  9875 00002BD9 EB72                            JMP     SHORT CNTCHAND
  9876                                  
  9877                                  ZRET:
  9878 00002BDB 30C0                            XOR     AL,AL                   ; Set zero
  9879                                  RET36:
  9880 00002BDD 5E                              POP     SI
  9881 00002BDE 1F                              POP     DS
  9882 00002BDF 5B                              POP     BX
  9883 00002BE0 07                              POP     ES
  9884 00002BE1 59                              POP     CX
  9885                                  _RET37:
  9886 00002BE2 C3                              RETN
  9887                                  
  9888                                  NOSTOP:
  9889 00002BE3 3C10                            CMP     AL,"P"-"@"
  9890 00002BE5 744C                            JZ      SHORT INCHK
  9891                                  
  9892                                  	; 15/04/2018
  9893                                          ;IF	NOT TOGLPRN
  9894 00002BE7 3C0E                            CMP	AL,"N"-"@"
  9895 00002BE9 7448                            JZ	SHORT INCHK
  9896                                          ;ENDIF
  9897                                  
  9898 00002BEB 3C03                            CMP     AL,"C"-"@"
  9899 00002BED 7444                            JZ      SHORT INCHK
  9900 00002BEF C3                      	RETN
  9901                                  
  9902                                          ;procedure SPOOLINT,NEAR
  9903                                  
  9904                                  SPOOLINT:
  9905 00002BF0 9C                              PUSHF
  9906                                  	; 15/03/2018
  9907                                          ;CMP     BYTE [IDLEINT],0
  9908 00002BF1 36803E[2701]00                  CMP     BYTE [SS:IDLEINT],0
  9909 00002BF7 740A                            JZ      SHORT POPFRET
  9910                                          ;CMP     BYTE [ERRORMODE],0
  9911 00002BF9 36803E[2401]00                  CMP     BYTE [SS:ERRORMODE],0
  9912 00002BFF 7502                            JNZ     SHORT POPFRET		;No spool ints in error mode
  9913 00002C01 CD28                            INT     int_spooler
  9914                                  POPFRET:
  9915 00002C03 9D                              POPF
  9916                                  _RET18:  
  9917 00002C04 C3                      	RETN
  9918                                  
  9919                                          ;procedure   STATCHK,NEAR
  9920                                  
  9921                                  STATCHK:
  9922 00002C05 E871FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
  9923                                                                          ; input redirection
  9924 00002C08 53                              PUSH    BX
  9925 00002C09 31DB                            XOR     BX,BX
  9926 00002C0B E803F0                          CALL	GET_IO_FCB
  9927 00002C0E 5B                              POP     BX
  9928 00002C0F 72F3                            JC      SHORT _RET18
  9929 00002C11 B401                            MOV     AH,1
  9930 00002C13 E847E6                          CALL	IOFUNC
  9931 00002C16 74D8                            JZ      SHORT SPOOLINT
  9932 00002C18 3C13                            CMP     AL,'S'-'@'
  9933 00002C1A 75C7                            JNZ     SHORT NOSTOP
  9934 00002C1C 30E4                            XOR     AH,AH
  9935 00002C1E E83CE6                          CALL	IOFUNC                  ; Eat Cntrl-S
  9936 00002C21 EB09                            JMP     SHORT PAUSOSTRT
  9937                                  PRINTOFF:
  9938                                  PRINTON:
  9939                                          ;NOT     BYTE [PFLAG]
  9940 00002C23 36F616[DA00]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
  9941                                  STATCHK_RETN:
  9942 00002C28 C3                              RETN
  9943                                  
  9944                                  PAUSOLP:
  9945 00002C29 E8C4FF                          CALL    SPOOLINT
  9946                                  PAUSOSTRT:
  9947 00002C2C B401                            MOV     AH,1
  9948 00002C2E E82CE6                          CALL	IOFUNC
  9949 00002C31 74F6                            JZ      SHORT PAUSOLP
  9950                                  INCHK:
  9951 00002C33 53                              PUSH    BX
  9952 00002C34 31DB                            XOR     BX,BX
  9953 00002C36 E8D8EF                          CALL	GET_IO_FCB
  9954 00002C39 5B                              POP     BX
  9955 00002C3A 72C8                            JC      SHORT _RET18
  9956 00002C3C 30E4                            XOR     AH,AH
  9957 00002C3E E81CE6                          CALL	IOFUNC
  9958 00002C41 3C10                            CMP     AL,'P'-'@'
  9959 00002C43 74DE                            JZ      SHORT PRINTON
  9960                                  	; 15/04/2018
  9961                                          ;IF	NOT TOGLPRN
  9962 00002C45 3C0E                            CMP	AL,'N'-'@'
  9963 00002C47 74DA                            JZ	SHORT PRINTOFF
  9964                                          ;ENDIF
  9965 00002C49 3C03                            CMP     AL,'C'-'@'
  9966                                          ;retnz
  9967 00002C4B 75DB                    	JNZ	SHORT STATCHK_RETN	
  9968                                  
  9969                                          ;procedure   CNTCHAND,NEAR
  9970                                  
  9971                                  CNTCHAND:
  9972                                  ; Ctrl-C handler.
  9973                                  ; "^C" and CR/LF is printed. Then the user registers are restored and
  9974                                  ; the user CTRL-C handler is executed.  At this point the top of the stack
  9975                                  ; has 1) the interrupt return address should the user CTRL-C handler wish
  9976                                  ; to allow processing to continue; 2) the original interrupt return address
  9977                                  ; to the code that performed the function call in the first place. If
  9978                                  ; the user CTRL-C handler wishes to continue, it must leave all registers
  9979                                  ; unchanged and RET (not IRET) with carry CLEAR. If carry is SET then
  9980                                  ; an terminate system call is simulated.
  9981 00002C4D B003                            MOV     AL,3                ; Display "^C"
  9982 00002C4F E85E09                          CALL	BUFOUT
  9983 00002C52 E8600A                          CALL	CRLF
  9984 00002C55 16                              PUSH    SS
  9985 00002C56 1F                              POP     DS
  9986 00002C57 803E[2601]00                    CMP     BYTE [CONSWAP],0
  9987 00002C5C 7403                            JZ      SHORT NOSWAP
  9988 00002C5E E8B5EC                          CALL	SWAPBACK
  9989                                  NOSWAP:
  9990 00002C61 FA                              CLI                         ; Prepare to play with stack
  9991 00002C62 8B26[8F03]                      MOV     SP,[user_SP]
  9992 00002C66 8E16[9103]                      MOV     SS,[user_SS]	    ; User stack now restored
  9993 00002C6A E8EEDA                          CALL	restore_world       ; User registers now restored
  9994                                          ;MOV     BYTE [INDOS],0	    ; Go to known state
  9995                                          ;MOV     BYTE [ERRORMODE],0
  9996                                          ;MOV     [ConC_spsave],SP    ; save his SP
  9997                                          ; 14/03/2018
  9998 00002C6D 2EC606[2301]00          	MOV     BYTE [CS:INDOS],0
  9999 00002C73 2EC606[2401]00                  MOV     BYTE [CS:ERRORMODE],0
 10000 00002C79 2E8926[F403]                    MOV     [CS:ConC_spsave],SP
 10001 00002C7E CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 10002                                          ;MOV     [user_SS],AX	    ; save the AX
 10003 00002C80 2EA3[9103]                      MOV     [CS:user_SS],AX
 10004 00002C84 9C                              PUSHF                       ; and the flags (maybe new call)
 10005 00002C85 58                              POP     AX
 10006                                          ;CMP     SP,[ConC_spsave]
 10007 00002C86 2E3B26[F403]                    CMP	SP,[CS:ConC_spsave]
 10008 00002C8B 7507                    	JNZ     SHORT ctrlc_try_new ; new syscall maybe?
 10009                                  ctrlc_repeat:
 10010                                          ;MOV     AX,[user_SS]        ; no...
 10011 00002C8D 2EA1[9103]                      MOV     AX,[CS:user_SS]
 10012                                  	;transfer COMMAND           ; Repeat command otherwise
 10013                                  COMMANDJ:
 10014 00002C91 E9B8D9                  	JMP	COMMAND
 10015                                  
 10016                                  ctrlc_try_new:
 10017                                          ;SUB     WORD [ConC_spsave],2 ; Are there flags on the stack?
 10018                                          ;CMP     SP,[ConC_spsave]
 10019 00002C94 2E832E[F403]02                  SUB     WORD [CS:ConC_spsave],2 ; Are there flags on the stack?
 10020 00002C9A 2E3B26[F403]                    CMP     SP,[CS:ConC_spsave]
 10021 00002C9F 740C                            JZ      SHORT ctrlc_new	    ; yes, new system call
 10022                                  
 10023                                  ctrlc_abort:
 10024                                          ;MOV	AX,(EXIT SHL 8) + 0
 10025 00002CA1 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 10026                                  	;MOV     BYTE [DidCTRLC],0FFh
 10027 00002CA4 2EC606[D600]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 10028                                          ;transfer COMMAND	    ; give up by faking $EXIT
 10029                                  	;JMP	SHORT COMMANDJ
 10030 00002CAA E99FD9                  	JMP	COMMAND
 10031                                  
 10032                                  ctrlc_new:
 10033 00002CAD 50                              PUSH    AX
 10034 00002CAE 9D                              POPF
 10035                                          ;POP	WORD [user_SS]
 10036 00002CAF 2E8F06[9103]                    pop	word [CS:user_SS] ; 14/03/2018
 10037 00002CB4 73D7                    	JNC     SHORT ctrlc_repeat  ; repeat operation
 10038 00002CB6 EBE9                            JMP     SHORT ctrlc_abort   ; indicate ^ced
 10039                                  
 10040                                  ;CNTCHAND ENDP
 10041                                  
 10042                                  ;SUBTTL DIVISION OVERFLOW INTERRUPT
 10043                                  
 10044                                  ; Default handler for division overflow trap
 10045                                          ;procedure   DIVOV,NEAR
 10046                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
 10047                                  
 10048                                  DIVOV: ; MSDOS 2.11 DIVOV (in CTRLC.ASM, 19/08/1983)
 10049 00002CB8 BE[9001]                        MOV     SI,DIVMES
 10050 00002CBB E80200                          CALL    RealDivOv
 10051 00002CBE EBE1                            JMP     SHORT ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 10052                                  
 10053                                  	; DIVOV at IBMDOS.COM offset 3143h (MSDOS 2.0)
 10054                                  	;push    si
 10055                                  	;push    ax
 10056                                  	;mov     si, offset DIVMES
 10057                                  	;call    OUTMES
 10058                                  	;pop     ax
 10059                                  	;pop     si
 10060                                  	;int     23h             ; DOS - CONTROL "C" EXIT ADDRESS
 10061                                  	;iret
 10062                                  
 10063                                  ;DIVOV   ENDP
 10064                                  
 10065                                  ;
 10066                                  ; RealDivOv: perform actual divide overflow stuff.
 10067                                  ; Inputs:   none
 10068                                  ; Outputs:  message to BCON
 10069                                  ;
 10070                                  	;procedure RealDivOv,NEAR   ; Do divide overflow and clock process
 10071                                  
 10072                                  RealDivOv:
 10073 00002CC0 0E                              PUSH    CS                  ; get ES addressability
 10074 00002CC1 07                              POP     ES
 10075 00002CC2 0E                              PUSH    CS                  ; get DS addressability
 10076 00002CC3 1F                              POP     DS
 10077 00002CC4 C606[5F01]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 10078 00002CC9 C606[5D01]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 10079 00002CCE C706[6001]0000                  MOV     WORD [DSKSTST],0
 10080 00002CD4 8A1E[A301]                      MOV     BL,[DivMesLen]
 10081 00002CD8 30FF                            XOR     BH,BH
 10082 00002CDA 891E[6F01]                      MOV     [DSKSTCNT],BX
 10083 00002CDE BB[5D01]                        MOV     BX,DSKSTCALL
 10084 00002CE1 8936[6B01]                      MOV     [DSKCHRET+1],SI    ; transfer address (need an EQU)
 10085 00002CE5 C536[FC00]                      LDS     SI,[BCON]
 10086 00002CE9 E8A3E6                          CALL	DEVIOCALL2
 10087                                          ;MOV     WORD [DSKCHRET+1],DEVIOBUF
 10088                                          ;MOV     WORD [DSKSTCNT],1
 10089                                  	; 14/03/2018
 10090 00002CEC 2EC706[6B01][5D03]              MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 10091 00002CF3 2EC706[6F01]0100                MOV     WORD [CS:DSKSTCNT],1
 10092                                  	;return
 10093 00002CFA C3                              RETN
 10094                                  
 10095                                  ;RealDivOv   ENDP
 10096                                  
 10097                                  ;SUBTTL CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER
 10098                                  ;PAGE
 10099                                         ; procedure CHARHARD,NEAR
 10100                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:DOSGROUP
 10101                                  
 10102                                  CHARHARD:
 10103                                  
 10104                                  ; Character device error handler
 10105                                  ; Same function as HARDERR
 10106                                  
 10107                                  	; 15/03/2018
 10108                                          ;MOV     WORD [EXITHOLD+2],ES
 10109                                          ;MOV     WORD [EXITHOLD],BP
 10110 00002CFB 368C06[6103]                    MOV     WORD [SS:EXITHOLD+2],ES
 10111 00002D00 36892E[5F03]                    MOV     WORD [SS:EXITHOLD],BP
 10112 00002D05 56                              PUSH    SI
 10113 00002D06 81E7FF00                        AND     DI,STECODE
 10114 00002D0A 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 10115 00002D0C E85700                          CALL    FATALC
 10116 00002D0F 5E                              POP     SI
 10117                                  	;return
 10118 00002D10 C3                              RETN
 10119                                  
 10120                                  ;CHARHARD ENDP
 10121                                  
 10122                                          ;procedure HardErr,NEAR
 10123                                  ;ASSUME  DS:NOTHING,ES:NOTHING
 10124                                  
 10125                                  HARDERR:
 10126                                  
 10127                                  ; Hard disk error handler. Entry conditions:
 10128                                  ;       DS:BX = Original disk transfer address
 10129                                  ;       DX = Original logical sector number
 10130                                  ;       CX = Number of sectors to go (first one gave the error)
 10131                                  ;       AX = Hardware error code
 10132                                  ;       DI = Original sector transfer count
 10133                                  ;       ES:BP = Base of drive parameters
 10134                                  ;       [READOP] = 0 for read, 1 for write
 10135                                                                          ;
 10136 00002D11 97                              XCHG    AX,DI                   ; Error code in DI, count in AX
 10137 00002D12 81E7FF00                        AND     DI,STECODE              ; And off status bits
 10138 00002D16 83FF00                          CMP     DI,WRECODE              ; Write Protect Error?
 10139 00002D19 750A                            JNZ     short NOSETWRPERR
 10140 00002D1B 50                              PUSH    AX
 10141 00002D1C 268A4600                        MOV     AL,[ES:BP+0]
 10142                                          ;MOV     [WPERR],AL		; Flag drive with WP error
 10143 00002D20 36A2[2501]                      MOV     [SS:WPERR],AL ; 15/03/2018
 10144 00002D24 58                              POP     AX
 10145                                  NOSETWRPERR:
 10146 00002D25 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 10147 00002D27 01C2                            ADD     DX,AX                   ; First sector number to retry
 10148 00002D29 52                              PUSH    DX
 10149 00002D2A 26F76602                        MUL     word [ES:BP+2] 		; Number of bytes transferred
 10150 00002D2E 5A                              POP     DX
 10151 00002D2F 01C3                            ADD     BX,AX                   ; First address for retry
 10152 00002D31 30E4                            XOR     AH,AH                   ; Flag disk section in error
 10153 00002D33 263B5606                        CMP     DX,[ES:BP+6] 		; In reserved area?
 10154 00002D37 7212                            JB      SHORT ERRINT
 10155 00002D39 FEC4                            INC     AH                      ; Flag for FAT
 10156 00002D3B 263B5610                        CMP     DX,[ES:BP+10H] ; In FAT?
 10157 00002D3F 720A                            JB      SHORT ERRINT
 10158 00002D41 FEC4                            INC     AH
 10159 00002D43 263B560B                        CMP     DX,[ES:BP+0BH] ; In directory?
 10160 00002D47 7202                            JB      SHORT ERRINT
 10161 00002D49 FEC4                            INC     AH                      ; Must be in data area
 10162                                  ERRINT:
 10163 00002D4B D0E4                            SHL     AH,1                    ; Make room for read/write bit
 10164                                          ;OR      AH,[READOP]
 10165 00002D4D 360A26[9803]                    OR      AH,[SS:READOP] ; 15/03/2018
 10166                                          ;entry   FATAL
 10167                                  FATAL:
 10168 00002D52 268A4600                        MOV     AL,[ES:BP+0]	; Get drive number
 10169                                          ;entry   FATAL1
 10170                                  FATAL1:  
 10171                                  	; 15/03/2018      
 10172                                  	;MOV     [EXITHOLD+2],ES
 10173                                          ;MOV     [EXITHOLD],BP		; The only things we preserve
 10174 00002D56 368C06[6103]            	MOV     [SS:EXITHOLD+2],ES
 10175 00002D5B 36892E[5F03]                    MOV     [SS:EXITHOLD],BP
 10176 00002D60 26C47612                        LES     SI,[ES:BP+12H]
 10177 00002D64 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 10178                                  
 10179                                  FATALC:
 10180                                          ;CMP     BYTE [ERRORMODE],0
 10181 00002D66 36803E[2401]00          	CMP     BYTE [SS:ERRORMODE],0
 10182 00002D6C 754D                            JNZ     SHORT SETIGN		; No INT 24s if already INT 24
 10183                                          ;MOV     [CONTSTK],SP
 10184 00002D6E 368926[9303]                    MOV     [SS:CONTSTK],SP
 10185 00002D73 16                              PUSH    SS
 10186 00002D74 07                              POP     ES
 10187 00002D75 FA                              CLI                             ; Prepare to play with stack
 10188                                          ;INC     BYTE [ERRORMODE]	; Flag INT 24 in progress
 10189                                          ;DEC     BYTE [INDOS]		; INT 24 handler might not return
 10190                                          ;MOV     SS,[user_SS]
 10191 00002D76 36FE06[2401]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 10192 00002D7B 36FE0E[2301]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 10193 00002D80 368E16[9103]                    MOV     SS,[SS:user_SS]
 10194 00002D85 268B26[8F03]                    MOV     SP,[ES:user_SP]         ; User stack pointer restored
 10195 00002D8A CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 10196 00002D8C 268926[8F03]                    MOV     [ES:user_SP],SP         ; restore our stack
 10197 00002D91 268C16[9103]                    MOV     [ES:user_SS],SS
 10198 00002D96 8CC4                            MOV     SP,ES
 10199 00002D98 8ED4                            MOV     SS,SP
 10200                                          ;MOV     SP,[CONTSTK]
 10201                                          ;INC     BYTE [INDOS]		; Back in the DOS
 10202                                          ;MOV     BYTE [ERRORMODE],0	; Back from INT 24
 10203 00002D9A 368B26[9303]                    MOV     SP,[SS:CONTSTK]
 10204 00002D9F 36FE06[2301]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 10205 00002DA4 36C606[2401]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 10206 00002DAA FB                              STI
 10207                                  IGNRET:
 10208                                          ;LES     BP,[EXITHOLD]
 10209 00002DAB 36C42E[5F03]                    LES     BP,[SS:EXITHOLD]
 10210 00002DB0 3C02                            CMP     AL,2
 10211 00002DB2 740B                            JZ      SHORT error_abort
 10212                                          ;MOV     BYTE [WPERR],-1	;Forget about WP error
 10213 00002DB4 36C606[2501]FF                  MOV     BYTE [SS:WPERR],-1
 10214 00002DBA C3                              RETN
 10215                                  
 10216                                  SETIGN:
 10217 00002DBB 30C0                            XOR     AL,AL                   ;Flag ignore
 10218 00002DBD EBEC                            JMP     SHORT IGNRET
 10219                                  
 10220                                  error_abort:
 10221 00002DBF 16                              PUSH    SS
 10222 00002DC0 1F                              POP     DS
 10223 00002DC1 803E[2601]00                    CMP     BYTE [CONSWAP],0
 10224 00002DC6 7403                            JZ      SHORT NOSWAP2
 10225 00002DC8 E84BEB                          CALL	SWAPBACK
 10226                                  NOSWAP2:
 10227 00002DCB C606[F803]02                    MOV     BYTE [exit_type],Exit_Hard_Error
 10228 00002DD0 8E1E[8B01]                      MOV     DS,[CurrentPDB]
 10229                                  ;
 10230                                  ; reset_environment checks the DS value against the CurrentPDB. If they
 10231                                  ; are different, then an old-style return is performed. If they are
 10232                                  ; the same, then we release jfns and restore to parent. We still use
 10233                                  ; the PDB at DS:0 as the source of the terminate addresses.
 10234                                  ;
 10235                                  ; output:   none.
 10236                                  ;
 10237                                          ;entry   reset_environment
 10238                                  reset_environment:
 10239 00002DD4 1E                              PUSH    DS                      ; save PDB of process
 10240                                  
 10241 00002DD5 B022                            MOV     AL,int_terminate
 10242 00002DD7 E8A7DF                          call	_$GET_INTERRUPT_VECTOR	; and who to go to
 10243                                  	; 15/03/2018
 10244                                          ;MOV     [EXITHOLD+2],ES	; save return address
 10245                                          ;MOV     [EXITHOLD],BX
 10246                                          ;MOV     BX,[CurrentPDB]	; get current process
 10247 00002DDA 368C06[6103]                    MOV     [SS:EXITHOLD+2],ES
 10248 00002DDF 36891E[5F03]                    MOV     [SS:EXITHOLD],BX
 10249 00002DE4 368B1E[8B01]                    MOV     BX,[SS:CurrentPDB]
 10250 00002DE9 8EDB                            MOV     DS,BX                   ;
 10251 00002DEB A11600                          MOV     AX,[PDB.PARENT_PID]	; get parent to return to
 10252 00002DEE 59                              POP     CX
 10253                                  ;
 10254                                  ; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 10255                                  ; Only free handles if AX <> BX and BX = CX and [exit_code].upper is not
 10256                                  ; Exit_keep_process
 10257                                  ;
 10258 00002DEF 39D8                            CMP     AX,BX
 10259 00002DF1 7422                            JZ      short reset_return	; parentPDB = CurrentPDB
 10260 00002DF3 39CB                            CMP     BX,CX
 10261 00002DF5 751E                            JNZ     short reset_return	; CurrentPDB <> ThisPDB
 10262 00002DF7 50                              PUSH    AX                      ; save parent
 10263                                          ;CMP     BYTE [exit_type],Exit_Keep_Process
 10264 00002DF8 36803E[F803]03          	CMP     BYTE [SS:exit_type],Exit_Keep_Process
 10265 00002DFE 7410                            JZ      short reset_to_parent	; keeping this process
 10266                                  
 10267 00002E00 E8BAE2                          call	arena_free_process
 10268                                  
 10269                                          ; reset environment at [CurrentPDB]; close those handles
 10270 00002E03 B91400                          MOV     CX,FILPERPROC
 10271                                  
 10272                                  reset_free_jfn:
 10273 00002E06 89CB                            MOV     BX,CX
 10274 00002E08 51                              PUSH    CX
 10275 00002E09 4B                              DEC     BX                      ; get jfn
 10276 00002E0A E83710                          call	_$CLOSE			; close it, ignore return
 10277 00002E0D 59                              POP     CX
 10278 00002E0E E2F6                            LOOP    reset_free_jfn          ; and do 'em all
 10279                                  
 10280                                  reset_to_parent:
 10281                                          ;POP     WORD [CurrentPDB]	; set up process as parent
 10282 00002E10 368F06[8B01]                    POP     WORD [SS:CurrentPDB]
 10283                                  reset_return:                           ; come here for normal return
 10284 00002E15 0E                              PUSH    CS
 10285 00002E16 1F                              POP     DS
 10286 00002E17 B0FF                            MOV     AL,-1
 10287 00002E19 E845F9                          CALL	FLUSHBUF                ; make sure that everything is clean
 10288                                  
 10289 00002E1C FA                              CLI
 10290 00002E1D C606[2301]00                    MOV     BYTE [INDOS],0		;Go to known state
 10291 00002E22 C606[2501]FF                    MOV     BYTE [WPERR],-1		;Forget about WP error
 10292                                  ;
 10293                                  ; Snake into multitasking... Get stack from CurrentPDB person
 10294                                  ;
 10295 00002E27 8E1E[8B01]                      MOV     DS,[CurrentPDB]
 10296 00002E2B 8E163000                        MOV     SS,[PDB.USER_STACK+2]
 10297 00002E2F 8B262E00                        MOV     SP,[PDB.USER_STACK]
 10298                                  
 10299 00002E33 E825D9                          CALL	restore_world
 10300 00002E36 58                              POP     AX                      ; suck off CS:IP of interrupt...
 10301 00002E37 58                              POP     AX
 10302 00002E38 58                              POP     AX
 10303 00002E39 B802F2                          MOV     AX,0F202h               ; STI
 10304 00002E3C 50                              PUSH    AX
 10305                                          ;15/03/2018
 10306                                  	;PUSH    WORD [EXITHOLD+2]
 10307                                          ;PUSH    WORD [EXITHOLD]
 10308 00002E3D 2EFF36[6103]            	PUSH    WORD [CS:EXITHOLD+2]
 10309 00002E42 2EFF36[5F03]                    PUSH    WORD [CS:EXITHOLD]
 10310 00002E47 FB                              STI
 10311 00002E48 CF                              IRET			; Long return back to user terminate address
 10312                                  
 10313                                  ;HardErr ENDP
 10314                                  
 10315                                  	;ASSUME  SS:DOSGROUP
 10316                                  ;do_ext
 10317                                  
 10318                                  ;CODE    ENDS
 10319                                  ;    END
 10320                                  
 10321                                  ;============================================================================
 10322                                  ; STDFCB.ASM
 10323                                  ;============================================================================
 10324                                  ; Retro DOS v2.0 - 13/03/2018
 10325                                  
 10326                                  ;
 10327                                  ; Standard FCB calls for MSDOS (first 12 function calls)
 10328                                  ;
 10329                                  
 10330                                  ;.xlist
 10331                                  ;.xcref
 10332                                  ;INCLUDE STDSW.ASM
 10333                                  ;.cref
 10334                                  ;.list
 10335                                  
 10336                                  ;TITLE   STDFCB - FCB calls for MSDOS
 10337                                  ;NAME    STDFCB
 10338                                  
 10339                                  ;INCLUDE FCB.ASM
 10340                                  
 10341                                  ;============================================================================
 10342                                  ; FCB.ASM
 10343                                  ;============================================================================
 10344                                  ; Retro DOS v2.0 - 13/03/2018
 10345                                  
 10346                                  ;
 10347                                  ; FCB management routines for MSDOS
 10348                                  ;
 10349                                  
 10350                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 10351                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
 10352                                  
 10353                                  MAKEFCB:
 10354                                  
 10355                                  DRVBIT  EQU     2
 10356                                  NAMBIT  EQU     4
 10357                                  EXTBIT  EQU     8
 10358                                  
 10359                                          ;MOV     BYTE [SpaceFlag],0
 10360 00002E49 36C606[D700]00                  MOV     BYTE [SS:SpaceFlag],0
 10361                                  
 10362 00002E4F 30D2                    	XOR     DL,DL           ; Flag--not ambiguous file name
 10363 00002E51 A802                            TEST    AL,DRVBIT       ; Use current drive field if default?
 10364 00002E53 7504                            JNZ     SHORT DEFDRV
 10365 00002E55 26C60500                        MOV     BYTE [ES:DI],0      ; No - use default drive
 10366                                  DEFDRV:
 10367 00002E59 47                              INC     DI
 10368 00002E5A B90800                          MOV     CX,8
 10369 00002E5D A804                            TEST    AL,NAMBIT       ; Use current name fields as defualt?
 10370 00002E5F 93                              XCHG    AX,BX           ; Save bits in BX
 10371 00002E60 B020                            MOV     AL," "
 10372 00002E62 7404                            JZ      SHORT FILLB	; If not, go fill with blanks
 10373 00002E64 01CF                            ADD     DI,CX
 10374 00002E66 31C9                            XOR     CX,CX           ; Don't fill any
 10375                                  FILLB:
 10376 00002E68 F3AA                            REP     STOSB
 10377 00002E6A B103                            MOV     CL,3
 10378 00002E6C F6C308                          TEST    BL,EXTBIT       ; Use current extension as default
 10379 00002E6F 7404                            JZ      SHORT FILLB2
 10380 00002E71 01CF                            ADD     DI,CX
 10381 00002E73 31C9                            XOR     CX,CX
 10382                                  FILLB2:
 10383 00002E75 F3AA                            REP     STOSB
 10384 00002E77 91                              XCHG    AX,CX           ; Put zero in AX
 10385 00002E78 AB                              STOSW
 10386 00002E79 AB                              STOSW                   ; Initialize two words after to zero
 10387 00002E7A 83EF10                          SUB     DI,16           ; Point back at start
 10388 00002E7D F6C301                          TEST    BL,1            ; Scan off separators if not zero
 10389 00002E80 7409                            JZ      SHORT SKPSPC
 10390 00002E82 E87300                          CALL    SCANB           ; Peel off blanks and tabs
 10391 00002E85 E88001                          CALL    DELIM           ; Is it a one-time-only delimiter?
 10392 00002E88 7504                            JNZ     SHORT _NOSCAN
 10393 00002E8A 46                              INC     SI              ; Skip over the delimiter
 10394                                  SKPSPC:
 10395 00002E8B E86A00                          CALL    SCANB           ; Always kill preceding blanks and tabs
 10396                                  _NOSCAN:
 10397 00002E8E E84901                          CALL    GETLET
 10398 00002E91 7616                            JBE     SHORT NODRV 	; Quit if termination character
 10399 00002E93 803C3A                          CMP     BYTE [SI],":"        ; Check for potential drive specifier
 10400 00002E96 7511                            JNZ     NODRV
 10401 00002E98 46                              INC     SI              ; Skip over colon
 10402 00002E99 2C40                            SUB     AL,"@"          ; Convert drive letter to binary drive number
 10403 00002E9B 7607                            JBE     SHORT BADDRV	; Valid drive numbers are <= NUMIO
 10404                                          ;CMP     AL,[NUMIO]
 10405 00002E9D 363A06[0001]                    CMP	AL,[SS:NUMIO] ; 15/03/2018
 10406 00002EA2 7602                    	JBE     SHORT HAVDRV
 10407                                  BADDRV:
 10408 00002EA4 B2FF                            MOV     DL,-1
 10409                                  HAVDRV:
 10410 00002EA6 AA                              STOSB           ; Put drive specifier in first byte
 10411 00002EA7 46                              INC     SI
 10412 00002EA8 4F                              DEC     DI      ; Counteract next two instructions
 10413                                  NODRV:
 10414 00002EA9 4E                              DEC     SI      ; Back up
 10415 00002EAA 47                              INC     DI      ; Skip drive byte
 10416                                  NORMSCAN:
 10417 00002EAB B90800                          MOV     CX,8
 10418 00002EAE E81300                          CALL    GETWORD         ; Get 8-letter file name
 10419 00002EB1 803C2E                          CMP     BYTE [SI],"."
 10420 00002EB4 7507                            JNZ     SHORT NODOT
 10421 00002EB6 46                              INC     SI              ; Skip over dot if present
 10422 00002EB7 B90300                          MOV     CX,3            ; Get 3-letter extension
 10423 00002EBA E80D00                          CALL    MUSTGETWORD
 10424                                  NODOT:
 10425 00002EBD 88D0                            MOV     AL,DL
 10426 00002EBF C3                              RETN
 10427                                  
 10428                                  NONAM:
 10429 00002EC0 01CF                            ADD     DI,CX
 10430 00002EC2 4E                              DEC     SI
 10431 00002EC3 C3                              RETN
 10432                                  
 10433                                  GETWORD:
 10434 00002EC4 E81301                          CALL    GETLET
 10435 00002EC7 76F7                            JBE     SHORT NONAM	; Exit if invalid character
 10436 00002EC9 4E                              DEC     SI
 10437                                  ;
 10438                                  ; UGH!!! Horrible bug here that should be fixed at some point:
 10439                                  ; If the name we are scanning is longer than CX, we keep on reading!
 10440                                  ;
 10441                                  MUSTGETWORD:
 10442 00002ECA E80D01                          CALL    GETLET
 10443                                  ;
 10444                                  ; If spaceFlag is set then we allow spaces in a pathname
 10445                                  ;
 10446 00002ECD 7223                            JB      SHORT FILLNAM
 10447 00002ECF 750C                            JNZ     SHORT MustCheckCX
 10448                                          ;TEST    BYTE [SpaceFlag],0FFh
 10449 00002ED1 36F606[D700]FF                  TEST    BYTE [SS:SpaceFlag],0FFh
 10450 00002ED7 7419                            JZ      SHORT FILLNAM
 10451 00002ED9 3C20                            CMP     AL," "
 10452 00002EDB 7515                            JNZ     SHORT FILLNAM
 10453                                  
 10454                                  MustCheckCX:
 10455 00002EDD E3EB                            JCXZ    MUSTGETWORD
 10456 00002EDF 49                              DEC     CX
 10457 00002EE0 3C2A                            CMP     AL,"*"                  ; Check for ambiguous file specifier
 10458 00002EE2 7504                            JNZ     SHORT NOSTAR
 10459 00002EE4 B03F                            MOV     AL,"?"
 10460 00002EE6 F3AA                            REP     STOSB
 10461                                  NOSTAR:
 10462 00002EE8 AA                              STOSB
 10463                                  
 10464                                          ;IF      KANJI
 10465                                          ;CALL    TESTKANJ
 10466                                          ;JZ      NOTDUAL3
 10467                                          ;JCXZ    BNDERR                  ; Attempt to straddle boundry
 10468                                          ;MOVSB                           ; Transfer second byte
 10469                                          ;DEC     CX
 10470                                          ;JMP     SHORT NOTDUAL3
 10471                                  ;BNDERR:
 10472                                          ;MOV     BYTE PTR ES:[DI-1]," "  ; patch up that space
 10473                                          ;JMP     MustGetWord             ; go back and scan until delim
 10474                                  ;NOTDUAL3:
 10475                                          ;ENDIF
 10476                                  
 10477 00002EE9 3C3F                            CMP     AL,"?"
 10478 00002EEB 75DD                            JNZ     SHORT MUSTGETWORD
 10479 00002EED 80CA01                          OR      DL,1                    ; Flag ambiguous file name
 10480 00002EF0 EBD8                            JMP     SHORT MUSTGETWORD
 10481                                  FILLNAM:
 10482 00002EF2 B020                            MOV     AL," "
 10483 00002EF4 F3AA                            REP     STOSB
 10484 00002EF6 4E                              DEC     SI
 10485 00002EF7 C3                              RETN
 10486                                  
 10487                                  SCANB:
 10488 00002EF8 AC                              LODSB
 10489 00002EF9 E82C01                          CALL    SPCHK
 10490 00002EFC 74FA                            JZ      SCANB
 10491 00002EFE 4E                              DEC     SI
 10492 00002EFF C3                              RETN
 10493                                  
 10494                                  ;
 10495                                  ; NameTrans is used by FindPath to scan off an element
 10496                                  ; of a path.  We must allow spaces in pathnames
 10497                                  ; Inputs:   SS - DOSGROUP
 10498                                  ;           DS:SI name
 10499                                  ; Outputs:  DS:SI advanced over spot
 10500                                  ;           ES:DI point to after Name1
 10501                                  ; registers modified: AX, BX, CX, DX
 10502                                  
 10503                                  NAMETRANS:
 10504                                          ;MOV     BYTE PTR [SpaceFlag],1
 10505 00002F00 36C606[D700]01                  MOV     BYTE [SS:SpaceFlag],1
 10506 00002F06 16                              PUSH    SS
 10507 00002F07 07                              POP     ES
 10508 00002F08 BF[6303]                        MOV     DI,NAME1
 10509 00002F0B 57                              PUSH    DI
 10510 00002F0C B020                            MOV     AL,' '
 10511 00002F0E B90B00                          MOV     CX,11
 10512 00002F11 F3AA                            REP     STOSB
 10513 00002F13 30C0                            XOR     AL,AL
 10514 00002F15 88C2                            MOV     DL,AL
 10515 00002F17 AA                              STOSB
 10516 00002F18 5F                              POP     DI
 10517 00002F19 803C2E                          CMP     BYTE [SI],'.'
 10518                                        
 10519                                  	;IF      KANJI
 10520                                          ;JZ      FOOBAR
 10521                                          ;CALL    NORMSCAN
 10522                                          ;CMP     [NAME1],0E5H
 10523                                          ;retnz
 10524                                          ;MOV     [NAME1],5
 10525                                          ;return
 10526                                  ;FOOBAR:
 10527                                          ;ELSE
 10528 00002F1C 758D                            JNZ	SHORT NORMSCAN
 10529                                          ;ENDIF
 10530                                  
 10531 00002F1E A4                              MOVSB
 10532 00002F1F AC                              LODSB
 10533 00002F20 E80C01                          CALL    PATHCHRCMP
 10534 00002F23 7415                            JZ      SHORT GOTDOTNAME
 10535 00002F25 08C0                            OR      AL,AL
 10536 00002F27 7411                            JZ      SHORT GOTDOTNAME
 10537 00002F29 3C2E                            CMP     AL,'.'
 10538 00002F2B 750C                            JNZ     SHORT BADDOTS
 10539 00002F2D AA                              STOSB
 10540 00002F2E AC                              LODSB
 10541 00002F2F E8FD00                          CALL    PATHCHRCMP
 10542 00002F32 7406                            JZ      SHORT GOTDOTNAME
 10543 00002F34 08C0                            OR      AL,AL
 10544 00002F36 7402                            JZ      SHORT GOTDOTNAME
 10545 00002F38 4E                              DEC     SI
 10546                                  BADDOTS:
 10547 00002F39 4E                              DEC     SI
 10548                                  GOTDOTNAME:
 10549 00002F3A 4E                              DEC     SI
 10550 00002F3B 30C0                            XOR     AL,AL
 10551 00002F3D C3                              RETN
 10552                                  
 10553                                  ;SUBTTL BUILDFCB -- MAKE A BLANK FCB FOR A DEVICE
 10554                                  
 10555                                  BUILDFCB:
 10556                                  
 10557                                  ; Function:
 10558                                  ;       Build a blank FCB for I/O to a device
 10559                                  ; Outputs:
 10560                                  ;       Same as GETNAME
 10561                                  
 10562 00002F3E B82020                          MOV     AX,"  "
 10563 00002F41 BF[6B03]                        MOV     DI,DEVFCB+8     ; Point to extent field
 10564 00002F44 AB                              STOSW
 10565 00002F45 AA                              STOSB                   ; Blank out extent field
 10566 00002F46 31C0                            XOR     AX,AX
 10567 00002F48 B90A00                          MOV     CX,10
 10568 00002F4B F3AB                            REP     STOSW           ; Fill FCB with zeros
 10569 00002F4D AA                              STOSB
 10570 00002F4E E8C208                          CALL	DATE16
 10571 00002F51 BF[7903]                        MOV     DI,DEVFCB+22
 10572 00002F54 92                              XCHG    AX,DX
 10573 00002F55 AB                              STOSW
 10574 00002F56 92                              XCHG    AX,DX
 10575 00002F57 AB                              STOSW
 10576 00002F58 93                              XCHG    AX,BX           ; But device number in AH
 10577 00002F59 BB[6303]                        MOV     BX,DEVFCB
 10578 00002F5C 89FE                            MOV     SI,DI
 10579 00002F5E 30C0                            XOR     AL,AL           ; Set zero, clear carry
 10580                                  BUILDFCB_RETN:
 10581 00002F60 C3                      	RETN
 10582                                  
 10583                                  ;SUBTTL MOVENAME, LODNAME -- EXAMINE FCB AND SETUP
 10584                                  
 10585                                  FCB_move:
 10586                                  MOVNAMENOSET:
 10587 00002F61 BF0100                          MOV     DI,1
 10588 00002F64 EB02                            JMP     SHORT MOVSTART
 10589                                  
 10590                                  MOVNAME:
 10591                                  
 10592                                  ; Inputs:
 10593                                  ;       DS, DX point to FCB or extended FCB
 10594                                  ; Outputs:
 10595                                  ;       DS:DX point to normal FCB
 10596                                  ;       DS:SI point after end of NAME/EXT in FCB
 10597                                  ;       ES = DOSGROUP
 10598                                  ;       If file name OK:
 10599                                  ;       [NAME1] has name in upper case
 10600                                  ; All registers destroyed
 10601                                  ; Carry set if bad file name or drive
 10602                                  
 10603 00002F66 31FF                            XOR     DI,DI
 10604                                  MOVSTART:
 10605                                          ;MOV     WORD PTR [CREATING],0E500H ; Not creating, not DEL *.*
 10606 00002F68 36C706[8C03]00E5                MOV     WORD [SS:CREATING],0E500H
 10607 00002F6F 89D6                    	MOV     SI,DX
 10608 00002F71 AC                              LODSB
 10609                                          ;MOV     [EXTFCB],AL	; Set flag if extended FCB in use
 10610 00002F72 36A2[8B03]                      MOV     [SS:EXTFCB],AL	; Set flag if extended FCB in use
 10611 00002F76 30E4                            XOR     AH,AH           ; Set default attributes
 10612 00002F78 3CFF                            CMP     AL,-1           ; Is it an extended FCB?
 10613 00002F7A 750A                            JNZ     SHORT HAVATTRB
 10614 00002F7C 83C207                          ADD     DX,7            ; Adjust to point to normal FCB
 10615 00002F7F 83C606                          ADD     SI,6
 10616 00002F82 8A64FF                          MOV     AH,[SI-1]       ; Attribute byte
 10617 00002F85 AC                              LODSB                   ; Get drive select byte
 10618                                  HAVATTRB:
 10619 00002F86 E89BEC                          CALL	GETTHISDRV
 10620                                          ;retc
 10621 00002F89 72D5                            JC	SHORT BUILDFCB_RETN
 10622 00002F8B 1E                      	PUSH    DS
 10623 00002F8C 52                              PUSH    DX
 10624 00002F8D 56                              PUSH    SI
 10625 00002F8E 50                              PUSH    AX
 10626                                  ;
 10627                                  ; DS:DX is pointer to good FCB
 10628                                  ; DS:SI is same
 10629                                  ;
 10630                                  ; Move the file into Name1 and UCASE it
 10631                                  ;
 10632 00002F8F 57                              PUSH    DI
 10633                                          ;context ES
 10634 00002F90 16                              PUSH	SS
 10635 00002F91 07                      	POP	ES
 10636 00002F92 BF[6303]                	MOV     DI,NAME1
 10637 00002F95 E82800                          CALL    LODNAME
 10638 00002F98 5F                              POP     DI
 10639 00002F99 7217                            JC      SHORT DrvNoSet
 10640                                  ;
 10641                                  ; are we setting current dir info?
 10642                                  ;
 10643 00002F9B 09FF                            OR      DI,DI
 10644 00002F9D 7513                            JNZ     SHORT DrvNoSet	; do not set dir info
 10645                                  
 10646                                  ;
 10647                                  ; check for device name first, eliminating drive hits on devices
 10648                                  ;
 10649                                          ;context DS
 10650 00002F9F 16                              PUSH	SS
 10651 00002FA0 1F                      	POP	DS
 10652 00002FA1 E809E4                  	CALL	DEVNAME
 10653 00002FA4 730C                            JNC     SHORT DrvNoSet	; we have a device
 10654                                  ;
 10655                                  ; make sure that everything is current
 10656                                  ;
 10657 00002FA6 E8C2F2                  	CALL	FATREAD
 10658                                          ;MOV     BYTE PTR [ATTRIB],attr_directory+attr_hidden+attr_system
 10659 00002FA9 36C606[6F03]16                  MOV     BYTE [SS:ATTRIB],attr_directory+attr_hidden+attr_system
 10660 00002FAF E87BE6                   	CALL	GETCURRDIR
 10661                                  DrvNoSet:
 10662 00002FB2 58                              POP     AX
 10663                                          ;MOV     BYTE PTR [ATTRIB],AH
 10664 00002FB3 368826[6F03]            	MOV     [SS:ATTRIB],AH
 10665                                  
 10666 00002FB8 5E                              POP     SI
 10667 00002FB9 5A                              POP     DX
 10668 00002FBA 1F                              POP     DS
 10669                                          ;context ES
 10670 00002FBB 16                              PUSH	SS
 10671 00002FBC 07                      	POP	ES
 10672 00002FBD BF[6303]                	MOV     DI,NAME1
 10673                                  
 10674                                  LODNAME:
 10675                                  
 10676                                  ; Inputs:   DS:SI point to an FCB
 10677                                  ;           ES:DI point to an FCB
 10678                                  ; Outputs:  DS:SI point to after FCB
 10679                                  ;           ES:DI point to after FCB
 10680                                  ;                 FCB from DS:SI copied and ucased to ES:DI
 10681                                  ; Carry set if there was an error.
 10682                                  ; Destroys AX,CX
 10683 00002FC0 803C20                          CMP     BYTE [SI]," "	; Don't allow blank as first letter
 10684 00002FC3 F9                              STC                     ; In case of error
 10685                                          ;retz
 10686 00002FC4 749A                    	JZ	SHORT BUILDFCB_RETN
 10687                                  
 10688                                          ;IF      KANJI
 10689                                          ;MOV     CX,8
 10690                                          ;CMP     BYTE PTR [SI],0E5H
 10691                                          ;JNZ     MOVCHK
 10692                                          ;INC     SI
 10693                                          ;MOV     AL,5
 10694                                          ;STOSB
 10695                                          ;MOVSB
 10696                                          ;MOV     CX,6
 10697                                  ;MOVCHK:
 10698                                          ;CALL    GETLET
 10699                                          ;JB      RET6
 10700                                          ;JNZ     STOLET          ; Is it a delimiter?
 10701                                          ;CMP     AL," "          ; This is the only delimiter allowed
 10702                                          ;STC                     ; In case of error
 10703                                          ;JNZ     RET6
 10704                                  ;STOLET:
 10705                                          ;STOSB
 10706                                          ;CALL    TESTKANJ
 10707                                          ;JZ      MOVLP           ;No
 10708                                          ;LODSB                   ;Get second byte
 10709                                          ;DEC     CX
 10710                                          ;JZ      BOUNDERR        ;Attempt to cross boundry
 10711                                          ;STOSB
 10712                                  ;MOVLP:
 10713                                          ;LOOP    MOVCHK
 10714                                          ;MOV     CX,3
 10715                                  ;MOVCHK2:
 10716                                          ;CALL    GETLET
 10717                                          ;JB      RET6
 10718                                          ;JNZ     STOLET2         ; Is it a delimiter?
 10719                                          ;CMP     AL," "          ; This is the only delimiter allowed
 10720                                          ;STC                     ; In case of error
 10721                                          ;retnz
 10722                                  ;STOLET2:
 10723                                          ;STOSB
 10724                                          ;CALL    TESTKANJ
 10725                                          ;JZ      MOVLP2          ;No
 10726                                          ;LODSB                   ;Get second byte
 10727                                          ;DEC     CX
 10728                                          ;JNZ     DOSTORE
 10729                                  ;BOUNDERR:                       ;Attempt to cross boundry
 10730                                          ;STC
 10731                                          ;return
 10732                                  
 10733                                  ;DOSTORE:
 10734                                          ;STOSB
 10735                                  ;MOVLP2:
 10736                                          ;LOOP    MOVCHK2
 10737                                          ;ELSE
 10738 00002FC6 B90B00                          MOV     CX,11
 10739                                  MOVCHK:
 10740 00002FC9 E80E00                          CALL    GETLET
 10741 00002FCC 720B                            JB      SHORT RET6
 10742 00002FCE 7505                            JNZ     SHORT STOLET	; Is it a delimiter?
 10743 00002FD0 3C20                            CMP     AL," "          ; This is the only delimiter allowed
 10744 00002FD2 F9                              STC                     ; In case of error
 10745                                          ;retnz
 10746                                  	;JNZ	SHORT BUILDFCB_RETN
 10747 00002FD3 7504                    	JNZ	SHORT RET6
 10748                                  STOLET:
 10749 00002FD5 AA                              STOSB
 10750 00002FD6 E2F1                            LOOP    MOVCHK
 10751                                          ;ENDIF
 10752                                  
 10753 00002FD8 F8                              CLC                     ; Got through whole name - no error
 10754                                  RET6:   
 10755 00002FD9 C3                      	RETN
 10756                                  
 10757                                  ;SUBTTL GETLET, DELIM -- CHECK CHARACTERS AND CONVERT
 10758                                  
 10759                                  GETLET:
 10760                                  
 10761                                  ; Get a byte from [SI], convert it to upper case, and compare for delimiter.
 10762                                  ; ZF set if a delimiter, CY set if a control character (other than TAB).
 10763                                          
 10764 00002FDA AC                      	LODSB
 10765                                  
 10766 00002FDB 3C61                            CMP     AL,"a"
 10767 00002FDD 7206                            JB      SHORT CHK1
 10768 00002FDF 3C7A                            CMP     AL,"z"
 10769 00002FE1 7702                            JA      SHORT CHK1
 10770 00002FE3 2C20                            SUB     AL,20H          ; Convert to upper case
 10771                                  CHK1:
 10772 00002FE5 56                              PUSH    SI
 10773                                          ;MOV     SI,[Current_Country]
 10774 00002FE6 2E8B36[A401]                    MOV	SI, [CS:Current_Country] ; Retro DOS v2.0 - 13/03/2018
 10775 00002FEB 83C612                  	ADD     SI,INTERNAT_BLOCK.Map_call
 10776 00002FEE 0E                              PUSH    CS              ; CS for long return
 10777 00002FEF 2EFF14                          CALL    WORD [CS:SI]
 10778 00002FF2 5E                              POP     SI
 10779                                  CHK:
 10780 00002FF3 3C2E                            CMP     AL,"."
 10781                                          ;retz
 10782 00002FF5 74E2                            JZ	SHORT RET6
 10783 00002FF7 3C22                    	CMP     AL,'"'
 10784                                          ;retz
 10785 00002FF9 74DE                            JZ	SHORT RET6 
 10786 00002FFB E83100                          CALL    PATHCHRCMP
 10787                                          ;retz
 10788 00002FFE 74D9                            JZ	SHORT RET6
 10789 00003000 3C5B                            CMP     AL,"["
 10790                                          ;retz
 10791 00003002 74D5                            JZ	SHORT RET6
 10792 00003004 3C5D                            CMP     AL,"]"
 10793                                          ;retz
 10794 00003006 74D1                            JZ	SHORT RET6
 10795                                  
 10796                                  DELIM:
 10797 00003008 3C3A                            CMP     AL,":"          ; Allow ":" as separator in IBM version
 10798                                          ;retz
 10799 0000300A 74CD                            JZ	SHORT RET6
 10800                                  
 10801 0000300C 3C3C                            CMP     AL,"<"
 10802                                          ;retz
 10803 0000300E 74C9                            JZ	SHORT RET6
 10804 00003010 3C7C                            CMP     AL,"|"
 10805                                          ;retz
 10806 00003012 74C5                            JZ	SHORT RET6
 10807 00003014 3C3E                            CMP     AL,">"
 10808                                          ;retz
 10809 00003016 74C1                            JZ	SHORT RET6
 10810                                  
 10811 00003018 3C2B                            CMP     AL,"+"
 10812                                          ;retz
 10813 0000301A 74BD                            JZ	SHORT RET6
 10814 0000301C 3C3D                            CMP     AL,"="
 10815                                          ;retz
 10816 0000301E 74B9                            JZ	SHORT RET6
 10817 00003020 3C3B                            CMP     AL,";"
 10818                                          ;retz
 10819 00003022 74B5                            JZ	SHORT RET6
 10820 00003024 3C2C                            CMP     AL,","
 10821                                          ;retz
 10822 00003026 74B1                            JZ	SHORT RET6
 10823                                  SPCHK:
 10824 00003028 3C09                            CMP     AL,9            ; Filter out tabs too
 10825                                          ;retz
 10826 0000302A 74AD                            JZ	SHORT RET6
 10827                                  
 10828                                  ; WARNING! " " MUST be the last compare
 10829                                  
 10830 0000302C 3C20                            CMP     AL," "
 10831                                  GETLET_RETN:
 10832 0000302E C3                              RETN
 10833                                  
 10834                                  PATHCHRCMP:
 10835                                  
 10836 0000302F 3C2F                            CMP     AL,'/'
 10837                                          ;retz
 10838 00003031 74FB                            JZ	SHORT GETLET_RETN
 10839 00003033 3C5C                    	CMP     AL,'\'
 10840 00003035 C3                              RETN
 10841                                  
 10842                                          ;IF      KANJI
 10843                                  ;procedure   TESTKANJ,NEAR
 10844                                          ;CMP     AL,81H
 10845                                          ;JB      NOTLEAD
 10846                                          ;CMP     AL,9FH
 10847                                          ;JBE     ISLEAD
 10848                                          ;CMP     AL,0E0H
 10849                                          ;JB      NOTLEAD
 10850                                          ;CMP     AL,0FCH
 10851                                          ;JBE     ISLEAD
 10852                                  ;NOTLEAD:
 10853                                          ;PUSH    AX
 10854                                          ;XOR     AX,AX           ;Set zero
 10855                                          ;POP     AX
 10856                                          ;return
 10857                                  ;ISLEAD:
 10858                                          ;PUSH    AX
 10859                                          ;XOR     AX,AX           ;Set zero
 10860                                          ;INC     AX              ;Reset zero
 10861                                          ;POP     AX
 10862                                          ;return
 10863                                  ;TESTKANJ  ENDP
 10864                                          ;ENDIF
 10865                                  ;do_ext
 10866                                  ;
 10867                                  ;CODE	ENDS
 10868                                  ;    END
 10869                                  
 10870                                  ;============================================================================
 10871                                  ; PROC.ASM (1)
 10872                                  ;============================================================================
 10873                                  
 10874                                  ; process control system calls for MSDOS
 10875                                  ;
 10876                                  
 10877                                  ;INCLUDE DOSSEG.ASM
 10878                                  
 10879                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
 10880                                  ;        ASSUME  SS:DOSGROUP,CS:DOSGROUP
 10881                                  
 10882                                  ;.xlist
 10883                                  ;.xcref
 10884                                  ;INCLUDE DOSSYM.ASM
 10885                                  ;INCLUDE DEVSYM.ASM
 10886                                  ;.cref
 10887                                  ;.list
 10888                                  
 10889                                  ;SUBTTL $WAIT - return previous process error code
 10890                                  ;PAGE
 10891                                  ;
 10892                                  ; process control data
 10893                                  ;
 10894                                         ; i_need  exit_code,WORD          ; code of exit
 10895                                  
 10896                                  ;
 10897                                  ;   Assembler usage:
 10898                                  ;           MOV     AH, Wait
 10899                                  ;           INT     int_command
 10900                                  ;         AX has the exit code
 10901                                  
 10902                                          ;procedure   $WAIT,NEAR
 10903                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 10904                                  _$WAIT:
 10905                                  	; 15/03/2018
 10906                                          ;MOV     AX,[exit_code]
 10907 00003036 36A1[F603]                      MOV     AX,[SS:exit_code]
 10908 0000303A 31D2                    	XOR     DX,DX
 10909                                          ;MOV     [exit_code],DX
 10910 0000303C 368916[F603]                    MOV     [SS:exit_code],DX
 10911                                          ;transfer SYS_RET_OK
 10912 00003041 E99FD8                  	JMP	SYS_RET_OK
 10913                                  
 10914                                  ;$WAIT   ENDP
 10915                                  
 10916                                  ; ---------------------------------------------------------------------------
 10917                                  
 10918                                  ;;IF IBM
 10919                                  ;        ;procedure $EXEC,NEAR
 10920                                  ;_$EXEC:
 10921                                  ;        ;error   error_invalid_function  ; error macro
 10922                                  ;	MOV	AL,error_invalid_function
 10923                                  ;	jmp	SYS_RET_ERR
 10924                                  ;
 10925                                  ;$EXEC   ENDP
 10926                                  ;ENDIF
 10927                                  
 10928                                  ;IF NOT IBM
 10929                                  ;INCLUDE EXEC.ASM
 10930                                  ;ENDIF
 10931                                  
 10932                                  ; 15/04/2018
 10933                                  ;----------------------------------------------------------------------------
 10934                                  ; EXEC.ASM (MSDOS 2.0)
 10935                                  ;----------------------------------------------------------------------------
 10936                                  
 10937                                  ;SUBTTL $exec - load/go a program
 10938                                  ;PAGE
 10939                                  ;
 10940                                  ; Assembler usage:
 10941                                  ;           LDS     DX, name
 10942                                  ;           LES     BX, blk
 10943                                  ;           MOV     AH, Exec
 10944                                  ;           MOV     AL, func
 10945                                  ;           INT     int_command
 10946                                  ;
 10947                                  ;       AL  Function
 10948                                  ;       --  --------
 10949                                  ;        0  Load and execute the program.
 10950                                  ;        1  Load, create the program header but do not
 10951                                  ;           begin execution.
 10952                                  ;        3  Load overlay. No header created.
 10953                                  ;
 10954                                  ;           AL = 0 -> load/execute program
 10955                                  ;
 10956                                  ;           +---------------------------+
 10957                                  ;           | WORD segment address of   |
 10958                                  ;           | environment.              |
 10959                                  ;           +---------------------------+
 10960                                  ;           | DWORD pointer to ASCIZ    |
 10961                                  ;           | command line at 80h       |
 10962                                  ;           +---------------------------+
 10963                                  ;           | DWORD pointer to default  |
 10964                                  ;           | FCB to be passed at 5Ch   |
 10965                                  ;           +---------------------------+
 10966                                  ;           | DWORD pointer to default  |
 10967                                  ;           | FCB to be passed at 6Ch   |
 10968                                  ;           +---------------------------+
 10969                                  ;
 10970                                  ;           AL = 1 -> load program
 10971                                  ;
 10972                                  ;           +---------------------------+
 10973                                  ;           | WORD segment address of   |
 10974                                  ;           | environment.              |
 10975                                  ;           +---------------------------+
 10976                                  ;           | DWORD pointer to ASCIZ    |
 10977                                  ;           | command line at 80h       |
 10978                                  ;           +---------------------------+
 10979                                  ;           | DWORD pointer to default  |
 10980                                  ;           | FCB to be passed at 5Ch   |
 10981                                  ;           +---------------------------+
 10982                                  ;           | DWORD pointer to default  |
 10983                                  ;           | FCB to be passed at 6Ch   |
 10984                                  ;           +---------------------------+
 10985                                  ;           | DWORD returned value of   |
 10986                                  ;           | CS:IP                     |
 10987                                  ;           +---------------------------+
 10988                                  ;           | DWORD returned value of   |
 10989                                  ;           | SS:IP                     |
 10990                                  ;           +---------------------------+
 10991                                  ;
 10992                                  ;           AL = 3 -> load overlay
 10993                                  ;
 10994                                  ;           +---------------------------+
 10995                                  ;           | WORD segment address where|
 10996                                  ;           | file will be loaded.      |
 10997                                  ;           +---------------------------+
 10998                                  ;           | WORD relocation factor to |
 10999                                  ;           | be applied to the image.  |
 11000                                  ;           +---------------------------+
 11001                                  ;
 11002                                  ; Returns:
 11003                                  ;           AX = exec_invalid_function
 11004                                  ;              = exec_bad_format
 11005                                  ;              = exec_bad_environment
 11006                                  ;              = exec_not_enough_memory
 11007                                  ;              = exec_file_not_found
 11008                                  ;
 11009                                  
 11010 00003044 00000000                exec_blk:            DD  0
 11011 00003048 00                      exec_func:           DB  0
 11012 00003049 0000                    exec_fh:             DW  0
 11013 0000304B 0000                    exec_rel_fac:        DW  0
 11014 0000304D 0000                    exec_res_len_para:   DW  0
 11015 0000304F 0000                    exec_init_IP:        DW  0
 11016 00003051 0000                    exec_init_CS:        DW  0
 11017 00003053 0000                    exec_init_SP:        DW  0
 11018 00003055 0000                    exec_init_SS:        DW  0
 11019 00003057 0000                    exec_environ:        DW  0
 11020 00003059 0000                    exec_size:           DW  0
 11021 0000305B 0000                    exec_load_block:     DW  0
 11022                                  
 11023 0000305D 00                      exec_load_high:      DB  0
 11024                                  
 11025                                  exec_internal_buffer EQU $
 11026 0000305E 0000                    exec_signature:      DW  0		; must contain 4D5A  (yay zibo!)
 11027 00003060 0000                    exec_len_mod_512:    DW  0		; low 9 bits of length
 11028 00003062 0000                    exec_pages:          DW  0		; number of 512b pages in file
 11029 00003064 0000                    exec_rle_count:      DW  0		; count of reloc entries
 11030 00003066 0000                    exec_par_dir:        DW  0		; number of paragraphs before image
 11031 00003068 0000                    exec_min_BSS:        DW  0		; minimum number of para of BSS
 11032 0000306A 0000                    exec_max_BSS:        DW  0		; max number of para of BSS
 11033 0000306C 0000                    exec_SS:             DW  0		; stack of image
 11034 0000306E 0000                    exec_SP:             DW  0		; SP of image
 11035 00003070 0000                    exec_chksum:         DW  0		; checksum  of file (ignored)
 11036 00003072 0000                    exec_IP:             DW  0		; IP of entry
 11037 00003074 0000                    exec_CS:             DW  0		; CS of entry
 11038 00003076 0000                    exec_rle_table:      DW  0		; byte offset of reloc table
 11039 00003078 0000                    exec_iov:            DW  0		; overlay number (0 for root)
 11040 0000307A 0000                    exec_dma:            DW  0
 11041                                  exec_internal_buffer_size EQU $-exec_internal_buffer
 11042                                  
 11043                                  ;IF NOT IBM
 11044                                  ;	procedure   $Exec,NEAR
 11045                                  ;	ASSUME  DS:NOTHING, ES:NOTHING
 11046                                  ;ENDIF
 11047                                  
 11048                                  _$EXEC:
 11049                                  	; 15/04/2018
 11050                                  ;
 11051                                  ; validate function
 11052                                  ;
 11053 0000307C 3C03                    	CMP     AL,3                    ; only 0, 1 or 3 are allowed
 11054 0000307E 7605                            JNA     short exec_check_2
 11055                                  exec_bad_fun:
 11056 00003080 B001                            mov	al, error_invalid_function
 11057                                  exec_ret_err:
 11058 00003082 E968D8                          jmp	SYS_RET_ERR
 11059                                  
 11060                                  exec_check_2:
 11061 00003085 3C02                            CMP     AL,2
 11062 00003087 74F7                            JZ      short exec_bad_fun
 11063                                  
 11064 00003089 36891E[4430]                    MOV     WORD [SS:exec_blk],BX  ; stash args
 11065 0000308E 368C06[4630]                    MOV     WORD [SS:exec_blk+2],ES
 11066 00003093 36A2[4830]                      MOV     BYTE [SS:exec_func],AL
 11067 00003097 36C606[5D30]00                  MOV     BYTE [SS:exec_load_high],0
 11068                                  
 11069 0000309D 30C0                            XOR     AL,AL                   ; open for reading
 11070 0000309F E86A09                          call	_$OPEN			; is the file there?
 11071 000030A2 72DE                            JC      short exec_ret_err
 11072                                  
 11073 000030A4 36A3[4930]                      MOV     [SS:exec_fh],AX
 11074 000030A8 89C3                            MOV     BX,AX
 11075                                  
 11076 000030AA 30C0                            XOR     AL,AL
 11077 000030AC E8E10E                          call	_$IOCTL
 11078                                  
 11079 000030AF F6C280                          TEST    DL,devid_ISDEV
 11080 000030B2 7404                            JZ	short exec_check_environ
 11081 000030B4 B002                            MOV     AL,exec_file_not_found
 11082 000030B6 72CA                            JC      short exec_ret_err
 11083                                  
 11084                                  exec_check_environ:
 11085 000030B8 36C706[5B30]0000                MOV     WORD [SS:exec_load_block],0
 11086                                  
 11087 000030BF 36F606[4830]02                  TEST    BYTE [SS:exec_func],exec_func_overlay ; overlays.. no environment
 11088 000030C5 754F                            JNZ     short exec_read_header
 11089 000030C7 36C536[4430]                    LDS     SI,[SS:exec_blk] 	; get block
 11090 000030CC 8B04                            MOV     AX,[SI]   		; address of environ
 11091 000030CE 09C0                            OR      AX,AX
 11092 000030D0 7510                            JNZ     short exec_scan_env
 11093 000030D2 368E1E[8B01]                    MOV     DS,[SS:CurrentPDB]
 11094 000030D7 A12C00                          MOV     AX,[PDB.ENVIRON]
 11095 000030DA 36A3[5730]                      MOV     [SS:exec_environ],AX
 11096 000030DE 09C0                            OR      AX,AX
 11097 000030E0 7434                            JZ      short exec_read_header
 11098                                  
 11099                                  exec_scan_env:
 11100 000030E2 FC                              CLD
 11101 000030E3 8EC0                            MOV     ES,AX
 11102 000030E5 31FF                            XOR     DI,DI
 11103 000030E7 B9FF7F                          MOV     CX,07FFFh               ; at most 32k of environment
 11104 000030EA 30C0                            XOR     AL,AL
 11105                                  
 11106                                  exec_get_environ_len:
 11107 000030EC F2AE                            REPNZ   SCASB                   ; find that nul byte
 11108 000030EE 7405                            JZ      short exec_check	; CX is out... bad environment
 11109 000030F0 B00A                            MOV     AL,exec_bad_environment
 11110 000030F2 E98B00                          JMP     exec_bomb
 11111                                  
 11112                                  exec_check:
 11113 000030F5 AE                              SCASB                           ; is there another nul byte?
 11114 000030F6 75F4                            JNZ	short exec_get_environ_len ; no, scan some more
 11115 000030F8 57                              PUSH    DI
 11116 000030F9 89FB                            MOV     BX,DI                   ; AX <- length of environment
 11117 000030FB 83C30F                          ADD     BX,0Fh
 11118 000030FE B104                            MOV     CL,4
 11119 00003100 D3EB                            SHR     BX,CL                   ; number of paragraphs needed
 11120 00003102 06                              PUSH    ES
 11121 00003103 E812E0                  	call	_$ALLOC			; can we get the space?
 11122 00003106 1F                              POP     DS
 11123 00003107 59                              POP     CX
 11124                                          ;JNC	short exec_save_environ
 11125                                          ;JMP	short exec_no_mem	; nope... cry and sob
 11126 00003108 7270                    	jc	short exec_no_mem
 11127                                  
 11128                                  exec_save_environ:
 11129 0000310A 8EC0                            MOV     ES,AX
 11130 0000310C 36A3[5730]                      MOV     [SS:exec_environ],AX	; save him for a rainy day
 11131                                  
 11132 00003110 31F6                            XOR     SI,SI
 11133 00003112 31FF                            XOR     DI,DI
 11134 00003114 F3A4                            REP     MOVSB                   ; copy the environment
 11135                                  
 11136                                  exec_read_header:
 11137                                  ;
 11138                                  ; We read in the program header into the above data area and determine
 11139                                  ; where in this memory the image will be located.
 11140                                  ;
 11141 00003116 16                              PUSH    SS
 11142 00003117 1F                              POP     DS                      ; and put it in DS:DX
 11143                                  	;ASSUME  DS:DOSGROUP
 11144                                  
 11145 00003118 B91E00                          MOV     CX,exec_internal_buffer_size; header size
 11146 0000311B 8B1E[4930]                      MOV     BX,[exec_fh]            ; from the handle
 11147 0000311F BA[5E30]                        MOV     DX,exec_signature
 11148                                  
 11149 00003122 06                              PUSH    ES
 11150 00003123 1E                              PUSH    DS
 11151 00003124 E87103                          CALL    exec_dealloc
 11152 00003127 E8BA0D                  	call	_$READ
 11153 0000312A E87403                          CALL    exec_alloc
 11154 0000312D 1F                              POP     DS
 11155 0000312E 07                              POP     ES
 11156 0000312F 724D                            JC	short exec_bad_file
 11157 00003131 83F81E                          CMP     AX,exec_internal_buffer_size; did we read the right number?
 11158 00003134 7519                            JNZ     short exec_com_filej	; yep... continue
 11159 00003136 833E[6A30]00                    CMP	word [exec_max_BSS],0
 11160 0000313B 7505                            JNZ     short exec_check_sig
 11161 0000313D C606[5D30]FF                    MOV     byte [exec_load_high],-1
 11162                                  exec_check_sig:
 11163 00003142 A1[5E30]                        MOV     AX,[exec_signature]
 11164 00003145 3D4D5A                          CMP     AX,exe_valid_signature  ; zibo arises!
 11165 00003148 7408                            JZ      short exec_save_start	; assume com file if no signature
 11166 0000314A 3D5A4D                          CMP     AX,exe_valid_old_signature  ; zibo arises!
 11167 0000314D 7403                            JZ      short exec_save_start	; assume com file if no signature
 11168                                  
 11169                                  exec_com_filej:
 11170 0000314F E97C01                          JMP	exec_com_file
 11171                                  
 11172                                  ;
 11173                                  ; We have the program header... determine memory requirements
 11174                                  ;
 11175                                  exec_save_start:
 11176 00003152 A1[6230]                        MOV     AX,[exec_pages]         ; get 512-byte pages
 11177 00003155 B105                            MOV     CL,5                    ; convert to paragraphs
 11178 00003157 D3E0                            SHL     AX,CL
 11179 00003159 2B06[6630]                      SUB     AX,[exec_par_dir]       ; AX = size in paragraphs
 11180 0000315D A3[4D30]                        MOV     [exec_res_len_para],AX
 11181                                  
 11182                                  ;
 11183                                  ; Do we need to allocate memory?  Yes if function is not load-overlay
 11184                                  ;
 11185 00003160 F606[4830]02                    TEST    BYTE [exec_func],exec_func_overlay
 11186 00003165 7429                            JZ      short exec_allocate	; allocation of space
 11187                                  ;
 11188                                  ; get load address from block
 11189                                  ;
 11190 00003167 C43E[4430]                      LES     DI,[exec_blk]
 11191 0000316B 268B05                          MOV     AX,[ES:DI]
 11192 0000316E A3[7A30]                        MOV     [exec_dma],AX
 11193 00003171 268B4502                        MOV     AX,[ES:DI+2]
 11194 00003175 A3[4B30]                        MOV     [exec_rel_fac],AX
 11195 00003178 EB78                            JMP     short exec_find_res
 11196                                  
 11197                                  exec_no_mem:
 11198 0000317A B008                            MOV     AL,exec_not_enough_memory
 11199 0000317C EB02                            JMP     SHORT exec_bomb             ; AX should be set by $ALLOC
 11200                                  
 11201                                  exec_bad_file:
 11202 0000317E B00B                            MOV     AL,exec_bad_format
 11203                                  
 11204                                  exec_bomb:
 11205                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 11206 00003180 50                              PUSH    AX
 11207 00003181 368B1E[4930]                    MOV     BX,[SS:exec_fh]
 11208 00003186 E80F03                          CALL    exec_dealloc
 11209 00003189 E8B80C                  	call	_$CLOSE
 11210 0000318C 58                              POP     AX
 11211 0000318D E95DD7                  	jmp	SYS_RET_ERR
 11212                                  
 11213                                  exec_allocate:
 11214                                  	;ASSUME  DS:DOSGROUP
 11215 00003190 50                              PUSH    AX
 11216 00003191 BBFFFF                          MOV     BX,0FFFFh               ; see how much room in arena
 11217 00003194 1E                              PUSH    DS
 11218 00003195 E880DF                  	call	_$ALLOC			; should have carry set and BX has max
 11219 00003198 1F                              POP     DS
 11220 00003199 58                              POP     AX
 11221 0000319A 83C010                          ADD     AX,10h                  ; room for header
 11222 0000319D 83FB11                          CMP     BX,11h                  ; enough room for a header
 11223 000031A0 72D8                            JB	short exec_no_mem
 11224 000031A2 39D8                            CMP     AX,BX                   ; is there enough for bare image?
 11225 000031A4 77D4                            JA	short exec_no_mem
 11226 000031A6 803E[5D30]00                    CMP     byte [exec_load_high],0	; if load high, use max
 11227 000031AB 7518                            JNZ     short exec_BX_max	; use max
 11228 000031AD 0306[6830]                      ADD     AX,[exec_min_BSS]       ; go for min allocation
 11229 000031B1 72C7                            JC	short exec_no_mem             ; oops! carry
 11230 000031B3 39D8                            CMP     AX,BX                   ; enough space?
 11231 000031B5 77C3                            JA	short exec_no_mem	; nope...
 11232 000031B7 2B06[6830]                      SUB     AX,[exec_min_BSS]
 11233 000031BB 0306[6A30]                      ADD     AX,[exec_max_BSS]       ; go for the MAX
 11234 000031BF 7204                            JC      exec_BX_max
 11235 000031C1 39D8                            CMP     AX,BX
 11236 000031C3 7602                            JBE	short exec_got_block
 11237                                  
 11238                                  exec_BX_max:
 11239 000031C5 89D8                            MOV     AX,BX
 11240                                  
 11241                                  exec_got_block:
 11242 000031C7 1E                              PUSH    DS
 11243 000031C8 89C3                            MOV     BX,AX
 11244 000031CA 891E[5930]                      MOV     [exec_size],BX
 11245 000031CE E847DF                  	call	_$ALLOC                  ; get the space
 11246 000031D1 1F                              POP     DS
 11247 000031D2 72A6                            JC	short exec_no_mem
 11248 000031D4 A3[5B30]                        MOV     [exec_load_block],AX
 11249 000031D7 83C010                          ADD     AX,10h
 11250 000031DA 803E[5D30]00                    CMP     byte [exec_load_high],0
 11251 000031DF 740B                            JZ      short exec_use_ax	; use ax for load info
 11252 000031E1 0306[5930]                      ADD     AX,[exec_size]          ; go to end
 11253 000031E5 2B06[4D30]                      SUB     AX,[exec_res_len_para]  ; drop off header
 11254 000031E9 83E810                          SUB     AX,10h                  ; drop off pdb
 11255                                  exec_use_ax:
 11256 000031EC A3[4B30]                        MOV     [exec_rel_fac],AX       ; new segment
 11257 000031EF A3[7A30]                        MOV     [exec_dma],AX           ; beginning of dma
 11258                                  
 11259                                  ;
 11260                                  ; Determine the location in the file of the beginning of the resident
 11261                                  ;
 11262                                  exec_find_res:
 11263 000031F2 8B16[6630]                      MOV     DX,[exec_par_dir]
 11264 000031F6 52                              PUSH    DX
 11265 000031F7 B104                            MOV     CL,4
 11266 000031F9 D3E2                            SHL     DX,CL                   ; low word of location
 11267 000031FB 58                              POP     AX
 11268 000031FC B10C                            MOV     CL,12
 11269 000031FE D3E8                            SHR     AX,CL                   ; high word of location
 11270 00003200 89C1                            MOV     CX,AX                   ; CX <- high
 11271                                  
 11272                                  ;
 11273                                  ; Read in the resident image (first, seek to it)
 11274                                  ;
 11275 00003202 8B1E[4930]                      MOV     BX,[exec_fh]
 11276 00003206 1E                              PUSH    DS
 11277 00003207 30C0                            XOR     AL,AL
 11278 00003209 E82F0D                  	call	_$LSEEK			; seek to resident
 11279 0000320C 1F                              POP     DS
 11280                                  
 11281                                  exec_big_read:                          ; Read resident into memory
 11282 0000320D 8B1E[4D30]                      MOV     BX,[exec_res_len_para]
 11283 00003211 81FB0010                        CMP     BX,1000h                ; too many bytes to read?
 11284 00003215 7203                            JB      exec_read_ok
 11285 00003217 BBE00F                          MOV     BX,0FE0h                ; max in one chunk FE00 bytes
 11286                                  
 11287                                  exec_read_ok:
 11288 0000321A 291E[4D30]                      SUB     [exec_res_len_para],BX  ; we read (soon) this many
 11289 0000321E 53                              PUSH    BX
 11290 0000321F B104                            MOV     CL,4
 11291 00003221 D3E3                            SHL     BX,CL                   ; get count in bytes from paras
 11292 00003223 89D9                            MOV     CX,BX                   ; count in correct register
 11293 00003225 8B1E[4930]                      MOV     BX,[exec_fh]            ; handle in correct register
 11294 00003229 1E                              PUSH    DS
 11295 0000322A 8E1E[7A30]                      MOV     DS,[exec_dma]           ; Set up read buffer
 11296                                          ;ASSUME  DS:NOTHING
 11297 0000322E 31D2                            XOR     DX,DX
 11298 00003230 51                              PUSH    CX                      ; save our count
 11299 00003231 E86402                          CALL    exec_dealloc
 11300 00003234 E8AD0C                  	call	_$READ			; WOMP!
 11301 00003237 E86702                          CALL    exec_alloc
 11302 0000323A 59                              POP     CX                      ; get old count to verify
 11303 0000323B 1F                              POP     DS
 11304                                  	;ASSUME  DS:DOSGROUP
 11305 0000323C 39C1                            CMP     CX,AX                   ; did we read enough?
 11306 0000323E 5B                              POP     BX                      ; get paragraph count back
 11307 0000323F 750B                            JNZ	short exec_do_reloc	; and do reloc if no more to read
 11308                                  ;
 11309                                  ; We've read in CX bytes... bump DTA location
 11310                                  ;
 11311                                  
 11312 00003241 011E[7A30]                      ADD     [exec_dma],BX           ; bump dma address
 11313 00003245 833E[4D30]00                    CMP     WORD [exec_res_len_para],0
 11314 0000324A 75C1                            JNZ     short exec_big_read
 11315                                  
 11316                                  ;
 11317                                  ; The image has now been read in.  We must perform relocation to
 11318                                  ; the current location.
 11319                                  ;
 11320                                  
 11321                                  exec_do_reloc:
 11322 0000324C 8B0E[4B30]                      MOV     CX,[exec_rel_fac]
 11323 00003250 A1[6C30]                        MOV     AX,[exec_SS]            ; get initial SS
 11324 00003253 01C8                            ADD     AX,CX                   ; and relocate him
 11325 00003255 A3[5530]                        MOV     [exec_init_SS],AX
 11326                                  
 11327 00003258 A1[6E30]                        MOV     AX,[exec_SP]            ; initial SP
 11328 0000325B A3[5330]                        MOV     [exec_init_SP],AX
 11329                                  
 11330 0000325E C406[7230]                      LES     AX,[exec_IP]
 11331 00003262 A3[4F30]                        MOV     [exec_init_IP],AX
 11332 00003265 8CC0                            MOV     AX,ES
 11333 00003267 01C8                            ADD     AX,CX                   ; relocated...
 11334 00003269 A3[5130]                        MOV     [exec_init_CS],AX
 11335                                  
 11336 0000326C 31C9                            XOR     CX,CX
 11337 0000326E 8B16[7630]                      MOV     DX,[exec_rle_table]
 11338 00003272 8B1E[4930]                      MOV     BX,[exec_fh]
 11339 00003276 1E                              PUSH    DS
 11340 00003277 31C0                            XOR     AX,AX
 11341 00003279 E8BF0C                  	call	_$LSEEK
 11342 0000327C 1F                              POP     DS
 11343 0000327D 7303                            JNC     short exec_get_entries
 11344                                  exec_bad_filej:
 11345 0000327F E9FCFE                          JMP     exec_bad_file
 11346                                  
 11347                                  exec_get_entries:
 11348 00003282 8B16[6430]                      MOV     DX,[exec_rle_count]     ; Number of entries left
 11349                                  
 11350                                  exec_read_reloc:
 11351                                          ;ASSUME  DS:NOTHING
 11352 00003286 52                              PUSH    DX
 11353 00003287 BA[5E30]                        MOV     DX,exec_signature
 11354 0000328A B91C00                          MOV     CX,((exec_internal_buffer_size)/4)*4
 11355 0000328D 368B1E[4930]                    MOV     BX,[SS:exec_fh]
 11356 00003292 1E                              PUSH    DS
 11357 00003293 E80202                          CALL    exec_dealloc
 11358 00003296 E84B0C                  	call	_$READ
 11359 00003299 E80502                          CALL    exec_alloc
 11360 0000329C 07                              POP     ES
 11361 0000329D 5A                              POP     DX
 11362 0000329E 72DF                            JC      short exec_bad_filej
 11363 000032A0 B90700                          MOV     CX,(exec_internal_buffer_size)/4
 11364 000032A3 BF[5E30]                        MOV     DI,exec_signature	; Pointer to byte location in header
 11365                                  ;
 11366                                  ; Relocate a single address
 11367                                  ;
 11368 000032A6 368B36[4B30]                    MOV     SI,[SS:exec_rel_fac]
 11369                                  
 11370                                  exec_reloc_one:
 11371 000032AB 83FA00                          CMP     DX,0                    ; Any more entries?
 11372                                          ;JNE	short exec_get_addr
 11373                                          ;JMP	exec_set_PDB
 11374 000032AE 0F84B800                	je	exec_set_PDB
 11375                                  
 11376                                  exec_get_addr:
 11377 000032B2 26C51D                          LDS     BX,[ES:DI]		; Get ra/sa of entry
 11378 000032B5 8CD8                            MOV     AX,DS                   ; Relocate address of item
 11379 000032B7 01F0                            ADD     AX,SI
 11380 000032B9 8ED8                            MOV     DS,AX
 11381 000032BB 8B07                            MOV     AX,[BX]			; Relocate item
 11382 000032BD 01F0                            ADD     AX,SI
 11383 000032BF 8907                            MOV     [BX],AX
 11384 000032C1 83C704                          ADD     DI,4
 11385 000032C4 4A                              DEC     DX
 11386 000032C5 E2E4                            LOOP    exec_reloc_one		; End of internal buffer?
 11387                                  ;
 11388                                  ; We've exhausted a single buffer's worth.  Read in the next piece
 11389                                  ; of the relocation table.
 11390                                  ;
 11391 000032C7 06                              PUSH    ES
 11392 000032C8 1F                              POP     DS
 11393 000032C9 EBBB                            JMP     short exec_read_reloc
 11394                                  
 11395                                  exec_no_memj:
 11396 000032CB E9ACFE                          JMP     exec_no_mem
 11397                                  ;
 11398                                  ; we have a .COM file.  First, determine if we are merely loading an overlay.
 11399                                  ;
 11400                                  exec_com_file:
 11401 000032CE 36F606[4830]02                  TEST    byte [SS:exec_func],exec_func_overlay
 11402 000032D4 740C                            JZ      short exec_alloc_com_file
 11403 000032D6 36C536[4430]                    LDS     SI,[SS:exec_blk]	; get arg block
 11404 000032DB AD                              LODSW                           ; get load address
 11405 000032DC 36A3[7A30]                      MOV     [SS:exec_dma],AX
 11406 000032E0 EB30                            JMP     SHORT exec_64K		; read it all!
 11407                                  
 11408                                  ; We must allocate the max possible size block (ick!) and set up
 11409                                  ; CS=DS=ES=SS=PDB pointer, IP=100, SP=max size of block.
 11410                                  ;
 11411                                  exec_alloc_com_file:
 11412 000032E2 BBFFFF                          MOV     BX,0FFFFh
 11413 000032E5 E830DE                  	call	_$ALLOC			; largest piece available as error
 11414 000032E8 09DB                            OR      BX,BX
 11415 000032EA 74DF                            JZ	short exec_no_memj
 11416 000032EC 36891E[5930]                    MOV     [SS:exec_size],BX	; save size of allocation block
 11417                                  
 11418 000032F1 53                              PUSH    BX
 11419 000032F2 E823DE                  	call	_$ALLOC			; largest piece available as error
 11420 000032F5 5B                              POP     BX                      ; get size of block...
 11421                                  
 11422 000032F6 36A3[5B30]                      MOV     [SS:exec_load_block],AX
 11423 000032FA 83C010                          ADD     AX,10h                  ; increment for header
 11424 000032FD 36A3[7A30]                      MOV     [SS:exec_dma],AX
 11425 00003301 83EB10                          SUB     BX,10h                  ; remember header
 11426                                  
 11427 00003304 81FB0010                        CMP     BX,1000h                ; 64k or more?
 11428 00003308 7308                            JAE     short exec_64K		; yes, read only 64k
 11429 0000330A 89D8                            MOV     AX,BX                   ; convert size to bytes
 11430 0000330C B104                            MOV     CL,4
 11431 0000330E D3E0                            SHL     AX,CL
 11432 00003310 EB03                            JMP     SHORT exec_read_com
 11433                                  
 11434                                  exec_64K:
 11435 00003312 B8FFFF                          MOV     AX,0FFFFh               ; 64k-1 bytes
 11436                                  
 11437                                  exec_read_com:
 11438 00003315 50                              PUSH    AX                      ; save number to read
 11439 00003316 368B1E[4930]                    MOV     BX,[SS:exec_fh]		; of com file
 11440 0000331B 31C9                            XOR     CX,CX                   ; but seek to 0:0
 11441 0000331D 89CA                            MOV     DX,CX
 11442                                  
 11443 0000331F 31C0                    	XOR     AX,AX                   ; seek relative to beginning
 11444 00003321 E8170C                          call	_$LSEEK                  ; back to beginning of file
 11445                                  
 11446 00003324 368B1E[4930]                    MOV     BX,[SS:exec_fh]
 11447 00003329 59                              POP     CX                      ; number to read
 11448 0000332A 368E1E[7A30]                    MOV     DS,[SS:exec_dma]
 11449 0000332F 31D2                            XOR     DX,DX
 11450 00003331 51                              PUSH    CX
 11451 00003332 E86301                          CALL    exec_dealloc
 11452                                  
 11453 00003335 E8AC0B                  	call	_$READ			; read in com file
 11454                                  
 11455 00003338 E86601                          CALL    exec_alloc
 11456 0000333B 5E                              POP     SI                      ; get number of bytes to read
 11457 0000333C 39F0                            CMP     AX,SI                   ; did we read them all?
 11458 0000333E 748B                            JZ      short exec_no_memj	; exactly the wrong number... no memory
 11459                                  
 11460 00003340 36F606[4830]02                  TEST    BYTE [SS:exec_func],exec_func_overlay
 11461 00003346 7522                            JNZ     short exec_set_PDB	; no starto, chumo!
 11462 00003348 36A1[7A30]                      MOV     AX,[SS:exec_dma]
 11463 0000334C 83E810                          SUB     AX,10h
 11464 0000334F 36A3[5130]                      MOV     [SS:exec_init_CS],AX
 11465 00003353 36C706[4F30]0001                MOV     WORD [SS:exec_init_IP],100h ; initial IP is 100h
 11466                                          ; SI is at most FFFFh
 11467 0000335A 4E                              DEC     SI                      ; make room for stack
 11468                                          ; SI is at most FFFEh, room for a 0!
 11469 0000335B 368936[5330]                    MOV     [SS:exec_init_SP],SI	; max value for read is also SP!
 11470 00003360 36A3[5530]                      MOV     [SS:exec_init_SS],AX
 11471 00003364 8ED8                            MOV     DS,AX
 11472 00003366 C7040000                        MOV     WORD [SI],0		; 0 for return
 11473                                  
 11474                                  exec_set_PDB:
 11475 0000336A 368B1E[4930]                    MOV     BX,[SS:exec_fh]		; we are finished with the file.
 11476 0000336F E82601                          CALL    exec_dealloc
 11477                                  	
 11478 00003372 E8CF0A                  	call	_$CLOSE                  ; release the jfn
 11479                                  
 11480 00003375 E82901                          CALL    exec_alloc
 11481 00003378 36F606[4830]02                  TEST    BYTE [SS:exec_func],exec_func_overlay
 11482 0000337E 7403                            JZ	short exec_build_header
 11483 00003380 E960D5                  	jmp	SYS_RET_OK		; overlay load -> done
 11484                                  
 11485                                  exec_build_header:
 11486 00003383 368B16[5B30]                    MOV     DX,[SS:exec_load_block]
 11487                                  ;
 11488                                  ; assign the space to the process
 11489                                  ;
 11490                                  
 11491 00003388 BE0100                          MOV     SI,ARENA.OWNER		; pointer to owner field
 11492                                  
 11493 0000338B 36A1[5730]                      MOV     AX,[SS:exec_environ]	; get environ pointer
 11494 0000338F 09C0                            OR      AX,AX
 11495 00003391 7405                            JZ	short NO_OWNER		; no environment
 11496 00003393 48                              DEC     AX                      ; point to header
 11497 00003394 8ED8                            MOV     DS,AX
 11498 00003396 8914                            MOV     [SI],DX			; assign ownership
 11499                                  NO_OWNER:
 11500 00003398 36A1[5B30]                      MOV     AX,[SS:exec_load_block]	; get load block pointer
 11501 0000339C 48                              DEC     AX
 11502 0000339D 8ED8                            MOV     DS,AX                   ; point to header
 11503 0000339F 8914                            MOV     [SI],DX			; assign ownership
 11504                                  
 11505 000033A1 52                              PUSH    DX
 11506 000033A2 36C606[8D01]FF          	MOV     BYTE [SS:CreatePDB], 0FFH ; indicate a new process
 11507 000033A8 E8D4D7                  	call	_$DUP_PDB		; ES is now PDB
 11508 000033AB 5A                              POP     DX
 11509 000033AC 36FF36[5730]                    PUSH    word [SS:exec_environ]
 11510 000033B1 268F062C00                      POP     word [ES:PDB.ENVIRON]
 11511 000033B6 368B36[5930]                    MOV     SI,[SS:exec_size]
 11512 000033BB 01D6                            ADD     SI,DX
 11513 000033BD 2689360200                      MOV	[ES:PDB.BLOCK_LEN],SI
 11514                                  ;
 11515                                  ; set up proper command line stuff
 11516                                  ;
 11517 000033C2 36C536[4430]                    LDS     SI,[SS:exec_blk]	; get the block
 11518 000033C7 1E                              PUSH    DS                      ; save its location
 11519 000033C8 56                              PUSH    SI
 11520 000033C9 C57406                          LDS     SI,[SI+6]		; get the 5c fcb
 11521 000033CC B90C00                          MOV     CX,12                   ; copy drive, name and ext
 11522 000033CF 51                              PUSH    CX
 11523 000033D0 BF5C00                          MOV     DI,5Ch
 11524 000033D3 8A1C                            MOV     BL,[SI]
 11525 000033D5 F3A4                            REP     MOVSB
 11526 000033D7 31C0                            XOR     AX,AX                   ; zero extent, etc for CPM
 11527 000033D9 AB                              STOSW
 11528 000033DA AB                              STOSW
 11529 000033DB 59                              POP     CX
 11530 000033DC 5E                              POP     SI                      ; get block
 11531 000033DD 1F                              POP     DS
 11532 000033DE 1E                              PUSH    DS                      ; save (again)
 11533 000033DF 56                              PUSH    SI
 11534 000033E0 C5740A                          LDS     SI,[SI+0AH]		; get 6C FCB
 11535 000033E3 BF6C00                          MOV     DI,6Ch                  ; do same as above
 11536 000033E6 8A3C                            MOV     BH,[SI]
 11537 000033E8 F3A4                            REP     MOVSB
 11538 000033EA AB                              STOSW
 11539 000033EB AB                              STOSW
 11540 000033EC 5E                              POP     SI                      ; get block (last time)
 11541 000033ED 1F                              POP     DS
 11542 000033EE C57402                          LDS     SI,[SI+2]		; command line
 11543 000033F1 B98000                          MOV     CX,80h
 11544 000033F4 89CF                            MOV     DI,CX
 11545 000033F6 F3A4                            REP     MOVSB                   ; Wham!
 11546                                  
 11547                                  ;
 11548                                  ; Process BX into default AX (validity of drive specs on args)
 11549                                  ;
 11550 000033F8 FEC9                            DEC     CL                      ; get 0FFh in CX
 11551 000033FA 363A3E[0001]                    CMP     BH,[SS:NUMIO]
 11552 000033FF 7604                            JBE     SHORT exec_BH_good
 11553 00003401 88CF                            MOV     BH,CL
 11554 00003403 EB02                            JMP     SHORT exec_BL
 11555                                  exec_BH_good:
 11556 00003405 30FF                            XOR     BH,BH
 11557                                  exec_BL:
 11558 00003407 363A1E[0001]                    CMP     BL,[SS:NUMIO]
 11559 0000340C 7604                            JBE	SHORT exec_BL_good
 11560 0000340E 88CB                            MOV     BL,CL
 11561 00003410 EB02                            JMP     SHORT exec_set_return
 11562                                  exec_BL_good:
 11563 00003412 30DB                            XOR     BL,BL
 11564                                  exec_set_return:
 11565 00003414 E868D3                  	CALL	get_user_stack          ; get his return address
 11566 00003417 FF7414                          PUSH    WORD [SI+14H] 		; suck out the CS and IP
 11567 0000341A FF7412                          PUSH    WORD [SI+12H] 
 11568 0000341D FF7414                          PUSH    WORD [SI+14H] 		; suck out the CS and IP
 11569 00003420 FF7412                          PUSH    WORD [SI+12H]
 11570 00003423 268F060A00                      POP     WORD [ES:PDB.EXIT]
 11571 00003428 268F060C00                      POP     WORD [ES:PDB.EXIT+2]
 11572 0000342D 31C0                            XOR     AX,AX
 11573 0000342F 8ED8                            MOV     DS,AX
 11574 00003431 8F068800                        POP     WORD [addr_int_terminate] ; save them where we can get them later
 11575 00003435 8F068A00                        POP     WORD [addr_int_terminate+2] ; when the child exits.
 11576                                  
 11577 00003439 36C706[DF00]8000                MOV     WORD [SS:DMAADD],80h
 11578 00003440 368E1E[8B01]                    MOV     DS,[SS:CurrentPDB]
 11579 00003445 368C1E[E100]                    MOV     [SS:DMAADD+2],DS
 11580                                  
 11581 0000344A 36F606[4830]01                  TEST    BYTE [SS:exec_func],exec_func_no_execute
 11582 00003450 7426                            JZ      SHORT exec_go
 11583                                  
 11584 00003452 36C536[5330]                    LDS     SI,[SS:exec_init_SP]	; get stack
 11585 00003457 36C43E[4430]                    LES     DI,[SS:exec_blk]	; and block for return
 11586 0000345C 268C5D10                        MOV     [ES:DI+10H],DS     ; return SS
 11587                                  
 11588 00003460 4E                              DEC     SI                      ; 'push' default AX
 11589 00003461 4E                              DEC     SI
 11590 00003462 891C                            MOV     [SI],BX			; save default AX reg
 11591 00003464 2689750E                        MOV	[ES:DI+0EH],SI	; return 'SP'
 11592                                  
 11593 00003468 36C506[4F30]                    LDS     AX,[SS:exec_init_IP]
 11594 0000346D 268C5D14                        MOV     [ES:DI+14H],DS     ; initial entry stuff
 11595                                  
 11596 00003471 26894512                        MOV     [ES:DI+12H],AX
 11597 00003475 E96BD4                  	JMP	SYS_RET_OK
 11598                                  
 11599                                  exec_go:
 11600 00003478 36C536[4F30]                    LDS     SI,[SS:exec_init_IP]	; get entry point
 11601 0000347D FA                              CLI
 11602 0000347E 36C606[2301]00                  MOV     BYTE [SS:INDOS],0
 11603                                  
 11604 00003484 368E16[5530]                    MOV     SS,[SS:exec_init_SS]	; set up user's stack
 11605                                  	;ASSUME	SS:NOTHING
 11606 00003489 368B26[5330]                    MOV     SP,[SS:exec_init_SP]	; and SP
 11607 0000348E FB                              STI
 11608 0000348F 1E                              PUSH    DS                      ; fake long call to entry
 11609 00003490 56                              PUSH    SI
 11610 00003491 8EC2                            MOV     ES,DX                   ; set up proper seg registers
 11611 00003493 8EDA                            MOV     DS,DX
 11612 00003495 89D8                            MOV     AX,BX                   ; set up proper AX
 11613                                  	
 11614 00003497 CB                      	RETF
 11615                                  
 11616                                  exec_dealloc:
 11617 00003498 53                              PUSH	BX
 11618 00003499 BB0000                          MOV	BX,arena_owner_system	; 0
 11619 0000349C E80D00                          CALL	exec_do_change_owner
 11620 0000349F 5B                              POP	BX
 11621 000034A0 C3                              retn
 11622                                  
 11623                                  exec_alloc:
 11624 000034A1 53                              PUSH	BX
 11625 000034A2 2E8B1E[8B01]                    MOV	BX,[CS:CurrentPDB]
 11626 000034A7 E80200                          CALL	exec_do_change_owner
 11627 000034AA 5B                              POP	BX
 11628 000034AB C3                              retn
 11629                                  
 11630                                  exec_do_change_owner:
 11631 000034AC 1E                              PUSH    DS
 11632 000034AD 50                              PUSH    AX
 11633 000034AE 2EA1[5730]                      MOV     AX,[CS:exec_environ]
 11634 000034B2 09C0                            OR      AX,AX
 11635 000034B4 7407                            JZ      SHORT exec_alloc_try_load
 11636 000034B6 48                              DEC     AX
 11637 000034B7 8ED8                            MOV     DS,AX
 11638 000034B9 891E0100                        MOV     [ARENA.OWNER],BX
 11639                                  exec_alloc_try_load:
 11640 000034BD 2EA1[5B30]                      MOV     AX,[CS:exec_load_block]
 11641 000034C1 09C0                            OR      AX,AX
 11642 000034C3 7407                            JZ      SHORT exec_alloc_done
 11643 000034C5 48                              DEC     AX
 11644 000034C6 8ED8                            MOV     DS,AX
 11645 000034C8 891E0100                        MOV     [ARENA.OWNER],BX
 11646                                  exec_alloc_done:
 11647 000034CC 58                              POP     AX
 11648 000034CD 1F                              POP     DS
 11649 000034CE C3                              RETN
 11650                                  
 11651                                  ;============================================================================
 11652                                  ; PROC.ASM (2)
 11653                                  ;============================================================================
 11654                                  
 11655                                  ;SUBTTL Terminate and stay resident handler
 11656                                  ;PAGE
 11657                                  ;
 11658                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 11659                                  ;           truncate the current block.
 11660                                  ;
 11661                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 11662                                  ;           paragraphs long.  An exit is simulated via resetting CurrentPDB
 11663                                  ;           and restoring the vectors.
 11664                                  ;
 11665                                          ;procedure   $Keep_process,NEAR
 11666                                          ;ASSUME DS:NOTHING,ES:NOTHING,SS:DOSGROUP
 11667                                  
 11668                                  _$KEEP_PROCESS:
 11669                                  
 11670 000034CF 50                              PUSH    AX                      ; keep exit code around
 11671                                  	; 15/03/2018
 11672                                          ;MOV     BYTE [exit_type],Exit_Keep_Process
 11673                                   	;MOV     ES,[CurrentPDB]
 11674 000034D0 36C606[F803]03                  MOV     BYTE [SS:exit_type],Exit_Keep_Process
 11675 000034D6 368E06[8B01]             	MOV     ES,[SS:CurrentPDB]
 11676 000034DB 83FA06                          CMP     DX,6h                   ; keep enough space around for system
 11677 000034DE 7303                            JAE     short keep_shrink	; info
 11678 000034E0 BA0600                          MOV     DX,6h
 11679                                  keep_shrink:
 11680 000034E3 89D3                            MOV     BX,DX
 11681 000034E5 53                              PUSH    BX
 11682 000034E6 06                              PUSH    ES
 11683 000034E7 E8(4A00)                        call	$SETBLOCK               ; ignore return codes.
 11684 000034EA 1F                              POP     DS
 11685 000034EB 5B                              POP     BX
 11686 000034EC 7207                            JC      short keep_done		; failed on modification
 11687 000034EE 8CD8                            MOV     AX,DS
 11688 000034F0 01D8                            ADD     AX,BX
 11689 000034F2 A30200                          MOV     [PDB.BLOCK_LEN],AX
 11690                                  
 11691                                  keep_done:
 11692 000034F5 58                              POP     AX
 11693 000034F6 EB24                            JMP     SHORT exit_inner        ; and let abort take care of the rest
 11694                                  
 11695                                  ;$Keep_process   ENDP
 11696                                  
 11697                                          ;procedure   Stay_resident,NEAR
 11698                                          ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
 11699                                  
 11700                                  Stay_resident:        
 11701                                  	;MOV	AX,(Keep_process SHL 8) + 0 ; Lower part is return code
 11702 000034F8 B80031                  	MOV	AX,(KEEP_PROCESS*256) + 0 ; Lower part is return code
 11703 000034FB 83C20F                          ADD     DX,15
 11704 000034FE B104                            MOV     CL,4
 11705 00003500 D3EA                            SHR     DX,CL
 11706                                          ;transfer COMMAND
 11707 00003502 E947D1                  	JMP	COMMAND
 11708                                  
 11709                                  ;Stay_resident   ENDP
 11710                                  
 11711                                  ;SUBTTL $EXIT - return to parent process
 11712                                  ;PAGE
 11713                                  ;
 11714                                  ;   Assembler usage:
 11715                                  ;           MOV     AL, code
 11716                                  ;           MOV     AH, Exit
 11717                                  ;           INT     int_command
 11718                                  ;   Error return:
 11719                                  ;           None.
 11720                                  ;
 11721                                          ;procedure $EXIT,NEAR
 11722                                          ;ASSUME  DS:NOTHING,ES:NOTHING,SS:DOSGROUP
 11723                                  _$EXIT:
 11724 00003505 30E4                            XOR     AH,AH
 11725                                  	; 15/03/2018
 11726                                          ;XCHG    AH,[DidCTRLC]
 11727 00003507 368626[D600]            	XCHG    AH,[SS:DidCTRLC]
 11728 0000350C 08E4                            OR      AH,AH
 11729                                          ;MOV     BYTE [exit_type],Exit_Terminate
 11730 0000350E 36C606[F803]00                  MOV     BYTE [SS:exit_type],Exit_Terminate
 11731 00003514 7406                            JZ      SHORT exit_inner
 11732                                          ;MOV     BYTE [exit_type],Exit_Ctrl_C
 11733 00003516 36C606[F803]01                  MOV     BYTE [SS:exit_type],Exit_Ctrl_C
 11734                                  exit_inner:
 11735 0000351C E860D2                          CALL	get_user_stack
 11736                                          ;PUSH    WORD [CurrentPDB]
 11737 0000351F 36FF36[8B01]                    PUSH    WORD [SS:CurrentPDB]
 11738 00003524 8F4414                  	POP     WORD [SI+14H]
 11739                                          ;transfer abort_inner
 11740 00003527 E987D4                  	JMP	abort_inner
 11741                                  
 11742                                  ;$EXIT   ENDP
 11743                                  
 11744                                  ;do_ext
 11745                                  
 11746                                  ;CODE    ENDS
 11747                                  ;    END
 11748                                  
 11749                                  ;============================================================================
 11750                                  ; STDIO.ASM - (MSDOS 2.0)
 11751                                  ;============================================================================
 11752                                  
 11753                                  ;
 11754                                  ; Standard device IO for MSDOS (first 12 function calls)
 11755                                  ;
 11756                                  
 11757                                  ;.xlist
 11758                                  ;.xcref
 11759                                  ;INCLUDE STDSW.ASM
 11760                                  ;INCLUDE DOSSEG.ASM
 11761                                  ;.cref
 11762                                  ;.list
 11763                                  
 11764                                  ;TITLE   STDIO - device IO for MSDOS
 11765                                  ;NAME    STDIO
 11766                                  
 11767                                  ;INCLUDE IO.ASM
 11768                                  
 11769                                  ; ---------------------------------------------------------------------------
 11770                                  ;
 11771                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 11772                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 11773                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 11774                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 11775                                  ;			    to restore MSDOS 2.0 device IO source code 
 11776                                  ;
 11777                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 11778                                  ;
 11779                                  ;============================================================================
 11780                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 11781                                  ;============================================================================
 11782                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 11783                                  
 11784                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 11785                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 11786                                  
 11787                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 11788                                  ;
 11789                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 11790                                  ;	NAME	IBMCPMIO
 11791                                  
 11792                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 11793                                  ;
 11794                                  ;	$Std_Con_Input_No_Echo
 11795                                  ;	$Std_Con_String_Output
 11796                                  ;	$Std_Con_String_Input
 11797                                  ;	$RawConIO
 11798                                  ;	$RawConInput
 11799                                  ;	RAWOUT
 11800                                  ;	RAWOUT2
 11801                                  ;
 11802                                  
 11803                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 11804                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 11805                                  ; references to be SS or CS relative which is desired.
 11806                                  
 11807                                  ; ---------------------------------------------------------------------------
 11808                                  
 11809                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 11810                                  ;	NAME	CPMIO2
 11811                                  
 11812                                  ;
 11813                                  ;	Microsoft Confidential
 11814                                  ;	Copyright (C) Microsoft Corporation 1991
 11815                                  ;	All Rights Reserved.
 11816                                  ;
 11817                                  
 11818                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 11819                                  ;
 11820                                  ;	$Std_Con_Input
 11821                                  ;	$Std_Con_Output
 11822                                  ;	OUTT
 11823                                  ;	TAB
 11824                                  ;	BUFOUT
 11825                                  ;	$Std_Aux_Input
 11826                                  ;	$Std_Aux_Output
 11827                                  ;	$Std_Printer_Output
 11828                                  ;	$Std_Con_Input_Status
 11829                                  ;	$Std_Con_Input_Flush
 11830                                  ;
 11831                                  ;	Revision History:
 11832                                  ;
 11833                                  ;	  AN000	 version 4.00 - Jan. 1988
 11834                                  
 11835                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 11836                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 11837                                  ; references to be SS or CS relative which is desired.
 11838                                  
 11839                                  ;DOSCODE SEGMENT
 11840                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 11841                                  
 11842                                  
 11843                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11844                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11845                                  ;hkn;	not valid. 
 11846                                  
 11847                                  ;
 11848                                  ;----------------------------------------------------------------------------
 11849                                  ;
 11850                                  ;**	$STD_CON_INPUT - System Call 1
 11851                                  ;
 11852                                  ;	Input character from console, echo
 11853                                  ;
 11854                                  ;	ENTRY	none
 11855                                  ;	EXIT	(al) = character
 11856                                  ;	USES	ALL
 11857                                  ;
 11858                                  ;----------------------------------------------------------------------------
 11859                                  ;
 11860                                  
 11861                                  _$STD_CON_INPUT:	;System call 1
 11862                                  	
 11863 0000352A E8CF00                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11864 0000352D 50                      	PUSH	AX
 11865 0000352E E80400                  	CALL	OUTT
 11866 00003531 58                      	POP	AX
 11867                                  CON_INPUT_RETN:	
 11868 00003532 C3                      	RETN
 11869                                  
 11870                                  ;
 11871                                  ;----------------------------------------------------------------------------
 11872                                  ;
 11873                                  ;**	$STD_CON_OUTPUT - System Call 2
 11874                                  ;
 11875                                  ;	Output character to console
 11876                                  ;
 11877                                  ;	ENTRY	(dl) = character
 11878                                  ;	EXIT	none
 11879                                  ;	USES	all
 11880                                  ;
 11881                                  ;----------------------------------------------------------------------------
 11882                                  ;
 11883                                  
 11884                                  _$STD_CON_OUTPUT:	;System call 2
 11885                                  
 11886 00003533 88D0                    	MOV	AL,DL
 11887                                  
 11888                                  OUTT:
 11889 00003535 3C20                    	CMP	AL,20H ; " "
 11890 00003537 7242                    	JB	SHORT CTRLOUT
 11891 00003539 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11892 0000353B 7405                    	JZ	SHORT OUTCH
 11893                                  OUTCHA:	
 11894                                  	;INC	BYTE PTR [CARPOS]
 11895 0000353D 36FE06[D800]            	INC	BYTE [SS:CARPOS]
 11896                                  OUTCH:
 11897 00003542 1E                      	PUSH	DS
 11898 00003543 56                      	PUSH	SI
 11899                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 11900                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11901 00003544 36FE06[DE00]            	INC	BYTE [SS:CHARCO]	
 11902                                  	;AND	BYTE [SS:CHARCO],00111111B
 11903                                  	; 14/03/2018
 11904 00003549 368026[DE00]03          	and	byte [SS:CHARCO], 3  ; IBMDOS.COM, MSDOS 2.0
 11905 0000354F 7505                    	JNZ	SHORT OUTSKIP
 11906 00003551 50                      	PUSH	AX
 11907 00003552 E8B0F6                  	CALL	STATCHK
 11908 00003555 58                      	POP	AX
 11909                                  OUTSKIP:
 11910 00003556 E8D0D5                  	CALL	RAWOUT				;output the character
 11911 00003559 5E                      	POP	SI
 11912 0000355A 1F                      	POP	DS
 11913                                  
 11914                                  	;TEST	BYTE PTR [PFLAG],-1
 11915                                  	;retz
 11916 0000355B 36F606[DA00]FF          	TEST	BYTE [SS:PFLAG],-1
 11917 00003561 74CF                    	JZ	SHORT CON_INPUT_RETN
 11918                                  
 11919 00003563 53                      	PUSH	BX
 11920 00003564 1E                      	PUSH	DS
 11921 00003565 56                      	PUSH	SI
 11922 00003566 BB0100                  	MOV	BX,1
 11923                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11924                                  	;CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11925                                  	;				;hkn; to sft entry
 11926                                  	;JC	SHORT TRIPOPJ
 11927                                  	;MOV	BX,[SI].SF_FLAGS
 11928                                  	;TEST	BX,sf_isnet	; 8000H		; output to NET?
 11929                                  	;JNZ	TRIPOPJ 			; if so, no echo
 11930                                  	;TEST	BX,devid_device ; 80H		; output to file?
 11931                                  	;JZ	SHORT TRIPOPJ 			; if so, no echo
 11932                                  	; 14/03/2018
 11933 00003569 E8A5E6                  	call	GET_IO_FCB	 ; IBMDOS.COM, MSDOS 2.0
 11934 0000356C 720B                    	jc	short TRIPOPJ
 11935 0000356E F6441880                	test	byte [SI+18H], 80h 		; [SI+18h]
 11936 00003572 7405                    	jz	short TRIPOPJ
 11937                                  	;MOV	BX,4
 11938                                  	;CALL	GET_IO_SFT
 11939                                  	;JC	SHORT TRIPOPJ
 11940                                  	;TEST	[SI].SF_FLAGS,sf_net_spool ; 800H ; StdPrn redirected?
 11941                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 11942                                  	;MOV	BYTE [PFLAG],0			; If a spool, NEVER echo
 11943                                  	;MOV	BYTE [SS:PFLAG],0
 11944 00003574 BB0400                  	mov	bx, 4
 11945 00003577 EB7C                    	jmp	short LISSTRT2
 11946                                  	
 11947                                  TRIPOPJ:
 11948 00003579 EB7D                    	JMP	SHORT TRIPOP
 11949                                  
 11950                                  ;LISSTRT2J:
 11951                                  ;	JMP	SHORT LISSTRT2
 11952                                  
 11953                                  CTRLOUT:
 11954 0000357B 3C0D                    	CMP	AL,c_CR ; 0Dh
 11955 0000357D 7420                    	JZ	SHORT ZERPOS
 11956 0000357F 3C08                    	CMP	AL,c_BS ; 8
 11957 00003581 7426                    	JZ	SHORT BACKPOS
 11958 00003583 3C09                    	CMP	AL,c_HT ; 9
 11959 00003585 75BB                    	JNZ	SHORT OUTCH
 11960                                  	;MOV	AL,[CARPOS]
 11961 00003587 36A0[D800]              	MOV	AL,[SS:CARPOS]
 11962 0000358B 0CF8                    	OR	AL,0F8H
 11963 0000358D F6D8                    	NEG	AL
 11964                                  
 11965                                  TAB:
 11966 0000358F 51                      	PUSH	CX
 11967 00003590 88C1                    	MOV	CL,AL
 11968 00003592 B500                    	MOV	CH,0
 11969 00003594 E307                    	JCXZ	POPTAB
 11970                                  TABLP:
 11971 00003596 B020                    	MOV	AL," "
 11972 00003598 E89AFF                  	CALL	OUTT
 11973 0000359B E2F9                    	LOOP	TABLP
 11974                                  POPTAB:
 11975 0000359D 59                      	POP	CX
 11976 0000359E C3                      	RETN
 11977                                  
 11978                                  ZERPOS:
 11979                                  	;MOV	BYTE PTR [CARPOS],0
 11980 0000359F 36C606[D800]00          	MOV	BYTE [SS:CARPOS],0
 11981 000035A5 EB9B                    	JMP	SHORT OUTCH
 11982                                  OUTJ:	
 11983 000035A7 EB8C                    	JMP	SHORT OUTT
 11984                                  
 11985                                  BACKPOS:
 11986                                  	;DEC	BYTE PTR [CARPOS]
 11987 000035A9 36FE0E[D800]            	DEC	BYTE [SS:CARPOS]
 11988 000035AE EB92                    	JMP	SHORT OUTCH
 11989                                  
 11990                                  BUFOUT:
 11991 000035B0 3C20                    	CMP	AL," "
 11992 000035B2 73F3                    	JAE	SHORT OUTJ		;Normal char
 11993 000035B4 3C09                    	CMP	AL,9
 11994 000035B6 74EF                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11995 000035B8 50                      	PUSH	AX
 11996 000035B9 B05E                    	MOV	AL,"^"
 11997 000035BB E877FF                  	CALL	OUTT		;Print '^' before control chars
 11998 000035BE 58                      	POP	AX
 11999 000035BF 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 12000 000035C1 E871FF                  	CALL	OUTT
 12001                                  BUFOUT_RETN:
 12002 000035C4 C3                      	RETN
 12003                                  
 12004                                  ;
 12005                                  ;----------------------------------------------------------------------------
 12006                                  ;
 12007                                  ;**	$STD_AUX_INPUT - System Call 3
 12008                                  ;
 12009                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 12010                                  ;
 12011                                  ;	ENTRY	none
 12012                                  ;	EXIT	(al) = character
 12013                                  ;	USES	all
 12014                                  ;
 12015                                  ;----------------------------------------------------------------------------
 12016                                  ;
 12017                                  
 12018                                  _$STD_AUX_INPUT:	;System call 3
 12019                                  
 12020 000035C5 E83DF6                  	CALL	STATCHK
 12021 000035C8 BB0300                  	MOV	BX,3
 12022                                  	;CALL	GET_IO_SFT
 12023 000035CB E843E6                  	CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.0 (IBMDOS.COM)
 12024                                  	;retc
 12025 000035CE 72F4                    	JC	SHORT BUFOUT_RETN
 12026 000035D0 EB03                    	JMP	SHORT TAISTRT
 12027                                  AUXILP:
 12028 000035D2 E81BF6                  	CALL	SPOOLINT
 12029                                  TAISTRT:
 12030 000035D5 B401                    	MOV	AH,1
 12031 000035D7 E883DC                  	CALL	IOFUNC
 12032 000035DA 74F6                    	JZ	SHORT AUXILP
 12033 000035DC 30E4                    	XOR	AH,AH
 12034 000035DE E87CDC                  	CALL	IOFUNC
 12035 000035E1 C3                      	RETN
 12036                                  
 12037                                  ;
 12038                                  ;----------------------------------------------------------------------------
 12039                                  ;
 12040                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 12041                                  ;
 12042                                  ;	ENTRY	(dl) = character
 12043                                  ;	EXIT	none
 12044                                  ;	USES	all
 12045                                  ;
 12046                                  ;----------------------------------------------------------------------------
 12047                                  ;
 12048                                  
 12049                                  _$STD_AUX_OUTPUT:	;System call 4
 12050                                  
 12051 000035E2 53                      	PUSH	BX
 12052 000035E3 BB0300                  	MOV	BX,3
 12053 000035E6 EB04                    	JMP	SHORT SENDOUT
 12054                                  
 12055                                  ;
 12056                                  ;----------------------------------------------------------------------------
 12057                                  ;
 12058                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 12059                                  ;
 12060                                  ;	ENTRY	(dl) = character
 12061                                  ;	EXIT	none
 12062                                  ;	USES	all
 12063                                  ;
 12064                                  ;----------------------------------------------------------------------------
 12065                                  ;
 12066                                  
 12067                                  _$STD_PRINTER_OUTPUT:	;System call 5
 12068                                  
 12069 000035E8 53                      	PUSH	BX
 12070 000035E9 BB0400                  	MOV	BX,4
 12071                                  
 12072                                  SENDOUT:
 12073 000035EC 88D0                    	MOV	AL,DL
 12074 000035EE 50                      	PUSH	AX
 12075 000035EF E813F6                  	CALL	STATCHK
 12076 000035F2 58                      	POP	AX
 12077 000035F3 1E                      	PUSH	DS
 12078 000035F4 56                      	PUSH	SI
 12079                                  LISSTRT2:
 12080 000035F5 E857D5                  	CALL	RAWOUT2
 12081                                  TRIPOP:
 12082 000035F8 5E                      	POP	SI
 12083 000035F9 1F                      	POP	DS
 12084 000035FA 5B                      	POP	BX
 12085 000035FB C3                      	RETN
 12086                                  
 12087                                  ;----------------------------------------------------------------------------
 12088                                  ;
 12089                                  ; Procedure : $Std_Con_Input_No_Echo
 12090                                  ;
 12091                                  ;----------------------------------------------------------------------------
 12092                                  
 12093                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 12094                                  
 12095                                  ; Inputs:
 12096                                  ;	None
 12097                                  ; Function:
 12098                                  ;	Input character from console, no echo
 12099                                  ; Returns:
 12100                                  ;	AL = character
 12101                                  
 12102 000035FC 1E                      	push	ds
 12103 000035FD 56                      	push	si
 12104                                  
 12105                                  INTEST:
 12106 000035FE E804F6                  	call	STATCHK
 12107 00003601 74FB                    	jz	short INTEST
 12108 00003603 30E4                    	xor	ah, ah
 12109 00003605 E855DC                  	call	IOFUNC
 12110 00003608 5E                      	pop	si
 12111 00003609 1F                      	pop	ds
 12112                                  
 12113                                  NOSCAN:
 12114 0000360A C3                      	retn
 12115                                  
 12116                                  ;----------------------------------------------------------------------------
 12117                                  ;
 12118                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 12119                                  ;
 12120                                  ;
 12121                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 12122                                  ;	EXIT	none
 12123                                  ;	USES	ALL
 12124                                  ;
 12125                                  ;----------------------------------------------------------------------------
 12126                                  ;
 12127                                  
 12128                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 12129                                  
 12130 0000360B 89D6                    	mov	si, dx
 12131                                  STRING_OUT1:	
 12132 0000360D AC                      	lodsb
 12133 0000360E 3C24                    	cmp	al, '$'
 12134 00003610 74F8                    	jz	short NOSCAN
 12135                                  NEXT_STR1:
 12136 00003612 E820FF                  	call	OUTT
 12137 00003615 EBF6                    	jmp	short STRING_OUT1
 12138                                  
 12139                                  ;----------------------------------------------------------------------------
 12140                                  ;
 12141                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 12142                                  ;
 12143                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 12144                                  ;
 12145                                  ;	ENTRY	(ds:dx) = input buffer
 12146                                  ;	EXIT	none
 12147                                  ;	USES	ALL
 12148                                  ;
 12149                                  ;----------------------------------------------------------------------------
 12150                                  
 12151                                  _$STD_CON_STRING_INPUT:		;System call 10
 12152                                  
 12153 00003617 8CD0                    	mov	ax, ss
 12154 00003619 8EC0                    	mov	es, ax
 12155 0000361B 89D6                    	mov	si, dx
 12156 0000361D 30ED                    	xor	ch, ch
 12157 0000361F AD                      	lodsw
 12158                                  
 12159                                  ;	(AL) = the buffer length
 12160                                  ;	(AH) = the template length
 12161                                  
 12162 00003620 08C0                            or	al, al
 12163 00003622 74E6                            jz	short NOSCAN	;Buffer is 0 length!!?
 12164 00003624 88E3                    	mov	bl, ah		;Init template counter
 12165 00003626 88EF                            mov	bh, ch		;Init template counter
 12166                                  
 12167                                  ;	(BL) = the number of bytes in the template
 12168                                  
 12169 00003628 38D8                            cmp	al, bl
 12170 0000362A 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 12171 0000362C 80380D                          cmp	byte [bx+si], 0Dh ; c_CR
 12172 0000362F 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 12173                                  
 12174                                  ; The number of chars in the template is >= the number of chars in buffer or
 12175                                  ; there is no CR at the end of the template.  This is an inconsistant state
 12176                                  ; of affairs.  Pretend that the template was empty:
 12177                                  ;
 12178                                  
 12179                                  NOEDIT:	
 12180 00003631 88EB                    	mov	bl, ch		;Reset buffer
 12181                                  EDITON: 
 12182 00003633 88C2                    	mov	dl, al
 12183 00003635 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 12184                                  
 12185                                  ;	Top level.  We begin to read a line in.
 12186                                  
 12187                                  NEWLIN: 
 12188 00003636 36A0[D800]              	mov	al, [SS:CARPOS]
 12189 0000363A 36A2[D900]              	mov	[SS:STARTPOS], al ;Remember position in raw buffer
 12190                                  
 12191 0000363E 56                      	push	si
 12192 0000363F BF[5402]                	mov	di, INBUF ;Build the new line here
 12193 00003642 36882E[A203]            	mov	byte [SS:INSMODE], ch ;Insert mode off
 12194 00003647 88EF                    	mov	bh, ch		;No chars from template yet
 12195 00003649 88EE                    	mov	dh, ch		;No chars to new line yet
 12196 0000364B E8AEFF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 12197 0000364E 3C0A                    	cmp	al, 0Ah	;c_LF	;Linefeed 
 12198 00003650 7503                    	jnz	short GOTCH
 12199                                  
 12200                                  ;	This is the main loop of reading in a character and processing it.
 12201                                  ;
 12202                                  ;	(BH) = the index of the next byte in the template
 12203                                  ;	(BL) = the length of the template
 12204                                  ;	(DH) = the number of bytes in the buffer
 12205                                  ;	(DL) = the length of the buffer
 12206                                  
 12207                                  GETCH:
 12208 00003652 E8A7FF                  	call	_$STD_CON_INPUT_NO_ECHO
 12209                                  GOTCH:
 12210                                  ;
 12211                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 12212                                  ; input queue.
 12213                                  ;
 12214 00003655 3C06                            cmp	al, "F"-"@"  ; CMP AL, 6  ; Ignore ^F
 12215 00003657 74F9                    	jz	short GETCH
 12216                                  
 12217                                  ;	If the leading char is the function-key lead byte
 12218                                  
 12219 00003659 363A06[3B09]                    cmp	al, [SS:ESCCHAR]
 12220 0000365E 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 12221                                  
 12222                                  ;	Rubout and ^H are both destructive backspaces.
 12223                                  
 12224 00003660 3C7F                            cmp	al, c_DEL ; 7FH
 12225 00003662 742B                            jz	short BACKSPJ
 12226 00003664 3C08                            cmp	al, c_BS  ; 8
 12227 00003666 7427                            jz	short BACKSPJ
 12228                                  
 12229                                  ;	CR terminates the line.
 12230                                  
 12231 00003668 3C0D                            cmp	al, c_CR ; 0Dh
 12232 0000366A 742F                            jz	short ENDLIN
 12233                                  
 12234                                  ;	LF goes to a new line and keeps on reading.
 12235                                  
 12236 0000366C 3C0A                            cmp	al, c_LF ; 0Ah
 12237 0000366E 744F                    	jz	short PHYCRLF
 12238                                  
 12239                                  ;	^X (or ESC) deletes the line and starts over
 12240                                  
 12241 00003670 3C1B                    	cmp	al, CANCEL ; 1Bh
 12242 00003672 7450                    	jz	short KILNEW
 12243                                  
 12244                                  ; Otherwise, we save the input character.
 12245                                  
 12246                                  SAVCH:	
 12247 00003674 38D6                    	cmp	dh, dl
 12248 00003676 7319                    	jnb	short BUFFUL		; buffer is full.
 12249 00003678 AA                              stosb
 12250 00003679 FEC6                    	inc	dh                      ; increment count in buffer.
 12251 0000367B E832FF                  	call	BUFOUT			;Print control chars nicely
 12252                                  
 12253 0000367E 36803E[A203]00                  cmp	byte [SS:INSMODE], 0
 12254 00003684 75CC                    	jnz	short GETCH		; insertmode => don't advance template
 12255 00003686 38DF                            cmp	bh, bl
 12256 00003688 73C8                            jnb	short GETCH		; no more characters in template
 12257 0000368A 46                              inc	si                      ; Skip to next char in template
 12258 0000368B FEC7                            inc	bh                      ; remember position in template
 12259 0000368D EBC3                            jmp	short GETCH
 12260                                  
 12261                                  BACKSPJ: 
 12262 0000368F EB46                    	jmp	short BACKSP
 12263                                  
 12264                                  BUFFUL: 
 12265 00003691 B007                    	mov	al, 7			; Bell to signal full buffer
 12266 00003693 E89FFE                  	call	OUTT
 12267 00003696 EBBA                    	jmp	short GETCH
 12268                                  
 12269                                  ESCAPE: 
 12270                                  	;transfer OEMFunctionKey
 12271 00003698 E9C8D2                  	JMP	OEMFunctionKey
 12272                                  
 12273                                  ENDLIN:
 12274 0000369B AA                              stosb				; Put the CR in the buffer
 12275 0000369C E896FE                  	call	OUTT                    ; Echo it
 12276 0000369F 5F                              pop	di                      ; Get start of user buffer
 12277 000036A0 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 12278 000036A3 FEC6                            inc	dh			; DH is length including CR
 12279                                  
 12280                                  COPYNEW:
 12281                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 12282 000036A5 8CC5                    	mov	bp, es
 12283 000036A7 8CDB                    	mov	bx, ds
 12284 000036A9 8EC3                    	mov	es, bx
 12285 000036AB 8EDD                    	mov	ds, bp
 12286 000036AD BE[5402]                	mov	si, INBUF
 12287 000036B0 88F1                    	mov	cl, dh
 12288 000036B2 F3A4                    	rep	movsb
 12289 000036B4 C3                      	retn
 12290                                  
 12291                                  	; CPMIO.ASM (MSDOS 6.0)
 12292                                  	;;SAVE	<DS,ES>
 12293                                  	;PUSH	DS
 12294                                  	;PUSH	ES
 12295                                  	;;RESTORE <DS,ES>		; XCHG ES,DS
 12296                                  	;POP	DS
 12297                                  	;POP	ES
 12298                                  
 12299                                  ;;hkn; INBUF is in DOSDATA
 12300                                          ;MOV     SI,INBUF
 12301                                          ;MOV     CL,DH                   ; set up count
 12302                                          ;REP     MOVSB                   ; Copy final line to user buffer
 12303                                  ;OLDBAK_RETN:
 12304                                          ;RETN
 12305                                  
 12306                                  ;Output a CRLF
 12307                                  CRLF:
 12308 000036B5 B00D                    	mov	al, c_CR ; 0Dh 
 12309 000036B7 E87BFE                  	call	OUTT
 12310 000036BA B00A                    	mov	al, c_LF ; 0Ah
 12311 000036BC E976FE                  	jmp	OUTT
 12312                                  
 12313                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 12314                                  
 12315                                  PHYCRLF:
 12316 000036BF E8F3FF                  	CALL	CRLF
 12317 000036C2 EB8E                            JMP     GETCH
 12318                                  
 12319                                  ; The user wants to throw away what he's typed in and wants to start over.  We
 12320                                  ; print the backslash and then go to the next line and tab to the correct spot
 12321                                  ; to begin the buffered input.
 12322                                  
 12323                                  KILNEW:
 12324 000036C4 B05C                            mov	al, '\'
 12325 000036C6 E86CFE                          call	OUTT            ;Print the CANCEL indicator
 12326 000036C9 5E                              pop	si		;Remember start of edit buffer
 12327                                  PUTNEW:
 12328 000036CA E8E8FF                  	call	CRLF            ;Go to next line on screen
 12329 000036CD 36A0[D900]              	mov	al, [SS:STARTPOS]
 12330 000036D1 E8BBFE                  	call	TAB             ;Tab over
 12331 000036D4 E95FFF                          JMP     NEWLIN		;Start over again
 12332                                  
 12333                                  ;	Destructively back up one character position
 12334                                  
 12335                                  BACKSP:
 12336 000036D7 08F6                    	or	dh, dh
 12337 000036D9 7411                    	jz	short OLDBAK	;No chars in line, do nothing to line
 12338 000036DB E85200                  	call	BACKUP          ;Do the backup
 12339 000036DE 268A05                  	mov	al, [es:di]	;Get the deleted char
 12340 000036E1 3C20                            cmp	al, 20h	; ' '
 12341 000036E3 7307                    	jnb	short OLDBAK	;Was a normal char
 12342 000036E5 3C09                            cmp	al, c_HT ; 9
 12343 000036E7 7415                    	jz	short BAKTAB	;Was a tab, fix up users display
 12344 000036E9 E84700                          call	BACKMES         ;Was a control char, zap the '^'
 12345                                  OLDBAK:
 12346 000036EC 36803E[A203]00                  cmp	byte [SS:INSMODE], 0 ;In insert mode, get more chars
 12347 000036F2 7507                            jnz	short GETCH1
 12348 000036F4 08FF                    	or	bh, bh
 12349 000036F6 7403                            jz	short GETCH1	;Not advanced in template, stay where we are
 12350 000036F8 FECF                            dec	bh		;Go back in template
 12351 000036FA 4E                              dec	si
 12352                                  GETCH1:
 12353 000036FB E954FF                          jmp	GETCH
 12354                                  
 12355                                  BAKTAB:
 12356 000036FE 57                              push	di
 12357 000036FF 4F                              dec	di		;Back up one char
 12358 00003700 FD                              std			;Go backward
 12359 00003701 88F1                            mov	cl, dh		;Number of chars currently in line
 12360 00003703 B020                            mov	al, 20h	; ' '
 12361 00003705 53                              push	bx
 12362 00003706 B307                            mov	bl, 7		;Max
 12363 00003708 E30E                            jcxz	FIGTAB		;At start, do nothing
 12364                                  FNDPOS:
 12365 0000370A AE                              scasb			;Look back
 12366 0000370B 7609                    	jbe	short CHKCNT
 12367 0000370D 26807D0109              	cmp	byte [es:di+1], 9
 12368 00003712 7409                    	jz	short HAVTAB	;Found a tab
 12369 00003714 FECB                    	dec	bl		;Back one char if non tab control char
 12370                                  CHKCNT:
 12371 00003716 E2F2                            loop	FNDPOS
 12372                                  FIGTAB:		
 12373 00003718 362A1E[D900]            	sub	bl, [SS:STARTPOS]
 12374                                  HAVTAB:
 12375 0000371D 28F3                    	sub	bl, dh
 12376 0000371F 00D9                    	add	cl, bl
 12377 00003721 80E107                  	and	cl, 7		;CX has correct number to erase
 12378 00003724 FC                      	cld			;Back to normal
 12379 00003725 5B                      	pop	bx
 12380 00003726 5F                      	pop	di
 12381 00003727 74C3                    	jz	short OLDBAK	;Nothing to erase
 12382                                  TABBAK:
 12383 00003729 E80700                  	call	BACKMES
 12384 0000372C E2FB                    	loop	TABBAK		;Erase correct number of chars
 12385 0000372E EBBC                    	jmp	short OLDBAK
 12386                                  
 12387                                  BACKUP:
 12388 00003730 FECE                            dec	dh             ;Back up in line
 12389 00003732 4F                              dec	di
 12390                                  BACKMES:
 12391 00003733 B008                            mov	al, c_BS ; 8	;Backspace
 12392 00003735 E8FDFD                          call	OUTT
 12393 00003738 B020                            mov	al, 20h ; ' '	;Erase
 12394 0000373A E8F8FD                          call	OUTT
 12395 0000373D B008                            mov	al, c_BS ; 8	;Backspace
 12396 0000373F E9F3FD                  	jmp	OUTT		;Done
 12397                                  
 12398                                  ;User really wants an ESC character in his line
 12399                                  TWOESC:	
 12400 00003742 36A0[3B09]              	mov	al, [SS:ESCCHAR]
 12401 00003746 E92BFF                  	jmp	SAVCH
 12402                                  
 12403                                  ;Copy the rest of the template
 12404                                  COPYLIN:
 12405 00003749 88D9                            mov	cl, bl		;Total size of template
 12406 0000374B 28F9                    	sub	cl, bh		;Minus position in template, is number to move
 12407 0000374D EB07                            jmp	short COPYEACH
 12408                                  
 12409                                  COPYSTR:
 12410 0000374F E83400                  	call	FINDOLD         ;Find the char
 12411 00003752 EB02                    	jmp	short COPYEACH  ;Copy up to it
 12412                                  
 12413                                  ;Copy one char from template to line
 12414                                  COPYONE:
 12415 00003754 B101                            mov	cl, 1
 12416                                  ;Copy CX chars from template to line
 12417                                  COPYEACH:
 12418 00003756 36C606[A203]00                  mov	byte [SS:INSMODE], 0	;All copies turn off insert mode
 12419 0000375C 38D6                    	cmp	dh, dl
 12420 0000375E 740F                            jz	short GETCH2		;At end of line, can't do anything
 12421 00003760 38DF                            cmp	bh, bl
 12422 00003762 740B                            jz	short GETCH2		;At end of template, can't do anything
 12423 00003764 AC                              lodsb
 12424 00003765 AA                              stosb
 12425 00003766 E847FE                  	call	BUFOUT
 12426 00003769 FEC7                            inc	bh			;Ahead in template
 12427 0000376B FEC6                            inc	dh			;Ahead in line
 12428 0000376D E2E7                            loop	COPYEACH
 12429                                  GETCH2:
 12430 0000376F E9E0FE                          jmp	GETCH
 12431                                  
 12432                                  ;Skip one char in template
 12433                                  SKIPONE:
 12434 00003772 38DF                    	cmp	bh, bl
 12435 00003774 74F9                    	jz	short GETCH2		;At end of template
 12436 00003776 FEC7                    	inc	bh			;Ahead in templat
 12437 00003778 46                      	inc	si
 12438 00003779 E9D6FE                  	jmp	GETCH
 12439                                  
 12440                                  SKIPSTR:
 12441 0000377C E80700                  	call	FINDOLD                 ;Find out how far to go
 12442 0000377F 01CE                            add	si, cx			;Go there
 12443 00003781 00CF                            add	bh, cl
 12444 00003783 E9CCFE                          jmp	GETCH
 12445                                  
 12446                                  ;Get the next user char, and look ahead in template for a match
 12447                                  ;CX indicates how many chars to skip to get there on output
 12448                                  ;NOTE: WARNING: If the operation cannot be done, the return
 12449                                  ;       address is popped off and a jump to GETCH is taken.
 12450                                  ;       Make sure nothing extra on stack when this routine
 12451                                  ;       is called!!! (no PUSHes before calling it).
 12452                                  FINDOLD:
 12453 00003786 E873FE                          call	_$STD_CON_INPUT_NO_ECHO
 12454                                  	; STRIN.ASM (MSDOS 2.11, 19/08/2018) 
 12455 00003789 363A06[3B09]            	CMP     AL,[SS:ESCCHAR]            ; did he type a function key?
 12456 0000378E 363A06[3B09]                    CMP	AL,[SS:ESCCHAR]
 12457 00003793 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 12458 00003795 E864FE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 12459 00003798 EB1D                            JMP     SHORT NOTFND		; go try again
 12460                                  FINDSETUP:
 12461 0000379A 88D9                    	mov	cl, bl
 12462 0000379C 28F9                            sub	cl, bh		;CX is number of chars to end of template
 12463 0000379E 7417                    	jz	short NOTFND	;At end of template
 12464 000037A0 49                              dec	cx		;Cannot point past end, limit search
 12465 000037A1 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 12466 000037A3 06                      	push	es
 12467 000037A4 1E                      	push	ds
 12468 000037A5 07                      	pop	es
 12469 000037A6 57                      	push	di
 12470 000037A7 89F7                    	mov	di, si		;Template to ES:DI
 12471 000037A9 47                      	inc	di
 12472 000037AA F2AE                    	repne	scasb		;Look
 12473 000037AC 5F                      	pop	di
 12474 000037AD 07                      	pop	es
 12475 000037AE 7507                    	jnz	short NOTFND	;Didn't find the char
 12476 000037B0 F6D1                            not	cl		;Turn how far to go into how far we went
 12477 000037B2 00D9                            add	cl, bl		;Add size of template
 12478 000037B4 28F9                            sub	cl, bh		;Subtract current pos, result distance to skip
 12479                                  FINDOLD_RETN:
 12480 000037B6 C3                      	retn
 12481                                  
 12482                                  NOTFND:
 12483 000037B7 5D                              pop	bp              ;Chuck return address
 12484 000037B8 E997FE                          jmp	GETCH
 12485                                  
 12486                                  REEDIT:
 12487 000037BB B040                    	mov	al, '@'		;Output re-edit character
 12488 000037BD E875FD                  	call	OUTT
 12489 000037C0 5F                      	pop	di
 12490 000037C1 57                      	push	di
 12491 000037C2 06                      	push	es
 12492 000037C3 1E                      	push	ds
 12493 000037C4 E8DEFE                  	call	COPYNEW		;Copy current line into template
 12494 000037C7 1F                      	pop	ds
 12495 000037C8 07                      	pop	es
 12496 000037C9 5E                      	pop	si
 12497 000037CA 88F3                    	mov	bl, dh		;Size of line is new size template
 12498 000037CC E9FBFE                  	jmp	PUTNEW		;Start over again
 12499                                  
 12500                                  EXITINS:
 12501                                  ENTERINS:
 12502 000037CF 36F616[A203]            	not	byte [SS:INSMODE]
 12503 000037D4 E97BFE                  	jmp	GETCH
 12504                                  
 12505                                  ;Put a real live ^Z in the buffer (embedded)
 12506                                  CTRLZ:
 12507 000037D7 B01A                    	mov	al, "Z"-"@" ; 1Ah
 12508 000037D9 E998FE                          jmp	SAVCH
 12509                                  
 12510                                  ;DOSCODE ENDS
 12511                                  ;	END
 12512                                  
 12513                                  ;
 12514                                  ;----------------------------------------------------------------------------
 12515                                  ;
 12516                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 12517                                  ;
 12518                                  ;	Check console input status
 12519                                  ;
 12520                                  ;	ENTRY	none
 12521                                  ;	EXIT	AL = -1 character available, = 0 no character
 12522                                  ;	USES	all
 12523                                  ;
 12524                                  ;----------------------------------------------------------------------------
 12525                                  ;
 12526                                  
 12527                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 12528                                  
 12529 000037DC E826F4                  	CALL	STATCHK
 12530 000037DF B000                    	MOV	AL,0			; no xor!!
 12531                                  	;retz
 12532 000037E1 7402                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 12533 000037E3 0CFF                    	OR	AL,-1
 12534                                  SCIS_RETN:
 12535 000037E5 C3                      	RETN
 12536                                  
 12537                                  ;
 12538                                  ;----------------------------------------------------------------------------
 12539                                  ;
 12540                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 12541                                  ;
 12542                                  ;	Flush console input buffer and perform call in AL
 12543                                  ;
 12544                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 12545                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 12546                                  ;		return arguments for the fcn supplied in (AL)
 12547                                  ;	USES	all
 12548                                  ;
 12549                                  ;----------------------------------------------------------------------------
 12550                                  ;
 12551                                  
 12552                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 12553                                  
 12554 000037E6 50                      	PUSH	AX
 12555 000037E7 52                      	PUSH	DX
 12556 000037E8 31DB                    	XOR	BX,BX
 12557                                  	;CALL	GET_IO_SFT
 12558 000037EA E824E4                  	CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.0 (IBMDOS.COM)
 12559 000037ED 7205                    	JC	SHORT BADJFNCON
 12560 000037EF B404                    	MOV	AH,4
 12561 000037F1 E869DA                  	CALL	IOFUNC
 12562                                  
 12563                                  BADJFNCON:
 12564 000037F4 5A                      	POP	DX
 12565 000037F5 58                      	POP	AX
 12566 000037F6 88C4                    	MOV	AH,AL
 12567 000037F8 3C01                    	CMP	AL,1
 12568 000037FA 7413                    	JZ	SHORT REDISPJ
 12569 000037FC 3C06                    	CMP	AL,6
 12570 000037FE 740F                    	JZ	SHORT REDISPJ
 12571 00003800 3C07                    	CMP	AL,7
 12572 00003802 740B                    	JZ	SHORT REDISPJ
 12573 00003804 3C08                    	CMP	AL,8
 12574 00003806 7407                    	JZ	SHORT REDISPJ
 12575 00003808 3C0A                    	CMP	AL,10
 12576 0000380A 7403                    	JZ	SHORT REDISPJ
 12577 0000380C B000                    	MOV	AL,0
 12578 0000380E C3                      	RETN
 12579                                  
 12580                                  REDISPJ:
 12581 0000380F FA                      	CLI
 12582                                  	;transfer REDISP
 12583 00003810 E9B8CE                  	JMP	REDISP
 12584                                  
 12585                                  ;DOSCODE ENDS
 12586                                  ;	END
 12587                                  
 12588                                  ;============================================================================
 12589                                  ; TIME.ASM
 12590                                  ;============================================================================
 12591                                  ; Retro DOS v2.0 - 14/03/2018
 12592                                  
 12593                                  ; Time and date functions for MSDOS
 12594                                  ;
 12595                                  
 12596                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 12597                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
 12598                                  
 12599                                  ;TITLE   TIME - time and date functions
 12600                                  ;NAME    TIME
 12601                                  
 12602                                  FOURYEARS EQU 3*365 + 366
 12603                                  
 12604                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
 12605                                  
 12606                                  ;
 12607                                  ; Date16 returns the current date in AX, current time in DX
 12608                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
 12609                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
 12610                                  ;
 12611                                  
 12612                                  DATE16:
 12613 00003813 51                              PUSH    CX
 12614 00003814 06                              PUSH    ES
 12615 00003815 E82000                          CALL    READTIME
 12616 00003818 07                              POP     ES
 12617 00003819 D0E1                            SHL     CL,1            ;Minutes to left part of byte
 12618 0000381B D0E1                            SHL     CL,1
 12619 0000381D D1E1                            SHL     CX,1            ;Push hours and minutes to left end
 12620 0000381F D1E1                            SHL     CX,1
 12621 00003821 D1E1                            SHL     CX,1
 12622 00003823 D0EE                            SHR     DH,1            ;Count every two seconds
 12623 00003825 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
 12624 00003827 89CA                            MOV     DX,CX
 12625 00003829 A1[1A01]                        MOV     AX,[MONTH]	;Fetch month and year
 12626 0000382C B104                            MOV     CL,4
 12627 0000382E D2E0                            SHL     AL,CL		;Push month to left to make room for day
 12628 00003830 D1E0                            SHL     AX,1
 12629 00003832 59                              POP     CX
 12630 00003833 0A06[1901]                      OR      AL,[DAY]
 12631 00003837 C3                              RETN
 12632                                  
 12633                                  READTIME:
 12634                                  ;Gets time in CX:DX. Figures new date if it has changed.
 12635                                  ;Uses AX, CX, DX.
 12636                                  
 12637 00003838 56                              PUSH    SI
 12638 00003839 53                              PUSH    BX
 12639 0000383A BB[5703]                        MOV     BX,TIMEBUF
 12640 0000383D B90600                          MOV     CX,6
 12641 00003840 31D2                            XOR     DX,DX
 12642 00003842 89D0                            MOV     AX,DX
 12643 00003844 E8CEDB                  	CALL	SETREAD
 12644 00003847 1E                              PUSH    DS
 12645 00003848 C536[F800]                      LDS     SI,[BCLOCK]
 12646 0000384C E840DB                  	CALL	DEVIOCALL2      ;Get correct date and time
 12647 0000384F 1F                              POP     DS
 12648 00003850 5B                              POP     BX
 12649 00003851 5E                              POP     SI
 12650 00003852 A1[5703]                        MOV     AX,[TIMEBUF]
 12651 00003855 8B0E[5903]                      MOV     CX,[TIMEBUF+2]
 12652 00003859 8B16[5B03]                      MOV     DX,[TIMEBUF+4]
 12653 0000385D 3B06[1D01]                      CMP     AX,[DAYCNT]     ;See if day count is the same
 12654 00003861 7442                            JZ      SHORT RET22
 12655 00003863 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
 12656 00003866 733D                            JAE     SHORT RET22	;Ignore if too large
 12657 00003868 A3[1D01]                        MOV     [DAYCNT],AX
 12658 0000386B 56                              PUSH    SI
 12659 0000386C 51                              PUSH    CX
 12660 0000386D 52                              PUSH    DX              ;Save time
 12661 0000386E 31D2                            XOR     DX,DX
 12662 00003870 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
 12663 00003873 F7F1                            DIV     CX              ;Compute number of 4-year units
 12664 00003875 D1E0                            SHL     AX,1
 12665 00003877 D1E0                            SHL     AX,1
 12666 00003879 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
 12667 0000387B 89C1                            MOV     CX,AX           ;<240 implies AH=0
 12668 0000387D BE[7301]                        MOV     SI,YRTAB        ;Table of days in each year
 12669 00003880 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
 12670 00003883 D1E9                            SHR     CX,1            ;Convert half-years to whole years
 12671 00003885 7304                            JNC     SHORT SK	;Extra half-year?
 12672 00003887 81C2C800                        ADD     DX,200
 12673                                  SK:
 12674 0000388B E82400                          CALL    SETYEAR
 12675 0000388E B101                            MOV     CL,1            ;At least at first month in year
 12676 00003890 BE[7B01]                        MOV     SI,MONTAB       ;Table of days in each month
 12677 00003893 E81000                          CALL    DSLIDE          ;Find out which month we're in
 12678 00003896 880E[1A01]                      MOV     [MONTH],CL
 12679 0000389A 42                              INC     DX              ;Remainder is day of month (start with one)
 12680 0000389B 8816[1901]                      MOV     [DAY],DL
 12681 0000389F E89200                          CALL    WKDAY           ;Set day of week
 12682 000038A2 5A                              POP     DX
 12683 000038A3 59                              POP     CX
 12684 000038A4 5E                              POP     SI
 12685                                  RET22:  
 12686 000038A5 C3                      	RETN
 12687                                  
 12688                                  DSLIDE:
 12689 000038A6 B400                            MOV     AH,0
 12690                                  DSLIDE1:
 12691 000038A8 AC                              LODSB			;Get count of days
 12692 000038A9 39C2                            CMP     DX,AX           ;See if it will fit
 12693 000038AB 7215                            JB      SHORT RET23	;If not, done
 12694 000038AD 29C2                            SUB     DX,AX
 12695 000038AF 41                              INC     CX              ;Count one more month/year
 12696 000038B0 EBF6                            JMP     SHORT DSLIDE1
 12697                                  
 12698                                  SETYEAR:
 12699                                  ;Set year with value in CX. Adjust length of February for this year.
 12700 000038B2 880E[1B01]                      MOV     [YEAR],CL
 12701                                  CHKYR:
 12702 000038B6 F6C103                          TEST    CL,3            ;Check for leap year
 12703 000038B9 B01C                            MOV     AL,28
 12704 000038BB 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
 12705 000038BD FEC0                            INC     AL              ;Add leap day
 12706                                  SAVFEB:
 12707 000038BF A2[7C01]                        MOV     [MONTAB+1],AL   ;Store for February
 12708                                  RET23:  
 12709 000038C2 C3                      	RETN
 12710                                  
 12711                                  DODATE:
 12712 000038C3 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
 12713 000038C6 88F0                            MOV     AL,DH
 12714 000038C8 BB[7A01]                        MOV     BX,MONTAB-1
 12715 000038CB D7                              XLAT                    ;Look up days in month
 12716 000038CC 38D0                            CMP     AL,DL
 12717 000038CE B0FF                            MOV     AL,-1           ;Restore error flag, just in case
 12718 000038D0 7274                            JB      SHORT RET25	;Error if too many days
 12719 000038D2 E8DDFF                          CALL    SETYEAR
 12720 000038D5 8916[1901]                      MOV     [DAY],DX	;Set both day and month
 12721 000038D9 D1E9                            SHR     CX,1
 12722 000038DB D1E9                            SHR     CX,1
 12723 000038DD B8B505                          MOV     AX,FOURYEARS
 12724 000038E0 89D3                            MOV     BX,DX
 12725 000038E2 F7E1                            MUL     CX
 12726 000038E4 8A0E[1B01]                      MOV     CL,[YEAR]
 12727 000038E8 80E103                          AND     CL,3
 12728 000038EB BE[7301]                        MOV     SI,YRTAB
 12729 000038EE 89C2                            MOV     DX,AX
 12730 000038F0 D1E1                            SHL     CX,1            ;Two entries per year, so double count
 12731 000038F2 E85200                          CALL    DSUM            ;Add up the days in each year
 12732 000038F5 88F9                            MOV     CL,BH           ;Month of year
 12733 000038F7 BE[7B01]                        MOV     SI,MONTAB
 12734 000038FA 49                              DEC     CX              ;Account for months starting with one
 12735 000038FB E84900                          CALL    DSUM            ;Add up days in each month
 12736 000038FE 88D9                            MOV     CL,BL           ;Day of month
 12737 00003900 49                              DEC     CX              ;Account for days starting with one
 12738 00003901 01CA                            ADD     DX,CX           ;Add in to day total
 12739 00003903 92                              XCHG    AX,DX           ;Get day count in AX
 12740 00003904 A3[1D01]                        MOV     [DAYCNT],AX
 12741 00003907 56                              PUSH    SI
 12742 00003908 53                              PUSH    BX
 12743 00003909 50                              PUSH    AX
 12744 0000390A BB[5703]                        MOV     BX,TIMEBUF
 12745 0000390D B90600                          MOV     CX,6
 12746 00003910 31D2                            XOR     DX,DX
 12747 00003912 89D0                            MOV     AX,DX
 12748 00003914 53                              PUSH    BX
 12749 00003915 E8FDDA                  	CALL	SETREAD
 12750 00003918 1E                              PUSH    DS
 12751 00003919 C536[F800]                      LDS     SI,[BCLOCK]
 12752 0000391D E86FDA                  	CALL	DEVIOCALL2	;Get correct date and time
 12753 00003920 1F                              POP     DS
 12754 00003921 5B                              POP     BX
 12755 00003922 E823DB                  	CALL	SETWRITE
 12756 00003925 8F06[5703]                      POP     WORD [TIMEBUF]
 12757 00003929 1E                              PUSH    DS
 12758 0000392A C536[F800]                      LDS     SI,[BCLOCK]
 12759 0000392E E85EDA                  	CALL	DEVIOCALL2      ;Set the date
 12760 00003931 1F                              POP     DS
 12761 00003932 5B                              POP     BX
 12762 00003933 5E                              POP     SI
 12763                                  WKDAY:
 12764 00003934 A1[1D01]                        MOV     AX,[DAYCNT]
 12765 00003937 31D2                            XOR     DX,DX
 12766 00003939 B90700                          MOV     CX,7
 12767 0000393C 40                              INC     AX
 12768 0000393D 40                              INC     AX              ;First day was Tuesday
 12769 0000393E F7F1                            DIV     CX              ;Compute day of week
 12770 00003940 8816[1F01]                      MOV     [WEEKDAY],DL
 12771 00003944 30C0                            XOR     AL,AL           ;Flag OK
 12772                                  RET25:
 12773 00003946 C3                      	RETN
 12774                                  
 12775                                  DSUM:
 12776 00003947 B400                            MOV     AH,0
 12777 00003949 E3FB                            JCXZ    RET25
 12778                                  DSUM1:
 12779 0000394B AC                              LODSB
 12780 0000394C 01C2                            ADD     DX,AX
 12781 0000394E E2FB                            LOOP    DSUM1
 12782 00003950 C3                              RETN
 12783                                  
 12784                                  ;CODE	ENDS
 12785                                  ;    END
 12786                                  
 12787                                  ;============================================================================
 12788                                  ; XENIX.ASM
 12789                                  ;============================================================================
 12790                                  
 12791                                  ; xenix file calls for MSDOS
 12792                                  ;
 12793                                  
 12794                                  ;INCLUDE DOSSEG.ASM
 12795                                  
 12796                                  ;IFNDEF  KANJI
 12797                                  ;KANJI   EQU     0       ;FALSE
 12798                                  ;ENDIF
 12799                                  
 12800                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 12801                                  ;	ASSUME  SS:DOSGROUP,CS:DOSGROUP
 12802                                  
 12803                                  ;.xlist
 12804                                  ;.xcref
 12805                                  ;INCLUDE DOSSYM.ASM
 12806                                  ;INCLUDE DEVSYM.ASM
 12807                                  ;.cref
 12808                                  ;.list
 12809                                  
 12810                                  ;TITLE   XENIX - IO system to mimic UNIX
 12811                                  ;NAME    XENIX
 12812                                  
 12813                                          ;i_need  NoSetDir,BYTE
 12814                                          ;i_need  CURDRV,BYTE
 12815                                          ;i_need  IOCALL,BYTE
 12816                                          ;i_need  IOMED,BYTE
 12817                                          ;i_need  IOSCNT,WORD
 12818                                          ;i_need  IOXAD,DWORD
 12819                                          ;i_need  DIRSTART,WORD
 12820                                          ;i_need  ATTRIB,BYTE
 12821                                          ;i_need  THISFCB,DWORD
 12822                                          ;i_need  AuxStack,BYTE
 12823                                          ;i_need  Creating,BYTE
 12824                                          ;i_need  ThisDRV,BYTE
 12825                                          ;i_need  NAME1,BYTE
 12826                                          ;i_need  LastEnt,WORD
 12827                                          ;i_need  ThisDPB,DWORD
 12828                                          ;i_need  EntLast,WORD
 12829                                          ;i_need  CurrentPDB,WORD
 12830                                          ;i_need  sft_addr,DWORD		; pointer to head of table
 12831                                          ;i_need  CURBUF,DWORD		; pointer to current buffer
 12832                                          ;i_need  DMAADD,DWORD		; pointer to current dma address
 12833                                  
 12834                                  ;BREAK <Local data>
 12835                                  
 12836                                  ;CODE   ENDS
 12837                                  
 12838                                  ;;DATA	SEGMENT BYTE PUBLIC 'DATA'
 12839                                  ;
 12840                                  ;open_name:   DW 0
 12841                                  ;             DW 0
 12842                                  ;open_access: DB 0
 12843                                  ;open_jfn:    DW 0			; accessed as DD
 12844                                  ;open_jfn_b:  DW 0			; accessed as DD with above
 12845                                  ;open_sfn:    DW 0
 12846                                  ;open_sfoff:  DW 0			; accessed as DD
 12847                                  ;open_sfn_b:  DW 0			; accessed as DD with above
 12848                                  ;open_devid:  DB 0
 12849                                  ;Cr_read_only: DB 0
 12850                                  ;rename_source: DD 0
 12851                                  ;rename_dest: DD 0
 12852                                  ;
 12853                                  ;;DATA	ENDS
 12854                                  
 12855                                  ;CODE	SEGMENT BYTE PUBLIC 'CODE'
 12856                                  
 12857                                  ;BREAK <Validate_path - check to see if there are meta characters in path>
 12858                                  
 12859                                  ;
 12860                                  ; Input: DS:DX is an ASCIZ path
 12861                                  ; Output: Carry set if meta-characters present or path malformed and
 12862                                  ;           Zero is set if the only problem is that meta-characters
 12863                                  ;               are present in the last element of the path
 12864                                  ;procedure Validate_path,near
 12865                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 12866                                  
 12867                                  validate_path:
 12868                                          
 12869 00003951 50                      	PUSH    AX
 12870 00003952 51                              PUSH    CX
 12871 00003953 56                              PUSH    SI
 12872 00003954 89D6                            MOV     SI,DX
 12873 00003956 B9FF00                          MOV     CX,0FFH			; No path seps yet
 12874 00003959 8B04                            MOV     AX,[SI]			; Get first two bytes
 12875 0000395B 08C0                            OR      AL,AL
 12876 0000395D 7429                            JZ      SHORT validate_malformed	; NUL path
 12877 0000395F 80FC3A                          CMP     AH,':'
 12878 00003962 7506                            JNZ     SHORT validate_loop		; OK so far
 12879 00003964 807C0200                        CMP     BYTE [SI+2],0
 12880 00003968 741E                            JZ      SHORT validate_malformed	; NUL path (just d:)
 12881                                  validate_loop:
 12882 0000396A AC                              LODSB
 12883                                  validate_loop1:
 12884                                  
 12885                                          ;IF      KANJI
 12886                                          ;invoke  TESTKANJ
 12887                                          ;JZ      NOTKANJ6
 12888                                          ;INC     SI
 12889                                          ;JMP     validate_loop
 12890                                  ;
 12891                                  ;NOTKANJ6:
 12892                                  ;        ENDIF
 12893                                  
 12894 0000396B 08C0                            OR      AL,AL
 12895 0000396D 7436                            JZ      SHORT validate_end
 12896 0000396F 3C3F                            CMP     AL,"?"
 12897 00003971 741A                            JZ      SHORT validate_error
 12898 00003973 3C2A                            CMP     AL,"*"
 12899 00003975 7416                            JZ      SHORT validate_error
 12900                                          ;invoke PathChrCmp
 12901 00003977 E8B5F6                          CALL	PATHCHRCMP
 12902 0000397A 75EE                    	JNZ     SHORT validate_loop
 12903 0000397C E30A                            JCXZ    validate_malformed	;If path sep, cannot have meta yet
 12904 0000397E AC                              LODSB				;Look ahead one char
 12905 0000397F 08C0                            OR      AL,AL
 12906 00003981 740E                            JZ      SHORT validate_checktslsh ;Trailing path sep
 12907                                          ;invoke	PathChrCmp
 12908 00003983 E8A9F6                          CALL	PATHCHRCMP
 12909 00003986 75E3                            JNZ     SHORT validate_loop1	;Double path sep?
 12910                                  validate_malformed:
 12911 00003988 41                              INC     CX
 12912 00003989 09C9                            OR      CX,CX                   ;Reset zero
 12913 0000398B EB1C                            JMP     SHORT validate_set_carry
 12914                                  
 12915                                  validate_error:
 12916 0000398D 31C9                            XOR     CX,CX                   ;Flag metas found
 12917 0000398F EBD9                            JMP     SHORT validate_loop
 12918                                  
 12919                                  validate_checktslsh:
 12920                                  ;A bizarre case, "/" is OK, "d:/" is OK, anything else is an error
 12921 00003991 29D6                            SUB     SI,DX
 12922 00003993 83FE02                          CMP     SI,2
 12923 00003996 740D                            JZ      SHORT validate_end	;Two chars, the '/' and the NUL
 12924 00003998 83FE04                          CMP     SI,4
 12925 0000399B 75EB                            JNZ     SHORT validate_malformed ;Four chars, "D:/<NUL>"
 12926 0000399D 89D6                            MOV     SI,DX
 12927 0000399F 807C013A                        CMP     BYTE [SI+1],':'
 12928 000039A3 75E3                            JNZ     SHORT validate_malformed ;Second char must be a ':'
 12929                                  
 12930                                  validate_end:
 12931 000039A5 09C9                            OR      CX,CX                   ;Clears carry
 12932 000039A7 7501                            JNZ     SHORT validate_ok	;No metas found, leave carry clear
 12933                                  validate_set_carry:
 12934 000039A9 F9                              STC
 12935                                  validate_ok:
 12936 000039AA 5E                              POP     SI
 12937 000039AB 59                              POP     CX
 12938 000039AC 58                              POP     AX
 12939 000039AD C3                              RETN
 12940                                  
 12941                                  ;validate_path   ENDP
 12942                                  
 12943                                  ;BREAK <Access_path - determine if file found>
 12944                                  
 12945                                  ;
 12946                                  ; Input: DS:DX point to a path
 12947                                  ; Output: Carry reset - outputs of GetPath
 12948                                  ;         carry set - AL has error code
 12949                                  ;
 12950                                          ;procedure   Access_path,NEAR
 12951                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 12952                                  
 12953                                  access_path:
 12954 000039AE E8A0FF                          CALL	validate_path
 12955 000039B1 720D                            JC      SHORT access_no_path
 12956 000039B3 89D6                            MOV     SI,DX
 12957                                  	;invoke	GetPath
 12958 000039B5 E887DD                          CALL	GETPATH
 12959                                          ;retnc
 12960 000039B8 7309                            jnc	short ACCESS_RET
 12961 000039BA B002                    	MOV     AL,error_file_not_found
 12962 000039BC 08C9                            OR      CL,CL
 12963 000039BE 7502                            JNZ     short access_STC_ret
 12964                                  access_no_path:
 12965 000039C0 B003                            MOV     AL,error_path_not_found
 12966                                  access_STC_ret:
 12967 000039C2 F9                              STC
 12968                                  ACCESS_RET:
 12969                                          ;return
 12970 000039C3 C3                      	RETN
 12971                                  
 12972                                  ;access_path ENDP
 12973                                  
 12974                                  ;BREAK <Find_free_jfn - return a free jfn in users PDB>
 12975                                  ;
 12976                                  ; system file table data
 12977                                  ;
 12978                                  
 12979                                  ; The system file table is two linear tables.  The first table is the
 12980                                  ; DOS initialization table containing a default number of FCBs.  The
 12981                                  ; first word in the table is a link to the second table, which
 12982                                  ; SYSINIT sets up, the second word is the number of FCBs in the table.
 12983                                  
 12984                                  ;
 12985                                  ; find_free_jfn
 12986                                  ; input:    none
 12987                                  ; output:   JNC <found>
 12988                                  ;               ES:DI is pointer to free JFN
 12989                                  ;           JC  <no free jfns>
 12990                                  ;               ES,DI indeterminate
 12991                                  ;
 12992                                          ;procedure   Find_free_jfn,NEAR
 12993                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 12994                                  
 12995                                  Find_free_jfn:
 12996                                          
 12997 000039C4 50                      	PUSH    AX
 12998 000039C5 51                              PUSH    CX
 12999 000039C6 B0FF                            MOV     AL,0FFh
 13000                                          ;MOV	ES,[CurrentPDB]
 13001 000039C8 368E06[8B01]            	MOV     ES,[SS:CurrentPDB] ; 15/03/2018
 13002 000039CD BF1800                          MOV     DI,PDB.JFN_TABLE
 13003 000039D0 B91400                          MOV     CX,FILPERPROC
 13004 000039D3 F2AE                            REPNE   SCASB
 13005 000039D5 F9                              STC
 13006 000039D6 7502                            JNZ     SHORT Find_jfn_ret
 13007 000039D8 4F                              DEC     DI
 13008 000039D9 F8                              CLC
 13009                                  Find_jfn_ret:
 13010 000039DA 59                              POP     CX
 13011 000039DB 58                              POP     AX
 13012 000039DC C3                              RETN
 13013                                  
 13014                                  ;Find_free_jfn   ENDP
 13015                                  
 13016                                  ;BREAK <find_free_sfn - return a free sfn and sf pointer>
 13017                                  
 13018                                  ; find_free_sfn
 13019                                  ; input:    none
 13020                                  ; output:   JNC <found>
 13021                                  ;               ES:DI is free sf entry
 13022                                  ;               SI is sfn
 13023                                  ;           JC  <not found>
 13024                                  ;               ES,DI,SI indeterminate
 13025                                  ;
 13026                                  ; sft_addr -->  (link) count (fcbs)
 13027                                  ; links = -1 means end of list
 13028                                  ;
 13029                                          ;procedure   Find_free_sfn,NEAR
 13030                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13031                                  
 13032                                  Find_free_sfn:
 13033                                  
 13034 000039DD 53                              PUSH    BX
 13035 000039DE 51                              PUSH    CX
 13036                                          ;LES     BX,[SFT_ADDR]		; head of chain of tables
 13037 000039DF 36C41E[F400]                    LES     BX,[SS:SFT_ADDR] ; 15/03/2018
 13038 000039E4 31F6                    	XOR     SI,SI                   ; count of sfn
 13039                                  
 13040                                          ; ES:BX points to table... search through table
 13041                                  Find_sfn_in_table:
 13042 000039E6 83FBFF                          CMP     BX,-1                   ; end of chain
 13043 000039E9 7418                            JZ      SHORT Find_no_free_sfns
 13044 000039EB BF0600                          MOV     DI,SFT.SFT_TABLE	; offset to sf entry
 13045 000039EE 268B4F04                        MOV     CX,[ES:BX+4] 		; count of fcbs in table
 13046                                  
 13047                                  Find_sfn:
 13048                                          ;CMP	BYTE [ES:BX+DI+SF_ENTRY.sf_ref_count],0h
 13049 000039F2 26803900                        CMP	BYTE [ES:BX+DI],0 ; SF_ENTRY.sf_ref_count = 0
 13050 000039F6 740E                            JZ      SHORT Find_got_sfn	; ref count is 0 -> free entry
 13051 000039F8 83C728                          ADD     DI,SF_ENTRY.size	; look to next entry
 13052 000039FB 46                              INC     SI                      ; bump sfn
 13053 000039FC E2F4                            LOOP    Find_sfn
 13054 000039FE 26C41F                          LES     BX,[ES:BX]		; link to next
 13055 00003A01 EBE3                            JMP     SHORT Find_sfn_in_table ; look for more
 13056                                  
 13057                                  Find_no_free_sfns:
 13058 00003A03 F9                              STC
 13059 00003A04 EB03                            JMP     SHORT Find_ret
 13060                                  Find_got_sfn:
 13061 00003A06 01DF                            ADD     DI,BX
 13062 00003A08 F8                              CLC
 13063                                  Find_ret:
 13064 00003A09 59                              POP     CX
 13065 00003A0A 5B                              POP     BX
 13066 00003A0B C3                              RETN
 13067                                  
 13068                                  ;Find_free_sfn   ENDP
 13069                                  
 13070                                  ;BREAK <$Open - open a file handle>
 13071                                  
 13072                                  ;   Assembler usage:
 13073                                  ;           LDS     DX, Name
 13074                                  ;           MOV     AH, Open
 13075                                  ;           MOV     AL, access
 13076                                  ;           INT     int_command
 13077                                  ;
 13078                                  ;       ACCESS          Function
 13079                                  ;       ------          --------
 13080                                  ;       open_for_read   file is opened for reading
 13081                                  ;       open_for_write  file is opened for writing
 13082                                  ;       open_for_both   file is opened for both reading and writing.
 13083                                  ;
 13084                                  ;   Error returns:
 13085                                  ;           AX = error_invalid_access
 13086                                  ;              = error_file_not_found
 13087                                  ;              = error_access_denied
 13088                                  ;              = error_too_many_open_files
 13089                                  ;
 13090                                  
 13091                                          ;procedure   $Open,NEAR
 13092                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13093                                  _$OPEN:       
 13094                                  	;MOV     BYTE [Cr_read_only],0
 13095 00003A0C 36C606[EE05]00          	MOV     BYTE [SS:Cr_read_only],0 ; 14/03/2018
 13096                                  open_create:
 13097 00003A12 3C02                            CMP     AL,open_for_both        ; validate access
 13098 00003A14 7605                            JBE     SHORT open_get_jfn
 13099                                          ;error  error_invalid_access	; error macro (in DOSMAC.ASM)
 13100 00003A16 B00C                    	MOV	AL,error_invalid_access
 13101 00003A18 E9D2CE                  	JMP	SYS_RET_ERR
 13102                                  
 13103                                  open_get_jfn:
 13104                                          ;MOV     [open_name+2],DS
 13105 00003A1B 368C1E[E005]                    MOV	[SS:open_name+2],DS ; 14/03/2018
 13106                                  	;context DS			; context macro (in DOSMAC.ASM)
 13107 00003A20 16                              PUSH	SS
 13108 00003A21 1F                      	POP	DS
 13109                                  		;ASSUME  DS:DOSGROUP
 13110 00003A22 8916[DE05]              	MOV     [open_name],DX
 13111 00003A26 A2[E205]                        MOV     [open_access],AL
 13112                                  
 13113                                          ;invoke	Find_free_jfn		; scan through user's area
 13114 00003A29 E898FF                  	CALL	Find_free_jfn	
 13115                                          ; ES:DI is the jfn entry
 13116 00003A2C 7305                            JNC     SHORT open_get_sfn
 13117                                  open_too_many:
 13118                                          ;error	error_too_many_open_files
 13119 00003A2E B004                    	MOV	AL,error_too_many_open_files
 13120 00003A30 E9BACE                  	JMP	SYS_RET_ERR
 13121                                  
 13122                                  open_get_sfn:
 13123 00003A33 8C06[E505]                      MOV     [open_jfn_b],ES
 13124 00003A37 893E[E305]                      MOV     [open_jfn],DI
 13125                                  
 13126                                          ;invoke	Find_free_sfn           ; get a free sft entry
 13127 00003A3B E89FFF                  	CALL	Find_free_sfn
 13128                                          ; ES:DI is the SFT entry that's free, SI is the sfn
 13129 00003A3E 72EE                            JC      SHORT open_too_many
 13130                                  
 13131                                  open_file:
 13132 00003A40 8936[E705]                      MOV     [open_sfn],SI
 13133 00003A44 893E[E905]                      MOV     [open_sfoff],DI
 13134 00003A48 8C06[EB05]                      MOV     [open_sfn_b],ES
 13135                                  ;
 13136                                  ; open the file
 13137                                  ;
 13138 00003A4C 1E                              PUSH    DS
 13139 00003A4D C516[DE05]                      LDS     DX,[open_name]
 13140                                          ;ASSUME  DS:NOTHING
 13141 00003A51 E85AFF                          CALL    access_path
 13142 00003A54 1F                              POP     DS
 13143                                          ;ASSUME  DS:DOSGROUP
 13144 00003A55 7303                            JNC	SHORT open_check_access	; carry set -> error
 13145                                  
 13146                                          ;transfer SYS_RET_ERR
 13147 00003A57 E993CE                  	JMP	SYS_RET_ERR
 13148                                  
 13149                                  open_check_access:
 13150 00003A5A 8E06[DF03]                      MOV     ES,[CURBUF+2]		; get buffer location
 13151 00003A5E 8826[ED05]                      MOV     [open_devid],AH
 13152 00003A62 F6C480                          TEST    AH,80h
 13153 00003A65 7525                            JNZ     SHORT open_set_fcb_dev	; is a device
 13154 00003A67 268A470B                        MOV     AL,[ES:BX+0BH]
 13155 00003A6B A810                            TEST    AL,attr_directory       ; can't open directories
 13156 00003A6D 7405                            JZ      short open_try_volid
 13157                                  
 13158                                  open_bad_access:
 13159                                          ;error	error_access_denied
 13160 00003A6F B005                    	MOV	AL,error_access_denied
 13161 00003A71 E979CE                  	JMP	SYS_RET_ERR
 13162                                  
 13163                                  open_try_volid:
 13164 00003A74 A808                            TEST    AL,attr_volume_id       ; can't open volume ids
 13165 00003A76 75F7                            JNZ     SHORT open_bad_access
 13166 00003A78 A801                            TEST    AL,attr_read_only       ; check write on read only
 13167 00003A7A 7412                            JZ      SHORT open_set_fcb
 13168 00003A7C 803E[EE05]00                    CMP     BYTE [Cr_read_only],0
 13169 00003A81 750B                            JNZ     SHORT open_set_fcb	; ok if creating read only file
 13170 00003A83 803E[E205]00                    CMP     BYTE [open_access], open_for_read
 13171 00003A88 75E5                            JNZ     SHORT open_bad_access	; writing on a read only file
 13172 00003A8A EB02                            JMP     SHORT open_set_fcb
 13173                                  
 13174                                  open_set_fcb_dev:
 13175 00003A8C 16                              PUSH    SS
 13176 00003A8D 07                              POP     ES                      ;Device opens are DOSGROUP relative
 13177                                  
 13178                                  open_set_fcb:
 13179 00003A8E B90B00                          MOV     CX,11                   ; copy name into FCB...
 13180 00003A91 56                              PUSH    SI                      ; ES:BX is source, must change
 13181 00003A92 89DE                            MOV     SI,BX                   ; ES:SI is source
 13182 00003A94 8B3E[E905]                      MOV     DI,[open_sfoff]		; ??:DI is dest
 13183 00003A98 1E                              PUSH    DS
 13184 00003A99 06                              PUSH    ES
 13185 00003A9A 8E06[EB05]                      MOV     ES,[open_sfn_b]		; ES:DI is dest
 13186 00003A9E 1F                              POP     DS                      ; DS:SI is source
 13187                                          ;ASSUME  DS:NOTHING
 13188                                  ;
 13189                                  ; need to save attribute for the close operation
 13190                                  ;
 13191 00003A9F 8A670B                          MOV     AH,[BX+0BH] 		; save attribute for close
 13192 00003AA2 26886502                        MOV     [ES:DI+2],AH
 13193                                  
 13194 00003AA6 83C704                          ADD     DI,SF_ENTRY.sf_fcb+1	; point to name
 13195                                  
 13196                                          ;IF      KANJI
 13197                                          ;MOVSB
 13198                                          ;CMP     BYTE PTR ES:[DI-1],5
 13199                                          ;JNZ     NOTKTRAN
 13200                                          ;MOV     BYTE PTR ES:[DI-1],0E5H
 13201                                  ;NOTKTRAN:
 13202                                          ;DEC     CX
 13203                                          ;ENDIF
 13204                                  
 13205 00003AA9 F3A4                            REP     MOVSB                   ; move in parsed name
 13206 00003AAB 1F                              POP     DS
 13207                                          ;ASSUME	DS:DOSGROUP
 13208 00003AAC 5E                              POP     SI
 13209 00003AAD C43E[E905]                      LES     DI,[open_sfoff]
 13210 00003AB1 83C703                          ADD     DI,SF_ENTRY.sf_fcb	; offset on fcb in sf entry
 13211 00003AB4 8A26[ED05]                      MOV     AH,[open_devid]
 13212                                          ;invoke	DOOPEN                  ; let open code fill in blanks
 13213 00003AB8 E82FEF                          CALL	DOOPEN
 13214                                  	;context DS
 13215 00003ABB 16                              PUSH	SS
 13216 00003ABC 1F                      	POP	DS
 13217                                  		;ASSUME	DS:DOSGROUP
 13218 00003ABD C43E[E905]              	LES     DI,[open_sfoff]
 13219                                          ;INC	BYTE [ES:DI+SF_ENTRY.sf_ref_count] ; reference this FCB
 13220 00003AC1 26FE05                          INC	BYTE [ES:DI]	; SF_ENTRY.sf_ref_count = 0
 13221 00003AC4 A0[E205]                	MOV     AL,[open_access]	; stash the access
 13222 00003AC7 26884501                        MOV     [ES:DI+1],AL
 13223 00003ACB 31C0                            XOR     AX,AX
 13224 00003ACD 26894524                        MOV     [ES:DI+24H],AX ; beginning of file
 13225 00003AD1 26894526                        MOV     [ES:DI+26H],AX
 13226 00003AD5 40                              INC     AX
 13227 00003AD6 26894511                        MOV     [ES:DI+11H],AX ; byte io only
 13228 00003ADA C43E[E305]                      LES     DI,[open_jfn]
 13229 00003ADE A1[E705]                        MOV     AX,[open_sfn]
 13230 00003AE1 268805                          MOV     [ES:DI],AL		; stash sfn in PDB
 13231 00003AE4 83EF18                          SUB     DI,PDB.JFN_TABLE	; get jfn for user
 13232 00003AE7 89F8                            MOV     AX,DI
 13233                                          ;transfer SYS_RET_OK
 13234 00003AE9 E9F7CD                  	JMP	SYS_RET_OK
 13235                                  
 13236                                  ;$Open   ENDP
 13237                                  
 13238                                  ;BREAK <$UNLINK - delete a file entry>
 13239                                  
 13240                                  ;
 13241                                  ;   Assembler usage:
 13242                                  ;           LDS     DX, name
 13243                                  ;           MOV     AH, Unlink
 13244                                  ;           INT     21h
 13245                                  ;
 13246                                  ;   Error returns:
 13247                                  ;           AX = error_file_not_found
 13248                                  ;              = error_access_denied
 13249                                  ;
 13250                                          ;procedure   $UNLINK,NEAR
 13251                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13252                                  
 13253                                  _$UNLINK:
 13254 00003AEC E8BFFE                  	CALL    access_path
 13255 00003AEF 7303                            JNC     SHORT unlink_check_attr
 13256                                          ;transfer SYS_RET_ERR
 13257 00003AF1 E9F9CD                  	JMP	SYS_RET_ERR
 13258                                  
 13259                                  unlink_check_attr:
 13260 00003AF4 740B                            JZ      SHORT unlink_dir
 13261                                          ;LDS     DI,[CURBUF]	; get directory entry
 13262 00003AF6 36C53E[DD03]                    LDS     DI,[SS:CURBUF] ; 14/03/2018
 13263 00003AFB F6470B01                	TEST    BYTE [BX+0BH],attr_read_only
 13264 00003AFF 7405                            JZ      SHORT unlink_doit
 13265                                  
 13266                                  unlink_dir:
 13267                                          ;error	error_access_denied
 13268 00003B01 B005                    	MOV	AL, error_access_denied
 13269 00003B03 E9E7CD                  	JMP	SYS_RET_ERR
 13270                                  	
 13271                                  unlink_doit:
 13272 00003B06 C64718E5                        MOV     BYTE [BX+18H],0E5h ; delete dir entry
 13273 00003B0A C6450501                        MOV     BYTE [DI+5],1	; dirty the buffer
 13274 00003B0E AD                              LODSW
 13275 00003B0F 89C3                            MOV     BX,AX
 13276 00003B11 81E3FF0F                        AND     BX,0FFFh
 13277                                          ;context DS
 13278 00003B15 16                              PUSH	SS
 13279 00003B16 1F                      	POP	DS
 13280 00003B17 7403                    	JZ      SHORT unlink_flush
 13281                                          ;invoke	RELEASE
 13282 00003B19 E8ADEA                  	CALL	RELEASE
 13283                                  unlink_flush:
 13284 00003B1C 268A4600                        MOV     AL,[ES:BP]
 13285                                          ;invoke FLUSHBUF
 13286 00003B20 E83EEC                          CALL	FLUSHBUF
 13287                                  	;transfer SYS_RET_OK
 13288 00003B23 E9BDCD                  	JMP	SYS_RET_OK
 13289                                  
 13290                                  ;$UNLINK ENDP
 13291                                  
 13292                                  ;BREAK <$CREAT - creat a new file and open him for input>
 13293                                  
 13294                                  ;   Assembler usage:
 13295                                  ;           LDS     DX, name
 13296                                  ;           MOV     AH, Creat
 13297                                  ;           MOV     CX, access
 13298                                  ;           INT     21h
 13299                                  ;       ; AX now has the handle
 13300                                  ;
 13301                                  ;   Error returns:
 13302                                  ;           AX = error_access_denied
 13303                                  ;              = error_path_not_found
 13304                                  ;              = error_too_many_open_files
 13305                                  ;
 13306                                          ;procedure $CREAT,NEAR
 13307                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13308                                  
 13309                                  _$CREAT:        
 13310 00003B26 E828FE                  	CALL    validate_path
 13311 00003B29 7305                            JNC     SHORT unlink_do_make
 13312                                          ;error	error_path_not_found
 13313 00003B2B B003                    	MOV	AL,error_path_not_found
 13314 00003B2D E9BDCD                  	JMP	SYS_RET_ERR
 13315                                  
 13316                                  unlink_do_make:
 13317 00003B30 52                              PUSH    DX
 13318 00003B31 1E                              PUSH    DS
 13319                                          ;context DS
 13320 00003B32 16                              PUSH	SS
 13321 00003B33 1F                      	POP	DS
 13322                                  		; ASSUME DS:DOSGROUP
 13323 00003B34 C706[8C03]FFE5          	MOV     WORD [CREATING],0E5FFh
 13324                                          ;MOV	WORD PTR [THISFCB+2],SS
 13325 00003B3A 8C16[B103]              	MOV     [THISFCB+2],SS
 13326                                          ;MOV    WORD PTR [THISFCB],OFFSET DOSGROUP:AUXSTACK-40
 13327 00003B3E C706[AF03][7204]                MOV     WORD [THISFCB],AUXSTACK-40
 13328 00003B44 89D6                            MOV     SI,DX
 13329 00003B46 88C8                            MOV     AL,CL
 13330 00003B48 80E101                          AND     CL,attr_read_only
 13331 00003B4B 880E[EE05]                      MOV     [Cr_read_only],CL
 13332 00003B4F 1F                              POP     DS
 13333 00003B50 1E                              PUSH    DS
 13334                                  ;ASSUME  DS:NOTHING
 13335                                          ;invoke MakeNode
 13336 00003B51 E849DB                          CALL	MAKENODE
 13337 00003B54 1F                      	POP     DS
 13338 00003B55 5A                              POP     DX
 13339 00003B56 08C0                            OR      AL,AL
 13340 00003B58 7409                            JZ      SHORT creat_open
 13341 00003B5A 3C03                            CMP     AL,3
 13342 00003B5C 7405                            JZ      SHORT creat_open
 13343                                  creat_no_access:
 13344                                          ;error	error_access_denied
 13345 00003B5E B005                    	MOV	AL,error_access_denied
 13346 00003B60 E98ACD                  	JMP	SYS_RET_ERR
 13347                                  creat_open:
 13348 00003B63 B002                            MOV     AL,open_for_both
 13349                                          ;JMP	open_create
 13350 00003B65 E9B3FE                  	JMP	open_get_jfn	; Retro DOS v2.0 - 04/03/2018	
 13351                                  
 13352                                  ;$CREAT ENDP
 13353                                  
 13354                                  ;BREAK <$DUP - duplicate a jfn>
 13355                                  
 13356                                  ;   Assembler usage:
 13357                                  ;           MOV     BX, fh
 13358                                  ;           MOV     AH, Dup
 13359                                  ;           INT     int_command
 13360                                  ;         AX has the returned handle
 13361                                  ;   Errors:
 13362                                  ;           AX = dup_invalid_handle
 13363                                  ;              = dup_too_many_open_files
 13364                                          ;procedure   $DUP,NEAR
 13365                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13366                                  _$DUP:        
 13367                                  	;context DS
 13368 00003B68 16                              PUSH	SS
 13369 00003B69 1F                      	POP	DS
 13370                                  	;invoke Find_free_jfn
 13371 00003B6A E857FE                          CALL	Find_free_jfn
 13372 00003B6D 7219                    	JC      SHORT dup_no_free_handles
 13373                                  
 13374                                  dup_force:
 13375 00003B6F 06                              PUSH    ES
 13376 00003B70 57                              PUSH    DI
 13377                                          ;invoke	Get_sf_from_jfn
 13378 00003B71 E8AA02                  	CALL	get_sf_from_jfn
 13379 00003B74 5E                              POP     SI
 13380 00003B75 1F                              POP     DS
 13381 00003B76 7215                            JC      SHORT dup_bad_handle
 13382                                          ; ES:DI is pointer to sf entry
 13383                                          ; DS:DI is pointer to jfn
 13384                                          ;INC	BYTE [ES:DI+SF_ENTRY.sf_ref_count] 
 13385                                  				; another jfn reference...
 13386 00003B78 26FE05                          INC	BYTE [ES:DI]	; SF_ENTRY.sf_ref_count = 0
 13387 00003B7B 8A470B                          MOV     AL,[BX+0BH]	; get old sfn
 13388 00003B7E 8804                            MOV     [SI],AL                 ; store in new place
 13389 00003B80 83EE18                          SUB     SI,PDB.JFN_TABLE	; get jfn
 13390 00003B83 89F0                            MOV     AX,SI
 13391                                          ;transfer SYS_RET_OK
 13392 00003B85 E95BCD                  	JMP	SYS_RET_OK
 13393                                  
 13394                                  dup_no_free_handles:
 13395                                          ;error	error_too_many_open_files
 13396 00003B88 B004                    	MOV	AL,error_too_many_open_files
 13397 00003B8A E960CD                  	JMP	SYS_RET_ERR
 13398                                  
 13399                                  dup_bad_handle:
 13400                                          ;error	error_invalid_handle
 13401 00003B8D B006                    	MOV	AL,error_invalid_handle
 13402 00003B8F E95BCD                  	JMP	SYS_RET_ERR
 13403                                  
 13404                                  ;$DUP    ENDP
 13405                                  
 13406                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 13407                                  
 13408                                  ;
 13409                                  ;   Assembler usage:
 13410                                  ;           MOV     BX, fh
 13411                                  ;           MOV     CX, newfh
 13412                                  ;           MOV     AH, Dup2
 13413                                  ;           INT     int_command
 13414                                  ;   Error returns:
 13415                                  ;           AX = error_invalid_handle
 13416                                  ;
 13417                                          ;procedure   $DUP2,NEAR
 13418                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13419                                  _$DUP2:     
 13420 00003B92 87D9                    	XCHG    BX,CX                   ; BX < destination jfn
 13421 00003B94 53                              PUSH    BX
 13422 00003B95 51                              PUSH    CX
 13423                                          ;invoke	$CLOSE                  ; close BX
 13424 00003B96 E8AB02                          CALL	_$CLOSE
 13425                                  	;context DS
 13426 00003B99 16                              PUSH	SS
 13427 00003B9A 1F                      	POP	DS
 13428 00003B9B 59                      	POP     CX
 13429 00003B9C 5B                              POP     BX
 13430                                          ;invoke Get_jfn_pointer
 13431 00003B9D E89202                          CALL	get_jfn_pointer
 13432 00003BA0 87D9                    	XCHG    BX,CX
 13433 00003BA2 73CB                            JNC     SHORT dup_force
 13434                                  lseek_bad_handle:
 13435                                          ;error	error_invalid_handle
 13436 00003BA4 B006                    	MOV	AL,error_invalid_handle
 13437 00003BA6 E944CD                  	JMP	SYS_RET_ERR
 13438                                  
 13439                                  ;$DUP2   ENDP
 13440                                  
 13441                                  ;BREAK <$CHMOD - change file attributes>
 13442                                  
 13443                                  ;   Assembler usage:
 13444                                  ;           LDS     DX, name
 13445                                  ;           MOV     CX, attributes
 13446                                  ;           INT     21h
 13447                                  ;   Error returns:
 13448                                  ;           AX = error_path_not_found
 13449                                  ;           AX = error_access_denied
 13450                                  ;
 13451                                          ;procedure $CHMOD,NEAR
 13452                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13453                                  _$CHMOD:        
 13454 00003BA9 3C01                    	CMP     AL,1
 13455 00003BAB 7605                            JBE     SHORT chmod_save
 13456                                          ;error	error_invalid_function
 13457 00003BAD B001                    	MOV	AL,error_invalid_function
 13458 00003BAF E93BCD                  	JMP	SYS_RET_ERR
 13459                                  chmod_save:
 13460 00003BB2 720C                            JB      SHORT chmod_try_file
 13461 00003BB4 89CB                            MOV     BX,CX
 13462 00003BB6 83E3D8                          AND     BX,~attr_changeable  ; NOT attr_changeable
 13463 00003BB9 7405                            JZ      SHORT chmod_try_file
 13464                                  
 13465                                  chmod_bad:
 13466                                          ;error	error_access_denied
 13467 00003BBB B005                    	MOV	AL,error_access_denied
 13468                                  chmod_bye:			; Retro DOS v2.0 - 04/03/2018
 13469 00003BBD E92DCD                  	JMP	SYS_RET_ERR
 13470                                  
 13471                                  ;chmod_bye:
 13472                                          ;transfer SYS_RET_ERR
 13473                                  	;JMP	SYS_RET_ERR
 13474                                  
 13475                                  chmod_try_file:
 13476 00003BC0 51                              PUSH    CX
 13477 00003BC1 50                              PUSH    AX
 13478 00003BC2 E8E9FD                          CALL    access_path
 13479 00003BC5 5A                              POP     DX
 13480 00003BC6 59                              POP     CX
 13481 00003BC7 72F4                            JC	SHORT chmod_bye
 13482                                          ;LES     DI,[CURBUF]
 13483 00003BC9 36C43E[DD03]                    LES     DI,[SS:CURBUF] ; 15/03/2018
 13484                                  	;context DS
 13485 00003BCE 16                              PUSH	SS
 13486 00003BCF 1F                      	POP	DS
 13487 00003BD0 08D2                    	OR      DL,DL
 13488 00003BD2 7416                            JZ      SHORT chmod_fetch
 13489 00003BD4 2680670BD8                      AND     BYTE [ES:BX+0BH],~attr_changeable
 13490 00003BD9 26084F0B                        OR      BYTE [ES:BX+0BH],CL
 13491 00003BDD 26C6450501                      MOV     BYTE [ES:DI+5],1
 13492 00003BE2 B0FF                            MOV     AL,-1
 13493                                  	;invoke	FlushBuf
 13494 00003BE4 E87AEB                          CALL	FLUSHBUF
 13495                                  	;transfer SYS_RET_OK
 13496 00003BE7 E9F9CC                  	JMP	SYS_RET_OK
 13497                                  chmod_fetch:
 13498 00003BEA 31C9                            XOR     CX,CX
 13499 00003BEC 268A4F0B                        MOV     CL,[ES:BX+0BH]
 13500                                          ;invoke Get_user_stack
 13501 00003BF0 E88CCB                          CALL	get_user_stack
 13502                                  	;MOV	[SI.user_CX],CX
 13503 00003BF3 894C04                  	MOV     [SI+4],CX
 13504                                          ;transfer SYS_RET_OK
 13505 00003BF6 E9EACC                  	JMP	SYS_RET_OK
 13506                                  
 13507                                  ;$chmod  ENDP
 13508                                  
 13509                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13510                                  
 13511                                  ;   Assembler usage:
 13512                                  ;               LDS     SI,area
 13513                                  ;               MOV     DL,drive
 13514                                  ;               INT     21h
 13515                                  ;           ; DS:SI is a pointer to 64 byte area that contains drive
 13516                                  ;           ; current directory.
 13517                                  ;   Error returns:
 13518                                  ;           AX = error_invalid_drive
 13519                                  
 13520                                  ;procedure   $CURRENT_DIR,NEAR
 13521                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13522                                  
 13523                                  _$CURRENT_DIR:
 13524                                  
 13525 00003BF9 1E                              PUSH    DS
 13526 00003BFA 53                              PUSH    BX
 13527 00003BFB 56                              PUSH    SI
 13528                                          ;invoke $get_DPB
 13529 00003BFC E854D1                  	CALL	_$GET_DPB
 13530                                  ;
 13531                                  ; ES:BP points to DPB.  DS:SI points to user stack, unless error
 13532                                  ;
 13533 00003BFF 3CFF                            CMP     AL,0FFh
 13534 00003C01 7508                            JNZ     SHORT current_copy
 13535 00003C03 58                              POP     AX              ; Clean Stack
 13536 00003C04 58                              POP     AX
 13537 00003C05 58                              POP     AX
 13538                                          ;error	error_invalid_drive
 13539 00003C06 B00F                    	MOV	AL,error_invalid_drive
 13540 00003C08 E9E2CC                  	JMP	SYS_RET_ERR
 13541                                  
 13542                                  current_copy:
 13543 00003C0B 5F                              POP     DI              ; where to move to
 13544                                          ;POP	[SI.user_BX]    ; restore old BX
 13545 00003C0C 8F4402                          POP	WORD [SI+2]
 13546 00003C0F 5B                      	POP     BX
 13547                                          ;MOV	[SI.user_DS],BX ; and restore old DS
 13548 00003C10 895C0E                  	MOV	[SI+0EH],BX
 13549                                  ;
 13550                                  ; ES:BP is pointer to DPB. BX:DI is pointer to destination
 13551                                  ;
 13552 00003C13 26837E1CFF                      CMP     WORD [ES:BP+1CH],-1
 13553 00003C18 750D                            JNZ     SHORT current_ok
 13554 00003C1A 53                              PUSH    BX
 13555 00003C1B 57                              PUSH    DI
 13556                                          ;MOV     BYTE [ATTRIB],attr_all
 13557 00003C1C 36C606[6F03]16                  MOV	BYTE [SS:ATTRIB],attr_all ; 12/03/2018
 13558                                  	;invoke GETCURRDIR
 13559 00003C22 E808DA                  	CALL	GETCURRDIR
 13560 00003C25 5F                              POP     DI
 13561 00003C26 5B                              POP     BX
 13562                                  current_ok:
 13563 00003C27 89EE                            MOV     SI,BP           ; ES:SI is source
 13564 00003C29 06                              PUSH    ES
 13565 00003C2A 1F                              POP     DS              ; DS:SI is source
 13566 00003C2B 8EC3                            MOV     ES,BX           ; ES:DI is destination
 13567                                          ;CMP	[SI.dpb_current_dir],0
 13568 00003C2D 837C1C00                        CMP	WORD [SI+1CH],0
 13569 00003C31 7504                    	JNZ     SHORT current_move
 13570                                          ;MOV	BYTE PTR [SI.dpb_dir_text],0
 13571 00003C33 C6441E00                        MOV     BYTE [SI+1EH],0
 13572                                  
 13573                                  current_move:
 13574 00003C37 83C61E                          ADD     SI,DPB.DIR_TEXT
 13575 00003C3A B94000                          MOV     CX,DIRSTRLEN
 13576                                  current_loop:
 13577 00003C3D AC                              LODSB
 13578 00003C3E AA                              STOSB
 13579 00003C3F 08C0                            OR      AL,AL
 13580 00003C41 E0FA                            LOOPNZ  current_loop
 13581                                          ;transfer SYS_RET_OK
 13582 00003C43 E99DCC                  	JMP	SYS_RET_OK
 13583                                  
 13584                                  ;$CURRENT_DIR    ENDP
 13585                                  
 13586                                  ;BREAK <$RENAME - move directory entries around>
 13587                                  
 13588                                  ;   Assembler usage:
 13589                                  ;           LDS     DX, source
 13590                                  ;           LES     DI, dest
 13591                                  ;           MOV     AH, Rename
 13592                                  ;           INT     21h
 13593                                  ;
 13594                                  ;   Error returns:
 13595                                  ;           AX = error_file_not_found
 13596                                  ;              = error_not_same_device
 13597                                  ;              = error_access_denied
 13598                                  
 13599                                  ;procedure   $RENAME,near
 13600                                  
 13601                                  _$RENAME:
 13602                                  	; 12/03/2018
 13603                                          ;MOV     [rename_source],DX
 13604                                          ;MOV     [rename_source+2],DS
 13605                                          ;MOV     [rename_dest],DI
 13606                                          ;MOV     [rename_dest+2],ES
 13607 00003C46 368916[EF05]            	MOV     [SS:rename_source],DX
 13608 00003C4B 368C1E[F105]                    MOV     [SS:rename_source+2],DS
 13609 00003C50 36893E[F305]                    MOV     [SS:rename_dest],DI
 13610 00003C55 368C06[F505]                    MOV     [SS:rename_dest+2],ES
 13611 00003C5A E851FD                          CALL    access_path
 13612 00003C5D 7303                            JNC     SHORT rename_check_dir
 13613                                          ;transfer SYS_RET_ERR
 13614 00003C5F E98BCC                  	JMP	SYS_RET_ERR
 13615                                  
 13616                                  rename_check_dir:
 13617 00003C62 742A                            JZ      SHORT rename_no_access
 13618                                          ;MOV     DS,[CurBuf+2]
 13619 00003C64 368E1E[DF03]            	MOV     DS,[SS:CURBUF+2] ; 12/03/2018
 13620 00003C69 FF7718                          PUSH    WORD [BX+18H]
 13621 00003C6C FF771A                          PUSH    WORD [BX+1AH]
 13622 00003C6F FF771E                          PUSH    WORD [BX+1EH]
 13623 00003C72 FF771C                          PUSH    WORD [BX+1CH]
 13624 00003C75 FF7716                          PUSH    WORD [BX+16H]
 13625 00003C78 FF770B                          PUSH    WORD [BX+0BH]
 13626                                  	; 12/03/2018
 13627                                          ;PUSH    WORD [ThisDrv]
 13628                                          ;LDS     SI,[rename_dest]
 13629 00003C7B 36FF36[9903]                    PUSH    WORD [SS:THISDRV]
 13630 00003C80 36C536[F305]                    LDS     SI,[SS:rename_dest]
 13631                                          ;invoke GetPath
 13632 00003C85 E8B7DA                          call	GETPATH
 13633 00003C88 58                      	POP     AX
 13634 00003C89 7208                            JC      SHORT rename_check_drives
 13635                                  rename_bad_access:
 13636 00003C8B 83C40C                          ADD     SP,12
 13637                                  rename_no_access:
 13638                                          ;error	error_access_denied
 13639 00003C8E B005                    	MOV	AL,error_access_denied
 13640 00003C90 E95ACC                  	JMP	SYS_RET_ERR
 13641                                  
 13642                                  rename_check_drives:
 13643                                          ;CMP     AL,[ThisDrv]
 13644 00003C93 363A06[9903]                    CMP	AL, [SS:THISDRV] 	; 12/03/2018
 13645 00003C98 7408                    	JZ      SHORT rename_create
 13646 00003C9A 83C40C                          ADD     SP,12
 13647                                          ;error	error_not_same_device
 13648 00003C9D B011                    	MOV	AL,error_not_same_device
 13649 00003C9F E94BCC                  	JMP	SYS_RET_ERR
 13650                                  
 13651                                  rename_create:
 13652                                  	; 12/03/2018
 13653                                          ;LDS     SI,[rename_dest]
 13654 00003CA2 36C536[F305]                    LDS     SI,[SS:rename_dest]
 13655 00003CA7 58                              POP     AX
 13656 00003CA8 50                              PUSH    AX
 13657                                  	;MOV     WORD [Creating],0E5FFh
 13658                                          ;MOV     [THISFCB+2],SS
 13659                                          ;MOV     WORD [THISFCB],AUXSTACK-40
 13660 00003CA9 36C706[8C03]FFE5        	MOV     WORD [SS:CREATING],0E5FFh
 13661 00003CB0 368C16[B103]                    MOV     [SS:THISFCB+2],SS
 13662 00003CB5 36C706[AF03][7204]              MOV     WORD [SS:THISFCB],AUXSTACK-40
 13663                                          ;invoke	MakeNode
 13664 00003CBC E8DED9                  	CALL	MAKENODE
 13665 00003CBF 72CA                            JC      SHORT rename_bad_access
 13666                                          ;LDS     SI,[CURBUF]
 13667 00003CC1 36C536[DD03]                    LDS	SI,[SS:CURBUF]
 13668 00003CC6 58                      	POP     AX
 13669 00003CC7 88470B                          MOV     [BX+0BH],AL
 13670 00003CCA 8F4716                          POP     WORD [BX+16H]
 13671 00003CCD 8F471C                          POP     WORD [BX+1CH]
 13672 00003CD0 8F471E                          POP     WORD [BX+1EH]
 13673 00003CD3 8F471A                          POP     WORD [BX+1AH]
 13674 00003CD6 8F4718                          POP     WORD [BX+18H]
 13675 00003CD9 C6440501                        MOV     BYTE [SI+5],1
 13676                                          ;LDS     SI,[rename_source]
 13677 00003CDD 36C536[EF05]            	LDS	SI,[SS:rename_source]
 13678                                          ;invoke	GetPath
 13679 00003CE2 E85ADA                          CALL	GETPATH
 13680                                  	;LDS     SI,[CURBUF]
 13681 00003CE5 36C536[DD03]            	LDS     SI,[SS:CURBUF]
 13682 00003CEA C607E5                          MOV     BYTE [BX],0E5h
 13683 00003CED C6440501                        MOV     BYTE [SI+5],1
 13684                                          ;context DS
 13685 00003CF1 16                              PUSH	SS
 13686 00003CF2 1F                      	POP	DS
 13687 00003CF3 B0FF                    	MOV     AL,0FFh
 13688                                          ;invoke FlushBuf
 13689 00003CF5 E869EA                  	CALL	FLUSHBUF
 13690                                          ;transfer SYS_RET_OK
 13691 00003CF8 E9E8CB                  	JMP	SYS_RET_OK
 13692                                  
 13693                                  ;$RENAME ENDP
 13694                                  
 13695                                  ;BREAK <$FIND_FIRST - find first matching xenix filename>
 13696                                  
 13697                                  ;   Assembler usage:
 13698                                  ;           MOV AH, FindFirst
 13699                                  ;           LDS DX, name
 13700                                  ;           MOV CX, attr
 13701                                  ;           INT 21h
 13702                                  ;       ; DMA address has datablock
 13703                                  ;
 13704                                  ;   Error Returns:
 13705                                  ;           AX = error_file_not_found
 13706                                  ;              = error_no_more_files
 13707                                  
 13708                                  ;procedure  $FIND_FIRST,near
 13709                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13710                                  
 13711                                  _$FIND_FIRST:        
 13712 00003CFB E853FC                  	CALL	validate_path
 13713 00003CFE 7307                            JNC     SHORT find_get
 13714 00003D00 7405                            JZ      SHORT find_get
 13715                                          ;error	error_file_not_found
 13716 00003D02 B002                    	MOV	AL,error_file_not_found
 13717 00003D04 E9E6CB                  	JMP	SYS_RET_ERR
 13718                                  find_get:
 13719 00003D07 89D6                            MOV     SI,DX
 13720 00003D09 51                              PUSH    CX
 13721                                  	; 12/03/2018
 13722                                          ;INC     BYTE [NoSetDir] ; if we find a dir, don't change to it
 13723 00003D0A 36FE06[D500]                    INC     BYTE [SS:NoSetDir]
 13724                                          ;MOV     WORD [Creating],0E500h
 13725 00003D0F 36C706[8C03]00E5                MOV     WORD [SS:CREATING],0E500h
 13726 00003D16 E826DA                  	CALL    GETPATH
 13727 00003D19 59                              POP     CX
 13728                                          ;MOV     [Attrib],CL
 13729 00003D1A 36880E[6F03]            	mov	[SS:ATTRIB],CL
 13730                                  find_check:
 13731 00003D1F 7305                            JNC     SHORT find_check_attr
 13732                                  find_no_more:
 13733                                          ;error	error_no_more_files
 13734 00003D21 B012                    	MOV	AL,error_no_more_files
 13735 00003D23 E9C7CB                  	JMP	SYS_RET_ERR
 13736                                  find_check_attr:
 13737                                          ;MOV     DS,[CURBUF+2]
 13738 00003D26 368E1E[DF03]                    MOV     DS,[SS:CURBUF+2]
 13739 00003D2B 8A6F0B                  	MOV     CH,[BX+0BH]
 13740                                          ;invoke MatchAttributes
 13741 00003D2E E8D8DB                          CALL	MatchAttributes
 13742 00003D31 740D                    	JZ      SHORT found_it
 13743                                          ;PUSH    WORD [LastEnt]
 13744 00003D33 36FF36[2101]            	PUSH    WORD [SS:LASTENT]
 13745                                          ;MOV     BX,[DirStart]
 13746 00003D38 368B1E[C103]            	MOV     BX,[SS:DIRSTART]
 13747 00003D3D E9A000                          JMP     find_it_next
 13748                                  found_it:
 13749                                          ;LES     DI,[DMAADD]
 13750                                          ;MOV     AL,[Attrib]
 13751 00003D40 36C43E[DF00]                    LES     DI,[SS:DMAADD]
 13752 00003D45 36A0[6F03]                      MOV     AL,[SS:ATTRIB]
 13753 00003D49 AA                              STOSB                           ; find_buf 0 = attribute in search
 13754                                          ;MOV     AL,[ThisDrv]
 13755 00003D4A 36A0[9903]                      MOV     AL,[SS:THISDRV]
 13756 00003D4E AA                              STOSB                           ; find_buf 1 = drive
 13757 00003D4F B90B00                          MOV     CX,11
 13758 00003D52 53                              PUSH    BX
 13759 00003D53 BE[6303]                        MOV     SI,NAME1		; find_buf 2 = formatted name
 13760 00003D56 1E                              PUSH    DS
 13761 00003D57 16                              PUSH    SS
 13762 00003D58 1F                              POP     DS
 13763                                  
 13764                                          ;IF      KANJI
 13765                                          ;MOVSB
 13766                                          ;CMP     BYTE PTR ES:[DI-1],5
 13767                                          ;JNZ     NOTKANJB
 13768                                          ;MOV     BYTE PTR ES:[DI-1],0E5H
 13769                                  ;NOTKANJB:
 13770                                          ;DEC     CX
 13771                                          ;ENDIF
 13772                                  
 13773 00003D59 F3A4                            REP     MOVSB
 13774 00003D5B 1F                              POP     DS
 13775                                          ;MOV     AX,[LastEnt]
 13776 00003D5C 36A1[2101]                      MOV     AX,[SS:LASTENT]
 13777 00003D60 AB                              STOSW                           ; find_buf 13 = LastEnt
 13778                                          ;MOV     AX,[ThisDPB]
 13779 00003D61 36A1[9A03]                      MOV     AX,[SS:THISDPB]
 13780 00003D65 AB                              STOSW                           ; find_buf 15 = ThisDPB
 13781                                          ;MOV     AX,[ThisDPB+2]
 13782 00003D66 36A1[9C03]                      MOV     AX,[SS:THISDPB+2]
 13783 00003D6A AB                              STOSW
 13784                                          ;MOV     AX,[DirStart]
 13785 00003D6B 36A1[C103]                      MOV     AX,[SS:DIRSTART]
 13786 00003D6F AB                              STOSW                           ; find_buf 19 = DirStart
 13787 00003D70 8A470B                          MOV     AL,[BX+0BH]
 13788 00003D73 AA                              STOSB                           ; find_buf 21 = attribute found
 13789 00003D74 8B4716                          MOV     AX,[BX+16H]
 13790 00003D77 AB                              STOSW                           ; find_buf 22 = time
 13791 00003D78 8B4718                          MOV     AX,[BX+18H]
 13792 00003D7B AB                              STOSW                           ; find_buf 24 = date
 13793 00003D7C 8B471C                          MOV     AX,[BX+1CH]
 13794 00003D7F AB                              STOSW                           ; find_buf 26 = low(size)
 13795 00003D80 8B471E                          MOV     AX,[BX+1EH]
 13796 00003D83 AB                              STOSW                           ; find_buf 28 = high(size)
 13797 00003D84 5E                              POP     SI
 13798 00003D85 B90800                          MOV     CX,8                    ; find_buf 30 = packed name
 13799                                  find_loop_name:
 13800 00003D88 AC                              LODSB
 13801 00003D89 AA                              STOSB
 13802 00003D8A 3C20                            CMP     AL," "
 13803 00003D8C E0FA                            LOOPNZ  find_loop_name
 13804 00003D8E 7501                            JNZ	SHORT find_check_dot
 13805 00003D90 4F                              DEC     DI
 13806                                  find_check_dot:
 13807 00003D91 01CE                            ADD     SI,CX
 13808 00003D93 803C20                          CMP     BYTE [SI]," "
 13809 00003D96 740F                            JZ      SHORT find_done
 13810 00003D98 B02E                            MOV     AL,"."
 13811 00003D9A AA                              STOSB
 13812 00003D9B B90300                          MOV     CX,3
 13813                                  find_loop_ext:
 13814 00003D9E AC                              LODSB
 13815 00003D9F AA                              STOSB
 13816 00003DA0 3C20                            CMP     AL," "
 13817 00003DA2 E0FA                            LOOPNZ  find_loop_ext
 13818 00003DA4 7501                            JNZ     SHORT find_done
 13819 00003DA6 4F                              DEC     DI
 13820                                  find_done:
 13821 00003DA7 30C0                            XOR     AL,AL
 13822 00003DA9 AA                              STOSB
 13823                                          ;transfer SYS_RET_OK
 13824 00003DAA E936CB                  	JMP	SYS_RET_OK
 13825                                  
 13826                                  ;$FIND_FIRST ENDP
 13827                                  
 13828                                  ;BREAK <$FIND_NEXT - scan for match in directory>
 13829                                  
 13830                                  ;   Assembler usage:
 13831                                  ;       ; dma points at area returned by find_first
 13832                                  ;           MOV AH, findnext
 13833                                  ;           INT 21h
 13834                                  ;       ; next entry is at dma
 13835                                  ;
 13836                                  ;   Error Returns:
 13837                                  ;           AX = error_no_more_files
 13838                                  
 13839                                  ;procedure   $FIND_NEXT,near
 13840                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 13841                                          
 13842                                  _$FIND_NEXT:
 13843                                  	;LDS     SI,[DMAADD]
 13844 00003DAD 36C536[DF00]                    LDS	SI, [SS:DMAADD] ; 12/03/2018
 13845 00003DB2 89F2                    	MOV     DX,SI
 13846 00003DB4 42                              INC     DX
 13847 00003DB5 56                              PUSH    SI
 13848                                          ;invoke	MOVNAMENOSET
 13849 00003DB6 E8A8F1                          CALL	MOVNAMENOSET
 13850 00003DB9 5E                      	POP     SI
 13851 00003DBA 7305                            JNC     SHORT find_load
 13852                                  
 13853                                  findnext_no_more:
 13854                                          ;error	error_no_more_files
 13855 00003DBC B012                    	MOV	AL,error_no_more_files
 13856 00003DBE E92CCB                  	JMP	SYS_RET_ERR
 13857                                  
 13858                                  find_load:
 13859 00003DC1 8B440D                          MOV     AX,[SI+0DH]
 13860 00003DC4 C46C0F                          LES     BP,[SI+0FH]
 13861 00003DC7 09C0                            OR      AX,AX
 13862 00003DC9 78F1                            JS      SHORT findnext_no_more
 13863                                          ;MOV    BX,[SI.find_buf_DirStart]
 13864 00003DCB 8B5C13                          MOV     BX,[SI+13H]
 13865 00003DCE 8A14                    	MOV     DL,[SI]
 13866                                  	; 12/03/2018
 13867                                          ;MOV     [Attrib],DL
 13868 00003DD0 368816[6F03]                    MOV	[SS:ATTRIB],DL
 13869 00003DD5 50                      	PUSH    AX
 13870                                          ;MOV     [ThisDPB],BP
 13871                                          ;MOV     [ThisDPB+2],ES
 13872 00003DD6 36892E[9A03]                    MOV     [SS:THISDPB],BP
 13873 00003DDB 368C06[9C03]                    MOV     [SS:THISDPB+2],ES
 13874                                  find_it_next:
 13875                                          ;invoke SetDirSrch
 13876 00003DE0 E890D8                          CALL	SETDIRSRCH
 13877                                  	;ASSUME DS:DOSGROUP
 13878 00003DE3 58                              POP     AX
 13879 00003DE4 C706[D503]FFFF                  MOV     WORD [ENTLAST],-1
 13880                                          ;invoke GetEnt
 13881 00003DEA E8C8D7                          CALL	GETENT
 13882                                          ;invoke NextEnt
 13883 00003DED E867D7                          CALL	NEXTENT
 13884 00003DF0 E92CFF                          JMP     find_check
 13885                                  
 13886                                  ;$find_next  ENDP
 13887                                  
 13888                                  ;do_ext
 13889                                  
 13890                                  ;CODE    ENDS
 13891                                  ;    END
 13892                                  
 13893                                  ;============================================================================
 13894                                  ; XENIX2.ASM
 13895                                  ;============================================================================
 13896                                  
 13897                                  ;
 13898                                  ; xenix file calls for MSDOS
 13899                                  ;
 13900                                  
 13901                                  ;INCLUDE DOSSEG.ASM
 13902                                  
 13903                                  ;IFNDEF  KANJI
 13904                                  ;KANJI   EQU     0       ;FALSE
 13905                                  ;ENDIF
 13906                                  
 13907                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 13908                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 13909                                  
 13910                                  ;.xlist
 13911                                  ;.xcref
 13912                                  ;INCLUDE DOSSYM.ASM
 13913                                  ;INCLUDE DEVSYM.ASM
 13914                                  ;.cref
 13915                                  ;.list
 13916                                  
 13917                                  ;TITLE   XENIX - IO system to mimic UNIX
 13918                                  ;NAME    XENIX
 13919                                  
 13920                                          ;i_need  NoSetDir,BYTE
 13921                                          ;i_need  CURDRV,BYTE
 13922                                          ;i_need  IOCALL,BYTE
 13923                                          ;i_need  IOMED,BYTE
 13924                                          ;i_need  IOSCNT,WORD
 13925                                          ;i_need  IOXAD,DWORD
 13926                                          ;i_need  DIRSTART,WORD
 13927                                          ;i_need  ATTRIB,BYTE
 13928                                          ;i_need  THISFCB,DWORD
 13929                                          ;i_need  AuxStack,BYTE
 13930                                          ;i_need  Creating,BYTE
 13931                                          ;i_need  ThisDRV,BYTE
 13932                                          ;i_need  NAME1,BYTE
 13933                                          ;i_need  LastEnt,WORD
 13934                                          ;i_need  ThisDPB,DWORD
 13935                                          ;i_need  EntLast,WORD
 13936                                          ;i_need  CurrentPDB,WORD
 13937                                          ;i_need  sft_addr,DWORD              ; pointer to head of table
 13938                                          ;i_need  CURBUF,DWORD                ; pointer to current buffer
 13939                                          ;i_need  DMAADD,DWORD                ; pointer to current dma address
 13940                                  
 13941                                  ;BREAK <Local data>
 13942                                  
 13943                                  ;CODE        ENDS
 13944                                  
 13945                                  ;;DATA        SEGMENT BYTE PUBLIC 'DATA'
 13946                                  ;
 13947                                  ;;PushSave    DW      ?
 13948                                  ;;PushES      DW      ?
 13949                                  ;;PushBX      DW      ?
 13950                                  ;;xenix_count DW      ?
 13951                                  ;
 13952                                  ;; 02/04/2018
 13953                                  ;
 13954                                  ;PushSave:    DW 0
 13955                                  ;PushES:      DW 0
 13956                                  ;PushBX:      DW 0
 13957                                  ;xenix_count: DW 0
 13958                                  ;
 13959                                  ;;DATA	ENDS
 13960                                  
 13961                                  ;CODE	SEGMENT BYTE PUBLIC 'CODE'
 13962                                  
 13963                                  ;BREAK <get_sf_from_sfn - translate a sfn into sf pointer>
 13964                                  ;
 13965                                  ; get_sf_from_sfn
 13966                                  ; input:    AX has sfn (0 based)
 13967                                  ;           DS is DOSGROUP
 13968                                  ; output:   JNC <found>
 13969                                  ;               ES:DI is sf entry
 13970                                  ;           JC  <error>
 13971                                  ;               ES,DI indeterminate
 13972                                  ;
 13973                                          ;procedure get_sf_from_sfn,NEAR
 13974                                          ;ASSUME  DS:DOSGROUP,ES:NOTHING
 13975                                   
 13976                                  get_sf_from_sfn:
 13977                                         
 13978 00003DF3 50                      	PUSH    AX                      ; we trash AX in process
 13979 00003DF4 C43E[F400]                      LES     DI,[SFT_ADDR]
 13980                                  
 13981                                  get_sfn_loop:
 13982 00003DF8 83FFFF                          CMP     DI,-1                   ; end of chain of tables?
 13983 00003DFB 741E                            JZ      SHORT get_sf_invalid	; I guess so...
 13984 00003DFD 262B4504                        SUB     AX,[ES:DI+4] 		; chop number of entries in this table
 13985 00003E01 7C05                            JL      SHORT get_sf_gotten	; sfn is in this table
 13986 00003E03 26C43D                          LES     DI,[ES:DI]		; step to next table
 13987 00003E06 EBF0                            JMP     SHORT get_sfn_loop
 13988                                  
 13989                                  get_sf_gotten:
 13990                                          ;ADD	AX,ES:[DI].sft_count    ; reset to index in this table
 13991 00003E08 26034504                        ADD	AX,[ES:DI+4]
 13992 00003E0C 53                      	PUSH    BX
 13993                                          ;MOV	BX,SIZE sf_entry
 13994 00003E0D BB2800                          MOV	BX, SF_ENTRY.size
 13995 00003E10 F6E3                    	MUL     BL                      ; number of bytes offset into table
 13996 00003E12 5B                              POP     BX
 13997                                          ;ADD	AX,sft_table            ; offset into sf table structure
 13998 00003E13 83C006                          ADD	AX,SFT.SFT_TABLE
 13999 00003E16 01C7                    	ADD     DI,AX                   ; offset into memory
 14000 00003E18 F8                              CLC
 14001 00003E19 EB01                            JMP     SHORT get_sf_ret
 14002                                  
 14003                                  get_sf_jfn_invalid:
 14004                                  get_sf_invalid:
 14005 00003E1B F9                              STC
 14006                                  
 14007                                  get_sf_jfn_ret:
 14008                                  get_sf_ret:
 14009 00003E1C 58                              POP     AX                      ; remember him?
 14010 00003E1D C3                              RETN
 14011                                  
 14012                                  ;get_sf_from_sfn ENDP
 14013                                  
 14014                                  ;BREAK <get_sf_from_jfn - translate a jfn into sf pointer>
 14015                                  
 14016                                  ; get_sf_from_jfn
 14017                                  ; input:    BX is jfn 0 based
 14018                                  ;           DS is DOSGROUP
 14019                                  ; output:   JNC <found>
 14020                                  ;               ES:DI is sf entry
 14021                                  ;           JC  <error>
 14022                                  ;               ES,DI is indeterminate
 14023                                  ;
 14024                                          ;procedure   get_sf_from_jfn,NEAR
 14025                                          ;ASSUME  DS:DOSGROUP,ES:NOTHING
 14026                                  
 14027                                  get_sf_from_jfn:
 14028                                          
 14029 00003E1E 50                      	PUSH    AX                      ; save him
 14030                                          ;invoke get_jfn_pointer
 14031 00003E1F E81000                          CALL	get_jfn_pointer
 14032 00003E22 72F7                    	JC      SHORT get_sf_jfn_invalid
 14033 00003E24 268A05                          MOV     AL,[ES:DI]              ; get sfn
 14034 00003E27 3CFF                            CMP     AL,0FFh                 ; is it free?
 14035 00003E29 74F0                            JZ      SHORT get_sf_jfn_invalid ; yep... error
 14036 00003E2B 30E4                            XOR     AH,AH
 14037                                          ;invoke get_sf_from_sfn         ; check this sfn out...
 14038 00003E2D E8C3FF                          CALL	get_sf_from_sfn         
 14039 00003E30 EBEA                    	JMP     SHORT get_sf_jfn_ret    ; condition codes are properly set
 14040                                  
 14041                                  ;get_sf_from_jfn ENDP
 14042                                  
 14043                                  ;BREAK <get_jfn_pointer - map a jfn into a pointer to jfn>
 14044                                  
 14045                                  ; get_jfn_pointer
 14046                                  ; input:    BX is jfn
 14047                                  ;           DS is DOSGROUP
 14048                                  ; output:   JNC <found>
 14049                                  ;               ES:DI is pointer to jfn
 14050                                  ;           JC  <bad jfn>
 14051                                  ;
 14052                                          ;procedure Get_jfn_pointer,NEAR
 14053                                          ;ASSUME  DS:DOSGROUP,ES:NOTHING
 14054                                          
 14055                                  get_jfn_pointer:
 14056                                  
 14057 00003E32 83FB14                  	CMP     BX,FILPERPROC
 14058 00003E35 730B                            JAE     SHORT get_jfn_bad
 14059 00003E37 8E06[8B01]                      MOV     ES,[CurrentPDB]
 14060 00003E3B 89DF                            MOV     DI,BX
 14061                                          ;ADD    DI,PDB_JFN_Table
 14062 00003E3D 83C718                          ADD	DI,PDB.JFN_TABLE
 14063 00003E40 F8                      	CLC
 14064 00003E41 C3                              RETN
 14065                                  
 14066                                  get_jfn_bad:
 14067 00003E42 F9                              STC
 14068 00003E43 C3                              RETN
 14069                                  
 14070                                  ;get_jfn_pointer ENDP
 14071                                  
 14072                                  
 14073                                  ;BREAK <$Close - release a handle>
 14074                                  
 14075                                  ;   Assembler usage:
 14076                                  ;           MOV     BX, handle
 14077                                  ;           MOV     AH, Close
 14078                                  ;           INT     int_command
 14079                                  ;
 14080                                  ;   Error return:
 14081                                  ;           AX = error_invalid_handle
 14082                                  ;
 14083                                          ;procedure   $Close,NEAR
 14084                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14085                                  
 14086                                  _$CLOSE:
 14087                                          ;context DS
 14088 00003E44 16                      	PUSH	SS
 14089 00003E45 1F                      	POP	DS
 14090                                  	;invoke get_jfn_pointer         ; get jfn loc
 14091 00003E46 E8E9FF                          CALL	get_jfn_pointer
 14092 00003E49 7305                    	JNC     short close_jfn
 14093                                  
 14094                                  close_bad_handle:
 14095                                          ;error	error_invalid_handle
 14096 00003E4B B006                    	MOV	AL,error_invalid_handle
 14097 00003E4D E99DCA                  	JMP	SYS_RET_ERR
 14098                                  
 14099                                  close_jfn:
 14100 00003E50 268A05                          MOV     AL,[ES:DI]
 14101 00003E53 3CFF                            CMP     AL,0FFh
 14102 00003E55 74F4                            JE      SHORT close_bad_handle
 14103 00003E57 26C605FF                        MOV     BYTE [ES:DI],0FFh
 14104 00003E5B 30E4                            XOR     AH,AH
 14105                                          ;invoke	get_sf_from_sfn
 14106 00003E5D E893FF                          CALL	get_sf_from_sfn
 14107 00003E60 72E9                    	JC      SHORT close_bad_handle
 14108 00003E62 06                              PUSH    ES
 14109 00003E63 1F                              POP     DS
 14110                                          ;ASSUME  DS:NOTHING
 14111                                          ;DEC	[DI].sf_ref_count       ; no more reference
 14112 00003E64 FE0D                            DEC	BYTE [DI]
 14113                                  	;LEA    DX,[DI.sf_fcb]
 14114 00003E66 8D5503                  	LEA     DX,[DI+3]
 14115                                  
 14116                                  ;
 14117                                  ; need to restuff Attrib if we are closing a protected file
 14118                                  ;
 14119                                          ;TEST	[DI.sf_fcb.fcb_DevID],devid_file_clean+devid_device
 14120 00003E69 F6451BC0                	TEST	BYTE [DI+1BH],devid_file_clean+devid_device
 14121 00003E6D 7518                            JNZ     SHORT close_ok
 14122                                          ;PUSH	WORD PTR [DI].sf_attr
 14123 00003E6F FF7502                          PUSH	WORD [DI+2]
 14124                                  	;invoke MOVNAMENOSET
 14125 00003E72 E8ECF0                          CALL	MOVNAMENOSET
 14126 00003E75 5B                      	POP     BX
 14127                                          ;MOV     [ATTRIB],BL
 14128 00003E76 36881E[6F03]                    MOV	[SS:ATTRIB],BL ; 14/03/2018
 14129                                  	;invoke FCB_CLOSE_INNER
 14130 00003E7B E8E4EB                          CALL	FCB_CLOSE_INNER
 14131 00003E7E 3CFF                    	CMP     AL,0FFh                 ; file not found error?
 14132 00003E80 7505                            JNZ     SHORT close_ok
 14133                                          ;error	error_file_not_found
 14134 00003E82 B002                    	MOV	AL,error_file_not_found
 14135 00003E84 E966CA                  	JMP	SYS_RET_ERR
 14136                                  
 14137                                  close_ok:
 14138                                          ;transfer SYS_RET_OK
 14139 00003E87 E959CA                  	JMP	SYS_RET_OK
 14140                                  
 14141                                  ;$Close  ENDP
 14142                                  
 14143                                  ;BREAK <PushDMA, PopDMA, ptr_normalize - set up local dma and save old>
 14144                                  ; PushDMA
 14145                                  ; input:    DS:DX is DMA
 14146                                  ; output:   DS:DX is normalized , ES:BX destroyed
 14147                                  ;           [DMAADD] is now set up to DS:DX
 14148                                  ;           old DMA is pushed
 14149                                  
 14150                                          ;procedure   PushDMA,NEAR
 14151                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14152                                  PushDMA:
 14153                                  	; 15/03/2018
 14154                                          ;MOV     [PushES],ES
 14155                                          ;MOV     [PushBX],BX
 14156                                          ;POP     WORD [PushSave]
 14157                                          ;LES     BX,[DMAADD]		; get old dma
 14158 00003E8A 368C06[F905]                    MOV     [SS:PushES],ES
 14159 00003E8F 36891E[FB05]                    MOV     [SS:PushBX],BX
 14160 00003E94 368F06[F705]                    POP     WORD [SS:PushSave]
 14161 00003E99 36C41E[DF00]                    LES     BX,[SS:DMAADD]
 14162 00003E9E 06                      	PUSH    ES
 14163 00003E9F 53                              PUSH    BX
 14164                                          ;PUSH    WORD [PushSave]
 14165 00003EA0 36FF36[F705]                    PUSH    WORD [SS:PushSave]
 14166 00003EA5 E82A00                          CALL	ptr_normalize           ; get new dma
 14167                                          ;MOV     [DMAADD],DX		; save IT!
 14168                                          ;MOV     [DMAADD+2],DS
 14169                                          ;MOV     ES,[PushES]
 14170                                          ;MOV     BX,[PushBX]
 14171 00003EA8 368916[DF00]                    MOV     [SS:DMAADD],DX
 14172 00003EAD 368C1E[E100]                    MOV     [SS:DMAADD+2],DS
 14173 00003EB2 368E06[F905]                    MOV     ES,[SS:PushES]
 14174 00003EB7 368B1E[FB05]                    MOV     BX,[SS:PushBX]
 14175 00003EBC C3                              RETN
 14176                                  
 14177                                  ;PushDMA ENDP
 14178                                  
 14179                                  ; PopDMA
 14180                                  ; input:    old DMA under ret address on stack
 14181                                  ; output:   [DMAADD] set to old version and stack popped
 14182                                          ;procedure   PopDMA,NEAR
 14183                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14184                                  PopDMA:
 14185                                          ;POP     WORD [PushSave]
 14186                                          ;POP     WORD [DMAADD]
 14187                                          ;POP     WORD [DMAADD+2]
 14188                                          ;PUSH    WORD [PushSave]
 14189 00003EBD 368F06[F705]                    POP     WORD [SS:PushSave]
 14190 00003EC2 368F06[DF00]                    POP     WORD [SS:DMAADD]
 14191 00003EC7 368F06[E100]                    POP     WORD [SS:DMAADD+2]
 14192 00003ECC 36FF36[F705]                    PUSH    WORD [SS:PushSave]
 14193 00003ED1 C3                              RETN
 14194                                  
 14195                                  ;PopDMA  ENDP
 14196                                  
 14197                                  ; ptr_normalize
 14198                                  ; input:    DS:DX is a pointer
 14199                                  ; output:   DS:DX is normalized (DX < 10h)
 14200                                          ;procedure ptr_normalize,NEAR
 14201                                          
 14202                                  ptr_normalize:
 14203 00003ED2 51                      	PUSH    CX                      ; T1 = CX
 14204 00003ED3 52                              PUSH    DX                      ; T2 = DX
 14205 00003ED4 B104                            MOV     CL,4
 14206 00003ED6 D3EA                            SHR     DX,CL                   ; DX = (DX >> 4)    (using CX)
 14207 00003ED8 8CD9                            MOV     CX,DS
 14208 00003EDA 01D1                            ADD     CX,DX
 14209 00003EDC 8ED9                            MOV     DS,CX                   ; DS = DS + DX      (using CX)
 14210 00003EDE 5A                              POP     DX
 14211 00003EDF 83E20F                          AND     DX,0Fh                  ; DX = T2 & 0Fh
 14212 00003EE2 59                              POP     CX                      ; CX = T1
 14213                                  
 14214                                  ;       PUSH    AX
 14215                                  ;       PUSH    DX
 14216                                  ;       MOV     AX,DS
 14217                                  ;       PUSH    CX
 14218                                  ;       MOV     CL,4
 14219                                  ;       SHR     DX,CL                   ; get upper part of dx
 14220                                  ;       POP     CX
 14221                                  ;       ADD     AX,DX                   ; add into seg address
 14222                                  ;       MOV     DS,AX
 14223                                  ;       POP     DX
 14224                                  ;       AND     DX,0Fh                  ; save low part
 14225                                  ;       POP     AX
 14226                                  
 14227 00003EE3 C3                              RETN
 14228                                  
 14229                                  ;ptr_normalize   ENDP
 14230                                  
 14231                                  ;BREAK <$Read - Do file/device I/O>
 14232                                  
 14233                                  ;   Assembler usage:
 14234                                  ;           LDS     DX, buf
 14235                                  ;           MOV     CX, count
 14236                                  ;           MOV     BX, handle
 14237                                  ;           MOV     AH, Read
 14238                                  ;           INT     int_command
 14239                                  ;         AX has number of bytes read
 14240                                  ;   Errors:
 14241                                  ;           AX = read_invalid_handle
 14242                                  ;              = read_access_denied
 14243                                  ;
 14244                                          ;procedure   $Read,NEAR
 14245                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14246                                  
 14247                                  _$READ:
 14248                                          ;invoke	PushDMA
 14249 00003EE4 E8A3FF                  	CALL	PushDMA
 14250 00003EE7 E83C00                          CALL    IO_setup
 14251 00003EEA 7209                            JC      SHORT IO_err
 14252 00003EEC 26807D0101                      CMP     BYTE [ES:DI+1],open_for_write
 14253 00003EF1 7508                            JNE     SHORT read_setup
 14254                                  IO_bad_mode:
 14255 00003EF3 B005                            MOV     AL,read_access_denied
 14256                                  IO_err:
 14257                                          ;invoke PopDMA
 14258 00003EF5 E8C5FF                          CALL	PopDMA
 14259                                  	;transfer SYS_RET_ERR
 14260 00003EF8 E9F2C9                  	JMP	SYS_RET_ERR
 14261                                  
 14262                                  read_setup:
 14263                                          ;invoke	$FCB_RANDOM_READ_BLOCK  ; do read
 14264 00003EFB E897E9                  	CALL	_$FCB_RANDOM_READ_BLOCK
 14265                                  IO_done:
 14266                                          ;invoke	get_user_stack          ; get old frame
 14267 00003EFE E87EC8                  	CALL	get_user_stack
 14268                                          ;MOV	AX,[SI].user_CX         ; get returned CX
 14269 00003F01 8B4404                          MOV	AX,[SI+4]
 14270                                  	;MOV     CX,[xenix_count]
 14271 00003F04 368B0E[FD05]            	MOV     CX,[SS:xenix_count] ; 15/03/2018
 14272                                          ;MOV	[SI].user_CX,CX         ; stash our CX
 14273 00003F09 894C04                          MOV	[SI+4],CX
 14274                                  	;invoke PopDMA                  ; get old DMA
 14275 00003F0C E8AEFF                          CALL	PopDMA
 14276                                  	;transfer SYS_RET_OK
 14277 00003F0F E9D1C9                  	JMP	SYS_RET_OK
 14278                                  
 14279                                  ;$Read   ENDP
 14280                                  
 14281                                  ;BREAK <$Write - Do file/device I/O>
 14282                                  
 14283                                  ;   Assembler usage:
 14284                                  ;           LDS     DX, buf
 14285                                  ;           MOV     CX, count
 14286                                  ;           MOV     BX, handle
 14287                                  ;           MOV     AH, Write
 14288                                  ;           INT     int_command
 14289                                  ;         AX has number of bytes written
 14290                                  ;   Errors:
 14291                                  ;           AX = write_invalid_handle
 14292                                  ;              = write_access_denied
 14293                                  ;
 14294                                  
 14295                                          ;procedure   $Write,NEAR
 14296                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14297                                  
 14298                                  _$WRITE:
 14299                                          ;invoke	PushDMA
 14300 00003F12 E875FF                          CALL	PushDMA
 14301 00003F15 E80E00                  	CALL    IO_setup
 14302 00003F18 72DB                            JC      SHORT IO_err
 14303                                          ;CMP	ES:[DI].sf_mode,open_for_read
 14304 00003F1A 26807D0100                      CMP	BYTE [ES:DI+1],open_for_read
 14305 00003F1F 74D2                            JE      SHORT IO_bad_mode
 14306                                          ;invoke $FCB_RANDOM_WRITE_BLOCK ; do write
 14307 00003F21 E879E9                          CALL	_$FCB_RANDOM_WRITE_BLOCK
 14308 00003F24 EBD8                            JMP     SHORT IO_done
 14309                                  
 14310                                  ;$write  ENDP
 14311                                  
 14312                                  IO_setup:
 14313                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14314                                          ;context DS
 14315 00003F26 16                              PUSH	SS
 14316 00003F27 1F                      	POP	DS
 14317 00003F28 890E[FD05]              	MOV     [xenix_count],CX
 14318                                          ;invoke Get_sf_from_jfn
 14319 00003F2C E8EFFE                  	CALL	get_sf_from_jfn
 14320                                          ; ES:DI is sf pointer
 14321 00003F2F B006                            MOV     AL,read_invalid_handle          ;Assume an error
 14322 00003F31 8B0E[FD05]                      MOV     CX,[xenix_count]
 14323                                          ;LEA	DX,[DI].sf_fcb
 14324 00003F35 8D5503                  	LEA	DX,[DI+3]
 14325 00003F38 06                              PUSH    ES
 14326 00003F39 1F                              POP     DS
 14327                                          ;ASSUME  DS:NOTHING
 14328 00003F3A C3                              RETN
 14329                                  
 14330                                  ;BREAK <$LSEEK - set random record field>
 14331                                  
 14332                                  ;   Assembler usage:
 14333                                  ;           MOV     DX, offsetlow
 14334                                  ;           MOV     CX, offsethigh
 14335                                  ;           MOV     BX, handle
 14336                                  ;           MOV     AL, method
 14337                                  ;           MOV     AH, LSeek
 14338                                  ;           INT     int_command
 14339                                  ;         DX:AX has the new location of the pointer
 14340                                  ;   Error returns:
 14341                                  ;           AX = error_invalid_handle
 14342                                  ;              = error_invalid_function
 14343                                  
 14344                                          ;procedure   $LSEEK,NEAR
 14345                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14346                                  
 14347                                  _$LSEEK:
 14348 00003F3B 3C03                            CMP     AL,3
 14349 00003F3D 7205                            JB      SHORT lseek_get_sf
 14350                                          ;error	error_invalid_function
 14351 00003F3F B001                    	MOV	AL,error_invalid_function
 14352 00003F41 E9A9C9                  	JMP	SYS_RET_ERR
 14353                                  
 14354                                  lseek_get_sf:
 14355                                          ;context DS
 14356 00003F44 16                              PUSH	SS
 14357 00003F45 1F                      	POP	DS
 14358                                  	;invoke get_sf_from_jfn
 14359 00003F46 E8D5FE                  	CALL	get_sf_from_jfn
 14360 00003F49 06                              PUSH    ES
 14361 00003F4A 1F                              POP     DS
 14362                                          ;ASSUME  DS:NOTHING
 14363 00003F4B 723E                            JC      SHORT lseek_bad
 14364                                  ;
 14365                                  ; don't seek device
 14366                                  ;
 14367                                          ;TEST	[DI.sf_fcb+fcb_devid],devid_device
 14368 00003F4D F6451B80                        TEST	BYTE [DI+1BH],devid_device
 14369 00003F51 7406                            JZ      SHORT lseek_dispatch
 14370 00003F53 31C0                            XOR     AX,AX
 14371 00003F55 31D2                            XOR     DX,DX
 14372 00003F57 EB16                            JMP     SHORT lseek_ret
 14373                                  lseek_dispatch:
 14374 00003F59 FEC8                            DEC     AL
 14375 00003F5B 7C0F                            JL      SHORT lseek_beginning
 14376 00003F5D FEC8                            DEC     AL
 14377 00003F5F 7C1F                            JL      SHORT lseek_current
 14378                                  ; move from end of file
 14379                                  ; first, get end of file
 14380 00003F61 92                              XCHG    AX,DX               ; AX <- low
 14381 00003F62 87D1                            XCHG    DX,CX               ; DX <- high
 14382                                          ;ASSUME DS:NOTHING
 14383                                          ;ADD    AX,[DI+sf_fcb+fcb_FILSIZ]
 14384                                          ;ADC    DX,[DI+sf_fcb+fcb_FILSIZ+2]
 14385 00003F64 034513                  	ADD	AX,[DI+13H]
 14386 00003F67 135515                  	ADC	DX,[DI+15H]
 14387 00003F6A EB03                            JMP     SHORT lseek_ret
 14388                                  
 14389                                  lseek_beginning:
 14390 00003F6C 92                              XCHG    AX,DX               ; AX <- low
 14391 00003F6D 87D1                            XCHG    DX,CX               ; DX <- high
 14392                                  
 14393                                  lseek_ret:
 14394                                          ;MOV	WORD PTR [DI+sf_fcb+fcb_RR],AX
 14395                                          ;MOV	WORD PTR [DI+sf_fcb+fcb_RR+2],DX
 14396 00003F6F 894524                          MOV	[DI+24H],AX
 14397 00003F72 895526                          MOV	[DI+26H],DX
 14398                                          ;invoke	get_user_stack
 14399 00003F75 E807C8                          CALL	get_user_stack
 14400                                  	;MOV	[SI.user_DX],DX
 14401                                          ;MOV	[SI.user_AX],AX
 14402 00003F78 895406                  	MOV	[SI+6],DX
 14403                                          ;MOV	[SI+user_env.user_AX],AX
 14404 00003F7B 8904                            MOV	[SI],AX ; 31/03/2018
 14405                                  	;transfer SYS_RET_OK
 14406 00003F7D E963C9                  	JMP	SYS_RET_OK
 14407                                  
 14408                                  lseek_current:
 14409                                  ; ES:DI is pointer to sf... need to invoke  set random record for place
 14410 00003F80 92                              XCHG    AX,DX               ; AX <- low
 14411 00003F81 87D1                            XCHG    DX,CX               ; DX <- high
 14412                                          ;ADD	AX,WORD PTR [DI+sf_fcb+fcb_RR]
 14413                                          ;ADC	DX,WORD PTR [DI+sf_fcb+fcb_RR+2]
 14414 00003F83 034524                          ADD	AX,[DI+24H]
 14415 00003F86 135526                          ADC	DX,[DI+26H]
 14416 00003F89 EBE4                            JMP     SHORT lseek_ret
 14417                                  
 14418                                  lseek_bad:
 14419                                          ;error	error_invalid_handle
 14420 00003F8B B006                    	MOV	AL,error_invalid_handle
 14421 00003F8D E95DC9                  	JMP	SYS_RET_ERR
 14422                                  
 14423                                  ;$lseek  ENDP
 14424                                  
 14425                                  ;BREAK <$IOCTL - return/set device dependent stuff>
 14426                                  
 14427                                  ;   Assembler usage:
 14428                                  ;           MOV     BX, Handle
 14429                                  ;           MOV     DX, Data
 14430                                  ;
 14431                                  ;       (or LDS     DX,BUF
 14432                                  ;           MOV     CX,COUNT)
 14433                                  ;
 14434                                  ;           MOV     AH, Ioctl
 14435                                  ;           MOV     AL, Request
 14436                                  ;           INT     21h
 14437                                  ;
 14438                                  ;   Error returns:
 14439                                  ;           AX = error_invalid_handle
 14440                                  ;              = error_invalid_function
 14441                                  ;              = error_invalid_data
 14442                                  
 14443                                          ;procedure   $IOCTL,NEAR
 14444                                          ;ASSUME  DS:NOTHING,ES:NOTHING
 14445                                  
 14446                                  _$IOCTL:        
 14447 00003F90 8CDE                    	MOV     SI,DS                   ;Stash DS for calls 2,3,4 and 5
 14448                                          ;context DS
 14449 00003F92 16                              PUSH	SS
 14450 00003F93 1F                      	POP	DS
 14451 00003F94 3C03                    	CMP     AL,3
 14452 00003F96 7752                            JA      SHORT ioctl_check_block	;Block device
 14453 00003F98 52                              PUSH    DX
 14454                                          ;invoke get_sf_from_jfn
 14455 00003F99 E882FE                          CALL	get_sf_from_jfn
 14456 00003F9C 5A                      	POP     DX                      ;Restore DATA
 14457 00003F9D 7305                            JNC     SHORT ioctl_check_permissions ; have valid handle
 14458                                          ;error   error_invalid_handle
 14459 00003F9F B006                    	MOV	AL,error_invalid_handle
 14460 00003FA1 E949C9                  	JMP	SYS_RET_ERR
 14461                                  
 14462                                  ioctl_check_permissions:
 14463 00003FA4 3C02                            CMP     AL,2
 14464 00003FA6 7333                            JAE     SHORT ioctl_control_string
 14465 00003FA8 3C00                            CMP     AL,0
 14466 00003FAA 8A451B                          MOV     AL,[DI+1BH]
 14467 00003FAD 7414                            JZ      SHORT ioctl_read	; read the byte
 14468 00003FAF 08F6                            OR      DH,DH
 14469 00003FB1 7405                            JZ      SHORT ioctl_check_device ; can I set with this data?
 14470                                          ;error	error_invalid_data      ; no DH <> 0
 14471 00003FB3 B00D                    	MOV	AL,error_invalid_data
 14472 00003FB5 E935C9                  	JMP	SYS_RET_ERR
 14473                                  
 14474                                  ioctl_check_device:
 14475 00003FB8 A880                            TEST    AL,devid_ISDEV          ; can I set this handle?
 14476 00003FBA 7457                            JZ      SHORT ioctl_bad_fun	; no, it is a file.
 14477 00003FBC 2688551B                        MOV     [ES:DI+1BH],DL
 14478                                          ;transfer SYS_RET_OK
 14479 00003FC0 E920C9                  	JMP	SYS_RET_OK
 14480                                  
 14481                                  ioctl_read:
 14482 00003FC3 30E4                            XOR     AH,AH
 14483 00003FC5 A880                            TEST    AL,devid_ISDEV          ; Should I set high byte
 14484 00003FC7 7407                            JZ      SHORT ioctl_no_high	; no
 14485 00003FC9 26C47D1C                        LES     DI,[ES:DI+1CH] ;Get device pointer
 14486 00003FCD 8A6505                          MOV     AH,[DI+5]   ;Get high byte
 14487                                  
 14488                                  ioctl_no_high:
 14489 00003FD0 E8ACC7                          CALL	get_user_stack
 14490 00003FD3 89C2                            MOV     DX,AX
 14491 00003FD5 895406                          MOV     [SI+6],DX
 14492                                          ;transfer SYS_RET_OK
 14493 00003FD8 E908C9                  	JMP	SYS_RET_OK
 14494                                  
 14495                                  ioctl_control_string:
 14496 00003FDB 26F6451B80                      TEST    BYTE [ES:DI+1BH],devid_ISDEV 
 14497                                  					; can I?
 14498 00003FE0 7431                            JZ      SHORT ioctl_bad_fun	; no, it is a file.
 14499 00003FE2 26C47D1C                        LES     DI,[ES:DI+1CH]
 14500                                  					;Get device pointer
 14501 00003FE6 30DB                            XOR     BL,BL           ; Unit number of char dev = 0
 14502 00003FE8 EB50                            JMP     SHORT ioctl_do_string
 14503                                  
 14504                                  ioctl_check_block:
 14505 00003FEA FEC8                            DEC     AL
 14506 00003FEC FEC8                            DEC     AL                      ;4=2,5=3,6=4,7=5
 14507 00003FEE 3C03                            CMP     AL,3
 14508 00003FF0 762B                            JBE     SHORT ioctl_get_dev
 14509                                  
 14510 00003FF2 B401                            MOV     AH,1
 14511 00003FF4 2C04                            SUB     AL,4                    ;6=0,7=1
 14512 00003FF6 7406                            JZ      SHORT ioctl_get_status
 14513 00003FF8 B403                            MOV     AH,3
 14514 00003FFA FEC8                            DEC     AL
 14515 00003FFC 7515                            JNZ     SHORT ioctl_bad_fun
 14516                                  
 14517                                  ioctl_get_status:
 14518 00003FFE 50                              PUSH    AX
 14519 00003FFF E80FDC                          CALL	GET_IO_FCB
 14520 00004002 58                              POP     AX
 14521 00004003 7213                            JC      SHORT ioctl_acc_err
 14522                                          ;invoke IOFUNC
 14523 00004005 E855D2                          CALL	IOFUNC
 14524 00004008 88C4                    	MOV     AH,AL
 14525 0000400A B0FF                            MOV     AL,0FFH
 14526 0000400C 7502                            JNZ     SHORT ioctl_status_ret
 14527 0000400E FEC0                            INC     AL
 14528                                  ioctl_status_ret:
 14529                                          ;transfer SYS_RET_OK
 14530 00004010 E9D0C8                          JMP	SYS_RET_OK
 14531                                  
 14532                                  ioctl_bad_fun:
 14533                                          ;error	error_invalid_function
 14534 00004013 B001                    	MOV	AL,error_invalid_function
 14535 00004015 E9D5C8                  	JMP	SYS_RET_ERR
 14536                                  
 14537                                  ioctl_acc_err:
 14538                                          ;error	error_access_denied
 14539 00004018 B005                    	MOV	AL,error_access_denied
 14540 0000401A E9D0C8                  	JMP	SYS_RET_ERR
 14541                                  
 14542                                  ioctl_get_dev:
 14543 0000401D 51                              PUSH    CX
 14544 0000401E 52                              PUSH    DX
 14545 0000401F 50                              PUSH    AX
 14546 00004020 56                              PUSH    SI              ;DS in disguise
 14547 00004021 88D8                            MOV     AL,BL           ;Drive
 14548 00004023 E8FEDB                          CALL	GETTHISDRV
 14549 00004026 720C                            JC      SHORT ioctl_bad_drv
 14550 00004028 E840E2                          CALL	FATREAD         ;"get" the drive
 14551 0000402B 268A5E01                        MOV     BL,[ES:BP+1] ; Unit number
 14552 0000402F 26C47E12                        LES     DI,[ES:BP+12H]
 14553 00004033 F8                              CLC                     ;Make sure error jump not taken
 14554                                  ioctl_bad_drv:
 14555 00004034 5E                              POP     SI
 14556 00004035 58                              POP     AX
 14557 00004036 5A                              POP     DX
 14558 00004037 59                              POP     CX
 14559 00004038 72DE                            JC      SHORT ioctl_acc_err
 14560                                  ioctl_do_string:
 14561 0000403A 26F745040040                    TEST    WORD [ES:DI+4],DEVIOCTL ;See if device accepts control
 14562 00004040 74D1                            JZ      SHORT ioctl_bad_fun		;NO
 14563 00004042 FEC8                            DEC     AL
 14564 00004044 FEC8                            DEC     AL
 14565 00004046 7407                            JZ      SHORT ioctl_control_read
 14566 00004048 C606[4901]0C                    MOV     BYTE [IOCALL_REQFUNC],DEVWRIOCTL
 14567 0000404D EB05                            JMP     SHORT ioctl_control_call
 14568                                  ioctl_control_read:
 14569 0000404F C606[4901]03                    MOV     BYTE [IOCALL_REQFUNC],DEVRDIOCTL
 14570                                  ioctl_control_call:
 14571 00004054 B016                            MOV     AL,DRDWRHL
 14572 00004056 88DC                            MOV     AH,BL			;Unit number
 14573 00004058 A3[4701]                        MOV     [IOCALL_REQLEN],AX
 14574 0000405B 31C0                            XOR     AX,AX
 14575 0000405D A3[4A01]                        MOV     [IOCALL_REQSTAT],AX
 14576 00004060 A2[5401]                        MOV     [IOMED],AL
 14577 00004063 890E[5901]                      MOV     [IOSCNT],CX
 14578 00004067 8916[5501]                      MOV     [IOXAD],DX
 14579 0000406B 8936[5701]                      MOV     [IOXAD+2],SI
 14580 0000406F 06                              PUSH    ES
 14581 00004070 1F                              POP     DS
 14582 00004071 89FE                            MOV     SI,DI                   ;DS:SI -> driver
 14583 00004073 16                              PUSH    SS
 14584 00004074 07                              POP     ES
 14585 00004075 BB[4701]                        MOV     BX,IOCALL		;ES:BX -> Call header
 14586                                          ;invoke	DEVIOCALL2
 14587 00004078 E814D3                          CALL	DEVIOCALL2
 14588                                          ;MOV     AX,[IOSCNT]		;Get actual bytes transferred
 14589 0000407B 36A1[5901]              	MOV     AX,[SS:IOSCNT] ; 12/03/2018
 14590                                          ;transfer SYS_RET_OK
 14591 0000407F E961C8                          JMP	SYS_RET_OK
 14592                                  
 14593                                  ;$IOCTL  ENDP
 14594                                  
 14595                                  ;BREAK <File_Times - modify write times on a handle>
 14596                                  
 14597                                  ;   Assembler usage:
 14598                                  ;           MOV AH, FileTimes
 14599                                  ;           MOV AL, func
 14600                                  ;           MOV BX, handle
 14601                                  ;       ; if AL = 1 then then next two are mandatory
 14602                                  ;           MOV CX, time
 14603                                  ;           MOV DX, date
 14604                                  ;           INT 21h
 14605                                  ;       ; if AL = 0 then CX/DX has the last write time/date
 14606                                  ;       ; for the handle.
 14607                                  ;
 14608                                  ;   Error returns:
 14609                                  ;           AX = error_invalid_function
 14610                                  ;              = error_invalid_handle
 14611                                  
 14612                                  ;procedure   $File_times,near
 14613                                  
 14614                                  _$FILE_TIMES:        
 14615                                  
 14616 00004082 3C02                    	CMP     AL,2
 14617 00004084 7205                            JB      SHORT filetimes_ok
 14618                                          ;error	error_invalid_function
 14619 00004086 B001                    	MOV	AL,error_invalid_function
 14620 00004088 E962C8                  	JMP	SYS_RET_ERR
 14621                                  
 14622                                  filetimes_ok:
 14623 0000408B 16                              PUSH    SS
 14624 0000408C 1F                              POP     DS
 14625 0000408D E88EFD                          CALL    get_sf_from_jfn
 14626 00004090 7305                            JNC     short filetimes_disp
 14627                                          ;error	error_invalid_handle
 14628 00004092 B006                    	MOV	AL,error_invalid_handle
 14629 00004094 E956C8                  	JMP	SYS_RET_ERR
 14630                                  
 14631                                  filetimes_disp:
 14632 00004097 08C0                            OR      AL,AL
 14633 00004099 7514                            JNZ     SHORT filetimes_set
 14634 0000409B 268B4D19                        MOV     CX,[ES:DI+19H]
 14635 0000409F 268B5517                        MOV     DX,[ES:DI+17H]
 14636 000040A3 E8D9C6                          CALL	get_user_stack
 14637 000040A6 894C04                          MOV     [SI+4],CX
 14638 000040A9 895406                          MOV     [SI+6],DX
 14639                                          ;transfer SYS_RET_OK
 14640 000040AC E934C8                          JMP	SYS_RET_OK
 14641                                  
 14642                                  filetimes_set:
 14643 000040AF 26894D19                        MOV     [ES:DI+19H],CX
 14644 000040B3 26895517                        MOV     [ES:DI+17H],DX
 14645 000040B7 2680651BBF                      AND     BYTE [ES:DI+1BH],~devid_file_clean
 14646                                          ;transfer SYS_RET_OK
 14647 000040BC E924C8                          JMP	SYS_RET_OK
 14648                                  
 14649                                  ;$file_times ENDP
 14650                                  
 14651                                  ;do_ext
 14652                                  
 14653                                  ;CODE	ENDS
 14654                                  ;    END
 14655                                  
 14656                                  ;============================================================================
 14657                                  ; MSINIT.ASM
 14658                                  ;============================================================================
 14659                                  
 14660                                  ; the next segment defines a new class that MUST appear last in the link map.
 14661                                  ; This defines several important locations for the initialization process that
 14662                                  ; must be the first available locations of free memory.
 14663                                  
 14664                                  ;LAST    SEGMENT BYTE PUBLIC 'LAST'
 14665                                          ;PUBLIC  SYSBUF
 14666                                          ;PUBLIC  MEMSTRT
 14667                                  
 14668                                  ;SYSBUF  LABEL   WORD
 14669                                  SYSBUF:
 14670                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
 14671                                  
 14672                                  	; Retro DOS v2.0 - 03/03/2018
 14673                                  DOSINIT:
 14674                                  	; Far call from SYSINIT
 14675                                  	; DX = Memory size in paragraphs
 14676                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 14677                                  	;	   (Retro DOS v2.0, 16/03/2018)
 14678 000040BF FA                              CLI
 14679 000040C0 FC                              CLD
 14680                                  	; 12/03/2018
 14681                                          ;MOV     [ENDMEM],DX
 14682                                          ;MOV     [INITSP],SP
 14683                                          ;MOV     [INITSS],SS
 14684 000040C1 2E8916[E300]                    MOV     [CS:ENDMEM],DX
 14685 000040C6 2E8926[6403]                    MOV     [CS:INITSP],SP
 14686 000040CB 2E8C16[6603]                    MOV     [CS:INITSS],SS
 14687 000040D0 8CC8                            MOV     AX,CS
 14688 000040D2 BC[6643]                        MOV     SP,INITSTACK
 14689 000040D5 8ED0                            MOV     SS,AX
 14690                                          ;MOV     [DEVHEAD+2],DS
 14691                                          ;MOV     [DEVHEAD],SI	; DS:SI Points to CONSOLE Device
 14692 000040D7 368C1E[0901]            	MOV     [SS:DEVHEAD+2],DS
 14693 000040DC 368936[0701]                    MOV     [SS:DEVHEAD],SI	; DS:SI Points to CONSOLE Device
 14694                                  
 14695 000040E1 E8D901                          CALL    CHARINIT
 14696                                  
 14697 000040E4 56                              PUSH    SI
 14698                                          ;ADD	SI,SDEVNAME	; Point to name
 14699 000040E5 83C60A                          ADD	SI,SYSDEV.NAME
 14700 000040E8 0E                      	PUSH    CS
 14701 000040E9 07                              POP     ES
 14702 000040EA BF[0D00]                        MOV     DI,SFTABL+SFT.SFT_TABLE	; Point to sft 0
 14703 000040ED B003                            MOV     AL,3
 14704 000040EF AA                              STOSB           ; Refcount
 14705 000040F0 FEC8                            DEC     AL
 14706 000040F2 AA                              STOSB           ; Access rd/wr
 14707 000040F3 30C0                            XOR     AL,AL
 14708 000040F5 AA                              STOSB           ; Drive byte
 14709 000040F6 AA                              STOSB           ; attribute
 14710 000040F7 B90400                          MOV     CX,4
 14711 000040FA F3A5                            REP     MOVSW   ; Name
 14712 000040FC B103                            MOV     CL,3
 14713 000040FE B020                            MOV     AL," "
 14714 00004100 F3AA                            REP     STOSB   ; Extension
 14715 00004102 83C70C                          ADD     DI,12   ; Skip
 14716                                  	; 14/04/2018
 14717 00004105 B0C3                            MOV     AL,0C0h|ISCIN|ISCOUT ; 0C0H OR ISCIN OR ISCOUT
 14718 00004107 AA                              STOSB
 14719 00004108 5E                              POP     SI
 14720 00004109 89F0                            MOV     AX,SI
 14721 0000410B AB                              STOSW                   ; Device pointer in FIRCLUS
 14722 0000410C 8CD8                            MOV     AX,DS
 14723 0000410E AB                              STOSW
 14724                                          ;OR     BYTE PTR [SI.SDEVATT],ISCIN OR ISCOUT
 14725 0000410F 804C0403                        OR	BYTE [SI+4], ISCIN|ISCOUT
 14726                                  	; 12/03/2018
 14727                                  	;MOV     [BCON],SI
 14728                                          ;MOV     [BCON+2],DS
 14729 00004113 368936[FC00]            	MOV     [SS:BCON],SI
 14730 00004118 368C1E[FE00]                    MOV     [SS:BCON+2],DS
 14731                                  CHAR_INIT_LOOP:
 14732 0000411D C534                            LDS     SI,[SI]				; AUX device
 14733 0000411F E89B01                          CALL    CHARINIT
 14734 00004122 F6440408                        TEST    BYTE [SI+4],ISCLOCK
 14735 00004126 74F5                            JZ      SHORT CHAR_INIT_LOOP
 14736                                  	; 12/03/2018
 14737                                          ;MOV     [BCLOCK],SI
 14738                                          ;MOV     [BCLOCK+2],DS
 14739 00004128 368936[F800]                    MOV     [SS:BCLOCK],SI
 14740 0000412D 368C1E[FA00]                    MOV     [SS:BCLOCK+2],DS
 14741 00004132 BD[6843]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 14742                                  PERDRV:
 14743 00004135 C534                            LDS     SI,[SI]				; Next device
 14744 00004137 83FEFF                          CMP     SI,-1
 14745 0000413A 7468                    	JZ      SHORT CONTINIT
 14746                                  
 14747 0000413C E87E01                          CALL    CHARINIT
 14748                                  
 14749                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 14750                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 14751                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 14752                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 14753                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 14754                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 14755                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 14756                                  
 14757 0000413F F744040080                      TEST    WORD [SI+4],DEVTYP
 14758 00004144 75EF                            JNZ     SHORT PERDRV			; Skip any other character devs
 14759                                  
 14760                                          ;MOV     CL,[CALLUNIT]
 14761 00004146 368A0E[3A01]                    MOV	CL, [SS:CALLUNIT] ; 12/03/2018
 14762 0000414B 30ED                    	XOR     CH,CH
 14763 0000414D 884C0A                          MOV     [SI+0AH],CL		; Number of units in name field
 14764                                          ;MOV     DL,[NUMIO]
 14765 00004150 368A16[0001]                    MOV     DL,[SS:NUMIO] ; 15/03/2018
 14766 00004155 30F6                            XOR     DH,DH
 14767                                          ;ADD     [NUMIO],CL
 14768 00004157 36000E[0001]                    ADD	[SS:NUMIO],CL 	; 12/03/2018
 14769 0000415C 1E                      	PUSH    DS
 14770 0000415D 56                              PUSH    SI
 14771                                          ;LDS     BX,[CALLBPB]
 14772 0000415E 36C51E[3F01]            	LDS	BX, [SS:CALLBPB] ; 12/03/2018
 14773                                  PERUNIT:
 14774 00004163 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 14775 00004165 43                              INC     BX
 14776 00004166 43                              INC     BX                      ; On to next BPB
 14777 00004167 26885600                        MOV     [ES:BP],DL
 14778 0000416B 26887601                        MOV     [ES:BP+1],DH
 14779 0000416F 53                              PUSH    BX
 14780 00004170 51                              PUSH    CX
 14781 00004171 52                              PUSH    DX
 14782                                  
 14783                                          ;invoke	$SETDPB
 14784 00004172 E865CC                          CALL	_$SETDPB
 14785                                  
 14786 00004175 268B4602                	MOV     AX,[ES:BP+2]
 14787                                          ; 12/03/2018
 14788                                  	;CMP     AX,[MAXSEC]
 14789 00004179 363B06[0101]            	CMP	AX,[SS:MAXSEC]
 14790 0000417E 7604                    	JBE     SHORT NOTMAX
 14791                                          ;MOV     [MAXSEC],AX
 14792 00004180 36A3[0101]              	MOV	[SS:MAXSEC],AX
 14793                                  NOTMAX:
 14794 00004184 5A                              POP     DX
 14795 00004185 59                              POP     CX
 14796 00004186 5B                              POP     BX
 14797 00004187 8CD8                            MOV     AX,DS                   ; Save DS
 14798 00004189 5E                              POP     SI
 14799 0000418A 1F                              POP     DS
 14800 0000418B 26897612                        MOV     [ES:BP+12H],SI
 14801 0000418F 268C5E14                        MOV     [ES:BP+12H+2],DS
 14802 00004193 1E                              PUSH    DS
 14803 00004194 56                              PUSH    SI
 14804 00004195 FEC6                            INC     DH
 14805 00004197 FEC2                            INC     DL
 14806 00004199 8ED8                            MOV     DS,AX
 14807 0000419B 83C55E                          ADD     BP,DPBSIZ
 14808 0000419E E2C3                    	LOOP    PERUNIT
 14809 000041A0 5E                              POP     SI
 14810 000041A1 1F                              POP     DS
 14811 000041A2 EB91                    	JMP	SHORT PERDRV
 14812                                  
 14813                                  CONTINIT:
 14814 000041A4 0E                              PUSH    CS
 14815 000041A5 1F                              POP     DS
 14816                                  ; Calculate true address of buffers, FATs, free space
 14817 000041A6 89EF                            MOV     DI,BP           ; First byte after current DPBs
 14818 000041A8 8B2E[0101]                      MOV     BP,[MAXSEC]
 14819 000041AC B8[BF40]                        MOV     AX,SYSBUF
 14820 000041AF A3[6803]                        MOV     [BUFFSTRT],AX
 14821 000041B2 01E8                            ADD     AX,BP           ; One I/O buffer
 14822 000041B4 83C010                          ADD     AX,BUFINSIZ
 14823 000041B7 A3[F000]                        MOV     [DPBHEAD],AX	; True start of DPBs
 14824 000041BA 89C2                            MOV     DX,AX
 14825 000041BC 81EA[BF40]                      SUB     DX,SYSBUF
 14826 000041C0 89D5                            MOV     BP,DX
 14827 000041C2 01FD                            ADD     BP,DI           ; Allocate buffer space
 14828 000041C4 81EDA902                        SUB     BP,ADJFAC       ; True address of free memory
 14829 000041C8 55                              PUSH    BP ; ###		
 14830 000041C9 BF[6843]                        MOV     DI,MEMSTRT	; Current start of DPBs
 14831 000041CC 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 14832 000041CF 8A0E[0001]                      MOV     CL,[NUMIO]
 14833 000041D3 30ED                            XOR     CH,CH
 14834                                  TRUEDPBAD:
 14835 000041D5 83C05E                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 14836 000041D8 AB                              STOSW                   ; Set the link to next DPB
 14837 000041D9 83C75C                          ADD     DI,DPBSIZ-2     ; Point at next address
 14838 000041DC E2F7                            LOOP    TRUEDPBAD
 14839 000041DE 83EF5E                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 14840 000041E1 B8FFFF                          MOV     AX,-1
 14841 000041E4 AB                              STOSW                   ; End of list
 14842 000041E5 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 14843 000041E8 B104                            MOV     CL,4
 14844 000041EA D3ED                            SHR     BP,CL           ; Number of segments for DOS resources
 14845 000041EC 8CCA                            MOV     DX,CS
 14846 000041EE 01EA                            ADD     DX,BP           ; First free segment
 14847                                  	;MOV	BX,0FH
 14848                                  	;MOV	CX,[ENDMEM]
 14849                                  
 14850                                          ;IF	HIGHMEM
 14851                                          ;SUB	CX,BP
 14852                                          ;MOV	BP,CX		; Segment of DOS
 14853                                          ;MOV	DX,CS		; Program segment
 14854                                          ;ENDIF
 14855                                  
 14856                                          ;IF	NOT HIGHMEM
 14857 000041F0 8CCD                            MOV     BP,CS
 14858                                          ;ENDIF
 14859                                  
 14860                                  ; BP has segment of DOS (whether to load high or run in place)
 14861                                  ; DX has program segment (whether after DOS or overlaying DOS)
 14862                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 14863                                          ;MOV	[ENDMEM],CX
 14864 000041F2 8EC5                            MOV     ES,BP
 14865                                  
 14866                                          ;IF     HIGHMEM
 14867                                          ;XOR    SI,SI
 14868                                          ;MOV    DI,SI
 14869                                          ;MOV    CX,SYSBUF	;# bytes to move
 14870                                          ;SHR    CX,1		;# words to move (carry set if odd)
 14871                                          ;REP	MOVSW		; Move DOS to high memory
 14872                                          ;JNC	SHORT NOTODD
 14873                                          ;MOVSB
 14874                                  ;NOTODD:
 14875                                          ;ENDIF
 14876                                  
 14877 000041F4 268C06[6D01]                    MOV     [ES:DSKCHRET+3],ES
 14878 000041F9 31C0                            XOR     AX,AX
 14879 000041FB 8ED8                            MOV     DS,AX
 14880 000041FD 8EC0                            MOV     ES,AX
 14881 000041FF BF8200                          MOV     DI,INTBASE+2
 14882 00004202 89E8                            MOV     AX,BP
 14883 00004204 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 14884 00004209 C706C100[7A06]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 14885 0000420F A3C300                          MOV     WORD [ENTRYPOINT+3],AX
 14886                                          ;EXTRN	DIVOV:near
 14887 00004212 C7060000[B82C]                  MOV     WORD [0],DIVOV	; Set default divide 
 14888                                  				; trap address
 14889 00004218 A30200                          MOV     [2],AX
 14890 0000421B B91100                          MOV     CX,17
 14891 0000421E F3AB                            REP	STOSW		; Set 9 segments (skip 2 between each)
 14892                                  
 14893                                          ;IF      ALTVECT
 14894                                          ;MOV     DI,ALTBASE+2
 14895                                          ;MOV     CX,15
 14896                                          ;REP     STOSW		; Set 8 segments (skip 2 between each)
 14897                                          ;ENDIF
 14898                                  
 14899 00004220 C7068000[4806]                  MOV     WORD [addr_int_abort],QUIT
 14900 00004226 C7068400[4C06]                  MOV     WORD [addr_int_command],COMMAND
 14901 0000422C C70688000001                    MOV     WORD [addr_int_terminate],100H
 14902 00004232 89168A00                        MOV     WORD [addr_int_terminate+2],DX
 14903 00004236 C7068C00[7906]                  MOV     WORD [addr_int_ctrl_c],_IRET   
 14904                                  							; Ctrl-C exit
 14905 0000423C C7069000[7906]                  MOV     WORD [addr_int_fatal_abort],_IRET
 14906                                  							; Fatal error exit
 14907 00004242 C7069400[8308]                  MOV     WORD [addr_int_disk_read],ABSDRD
 14908                                  							; INT 25
 14909 00004248 C7069800[BD08]                  MOV     WORD [addr_int_disk_write],ABSDWRT
 14910                                  							; INT 26
 14911                                          ;EXTRN	Stay_resident:NEAR
 14912 0000424E C7069C00[F834]                  MOV     WORD [addr_int_keep_process],Stay_resident
 14913 00004254 C706A000[7906]                  MOV     WORD [addr_int_spooler],_IRET  ; Spooler
 14914                                  
 14915                                          ;IF	NOT ALTVECT
 14916 0000425A B90C00                          MOV     CX,12
 14917 0000425D 31C0                            XOR     AX,AX
 14918 0000425F BFA800                          MOV     DI,2AH*4
 14919 00004262 F3AB                            REP     STOSW           ;Zero interrupt locs for ints 2AH-2FH
 14920                                          ;ENDIF
 14921                                  
 14922 00004264 0E                              PUSH    CS
 14923 00004265 1F                              POP     DS
 14924 00004266 0E                              PUSH    CS
 14925 00004267 07                              POP     ES
 14926 00004268 B8[5402]                        MOV     AX,INITBLOCK
 14927 0000426B 83C00F                          ADD	AX,0Fh		; round to a paragraph
 14928 0000426E B104                            MOV     CL,4
 14929 00004270 D3E8                            SHR     AX,CL
 14930 00004272 8CDF                            MOV     DI,DS
 14931 00004274 01C7                            ADD     DI,AX
 14932 00004276 47                              INC     DI
 14933 00004277 893E[8B01]                      MOV     [CurrentPDB],DI
 14934 0000427B 55                              PUSH    BP ; ##
 14935 0000427C 52                              PUSH    DX ; #		; Save COMMAND address
 14936 0000427D A1[E300]                        MOV     AX,[ENDMEM]
 14937 00004280 89FA                            MOV     DX,DI
 14938                                  
 14939                                          ;invoke	SETMEM          ; Basic Header
 14940 00004282 E867C9                  	CALL	SETMEM
 14941 00004285 0E                              PUSH    CS
 14942 00004286 1F                              POP     DS
 14943 00004287 BF1800                          MOV     DI,PDB.JFN_TABLE
 14944 0000428A 31C0                            XOR     AX,AX
 14945 0000428C AB                              STOSW
 14946 0000428D AA                              STOSB                   ; 0,1 and 2 are CON device
 14947 0000428E B0FF                            MOV     AL,0FFH
 14948 00004290 B91100                          MOV     CX,FILPERPROC - 3
 14949 00004293 F3AA                            REP     STOSB           ; Rest are unused
 14950 00004295 0E                              PUSH    CS
 14951 00004296 07                              POP     ES
 14952 00004297 8C1E[F600]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 14953                                  
 14954                                  ; After this points the char device functions for CON will work for
 14955                                  ; printing messages
 14956                                  
 14957                                          ;IF	NOT IBM
 14958                                          ;IF	NOT ALTVECT
 14959 0000429B BE[0006]                        MOV     SI,HEADER
 14960                                          ;invoke	OUTMES
 14961 0000429E E8C8C8                          CALL	OUTMES
 14962                                  	;PUSH	CS		; Outmes stomps on segments
 14963                                          ;POP	DS
 14964                                          ;PUSH	CS
 14965                                          ;POP	ES
 14966                                          ;ENDIF
 14967                                          ;ENDIF
 14968                                  
 14969                                  ; Move the FATs into position
 14970 000042A1 5A                              POP     DX ; #			; Restore COMMAND address
 14971 000042A2 5D                              POP     BP ; ##
 14972 000042A3 59                              POP     CX ; ###		; True address of free memory
 14973 000042A4 BE[6843]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 14974 000042A7 8B3E[F000]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 14975 000042AB 29F9                            SUB     CX,DI                   ; Total length of DPBs
 14976 000042AD 39F7                            CMP     DI,SI
 14977 000042AF 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 14978                                  					; lower memory?
 14979 000042B1 49                              DEC     CX                      ; Move backwards to higher memory
 14980 000042B2 01CF                            ADD     DI,CX
 14981 000042B4 01CE                            ADD     SI,CX
 14982 000042B6 41                              INC     CX
 14983 000042B7 FD                              STD
 14984                                  MOVJMP:
 14985 000042B8 8EC5                            MOV     ES,BP
 14986 000042BA E9ADC0                          JMP     MOVDPB
 14987                                  
 14988                                  CHARINIT:
 14989                                  ;ASSUME  DS:NOTHING,ES:NOTHING
 14990                                  ; DS:SI Points to device header
 14991                                  	; 15/03/2018
 14992                                          ;MOV     BYTE [DEVCALL_REQLEN],DINITHL
 14993                                          ;MOV     BYTE [DEVCALL_REQUNIT],0
 14994                                          ;MOV     BYTE [DEVCALL_REQFUNC],DEVINIT
 14995                                          ;MOV     WORD [DEVCALL_REQSTAT],0
 14996 000042BD 36C606[2D01]1A                  MOV     BYTE [SS:DEVCALL_REQLEN],DINITHL
 14997 000042C3 36C606[2E01]00                  MOV     BYTE [SS:DEVCALL_REQUNIT],0
 14998 000042C9 36C606[2F01]00                  MOV     BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 14999 000042CF 36C706[3001]0000                MOV     WORD [SS:DEVCALL_REQSTAT],0
 15000 000042D6 06                              PUSH    ES
 15001 000042D7 53                              PUSH    BX
 15002 000042D8 50                              PUSH    AX
 15003 000042D9 BB[2D01]                        MOV     BX,DEVCALL
 15004 000042DC 0E                              PUSH    CS
 15005 000042DD 07                              POP     ES
 15006                                          ;invoke	DEVIOCALL2
 15007 000042DE E8AED0                          CALL	DEVIOCALL2	
 15008 000042E1 58                      	POP     AX
 15009 000042E2 5B                              POP     BX
 15010 000042E3 07                              POP     ES
 15011 000042E4 C3                              RETN
 15012                                  
 15013 000042E5 90                      align 2
 15014                                  
 15015                                          ;DB	80H DUP(?)
 15016 000042E6 0000<rept>              	TIMES	64 Dw 0
 15017                                  
 15018                                  INITSTACK:	; INITSTACK LABEL BYTE
 15019 00004366 0000                            DW	0 ; DW ?
 15020                                  
 15021                                  ;MEMSTRT LABEL	WORD
 15022                                  MEMSTRT	EQU	$
 15023                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 15024                                  
 15025                                          ;do_ext
 15026                                  ;LAST	ENDS
