     1                                  ; ****************************************************************************
     2                                  ; COMMAND.COM (MSDOS 2.0 Command Interpreter) - RETRO DOS v2.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 05/05/2018
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 15/02/2018 (COMMAND.COM v1.17) - 21/04/2018 (COMMAND.COM v2.11)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.11  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm command2.s -l command2.lst -o COMMAND.COM)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    13                                  ; by Microsoft, 18/08/1983
    14                                  ; ****************************************************************************
    15                                  ; Modified from 'COMMAND.S' (MSDOS 1.25 COMMAND.COM) source code
    16                                  ; in NASM syntax (by Erdogan Tan), 23/02/2018
    17                                  ; ----------------------------------------------------------------------------
    18                                  ;
    19                                  ;;============================================================================
    20                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    21                                  ; (IBMDOS 2.10 COMMAND.COM) output in TASM syntax (21/04/2018..22/04/2018)
    22                                  ;;============================================================================
    23                                  ;
    24                                  ; COMMAND.COM v2.11 source files:
    25                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    26                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    27                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    28                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    29                                  ;
    30                                  ;=============================================================================
    31                                  ; COMLINK
    32                                  ;=============================================================================
    33                                  ;command rucode rdata init uinit tcode tcode2 tcode3 +
    34                                  ;tcode4 tcode5 tucode copy copyproc cparse tdata tspc;
    35                                  
    36                                  ;
    37                                  ; This version of COMMAND is divided into three distinct parts.  First is the
    38                                  ; resident portion, which includes handlers for interrupts 22H (terminate),
    39                                  ; 23H (Cntrl-C), 24H (fatal error), and 27H (stay resident); it also has code
    40                                  ; to test and, if necessary, reload the transient portion.  Following the
    41                                  ; resident is the init code, which is overwritten after use.  Then comes the
    42                                  ; transient portion, which includes all command processing (whether internal
    43                                  ; or external).  The transient portion loads at the end of physical memory,
    44                                  ; and it may be overlayed by programs that need as much memory as possible.
    45                                  ; When the resident portion of command regains control from a user program, a
    46                                  ; checksum is performed on the transient portion to see if it must be
    47                                  ; reloaded.  Thus programs which do not need maximum memory will save the time
    48                                  ; required to reload COMMAND when they terminate.
    49                                  
    50                                  ;
    51                                  ; REV 1.17
    52                                  ;    05/19/82   Fixed bug in BADEXE error (relocation error must return to
    53                                  ;               resident since the EXELOAD may have overwritten the transient.
    54                                  ; REV 1.18
    55                                  ;    05/21/82   IBM version always looks on drive A
    56                                  ;               MSVER always looks on default drive
    57                                  ;
    58                                  ; REV 1.19
    59                                  ;    06/03/82   Drive spec now entered in command line
    60                                  ;    06/07/82   Added VER command (print DOS version number) and VOL command
    61                                  ;               (print volume label)
    62                                  ; REV 1.20
    63                                  ;    06/09/82   Prints "directory" after directories
    64                                  ;    06/13/82   MKDIR, CHDIR, PWD, RMDIR added
    65                                  ; REV 1.50
    66                                  ;               Some code for new 2.0 DOS, sort of HACKey.  Not enough time to
    67                                  ;               do it right.
    68                                  ; REV 1.70
    69                                  ;               EXEC used to fork off new processes
    70                                  ; REV 1.80
    71                                  ;               C switch for single command execution
    72                                  ; REV 1.90
    73                                  ;               Batch uses XENIX
    74                                  ; Rev 2.00
    75                                  ;               Lots of neato stuff
    76                                  ;               IBM 2.00 level
    77                                  ; Rev 2.01
    78                                  ;               'D' switch for date time suppression
    79                                  ; Rev 2.02
    80                                  ;               Default userpath is NUL rather than BIN
    81                                  ;                       same as IBM
    82                                  ;               COMMAND split into pieces
    83                                  ; Rev 2.10
    84                                  ;               INTERNATIONAL SUPPORT
    85                                  ; Rev 2.11      COMMAND split into more pieces
    86                                  
    87                                  ; ----------------------------------------------------------------------------
    88                                  
    89                                  ;	INCLUDE DOSSYM.ASM
    90                                  ;	INCLUDE DEVSYM.ASM
    91                                  ;	INCLUDE COMSW.ASM
    92                                  ;	INCLUDE COMEQU.ASM
    93                                  
    94                                  ; ----------------------------------------------------------------------------
    95                                  
    96                                  ;=============================================================================
    97                                  ; DOSSYM.ASM
    98                                  ;=============================================================================
    99                                  
   100                                  ;<Control character definitions>
   101                                  
   102                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   103                                  c_BS        EQU     08h         ; ^H ASCII backspace
   104                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   105                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   106                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   107                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   108                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   109                                  c_HT        EQU     09h         ; ^I ASCII tab
   110                                  
   111                                  ;<BPB Definition>
   112                                  
   113                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   114                                  ;                                                                          ;
   115                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   116                                  ;                                                                          ;
   117                                  ; Certain structures, constants and system  calls  below  are  private  to ;
   118                                  ; the DOS  and  are  extremely  version-dependent.  They may change at any ;
   119                                  ; time at  the  implementors'  whim.   As  a  result,  they  must  not  be ;
   120                                  ; documented to  the  general  public.   If  an  extreme case arises, they ;
   121                                  ; must be documented with this warning.                                    ;
   122                                  ;                                                                          ;
   123                                  ; Those structures and constants that are subject to  the  above  will  be ;
   124                                  ; marked and bracketed with the flag:                                      ;
   125                                  ;                                                                          ;
   126                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   127                                  ;                                                                          ;
   128                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   129                                  
   130                                  ; <Bios Parameter Block>
   131                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   132                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   133                                  ;                                                                          ;
   134                                  
   135                                  ; Bios Parameter Block definition
   136                                  ; This structure is used to build a full DPB
   137                                  
   138                                  struc BPBLOCK
   139 00000000 <res 00000002>          .SECSZ: resw 1		; Size in bytes of physical sector
   140 00000002 <res 00000001>          .CLUS:  resb 1		; Sectors/Alloc unit
   141 00000003 <res 00000002>          .RES:   resw 1		; Number of reserved sectors
   142 00000005 <res 00000001>          .FTCNT: resb 1		; Number of FATs
   143 00000006 <res 00000002>          .DRCNT: resw 1		; Number of directory entries
   144 00000008 <res 00000002>          .SCCNT: resw 1		; Total number of sectors
   145 0000000A <res 00000001>          .MEDIA: resb 1		; Media descriptor byte
   146 0000000B <res 00000002>          .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   147                                  .size:
   148                                  endstruc
   149                                  ;                                                                          ;
   150                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   151                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   152                                  
   153                                  ; <Disk I/O Buffer Header>
   154                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   155                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   156                                  ;                                                                          ;
   157                                  
   158                                  ; Field definition for I/O buffer information
   159                                  
   160                                  struc BUFFINFO
   161 00000000 <res 00000004>          .NEXTBUF:	resd 1		; Pointer to next buffer in list
   162                                  ; The next two items are often refed as a word
   163 00000004 <res 00000001>          .BUFDRV:	resb 1		; Logical drive # assoc with buffer FF = free
   164 00000005 <res 00000001>          .BUFDIRTY:	resb 1		; Dirty flag
   165 00000006 <res 00000001>          .BUFPRI:	resb 1		; Buffer selection priority (see EQUs below)
   166 00000007 <res 00000001>          .VISIT:		resb 1		; Visit flag for buffer pool scans
   167 00000008 <res 00000002>          .BUFSECNO:	resw 1		; Sector number of buffer
   168                                  ; The next two items are often refed as a word
   169 0000000A <res 00000001>          .BUFWRTCNT:	resb 1		; For FAT sectors, # times sector written out
   170 0000000B <res 00000001>          .BUFWRTINC:	resb 1		; "   "     "   , # sectors between each write
   171 0000000C <res 00000004>          .BUFDRVDP:	resd 1		; Pointer to drive parameters
   172                                  .size:
   173                                  endstruc
   174                                  
   175                                  BUFINSIZ        EQU     BUFFINFO.size
   176                                  
   177                                                                  ; Size of structure in bytes
   178                                  FREEPRI EQU     0
   179                                  LBRPRI  EQU     2               ; Last byte of buffer read
   180                                  LBWPRI  EQU     4               ; Last byte written
   181                                  RPRI    EQU     6               ; Read but not last byte
   182                                  WPRI    EQU     8               ; Written but not last byte
   183                                  DIRPRI  EQU     15              ; Directory Sector
   184                                  FATPRI  EQU     30              ; FAT sector
   185                                  ;                                                                          ;
   186                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   187                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   188                                  
   189                                  ; <User stack inside of system call>
   190                                  ; Location of user registers relative user stack pointer
   191                                  
   192                                  struc	user_env   ; user_environ
   193 00000000 <res 00000002>          .user_AX: resw 1
   194 00000002 <res 00000002>          .user_BX: resw 1
   195 00000004 <res 00000002>          .user_CX: resw 1
   196 00000006 <res 00000002>          .user_DX: resw 1
   197 00000008 <res 00000002>          .user_SI: resw 1
   198 0000000A <res 00000002>          .user_DI: resw 1
   199 0000000C <res 00000002>          .user_BP: resw 1
   200 0000000E <res 00000002>          .user_DS: resw 1
   201 00000010 <res 00000002>          .user_ES: resw 1
   202 00000012 <res 00000002>          .user_IP: resw 1
   203 00000014 <res 00000002>          .user_CS: resw 1
   204 00000016 <res 00000002>          .user_F:  resw 1
   205                                  .size:
   206                                  endstruc
   207                                  
   208                                  ; <interrupt definitions>
   209                                  
   210                                  INTTAB          EQU     20H
   211                                  INTBASE         EQU     4 * INTTAB
   212                                  ENTRYPOINT      EQU     INTBASE+40H
   213                                  
   214                                  ;	IF      ALTVECT
   215                                  ;ALTTAB  EQU     0F0H
   216                                  ;ALTBASE EQU     4 * ALTTAB
   217                                  ;	ENDIF
   218                                  
   219                                  ;
   220                                  ; interrupt assignments
   221                                  ;
   222                                  ;	IF	NOT ALTVECT
   223                                  int_abort           EQU     INTTAB          ; abort process
   224                                  int_command         EQU     int_abort+1     ; call MSDOS
   225                                  int_terminate       EQU     int_abort+2     ; int to terminate address
   226                                  int_ctrl_c          EQU     int_abort+3     ; ^c trapper
   227                                  int_fatal_abort     EQU     int_abort+4     ; hard disk error
   228                                  int_disk_read       EQU     int_abort+5     ; logical sector disk read
   229                                  int_disk_write      EQU     int_abort+6     ; logical sector disk write
   230                                  int_keep_process    EQU     int_abort+7     ; terminate program and stay resident
   231                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   232                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   233                                  ;                                                                          ;
   234                                  int_spooler         EQU     int_abort+8     ; spooler call
   235                                  int_fastcon         EQU     int_abort+9     ; fast CON interrupt
   236                                  ;                                                                          ;
   237                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   238                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   239                                          ;ELSE
   240                                  ;int_abort          EQU     INTTAB          ; abort process
   241                                  ;int_command        EQU     int_abort+1     ; call MSDOS
   242                                  ;int_terminate      EQU     ALTTAB          ; int to terminate address
   243                                  ;int_ctrl_c         EQU     int_terminate+1 ; ^c trapper
   244                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   245                                  ;int_disk_read      EQU     int_abort+5     ; logical sector disk read
   246                                  ;int_disk_write     EQU     int_abort+6     ; logical sector disk write
   247                                  ;int_keep_process   EQU     int_abort+7     ; terminate program and stay resident
   248                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   249                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   250                                  ;                                                                          ;
   251                                  ;int_spooler        EQU     int_terminate+3 ; spooler call
   252                                  ;int_fastcon        EQU     int_abort+9     ; fast CON interrupt
   253                                  ;                                                                          ;
   254                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   255                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   256                                          ;ENDIF
   257                                  
   258                                  addr_int_abort          EQU    4 * int_abort
   259                                  addr_int_command        EQU    4 * int_command
   260                                  addr_int_terminate      EQU    4 * int_terminate
   261                                  addr_int_ctrl_c         EQU    4 * int_ctrl_c
   262                                  addr_int_fatal_abort    EQU    4 * int_fatal_abort
   263                                  addr_int_disk_read      EQU    4 * int_disk_read
   264                                  addr_int_disk_write     EQU    4 * int_disk_write
   265                                  addr_int_keep_process   EQU    4 * int_keep_process
   266                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   267                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   268                                  ;                                                                          ;
   269                                  addr_int_spooler        EQU    4 * int_spooler
   270                                  addr_int_fastcon        EQU    4 * int_fastcon
   271                                  ;                                                                          ;
   272                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   273                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   274                                  
   275                                  ; <Disk map>
   276                                  ;  MSDOS partitions the disk into 4 sections:
   277                                  ;
   278                                  ;  phys sector 0:   +-------------------+
   279                                  ;       |           | boot/reserved     |
   280                                  ;       |           +-------------------+
   281                                  ;       |           |  File allocation  |
   282                                  ;       v           |      table(s)     |
   283                                  ;                   |  (multiple copies |
   284                                  ;                   |     are kept)     |
   285                                  ;                   +-------------------+
   286                                  ;                   |     Directory     |
   287                                  ;                   +-------------------+
   288                                  ;                   |     File space    |
   289                                  ;                   +-------------------+
   290                                  ;                   |   Unaddressable   |
   291                                  ;                   |  (to end of disk) |
   292                                  ;                   +-------------------+
   293                                  ;
   294                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   295                                  ; adjusted to maximize the file space addressable.
   296                                  
   297                                  ; BREAK <Directory entry>
   298                                  
   299                                  ;
   300                                  ;       +---------------------------+
   301                                  ;       |  (12 BYTE) filename/ext   |       0       0
   302                                  ;       +---------------------------+
   303                                  ;       |     (BYTE) attributes     |       11      B
   304                                  ;       +---------------------------+
   305                                  ;       |    (10 BYTE) reserved     |       12      C
   306                                  ;       +---------------------------+
   307                                  ;       | (WORD) time of last write |       22      16
   308                                  ;       +---------------------------+
   309                                  ;       | (WORD) date of last write |       24      18
   310                                  ;       +---------------------------+
   311                                  ;       |   (WORD) First cluster    |       26      1A
   312                                  ;       +---------------------------+
   313                                  ;       |     (DWORD) file size     |       28      1C
   314                                  ;       +---------------------------+
   315                                  ;
   316                                  ;   First byte of filename  = E5 -> free directory entry
   317                                  ;                           = 00 -> end of allocated directory
   318                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   319                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   320                                  ;
   321                                  struc dir_entry
   322 00000000 <res 0000000B>          .dir_name:	resb 11			; file name
   323 0000000B <res 00000001>          .dir_attr:	resb 1			; attribute bits
   324 0000000C <res 0000000A>          .dir_pad:	resb 10			; reserved for expansion
   325 00000016 <res 00000002>          .dir_time:	resw 1			; time of last write
   326 00000018 <res 00000002>          .dir_date:	resw 1			; date of last write
   327 0000001A <res 00000002>          .dir_first:	resw 1			; first allocation unit of file
   328 0000001C <res 00000002>          .dir_size_l:	resw 1			; low 16 bits of file size
   329 0000001E <res 00000002>          .dir_size_h:	resw 1			; high 16 bits of file size
   330                                  .size:
   331                                  endstruc
   332                                  
   333                                  attr_read_only      EQU      1h
   334                                  attr_hidden         EQU      2h
   335                                  attr_system         EQU      4h
   336                                  attr_volume_id      EQU      8h
   337                                  attr_directory      EQU     10h
   338                                  attr_archive        EQU     20h
   339                                  
   340                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   341                                                                          ; OR of hard attributes for FINDENTRY
   342                                  
   343                                  attr_ignore         EQU     attr_read_only+attr_archive
   344                                                                          ; ignore this(ese) attribute(s)
   345                                                                          ; during search first/next
   346                                  
   347                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   348                                                                          ; changeable via CHMOD
   349                                  
   350                                  ; <File allocation Table information>
   351                                  ;
   352                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   353                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   354                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   355                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   356                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   357                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   358                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   359                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   360                                  ; available allocation unit is assigned entry number two, and even though it is
   361                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   362                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   363                                  ; entry is the number of the next cluster in the file.
   364                                  ;
   365                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   366                                  ; because these clusters show as allocated, but are not part of any allocation
   367                                  ; chain and thus will never be allocated to a file.  A particular number is
   368                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   369                                  ; entry FF7H which is not in a chain is not an error).
   370                                  
   371                                  ; BREAK <DPB structure>
   372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   373                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   374                                  ;                                                                          ;
   375                                  
   376                                  DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   377                                  
   378                                  struc	DPB
   379 00000000 <res 00000001>          .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   380 00000001 <res 00000001>          .UNIT:		resb 1		; Driver unit number of DPB
   381 00000002 <res 00000002>          .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   382 00000004 <res 00000001>          .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   383 00000005 <res 00000001>          .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   384 00000006 <res 00000002>          .FIRST_FAT:	resw 1		; Starting record of FATs
   385 00000008 <res 00000001>          .FAT_COUNT:	resb 1		; Number of FATs for this drive
   386 00000009 <res 00000002>          .ROOT_ENTRIES:	resw 1		; Number of directory entries
   387 0000000B <res 00000002>          .FIRST_SECTOR:	resw 1		; First sector of first cluster
   388 0000000D <res 00000002>          .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   389 0000000F <res 00000001>          .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   390 00000010 <res 00000002>          .DIR_SECTOR:	resw 1		; Starting record of directory
   391 00000012 <res 00000004>          .DRIVER_ADDR:	resd 1		; Pointer to driver
   392 00000016 <res 00000001>          .MEDIA:		resb 1		; Media byte
   393 00000017 <res 00000001>          .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   394                                  				; check the first time this DPB is used
   395 00000018 <res 00000004>          .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   396 0000001C <res 00000002>          .CURRENT_DIR:	resw 1		; Cluster number of start of current directory
   397                                  				; 0 indicates root, -1 indicates invalid
   398                                  				; (disk ? changed)
   399 0000001E <res 00000040>          .DIR_TEXT:	resb DIRSTRLEN	; ASCIZ string of current directory
   400                                  .size:
   401                                  endstruc
   402                                  
   403                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   404                                  
   405                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   406                                  
   407                                  ;                                                                          ;
   408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   410                                  
   411                                  ; BREAK <File Control Block definition>
   412                                  ;
   413                                  ; Field definition for FCBs
   414                                  ; The FCB has the following structure:
   415                                  ;
   416                                  ;       +---------------------------+
   417                                  ;       |   Drive indicator(byte)   |
   418                                  ;       +---------------------------+
   419                                  ;       |    Filename (8 chars)     |
   420                                  ;       +---------------------------+
   421                                  ;       |    Extension (3 chars)    |
   422                                  ;       +---------------------------+
   423                                  ;       |   Current Extent(word)    |
   424                                  ;       +---------------------------+
   425                                  ;       |    Record size (word)     |
   426                                  ;       +---------------------------+
   427                                  ;       |    File Size (2 words)    |
   428                                  ;       +---------------------------+
   429                                  ;       |       Date of write       |
   430                                  ;       +---------------------------+
   431                                  ;       |       Time of write       |
   432                                  ;       +---------------------------+
   433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   435                                  ;                                                                          ;
   436                                  ;       | Flags:                    |
   437                                  ;       |  bit 7=0 file/1 device    |
   438                                  ;       |  bit 6=0 if dirty         |
   439                                  ;       |  bits 0-5 deviceid        |
   440                                  ;       +---------------------------+
   441                                  ;       |   first cluster in file   |
   442                                  ;       +---------------------------+
   443                                  ;       | position of last cluster  |
   444                                  ;       +---------------------------+
   445                                  ;       |   last cluster accessed   |   12 bit-+--- packed in 3 bytes
   446                                  ;       +---------------------------+          |
   447                                  ;       |     parent directory      |   <------+
   448                                  ;       +---------------------------+
   449                                  ;                                                                          ;
   450                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   451                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   452                                  ;       |    next record number     |
   453                                  ;       +---------------------------+
   454                                  ;       |   random record number    |
   455                                  ;       +---------------------------+
   456                                  ;
   457                                  
   458                                  struc	SYS_FCB
   459 00000000 <res 00000001>          .drive:	resb 1
   460 00000001 <res 00000008>          .name:	resb 8
   461 00000009 <res 00000003>          .ext:	resb 3
   462 0000000C <res 00000002>          .EXTENT: resw 1
   463 0000000E <res 00000002>          .RECSIZ: resw 1	; Size of record (user settable)
   464 00000010 <res 00000002>          .FILSIZ: resw 1	; Size of file in bytes; used with the following
   465                                                          ; word
   466 00000012 <res 00000002>          .DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
   467 00000014 <res 00000002>          .FDATE:	resw 1	; Date of last writing
   468 00000016 <res 00000002>          .FTIME:	resw 1	; Time of last writing
   469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   470                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   471                                  ;                                                                          ;
   472 00000018 <res 00000001>          .DEVID:	resb 1	; Device ID number, bits 0-5 if file.
   473                                                          ; bit 7=0 for file, bit 7=1 for I/O device
   474                                                          ; If file, bit 6=0 if dirty
   475                                                          ; If I/O device, bit 6=0 if EOF (input)
   476                                                          ;               Bit 5=1 if Raw mode
   477                                                          ;               Bit 0=1 if console input device
   478                                                          ;               Bit 1=1 if console output device
   479                                                          ;               Bit 2=1 if null device
   480                                                          ;               Bit 3=1 if clock device
   481 00000019 <res 00000002>          .FIRCLUS: resw 1	; First cluster of file
   482 0000001B <res 00000002>          .CLUSPOS: resw 1	; Position of last cluster accessed
   483 0000001D <res 00000002>          .LSTCLUS: resw 1	; Last cluster accessed and directory
   484 0000001F <res 00000001>                    resb 1	; pack 2 12 bit numbers into 24 bits...
   485                                  ;                                                                          ;
   486                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   487                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   488 00000020 <res 00000001>          .NR:	resb 1	; Next record
   489 00000021 <res 00000004>          .RR:	resb 4	; Random record
   490                                  .size:
   491                                  endstruc
   492                                  
   493                                  FILDIRENT       EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and
   494                                                                          ; SEARCH NEXT
   495                                  
   496                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   497                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   498                                  ;                                                                          ;
   499                                  devid_file_clean        EQU     40h     ; true if file and not written
   500                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   501                                  
   502                                  devid_device            EQU     80h     ; true if a device
   503                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   504                                  devid_device_raw        EQU     20h     ; true if in raw mode
   505                                  devid_device_special    EQU     10h     ; true if special device
   506                                  devid_device_clock      EQU     08h     ; true if clock device
   507                                  devid_device_null       EQU     04h     ; true if null device
   508                                  devid_device_con_out    EQU     02h     ; true if console output
   509                                  devid_device_con_in     EQU     01h     ; true if consle input
   510                                  
   511                                  ;
   512                                  ; structure of devid field as returned by IOCTL is:
   513                                  ;
   514                                  ;       BIT     7   6   5   4   3   2   1   0
   515                                  ;             |---|---|---|---|---|---|---|---|
   516                                  ;             | I | E | R | S | I | I | I | I |
   517                                  ;             | S | O | A | P | S | S | S | S |
   518                                  ;             | D | F | W | E | C | N | C | C |
   519                                  ;             | E |   |   | C | L | U | O | I |
   520                                  ;             | V |   |   | L | K | L | T | N |
   521                                  ;             |---|---|---|---|---|---|---|---|
   522                                  ;       ISDEV = 1 if this channel is a device
   523                                  ;             = 0 if this channel is a disk file
   524                                  ;
   525                                  ;       If ISDEV = 1
   526                                  ;
   527                                  ;             EOF = 0 if End Of File on input
   528                                  ;             RAW = 1 if this device is in Raw mode
   529                                  ;                 = 0 if this device is cooked
   530                                  ;             ISCLK = 1 if this device is the clock device
   531                                  ;             ISNUL = 1 if this device is the null device
   532                                  ;             ISCOT = 1 if this device is the console output
   533                                  ;             ISCIN = 1 if this device is the console input
   534                                  ;
   535                                  ;       If ISDEV = 0
   536                                  ;             EOF = 0 if channel has been written
   537                                  ;             Bits 0-5  are  the  block  device  number  for
   538                                  ;                 the channel (0 = A, 1 = B, ...)
   539                                  ;
   540                                  devid_ISDEV     EQU     80h
   541                                  devid_EOF       EQU     40h
   542                                  devid_RAW       EQU     20h
   543                                  devid_SPECIAL   EQU     10H
   544                                  devid_ISCLK     EQU     08h
   545                                  devid_ISNUL     EQU     04h
   546                                  devid_ISCOT     EQU     02h
   547                                  devid_ISCIN     EQU     01h
   548                                  
   549                                  devid_block_dev EQU     1Fh             ; mask for block device number
   550                                  
   551                                  ;
   552                                  ; find first/next buffer
   553                                  ;
   554                                  struc	find_buf
   555 00000000 <res 00000001>          .sattr:	   resb 1	; attribute of search
   556 00000001 <res 00000001>          .drive:	   resb 1	; drive of search
   557 00000002 <res 0000000B>          .name:	   resb 11	; formatted name
   558 0000000D <res 00000002>          .LastEnt:  resw 1	; LastEnt
   559 0000000F <res 00000004>          .ThisDPB:  resd 1	; This DPB
   560 00000013 <res 00000002>          .DirStart: resw 1	; DirStart
   561                                  ;                                                                          ;
   562                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   563                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   564                                  
   565 00000015 <res 00000001>          .attr:	 resb 1		; attribute found
   566 00000016 <res 00000001>          .time:   resb 1		; time
   567 00000017 <res 00000001>          .date:   resb 1		; date
   568 00000018 <res 00000002>          .size_l: resw 1		; low(size)
   569 0000001A <res 00000002>          .size_h: resw 1		; high(size)
   570 0000001C <res 0000000D>          .pname:	 resb 13	; packed name
   571                                  .size:
   572                                  endstruc
   573                                  
   574                                  ; BREAK <Process data block>
   575                                  ;
   576                                  ; Process data block (otherwise known as program header)
   577                                  ;
   578                                  
   579                                  FILPERPROC	EQU     20
   580                                  
   581                                  struc PDB	; Process_data_block
   582 00000000 <res 00000002>          .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   583 00000002 <res 00000002>          .BLOCK_LEN:	resw 1		; size of execution block
   584 00000004 <res 00000001>                          resb 1
   585 00000005 <res 00000005>          .CPM_CALL:	resb 5		; ancient call to system
   586 0000000A <res 00000004>          .EXIT:		resd 1		; pointer to exit routine
   587 0000000E <res 00000004>          .CTRL_C:	resd 1		; pointer to ^C routine
   588 00000012 <res 00000004>          .FATAL_ABORT:	resd 1		; pointer to fatal error
   589                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   590                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   591                                  ;                                                                          ;
   592 00000016 <res 00000002>          .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   593 00000018 <res 00000014>          .JFN_TABLE:     resb FILPERPROC ; indices into system table
   594                                  ;                                                                          ;
   595                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   596                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   597 0000002C <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   598                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   599                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   600                                  ;                                                                          ;
   601 0000002E <res 00000004>          .USER_STACK:	resd 1		; stack of self during system calls
   602 00000032 <res 0000001E>          .PAD1:		resb 30 ; 1Eh
   603                                  ;                                                                          ;
   604                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   605                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   606 00000050 <res 00000005>          .CALL_SYSTEM:	resb 5		; portable method of system call
   607                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   608                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   609                                  ;                                                                          ;
   610 00000055 <res 00000006>          .PAD2:		resb 6
   611                                  ;                                                                          ;
   612                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   613                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   614                                  endstruc
   615                                  
   616                                  ; BREAK <EXEC and EXE file structures>
   617                                  ;
   618                                  ; EXEC arg block - load/go program
   619                                  ;
   620                                  
   621                                  ;
   622                                  ; The following get used as arguments to the EXEC system call.  They indicate
   623                                  ; whether or not the program is executed or whether or not a program header
   624                                  ; gets created.
   625                                  ;
   626                                  exec_func_no_execute    EQU 1           ; no execute bit
   627                                  exec_func_overlay       EQU 2           ; overlay bit
   628                                  
   629                                  struc EXEC0
   630 00000000 <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   631 00000002 <res 00000004>          .COM_LINE:	resd 1		; pointer to asciz command line
   632 00000006 <res 00000004>          .5C_FCB:	resd 1		; default fcb at 5C
   633 0000000A <res 00000004>          .6C_FCB:	resd 1		; default fcb at 6C
   634                                  .size:
   635                                  endstruc
   636                                  
   637                                  struc EXEC1
   638 00000000 <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   639 00000002 <res 00000004>          .COM_LINE:	resd 1		; pointer to asciz command line
   640 00000006 <res 00000004>          .5C_FCB:	resd 1		; default fcb at 5C
   641 0000000A <res 00000004>          .6C_FCB:	resd 1		; default fcb at 6C
   642 0000000E <res 00000002>          .SP:		resw 1		; stack pointer of program
   643 00000010 <res 00000002>          .SS:		resw 1		; stack seg register of program
   644 00000012 <res 00000002>          .IP:		resw 1		; entry point IP
   645 00000014 <res 00000002>          .CS:		resw 1		; entry point CS
   646                                  .size:
   647                                  endstruc
   648                                  
   649                                  struc EXEC3
   650 00000000 <res 00000002>          .load_addr:	resw 1		; seg address of load point
   651 00000002 <res 00000002>          .reloc_fac:	resw 1		; relocation factor
   652                                  endstruc
   653                                  
   654                                  ;
   655                                  ; Exit codes in upper byte
   656                                  ;
   657                                  Exit_Terminate      EQU     0
   658                                  Exit_Abort          EQU     0
   659                                  Exit_Ctrl_C         EQU     1
   660                                  Exit_Hard_Error     EQU     2
   661                                  Exit_Keep_Process   EQU     3
   662                                  
   663                                  ;
   664                                  ; EXE file header
   665                                  ;
   666                                  
   667                                  struc EXE
   668 00000000 <res 00000002>          .signature:   resw 1		; must contain 4D5A (yay zibo!)
   669 00000002 <res 00000002>          .len_mod_512: resw 1		; low 9 bits of length
   670 00000004 <res 00000002>          .pages:       resw 1		; number of 512b pages in file
   671 00000006 <res 00000002>          .rle_count:   resw 1		; count of reloc entries
   672 00000008 <res 00000002>          .par_dir:     resw 1		; number of paragraphs before image
   673 0000000A <res 00000002>          .min_BSS:     resw 1		; minimum number of para of BSS
   674 0000000C <res 00000002>          .max_BSS:     resw 1		; max number of para of BSS
   675 0000000E <res 00000002>          .SS:          resw 1		; stack of image
   676 00000010 <res 00000002>          .SP:          resw 1		; SP of image
   677 00000012 <res 00000002>          .chksum:      resw 1		; checksum of file (ignored)
   678 00000014 <res 00000002>          .IP:          resw 1		; IP of entry
   679 00000016 <res 00000002>          .CS:          resw 1		; CS of entry
   680 00000018 <res 00000002>          .rle_table:   resw 1		; byte offset of reloc table
   681 0000001A <res 00000002>          .iov:         resw 1		; overlay number (0 for root)
   682 0000001C <res 00000004>          .sym_tab:     resd 1		; offset of symbol table in file
   683                                  .size:
   684                                  endstruc
   685                                  
   686                                  exe_valid_signature     EQU 5A4Dh
   687                                  exe_valid_old_signature EQU 4D5Ah
   688                                  
   689                                  struc symbol_entry
   690 00000000 <res 00000004>          .value:	resd 1
   691 00000004 <res 00000002>          .type:	resw 1
   692 00000006 <res 00000001>          .len:	resb 1
   693 00000007 <res 000000FF>          .name:	resb 255
   694                                  endstruc
   695                                  
   696                                  ; <Internal system file table format>
   697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   698                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   699                                  ;                                                                          ;
   700                                  ;
   701                                  ; system file table
   702                                  ;
   703                                  
   704                                  struc	SFT
   705 00000000 <res 00000004>          .SFT_LINK:	resd 1
   706 00000004 <res 00000002>          .SFT_COUNT:	resw 1		; number of entries
   707 00000006 <res 00000002>          .SFT_TABLE:	resw 1		; beginning of array of the following
   708                                  .size:
   709                                  endstruc
   710                                  
   711                                  ;
   712                                  ; system file table entry
   713                                  ;
   714                                  
   715                                  struc	SF_ENTRY
   716 00000000 <res 00000001>          .sf_ref_count:	resb 1		; number of processes sharing fcb
   717 00000001 <res 00000001>          .sf_mode:	resb 1		; mode of access
   718 00000002 <res 00000001>          .sf_attr:	resb 1		; attribute of file
   719 00000003 <res 00000025>          .sf_fcb:	resb SYS_FCB.size  ; actual FCB
   720                                  .size:
   721                                  endstruc
   722                                  
   723                                  sf_default_number   EQU     5h
   724                                  ; 19/04/2018
   725                                  sf_entry_size equ SF_ENTRY.size ; 40
   726                                  
   727                                  ;                                                                          ;
   728                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   729                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   730                                  
   731                                  ; <Memory arena structure>
   732                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   733                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   734                                  ;                                                                          ;
   735                                  ;
   736                                  ; arena item
   737                                  ;
   738                                  
   739                                  struc ARENA
   740 00000000 <res 00000001>          .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
   741 00000001 <res 00000002>          .OWNER:		resw 1		; owner of arena item
   742 00000003 <res 00000002>          .SIZE:		resw 1		; size in paragraphs of item
   743                                  endstruc
   744                                  
   745                                  arena_owner_system  EQU 0               ; free block indication
   746                                  
   747                                  arena_signature_normal  EQU 4Dh         ; valid signature, not end of arena
   748                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
   749                                  ;                                                                          ;
   750                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   751                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   752                                  
   753                                  ; <Machine instruction definitions>
   754                                  
   755                                  mi_INT          EQU     0CDh
   756                                  mi_Long_JMP     EQU     0EAh
   757                                  mi_Long_CALL    EQU     09Ah
   758                                  mi_Long_RET     EQU     0CBh
   759                                  
   760                                  ; <Standard I/O assignments>
   761                                  
   762                                  stdin       EQU     0
   763                                  stdout      EQU     1
   764                                  stderr      EQU     2
   765                                  stdaux      EQU     3
   766                                  stdprn      EQU     4
   767                                  
   768                                  ; <Xenix subfunction assignments>
   769                                  
   770                                  open_for_read   EQU 0
   771                                  open_for_write  EQU 1
   772                                  open_for_both   EQU 2
   773                                  
   774                                  ; <Xenix error codes>
   775                                  
   776                                  ;
   777                                  ; XENIX calls all return error codes through AX.  If an error occurred then the
   778                                  ; carry bit will be set and the error code is in AX.  If no error occurred then
   779                                  ; the carry bit is reset and AX contains returned info.
   780                                  ;
   781                                  
   782                                  no_error_occurred		EQU     0
   783                                  
   784                                  error_invalid_function          EQU     1
   785                                  error_file_not_found            EQU     2
   786                                  error_path_not_found            EQU     3
   787                                  error_too_many_open_files       EQU     4
   788                                  error_access_denied             EQU     5
   789                                  error_invalid_handle            EQU     6
   790                                  error_arena_trashed             EQU     7
   791                                  error_not_enough_memory         EQU     8
   792                                  error_invalid_block             EQU     9
   793                                  error_bad_environment           EQU     10
   794                                  error_bad_format                EQU     11
   795                                  error_invalid_access            EQU     12
   796                                  error_invalid_data              EQU     13
   797                                  ;**** unused                    EQU     14
   798                                  error_invalid_drive             EQU     15
   799                                  error_current_directory         EQU     16
   800                                  error_not_same_device           EQU     17
   801                                  error_no_more_files             EQU     18
   802                                  
   803                                  country_not_found               EQU     error_file_not_found ; DOSSYM_V211.ASM
   804                                  alloc_not_enough_memory         EQU     error_not_enough_memory
   805                                  alloc_arena_trashed             EQU     error_arena_trashed
   806                                  
   807                                  close_invalid_handle            EQU     error_invalid_handle
   808                                  close_invalid_function          EQU     error_invalid_function
   809                                  
   810                                  chdir_path_not_found            EQU     error_path_not_found
   811                                  
   812                                  chmod_path_not_found            EQU     error_path_not_found
   813                                  chmod_access_denied             EQU     error_access_denied
   814                                  chmod_invalid_function          EQU     error_invalid_function
   815                                  
   816                                  creat_access_denied             EQU     error_access_denied
   817                                  creat_path_not_found            EQU     error_path_not_found
   818                                  creat_too_many_open_files       EQU     error_too_many_open_files
   819                                  
   820                                  curdir_invalid_drive            EQU     error_invalid_drive
   821                                  
   822                                  dealloc_invalid_block           EQU     error_invalid_block
   823                                  dealloc_arena_trashed           EQU     error_arena_trashed
   824                                  
   825                                  dup_invalid_handle              EQU     error_invalid_handle
   826                                  dup_too_many_open_files         EQU     error_too_many_open_files
   827                                  
   828                                  dup2_invalid_handle             EQU     error_invalid_handle
   829                                  
   830                                  exec_invalid_function           EQU     error_invalid_function
   831                                  exec_bad_environment            EQU     error_bad_environment
   832                                  exec_bad_format                 EQU     error_bad_format
   833                                  exec_not_enough_memory          EQU     error_not_enough_memory
   834                                  exec_file_not_found             EQU     error_file_not_found
   835                                  
   836                                  filetimes_invalid_function      EQU     error_invalid_function
   837                                  filetimes_invalid_handle        EQU     error_invalid_handle
   838                                  
   839                                  findfirst_file_not_found        EQU     error_file_not_found
   840                                  findfirst_no_more_files         EQU     error_no_more_files
   841                                  findnext_no_more_files          EQU     error_no_more_files
   842                                  
   843                                  international_invalid_function  EQU     error_invalid_function
   844                                  
   845                                  ioctl_invalid_handle            EQU     error_invalid_handle
   846                                  ioctl_invalid_function          EQU     error_invalid_function
   847                                  ioctl_invalid_data              EQU     error_invalid_data
   848                                  
   849                                  lseek_invalid_handle            EQU     error_invalid_handle
   850                                  lseek_invalid_function          EQU     error_invalid_function
   851                                  
   852                                  mkdir_path_not_found            EQU     error_path_not_found
   853                                  mkdir_access_denied             EQU     error_access_denied
   854                                  
   855                                  open_invalid_access             EQU     error_invalid_access
   856                                  open_file_not_found             EQU     error_file_not_found
   857                                  open_access_denied              EQU     error_access_denied
   858                                  open_too_many_open_files        EQU     error_too_many_open_files
   859                                  
   860                                  read_invalid_handle             EQU     error_invalid_handle
   861                                  read_access_denied              EQU     error_access_denied
   862                                  
   863                                  rename_file_not_found           EQU     error_file_not_found
   864                                  rename_not_same_device          EQU     error_not_same_device
   865                                  rename_access_denied            EQU     error_access_denied
   866                                  
   867                                  rmdir_path_not_found            EQU     error_path_not_found
   868                                  rmdir_access_denied             EQU     error_access_denied
   869                                  rmdir_current_directory         EQU     error_current_directory
   870                                  
   871                                  setblock_invalid_block          EQU     error_invalid_block
   872                                  setblock_arena_trashed          EQU     error_arena_trashed
   873                                  setblock_not_enough_memory      EQU     error_not_enough_memory
   874                                  setblock_invalid_function       EQU     error_invalid_function
   875                                  
   876                                  unlink_file_not_found           EQU     error_file_not_found
   877                                  unlink_access_denied            EQU     error_access_denied
   878                                  
   879                                  write_invalid_handle            EQU     error_invalid_handle
   880                                  write_access_denied             EQU     error_access_denied
   881                                  
   882                                  ; <system call definitions>
   883                                  
   884                                  ABORT                           EQU 0   ;  0      0
   885                                  STD_CON_INPUT                   EQU 1   ;  1      1
   886                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
   887                                  STD_AUX_INPUT                   EQU 3   ;  3      3
   888                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
   889                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
   890                                  RAW_CON_IO                      EQU 6   ;  6      6
   891                                  RAW_CON_INPUT                   EQU 7   ;  7      7
   892                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
   893                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
   894                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
   895                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
   896                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
   897                                  DISK_RESET                      EQU 13  ; 13      D
   898                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
   899                                  FCB_OPEN                        EQU 15  ; 15      F
   900                                  FCB_CLOSE                       EQU 16  ; 16     10
   901                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
   902                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
   903                                  FCB_DELETE                      EQU 19  ; 19     13
   904                                  FCB_SEQ_READ                    EQU 20  ; 20     14
   905                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
   906                                  FCB_CREATE                      EQU 22  ; 22     16
   907                                  FCB_RENAME                      EQU 23  ; 23     17
   908                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
   909                                  SET_DMA                         EQU 26  ; 26     1A
   910                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   911                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   912                                  ;                                                                          ;
   913                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
   914                                  ;                                                                          ;
   915                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   916                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   917                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
   918                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
   919                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
   920                                  GET_FCB_POSITION                EQU 36  ; 36     24
   921                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
   922                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
   923                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
   924                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
   925                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
   926                                  GET_DATE                        EQU 42  ; 42     2A
   927                                  SET_DATE                        EQU 43  ; 43     2B
   928                                  GET_TIME                        EQU 44  ; 44     2C
   929                                  SET_TIME                        EQU 45  ; 45     2D
   930                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
   931                                  ; Extended functionality group
   932                                  GET_DMA                         EQU 47  ; 47     2F
   933                                  GET_VERSION                     EQU 48  ; 48     30
   934                                  KEEP_PROCESS                    EQU 49  ; 49     31
   935                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   936                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   937                                  ;                                                                          ;
   938                                  GET_DPB                         EQU 50  ; 50     32
   939                                  ;                                                                          ;
   940                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   941                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   942                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
   943                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
   944                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
   945                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
   946                                  CHAR_OPER                       EQU 55  ; 55     37
   947                                  INTERNATIONAL                   EQU 56  ; 56     38
   948                                  ; XENIX CALLS
   949                                  ;   Directory Group
   950                                  MKDIR                           EQU 57  ; 57     39
   951                                  RMDIR                           EQU 58  ; 58     3A
   952                                  CHDIR                           EQU 59  ; 59     3B
   953                                  ;   File Group
   954                                  CREAT                           EQU 60  ; 60     3C
   955                                  OPEN                            EQU 61  ; 61     3D
   956                                  CLOSE                           EQU 62  ; 62     3E
   957                                  READ                            EQU 63  ; 63     3F
   958                                  WRITE                           EQU 64  ; 64     40
   959                                  UNLINK                          EQU 65  ; 65     41
   960                                  LSEEK                           EQU 66  ; 66     42
   961                                  CHMOD                           EQU 67  ; 67     43
   962                                  IOCTL                           EQU 68  ; 68     44
   963                                  XDUP                            EQU 69  ; 69     45
   964                                  XDUP2                           EQU 70  ; 70     46
   965                                  CURRENT_DIR                     EQU 71  ; 71     47
   966                                  ;    Memory Group
   967                                  ALLOC                           EQU 72  ; 72     48
   968                                  DEALLOC                         EQU 73  ; 73     49
   969                                  SETBLOCK                        EQU 74  ; 74     4A
   970                                  ;    Process Group
   971                                  EXEC                            EQU 75  ; 75     4B
   972                                  EXIT                            EQU 76  ; 76     4C
   973                                  _WAIT				EQU 77  ; 77     4D
   974                                  FIND_FIRST                      EQU 78  ; 78     4E
   975                                  ;   Special Group
   976                                  FIND_NEXT                       EQU 79  ; 79     4F
   977                                  ; SPECIAL SYSTEM GROUP
   978                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   979                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   980                                  ;                                                                          ;
   981                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
   982                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
   983                                  GET_IN_VARS                     EQU 82  ; 82     52
   984                                  SETDPB                          EQU 83  ; 83     53
   985                                  ;                                                                          ;
   986                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   987                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   988                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
   989                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   990                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   991                                  ;                                                                          ;
   992                                  DUP_PDB                         EQU 85  ; 85     55
   993                                  ;                                                                          ;
   994                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   995                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   996                                  RENAME                          EQU 86  ; 86     56
   997                                  FILE_TIMES                      EQU 87  ; 87     57
   998                                  
   999                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1000                                  ;OEM_C1				EQU 249 ; 249    F9
  1001                                  ;OEM_C2				EQU 250 ; 250    FA
  1002                                  ;OEM_C3				EQU 251 ; 251    FB
  1003                                  ;OEM_C4				EQU 252 ; 252    FC
  1004                                  ;OEM_C5				EQU 253 ; 253    FD
  1005                                  ;OEM_C6				EQU 254 ; 254    FE
  1006                                  ;OEM_C7				EQU 255 ; 255    FF
  1007                                  
  1008                                  ;============================================================================
  1009                                  ; DEVSYM.ASM
  1010                                  ;============================================================================
  1011                                  
  1012                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1013                                  ;PAGE
  1014                                  
  1015                                  ; The device table list has the form:
  1016                                  struc	SYSDEV
  1017 00000000 <res 00000004>          .NEXT:		resd 1		;Pointer to next device header
  1018 00000004 <res 00000002>          .ATT:		resw 1		;Attributes of the device
  1019 00000006 <res 00000002>          .STRAT:		resw 1		;Strategy entry point
  1020 00000008 <res 00000002>          .INT:		resw 1		;Interrupt entry point
  1021 0000000A <res 00000008>          .NAME:		resb 8		;Name of device (only first byte used for block)
  1022                                  .size:
  1023                                  endstruc
  1024                                  
  1025                                  ;Attribute bit masks
  1026                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1027                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1028                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1029                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1030                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1031                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1032                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1033                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1034                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1035                                  
  1036                                  ;Static Reguest Header
  1037                                  struc	SRHEAD
  1038 00000000 <res 00000001>          .REQLEN:	resb 1		;Length in bytes of request block
  1039 00000001 <res 00000001>          .REQUNIT:	resb 1		;Device unit number
  1040 00000002 <res 00000001>          .REQFUNC:	resb 1		;Type of request
  1041 00000003 <res 00000002>          .REQSTAT:	resw 1		;Status Word
  1042 00000005 <res 00000008>                  	resb 8		;Reserved for queue links
  1043                                  .size:
  1044                                  endstruc
  1045                                  
  1046                                  ;Status word masks
  1047                                  STERR   EQU     8000H           ;Bit 15 - Error
  1048                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1049                                  STDON   EQU     0100H           ;Bit 8 - Done
  1050                                  STECODE EQU     00FFH           ;Error code
  1051                                  WRECODE EQU     0
  1052                                  
  1053                                  ;Function codes
  1054                                  DEVINIT EQU     0               ;Initialization
  1055                                  DINITHL EQU     26              ;Size of init header
  1056                                  DEVMDCH EQU     1               ;Media check
  1057                                  DMEDHL  EQU     15              ;Size of media check header
  1058                                  DEVBPB  EQU     2               ;Get BPB
  1059                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1060                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1061                                  DEVRD   EQU     4               ;Read
  1062                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1063                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1064                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1065                                  DEVIST  EQU     6               ;Input status
  1066                                  DSTATHL EQU     13              ;Size of status header
  1067                                  DEVIFL  EQU     7               ;Input flush
  1068                                  DFLSHL  EQU     15              ;Size of flush header
  1069                                  DEVWRT  EQU     8               ;Write
  1070                                  DEVWRTV EQU     9               ;Write with verify
  1071                                  DEVOST  EQU     10              ;Output status
  1072                                  DEVOFL  EQU     11              ;Output flush
  1073                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1074                                  
  1075                                  ;=============================================================================
  1076                                  ; COMSW.ASM
  1077                                  ;=============================================================================
  1078                                  
  1079                                  ;; Use the following booleans to set assembly flags
  1080                                  ;FALSE   EQU	0
  1081                                  ;TRUE    EQU	~FALSE	; NOT FALSE
  1082                                  
  1083                                  ;IBMVER  EQU	TRUE  	; Switch to build IBM version of Command
  1084                                  ;IBM     EQU	IBMVER
  1085                                  ;MSVER   EQU	FALSE	; Switch to build MS-DOS version of Command
  1086                                  
  1087                                  ;HIGHMEM EQU	FALSE   ; Run resident part above transient (high memory)
  1088                                  ;KANJI   EQU	FALSE	; Support for dual byte Microsoft KANJI standard
  1089                                  ;IBMJAPAN EQU	FALSE   ; MUST BE TRUE (along with IBM and KANJI)
  1090                                  
  1091                                  ;=============================================================================
  1092                                  ; COMEQU.ASM
  1093                                  ;=============================================================================
  1094                                  
  1095                                  ; COMMAND EQUs which are not switch dependant
  1096                                  
  1097                                  ;IFDEF	IBM
  1098                                  ;	INCLUDE IFEQU.ASM
  1099                                  ;ENDIF
  1100                                  
  1101                                  SYM	EQU	">"
  1102                                  
  1103                                  LINPERPAG	EQU     23
  1104                                  NORMPERLIN	EQU     1
  1105                                  WIDEPERLIN	EQU     5
  1106                                  COMBUFLEN	EQU     128     ; Length of commmand buffer
  1107                                  
  1108                                  DRVCHAR		EQU     ":"
  1109                                  
  1110                                  FCB	EQU	5CH
  1111                                  
  1112                                  struc VARSTRUC
  1113 00000000 <res 00000001>          .ISDIR:	resb 1
  1114 00000001 <res 00000001>          .SIZ:	resb 1
  1115 00000002 <res 00000002>          .TTAIL:	resw 1
  1116 00000004 <res 00000001>          .INFO:	resb 1
  1117 00000005 <res 00000054>          .BUF:	resb DIRSTRLEN + 20
  1118                                  .size:
  1119                                  endstruc
  1120                                  
  1121                                  WSWITCH EQU     1               ; Wide display during DIR
  1122                                  PSWITCH EQU     2               ; Pause (or Page) mode during DIR
  1123                                  ASWITCH EQU     4               ; ASCII mode during COPY
  1124                                  BSWITCH EQU     8               ; Binary mode during COPY
  1125                                  VSWITCH EQU     10H             ; Verify switch
  1126                                  GOTSWITCH EQU   8000H		; Meta switch set if switch char encountered
  1127                                  
  1128                                  ; ----------------------------------------------------------------------------
  1129                                  ; IFEQU.ASM
  1130                                  ; ----------------------------------------------------------------------------
  1131                                  
  1132                                  ; COMMAND EQUs which are switch dependant
  1133                                  
  1134                                  ;IF1
  1135                                  ;    IF	IBM
  1136                                  ;	%OUT IBM version
  1137                                  ;    ELSE
  1138                                  ;	%OUT Normal version
  1139                                  ;    ENDIF
  1140                                  ;
  1141                                  ;    IF	HIGHMEM
  1142                                  ;	%OUT Highmem version
  1143                                  ;    ENDIF
  1144                                  ;
  1145                                  ;    IF	KANJI
  1146                                  ;	%OUT Kanji version
  1147                                  ;    ENDIF
  1148                                  ;ENDIF
  1149                                  
  1150                                  ;=============================================================================
  1151                                  ; COMMAND.ASM
  1152                                  ;=============================================================================
  1153                                  
  1154                                  ;CODERES SEGMENT PUBLIC
  1155                                  ;CODERES ENDS
  1156                                  
  1157                                  ;DATARES SEGMENT PUBLIC BYTE
  1158                                  ;        EXTRN   COMBAD:BYTE,NEEDCOM:BYTE,DRVMSG:BYTE
  1159                                  ;        EXTRN   DEFMSG:BYTE,PROMPT:BYTE,EXECEMES:BYTE,EXEBAD:BYTE
  1160                                  ;        EXTRN   TOOBIG:BYTE,NOCOM:BYTE,RBADNAM:BYTE,INT_2E_RET:DWORD
  1161                                  ;        EXTRN   NOHANDMES:BYTE,BMEMMES:BYTE,HALTMES:BYTE,FRETMES:BYTE
  1162                                  ;        EXTRN   PARENT:WORD,HANDLE01:WORD,LOADING:BYTE,BATCH:WORD
  1163                                  ;        EXTRN   TRNSEG:WORD,COMDRV:BYTE,MEMSIZ:WORD,SUM:WORD,EXTCOM:BYTE
  1164                                  ;        EXTRN   IO_SAVE:WORD,PERMCOM:BYTE,SINGLECOM:WORD,VERVAL:WORD
  1165                                  ;        EXTRN   PIPEFLAG:BYTE,SAVE_PDB:WORD,COMSPEC:BYTE,TRANS:WORD
  1166                                  ;        EXTRN   TRANVARS:BYTE,LTPA:WORD,RSWITCHAR:BYTE,RDIRCHAR:BYTE
  1167                                  ;        EXTRN   RETCODE:WORD,FORFLAG:BYTE
  1168                                  ;
  1169                                  ;        IF      IBMVER
  1170                                  ;        EXTRN   SYS_CALL:DWORD,ZEXEC:WORD,EXESEG:WORD,EXESUM:WORD
  1171                                  ;        EXTRN   USER_SS:WORD,USER_SP:WORD
  1172                                  ;        ENDIF
  1173                                  ;
  1174                                  ;DATARES ENDS
  1175                                  
  1176                                  ;ENVIRONMENT SEGMENT PUBLIC PARA        ; Default COMMAND environment
  1177                                  ;ENVIRONMENT ENDS
  1178                                  
  1179                                  ;INIT    SEGMENT PUBLIC PARA
  1180                                  ;        EXTRN   CONPROC:NEAR
  1181                                  ;INIT    ENDS
  1182                                  
  1183                                  ;TAIL    SEGMENT PUBLIC PARA
  1184                                  ;TAIL    ENDS
  1185                                  
  1186                                  ;TRANCODE        SEGMENT PUBLIC PARA
  1187                                  ;TRANCODE        ENDS
  1188                                  
  1189                                  ;TRANDATA        SEGMENT PUBLIC BYTE
  1190                                  ;        EXTRN   TRANDATAEND:BYTE
  1191                                  ;TRANDATA        ENDS
  1192                                  
  1193                                  ;TRANSPACE       SEGMENT PUBLIC BYTE
  1194                                  ;        EXTRN   TRANSPACEEND:BYTE,HEADCALL:DWORD
  1195                                  ;TRANSPACE       ENDS
  1196                                  
  1197                                  ;TRANTAIL        SEGMENT PUBLIC PARA
  1198                                  ;TRANTAIL        ENDS
  1199                                  
  1200                                  ;ZEXEC_CODE      SEGMENT PUBLIC PARA
  1201                                  ;ZEXEC_CODE      ENDS
  1202                                  
  1203                                  ;ZEXEC_DATA      SEGMENT PUBLIC BYTE
  1204                                  ;ZEXEC_DATA      ENDS
  1205                                  
  1206                                  ;RESGROUP        GROUP   CODERES,DATARES,ENVIRONMENT,INIT,TAIL
  1207                                  ;TRANGROUP       GROUP   TRANCODE,TRANDATA,TRANSPACE,TRANTAIL
  1208                                  ;EGROUP          GROUP   ZEXEC_CODE,ZEXEC_DATA
  1209                                  
  1210                                  ;ENVIRONMENT SEGMENT PUBLIC PARA	; Default COMMAND environment
  1211                                  
  1212                                  ;	PUBLIC  ECOMSPEC,ENVIREND,PATHSTRING
  1213                                  
  1214                                  ;        ORG     0
  1215                                  ;ENVARENA DB     10H DUP (?)     ; Pad for mem arena
  1216                                  ;PATHSTRING DB   "PATH="
  1217                                  ;USERPATH LABEL  BYTE
  1218                                  
  1219                                  ;        DB      0               ; Null path
  1220                                  ;        DB      "COMSPEC="
  1221                                  ;ECOMSPEC DB     "/COMMAND.COM"
  1222                                  ;        DB      134 DUP (0)
  1223                                  
  1224                                  ;ENVIREND        LABEL   BYTE
  1225                                  
  1226                                  ;ENVIRONSIZ EQU  $-PATHSTRING
  1227                                  ;ENVIRONSIZ2 EQU $-ECOMSPEC
  1228                                  ;ENVIRONMENT ENDS
  1229                                  
  1230                                  ; ----------------------------------------------------------------------------
  1231                                  ; START OF RESIDENT PORTION
  1232                                  ; ----------------------------------------------------------------------------
  1233                                  ; SEGMENT - CODERES
  1234                                  ; ----------------------------------------------------------------------------
  1235                                  
  1236                                  	;[ORG	0]
  1237                                  
  1238                                  ;ZERO	EQU	$
  1239                                  
  1240                                  	[ORG 100H]
  1241                                  
  1242                                  PROGSTART:
  1243 00000000 E96D0A                  	JMP	CONPROC
  1244                                  
  1245 00000003 00<rept>                        TIMES	128-($-PROGSTART) DB 0
  1246                                  
  1247                                  RSTACK	EQU	$ ; EQU 180H
  1248                                  
  1249                                  ; offset 180h
  1250                                  
  1251                                  ;IF IBMVER
  1252                                  ;SYSCALL:
  1253                                  ;        CMP     AH,EXEC
  1254                                  ;        JZ      short do_exec
  1255                                  ;        JMP     FAR [CS:SYS_CALL]
  1256                                  ;
  1257                                  ;do_exec:
  1258                                  ;        PUSH    ES
  1259                                  ;        PUSH    DS
  1260                                  ;        PUSH    BP
  1261                                  ;        PUSH    DI
  1262                                  ;        PUSH    SI
  1263                                  ;        PUSH    DX
  1264                                  ;        PUSH    CX
  1265                                  ;        PUSH    BX
  1266                                  ;        PUSH    AX
  1267                                  ;        MOV     [CS:user_ss],SS
  1268                                  ;        MOV     [CS:user_sp],SP
  1269                                  ;;
  1270                                  ;; are we running on RSTACK already?
  1271                                  ;;
  1272                                  ;        PUSH    CS
  1273                                  ;        POP     BX              ; BX <- CS
  1274                                  ;        PUSH    SS
  1275                                  ;        POP     AX              ; AX <- SS
  1276                                  ;        CMP     AX,BX           ; IF AX == BX then no stack switch!
  1277                                  ;        JZ      short Get_mem
  1278                                  ;        MOV     SS,BX
  1279                                  ;;ASSUME  SS:RESGROUP
  1280                                  ;	;MOV	SP,OFFSET RESGROUP:RSTACK
  1281                                  ;	MOV	SP,RSTACK
  1282                                  ;
  1283                                  ;Get_mem:
  1284                                  ;        MOV     BX,0FFFFH       ; allocate all of memory
  1285                                  ;        MOV     AH,ALLOC
  1286                                  ;        INT     int_command
  1287                                  ;        ;MOV     AX,OFFSET EGROUP:ZEXECDATAEND + 15
  1288                                  ;        MOV     AX,ZEXECDATAEND + 15
  1289                                  ;	MOV     CL,4
  1290                                  ;        SHR     AX,CL
  1291                                  ;        MOV     CX,AX		; Save in CX
  1292                                  ;        CMP     BX,AX		; enough for EXEC?
  1293                                  ;        JB      short EXECMER	; nope... cry
  1294                                  ;        MOV     AH,ALLOC
  1295                                  ;        INT     int_command
  1296                                  ;        JC	short EXECMER	; Memory arenas probably trashed
  1297                                  ;        ADD     BX,AX
  1298                                  ;        MOV     [SS:MEMSIZ],BX
  1299                                  ;        SUB     BX,CX
  1300                                  ;        MOV     [SS:EXESEG],BX	; exec
  1301                                  ;        MOV     ES,AX
  1302                                  ;        MOV     AH,DEALLOC
  1303                                  ;        INT     int_command
  1304                                  ;        PUSH    CS
  1305                                  ;        POP     DS
  1306                                  ;;ASSUME  DS:RESGROUP
  1307                                  ;        CALL    EXECHK
  1308                                  ;        CMP     DX,[EXESUM]
  1309                                  ;        JZ      short HAVEXEC	; EXEC OK
  1310                                  ;        ;MOV     DX,OFFSET RESGROUP:COMSPEC
  1311                                  ;        ;MOV     AX,OPEN SHL 8
  1312                                  ;        MOV     DX,COMSPEC
  1313                                  ;        MOV     AX,OPEN*256
  1314                                  ;        INT     int_command	; Open COMMAND.COM
  1315                                  ;        JC      short EXECMER
  1316                                  ;        MOV     BX,AX           ; Handle
  1317                                  ;        ;MOV     DX,OFFSET RESGROUP:TRANSTART
  1318                                  ;        MOV     DX,TRANSTART
  1319                                  ;	;ADD     DX,OFFSET TRANGROUP:EXECSTART - 100H
  1320                                  ;	ADD     DX,EXECSTART - 100H
  1321                                  ;        XOR     CX,CX           ; Seek loc
  1322                                  ;        ;MOV     AX,LSEEK SHL 8
  1323                                  ;        MOV     AX,LSEEK*256
  1324                                  ;        INT     int_command
  1325                                  ;        ;MOV     CX,OFFSET EGROUP:ZEXECCODEEND
  1326                                  ;        MOV     CX,EGROUP+ZEXECCODEEND
  1327                                  ;        MOV     DS,[EXESEG]
  1328                                  ;;ASSUME  DS:NOTHING
  1329                                  ;        MOV     AH,READ
  1330                                  ;        INT     int_command
  1331                                  ;        PUSH    AX
  1332                                  ;        MOV     AH,CLOSE
  1333                                  ;        INT     int_command	; Close COMMAND.COM
  1334                                  ;        POP     CX
  1335                                  ;	;CMP     CX,OFFSET EGROUP:ZEXECCODEEND
  1336                                  ;	 CMP     CX,EGROUP+ZEXECCODEEND
  1337                                  ;        JNZ     short EXECMER	; Size matched
  1338                                  ;
  1339                                  ;        CALL    EXECHK
  1340                                  ;        CMP     DX,[SS:EXESUM]
  1341                                  ;        JNZ     short EXECMER
  1342                                  ;HAVEXEC:
  1343                                  ;        MOV     byte [SS:LOADING],0 	; Flag to DSKERR
  1344                                  ;        CALL    FAR [SS:ZEXEC]
  1345                                  ;        JMP     SHORT EXECRET
  1346                                  ;execmer:
  1347                                  ;        LDS	SI,[user_Sp]
  1348                                  ;        MOV	word [SI+user_AX],exec_not_enough_memory
  1349                                  ;        PUSH	word [SI+user_F]
  1350                                  ;        POPF
  1351                                  ;        STC
  1352                                  ;        PUSHF
  1353                                  ;        POP     word [SI+user_F]
  1354                                  ;execret:
  1355                                  ;        MOV     SS,[SS:user_SS]
  1356                                  ;;ASSUME  SS:NOTHING
  1357                                  ;        MOV     SP,[CS:user_SP]
  1358                                  ;        POP     AX              ; PUSH    ES
  1359                                  ;        POP     BX              ; PUSH    DS
  1360                                  ;        POP     CX              ; PUSH    BP
  1361                                  ;        POP     DX              ; PUSH    DI
  1362                                  ;        POP     SI              ; PUSH    SI
  1363                                  ;        POP     DI              ; PUSH    DX
  1364                                  ;        POP     BP              ; PUSH    CX
  1365                                  ;        POP     DS              ; PUSH    BX
  1366                                  ;        POP     ES              ; PUSH    AX
  1367                                  ;        IRET
  1368                                  ;
  1369                                  ;EXECHK:
  1370                                  ;;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  1371                                  ;        PUSH    DS
  1372                                  ;        MOV     DS,[CS:EXESEG]
  1373                                  ;        ;MOV     CX,OFFSET EGROUP:ZEXECCODEEND
  1374                                  ;        MOV     CX,EGROUP+ZEXECCODEEND
  1375                                  ;	 XOR     SI,SI
  1376                                  ;        JMP     CHECK_SUM
  1377                                  ;ENDIF
  1378                                  
  1379                                  EXEC_ERR:                       ; Select the correct error message
  1380                                          ;MOV     DX,OFFSET RESGROUP:RBADNAM
  1381 00000080 BA[1E07]                        MOV     DX,RBADNAM
  1382 00000083 83F802                          CMP     AX,exec_file_not_found
  1383 00000086 7418                            JZ      short GOTEXECEMES
  1384 00000088 83F805                          CMP     AX,error_access_denied
  1385 0000008B 7413                            JZ      short GOTEXECEMES
  1386                                          ;MOV     DX,OFFSET RESGROUP:TOOBIG
  1387 0000008D BA[A006]                        MOV     DX,TOOBIG
  1388 00000090 83F808                          CMP     AX,exec_not_enough_memory
  1389 00000093 740B                            JZ      short GOTEXECEMES
  1390                                          ;MOV     DX,OFFSET RESGROUP:EXEBAD
  1391 00000095 BA[9606]                        MOV     DX,EXEBAD
  1392 00000098 83F80B                          CMP     AX,exec_bad_format
  1393 0000009B 7403                            JZ      short GOTEXECEMES
  1394                                          ;MOV     DX,OFFSET RESGROUP:EXECEMES
  1395 0000009D BA[8906]                        MOV     DX,EXECEMES
  1396                                  GOTEXECEMES:
  1397 000000A0 0E                              PUSH    CS
  1398 000000A1 1F                              POP     DS
  1399 000000A2 E80F04                          CALL    RPRINT
  1400 000000A5 EB13                            JMP     SHORT NOEXEC
  1401                                  
  1402                                  EXT_EXEC:
  1403                                  ;
  1404                                  ; we are now running in free space.  anything we do from here
  1405                                  ; on may get trashed.  Move the stack (also in free space) to
  1406                                  ; allocated space because since EXEC restores the stack,
  1407                                  ; somebody may trash what is on the stack.
  1408                                  ;
  1409 000000A7 8CC9                            MOV     CX,CS
  1410 000000A9 8ED1                            MOV     SS,CX
  1411                                          ;MOV     SP,OFFSET RESGROUP:RSTACK
  1412 000000AB BC[8000]                        MOV     SP,RSTACK
  1413                                  ;
  1414                                  ; Oops!! We have to make sure that the EXEC code doesn't blop a newstack!
  1415                                  ;
  1416                                  ;
  1417 000000AE CD21                            INT     int_command     ; Do the EXEC
  1418 000000B0 72CE                            JC      short EXEC_ERR	; EXEC failed
  1419                                  EXEC_WAIT:
  1420 000000B2 B44D                            MOV     AH,_WAIT
  1421 000000B4 CD21                            INT     int_command     ; Get the return code
  1422 000000B6 2EA3[6D07]                      MOV     [CS:RETCODE],AX
  1423                                  NOEXEC:
  1424 000000BA E9CD00                          JMP     LODCOM
  1425                                  
  1426                                  CONTC:
  1427 000000BD FB                              STI
  1428 000000BE 8CC8                            MOV     AX,CS
  1429 000000C0 8ED8                            MOV     DS,AX
  1430                                  ;ASSUME  DS:RESGROUP
  1431 000000C2 B40D                            MOV     AH,DISK_RESET
  1432 000000C4 CD21                            INT     int_command     ; Reset disks in case files were open
  1433 000000C6 F706[3407]FFFF                  TEST    word [BATCH],-1
  1434 000000CC 7403                            JZ	short CONTCTERM
  1435 000000CE E9A102                          JMP     ASKEND          ; See if user wants to terminate batch
  1436                                  CONTCTERM:
  1437 000000D1 31ED                            XOR     BP,BP           ; Indicate no read
  1438 000000D3 C606[7807]00                    MOV     byte [FORFLAG],0     ; Turn off for processing
  1439 000000D8 C606[7808]00                    MOV     byte [PIPEFLAG],0    ; Turn off any pipe
  1440 000000DD 833E[7407]00                    CMP     word [SINGLECOM],0   ; See if we need to set SINGLECOM
  1441 000000E2 7406                            JZ      short NOSETSING
  1442 000000E4 C706[7407]FFFF                  MOV     word [SINGLECOM],-1  ; Cause termination on pipe, batch, for
  1443                                  NOSETSING:
  1444 000000EA 803E[6C07]00                    CMP     byte [EXTCOM],0
  1445 000000EF 7503                            JNZ     short DODAB	; Internal ^C
  1446 000000F1 E9DB00                          JMP     LODCOM1
  1447                                  DODAB:
  1448 000000F4 F9                              STC			; Tell DOS to abort
  1449 000000F5 CB                      	RETF			; Leave flags on stack
  1450                                  
  1451                                  BADMEMERR:			; Allocation error loading transient
  1452                                          ;MOV     DX,OFFSET RESGROUP:BMEMMES
  1453 000000F6 BA[F006]                	MOV     DX,BMEMMES
  1454                                  FATALC:
  1455 000000F9 0E                              PUSH    CS
  1456 000000FA 1F                              POP     DS
  1457 000000FB E8B603                          CALL    RPRINT
  1458 000000FE 803E[7307]00                    CMP     byte [PERMCOM],0
  1459 00000103 740F                            JZ      short FATALRET
  1460 00000105 833E[7407]00                    CMP     word [SINGLECOM],0 ; If PERMCOM and SINGLECOM
  1461 0000010A 7508                            JNZ     short FATALRET	; Must take INT_2E exit
  1462                                          ;MOV     DX,OFFSET RESGROUP:HALTMES
  1463 0000010C BA[F606]                        MOV     DX,HALTMES
  1464 0000010F E8A203                  	CALL    RPRINT
  1465                                  STALL:
  1466 00000112 EBFE                            JMP     STALL		; Crash the system nicely
  1467                                  
  1468                                  FATALRET:
  1469                                  	;MOV     DX,OFFSET RESGROUP:FRETMES
  1470 00000114 BA[0C07]                	MOV     DX,FRETMES
  1471 00000117 E89A03                          CALL    RPRINT
  1472                                  FATALRET2:
  1473 0000011A 803E[7307]00                    CMP     byte [PERMCOM],0 ; If we get here and PERMCOM,
  1474 0000011F 750B                            JNZ	short RET_2E	; must be INT_2E
  1475                                  ;IF IBM
  1476                                  ;        LDS     DX,[SYS_CALL]
  1477                                  ;ASSUME  DS:NOTHING
  1478                                  ;       ;MOV     AX,(SET_INTERRUPT_VECTOR SHL 8) + INT_COMMAND
  1479                                  ;	MOV	AX,(SET_INTERRUPT_VECTOR*256)+INT_COMMAND
  1480                                  ;       INT     int_command
  1481                                  ;ENDIF
  1482                                  	; 30/04/2018
  1483                                          ;MOV     AX,[CS:PARENT]
  1484 00000121 A1[2D07]                        MOV	AX,[PARENT]
  1485                                  	;;MOV    [CS:PDB_Parent_PID],AX
  1486                                  	;MOV    [CS:PDB.PARENT_PID],AX
  1487 00000124 A31600                  	MOV	[PDB.PARENT_PID],AX
  1488 00000127 B8004C                          MOV     AX,EXIT*256	; Return to lower level
  1489 0000012A CD21                            INT     int_command
  1490                                  
  1491                                  RET_2E:
  1492 0000012C 0E                              PUSH    CS
  1493 0000012D 1F                              POP     DS
  1494                                  ;ASSUME  DS:RESGROUP,ES:NOTHING,SS:NOTHING
  1495 0000012E C706[7407]0000                  MOV     word [SINGLECOM],0 ; Turn off singlecom
  1496 00000134 8E06[B009]                      MOV     ES,[LTPA]
  1497 00000138 B449                            MOV     AH,DEALLOC
  1498 0000013A CD21                            INT     int_command 	; Free up space used by transient
  1499 0000013C 8B1E[2B07]                      MOV     BX,[SAVE_PDB]
  1500 00000140 B450                            MOV     AH,SET_CURRENT_PDB
  1501 00000142 CD21                            INT     int_command	; Current process is user
  1502 00000144 A1[6D07]                        MOV     AX,[RETCODE]
  1503 00000147 803E[6C07]00                    CMP     byte [EXTCOM],0
  1504 0000014C 7502                            JNZ     short GOTECODE
  1505 0000014E 31C0                            XOR     AX,AX           ; Internals always return 0
  1506                                  GOTECODE:
  1507 00000150 C606[6C07]01                    MOV     byte [EXTCOM],1	; Force external
  1508 00000155 FF2E[2707]                      JMP     FAR [INT_2E_RET] ;"IRET"
  1509                                  
  1510                                  INT_2E:                         ; Magic command executer
  1511                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  1512 00000159 2E8F06[2707]                    POP     WORD [CS:INT_2E_RET]
  1513 0000015E 2E8F06[2907]                    POP     WORD [CS:INT_2E_RET+2] ;Get return address
  1514 00000163 58                              POP     AX              ;Chuck flags
  1515 00000164 0E                              PUSH    CS
  1516 00000165 07                              POP     ES
  1517 00000166 BF8000                          MOV     DI,80H
  1518 00000169 B94000                          MOV     CX,64
  1519 0000016C F3A5                            REP     MOVSW
  1520 0000016E B451                            MOV     AH,GET_CURRENT_PDB
  1521 00000170 CD21                            INT     int_command	; Get user's header
  1522 00000172 2E891E[2B07]                    MOV     [CS:SAVE_PDB],BX
  1523 00000177 B450                            MOV     AH,SET_CURRENT_PDB
  1524 00000179 8CCB                            MOV     BX,CS
  1525 0000017B CD21                            INT     int_command	; Current process is me
  1526 0000017D 2EC706[7407]8100                MOV     word [CS:SINGLECOM],81H
  1527 00000184 2EC606[6C07]01                  MOV     byte [CS:EXTCOM],1 ; Make sure this case forced
  1528                                  
  1529                                  LODCOM:                         ; Termination handler
  1530 0000018A 2E803E[6C07]00                  CMP     byte [CS:EXTCOM],0
  1531 00000190 743D                            JZ      short LODCOM1	; If internal, memory already allocated
  1532                                  
  1533 00000192 BBFFFF                          MOV     BX,0FFFFH
  1534 00000195 B448                            MOV     AH,ALLOC
  1535 00000197 CD21                            INT     int_command
  1536                                          ;MOV     AX,OFFSET TRANGROUP:TRANSPACEEND + 15
  1537 00000199 B80530                          MOV	AX,TRANSPACEEND + 15
  1538 0000019C B104                    	MOV     CL,4
  1539 0000019E D3E8                            SHR     AX,CL
  1540                                  
  1541                                          ;IF	IBM
  1542                                          ;PUSH    AX
  1543                                          ;;MOV     AX,OFFSET EGROUP:ZEXECDATAEND + 15
  1544                                          ;MOV     AX,EGROUP+ZEXECDATAEND + 15
  1545                                          ;MOV     CL,4
  1546                                          ;SHR     AX,CL
  1547                                          ;POP     CX
  1548                                          ;ADD     AX,CX
  1549                                          ;ENDIF
  1550                                  
  1551 000001A0 83C020                          ADD     AX,20H
  1552 000001A3 39C3                            CMP     BX,AX           ; Is less than 512 byte buffer worth it?
  1553 000001A5 7303                            JNC	short MEMOK
  1554                                  BADMEMERRJ:
  1555 000001A7 E94CFF                          JMP	BADMEMERR	; Not enough memory
  1556                                  MEMOK:
  1557 000001AA B448                            MOV     AH,ALLOC
  1558 000001AC CD21                            INT     int_command
  1559 000001AE 72F7                            JC	short BADMEMERRJ ; Memory arenas probably trashed
  1560 000001B0 2EC606[6C07]00                  MOV     byte [CS:EXTCOM],0 ; Flag not to ALLOC again
  1561 000001B6 2EA3[B009]                      MOV     [CS:LTPA],AX	 ; New TPA is base just allocated
  1562 000001BA 01C3                            ADD     BX,AX
  1563 000001BC 2E891E[6807]                    MOV     [CS:MEMSIZ],BX
  1564                                  
  1565                                          ;MOV     AX,OFFSET TRANGROUP:TRANSPACEEND + 15
  1566 000001C1 B80530                          MOV     AX,TRANSPACEEND + 15
  1567 000001C4 B104                            MOV     CL,4
  1568 000001C6 D3E8                            SHR     AX,CL
  1569                                  
  1570                                          ;IF      IBM
  1571                                          ;PUSH    AX
  1572                                          ;;MOV     AX,OFFSET EGROUP:ZEXECDATAEND + 15
  1573                                          ;MOV     AX,EGROUP+ZEXECDATAEND + 15
  1574                                          ;MOV     CL,4
  1575                                          ;SHR     AX,CL
  1576                                          ;POP     CX
  1577                                          ;ADD     AX,CX
  1578                                          ;ENDIF
  1579                                  
  1580 000001C8 29C3                            SUB     BX,AX
  1581 000001CA 2E891E[6407]                    MOV     [CS:TRNSEG],BX	; Transient starts here
  1582                                  LODCOM1:
  1583 000001CF 8CC8                            MOV     AX,CS
  1584 000001D1 8ED0                            MOV     SS,AX
  1585                                  ;ASSUME  SS:RESGROUP
  1586                                          ;MOV     SP,OFFSET RESGROUP:RSTACK
  1587 000001D3 BC[8000]                        MOV     SP,RSTACK
  1588 000001D6 8ED8                    	MOV     DS,AX
  1589                                  ;ASSUME  DS:RESGROUP
  1590 000001D8 E87D00                          CALL    HEADFIX		; Make sure files closed stdin and stdout restored
  1591 000001DB 31ED                            XOR     BP,BP           ; Flag command ok
  1592 000001DD B8FFFF                          MOV     AX,-1
  1593 000001E0 8706[7607]                      XCHG    AX,[VERVAL]
  1594 000001E4 83F8FF                          CMP     AX,-1
  1595 000001E7 7404                            JZ      short NOSETVER
  1596 000001E9 B42E                            MOV     AH,SET_VERIFY_ON_WRITE  ; AL has correct value
  1597 000001EB CD21                            INT     int_command
  1598                                  NOSETVER:
  1599 000001ED 833E[7407]FF                    CMP     word [SINGLECOM],-1
  1600 000001F2 7503                            JNZ     short NOSNG
  1601 000001F4 E923FF                          JMP     FATALRET2       ; We have finished the single command
  1602                                  NOSNG:
  1603 000001F7 E85F01                          CALL    SETVECT
  1604                                  
  1605                                  ;IF IBMVER
  1606                                  ;       CALL    EXECHK          ; Check exe loader
  1607                                  ;       CMP     DX,[EXESUM]
  1608                                  ;       JNZ	short BOGUS_COM
  1609                                  ;ENDIF
  1610                                  
  1611 000001FA E84501                          CALL    CHKSUM          ; Check the transient
  1612 000001FD 3B16[6A07]                      CMP     DX,[SUM]
  1613 00000201 7416                            JZ      short HAVCOM	; Transient OK
  1614                                  BOGUS_COM:
  1615 00000203 C606[3307]01                    MOV     byte [LOADING],1 ; Flag DSKERR routine
  1616 00000208 E8E800                          CALL    LOADCOM
  1617                                  CHKSAME:
  1618                                  
  1619                                  ;IF IBMVER
  1620                                  ;       CALL    EXECHK
  1621                                  ;       CMP     DX,[EXESUM]
  1622                                  ;       JNZ     short ALSO_BOGUS
  1623                                  ;ENDIF
  1624                                  
  1625 0000020B E83401                          CALL    CHKSUM
  1626 0000020E 3B16[6A07]                      CMP     DX,[SUM]
  1627 00000212 7405                            JZ      short HAVCOM	; Same COMMAND
  1628                                  ALSO_BOGUS:
  1629 00000214 E82301                          CALL    WRONGCOM
  1630 00000217 EBF2                            JMP     SHORT CHKSAME
  1631                                  HAVCOM:
  1632                                          ;MOV     AX,CHAR_OPER SHL 8
  1633 00000219 B80037                          MOV	AX,CHAR_OPER*256
  1634 0000021C CD21                    	INT     int_command
  1635 0000021E 8816[B209]                      MOV     byte [RSWITCHAR],DL
  1636 00000222 80FA2F                          CMP     DL,'/'
  1637 00000225 7505                            JNZ     short USESLASH
  1638 00000227 C606[B309]5C                    MOV     byte [RDIRCHAR],'\'	; Select alt path separator
  1639                                  USESLASH:
  1640 0000022C C606[3307]00                    MOV     byte [LOADING],0	; Flag to DSKERR
  1641                                          ;MOV     SI,OFFSET RESGROUP:TRANVARS
  1642 00000231 BE[AC09]                        MOV     SI,TRANVARS
  1643                                          ;MOV     DI,OFFSET TRANGROUP:HEADCALL
  1644 00000234 BFD82C                          MOV     DI,HEADCALL
  1645 00000237 8E06[6407]                      MOV     ES,[TRNSEG]
  1646 0000023B FC                              CLD
  1647 0000023C B90800                          MOV     CX,8
  1648 0000023F F3A5                            REP     MOVSW                   ; Transfer INFO to transient
  1649 00000241 A1[6807]                        MOV     AX,[MEMSIZ]
  1650                                          ;MOV     WORD PTR DS:[PDB_block_len],AX  ; Adjust my own header
  1651 00000244 A30200                          MOV     [PDB.BLOCK_LEN],AX
  1652                                          ;JMP     DWORD PTR [TRANS]
  1653                                  
  1654 00000247 FF2E[6207]                      JMP     FAR [TRANS]
  1655                                  
  1656                                  ; Far call to REMCHECK for TRANSIENT
  1657                                  TREMCHECK:
  1658 0000024B E80100                          CALL    REMCHECK
  1659 0000024E CB                              RETF
  1660                                  
  1661                                  REMCHECK:
  1662                                  ;All registers preserved. Returns zero if media removable, NZ if fixed
  1663                                  ; AL is drive (0=DEF, 1=A,...)
  1664                                          ;IF      IBM
  1665                                          ;PUSH    AX
  1666                                          ;OR      AL,AL
  1667                                          ;JNZ     short GOTDRV2
  1668                                          ;MOV     AH,GET_DEFAULT_DRIVE
  1669                                          ;INT     int_command
  1670                                          ;INC     AL              ;A=1
  1671                                  ;GOTDRV2:
  1672                                          ;PUSH    BX
  1673                                          ;MOV     BL,AL
  1674                                          ;INT     11H             ;IBM EQUIP CALL
  1675                                          ;ROL     AL,1
  1676                                          ;ROL     AL,1
  1677                                          ;AND     AL,3
  1678                                          ;JNZ     short NOT_SINGLE
  1679                                          ;INC     AL
  1680                                  ;NOT_SINGLE:
  1681                                          ;INC     AL              ; AL is now MAX floppy #
  1682                                          ;CMP     BL,AL
  1683                                          ;POP     BX
  1684                                          ;JBE     short SETREM	; Is an IBM floppy and so is removable
  1685                                          ;OR      AL,AL           ; Know AL is non-zero
  1686                                          ;JMP     SHORT SETNREM
  1687                                  ;SETREM:
  1688                                          ;ELSE
  1689 0000024F 50                              PUSH    AX
  1690                                          ;ENDIF
  1691                                  
  1692 00000250 31C0                            XOR     AX,AX           ;Zero
  1693                                  
  1694                                          ;IF      IBM
  1695                                  ;SETNREM:
  1696                                          ;ENDIF
  1697                                  
  1698 00000252 58                              POP     AX
  1699 00000253 C3                              RETN
  1700                                  
  1701                                  ; Far call to HEADFIX for TRANSIENT
  1702                                  THEADFIX:
  1703 00000254 E80100                          CALL    HEADFIX
  1704 00000257 CB                      	RETF
  1705                                  
  1706                                  HEADFIX:
  1707 00000258 31DB                            XOR     BX,BX           ; Clean up header
  1708 0000025A 8B0E[7007]                      MOV     CX,[IO_SAVE]
  1709                                  	;MOV     DX,WORD PTR DS:[PDB_JFN_Table]
  1710 0000025E 8B161800                        MOV     DX,[PDB.JFN_TABLE]
  1711 00000262 38D1                            CMP     CL,DL
  1712 00000264 7408                            JZ      short CHK1	; Stdin matches
  1713 00000266 B43E                            MOV     AH,CLOSE
  1714 00000268 CD21                            INT     int_command
  1715                                          ;MOV     DS:[PDB_JFN_Table],CL ; Restore stdin
  1716 0000026A 880E1800                        MOV	[PDB.JFN_TABLE],CL ; Restore stdin
  1717                                  CHK1:
  1718 0000026E 43                              INC     BX
  1719 0000026F 38F5                            CMP     CH,DH           ; Stdout matches
  1720 00000271 7408                            JZ      short CHKOTHERHAND
  1721 00000273 B43E                            MOV     AH,CLOSE
  1722 00000275 CD21                            INT     int_command
  1723                                          ;MOV     DS:[PDB_JFN_Table+1],CH ; Restore stdout
  1724 00000277 882E1900                        MOV	[PDB.JFN_TABLE+1],CH
  1725                                  CHKOTHERHAND:
  1726 0000027B 83C304                          ADD     BX,4                    ; Skip 2,3,4
  1727 0000027E B90F00                          MOV     CX,FILPERPROC - 5       ; Already done 0,1,2,3,4
  1728                                  CLOSELOOP:
  1729 00000281 B43E                            MOV     AH,CLOSE
  1730 00000283 CD21                            INT     int_command
  1731 00000285 43                              INC     BX
  1732 00000286 E2F9                            LOOP    CLOSELOOP
  1733 00000288 C3                              RETN
  1734                                  
  1735                                  SAVHAND:
  1736                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  1737 00000289 1E                              PUSH    DS
  1738 0000028A 53                              PUSH    BX              ; Set stdin to sterr, stdout to stderr
  1739 0000028B 50                              PUSH    AX
  1740 0000028C B451                            MOV     AH,GET_CURRENT_PDB
  1741 0000028E CD21                            INT     int_command	; Get user's header
  1742 00000290 8EDB                            MOV     DS,BX
  1743                                          ;MOV     AX,WORD PTR DS:[PDB_JFN_Table]
  1744 00000292 A11800                          MOV	AX, [PDB.JFN_TABLE]
  1745 00000295 2EA3[3107]              	MOV     [CS:HANDLE01],AX	; Save user's stdin, stdout
  1746                                          ;MOV     AL,DS:[PDB_JFN_Table+2]
  1747 00000299 A01A00                          MOV     AL,[PDB.JFN_TABLE+2]
  1748 0000029C 88C4                    	MOV     AH,AL
  1749                                          ;MOV     WORD PTR DS:[PDB_JFN_Table],AX   ; Dup stderr
  1750 0000029E A31800                          MOV	[PDB.JFN_TABLE],AX
  1751 000002A1 58                              POP     AX
  1752 000002A2 5B                              POP     BX
  1753 000002A3 1F                              POP     DS
  1754 000002A4 C3                              RETN
  1755                                  
  1756                                  ;ASSUME  DS:RESGROUP
  1757                                  
  1758                                  GETCOMDSK2:
  1759 000002A5 E81C00                          CALL    GETCOMDSK
  1760 000002A8 E924FF                          JMP     LODCOM1         ; Memory already allocated
  1761                                  
  1762                                  RESTHAND:
  1763 000002AB 1E                              PUSH    DS
  1764 000002AC 53                              PUSH    BX              ; Restore stdin, stdout to user
  1765 000002AD 50                              PUSH    AX
  1766 000002AE B451                            MOV     AH,GET_CURRENT_PDB
  1767 000002B0 CD21                            INT     int_command             ; Point to user's header
  1768 000002B2 A1[3107]                        MOV     AX,[HANDLE01]
  1769 000002B5 8EDB                            MOV     DS,BX
  1770                                  ;ASSUME DS:NOTHING
  1771                                          ;MOV     WORD PTR DS:[PDB_JFN_Table],AX ; Stuff his old 0 and 1
  1772 000002B7 A31800                          MOV	[PDB.JFN_TABLE],AX
  1773 000002BA 58                              POP     AX
  1774 000002BB 5B                              POP     BX
  1775 000002BC 1F                              POP     DS
  1776 000002BD C3                              RETN
  1777                                  
  1778                                  ;ASSUME DS:RESGROUP,SS:RESGROUP
  1779                                  
  1780                                  HOPELESS:
  1781                                          ;MOV     DX,OFFSET RESGROUP:NOCOM
  1782 000002BE BA[BD06]                	MOV     DX,NOCOM
  1783 000002C1 E935FE                          JMP     FATALC
  1784                                  
  1785                                  GETCOMDSK:
  1786                                          ;MOV     DX,OFFSET RESGROUP:NEEDCOM
  1787 000002C4 BA[2E06]                	MOV     DX,NEEDCOM
  1788                                  GETCOMDSK3:
  1789 000002C7 A0[6607]                        MOV     AL,[COMDRV]
  1790 000002CA E882FF                          CALL    REMCHECK
  1791 000002CD 75EF                            JNZ     short HOPELESS	; Non-removable media
  1792 000002CF E8E201                          CALL    RPRINT
  1793                                          ;MOV     DX,OFFSET RESGROUP:DRVMSG
  1794 000002D2 BA[3E06]                        MOV     DX,DRVMSG
  1795 000002D5 803E[6607]00                    CMP     byte [COMDRV],0
  1796 000002DA 7503                            JNZ     short GETCOM1
  1797                                          ;MOV     DX,OFFSET RESGROUP:DEFMSG
  1798 000002DC BA[4606]                        MOV     DX,DEFMSG
  1799                                  GETCOM1:
  1800 000002DF E8D201                          CALL    RPRINT
  1801                                  	;MOV     DX,OFFSET RESGROUP:PROMPT
  1802 000002E2 BA[5306]                	MOV     DX,PROMPT
  1803 000002E5 E8CC01                          CALL    RPRINT
  1804                                          ;CALL    GetRawFlushedByte
  1805                                          ;RETN
  1806                                  
  1807                                  ; flush world and get raw input
  1808                                  GetRawFlushedByte:
  1809                                          ;MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) OR RAW_CON_INPUT
  1810 000002E8 B8070C                          MOV     AX,(STD_CON_INPUT_FLUSH*256) | RAW_CON_INPUT
  1811 000002EB CD21                            INT     int_command             ; Get char without testing or echo
  1812                                          ;MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) + 0
  1813 000002ED B8000C                          MOV     AX,STD_CON_INPUT_FLUSH*256
  1814 000002F0 CD21                            INT     int_command
  1815                                          ;return
  1816 000002F2 C3                      	RETN
  1817                                  
  1818                                  LOADCOM: 
  1819                                  				; Load in transient
  1820 000002F3 45                              INC     BP              ; Flag command read
  1821                                          ;MOV     DX,OFFSET RESGROUP:COMSPEC
  1822 000002F4 BA[3A07]                	MOV     DX,COMSPEC
  1823                                          ;MOV     AX,OPEN SHL 8
  1824 000002F7 B8003D                          MOV     AX,OPEN*256
  1825 000002FA CD21                            INT     int_command             ; Open COMMAND.COM
  1826 000002FC 7310                            JNC     short READCOM
  1827 000002FE 83F804                          CMP     AX,open_too_many_open_files
  1828 00000301 7506                            JNZ     short TRYDOOPEN
  1829                                          ;MOV     DX,OFFSET RESGROUP:NOHANDMES
  1830 00000303 BA[E006]                        MOV     DX,NOHANDMES
  1831 00000306 E9F0FD                          JMP     FATALC          ; Fatal, will never find a handle
  1832                                  
  1833                                  TRYDOOPEN:
  1834 00000309 E8B8FF                          CALL    GETCOMDSK
  1835 0000030C EBE5                            JMP     SHORT LOADCOM
  1836                                  
  1837                                  READCOM:
  1838 0000030E 89C3                    	MOV     BX,AX           ; Handle
  1839                                         ;MOV     DX,OFFSET RESGROUP:TRANSTART
  1840 00000310 BA[5E0D]                       	MOV     DX,TRANSTART ; COMTRANS
  1841 00000313 31C9                            XOR     CX,CX           ; Seek loc
  1842                                          ;MOV     AX,LSEEK SHL 8
  1843 00000315 B80042                          MOV     AX,LSEEK*256
  1844 00000318 CD21                            INT     int_command
  1845 0000031A 7210                            JC      short WRONGCOM1
  1846                                          ;MOV     CX,OFFSET TRANGROUP:TRANSPACEEND - 100H
  1847                                  	;MOV     CX,TRANSPACEEND - 100H
  1848 0000031C B9F62E                  	MOV	CX,COMLEN ; 30/04/2018
  1849                                  
  1850                                          ;IF	IBM
  1851                                          ;ADD     CX,15
  1852                                          ;AND     CX,0FFF0H
  1853                                          ;;ADD     CX,OFFSET EGROUP:ZEXECCODEEND
  1854                                          ;ADD     CX,EGROUP+ZEXECCODEEND
  1855                                          ;ENDIF
  1856                                  
  1857 0000031F 1E                              PUSH    DS
  1858 00000320 8E1E[6407]                      MOV     DS,[TRNSEG]
  1859                                  ;ASSUME  DS:NOTHING
  1860 00000324 BA0001                          MOV     DX,100H
  1861 00000327 B43F                            MOV     AH,READ
  1862 00000329 CD21                            INT     int_command
  1863 0000032B 1F                              POP     DS
  1864                                  ;ASSUME  DS:RESGROUP
  1865                                  WRONGCOM1:
  1866 0000032C 9C                              PUSHF
  1867 0000032D 50                              PUSH    AX
  1868 0000032E B43E                            MOV     AH,CLOSE
  1869 00000330 CD21                            INT     int_command             ; Close COMMAND.COM
  1870 00000332 58                              POP     AX
  1871 00000333 9D                              POPF
  1872 00000334 7204                            JC      short WRONGCOM	; If error on READ
  1873 00000336 39C8                            CMP     AX,CX
  1874 00000338 741E                            JZ      short RET10	; Size matched
  1875                                  WRONGCOM:
  1876                                          ;MOV     DX,OFFSET RESGROUP:COMBAD
  1877 0000033A BA[2106]                	MOV     DX,COMBAD
  1878 0000033D E887FF                          CALL    GETCOMDSK3
  1879 00000340 EBB1                            JMP     SHORT LOADCOM   ; Try again
  1880                                  
  1881                                  CHKSUM:                         ; Compute transient checksum
  1882 00000342 1E                              PUSH    DS
  1883 00000343 8E1E[6407]                      MOV     DS,[TRNSEG]
  1884 00000347 BE0001                          MOV     SI,100H
  1885                                          ;MOV     CX,OFFSET TRANGROUP:TRANDATAEND - 100H
  1886 0000034A B9402A                          MOV     CX,TRANDATAEND - 100H
  1887                                  
  1888                                  CHECK_SUM:
  1889 0000034D FC                              CLD
  1890 0000034E D1E9                            SHR     CX,1
  1891 00000350 31D2                            XOR     DX,DX
  1892                                  CHK:
  1893 00000352 AD                              LODSW
  1894 00000353 01C2                            ADD     DX,AX
  1895 00000355 E2FB                            LOOP    CHK
  1896 00000357 1F                              POP     DS
  1897                                  RET10:
  1898 00000358 C3                      	RETN
  1899                                  
  1900                                  SETVECT:                        ; Set useful vectors
  1901                                          ;MOV     DX,OFFSET RESGROUP:LODCOM
  1902 00000359 BA[8A01]                        MOV     DX,LODCOM
  1903                                          ;MOV     AX,(SET_INTERRUPT_VECTOR SHL 8) OR 22H
  1904 0000035C B82225                          MOV     AX,(SET_INTERRUPT_VECTOR*256) | 22H ; Set Terminate address
  1905 0000035F CD21                            INT     int_command
  1906                                          ;MOV     DX,OFFSET RESGROUP:CONTC
  1907 00000361 BA[BD00]                        MOV     DX,CONTC
  1908 00000364 B82325                          MOV     AX,(SET_INTERRUPT_VECTOR*256) | 23H ; Set Ctrl-C address
  1909 00000367 CD21                            INT     int_command
  1910                                          ;MOV     DX,OFFSET RESGROUP:DSKERR
  1911 00000369 BA[A303]                        MOV     DX,DSKERR
  1912 0000036C B82425                          MOV     AX,(SET_INTERRUPT_VECTOR*256) | 24H ; Set Hard Disk Error address
  1913 0000036F CD21                            INT     int_command
  1914 00000371 C3                              RETN
  1915                                  
  1916                                  ;CODERES ENDS
  1917                                  
  1918                                  ; This TAIL segment is used to produce a PARA aligned label in the resident
  1919                                  ; group which is the location where the transient segments will be loaded
  1920                                  ; initial.
  1921                                  
  1922                                  ;TAIL    SEGMENT PUBLIC PARA
  1923                                  ;        ORG     0
  1924                                  ;TRANSTART       LABEL   WORD
  1925                                  ;TAIL    ENDS
  1926                                  
  1927                                  ; This TAIL segment is used to produce a PARA aligned label in the transient
  1928                                  ; group which is the location where the exec segments will be loaded
  1929                                  ; initial.
  1930                                  
  1931                                  ;TRANTAIL    SEGMENT PUBLIC PARA
  1932                                  ;        ORG     0
  1933                                  ;EXECSTART   LABEL   WORD
  1934                                  ;TRANTAIL    ENDS
  1935                                  ;
  1936                                  ;IF IBMVER
  1937                                  ;        INCLUDE EXEC.ASM
  1938                                  ;ENDIF
  1939                                  ;
  1940                                  ;        END     PROGSTART
  1941                                  
  1942                                  ;=============================================================================
  1943                                  ; RUCODE.ASM
  1944                                  ;=============================================================================
  1945                                  
  1946                                  ;TITLE   COMMAND Language modifiable Code Resident
  1947                                  
  1948                                  ;        PUBLIC  ASKEND,DSKERR,RPRINT
  1949                                  
  1950                                  ;ASSUME  CS:RESGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  1951                                  
  1952                                  ; TERMINATE BATCH JOB PROMPTER
  1953                                  
  1954                                  ;ASSUME  DS:RESGROUP
  1955                                  ASKEND:
  1956 00000372 E814FF                          CALL    SAVHAND
  1957                                  ASKEND2:
  1958                                          ;MOV     DX,OFFSET RESGROUP:ENDBATMES
  1959 00000375 BA[7206]                        MOV     DX,ENDBATMES
  1960 00000378 E83901                          CALL    RPRINT
  1961                                  	;MOV     AX,(STD_CON_INPUT_FLUSH SHL 8)+STD_CON_INPUT
  1962 0000037B B8010C                  	MOV     AX,(STD_CON_INPUT_FLUSH*256)+STD_CON_INPUT
  1963 0000037E CD21                            INT     int_command
  1964 00000380 245F                            AND     AL,5FH
  1965 00000382 3C4E                            CMP     AL,"N"
  1966 00000384 7417                            JZ      short RESTHJ
  1967 00000386 3C59                            CMP     AL,"Y"
  1968 00000388 75EB                            JNZ     ASKEND2
  1969 0000038A 8E06[3407]                      MOV     ES,[BATCH]
  1970 0000038E B449                            MOV     AH,DEALLOC
  1971 00000390 CD21                            INT     int_command
  1972 00000392 C706[3407]0000                  MOV     word [BATCH],0		; Flag no batch AFTER DEALLOC in case
  1973                                                                          ;   of ^C
  1974 00000398 C606[6F07]01                    MOV     byte [ECHOFLAG],1	; Make sure ECHO turned back on
  1975                                  RESTHJ:
  1976 0000039D E80BFF                          CALL    RESTHAND
  1977 000003A0 E92EFD                          JMP     CONTCTERM
  1978                                  
  1979                                  DSKERR:
  1980                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  1981                                          ; ******************************************************
  1982                                          ;       THIS IS THE DEFAULT DISK ERROR HANDLING CODE
  1983                                          ;       AVAILABLE TO ALL USERS IF THEY DO NOT TRY TO
  1984                                          ;       INTERCEPT INTERRUPT 24H.
  1985                                          ; ******************************************************
  1986 000003A3 FB                              STI
  1987 000003A4 1E                              PUSH    DS
  1988 000003A5 06                              PUSH    ES
  1989 000003A6 57                              PUSH    DI
  1990 000003A7 51                              PUSH    CX
  1991 000003A8 50                              PUSH    AX
  1992 000003A9 8EDD                            MOV     DS,BP
  1993                                          ;MOV     AX,[SI.SDEVATT]
  1994 000003AB 8B4404                          MOV     AX,[SI+SYSDEV.ATT]
  1995 000003AE 2E8826[1006]                    MOV     [CS:CDEVAT],AH
  1996 000003B3 0E                              PUSH    CS
  1997 000003B4 07                              POP     ES
  1998                                          ;MOV     DI,OFFSET RESGROUP:DEVENAM
  1999 000003B5 BF[B805]                        MOV     DI,DEVENAM
  2000 000003B8 B90800                          MOV     CX,8
  2001                                          ;ADD     SI,SDEVNAME	; Suck up device name (even on Block)
  2002 000003BB 83C60A                          ADD     SI,SYSDEV.NAME
  2003 000003BE F3A4                            REP     MOVSB
  2004 000003C0 58                              POP     AX
  2005 000003C1 59                              POP     CX
  2006 000003C2 5F                              POP     DI
  2007 000003C3 07                              POP     ES		; Stack just contains DS at this point
  2008 000003C4 E8C2FE                          CALL    SAVHAND
  2009 000003C7 0E                              PUSH    CS
  2010 000003C8 1F                              POP     DS              ; Set up local data segment
  2011                                  ;ASSUME  DS:RESGROUP
  2012                                  
  2013 000003C9 52                              PUSH    DX
  2014 000003CA E8E400                          CALL    CRLF
  2015 000003CD 5A                              POP     DX
  2016                                  
  2017 000003CE 0441                            ADD     AL,"A"          ; Compute drive letter (even on character)
  2018 000003D0 A2[AD05]                        MOV     [DRVLET],AL
  2019 000003D3 F6C480                          TEST    AH,80H          ; Check if hard disk error
  2020 000003D6 740A                            JZ      SHORT NOHARDE
  2021                                          ;TEST    [CDEVAT],DEVTYP SHR 8
  2022 000003D8 F606[1006]80                    TEST    byte [CDEVAT],DEVTYP >> 8
  2023 000003DD 7503                            JNZ     short NOHARDE
  2024 000003DF E9B900                          JMP     FATERR
  2025                                  NOHARDE:
  2026                                          ;MOV     SI,OFFSET RESGROUP:MREAD
  2027 000003E2 BE[9405]                        MOV     SI,MREAD
  2028 000003E5 F6C401                          TEST    AH,1
  2029 000003E8 7403                            JZ      short SAVMES
  2030                                          ;MOV     SI,OFFSET RESGROUP:MWRITE
  2031 000003EA BE[9805]                        MOV     SI,MWRITE
  2032                                  SAVMES:
  2033 000003ED AD                              LODSW
  2034 000003EE A3[9F05]                        MOV     [IOTYP],AX
  2035 000003F1 AD                              LODSW
  2036 000003F2 A3[A105]                        MOV     [IOTYP+2],AX
  2037 000003F5 81E7FF00                        AND     DI,0FFH
  2038 000003F9 83FF0C                          CMP     DI,12
  2039 000003FC 7603                            JBE     short HAVCOD
  2040 000003FE BF0C00                          MOV     DI,12
  2041                                  HAVCOD:
  2042 00000401 893E[2F07]                      MOV     [ERRCD_24],DI
  2043 00000405 D1E7                            SHL     DI,1
  2044                                          ;MOV     DI,WORD PTR [DI+MESBAS] ; Get pointer to error message
  2045 00000407 8BBD[E804]                      MOV     DI,[DI+MESBAS]
  2046 0000040B 87FA                            XCHG    DI,DX           ; May need DX later
  2047 0000040D E8A400                          CALL    RPRINT          ; Print error type
  2048                                          ;MOV     DX,OFFSET RESGROUP:ERRMES
  2049 00000410 BA[9C05]                        MOV     DX,ERRMES
  2050 00000413 E89E00                          CALL    RPRINT
  2051                                          ;TEST    [CDEVAT],DEVTYP SHR 8
  2052 00000416 F606[1006]80                    TEST	byte [CDEVAT],DEVTYP >> 8
  2053 0000041B 7409                    	JZ      short BLKERR
  2054                                          ;MOV     DX,OFFSET RESGROUP:DEVEMES
  2055 0000041D BA[B005]                        MOV	DX,DEVEMES
  2056 00000420 B409                            MOV     AH,STD_CON_STRING_OUTPUT
  2057 00000422 CD21                            INT     int_command
  2058 00000424 EB13                            JMP     SHORT ASK       ; Don't ralph on COMMAND
  2059                                  
  2060                                  BLKERR:
  2061                                          ;MOV     DX,OFFSET RESGROUP:DRVNUM
  2062 00000426 BA[A605]                       	MOV     DX,DRVNUM
  2063 00000429 E88800                          CALL    RPRINT
  2064 0000042C 803E[3307]00                    CMP     byte [LOADING],0
  2065 00000431 7406                            JZ      short ASK
  2066 00000433 E875FE                          CALL    RESTHAND
  2067 00000436 E96CFE                          JMP     GETCOMDSK2	; If error loading COMMAND, re-prompt
  2068                                  ASK:
  2069                                          ;MOV     DX,OFFSET RESGROUP:REQUEST
  2070 00000439 BA[FA05]                        MOV	DX,REQUEST
  2071 0000043C E87500                          CALL    RPRINT
  2072                                  	;MOV     AX,(STD_CON_INPUT_FLUSH SHL 8)+STD_CON_INPUT
  2073 0000043F B8010C                  	MOV     AX,(STD_CON_INPUT_FLUSH*256)+STD_CON_INPUT
  2074 00000442 CD21                            INT     int_command             ; Get response
  2075 00000444 E86A00                          CALL    CRLF
  2076 00000447 0C20                            OR      AL,20H          ; Convert to lower case
  2077 00000449 B400                            MOV     AH,0            ; Return code for ignore
  2078 0000044B 3C69                            CMP     AL,"i"          ; Ignore?
  2079 0000044D 7443                            JZ	short EEXIT
  2080 0000044F FEC4                            INC     AH
  2081 00000451 3C72                            CMP     AL,"r"          ; Retry?
  2082 00000453 743D                            JZ	short EEXIT
  2083 00000455 FEC4                            INC     AH
  2084 00000457 3C61                            CMP     AL,"a"          ; Abort?
  2085 00000459 75DE                            JNZ     ASK
  2086 0000045B 31D2                            XOR     DX,DX
  2087 0000045D 8616[7808]                      XCHG    DL,[PIPEFLAG]   ; Abort a pipe in progress
  2088 00000461 08D2                            OR      DL,DL
  2089 00000463 740D                            JZ	short CHECKFORA
  2090 00000465 833E[7407]00                    CMP     word [SINGLECOM],0
  2091 0000046A 7406                            JZ      short CHECKFORA
  2092 0000046C C706[7407]FFFF                  MOV     word [SINGLECOM],-1 ; Make sure SINGLECOM exits
  2093                                  CHECKFORA:
  2094 00000472 833E[2F07]00                    CMP     word [ERRCD_24],0 ; Write protect
  2095 00000477 7407                            JZ      short ABORTFOR
  2096 00000479 833E[2F07]02                    CMP     word [ERRCD_24],2 ; Drive not ready
  2097 0000047E 7512                            JNZ     short EEXIT	; Don't abort the FOR
  2098                                  ABORTFOR:
  2099 00000480 C606[7807]00                    MOV     byte [FORFLAG],0 ; Abort a FOR in progress
  2100 00000485 833E[7407]00                    CMP	word [SINGLECOM],0
  2101 0000048A 7406                            JZ      short EEXIT
  2102 0000048C C706[7407]FFFF                  MOV     word [SINGLECOM],-1 ; Make sure SINGLECOM exits
  2103                                  EEXIT:
  2104 00000492 88E0                            MOV     AL,AH
  2105 00000494 89FA                            MOV     DX,DI
  2106                                  RESTHD:
  2107 00000496 E812FE                          CALL    RESTHAND
  2108 00000499 1F                              POP     DS
  2109 0000049A CF                              IRET
  2110                                  
  2111                                  FATERR:
  2112                                          ;MOV     DX,OFFSET RESGROUP:BADFAT
  2113 0000049B BA[1106]                        MOV     DX,BADFAT
  2114 0000049E E81300                          CALL    RPRINT
  2115                                          ;MOV     DX,OFFSET RESGROUP:ERRMES
  2116 000004A1 BA[9C05]                        MOV     DX,ERRMES
  2117 000004A4 E80D00                          CALL    RPRINT
  2118                                          ;MOV     DX,OFFSET RESGROUP:DRVNUM
  2119 000004A7 BA[A605]                        MOV     DX,DRVNUM
  2120 000004AA E80700                          CALL    RPRINT
  2121 000004AD B002                            MOV     AL,2            ; Abort
  2122 000004AF EBE5                            JMP     short RESTHD
  2123                                  
  2124                                  ; Print routines for Tokenized resident messages
  2125                                  
  2126                                  ;ASSUME DS:RESGROUP,SS:RESGROUP
  2127                                  
  2128                                  CRLF:
  2129                                  	;MOV     DX,OFFSET RESGROUP:NEWLIN
  2130 000004B1 BA[AE05]                	MOV     DX,NEWLIN
  2131                                  RPRINT:
  2132 000004B4 50                              PUSH    AX              ; Tokenized message printer
  2133 000004B5 53                              PUSH    BX
  2134 000004B6 52                              PUSH    DX
  2135 000004B7 56                              PUSH    SI
  2136 000004B8 89D6                            MOV     SI,DX
  2137                                  RPRINT1:
  2138 000004BA AC                              LODSB
  2139 000004BB 50                              PUSH    AX
  2140 000004BC 247F                            AND     AL,7FH
  2141 000004BE 3C30                            CMP     AL,"0"
  2142 000004C0 7215                            JB      RPRINT2
  2143 000004C2 3C39                            CMP     AL,"9"
  2144 000004C4 7711                            JA      RPRINT2
  2145 000004C6 2C30                            SUB     AL,"0"
  2146 000004C8 98                              CBW
  2147 000004C9 D1E0                            SHL     AX,1
  2148                                          ;MOV     BX,OFFSET RESGROUP:MESADD
  2149 000004CB BB[0205]                        MOV	BX,MESADD
  2150 000004CE 01C3                            ADD     BX,AX
  2151 000004D0 8B17                            MOV     DX,[BX]
  2152 000004D2 E8DFFF                          CALL    RPRINT
  2153 000004D5 EB06                            JMP     SHORT RPRINT3
  2154                                  RPRINT2:
  2155 000004D7 88C2                            MOV     DL,AL
  2156 000004D9 B402                            MOV     AH,STD_CON_OUTPUT
  2157 000004DB CD21                            INT     int_command
  2158                                  RPRINT3:
  2159 000004DD 58                              POP     AX
  2160 000004DE A880                            TEST    AL,10000000B                    ; High bit set indicates end
  2161 000004E0 74D8                            JZ      RPRINT1
  2162 000004E2 5E                              POP     SI
  2163 000004E3 5A                              POP     DX
  2164 000004E4 5B                              POP     BX
  2165 000004E5 58                              POP     AX
  2166 000004E6 C3                              RETN
  2167                                  
  2168                                  ;CODERES ENDS
  2169                                  ;        END
  2170                                  
  2171                                  ;=============================================================================
  2172                                  ; RDATA.ASM
  2173                                  ;=============================================================================
  2174                                  
  2175 000004E7 90                      ALIGN 2
  2176                                  
  2177                                  RDATA	EQU	$
  2178                                  
  2179                                  ;TITLE   COMMAND Resident DATA
  2180                                  
  2181                                  ; Data for resident portion
  2182                                  
  2183                                  ;DATARES SEGMENT PUBLIC BYTE
  2184                                  
  2185                                  	;ORG     0
  2186                                  ;ZERO    =       $
  2187                                  
  2188 000004E8 [1605]                  MESBAS  DW      ERR0
  2189 000004EA [2305]                          DW      ERR1
  2190 000004EC [2B05]                          DW      ERR2
  2191 000004EE [3405]                          DW      ERR3
  2192 000004F0 [4005]                          DW      ERR4
  2193 000004F2 [4405]                          DW      ERR5
  2194 000004F4 [5305]                          DW      ERR6
  2195 000004F6 [5705]                          DW      ERR7
  2196 000004F8 [6305]                          DW      ERR8
  2197 000004FA [7305]                          DW      ERR9
  2198 000004FC [7B05]                          DW      ERR10
  2199 000004FE [8605]                          DW      ERR11
  2200 00000500 [9005]                          DW      ERR12
  2201                                  
  2202 00000502 [AE05]                  MESADD  DW      NEWLIN          ;"0"
  2203 00000504 [C305]                          DW      COM$1           ;"1"
  2204 00000506 [3405]                          DW      ERR3            ;"2"
  2205 00000508 [CB05]                          DW      ALLOC$3         ;"3"
  2206 0000050A [D705]                          DW      FILE$4          ;"4"
  2207 0000050C [DD05]                          DW      RROR$5          ;"5"
  2208 0000050E [E205]                          DW      CAN$6           ;"6"
  2209 00000510 [E905]                          DW      EMORY$7         ;"7"
  2210 00000512 [EE05]                          DW      BAT$8           ;"8"
  2211 00000514 [F405]                          DW      INS$9           ;"9"
  2212                                  
  2213 00000516 57726974652070726F-     ERR0    DB      "Write protec","t"+80h
  2214 0000051F 746563F4           
  2215 00000523 42616420756E69F4        ERR1    DB      "Bad uni","t"+80h
  2216 0000052B 4E6F742072656164F9      ERR2    DB      "Not read","y"+80h
  2217 00000534 42616420636F6D6D61-     ERR3    DB      "Bad command"," "+80h
  2218 0000053D 6E64A0             
  2219 00000540 446174E1                ERR4    DB      "Dat","a"+80h
  2220 00000544 4261642063616C6C20-     ERR5    DB      "Bad call forma","t"+80h
  2221 0000054D 666F726D61F4       
  2222 00000553 536565EB                ERR6    DB      "See","k"+80h
  2223 00000557 4E6F6E2D444F532064-     ERR7    DB      "Non-DOS dis","k"+80h
  2224 00000560 6973EB             
  2225 00000563 536563746F72206E6F-     ERR8    DB      "Sector not foun","d"+80h
  2226 0000056C 7420666F756EE4     
  2227 00000573 4E6F2070617065F2        ERR9    DB      "No pape","r"+80h
  2228 0000057B 577269746520666175-     ERR10   DB      "Write faul","t"+80h
  2229 00000584 6CF4               
  2230 00000586 52656164206661756C-     ERR11   DB      "Read faul","t"+80h
  2231 0000058F F4                 
  2232 00000590 446973EB                ERR12   DB      "Dis","k"+80h
  2233 00000594 72656164                MREAD   DB      "read"
  2234 00000598 77726974                MWRITE  DB      "writ"
  2235 0000059C 206535                  ERRMES  DB      " e5"
  2236 0000059F 77726974696EE7          IOTYP   DB      "writin","g"+80h
  2237 000005A6 20647269766520          DRVNUM  DB      " drive "
  2238 000005AD 41                      DRVLET  DB      "A"
  2239 000005AE 0D8A                    NEWLIN  DB      13,10+80h
  2240 000005B0 2064657669636520        DEVEMES DB      " device "
  2241                                  ;DEVENAM DB      8 DUP (?)
  2242 000005B8 00<rept>                DEVENAM TIMES	8 DB 0
  2243 000005C0 0D0A24                          DB      13,10,"$"	;Must be $ terminated
  2244 000005C3 20434F4D4D414EC4        COM$1   DB      " COMMAN","D"+80h
  2245 000005CB 20616C6C6F63617469-     ALLOC$3 DB      " allocation"," "+80h
  2246 000005D4 6F6EA0             
  2247 000005D7 2066696C65A0            FILE$4  DB      " file"," "+80h
  2248 000005DD 72726F72A0              RROR$5  DB      "rror"," "+80h
  2249 000005E2 43616E6E6F74A0          CAN$6   DB      "Cannot"," "+80h
  2250 000005E9 656D6F72F9              EMORY$7 DB      "emor","y"+80h
  2251 000005EE 2062617463E8            BAT$8   DB      " batc","h"+80h
  2252 000005F4 496E736572F4            INS$9   DB      "Inser","t"+80h
  2253 000005FA 41626F72742C205265-     REQUEST DB      "Abort, Retry, Ignore?"," "+80h
  2254 00000603 7472792C2049676E6F-
  2255 0000060C 72653FA0           
  2256 00000610 00                      CDEVAT  DB      0
  2257 00000611 3046696C6533746162-     BADFAT  DB      "0File3table bad",","+80h
  2258 0000061A 6C6520626164AC     
  2259 00000621 30496E76616C696431-     COMBAD  DB      "0Invalid1.COM"
  2260 0000062A 2E434F4D           
  2261 0000062E 3039312E434F4D2064-     NEEDCOM DB      "091.COM disk in"," "+80h
  2262 00000637 69736B20696EA0     
  2263 0000063E 647269766520            DRVMSG  DB      "drive "
  2264 00000644 41A0                    COMLET  DB      "A"," "+80h
  2265 00000646 64656661756C742064-     DEFMSG  DB      "default driv","e"+80h
  2266 0000064F 726976E5           
  2267 00000653 30616E642073747269-     PROMPT  DB      "0and strike any key when ready","0"+80h
  2268 0000065C 6B6520616E79206B65-
  2269 00000665 79207768656E207265-
  2270 0000066E 616479B0           
  2271 00000672 305465726D696E6174-     ENDBATMES DB    "0Terminate8 job (Y/N)?"," "+80h
  2272 0000067B 6538206A6F62202859-
  2273 00000684 2F4E293FA0         
  2274 00000689 45584543206661696C-     EXECEMES DB     "EXEC failure","0"+80h
  2275 00000692 757265B0           
  2276 00000696 4535696E2045584534-     EXEBAD  DB      "E5in EXE4","0"+80h
  2277 0000069F B0                 
  2278 000006A0 50726F6772616D2074-     TOOBIG  DB      "Program too big to fit in m7","0"+80h
  2279 000006A9 6F6F2062696720746F-
  2280 000006B2 2066697420696E206D-
  2281 000006BB 37B0               
  2282 000006BD 30426164206F72206D-     NOCOM   DB      "0Bad or missing Command Interprete","r"+80H
  2283 000006C6 697373696E6720436F-
  2284 000006CF 6D6D616E6420496E74-
  2285 000006D8 65727072657465F2   
  2286 000006E0 304E6F206672656534-     NOHANDMES DB    "0No free4handle","s"+80h
  2287 000006E9 68616E646C65F3     
  2288 000006F0 304D373365B5            BMEMMES DB      "0M73e","5"+80h
  2289 000006F6 30366C6F6164312C20-     HALTMES DB      "06load1, system halte","d"+80h
  2290 000006FF 73797374656D206861-
  2291 00000708 6C7465E4           
  2292 0000070C 30367374617274312C-     FRETMES DB      "06start1, exiting","0"+80h
  2293 00000715 2065786974696E67B0 
  2294 0000071E 326F72346E616D65B0      RBADNAM DB      "2or4name","0"+80h
  2295                                  
  2296                                  RETRABASE: ; 30/04/2018 (Base addr for common params, for transient portion)
  2297                                  	   ; Note: Order of following parameters must not be changed
  2298                                  	   ; without changing address references of them in 'transcom.s').	
  2299                                  
  2300 00000727 00000000                INT_2E_RET DD   0               ; Magic command executer return address
  2301 0000072B 0000                    SAVE_PDB DW     0
  2302 0000072D 0000                    PARENT   DW     0
  2303 0000072F 0000                    ERRCD_24 DW     0
  2304 00000731 0000                    HANDLE01 DW     0
  2305 00000733 00                      LOADING DB      0
  2306 00000734 0000                    BATCH   DW      0               ; Assume no batch mode initially
  2307 00000736 00000000                BATLOC  DD      0               ; Position in batch file
  2308                                  ;COMSPEC DB	40 DUP(0)
  2309 0000073A 00<rept>                COMSPEC	TIMES	40 DB 0
  2310                                  ;TRANS   DW      OFFSET TRANGROUP:COMMAND
  2311 00000762 2C01                    TRANS   DW      COMMAND
  2312 00000764 0000                    TRNSEG  DW      0
  2313 00000766 00                      COMDRV  DB      0               ; DRIVE SPEC TO LOAD AUTOEXEC AND COMMAND
  2314 00000767 00                      BATBYT  DB      0
  2315 00000768 0000                    MEMSIZ  DW      0
  2316 0000076A 0000                    SUM     DW      0
  2317 0000076C 01                      EXTCOM  DB      1               ; For init, pretend just did an external
  2318 0000076D 0000                    RETCODE DW      0
  2319 0000076F 01                      ECHOFLAG DB     1
  2320 00000770 0000                    IO_SAVE DW      0
  2321 00000772 00                      RESTDIR DB      0
  2322 00000773 00                      PERMCOM DB      0
  2323 00000774 0000                    SINGLECOM DW    0
  2324 00000776 FFFF                    VERVAL  DW      -1
  2325                                  
  2326 00000778 00                      FORFLAG DB      0
  2327 00000779 00                      UFORDRV DB      0
  2328                                  ;FORSET  DB      40 DUP (?)
  2329 0000077A 00<rept>                FORSET  TIMES	40 DB 0
  2330                                  ;FORCOM  DB      90 DUP (?)
  2331 000007A2 00<rept>                FORCOM	TIMES	90 DB 0
  2332 000007FC 00                      FORVAR  DB      0
  2333 000007FD 0000                    FORPTR  DW      0
  2334 000007FF FF                      FORUFCB DB      -1
  2335 00000800 00                      FORFCB  DB      0
  2336                                          ;DB      34 DUP(?)
  2337 00000801 00<rept>                        TIMES	34 DB 0
  2338 00000823 0000                    	DW      0
  2339 00000825 0000                            DW      0               ; Initialize RR field to zero
  2340                                  
  2341                                  ;RE_INSTR DB     40 DUP(0)
  2342 00000827 00<rept>                RE_INSTR TIMES	40 DB 0
  2343 0000084F 00                      RE_OUT_APP DB   0
  2344                                  ;RE_OUTSTR DB    40 DUP(0)
  2345 00000850 00<rept>                RE_OUTSTR TIMES	40 DB 0
  2346                                  
  2347                                  ;These two bytes refed as a word
  2348 00000878 00                      PIPEFLAG  DB    0
  2349 00000879 00                      PIPEFILES DB    0
  2350                                  
  2351 0000087A 0000                    PIPEPTR DW      0
  2352                                  ;PIPESTR DB      129 DUP(?)
  2353 0000087C 00<rept>                PIPESTR	TIMES	129 DB 0
  2354 000008FD 5F3A2F255049504531-     PIPE1   DB      "_:/%PIPE1.$$$",0
  2355 00000906 2E24242400         
  2356 0000090B 5F3A2F255049504532-     PIPE2   DB      "_:/%PIPE2.$$$",0
  2357 00000914 2E24242400         
  2358                                  ;INPIPEPTR DW    OFFSET RESGROUP:PIPE1
  2359 00000919 [FD08]                  INPIPEPTR DW    PIPE1
  2360                                  ;OUTPIPEPTR DW   OFFSET RESGROUP:PIPE2
  2361 0000091B [0B09]                  OUTPIPEPTR DW   PIPE2
  2362                                  
  2363                                  ;EXEC_BLOCK LABEL BYTE		; The data block for EXEC calls
  2364                                  EXEC_BLOCK:
  2365 0000091D 0000                    ENVIRSEG DW	0
  2366                                  ;COM_PTR LABEL   DWORD
  2367                                  COM_PTR:
  2368 0000091F 8000                            DW      80H             ; Point at unformatted parameters
  2369 00000921 0000                            DW      0
  2370                                  ;COM_FCB1 LABEL  DWORD
  2371                                  COM_FCB1:
  2372 00000923 5C00                            DW      5CH
  2373 00000925 0000                            DW      0
  2374                                  ;COM_FCB2 LABEL  DWORD
  2375                                  COM_FCB2:
  2376 00000927 6C00                            DW      6CH
  2377 00000929 0000                            DW      0
  2378                                  
  2379                                  ;PARMBUF DB      129 DUP (?)
  2380 0000092B 00<rept>                PARMBUF	TIMES	129 DB 0
  2381                                  
  2382                                  ;IF IBMVER
  2383                                  ;SYS_CALL DD  0
  2384                                  ;;ZEXEC    DW  OFFSET ZEXEC_CODE:$EXEC
  2385                                  ;ZEXEC    DW  ZEXEC_CODE+$EXEC
  2386                                  ;EXESEG   DW  0
  2387                                  ;USER_SP  DW  0
  2388                                  ;USER_SS  DW  0
  2389                                  ;EXESUM   DW  0
  2390                                  ;ENDIF
  2391                                  
  2392                                  ;TRANVARS LABEL  BYTE		; Variables passed to transient
  2393                                  TRANVARS:
  2394                                          ;DW      OFFSET RESGROUP:THEADFIX
  2395 000009AC [5402]                  	DW      THEADFIX
  2396 000009AE 0000                    MYSEG   DW      0               ; Put our own segment here
  2397 000009B0 0000                    LTPA    DW      0               ; WILL STORE TPA SEGMENT HERE
  2398 000009B2 2D                      RSWITCHAR DB    "-"
  2399 000009B3 2F                      RDIRCHAR DB     "/"
  2400                                          ;DW      OFFSET RESGROUP:EXT_EXEC
  2401 000009B4 [A700]                          DW      EXT_EXEC
  2402 000009B6 0000                    MYSEG1  DW      0
  2403                                  	;DW      OFFSET RESGROUP:TREMCHECK
  2404 000009B8 [4B02]                  	DW      TREMCHECK
  2405 000009BA 0000                    MYSEG2  DW      0
  2406                                  
  2407                                  ;DATARESEND	LABEL   BYTE
  2408                                  DATARESEND:
  2409                                  
  2410                                  ;DATARES ENDS
  2411                                  ;        END
  2412                                  
  2413                                  ;=============================================================================
  2414                                  ; COMMAND.ASM
  2415                                  ;=============================================================================
  2416                                  
  2417 000009BC 90<rept>                align 16
  2418                                  
  2419                                  ;ENVIRONMENT SEGMENT PUBLIC PARA        ; Default COMMAND environment
  2420                                  
  2421                                  ;	PUBLIC  ECOMSPEC,ENVIREND,PATHSTRING
  2422                                  
  2423                                          ;ORG     0
  2424                                  ;ENVARENA DB     10H DUP (?)	; Pad for mem arena
  2425 000009C0 00<rept>                ENVARENA TIMES	16 DB 0		
  2426                                  ENVIRONMENT: 			; 30/04/2018
  2427 000009D0 504154483D              PATHSTRING DB   "PATH="
  2428                                  ;USERPATH LABEL  BYTE
  2429                                  USERPATH:
  2430 000009D5 00                              DB      0               ; Null path
  2431 000009D6 434F4D535045433D                DB      "COMSPEC="
  2432 000009DE 2F434F4D4D414E442E-     ECOMSPEC DB     "/COMMAND.COM"
  2433 000009E7 434F4D             
  2434                                          ;DB      134 DUP (0)
  2435 000009EA 00<rept>                	TIMES	134 DB 0
  2436                                  
  2437                                  ;ENVIREND	LABEL   BYTE
  2438                                  ENVIREND:
  2439                                  
  2440                                  ENVIRONSIZ EQU  $-PATHSTRING	; 160 = 0A0h
  2441                                  ENVIRONSIZ2 EQU $-ECOMSPEC	; 146 = 092h
  2442                                  ;ENVIRONMENT ENDS
  2443                                  
  2444                                  ;=============================================================================
  2445                                  ; INIT.ASM
  2446                                  ;=============================================================================
  2447                                  
  2448                                  ;TITLE   COMMAND Initialization
  2449                                  
  2450                                  ;ENVIRONSIZ EQU  0A0H		;Must agree with values in EVIRONMENT segment
  2451                                  ;ENVIRONSIZ2 EQU 092H
  2452                                  
  2453                                  ; START OF INIT PORTION
  2454                                  ; This code is overlayed the first time the TPA is used.
  2455                                  
  2456                                  ;INIT    SEGMENT PUBLIC PARA
  2457                                  
  2458                                  ; 	EXTRN   HEADER:BYTE
  2459                                  ;	EXTRN   BADCOMLKMES:BYTE
  2460                                  
  2461                                  ;	PUBLIC  CONPROC
  2462                                  
  2463                                  ;ASSUME  CS:RESGROUP,DS:RESGROUP,ES:RESGROUP,SS:RESGROUP
  2464                                  
  2465                                          ;ORG     0
  2466                                  ;ZERO	=       $
  2467                                  
  2468                                  CONPROC:
  2469                                  	;MOV	SP,OFFSET RESGROUP:RSTACK
  2470 00000A70 BC[8000]                	MOV	SP,RSTACK
  2471                                  
  2472                                          ;IF      HIGHMEM
  2473                                          ;MOV     BX,WORD PTR DS:[PDB_block_len]
  2474                                          ;MOV     AX,OFFSET RESGROUP:ENVIREND + 15
  2475                                          ;MOV     CL,4
  2476                                          ;SHR     AX,CL
  2477                                          ;PUSH    AX                         ; Save size to alloc
  2478                                          ;INC     AX                         ; Plus one for arena
  2479                                          ;SUB     BX,AX                      ; Subtract size of resident
  2480                                          ;MOV     WORD PTR DS:[PDB_block_len],BX
  2481                                          ;MOV     AX,CS
  2482                                          ;SUB     BX,AX
  2483                                          ;MOV     AH,SETBLOCK
  2484                                          ;INT     21H
  2485                                          ;POP     BX			    ; Get back size to alloc
  2486                                          ;MOV     AH,ALLOC
  2487                                          ;INT     21H
  2488                                          ;MOV     [REALRES],AX
  2489                                          ;MOV     ES,AX
  2490                                          ;XOR     SI,SI
  2491                                          ;MOV     DI,SI
  2492                                          ;MOV     CX,OFFSET RESGROUP:ENVIREND
  2493                                          ;SHR     CX,1          ; Length of resident and environment in words
  2494                                          ;                      ; Last byte doesn't matter
  2495                                          ;REP     MOVSW                   ; Move to end of memory
  2496                                          ;MOV     DS,AX
  2497                                          ;MOV     BX,AX
  2498                                          ;MOV     AH,SET_CURRENT_PDB
  2499                                          ;INT     21H
  2500                                          ;MOV     AX,BX
  2501                                          ;MOV     BX,OFFSET RESGROUP:DATARESEND + 15
  2502                                          ;MOV     CL,4
  2503                                          ;SHR     BX,CL           ; BX is size for SETBLOCK
  2504                                          ;MOV     WORD PTR DS:[PDB_block_len],BX
  2505                                          ;ADD     WORD PTR DS:[PDB_block_len],AX
  2506                                          ;MOV     [LTPA],CS
  2507                                          ;MOV     AH,SETBLOCK
  2508                                          ;INT     21H             ;Shrink to not include environment
  2509                                          ;MOV     BX,(ENVIRONSIZ + 15) / 16
  2510                                          ;MOV     AH,ALLOC
  2511                                          ;INT     21H             ;Allocate the environment
  2512                                          ;MOV     [ENVIRSEG],AX
  2513                                          ;MOV     CS:[ENVIRSEGSAV],AX
  2514                                          ;MOV     ES,AX
  2515                                  ;ASSUME	ES:ENVIRONMENT
  2516                                          ;XOR     DI,DI
  2517                                          ;MOV     SI,OFFSET RESGROUP:PATHSTRING
  2518                                          ;MOV     CX,ENVIRONSIZ
  2519                                          ;REP     MOVSB
  2520                                          ;MOV     AX,WORD PTR CS:[PDB_block_len]
  2521                                          ;ENDIF
  2522                                  
  2523                                  	;IF      NOT HIGHMEM
  2524                                          ;MOV     AX,OFFSET RESGROUP:ENVIREND + 15
  2525 00000A73 B8[7F0A]                        MOV     AX,ENVIREND+15
  2526 00000A76 B104                            MOV     CL,4
  2527 00000A78 D3E8                            SHR     AX,CL
  2528 00000A7A 8CC9                            MOV     CX,CS
  2529 00000A7C 01C8                            ADD     AX,CX                         ; Compute segment of TPA
  2530 00000A7E A3[B009]                        MOV     [LTPA],AX                     ; Good enough for the moment
  2531                                          ;MOV     AX,WORD PTR DS:[PDB_block_len]
  2532 00000A81 A10200                          MOV     AX,[PDB.BLOCK_LEN]
  2533                                          ;ENDIF
  2534                                  
  2535 00000A84 8C1E[B609]                      MOV     [MYSEG1],DS
  2536 00000A88 8C1E[BA09]                      MOV     [MYSEG2],DS
  2537 00000A8C 8C1E[AE09]                      MOV     [MYSEG],DS
  2538 00000A90 A3[6807]                        MOV     [MEMSIZ],AX
  2539                                  
  2540                                          ;MOV     DX,OFFSET TRANGROUP:TRANSPACEEND + 15
  2541 00000A93 BA0530                          MOV     DX,TRANSPACEEND + 15
  2542 00000A96 B104                            MOV     CL,4
  2543 00000A98 D3EA                            SHR     DX,CL
  2544                                  
  2545                                          ;IF      IBM
  2546                                          ;PUSH    DX
  2547                                          ;;MOV     DX,OFFSET EGROUP:ZEXECDATAEND + 15
  2548                                          ;MOV     DX,EGROUP+ZEXECDATAEND + 15
  2549                                          ;MOV     CL,4
  2550                                          ;SHR     DX,CL
  2551                                          ;POP     CX
  2552                                          ;ADD     DX,CX
  2553                                          ;ENDIF
  2554                                  
  2555 00000A9A 29D0                            SUB     AX,DX
  2556 00000A9C A3[6407]                        MOV     [TRNSEG],AX		; Read it in here
  2557                                          ;MOV     AX,DS:[PDB_environ]
  2558 00000A9F A12C00                          MOV     AX,[PDB.ENVIRON]
  2559 00000AA2 09C0                            OR      AX,AX
  2560 00000AA4 7406                            JZ      SHORT BUILDENV		; Need to make an environment
  2561                                  
  2562                                          ;IF      HIGHMEM
  2563                                          ;INC     BYTE PTR CS:[CHUCKENV]	; Flag no ENVIRONSEG
  2564                                          ;ELSE
  2565 00000AA6 FE06[150E]                      INC     BYTE [CHUCKENV]		; Flag no ENVIRONSEG
  2566                                          ;ENDIF
  2567                                  
  2568 00000AAA EB0B                            JMP     SHORT ENVIRONPASSED
  2569                                  
  2570                                  BUILDENV:
  2571                                  
  2572                                  	;IF      NOT HIGHMEM
  2573                                          ;MOV     AX,OFFSET RESGROUP:PATHSTRING ; Figure environment pointer
  2574 00000AAC B8[D009]                	MOV	AX, PATHSTRING
  2575 00000AAF B104                            MOV     CL,4
  2576 00000AB1 D3E8                            SHR     AX,CL
  2577 00000AB3 8CDA                            MOV     DX,DS
  2578 00000AB5 01D0                            ADD     AX,DX
  2579                                          ;ELSE
  2580                                          ;JMP     SHORT GOTTHEENVIR
  2581                                          ;ENDIF
  2582                                  
  2583                                  ENVIRONPASSED:
  2584 00000AB7 A3[1D09]                        MOV     [ENVIRSEG],AX
  2585                                  
  2586                                          ;IF      HIGHMEM
  2587                                          ;DEC     AX
  2588                                          ;MOV     ES,AX
  2589                                          ;INC     AX
  2590                                          ;MOV     ES:[arena_owner],DS	; Adjust owner of passed envir
  2591                                          ;ENDIF
  2592                                  
  2593 00000ABA 8EC0                            MOV     ES,AX
  2594                                  ;ASSUME  ES:ENVIRONMENT
  2595                                  
  2596                                  GOTTHEENVIR:
  2597                                          ;MOV     AX,CHAR_OPER SHL 8
  2598 00000ABC B80037                          MOV     AX,CHAR_OPER*256
  2599 00000ABF CD21                            INT     int_command
  2600 00000AC1 8816[B209]                      MOV     [RSWITCHAR],DL
  2601                                  
  2602 00000AC5 80FA2F                          CMP     DL,'/'
  2603 00000AC8 7512                            JNZ     short IUSESLASH
  2604                                  
  2605                                          ;IF      HIGHMEM
  2606                                          ;MOV     CS:[COMSPECT],'\'
  2607                                          ;ELSE
  2608 00000ACA C606[F20D]5C                    MOV     byte [COMSPECT],'\'
  2609                                          ;ENDIF
  2610                                  
  2611                                          ;IF      HIGHMEM
  2612                                          ;CMP     BYTE PTR CS:[CHUCKENV],0
  2613                                          ;ELSE
  2614 00000ACF 803E[150E]00                    CMP     BYTE [CHUCKENV],0
  2615                                          ;ENDIF
  2616                                  
  2617 00000AD4 7506                            JNZ     short IUSESLASH
  2618                                  
  2619                                          ;MOV     ES:[ECOMSPEC-10H],'\'
  2620                                  	; 30/04/2018
  2621 00000AD6 26C6060E005C                    MOV     byte [ES:(ECOMSPEC-ENVIRONMENT)],'\' ; [ES:0Eh]
  2622                                  
  2623                                  IUSESLASH:
  2624                                  
  2625                                  ;IF IBMVER
  2626                                          ;PUSH    ES
  2627                                          ;;MOV     AX,(Get_interrupt_vector SHL 8) + int_command
  2628                                          ;MOV     AX,(Get_interrupt_vector*256) + int_command
  2629                                          ;INT     int_command
  2630                                          ;MOV     WORD [SYS_CALL],BX
  2631                                          ;MOV     WORD [SYS_CALL+2],ES
  2632                                          ;;MOV     DX,OFFSET RESGROUP:SYSCALL
  2633                                          ;MOV     DX,SYSCALL
  2634                                          ;;MOV     AX,(Set_interrupt_vector SHL 8) + int_command
  2635                                          ;MOV     AX,(Set_interrupt_vector*256) + int_command
  2636                                          ;INT     int_command
  2637                                          ;POP     ES
  2638                                  ;ENDIF
  2639                                  
  2640                                          ;MOV     AL,BYTE PTR DS:[FCB]	; get drive spec for default
  2641 00000ADC A05C00                          MOV     AL,[FCB]
  2642 00000ADF B43A                            MOV     AH,DRVCHAR
  2643 00000AE1 A2[6607]                        MOV     [COMDRV],AL
  2644 00000AE4 0440                            ADD     AL,40H                  ; Convert to letter
  2645 00000AE6 3C40                            CMP     AL,40H
  2646 00000AE8 7422                            JZ      short NOCOMDRV
  2647 00000AEA FD                              STD
  2648                                          ;IF      HIGHMEM
  2649                                          ;CMP     BYTE PTR CS:[CHUCKENV],0
  2650                                          ;ELSE
  2651 00000AEB 803E[150E]00                    CMP     BYTE [CHUCKENV],0
  2652                                          ;ENDIF
  2653                                  
  2654 00000AF0 7513                            JNZ     short NOTWIDENV
  2655                                  
  2656 00000AF2 1E                              PUSH    DS
  2657 00000AF3 06                              PUSH    ES
  2658 00000AF4 1F                              POP     DS
  2659                                          ;MOV	DI,OFFSET ENVIRONMENT:ECOMSPEC + ENVIRONSIZ2 - 1 - 10H
  2660                                  	; 30/04/2018
  2661 00000AF5 BF9F00                          MOV	DI,(ECOMSPEC-ENVIRONMENT) + ENVIRONSIZ2 - 1 ; mov di,9Fh
  2662                                          ;MOV	SI,OFFSET ENVIRONMENT:ECOMSPEC + ENVIRONSIZ2 - 3 - 10H
  2663                                  	; 30/04/2018
  2664 00000AF8 BE9D00                          MOV	SI,(ECOMSPEC-ENVIRONMENT) + ENVIRONSIZ2 - 3 ; mov si,9Dh 
  2665 00000AFB B99000                          MOV     CX,ENVIRONSIZ2 - 2 ; mov cx,90h
  2666 00000AFE F3A4                            REP     MOVSB
  2667                                  
  2668 00000B00 1F                              POP     DS
  2669                                  	;MOV	WORD PTR ES:[ECOMSPEC-10H],AX
  2670                                  	; 30/04/2018
  2671 00000B01 26A30E00                	MOV	[ES:(ECOMSPEC-ENVIRONMENT)],AX   ; mov [ES:0Eh], ax
  2672                                  
  2673                                  NOTWIDENV:
  2674 00000B05 FC                              CLD
  2675                                  	;IF	HIGHMEM
  2676                                          ;MOV	WORD PTR CS:[AUTOBAT],AX
  2677                                          ;ELSE
  2678 00000B06 A3[000E]                        MOV     [AUTOBAT],AX
  2679                                          ;ENDIF
  2680                                  
  2681 00000B09 A2[4406]                        MOV     [COMLET],AL
  2682                                  NOCOMDRV:
  2683 00000B0C E84AF8                          CALL    SETVECT         ; Set the vectors
  2684                                  
  2685 00000B0F BE8000                          MOV     SI,80H
  2686 00000B12 AC                              LODSB
  2687 00000B13 88C1                            MOV     CL,AL
  2688 00000B15 30ED                            XOR     CH,CH
  2689 00000B17 E343                            JCXZ    COMRETURNSJ     ; No parameters
  2690 00000B19 BE8100                          MOV     SI,81H          ; Start of parms
  2691                                  CHKARG:
  2692 00000B1C AC                              LODSB
  2693 00000B1D 3C20                            CMP     AL,' '
  2694 00000B1F 7417                            JZ      short NEXTCH
  2695 00000B21 3C09                            CMP     AL,9            ; Tab only other delimiter
  2696 00000B23 7413                            JZ      short NEXTCH
  2697 00000B25 3A06[B209]                      CMP     AL,[RSWITCHAR]	; Switch?
  2698 00000B29 7534                            JNZ     short CHKOTHERARGS ; No
  2699 00000B2B 49                              DEC     CX
  2700 00000B2C E329                            JCXZ    ARGSDONEJ       ; oops
  2701 00000B2E AC                              LODSB
  2702 00000B2F 0C20                            OR      AL,20H          ; Lower case
  2703 00000B31 3C70                            CMP     AL,'p'          ; PERMCOM switch
  2704 00000B33 7503                            JNZ     short NEXTCH
  2705 00000B35 E90201                          JMP     SETPERM
  2706                                  
  2707                                  NEXTCH:
  2708 00000B38 3C64                            CMP     AL,'d'
  2709 00000B3A 7509                            JNZ     short NEXTCH3
  2710                                  
  2711                                          ;IF	HIGHMEM
  2712                                          ;MOV	BYTE PTR CS:[PRDATTM],1  ; User explicitly says no date time
  2713                                          ;ELSE
  2714 00000B3C C606[100E]01                    MOV     BYTE [PRDATTM],1  ; User explicitly says no date time
  2715                                  	;ENDIF
  2716                                  
  2717 00000B41 E2D9                            LOOP    CHKARG
  2718 00000B43 EB12                            JMP     SHORT ARGSDONEJ
  2719                                  NEXTCH3:
  2720 00000B45 3C63                            CMP     AL,'c'
  2721 00000B47 7511                            JNZ	short NEXTCH2	     ; SINGLECOM switch 2
  2722 00000B49 8936[7407]                      MOV     [SINGLECOM],SI	     ; Point to the rest of the command line
  2723 00000B4D C606[7307]00                    MOV     byte [PERMCOM],0     ; A SINGLECOM must not be a PERMCOM
  2724                                  
  2725                                          ;IF      HIGHMEM
  2726                                          ;MOV     BYTE PTR CS:[PRDATTM],1  ; No date or time either, explicit
  2727                                          ;ELSE
  2728 00000B52 C606[100E]01                    MOV     BYTE [PRDATTM],1     ; No date or time either, explicit
  2729                                          ;ENDIF
  2730                                  
  2731                                  ARGSDONEJ:
  2732 00000B57 E9F200                          JMP	ARGSDONE
  2733                                  
  2734                                  NEXTCH2:
  2735 00000B5A E2C0                            LOOP    CHKARG
  2736                                  
  2737                                  COMRETURNSJ:
  2738 00000B5C E91B01                          JMP	COMRETURNS
  2739                                  
  2740                                  CHKOTHERARGS:
  2741 00000B5F 4E                              DEC     SI
  2742 00000B60 89F2                            MOV     DX,SI
  2743 00000B62 51                              PUSH    CX
  2744 00000B63 56                              PUSH    SI
  2745                                  CONTRLOOP:
  2746 00000B64 AC                              LODSB
  2747 00000B65 49                              DEC     CX
  2748 00000B66 3C20                            CMP     AL,' '
  2749 00000B68 7409                            JZ      short SETCDEV
  2750 00000B6A 3C09                            CMP     AL,9
  2751 00000B6C 7405                            JZ      short SETCDEV
  2752 00000B6E E302                            JCXZ    SETCDEVA
  2753 00000B70 EBF2                            JMP     SHORT CONTRLOOP
  2754                                  
  2755                                  SETCDEVA:
  2756 00000B72 46                              INC     SI
  2757                                  SETCDEV:
  2758 00000B73 C644FF00                        MOV     BYTE [SI-1],0
  2759                                          ;MOV     AX,(OPEN SHL 8) OR 2	; Read and write
  2760 00000B77 B8023D                          MOV     AX,(OPEN*256) | 2
  2761 00000B7A CD21                            INT     int_command
  2762 00000B7C 7245                            JC      short CHKSRCHSPEC	; Wasn't a file
  2763 00000B7E 89C3                            MOV     BX,AX
  2764                                          ;MOV     AX,IOCTL SHL 8
  2765 00000B80 B80044                          MOV     AX,IOCTL*256
  2766 00000B83 CD21                            INT     int_command
  2767 00000B85 F6C280                          TEST    DL,80H
  2768 00000B88 7506                            JNZ     short ISADEVICE
  2769 00000B8A B43E                            MOV     AH,CLOSE       ; Close initial handle, wasn't a device
  2770 00000B8C CD21                            INT     int_command
  2771 00000B8E EB33                            JMP     short CHKSRCHSPEC
  2772                                  
  2773                                  ISADEVICE:
  2774 00000B90 30F6                            XOR     DH,DH
  2775 00000B92 80CA03                          OR      DL,3            ; Make sure has CON attributes
  2776                                          ;MOV     AX,(IOCTL SHL 8) OR 1
  2777 00000B95 B80144                          MOV     AX,(IOCTL*256) | 1
  2778 00000B98 CD21                            INT     int_command
  2779 00000B9A 89DA                            MOV     DX,BX           ; Save new handle
  2780 00000B9C 5B                              POP     BX              ; Throw away saved SI
  2781 00000B9D 5B                              POP     BX              ; Throw away saved CX
  2782 00000B9E 51                              PUSH    CX
  2783 00000B9F B90300                          MOV     CX,3
  2784 00000BA2 31DB                            XOR     BX,BX
  2785                                  RCCLLOOP:			; Close 0,1 and 2
  2786 00000BA4 B43E                            MOV     AH,CLOSE
  2787 00000BA6 CD21                            INT     int_command
  2788 00000BA8 43                              INC     BX
  2789 00000BA9 E2F9                            LOOP    RCCLLOOP
  2790 00000BAB 89D3                            MOV     BX,DX           ; New device handle
  2791 00000BAD B445                            MOV     AH,XDUP
  2792 00000BAF CD21                            INT     int_command	; Dup to 0
  2793 00000BB1 B445                            MOV     AH,XDUP
  2794 00000BB3 CD21                            INT     int_command	; Dup to 1
  2795 00000BB5 B445                            MOV     AH,XDUP
  2796 00000BB7 CD21                            INT     int_command	; Dup to 2
  2797 00000BB9 B43E                            MOV     AH,CLOSE
  2798 00000BBB CD21                            INT     int_command	; Close initial handle
  2799 00000BBD 59                              POP     CX
  2800 00000BBE E35D                            JCXZ    ARGSDONEJ2
  2801 00000BC0 E959FF                          JMP     CHKARG
  2802                                  
  2803                                  CHKSRCHSPEC:                    ; Not a device, so must be directory spec
  2804                                  
  2805                                          ;IF      HIGHMEM
  2806                                          ;MOV     BYTE PTR CS:[CHUCKENV],0 ; If search specified -- no inheritance
  2807                                          ;MOV     AX,CS:[ENVIRSEGSAV]
  2808                                          ;MOV     [ENVIRSEG],AX
  2809                                          ;ELSE
  2810 00000BC3 C606[150E]00                    MOV     BYTE [CHUCKENV],0 ; If search specified -- no inheritance
  2811                                          ;MOV     AX,OFFSET RESGROUP:PATHSTRING   ; Figure environment pointer
  2812 00000BC8 B8[D009]                        MOV     AX,PATHSTRING
  2813 00000BCB B104                            MOV     CL,4
  2814 00000BCD D3E8                            SHR     AX,CL
  2815 00000BCF 8CDA                            MOV     DX,DS
  2816 00000BD1 01D0                            ADD     AX,DX
  2817 00000BD3 A3[1D09]                        MOV     [ENVIRSEG],AX
  2818                                  	;ENDIF
  2819                                  
  2820 00000BD6 8EC0                            MOV     ES,AX
  2821 00000BD8 C644FF20                        MOV     BYTE [SI-1],' '
  2822 00000BDC 5E                              POP     SI                      ; Remember location
  2823 00000BDD 59                              POP     CX                      ; and count
  2824                                  
  2825                                          ;IF      HIGHMEM
  2826                                          ;MOV     DI,CS:[ECOMLOC]
  2827                                          ;ELSE
  2828 00000BDE 8B3E[160E]                      MOV     DI,[ECOMLOC]
  2829                                          ;ENDIF
  2830                                  
  2831                                  COMTRLOOP:
  2832 00000BE2 AC                              LODSB
  2833 00000BE3 49                              DEC     CX
  2834 00000BE4 3C20                            CMP     AL,' '
  2835 00000BE6 7409                            JZ      short SETCOMSR
  2836 00000BE8 3C09                            CMP     AL,9
  2837 00000BEA 7405                            JZ      short SETCOMSR
  2838 00000BEC AA                              STOSB
  2839                                  
  2840                                          ;IF	KANJI
  2841                                          ;XOR	AH,AH
  2842                                          ;ENDIF
  2843                                  
  2844 00000BED E302                            JCXZ    SETCOMSR
  2845                                  
  2846                                          ;IF      KANJI
  2847                                          ;CALL    ITESTKANJ
  2848                                          ;JZ      COMTRLOOP
  2849                                          ;DEC     CX
  2850                                          ;MOVSB
  2851                                          ;INC     AH
  2852                                          ;JCXZ    SETCOMSR
  2853                                          ;ENDIF
  2854                                  
  2855 00000BEF EBF1                            JMP     SHORT COMTRLOOP
  2856                                  
  2857                                  SETCOMSR:
  2858 00000BF1 56                              PUSH    SI
  2859 00000BF2 51                              PUSH    CX
  2860                                  
  2861 00000BF3 1E                              PUSH    DS
  2862                                  
  2863                                          ;IF      HIGHMEM
  2864                                          ;PUSH    CS
  2865                                          ;POP     DS
  2866                                          ;ENDIF
  2867                                  
  2868                                  	;MOV     SI,OFFSET RESGROUP:COMSPECT
  2869 00000BF4 BE[F20D]                	MOV     SI,COMSPECT
  2870 00000BF7 B90E00                          MOV     CX,14
  2871                                  
  2872                                          ;MOV     AL,ES:[DI-1]
  2873 00000BFA 268A45FF                        MOV     AL,[ES:DI-1]
  2874                                  
  2875                                          ;IF	KANJI
  2876                                          ;OR 	AH,AH
  2877                                          ;JNZ	INOTROOT ; Last char was KANJI second byte, might be '\'
  2878                                          ;ENDIF
  2879                                  
  2880 00000BFE E87C01                          CALL    PATHCHRCMPR
  2881 00000C01 7502                            JNZ     short INOTROOT
  2882 00000C03 46                              INC     SI              ; Don't make a double /
  2883 00000C04 49                              DEC     CX
  2884                                  INOTROOT:
  2885 00000C05 F3A4                            REP     MOVSB
  2886                                  
  2887 00000C07 8B16[160E]                      MOV     DX,[ECOMLOC]    ; Now lets make sure its good!
  2888 00000C0B 06                              PUSH    ES
  2889 00000C0C 1F                              POP     DS
  2890                                  
  2891                                          ;MOV     AX,OPEN SHL 8
  2892 00000C0D B8003D                          MOV     AX,OPEN*256
  2893 00000C10 CD21                            INT     int_command	; Open COMMAND.COM
  2894 00000C12 1F                              POP     DS
  2895 00000C13 720D                            JC      short SETCOMSRBAD ; No COMMAND.COM here
  2896 00000C15 89C3                            MOV     BX,AX           ; Handle
  2897 00000C17 B43E                            MOV     AH,CLOSE
  2898 00000C19 CD21                            INT     int_command	; Close COMMAND.COM
  2899                                  SETCOMSRRET:
  2900 00000C1B 59                              POP     CX
  2901 00000C1C 5E                              POP     SI
  2902                                  ARGSDONEJ2:
  2903 00000C1D E32D                            JCXZ    ARGSDONE
  2904 00000C1F E9FAFE                          JMP     CHKARG
  2905                                  
  2906                                  SETCOMSRBAD:
  2907                                  
  2908                                          ;IF	HIGHMEM
  2909                                          ;PUSH	DS
  2910                                          ;PUSH	CS
  2911                                          ;POP	DS
  2912                                          ;ENDIF
  2913                                  
  2914                                          ;MOV     DX,OFFSET RESGROUP:BADCOMLKMES
  2915 00000C22 BA[340E]                        MOV     DX,BADCOMLKMES
  2916 00000C25 B409                            MOV     AH,STD_CON_STRING_OUTPUT
  2917 00000C27 CD21                            INT     int_command
  2918                                          ;MOV     SI,OFFSET RESGROUP:COMSPECT
  2919 00000C29 BE[F20D]                        MOV     SI,COMSPECT
  2920 00000C2C 8B3E[160E]                      MOV     DI,[ECOMLOC]
  2921 00000C30 B90E00                          MOV     CX,14
  2922 00000C33 F3A4                            REP     MOVSB           ; Get my default back
  2923                                  
  2924                                          ;IF	HIGHMEM
  2925                                          ;POP	DS
  2926                                          ;ENDIF
  2927                                  
  2928 00000C35 EBE4                            JMP     SHORT SETCOMSRRET
  2929                                  
  2930                                  CHKARGJ:
  2931 00000C37 E9E2FE                          JMP	CHKARG
  2932                                  
  2933                                  SETPERM:
  2934 00000C3A FE06[7307]                      INC     byte [PERMCOM]
  2935                                  
  2936                                          ;IF	HIGHMEM
  2937                                          ;CMP	BYTE PTR CS:[PRDATTM],-1
  2938                                          ;ELSE
  2939 00000C3E 803E[100E]FF                    CMP     BYTE [PRDATTM],-1
  2940                                          ;ENDIF
  2941                                  
  2942 00000C43 7505                            JNZ     short LOOPIT
  2943                                  
  2944                                          ;IF	HIGHMEM
  2945                                          ;MOV	BYTE PTR CS:[PRDATTM],0 ; If not set explicit, set to prompt
  2946                                          ;ELSE
  2947 00000C45 C606[100E]00                    MOV     BYTE [PRDATTM],0
  2948                                          ;ENDIF
  2949                                  
  2950                                  LOOPIT:
  2951 00000C4A E2EB                            LOOP    CHKARGJ
  2952                                  ARGSDONE:
  2953 00000C4C 803E[7307]00                    CMP     byte [PERMCOM],0
  2954 00000C51 7427                            JZ      short COMRETURNS
  2955 00000C53 06                              PUSH    ES                      ; Save environment pointer
  2956 00000C54 B450                            MOV     AH,SET_CURRENT_PDB
  2957 00000C56 8CDB                            MOV     BX,DS
  2958 00000C58 8EC3                            MOV     ES,BX
  2959 00000C5A CD21                            INT     int_command		; Current process is me
  2960                                          ;MOV	DI,PDB_Exit             ; Diddle the addresses in my header
  2961 00000C5C BF0A00                          MOV	DI,PDB.EXIT
  2962                                          ;MOV	AX,OFFSET RESGROUP:LODCOM
  2963 00000C5F B8[8A01]                        MOV	AX,LODCOM
  2964 00000C62 AB                              STOSW
  2965 00000C63 8CD8                            MOV     AX,DS
  2966 00000C65 AB                              STOSW
  2967                                          ;MOV     AX,OFFSET RESGROUP:CONTC
  2968 00000C66 B8[BD00]                        MOV     AX,CONTC
  2969 00000C69 AB                              STOSW
  2970 00000C6A 8CD8                            MOV     AX,DS
  2971 00000C6C AB                              STOSW
  2972                                  	;MOV	WORD PTR DS:[PDB_Parent_PID],DS ; Parent is me forever
  2973 00000C6D 8C1E1600                	MOV	[PDB.PARENT_PID],DS
  2974                                          ;MOV	DX,OFFSET RESGROUP:INT_2E
  2975 00000C71 BA[5901]                        MOV	DX,INT_2E
  2976                                          ;MOV	AX,(SET_INTERRUPT_VECTOR SHL 8) OR 02EH
  2977 00000C74 B82E25                          MOV	AX,(SET_INTERRUPT_VECTOR*256) | 02EH
  2978 00000C77 CD21                            INT     int_command                     ;Set magic interrupt
  2979 00000C79 07                              POP     ES                              ;Remember environment
  2980                                  COMRETURNS:
  2981                                          ;MOV     AX,WORD PTR DS:[PDB_Parent_PID]
  2982 00000C7A A11600                  	MOV     AX,[PDB.PARENT_PID]
  2983 00000C7D A3[2D07]                        MOV     [PARENT],AX                     ; Save parent
  2984                                          ;MOV     WORD PTR DS:[PDB_Parent_PID],DS ; Parent is me
  2985 00000C80 8C1E1600                        MOV     [PDB.PARENT_PID],DS 
  2986                                          ;MOV     AX,WORD PTR DS:[PDB_JFN_Table]
  2987 00000C84 A11800                          MOV	AX,[PDB.JFN_TABLE]
  2988 00000C87 A3[7007]                        MOV     [IO_SAVE],AX		; Get the default stdin and out
  2989 00000C8A 8C1E[2109]                      MOV     [COM_PTR+2],DS		; Set all these to resident
  2990 00000C8E 8C1E[2509]                      MOV     [COM_FCB1+2],DS
  2991 00000C92 8C1E[2909]                      MOV     [COM_FCB2+2],DS
  2992                                          ;MOV     DI,OFFSET RESGROUP:COMSPEC
  2993 00000C96 BF[3A07]                        MOV	DI,COMSPEC
  2994                                  
  2995                                          ;IF      HIGHMEM
  2996                                          ;MOV     SI,CS:[ECOMLOC]
  2997                                          ;CMP     BYTE PTR CS:[CHUCKENV],0
  2998                                          ;ELSE
  2999 00000C99 8B36[160E]                      MOV     SI,[ECOMLOC]
  3000 00000C9D 803E[150E]00                    CMP     BYTE [CHUCKENV],0
  3001                                          ;ENDIF
  3002                                  
  3003 00000CA2 8CD8                            MOV     AX,DS                   ; XCHG ES,DS
  3004 00000CA4 06                              PUSH    ES
  3005 00000CA5 1F                              POP     DS
  3006 00000CA6 8EC0                            MOV     ES,AX
  3007                                  
  3008 00000CA8 741C                            JZ	short COPYCOMSP		; All set up for copy
  3009                                  
  3010 00000CAA 0E                              PUSH    CS
  3011 00000CAB 1F                              POP     DS
  3012                                  
  3013                                          ;MOV     SI,OFFSET RESGROUP:COMSPSTRING
  3014 00000CAC BE[180E]                	MOV     SI,COMSPSTRING
  3015 00000CAF 06                              PUSH    ES
  3016 00000CB0 57                              PUSH    DI
  3017 00000CB1 E8D700                          CALL    IFINDE
  3018 00000CB4 89FE                            MOV     SI,DI
  3019 00000CB6 06                              PUSH    ES
  3020 00000CB7 1F                              POP     DS
  3021 00000CB8 5F                              POP     DI
  3022 00000CB9 07                              POP     ES
  3023 00000CBA 730A                            JNC     short COPYCOMSP
  3024                                  
  3025                                  COMSPECNOFND:
  3026                                  
  3027                                          ;IF      HIGHMEM
  3028                                          ;MOV     DS,CS:[ENVIRSEG]
  3029                                          ;MOV     SI,CS:[ECOMLOC]
  3030                                          ;ELSE
  3031 00000CBC 8B36[160E]                      MOV     SI,[ECOMLOC]
  3032                                          ;ADD     SI,OFFSET RESGROUP:PATHSTRING
  3033 00000CC0 81C6[D009]                      ADD	SI,PATHSTRING
  3034 00000CC4 0E                      	PUSH    CS
  3035 00000CC5 1F                              POP     DS
  3036                                          ;ENDIF
  3037                                  
  3038                                  COPYCOMSP:
  3039 00000CC6 AC                              LODSB
  3040 00000CC7 AA                              STOSB
  3041 00000CC8 08C0                            OR      AL,AL
  3042 00000CCA 75FA                            JNZ     short COPYCOMSP
  3043                                  
  3044                                          ;IF      HIGHMEM
  3045                                          ;MOV     DS,CS:[REALRES]
  3046                                          ;PUSH    CS
  3047                                          ;POP     ES
  3048                                          ;MOV     AH,DEALLOC
  3049                                          ;INT     21H
  3050                                          ;CMP     BYTE PTR CS:[CHUCKENV],0
  3051                                          ;JZ      GOTENVIR		; Environment is ok
  3052                                          ;MOV     ES,CS:[ENVIRSEGSAV]
  3053                                          ;MOV     AH,DEALLOC
  3054                                          ;INT     21H
  3055                                          ;ELSE
  3056 00000CCC 0E                              PUSH    CS
  3057 00000CCD 1F                              POP     DS
  3058                                          ;MOV     BX,OFFSET RESGROUP:DATARESEND + 15
  3059 00000CCE BB[CB09]                	mov	BX, DATARESEND + 15
  3060 00000CD1 B104                            MOV     CL,4
  3061 00000CD3 D3EB                            SHR     BX,CL
  3062 00000CD5 B44A                            MOV     AH,SETBLOCK
  3063 00000CD7 CD21                            INT     int_command		; Shrink me to the resident only
  3064 00000CD9 803E[150E]00                    CMP     BYTE [CHUCKENV],0
  3065 00000CDE 751C                            JNZ     SHORT GOTENVIR		; Environment was passed
  3066 00000CE0 BB0A00                          MOV     BX,(ENVIRONSIZ + 15) /16
  3067 00000CE3 B448                            MOV     AH,ALLOC
  3068 00000CE5 CD21                            INT     int_command		; "ALLOCATE" the environment
  3069 00000CE7 8E1E[1D09]                      MOV     DS,[ENVIRSEG]
  3070                                          ;MOV     [ENVIRSEG],AX
  3071 00000CEB 2EA3[1D09]                      MOV     [CS:ENVIRSEG],AX
  3072 00000CEF 8EC0                            MOV     ES,AX
  3073 00000CF1 31F6                            XOR     SI,SI
  3074 00000CF3 89F7                            MOV     DI,SI
  3075 00000CF5 B9A000                          MOV     CX,ENVIRONSIZ
  3076 00000CF8 F3A4                            REP     MOVSB
  3077 00000CFA 0E                              PUSH    CS
  3078 00000CFB 1F                              POP     DS
  3079                                          ;ENDIF
  3080                                  
  3081                                  GOTENVIR:
  3082 00000CFC E8F4F5                          CALL    LOADCOM                 ; Load the transient in the right place
  3083 00000CFF E840F6                          CALL    CHKSUM                  ; Compute the checksum
  3084 00000D02 8916[6A07]                      MOV     [SUM],DX                ; Save it
  3085                                  ;IF IBM
  3086                                          ;MOV     AX,[MEMSIZ]
  3087                                          ;;MOV     DX,OFFSET EGROUP:ZEXECDATAEND + 15
  3088                                          ;MOV     DX,EGROUP+ZEXECDATAEND + 15
  3089                                          ;MOV     CL,4
  3090                                          ;SHR     DX,CL
  3091                                          ;SUB     AX,DX
  3092                                          ;MOV     [EXESEG],AX
  3093                                          ;CALL    EXECHK
  3094                                          ;MOV     [EXESUM],DX
  3095                                  ;ENDIF
  3096                                          ;IF MSVER
  3097 00000D06 833E[7407]00                    CMP     word [SINGLECOM],0
  3098 00000D0B 7507                            JNZ     short NOPHEAD	; Don't print header if SINGLECOM
  3099                                          ;IF	HIGHMEM
  3100                                          ;PUSH    DS
  3101                                          ;PUSH    CS
  3102                                          ;POP     DS
  3103                                          ;ENDIF
  3104                                          ;MOV     DX,OFFSET RESGROUP:HEADER
  3105 00000D0D BA[200E]                	MOV     DX,HEADER
  3106 00000D10 B409                            MOV     AH,STD_CON_STRING_OUTPUT
  3107 00000D12 CD21                            INT     int_command
  3108                                          ;IF      HIGHMEM
  3109                                          ;POP     DS
  3110                                          ;ENDIF
  3111                                  NOPHEAD:
  3112                                  	;ENDIF
  3113                                  
  3114                                          ;IF      HIGHMEM
  3115                                          ;CMP     BYTE PTR CS:[PRDATTM],0
  3116                                          ;ELSE
  3117 00000D14 803E[100E]00                    CMP     BYTE [PRDATTM],0
  3118                                          ;ENDIF
  3119                                  
  3120 00000D19 755F                            JNZ	short NODTTM	; Don't do AUTOEXEC or date time
  3121 00000D1B BB0300                          MOV     BX,3		; 48 BYTES ENOUGH
  3122 00000D1E B448                            MOV     AH,ALLOC
  3123 00000D20 CD21                            INT     int_command
  3124 00000D22 7246                            JC      short DODTTM	; PRETEND NO BATCH
  3125 00000D24 A3[3407]                        MOV     [BATCH],AX
  3126 00000D27 8EC0                            MOV     ES,AX
  3127 00000D29 31FF                            XOR     DI,DI
  3128                                  
  3129                                          ;IF      HIGHMEM
  3130                                          ;CMP     BYTE PTR CS:[AUTOBAT],0
  3131                                          ;ELSE
  3132 00000D2B 803E[000E]00                    CMP     BYTE [AUTOBAT],0
  3133                                          ;ENDIF
  3134                                  
  3135 00000D30 7509                            JNZ	short NOAUTSET
  3136 00000D32 B419                            MOV     AH,GET_DEFAULT_DRIVE
  3137 00000D34 CD21                            INT     int_command
  3138 00000D36 0441                            ADD     AL,'A'
  3139                                  
  3140                                          ;IF      HIGHMEM
  3141                                          ;MOV     CS:[AUTOBAT],AL
  3142                                          ;ELSE
  3143 00000D38 A2[000E]                        MOV     [AUTOBAT],AL
  3144                                          ;ENDIF
  3145                                  
  3146                                  NOAUTSET:
  3147                                  
  3148                                          ;IF      HIGHMEM
  3149                                          ;PUSH    DS
  3150                                          ;PUSH    CS
  3151                                          ;POP     DS
  3152                                          ;ENDIF
  3153                                  
  3154                                          ;MOV     SI,OFFSET RESGROUP:AUTOBAT
  3155 00000D3B BE[000E]                	MOV     SI,AUTOBAT
  3156 00000D3E B90800                          MOV     CX,8
  3157 00000D41 F3A5                            REP     MOVSW   ; NAME
  3158 00000D43 B8FFFF                          MOV     AX,-1
  3159 00000D46 B10A                            MOV     CL,10
  3160 00000D48 F3AB                            REP     STOSW   ; PARMS
  3161                                          ;MOV     DX,OFFSET RESGROUP:AUTOBAT
  3162 00000D4A BA[000E]                        MOV     DX,AUTOBAT
  3163                                          ;MOV     AX,OPEN SHL 8
  3164 00000D4D B8003D                          MOV     AX,OPEN*256
  3165 00000D50 CD21                            INT     int_command	; See if AUTOEXEC.BAT exists
  3166 00000D52 7208                            JC	short NOABAT
  3167 00000D54 89C3                            MOV     BX,AX
  3168 00000D56 B43E                            MOV     AH,CLOSE
  3169 00000D58 CD21                            INT     int_command
  3170                                  
  3171                                  	;IF      HIGHMEM
  3172                                          ;POP     DS
  3173                                          ;ENDIF
  3174                                  
  3175 00000D5A EB1E                            JMP     SHORT DRV0 	
  3176                                  
  3177                                  NOABAT:
  3178                                          ;IF      HIGHMEM
  3179                                          ;POP     DS
  3180                                          ;ENDIF
  3181                                  
  3182 00000D5C 8E06[3407]                      MOV     ES,[BATCH]      ; Not found--turn off batch job
  3183 00000D60 B449                            MOV     AH,DEALLOC
  3184 00000D62 CD21                            INT     int_command
  3185 00000D64 C706[3407]0000                  MOV     word [BATCH],0	; AFTER DEALLOC in case of ^C
  3186                                  DODTTM:
  3187                                  
  3188                                          ;IF      HIGHMEM
  3189                                          ;MOV     AX,OFFSET TRANGROUP:DATINIT
  3190                                          ;MOV     WORD PTR CS:[INITADD],AX
  3191                                          ;MOV     AX,[TRNSEG]
  3192                                          ;MOV     WORD PTR CS:[INITADD+2],AX
  3193                                          ;CALL    DWORD PTR CS:[INITADD]
  3194                                          ;ELSE
  3195                                          ;MOV     AX,OFFSET TRANGROUP:DATINIT
  3196 00000D6A B84813                  	MOV     AX,DATINIT
  3197                                          ;MOV     WORD PTR[INITADD],AX
  3198 00000D6D A3[110E]                        MOV     [INITADD],AX
  3199 00000D70 A1[6407]                        MOV     AX,[TRNSEG]
  3200                                          ;MOV     WORD PTR[INITADD+2],AX
  3201 00000D73 A3[130E]                        MOV     [INITADD+2],AX
  3202                                          ;CALL    DWORD PTR [INITADD]
  3203 00000D76 FF1E[110E]                      CALL	FAR [INITADD]
  3204                                          ;ENDIF
  3205                                  
  3206                                  NODTTM:
  3207                                          ;;IF IBMVER
  3208                                          ;CMP	WORD [SINGLECOM],0
  3209                                          ;JNZ	short DRV0	; Don't print header if SINGLECOM
  3210                                          ;;MOV	 DX,OFFSET RESGROUP:HEADER
  3211                                          ;MOV	DX,HEADER
  3212                                          ;MOV	AH,STD_CON_STRING_OUTPUT
  3213                                          ;INT	int_command
  3214                                          ;;ENDIF
  3215                                  
  3216                                  DRV0:
  3217                                          ;IF      HIGHMEM
  3218                                          ;PUSH    DS
  3219                                          ;MOV     AX,OFFSET RESGROUP:LODCOM
  3220                                          ;PUSH    AX
  3221                                  ;MQQ    PROC    FAR
  3222                                  ;	RET
  3223                                  ;MQQ	ENDP
  3224                                          ;ELSE
  3225 00000D7A E90DF4                          JMP     LODCOM		; Allocate the transient
  3226                                          ;ENDIF
  3227                                  
  3228                                  PATHCHRCMPR:
  3229 00000D7D 803E[B209]2F                    CMP     byte [RSWITCHAR],'/'
  3230 00000D82 7404                            JZ      short RNOSLASHT
  3231 00000D84 3C2F                            CMP     AL,'/'
  3232 00000D86 7402                            JZ      short RET41
  3233                                  RNOSLASHT:
  3234 00000D88 3C5C                            CMP     AL,'\'
  3235                                  RET41:
  3236 00000D8A C3                              RETN
  3237                                  
  3238                                  IFINDE:
  3239 00000D8B E80400                          CALL    IFIND		; FIND THE NAME
  3240 00000D8E 722D                            JC      short IFIND2	; CARRY MEANS NOT FOUND
  3241 00000D90 EB3A                            JMP     short ISCASB1	; SCAN FOR = SIGN
  3242                                  ;
  3243                                  ; On return of FIND1, ES:DI points to beginning of name
  3244                                  ;
  3245                                  IFIND:
  3246 00000D92 FC                              CLD
  3247                                  
  3248 00000D93 E82800                          CALL    ICOUNT0		; CX = LENGTH OF NAME
  3249                                  
  3250                                          ;IF      HIGHMEM
  3251                                          ;MOV     ES,CS:[REALRES]
  3252                                  ;ASSUME  ES:RESGROUP
  3253                                  ;        MOV     ES,ES:[ENVIRSEG]
  3254                                  ;ASSUME  ES:NOTHING
  3255                                          ;ELSE
  3256 00000D96 8E06[1D09]                      MOV     ES,[ENVIRSEG]
  3257                                          ;ENDIF
  3258                                  
  3259 00000D9A 31FF                            XOR     DI,DI
  3260                                  IFIND1:
  3261 00000D9C 51                              PUSH    CX
  3262 00000D9D 56                              PUSH    SI
  3263 00000D9E 57                              PUSH    DI
  3264                                  IFIND11:
  3265 00000D9F AC                              LODSB
  3266                                  
  3267                                          ;IF      KANJI
  3268                                          ;CALL    ITESTKANJ
  3269                                          ;JZ      NOTKANJ4
  3270                                          ;DEC     SI
  3271                                          ;LODSW
  3272                                          ;INC     DI
  3273                                          ;INC     DI
  3274                                          ;CMP     AX,ES:[DI-2]
  3275                                          ;JNZ     IFIND12
  3276                                          ;DEC     CX
  3277                                          ;LOOP    IFIND11
  3278                                          ;JMP     SHORT IFIND12
  3279                                  ;NOTKANJ4:
  3280                                          ;ENDIF
  3281                                  
  3282 00000DA0 E83500                          CALL    IUPCONV
  3283 00000DA3 47                              INC     DI
  3284 00000DA4 263A45FF                        CMP     AL,[ES:DI-1]
  3285 00000DA8 7502                            JNZ     short IFIND12
  3286 00000DAA E2F3                            LOOP    IFIND11
  3287                                  IFIND12:
  3288 00000DAC 5F                              POP     DI
  3289 00000DAD 5E                              POP     SI
  3290 00000DAE 59                              POP     CX
  3291 00000DAF 740C                            JZ      short IFIND2
  3292 00000DB1 51                              PUSH    CX
  3293 00000DB2 E81B00                          CALL    ISCASB2		; SCAN FOR A NUL
  3294 00000DB5 59                              POP     CX
  3295 00000DB6 26803D00                        CMP     BYTE [ES:DI],0
  3296 00000DBA 75E0                            JNZ     short IFIND1
  3297 00000DBC F9                              STC			; INDICATE NOT FOUND
  3298                                  IFIND2:
  3299 00000DBD C3                              RETN
  3300                                  
  3301                                  ICOUNT0:
  3302 00000DBE 1E                              PUSH    DS
  3303 00000DBF 07                              POP     ES
  3304 00000DC0 89F7                            MOV     DI,SI
  3305                                  
  3306 00000DC2 57                              PUSH    DI 		; COUNT NUMBER OF CHARS UNTIL "="
  3307 00000DC3 E80600                          CALL    ISCASB1
  3308                                  ;	JMP     SHORT ICOUNTX
  3309                                  ;	PUSH    DI		; COUNT NUMBER OF CHARS UNTIL NUL
  3310                                  ;	CALL    ISCASB2
  3311                                  ICOUNTX:
  3312 00000DC6 59                              POP     CX
  3313 00000DC7 29CF                            SUB     DI,CX
  3314 00000DC9 87F9                            XCHG    DI,CX
  3315 00000DCB C3                              RETN
  3316                                  
  3317                                  ISCASB1:
  3318 00000DCC B03D                            MOV     AL,"=" 		; SCAN FOR AN =
  3319 00000DCE EB02                            JMP     SHORT ISCASBX
  3320                                  ISCASB2:
  3321 00000DD0 30C0                            XOR     AL,AL		; SCAN FOR A NUL
  3322                                  ISCASBX:
  3323 00000DD2 B90001                          MOV     CX,100H
  3324 00000DD5 F2AE                            REPNZ   SCASB
  3325 00000DD7 C3                              RETN
  3326                                  
  3327                                          ;IF      KANJI
  3328                                  ;ITESTKANJ:
  3329                                          ;CMP     AL,81H
  3330                                          ;JB      NOTLEAD
  3331                                          ;CMP     AL,9FH
  3332                                          ;JBE     ISLEAD
  3333                                          ;CMP     AL,0E0H
  3334                                          ;JB      NOTLEAD
  3335                                          ;CMP     AL,0FCH
  3336                                          ;JBE     ISLEAD
  3337                                  ;NOTLEAD:
  3338                                          ;PUSH    AX
  3339                                          ;XOR     AX,AX           ;Set zero
  3340                                          ;POP     AX
  3341                                          ;RET
  3342                                  
  3343                                  ;ISLEAD:
  3344                                          ;PUSH    AX
  3345                                          ;XOR     AX,AX           ;Set zero
  3346                                          ;INC     AX              ;Reset zero
  3347                                          ;POP     AX
  3348                                          ;RET
  3349                                          ;ENDIF
  3350                                  
  3351                                  IUPCONV:
  3352 00000DD8 3C61                            CMP     AL,"a"
  3353 00000DDA 7206                            JB      IRET22
  3354 00000DDC 3C7A                            CMP     AL,"z"
  3355 00000DDE 7702                            JA      IRET22
  3356 00000DE0 2C20                            SUB     AL,20H          ; Lower-case changed to upper-case
  3357                                  IRET22:
  3358 00000DE2 C3                              RETN
  3359                                  
  3360                                          ;IF IBM
  3361                                  ;HEADER	db 0Dh,0Ah
  3362                                  	;db 0Dh,0Ah
  3363                                  	;db 'The IBM Personal Computer DOS',0Dh,0Ah
  3364                                  	;db 'Version 2.10 (C)Copyright IBM Corp 1981, 1982, 1983',0Dh,0Ah
  3365                                  	;db '$Licensed Material - Program Property of IBM/DEV/CON',0
  3366                                          ;ENDIF
  3367                                  
  3368                                  ;ICONDEV LABEL BYTE
  3369                                  ICONDEV:
  3370 00000DE3 2F4445562F                      DB      "/DEV/"
  3371 00000DE8 434F4E000000000000              DB      "CON",0,0,0,0,0,0          ; Room for 8 char device
  3372 00000DF1 00                      BADCSPFL DB     0
  3373 00000DF2 2F434F4D4D414E442E-     COMSPECT DB     "/COMMAND.COM",0,0
  3374 00000DFB 434F4D0000         
  3375 00000E00 003A5C4155544F4558-     AUTOBAT DB      0,":\AUTOEXEC.BAT",0
  3376 00000E09 45432E42415400     
  3377                                  
  3378 00000E10 FF                      PRDATTM DB      -1                      ;Init not to prompt for date time
  3379                                  ;INITADD DD     ?
  3380 00000E11 00000000                INITADD DD      0
  3381 00000E15 00                      CHUCKENV DB     0
  3382                                  ;ECOMLOC DW     OFFSET ENVIRONMENT:ECOMSPEC-10H
  3383 00000E16 0E00                    ECOMLOC	DW	ECOMSPEC-ENVIRONMENT ; 30/04/2018	
  3384                                  
  3385                                          ;IF      HIGHMEM
  3386                                  ;REALRES DW      ?
  3387                                  ;ENVIRSEGSAV DW  ?
  3388                                          ;ENDIF
  3389                                  
  3390 00000E18 434F4D535045433D        COMSPSTRING DB  "COMSPEC="
  3391                                  
  3392                                  ;INIT    ENDS
  3393                                  
  3394                                  ;        END
  3395                                  
  3396                                  ;=============================================================================
  3397                                  ; UINIT.ASM
  3398                                  ;=============================================================================
  3399                                  
  3400                                  ;TITLE   COMMAND Initialization messages
  3401                                  
  3402                                  ;INIT    SEGMENT PUBLIC BYTE
  3403                                  
  3404                                          ;PUBLIC  BADCOMLKMES
  3405                                  
  3406                                          ;PUBLIC  HEADER
  3407                                          ;IF      NOT IBM
  3408 00000E20 0D0A436F6D6D616E64-     HEADER  DB      13,10,"Command v. 2.11"
  3409 00000E29 20762E20322E3131   
  3410                                          ;IF      HIGHMEM
  3411                                          ;DB      "H"
  3412                                          ;ENDIF
  3413 00000E31 0D0A24                          DB      13,10,"$"
  3414                                          ;ENDIF
  3415                                  
  3416                                          ;IF IBM
  3417                                  ;HEADER DB      13,10,13,10,"TeleVideo Personal Computer DOS Vers. 2.11",13,10
  3418                                          ;DB      "(C) Copyright TeleVideo Systems, Inc. 1983",13,10
  3419                                  	;DB	"(C) Copyright Microsoft Corp. 1981, 1982, 1983",13,10,"$"
  3420                                          ;ENDIF
  3421                                  
  3422 00000E34 537065636966696564-     BADCOMLKMES DB  "Specified COMMAND search directory bad",13,10,"$"
  3423 00000E3D 20434F4D4D414E4420-
  3424 00000E46 736561726368206469-
  3425 00000E4F 726563746F72792062-
  3426 00000E58 61640D0A24         
  3427                                  
  3428 00000E5D 00                      	db  0 ; 01/05/2018 (15699+1 = 15700 bytes of COMMAND.COM size) 
  3429                                  
  3430                                  ;INIT    ENDS
  3431                                  
  3432                                  ;        END
  3433                                  
  3434                                  ; ----------------------------------------------------------------------------
  3435                                  
  3436                                  ;TAIL    SEGMENT PUBLIC PARA
  3437                                  ;        ORG     0
  3438                                  ;TRANSTART       LABEL   WORD
  3439                                  ;TAIL    ENDS
  3440                                  
  3441                                  ;ALIGN 16
  3442                                  
  3443                                  ;TRANSTART:
  3444                                  
  3445                                  ; 21/04/2018 (Retro DOS v2.0 COMMAND)
  3446                                  ;	times	128 db 0	
  3447                                  
  3448                                  ; 16/02/2018 (Retro DOS v2.0 COMMAND)
  3449                                  ; ----------------------------------------------------------------------------
  3450                                  ; SEGMENT - TRANSCODE
  3451                                  ; ----------------------------------------------------------------------------
  3452                                  
  3453                                  TRANGROUP: ; 21/04/2018
  3454                                  
  3455                                  ;=============================================================================
  3456                                  ; TRANCODE.ASM
  3457                                  ;=============================================================================
  3458                                  
  3459                                  ; 21/04/2018
  3460                                  ; transcom.s (COMMAND.COM source file 2 of 2) code/data addresses 
  3461                                  ; (these values must be changed when transcom.s source code is changed
  3462                                  ; and data offsets are changed)
  3463                                  
  3464                                  ; 30/04/2018
  3465                                  ; 29/04/2018
  3466                                  
  3467                                  COMMAND      EQU  002CH + 100h
  3468                                  DATINIT	     EQU  1248H + 100h
  3469                                  HEADCALL     EQU  2BD8H + 100h
  3470                                  TRANSPACEEND EQU  2EF6H + 100h
  3471                                  TRANDATAEND  EQU  2A40h	+ 100h					
  3472                                  
  3473                                  ;TPA	EQU  2BDCH + 100h
  3474                                  ;TRNLEN	EQU  0300H
  3475                                  
  3476                                  ; ----------------------------------------------------------------------------
  3477                                  ;START OF TRANSIENT PORTION
  3478                                  ;This code is loaded at the end of memory and may be overwritten by
  3479                                  ;memory-intensive user programs.
  3480                                  ; ----------------------------------------------------------------------------
  3481                                  
  3482                                  TRANSTART EQU $-100h
  3483                                  
  3484                                  COMTRANS:
  3485                                  
  3486 00000E5E <incbin>                INCBIN	"TRANSCOM.BIN"
  3487                                  
  3488                                  ;COMLEN	EQU $-COMTRANS ; End of COMMAND load.
  3489                                  
  3490                                  ; 29/04/2018
  3491                                  BSS_SIZE EQU TRANSPACEEND-TRANDATAEND	
  3492                                  
  3493 0000389E 00<rept>                TIMES BSS_SIZE db 0
  3494                                  
  3495                                  COMLEN	EQU $-COMTRANS ; 30/04/2018
  3496                                  
  3497                                  COMMANDCOMSIZE equ $ - 100h
