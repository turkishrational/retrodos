     1                                  ; TRANSIENT PART OF COMMAND.COM
     2                                  ; ****************************************************************************
     3                                  ; COMMAND.COM (MSDOS 2.0 Command Interpreter) - RETRO DOS v2.0 by ERDOGAN TAN
     4                                  ; ----------------------------------------------------------------------------
     5                                  ; Last Update: 01/05/2018
     6                                  ; ----------------------------------------------------------------------------
     7                                  ; Beginning: 15/02/2018 (COMMAND.COM v1.17) - 21/04/2018 (COMMAND.COM v2.11)
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Assembler: NASM version 2.11  
    10                                  ; ----------------------------------------------------------------------------
    11                                  ;	    ((nasm command2.s -l command2.lst -o COMMAND.COM)) 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Derived from 'COMMAND.ASM' file of MSDOS 2.11 (IBM PCDOS v2.11) source code
    14                                  ; by Microsoft, 18/08/1983
    15                                  ; ****************************************************************************
    16                                  ; Modified from 'COMMAND.S' (MSDOS 1.25 COMMAND.COM) source code
    17                                  ; in NASM syntax (by Erdogan Tan), 23/02/2018
    18                                  ; ----------------------------------------------------------------------------
    19                                  ;
    20                                  ;;============================================================================
    21                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    22                                  ; (IBMDOS 2.10 COMMAND.COM) output in TASM syntax (21/04/2018..23/04/2018)
    23                                  ;;============================================================================
    24                                  ;
    25                                  ; COMMAND.COM v2.11 source files:
    26                                  ;      COMMAND.ASM (+ DOSYM.ASM,DEVSYM.ASM,COMSW.ASM,COMEQU.ASM,IFEQU.ASM)
    27                                  ;      RUCODE.ASM, RDATA.ASM, INIT.ASM, UINIT.ASM
    28                                  ;      TCODE.ASM, TCODE2.ASM, TCODE3.ASM, TCODE4.ASM, TCODE5.ASM,
    29                                  ;      TUCODE.ASM, COPY.ASM, COPYPROC.ASM, CPARSE.ASM, TDATA.ASM, TSPC.ASM
    30                                  ;
    31                                  ;=============================================================================
    32                                  ; COMLINK
    33                                  ;=============================================================================
    34                                  ;command rucode rdata init uinit tcode tcode2 tcode3 +
    35                                  ;tcode4 tcode5 tucode copy copyproc cparse tdata tspc;
    36                                  
    37                                  ; (command2.s -> COMTRANS: INCBIN "TRANSCOM.BIN") ; 21/04/2018
    38                                  
    39                                  ;
    40                                  ; This version of COMMAND is divided into three distinct parts.  First is the
    41                                  ; resident portion, which includes handlers for interrupts 22H (terminate),
    42                                  ; 23H (Cntrl-C), 24H (fatal error), and 27H (stay resident); it also has code
    43                                  ; to test and, if necessary, reload the transient portion.  Following the
    44                                  ; resident is the init code, which is overwritten after use.  Then comes the
    45                                  ; transient portion, which includes all command processing (whether internal
    46                                  ; or external).  The transient portion loads at the end of physical memory,
    47                                  ; and it may be overlayed by programs that need as much memory as possible.
    48                                  ; When the resident portion of command regains control from a user program, a
    49                                  ; checksum is performed on the transient portion to see if it must be
    50                                  ; reloaded.  Thus programs which do not need maximum memory will save the time
    51                                  ; required to reload COMMAND when they terminate.
    52                                  
    53                                  ;
    54                                  ; REV 1.17
    55                                  ;    05/19/82   Fixed bug in BADEXE error (relocation error must return to
    56                                  ;               resident since the EXELOAD may have overwritten the transient.
    57                                  ; REV 1.18
    58                                  ;    05/21/82   IBM version always looks on drive A
    59                                  ;               MSVER always looks on default drive
    60                                  ;
    61                                  ; REV 1.19
    62                                  ;    06/03/82   Drive spec now entered in command line
    63                                  ;    06/07/82   Added VER command (print DOS version number) and VOL command
    64                                  ;               (print volume label)
    65                                  ; REV 1.20
    66                                  ;    06/09/82   Prints "directory" after directories
    67                                  ;    06/13/82   MKDIR, CHDIR, PWD, RMDIR added
    68                                  ; REV 1.50
    69                                  ;               Some code for new 2.0 DOS, sort of HACKey. Not enough time to
    70                                  ;               do it right.
    71                                  ; REV 1.70
    72                                  ;               EXEC used to fork off new processes
    73                                  ; REV 1.80
    74                                  ;               C switch for single command execution
    75                                  ; REV 1.90
    76                                  ;               Batch uses XENIX
    77                                  ; Rev 2.00
    78                                  ;               Lots of neato stuff
    79                                  ;               IBM 2.00 level
    80                                  ; Rev 2.01
    81                                  ;               'D' switch for date time suppression
    82                                  ; Rev 2.02
    83                                  ;               Default userpath is NUL rather than BIN
    84                                  ;                       same as IBM
    85                                  ;               COMMAND split into pieces
    86                                  ; Rev 2.10
    87                                  ;               INTERNATIONAL SUPPORT
    88                                  ; Rev 2.11      COMMAND split into more pieces
    89                                  
    90                                  ; ----------------------------------------------------------------------------
    91                                  
    92                                  ;	INCLUDE DOSSYM.ASM
    93                                  ;	INCLUDE DEVSYM.ASM
    94                                  ;	INCLUDE COMSW.ASM
    95                                  ;	INCLUDE COMEQU.ASM
    96                                  
    97                                  ; ----------------------------------------------------------------------------
    98                                  
    99                                  ;=============================================================================
   100                                  ; DOSSYM.ASM
   101                                  ;=============================================================================
   102                                  
   103                                  ;<Control character definitions>
   104                                  
   105                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   106                                  c_BS        EQU     08h         ; ^H ASCII backspace
   107                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   108                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   109                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   110                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   111                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   112                                  c_HT        EQU     09h         ; ^I ASCII tab
   113                                  
   114                                  ;<BPB Definition>
   115                                  
   116                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   117                                  ;                                                                          ;
   118                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   119                                  ;                                                                          ;
   120                                  ; Certain structures, constants and system  calls  below  are  private  to ;
   121                                  ; the DOS  and  are  extremely  version-dependent.  They may change at any ;
   122                                  ; time at  the  implementors'  whim.   As  a  result,  they  must  not  be ;
   123                                  ; documented to  the  general  public.   If  an  extreme case arises, they ;
   124                                  ; must be documented with this warning.                                    ;
   125                                  ;                                                                          ;
   126                                  ; Those structures and constants that are subject to  the  above  will  be ;
   127                                  ; marked and bracketed with the flag:                                      ;
   128                                  ;                                                                          ;
   129                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   130                                  ;                                                                          ;
   131                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   132                                  
   133                                  ; <Bios Parameter Block>
   134                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   135                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   136                                  ;                                                                          ;
   137                                  
   138                                  ; Bios Parameter Block definition
   139                                  ; This structure is used to build a full DPB
   140                                  
   141                                  struc BPBLOCK
   142 00000000 <res 00000002>          .SECSZ: resw 1		; Size in bytes of physical sector
   143 00000002 <res 00000001>          .CLUS:  resb 1		; Sectors/Alloc unit
   144 00000003 <res 00000002>          .RES:   resw 1		; Number of reserved sectors
   145 00000005 <res 00000001>          .FTCNT: resb 1		; Number of FATs
   146 00000006 <res 00000002>          .DRCNT: resw 1		; Number of directory entries
   147 00000008 <res 00000002>          .SCCNT: resw 1		; Total number of sectors
   148 0000000A <res 00000001>          .MEDIA: resb 1		; Media descriptor byte
   149 0000000B <res 00000002>          .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   150                                  .size:
   151                                  endstruc
   152                                  ;                                                                          ;
   153                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   154                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   155                                  
   156                                  ; <Disk I/O Buffer Header>
   157                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   158                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   159                                  ;                                                                          ;
   160                                  
   161                                  ; Field definition for I/O buffer information
   162                                  
   163                                  struc BUFFINFO
   164 00000000 <res 00000004>          .NEXTBUF:	resd 1		; Pointer to next buffer in list
   165                                  ; The next two items are often refed as a word
   166 00000004 <res 00000001>          .BUFDRV:	resb 1		; Logical drive # assoc with buffer FF = free
   167 00000005 <res 00000001>          .BUFDIRTY:	resb 1		; Dirty flag
   168 00000006 <res 00000001>          .BUFPRI:	resb 1		; Buffer selection priority (see EQUs below)
   169 00000007 <res 00000001>          .VISIT:		resb 1		; Visit flag for buffer pool scans
   170 00000008 <res 00000002>          .BUFSECNO:	resw 1		; Sector number of buffer
   171                                  ; The next two items are often refed as a word
   172 0000000A <res 00000001>          .BUFWRTCNT:	resb 1		; For FAT sectors, # times sector written out
   173 0000000B <res 00000001>          .BUFWRTINC:	resb 1		; "   "     "   , # sectors between each write
   174 0000000C <res 00000004>          .BUFDRVDP:	resd 1		; Pointer to drive parameters
   175                                  .size:
   176                                  endstruc
   177                                  
   178                                  BUFINSIZ        EQU     BUFFINFO.size
   179                                  
   180                                                                  ; Size of structure in bytes
   181                                  FREEPRI EQU     0
   182                                  LBRPRI  EQU     2               ; Last byte of buffer read
   183                                  LBWPRI  EQU     4               ; Last byte written
   184                                  RPRI    EQU     6               ; Read but not last byte
   185                                  WPRI    EQU     8               ; Written but not last byte
   186                                  DIRPRI  EQU     15              ; Directory Sector
   187                                  FATPRI  EQU     30              ; FAT sector
   188                                  ;                                                                          ;
   189                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   190                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   191                                  
   192                                  ; <User stack inside of system call>
   193                                  ; Location of user registers relative user stack pointer
   194                                  
   195                                  struc	user_env   ; user_environ
   196 00000000 <res 00000002>          .user_AX: resw 1
   197 00000002 <res 00000002>          .user_BX: resw 1
   198 00000004 <res 00000002>          .user_CX: resw 1
   199 00000006 <res 00000002>          .user_DX: resw 1
   200 00000008 <res 00000002>          .user_SI: resw 1
   201 0000000A <res 00000002>          .user_DI: resw 1
   202 0000000C <res 00000002>          .user_BP: resw 1
   203 0000000E <res 00000002>          .user_DS: resw 1
   204 00000010 <res 00000002>          .user_ES: resw 1
   205 00000012 <res 00000002>          .user_IP: resw 1
   206 00000014 <res 00000002>          .user_CS: resw 1
   207 00000016 <res 00000002>          .user_F:  resw 1
   208                                  .size:
   209                                  endstruc
   210                                  
   211                                  ; <interrupt definitions>
   212                                  
   213                                  INTTAB          EQU     20H
   214                                  INTBASE         EQU     4 * INTTAB
   215                                  ENTRYPOINT      EQU     INTBASE+40H
   216                                  
   217                                  ;	IF      ALTVECT
   218                                  ;ALTTAB  EQU     0F0H
   219                                  ;ALTBASE EQU     4 * ALTTAB
   220                                  ;	ENDIF
   221                                  
   222                                  ;
   223                                  ; interrupt assignments
   224                                  ;
   225                                  ;	IF	NOT ALTVECT
   226                                  int_abort           EQU     INTTAB          ; abort process
   227                                  int_command         EQU     int_abort+1     ; call MSDOS
   228                                  int_terminate       EQU     int_abort+2     ; int to terminate address
   229                                  int_ctrl_c          EQU     int_abort+3     ; ^c trapper
   230                                  int_fatal_abort     EQU     int_abort+4     ; hard disk error
   231                                  int_disk_read       EQU     int_abort+5     ; logical sector disk read
   232                                  int_disk_write      EQU     int_abort+6     ; logical sector disk write
   233                                  int_keep_process    EQU     int_abort+7     ; terminate program and stay resident
   234                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   235                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   236                                  ;                                                                          ;
   237                                  int_spooler         EQU     int_abort+8     ; spooler call
   238                                  int_fastcon         EQU     int_abort+9     ; fast CON interrupt
   239                                  ;                                                                          ;
   240                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   242                                          ;ELSE
   243                                  ;int_abort          EQU     INTTAB          ; abort process
   244                                  ;int_command        EQU     int_abort+1     ; call MSDOS
   245                                  ;int_terminate      EQU     ALTTAB          ; int to terminate address
   246                                  ;int_ctrl_c         EQU     int_terminate+1 ; ^c trapper
   247                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   248                                  ;int_disk_read      EQU     int_abort+5     ; logical sector disk read
   249                                  ;int_disk_write     EQU     int_abort+6     ; logical sector disk write
   250                                  ;int_keep_process   EQU     int_abort+7     ; terminate program and stay resident
   251                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   252                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   253                                  ;                                                                          ;
   254                                  ;int_spooler        EQU     int_terminate+3 ; spooler call
   255                                  ;int_fastcon        EQU     int_abort+9     ; fast CON interrupt
   256                                  ;                                                                          ;
   257                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   258                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   259                                          ;ENDIF
   260                                  
   261                                  addr_int_abort          EQU    4 * int_abort
   262                                  addr_int_command        EQU    4 * int_command
   263                                  addr_int_terminate      EQU    4 * int_terminate
   264                                  addr_int_ctrl_c         EQU    4 * int_ctrl_c
   265                                  addr_int_fatal_abort    EQU    4 * int_fatal_abort
   266                                  addr_int_disk_read      EQU    4 * int_disk_read
   267                                  addr_int_disk_write     EQU    4 * int_disk_write
   268                                  addr_int_keep_process   EQU    4 * int_keep_process
   269                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   270                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   271                                  ;                                                                          ;
   272                                  addr_int_spooler        EQU    4 * int_spooler
   273                                  addr_int_fastcon        EQU    4 * int_fastcon
   274                                  ;                                                                          ;
   275                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   276                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   277                                  
   278                                  ; <Disk map>
   279                                  ;  MSDOS partitions the disk into 4 sections:
   280                                  ;
   281                                  ;  phys sector 0:   +-------------------+
   282                                  ;       |           | boot/reserved     |
   283                                  ;       |           +-------------------+
   284                                  ;       |           |  File allocation  |
   285                                  ;       v           |      table(s)     |
   286                                  ;                   |  (multiple copies |
   287                                  ;                   |     are kept)     |
   288                                  ;                   +-------------------+
   289                                  ;                   |     Directory     |
   290                                  ;                   +-------------------+
   291                                  ;                   |     File space    |
   292                                  ;                   +-------------------+
   293                                  ;                   |   Unaddressable   |
   294                                  ;                   |  (to end of disk) |
   295                                  ;                   +-------------------+
   296                                  ;
   297                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   298                                  ; adjusted to maximize the file space addressable.
   299                                  
   300                                  ; BREAK <Directory entry>
   301                                  
   302                                  ;
   303                                  ;       +---------------------------+
   304                                  ;       |  (12 BYTE) filename/ext   |       0       0
   305                                  ;       +---------------------------+
   306                                  ;       |     (BYTE) attributes     |       11      B
   307                                  ;       +---------------------------+
   308                                  ;       |    (10 BYTE) reserved     |       12      C
   309                                  ;       +---------------------------+
   310                                  ;       | (WORD) time of last write |       22      16
   311                                  ;       +---------------------------+
   312                                  ;       | (WORD) date of last write |       24      18
   313                                  ;       +---------------------------+
   314                                  ;       |   (WORD) First cluster    |       26      1A
   315                                  ;       +---------------------------+
   316                                  ;       |     (DWORD) file size     |       28      1C
   317                                  ;       +---------------------------+
   318                                  ;
   319                                  ;   First byte of filename  = E5 -> free directory entry
   320                                  ;                           = 00 -> end of allocated directory
   321                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   322                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   323                                  ;
   324                                  struc dir_entry
   325 00000000 <res 0000000B>          .dir_name:	resb 11			; file name
   326 0000000B <res 00000001>          .dir_attr:	resb 1			; attribute bits
   327 0000000C <res 0000000A>          .dir_pad:	resb 10			; reserved for expansion
   328 00000016 <res 00000002>          .dir_time:	resw 1			; time of last write
   329 00000018 <res 00000002>          .dir_date:	resw 1			; date of last write
   330 0000001A <res 00000002>          .dir_first:	resw 1			; first allocation unit of file
   331 0000001C <res 00000002>          .dir_size_l:	resw 1			; low 16 bits of file size
   332 0000001E <res 00000002>          .dir_size_h:	resw 1			; high 16 bits of file size
   333                                  .size:
   334                                  endstruc
   335                                  
   336                                  attr_read_only      EQU      1h
   337                                  attr_hidden         EQU      2h
   338                                  attr_system         EQU      4h
   339                                  attr_volume_id      EQU      8h
   340                                  attr_directory      EQU     10h
   341                                  attr_archive        EQU     20h
   342                                  
   343                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   344                                                                          ; OR of hard attributes for FINDENTRY
   345                                  
   346                                  attr_ignore         EQU     attr_read_only+attr_archive
   347                                                                          ; ignore this(ese) attribute(s)
   348                                                                          ; during search first/next
   349                                  
   350                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   351                                                                          ; changeable via CHMOD
   352                                  
   353                                  ; <File allocation Table information>
   354                                  ;
   355                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   356                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   357                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   358                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   359                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   360                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   361                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   362                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   363                                  ; available allocation unit is assigned entry number two, and even though it is
   364                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   365                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   366                                  ; entry is the number of the next cluster in the file.
   367                                  ;
   368                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   369                                  ; because these clusters show as allocated, but are not part of any allocation
   370                                  ; chain and thus will never be allocated to a file.  A particular number is
   371                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   372                                  ; entry FF7H which is not in a chain is not an error).
   373                                  
   374                                  ; BREAK <DPB structure>
   375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   377                                  ;                                                                          ;
   378                                  
   379                                  DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   380                                  
   381                                  struc	DPB
   382 00000000 <res 00000001>          .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   383 00000001 <res 00000001>          .UNIT:		resb 1		; Driver unit number of DPB
   384 00000002 <res 00000002>          .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   385 00000004 <res 00000001>          .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   386 00000005 <res 00000001>          .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   387 00000006 <res 00000002>          .FIRST_FAT:	resw 1		; Starting record of FATs
   388 00000008 <res 00000001>          .FAT_COUNT:	resb 1		; Number of FATs for this drive
   389 00000009 <res 00000002>          .ROOT_ENTRIES:	resw 1		; Number of directory entries
   390 0000000B <res 00000002>          .FIRST_SECTOR:	resw 1		; First sector of first cluster
   391 0000000D <res 00000002>          .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   392 0000000F <res 00000001>          .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   393 00000010 <res 00000002>          .DIR_SECTOR:	resw 1		; Starting record of directory
   394 00000012 <res 00000004>          .DRIVER_ADDR:	resd 1		; Pointer to driver
   395 00000016 <res 00000001>          .MEDIA:		resb 1		; Media byte
   396 00000017 <res 00000001>          .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   397                                  				; check the first time this DPB is used
   398 00000018 <res 00000004>          .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   399 0000001C <res 00000002>          .CURRENT_DIR:	resw 1		; Cluster number of start of current directory
   400                                  				; 0 indicates root, -1 indicates invalid
   401                                  				; (disk ? changed)
   402 0000001E <res 00000040>          .DIR_TEXT:	resb DIRSTRLEN	; ASCIZ string of current directory
   403                                  .size:
   404                                  endstruc
   405                                  
   406                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   407                                  
   408                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   409                                  
   410                                  ;                                                                          ;
   411                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   412                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   413                                  
   414                                  ; BREAK <File Control Block definition>
   415                                  ;
   416                                  ; Field definition for FCBs
   417                                  ; The FCB has the following structure:
   418                                  ;
   419                                  ;       +---------------------------+
   420                                  ;       |   Drive indicator(byte)   |
   421                                  ;       +---------------------------+
   422                                  ;       |    Filename (8 chars)     |
   423                                  ;       +---------------------------+
   424                                  ;       |    Extension (3 chars)    |
   425                                  ;       +---------------------------+
   426                                  ;       |   Current Extent(word)    |
   427                                  ;       +---------------------------+
   428                                  ;       |    Record size (word)     |
   429                                  ;       +---------------------------+
   430                                  ;       |    File Size (2 words)    |
   431                                  ;       +---------------------------+
   432                                  ;       |       Date of write       |
   433                                  ;       +---------------------------+
   434                                  ;       |       Time of write       |
   435                                  ;       +---------------------------+
   436                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   438                                  ;                                                                          ;
   439                                  ;       | Flags:                    |
   440                                  ;       |  bit 7=0 file/1 device    |
   441                                  ;       |  bit 6=0 if dirty         |
   442                                  ;       |  bits 0-5 deviceid        |
   443                                  ;       +---------------------------+
   444                                  ;       |   first cluster in file   |
   445                                  ;       +---------------------------+
   446                                  ;       | position of last cluster  |
   447                                  ;       +---------------------------+
   448                                  ;       |   last cluster accessed   |   12 bit-+--- packed in 3 bytes
   449                                  ;       +---------------------------+          |
   450                                  ;       |     parent directory      |   <------+
   451                                  ;       +---------------------------+
   452                                  ;                                                                          ;
   453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   454                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   455                                  ;       |    next record number     |
   456                                  ;       +---------------------------+
   457                                  ;       |   random record number    |
   458                                  ;       +---------------------------+
   459                                  ;
   460                                  
   461                                  struc	SYS_FCB
   462 00000000 <res 00000001>          .drive:	resb 1
   463 00000001 <res 00000008>          .name:	resb 8
   464 00000009 <res 00000003>          .ext:	resb 3
   465 0000000C <res 00000002>          .EXTENT: resw 1
   466 0000000E <res 00000002>          .RECSIZ: resw 1	; Size of record (user settable)
   467 00000010 <res 00000002>          .FILSIZ: resw 1	; Size of file in bytes; used with the following
   468                                                          ; word
   469 00000012 <res 00000002>          .DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
   470 00000014 <res 00000002>          .FDATE:	resw 1	; Date of last writing
   471 00000016 <res 00000002>          .FTIME:	resw 1	; Time of last writing
   472                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   473                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   474                                  ;                                                                          ;
   475 00000018 <res 00000001>          .DEVID:	resb 1	; Device ID number, bits 0-5 if file.
   476                                                          ; bit 7=0 for file, bit 7=1 for I/O device
   477                                                          ; If file, bit 6=0 if dirty
   478                                                          ; If I/O device, bit 6=0 if EOF (input)
   479                                                          ;               Bit 5=1 if Raw mode
   480                                                          ;               Bit 0=1 if console input device
   481                                                          ;               Bit 1=1 if console output device
   482                                                          ;               Bit 2=1 if null device
   483                                                          ;               Bit 3=1 if clock device
   484 00000019 <res 00000002>          .FIRCLUS: resw 1	; First cluster of file
   485 0000001B <res 00000002>          .CLUSPOS: resw 1	; Position of last cluster accessed
   486 0000001D <res 00000002>          .LSTCLUS: resw 1	; Last cluster accessed and directory
   487 0000001F <res 00000001>                    resb 1	; pack 2 12 bit numbers into 24 bits...
   488                                  ;                                                                          ;
   489                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   490                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   491 00000020 <res 00000001>          .NR:	resb 1	; Next record
   492 00000021 <res 00000004>          .RR:	resb 4	; Random record
   493                                  .size:
   494                                  endstruc
   495                                  
   496                                  FILDIRENT       EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and
   497                                                                          ; SEARCH NEXT
   498                                  
   499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   500                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   501                                  ;                                                                          ;
   502                                  devid_file_clean        EQU     40h     ; true if file and not written
   503                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   504                                  
   505                                  devid_device            EQU     80h     ; true if a device
   506                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   507                                  devid_device_raw        EQU     20h     ; true if in raw mode
   508                                  devid_device_special    EQU     10h     ; true if special device
   509                                  devid_device_clock      EQU     08h     ; true if clock device
   510                                  devid_device_null       EQU     04h     ; true if null device
   511                                  devid_device_con_out    EQU     02h     ; true if console output
   512                                  devid_device_con_in     EQU     01h     ; true if consle input
   513                                  
   514                                  ;
   515                                  ; structure of devid field as returned by IOCTL is:
   516                                  ;
   517                                  ;       BIT     7   6   5   4   3   2   1   0
   518                                  ;             |---|---|---|---|---|---|---|---|
   519                                  ;             | I | E | R | S | I | I | I | I |
   520                                  ;             | S | O | A | P | S | S | S | S |
   521                                  ;             | D | F | W | E | C | N | C | C |
   522                                  ;             | E |   |   | C | L | U | O | I |
   523                                  ;             | V |   |   | L | K | L | T | N |
   524                                  ;             |---|---|---|---|---|---|---|---|
   525                                  ;       ISDEV = 1 if this channel is a device
   526                                  ;             = 0 if this channel is a disk file
   527                                  ;
   528                                  ;       If ISDEV = 1
   529                                  ;
   530                                  ;             EOF = 0 if End Of File on input
   531                                  ;             RAW = 1 if this device is in Raw mode
   532                                  ;                 = 0 if this device is cooked
   533                                  ;             ISCLK = 1 if this device is the clock device
   534                                  ;             ISNUL = 1 if this device is the null device
   535                                  ;             ISCOT = 1 if this device is the console output
   536                                  ;             ISCIN = 1 if this device is the console input
   537                                  ;
   538                                  ;       If ISDEV = 0
   539                                  ;             EOF = 0 if channel has been written
   540                                  ;             Bits 0-5  are  the  block  device  number  for
   541                                  ;                 the channel (0 = A, 1 = B, ...)
   542                                  ;
   543                                  devid_ISDEV     EQU     80h
   544                                  devid_EOF       EQU     40h
   545                                  devid_RAW       EQU     20h
   546                                  devid_SPECIAL   EQU     10H
   547                                  devid_ISCLK     EQU     08h
   548                                  devid_ISNUL     EQU     04h
   549                                  devid_ISCOT     EQU     02h
   550                                  devid_ISCIN     EQU     01h
   551                                  
   552                                  devid_block_dev EQU     1Fh             ; mask for block device number
   553                                  
   554                                  ;
   555                                  ; find first/next buffer
   556                                  ;
   557                                  struc	find_buf
   558 00000000 <res 00000001>          .sattr:	   resb 1	; attribute of search
   559 00000001 <res 00000001>          .drive:	   resb 1	; drive of search
   560 00000002 <res 0000000B>          .name:	   resb 11	; formatted name
   561 0000000D <res 00000002>          .LastEnt:  resw 1	; LastEnt
   562 0000000F <res 00000004>          .ThisDPB:  resd 1	; This DPB
   563 00000013 <res 00000002>          .DirStart: resw 1	; DirStart
   564                                  ;                                                                          ;
   565                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   566                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   567                                  
   568 00000015 <res 00000001>          .attr:	 resb 1		; attribute found
   569 00000016 <res 00000001>          .time:   resb 1		; time
   570 00000017 <res 00000001>          .date:   resb 1		; date
   571 00000018 <res 00000002>          .size_l: resw 1		; low(size)
   572 0000001A <res 00000002>          .size_h: resw 1		; high(size)
   573 0000001C <res 0000000D>          .pname:	 resb 13	; packed name
   574                                  .size:
   575                                  endstruc
   576                                  
   577                                  ; BREAK <Process data block>
   578                                  ;
   579                                  ; Process data block (otherwise known as program header)
   580                                  ;
   581                                  
   582                                  FILPERPROC	EQU     20
   583                                  
   584                                  struc PDB	; Process_data_block
   585 00000000 <res 00000002>          .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   586 00000002 <res 00000002>          .BLOCK_LEN:	resw 1		; size of execution block
   587 00000004 <res 00000001>                          resb 1
   588 00000005 <res 00000005>          .CPM_CALL:	resb 5		; ancient call to system
   589 0000000A <res 00000004>          .EXIT:		resd 1		; pointer to exit routine
   590 0000000E <res 00000004>          .CTRL_C:	resd 1		; pointer to ^C routine
   591 00000012 <res 00000004>          .FATAL_ABORT:	resd 1		; pointer to fatal error
   592                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   593                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   594                                  ;                                                                          ;
   595 00000016 <res 00000002>          .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   596 00000018 <res 00000014>          .JFN_TABLE:     resb FILPERPROC ; indices into system table
   597                                  ;                                                                          ;
   598                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   599                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   600 0000002C <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   601                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   602                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   603                                  ;                                                                          ;
   604 0000002E <res 00000004>          .USER_STACK:	resd 1		; stack of self during system calls
   605 00000032 <res 0000001E>          .PAD1:		resb 30 ; 1Eh
   606                                  ;                                                                          ;
   607                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   608                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   609 00000050 <res 00000005>          .CALL_SYSTEM:	resb 5		; portable method of system call
   610                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   611                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   612                                  ;                                                                          ;
   613 00000055 <res 00000006>          .PAD2:		resb 6
   614                                  ;                                                                          ;
   615                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   616                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   617                                  endstruc
   618                                  
   619                                  ; BREAK <EXEC and EXE file structures>
   620                                  ;
   621                                  ; EXEC arg block - load/go program
   622                                  ;
   623                                  
   624                                  ;
   625                                  ; The following get used as arguments to the EXEC system call.  They indicate
   626                                  ; whether or not the program is executed or whether or not a program header
   627                                  ; gets created.
   628                                  ;
   629                                  exec_func_no_execute    EQU 1           ; no execute bit
   630                                  exec_func_overlay       EQU 2           ; overlay bit
   631                                  
   632                                  struc EXEC0
   633 00000000 <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   634 00000002 <res 00000004>          .COM_LINE:	resd 1		; pointer to asciz command line
   635 00000006 <res 00000004>          .5C_FCB:	resd 1		; default fcb at 5C
   636 0000000A <res 00000004>          .6C_FCB:	resd 1		; default fcb at 6C
   637                                  .size:
   638                                  endstruc
   639                                  
   640                                  struc EXEC1
   641 00000000 <res 00000002>          .ENVIRON:	resw 1		; seg addr of environment
   642 00000002 <res 00000004>          .COM_LINE:	resd 1		; pointer to asciz command line
   643 00000006 <res 00000004>          .5C_FCB:	resd 1		; default fcb at 5C
   644 0000000A <res 00000004>          .6C_FCB:	resd 1		; default fcb at 6C
   645 0000000E <res 00000002>          .SP:		resw 1		; stack pointer of program
   646 00000010 <res 00000002>          .SS:		resw 1		; stack seg register of program
   647 00000012 <res 00000002>          .IP:		resw 1		; entry point IP
   648 00000014 <res 00000002>          .CS:		resw 1		; entry point CS
   649                                  .size:
   650                                  endstruc
   651                                  
   652                                  struc EXEC3
   653 00000000 <res 00000002>          .load_addr:	resw 1		; seg address of load point
   654 00000002 <res 00000002>          .reloc_fac:	resw 1		; relocation factor
   655                                  endstruc
   656                                  
   657                                  ;
   658                                  ; Exit codes in upper byte
   659                                  ;
   660                                  Exit_Terminate      EQU     0
   661                                  Exit_Abort          EQU     0
   662                                  Exit_Ctrl_C         EQU     1
   663                                  Exit_Hard_Error     EQU     2
   664                                  Exit_Keep_Process   EQU     3
   665                                  
   666                                  ;
   667                                  ; EXE file header
   668                                  ;
   669                                  
   670                                  struc EXE
   671 00000000 <res 00000002>          .signature:   resw 1		; must contain 4D5A (yay zibo!)
   672 00000002 <res 00000002>          .len_mod_512: resw 1		; low 9 bits of length
   673 00000004 <res 00000002>          .pages:       resw 1		; number of 512b pages in file
   674 00000006 <res 00000002>          .rle_count:   resw 1		; count of reloc entries
   675 00000008 <res 00000002>          .par_dir:     resw 1		; number of paragraphs before image
   676 0000000A <res 00000002>          .min_BSS:     resw 1		; minimum number of para of BSS
   677 0000000C <res 00000002>          .max_BSS:     resw 1		; max number of para of BSS
   678 0000000E <res 00000002>          .SS:          resw 1		; stack of image
   679 00000010 <res 00000002>          .SP:          resw 1		; SP of image
   680 00000012 <res 00000002>          .chksum:      resw 1		; checksum of file (ignored)
   681 00000014 <res 00000002>          .IP:          resw 1		; IP of entry
   682 00000016 <res 00000002>          .CS:          resw 1		; CS of entry
   683 00000018 <res 00000002>          .rle_table:   resw 1		; byte offset of reloc table
   684 0000001A <res 00000002>          .iov:         resw 1		; overlay number (0 for root)
   685 0000001C <res 00000004>          .sym_tab:     resd 1		; offset of symbol table in file
   686                                  .size:
   687                                  endstruc
   688                                  
   689                                  exe_valid_signature     EQU 5A4Dh
   690                                  exe_valid_old_signature EQU 4D5Ah
   691                                  
   692                                  struc symbol_entry
   693 00000000 <res 00000004>          .value:	resd 1
   694 00000004 <res 00000002>          .type:	resw 1
   695 00000006 <res 00000001>          .len:	resb 1
   696 00000007 <res 000000FF>          .name:	resb 255
   697                                  endstruc
   698                                  
   699                                  ; <Internal system file table format>
   700                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   701                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   702                                  ;                                                                          ;
   703                                  ;
   704                                  ; system file table
   705                                  ;
   706                                  
   707                                  struc	SFT
   708 00000000 <res 00000004>          .SFT_LINK:	resd 1
   709 00000004 <res 00000002>          .SFT_COUNT:	resw 1		; number of entries
   710 00000006 <res 00000002>          .SFT_TABLE:	resw 1		; beginning of array of the following
   711                                  .size:
   712                                  endstruc
   713                                  
   714                                  ;
   715                                  ; system file table entry
   716                                  ;
   717                                  
   718                                  struc	SF_ENTRY
   719 00000000 <res 00000001>          .sf_ref_count:	resb 1		; number of processes sharing fcb
   720 00000001 <res 00000001>          .sf_mode:	resb 1		; mode of access
   721 00000002 <res 00000001>          .sf_attr:	resb 1		; attribute of file
   722 00000003 <res 00000025>          .sf_fcb:	resb SYS_FCB.size  ; actual FCB
   723                                  .size:
   724                                  endstruc
   725                                  
   726                                  sf_default_number   EQU     5h
   727                                  ; 19/04/2018
   728                                  sf_entry_size equ SF_ENTRY.size ; 40
   729                                  
   730                                  ;                                                                          ;
   731                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   732                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   733                                  
   734                                  ; <Memory arena structure>
   735                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   736                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   737                                  ;                                                                          ;
   738                                  ;
   739                                  ; arena item
   740                                  ;
   741                                  
   742                                  struc ARENA
   743 00000000 <res 00000001>          .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
   744 00000001 <res 00000002>          .OWNER:		resw 1		; owner of arena item
   745 00000003 <res 00000002>          .SIZE:		resw 1		; size in paragraphs of item
   746                                  endstruc
   747                                  
   748                                  arena_owner_system  EQU 0               ; free block indication
   749                                  
   750                                  arena_signature_normal  EQU 4Dh         ; valid signature, not end of arena
   751                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
   752                                  ;                                                                          ;
   753                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   754                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   755                                  
   756                                  ; <Machine instruction definitions>
   757                                  
   758                                  mi_INT          EQU     0CDh
   759                                  mi_Long_JMP     EQU     0EAh
   760                                  mi_Long_CALL    EQU     09Ah
   761                                  mi_Long_RET     EQU     0CBh
   762                                  
   763                                  ; <Standard I/O assignments>
   764                                  
   765                                  stdin       EQU     0
   766                                  stdout      EQU     1
   767                                  stderr      EQU     2
   768                                  stdaux      EQU     3
   769                                  stdprn      EQU     4
   770                                  
   771                                  ; <Xenix subfunction assignments>
   772                                  
   773                                  open_for_read   EQU 0
   774                                  open_for_write  EQU 1
   775                                  open_for_both   EQU 2
   776                                  
   777                                  ; <Xenix error codes>
   778                                  
   779                                  ;
   780                                  ; XENIX calls all return error codes through AX.  If an error occurred then the
   781                                  ; carry bit will be set and the error code is in AX.  If no error occurred then
   782                                  ; the carry bit is reset and AX contains returned info.
   783                                  ;
   784                                  
   785                                  no_error_occurred		EQU     0
   786                                  
   787                                  error_invalid_function          EQU     1
   788                                  error_file_not_found            EQU     2
   789                                  error_path_not_found            EQU     3
   790                                  error_too_many_open_files       EQU     4
   791                                  error_access_denied             EQU     5
   792                                  error_invalid_handle            EQU     6
   793                                  error_arena_trashed             EQU     7
   794                                  error_not_enough_memory         EQU     8
   795                                  error_invalid_block             EQU     9
   796                                  error_bad_environment           EQU     10
   797                                  error_bad_format                EQU     11
   798                                  error_invalid_access            EQU     12
   799                                  error_invalid_data              EQU     13
   800                                  ;**** unused                    EQU     14
   801                                  error_invalid_drive             EQU     15
   802                                  error_current_directory         EQU     16
   803                                  error_not_same_device           EQU     17
   804                                  error_no_more_files             EQU     18
   805                                  
   806                                  country_not_found               EQU     error_file_not_found ; DOSSYM_V211.ASM
   807                                  alloc_not_enough_memory         EQU     error_not_enough_memory
   808                                  alloc_arena_trashed             EQU     error_arena_trashed
   809                                  
   810                                  close_invalid_handle            EQU     error_invalid_handle
   811                                  close_invalid_function          EQU     error_invalid_function
   812                                  
   813                                  chdir_path_not_found            EQU     error_path_not_found
   814                                  
   815                                  chmod_path_not_found            EQU     error_path_not_found
   816                                  chmod_access_denied             EQU     error_access_denied
   817                                  chmod_invalid_function          EQU     error_invalid_function
   818                                  
   819                                  creat_access_denied             EQU     error_access_denied
   820                                  creat_path_not_found            EQU     error_path_not_found
   821                                  creat_too_many_open_files       EQU     error_too_many_open_files
   822                                  
   823                                  curdir_invalid_drive            EQU     error_invalid_drive
   824                                  
   825                                  dealloc_invalid_block           EQU     error_invalid_block
   826                                  dealloc_arena_trashed           EQU     error_arena_trashed
   827                                  
   828                                  dup_invalid_handle              EQU     error_invalid_handle
   829                                  dup_too_many_open_files         EQU     error_too_many_open_files
   830                                  
   831                                  dup2_invalid_handle             EQU     error_invalid_handle
   832                                  
   833                                  exec_invalid_function           EQU     error_invalid_function
   834                                  exec_bad_environment            EQU     error_bad_environment
   835                                  exec_bad_format                 EQU     error_bad_format
   836                                  exec_not_enough_memory          EQU     error_not_enough_memory
   837                                  exec_file_not_found             EQU     error_file_not_found
   838                                  
   839                                  filetimes_invalid_function      EQU     error_invalid_function
   840                                  filetimes_invalid_handle        EQU     error_invalid_handle
   841                                  
   842                                  findfirst_file_not_found        EQU     error_file_not_found
   843                                  findfirst_no_more_files         EQU     error_no_more_files
   844                                  findnext_no_more_files          EQU     error_no_more_files
   845                                  
   846                                  international_invalid_function  EQU     error_invalid_function
   847                                  
   848                                  ioctl_invalid_handle            EQU     error_invalid_handle
   849                                  ioctl_invalid_function          EQU     error_invalid_function
   850                                  ioctl_invalid_data              EQU     error_invalid_data
   851                                  
   852                                  lseek_invalid_handle            EQU     error_invalid_handle
   853                                  lseek_invalid_function          EQU     error_invalid_function
   854                                  
   855                                  mkdir_path_not_found            EQU     error_path_not_found
   856                                  mkdir_access_denied             EQU     error_access_denied
   857                                  
   858                                  open_invalid_access             EQU     error_invalid_access
   859                                  open_file_not_found             EQU     error_file_not_found
   860                                  open_access_denied              EQU     error_access_denied
   861                                  open_too_many_open_files        EQU     error_too_many_open_files
   862                                  
   863                                  read_invalid_handle             EQU     error_invalid_handle
   864                                  read_access_denied              EQU     error_access_denied
   865                                  
   866                                  rename_file_not_found           EQU     error_file_not_found
   867                                  rename_not_same_device          EQU     error_not_same_device
   868                                  rename_access_denied            EQU     error_access_denied
   869                                  
   870                                  rmdir_path_not_found            EQU     error_path_not_found
   871                                  rmdir_access_denied             EQU     error_access_denied
   872                                  rmdir_current_directory         EQU     error_current_directory
   873                                  
   874                                  setblock_invalid_block          EQU     error_invalid_block
   875                                  setblock_arena_trashed          EQU     error_arena_trashed
   876                                  setblock_not_enough_memory      EQU     error_not_enough_memory
   877                                  setblock_invalid_function       EQU     error_invalid_function
   878                                  
   879                                  unlink_file_not_found           EQU     error_file_not_found
   880                                  unlink_access_denied            EQU     error_access_denied
   881                                  
   882                                  write_invalid_handle            EQU     error_invalid_handle
   883                                  write_access_denied             EQU     error_access_denied
   884                                  
   885                                  ; <system call definitions>
   886                                  
   887                                  ABORT                           EQU 0   ;  0      0
   888                                  STD_CON_INPUT                   EQU 1   ;  1      1
   889                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
   890                                  STD_AUX_INPUT                   EQU 3   ;  3      3
   891                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
   892                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
   893                                  RAW_CON_IO                      EQU 6   ;  6      6
   894                                  RAW_CON_INPUT                   EQU 7   ;  7      7
   895                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
   896                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
   897                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
   898                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
   899                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
   900                                  DISK_RESET                      EQU 13  ; 13      D
   901                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
   902                                  FCB_OPEN                        EQU 15  ; 15      F
   903                                  FCB_CLOSE                       EQU 16  ; 16     10
   904                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
   905                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
   906                                  FCB_DELETE                      EQU 19  ; 19     13
   907                                  FCB_SEQ_READ                    EQU 20  ; 20     14
   908                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
   909                                  FCB_CREATE                      EQU 22  ; 22     16
   910                                  FCB_RENAME                      EQU 23  ; 23     17
   911                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
   912                                  SET_DMA                         EQU 26  ; 26     1A
   913                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   914                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   915                                  ;                                                                          ;
   916                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
   917                                  ;                                                                          ;
   918                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   919                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   920                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
   921                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
   922                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
   923                                  GET_FCB_POSITION                EQU 36  ; 36     24
   924                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
   925                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
   926                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
   927                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
   928                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
   929                                  GET_DATE                        EQU 42  ; 42     2A
   930                                  SET_DATE                        EQU 43  ; 43     2B
   931                                  GET_TIME                        EQU 44  ; 44     2C
   932                                  SET_TIME                        EQU 45  ; 45     2D
   933                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
   934                                  ; Extended functionality group
   935                                  GET_DMA                         EQU 47  ; 47     2F
   936                                  GET_VERSION                     EQU 48  ; 48     30
   937                                  KEEP_PROCESS                    EQU 49  ; 49     31
   938                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   939                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   940                                  ;                                                                          ;
   941                                  GET_DPB                         EQU 50  ; 50     32
   942                                  ;                                                                          ;
   943                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   944                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   945                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
   946                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
   947                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
   948                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
   949                                  CHAR_OPER                       EQU 55  ; 55     37
   950                                  INTERNATIONAL                   EQU 56  ; 56     38
   951                                  ; XENIX CALLS
   952                                  ;   Directory Group
   953                                  MKDIR                           EQU 57  ; 57     39
   954                                  RMDIR                           EQU 58  ; 58     3A
   955                                  CHDIR                           EQU 59  ; 59     3B
   956                                  ;   File Group
   957                                  CREAT                           EQU 60  ; 60     3C
   958                                  OPEN                            EQU 61  ; 61     3D
   959                                  CLOSE                           EQU 62  ; 62     3E
   960                                  READ                            EQU 63  ; 63     3F
   961                                  WRITE                           EQU 64  ; 64     40
   962                                  UNLINK                          EQU 65  ; 65     41
   963                                  LSEEK                           EQU 66  ; 66     42
   964                                  CHMOD                           EQU 67  ; 67     43
   965                                  IOCTL                           EQU 68  ; 68     44
   966                                  XDUP                            EQU 69  ; 69     45
   967                                  XDUP2                           EQU 70  ; 70     46
   968                                  CURRENT_DIR                     EQU 71  ; 71     47
   969                                  ;    Memory Group
   970                                  ALLOC                           EQU 72  ; 72     48
   971                                  DEALLOC                         EQU 73  ; 73     49
   972                                  SETBLOCK                        EQU 74  ; 74     4A
   973                                  ;    Process Group
   974                                  EXEC                            EQU 75  ; 75     4B
   975                                  EXIT                            EQU 76  ; 76     4C
   976                                  _WAIT				EQU 77  ; 77     4D
   977                                  FIND_FIRST                      EQU 78  ; 78     4E
   978                                  ;   Special Group
   979                                  FIND_NEXT                       EQU 79  ; 79     4F
   980                                  ; SPECIAL SYSTEM GROUP
   981                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   982                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   983                                  ;                                                                          ;
   984                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
   985                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
   986                                  GET_IN_VARS                     EQU 82  ; 82     52
   987                                  SETDPB                          EQU 83  ; 83     53
   988                                  ;                                                                          ;
   989                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   990                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   991                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
   992                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   993                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   994                                  ;                                                                          ;
   995                                  DUP_PDB                         EQU 85  ; 85     55
   996                                  ;                                                                          ;
   997                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   998                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   999                                  RENAME                          EQU 86  ; 86     56
  1000                                  FILE_TIMES                      EQU 87  ; 87     57
  1001                                  
  1002                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1003                                  ;OEM_C1				EQU 249 ; 249    F9
  1004                                  ;OEM_C2				EQU 250 ; 250    FA
  1005                                  ;OEM_C3				EQU 251 ; 251    FB
  1006                                  ;OEM_C4				EQU 252 ; 252    FC
  1007                                  ;OEM_C5				EQU 253 ; 253    FD
  1008                                  ;OEM_C6				EQU 254 ; 254    FE
  1009                                  ;OEM_C7				EQU 255 ; 255    FF
  1010                                  
  1011                                  ;============================================================================
  1012                                  ; DOSSYM_V211.ASM
  1013                                  ;============================================================================
  1014                                  
  1015                                  DOS_MAJOR_VERSION   EQU      2
  1016                                  DOS_MINOR_VERSION   EQU     11
  1017                                  
  1018                                  ;
  1019                                  ; Current structure of the data returned by the international call
  1020                                  ;
  1021                                  
  1022                                  struc	INTERNAT_BLOCK
  1023                                  .Date_tim_format:
  1024 00000000 <res 00000002>          		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1025                                  .Currency_sym:
  1026 00000002 <res 00000005>          		RESB 5		; Currency Symbol 5 bytes
  1027                                  .Thous_sep:
  1028 00000007 <res 00000002>          		RESB 2		; Thousands separator 2 bytes
  1029                                  .Decimal_sep:
  1030 00000009 <res 00000002>          		RESB 2		; Decimal separator 2 bytes
  1031                                  .Date_sep:
  1032 0000000B <res 00000002>          		RESB 2		; Date separator 2 bytes
  1033                                  .Time_sep:
  1034 0000000D <res 00000002>          		RESB 2		; Time separator 2 bytes
  1035                                  .Bit_field:	
  1036 0000000F <res 00000001>          		RESB 1		; Bit values
  1037                                                                     ;   Bit 0 = 0 if currency symbol first
  1038                                                                     ;         = 1 if currency symbol last
  1039                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1040                                                                     ;         = 1 if space after currency symbol
  1041                                  .Currency_cents:
  1042 00000010 <res 00000001>          		RESB 	1	; Number of places after currency dec point
  1043                                  .Time_24:
  1044 00000011 <res 00000001>          		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1045                                  .Map_call:
  1046 00000012 <res 00000002>          		RESW	1	; Address of case mapping call (DWORD)
  1047 00000014 <res 00000002>                          RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1048                                  				;  in pieces.
  1049                                  .Data_sep:
  1050 00000016 <res 00000002>          		RESB	2	; Data list separator character
  1051                                  .size:		
  1052                                  endstruc
  1053                                  
  1054                                  ; Max size of the block returned by the INTERNATIONAL call
  1055                                  ;
  1056                                  internat_block_max      EQU     32
  1057                                  
  1058                                  ;============================================================================
  1059                                  ; DEVSYM.ASM
  1060                                  ;============================================================================
  1061                                  
  1062                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1063                                  ;PAGE
  1064                                  
  1065                                  ; The device table list has the form:
  1066                                  struc	SYSDEV
  1067 00000000 <res 00000004>          .NEXT:		resd 1		;Pointer to next device header
  1068 00000004 <res 00000002>          .ATT:		resw 1		;Attributes of the device
  1069 00000006 <res 00000002>          .STRAT:		resw 1		;Strategy entry point
  1070 00000008 <res 00000002>          .INT:		resw 1		;Interrupt entry point
  1071 0000000A <res 00000008>          .NAME:		resb 8		;Name of device (only first byte used for block)
  1072                                  .size:
  1073                                  endstruc
  1074                                  
  1075                                  ;Attribute bit masks
  1076                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1077                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1078                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1079                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1080                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1081                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1082                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1083                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1084                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1085                                  
  1086                                  ;Static Reguest Header
  1087                                  struc	SRHEAD
  1088 00000000 <res 00000001>          .REQLEN:	resb 1		;Length in bytes of request block
  1089 00000001 <res 00000001>          .REQUNIT:	resb 1		;Device unit number
  1090 00000002 <res 00000001>          .REQFUNC:	resb 1		;Type of request
  1091 00000003 <res 00000002>          .REQSTAT:	resw 1		;Status Word
  1092 00000005 <res 00000008>                  	resb 8		;Reserved for queue links
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  ;Status word masks
  1097                                  STERR   EQU     8000H           ;Bit 15 - Error
  1098                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1099                                  STDON   EQU     0100H           ;Bit 8 - Done
  1100                                  STECODE EQU     00FFH           ;Error code
  1101                                  WRECODE EQU     0
  1102                                  
  1103                                  ;Function codes
  1104                                  DEVINIT EQU     0               ;Initialization
  1105                                  DINITHL EQU     26              ;Size of init header
  1106                                  DEVMDCH EQU     1               ;Media check
  1107                                  DMEDHL  EQU     15              ;Size of media check header
  1108                                  DEVBPB  EQU     2               ;Get BPB
  1109                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1110                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1111                                  DEVRD   EQU     4               ;Read
  1112                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1113                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1114                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1115                                  DEVIST  EQU     6               ;Input status
  1116                                  DSTATHL EQU     13              ;Size of status header
  1117                                  DEVIFL  EQU     7               ;Input flush
  1118                                  DFLSHL  EQU     15              ;Size of flush header
  1119                                  DEVWRT  EQU     8               ;Write
  1120                                  DEVWRTV EQU     9               ;Write with verify
  1121                                  DEVOST  EQU     10              ;Output status
  1122                                  DEVOFL  EQU     11              ;Output flush
  1123                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1124                                  
  1125                                  ;=============================================================================
  1126                                  ; COMSW.ASM
  1127                                  ;=============================================================================
  1128                                  
  1129                                  ;; Use the following booleans to set assembly flags
  1130                                  ;FALSE   EQU	0
  1131                                  ;TRUE    EQU	~FALSE	; NOT FALSE
  1132                                  
  1133                                  ;IBMVER  EQU	TRUE  	; Switch to build IBM version of Command
  1134                                  ;IBM     EQU	IBMVER
  1135                                  ;MSVER   EQU	FALSE	; Switch to build MS-DOS version of Command
  1136                                  
  1137                                  ;HIGHMEM EQU	FALSE   ; Run resident part above transient (high memory)
  1138                                  ;KANJI   EQU	FALSE	; Support for dual byte Microsoft KANJI standard
  1139                                  ;IBMJAPAN EQU	FALSE   ; MUST BE TRUE (along with IBM and KANJI)
  1140                                  
  1141                                  ;=============================================================================
  1142                                  ; COMEQU.ASM
  1143                                  ;=============================================================================
  1144                                  
  1145                                  ; COMMAND EQUs which are not switch dependant
  1146                                  
  1147                                  ;IFDEF	IBM
  1148                                  ;	INCLUDE IFEQU.ASM
  1149                                  ;ENDIF
  1150                                  
  1151                                  SYM	EQU	">"
  1152                                  
  1153                                  LINPERPAG	EQU     23
  1154                                  NORMPERLIN	EQU     1
  1155                                  WIDEPERLIN	EQU     5
  1156                                  COMBUFLEN	EQU     128     ; Length of commmand buffer
  1157                                  
  1158                                  DRVCHAR		EQU     ":"
  1159                                  
  1160                                  FCB	EQU	5CH
  1161                                  
  1162                                  struc VARSTRUC
  1163 00000000 <res 00000001>          .ISDIR:	resb 1
  1164 00000001 <res 00000001>          .SIZ:	resb 1
  1165 00000002 <res 00000002>          .TTAIL:	resw 1
  1166 00000004 <res 00000001>          .INFO:	resb 1
  1167 00000005 <res 00000054>          .BUF:	resb DIRSTRLEN + 20
  1168                                  .size:
  1169                                  endstruc
  1170                                  
  1171                                  WSWITCH EQU     1               ; Wide display during DIR
  1172                                  PSWITCH EQU     2               ; Pause (or Page) mode during DIR
  1173                                  ASWITCH EQU     4               ; ASCII mode during COPY
  1174                                  BSWITCH EQU     8               ; Binary mode during COPY
  1175                                  VSWITCH EQU     10H             ; Verify switch
  1176                                  GOTSWITCH EQU   8000H		; Meta switch set if switch char encountered
  1177                                  
  1178                                  ; ----------------------------------------------------------------------------
  1179                                  ; IFEQU.ASM
  1180                                  ; ----------------------------------------------------------------------------
  1181                                  
  1182                                  ; COMMAND EQUs which are switch dependant
  1183                                  
  1184                                  ;IF1
  1185                                  ;    IF	IBM
  1186                                  ;	%OUT IBM version
  1187                                  ;    ELSE
  1188                                  ;	%OUT Normal version
  1189                                  ;    ENDIF
  1190                                  ;
  1191                                  ;    IF	HIGHMEM
  1192                                  ;	%OUT Highmem version
  1193                                  ;    ENDIF
  1194                                  ;
  1195                                  ;    IF	KANJI
  1196                                  ;	%OUT Kanji version
  1197                                  ;    ENDIF
  1198                                  ;ENDIF
  1199                                  
  1200                                  ;=============================================================================
  1201                                  ; COMMAND.ASM
  1202                                  ;=============================================================================
  1203                                  
  1204                                  ;CODERES SEGMENT PUBLIC
  1205                                  ;CODERES ENDS
  1206                                  
  1207                                  ;DATARES SEGMENT PUBLIC BYTE
  1208                                  ;        EXTRN   COMBAD:BYTE,NEEDCOM:BYTE,DRVMSG:BYTE
  1209                                  ;        EXTRN   DEFMSG:BYTE,PROMPT:BYTE,EXECEMES:BYTE,EXEBAD:BYTE
  1210                                  ;        EXTRN   TOOBIG:BYTE,NOCOM:BYTE,RBADNAM:BYTE,INT_2E_RET:DWORD
  1211                                  ;        EXTRN   NOHANDMES:BYTE,BMEMMES:BYTE,HALTMES:BYTE,FRETMES:BYTE
  1212                                  ;        EXTRN   PARENT:WORD,HANDLE01:WORD,LOADING:BYTE,BATCH:WORD
  1213                                  ;        EXTRN   TRNSEG:WORD,COMDRV:BYTE,MEMSIZ:WORD,SUM:WORD,EXTCOM:BYTE
  1214                                  ;        EXTRN   IO_SAVE:WORD,PERMCOM:BYTE,SINGLECOM:WORD,VERVAL:WORD
  1215                                  ;        EXTRN   PIPEFLAG:BYTE,SAVE_PDB:WORD,COMSPEC:BYTE,TRANS:WORD
  1216                                  ;        EXTRN   TRANVARS:BYTE,LTPA:WORD,RSWITCHAR:BYTE,RDIRCHAR:BYTE
  1217                                  ;        EXTRN   RETCODE:WORD,FORFLAG:BYTE
  1218                                  ;
  1219                                  ;        IF      IBMVER
  1220                                  ;        EXTRN   SYS_CALL:DWORD,ZEXEC:WORD,EXESEG:WORD,EXESUM:WORD
  1221                                  ;        EXTRN   USER_SS:WORD,USER_SP:WORD
  1222                                  ;        ENDIF
  1223                                  ;
  1224                                  ;DATARES ENDS
  1225                                  
  1226                                  ;ENVIRONMENT SEGMENT PUBLIC PARA        ; Default COMMAND environment
  1227                                  ;ENVIRONMENT ENDS
  1228                                  
  1229                                  ;INIT    SEGMENT PUBLIC PARA
  1230                                  ;        EXTRN   CONPROC:NEAR
  1231                                  ;INIT    ENDS
  1232                                  
  1233                                  ;TAIL    SEGMENT PUBLIC PARA
  1234                                  ;TAIL    ENDS
  1235                                  
  1236                                  ;TRANCODE        SEGMENT PUBLIC PARA
  1237                                  ;TRANCODE        ENDS
  1238                                  
  1239                                  ;TRANDATA        SEGMENT PUBLIC BYTE
  1240                                  ;        EXTRN   TRANDATAEND:BYTE
  1241                                  ;TRANDATA        ENDS
  1242                                  
  1243                                  ;TRANSPACE       SEGMENT PUBLIC BYTE
  1244                                  ;        EXTRN   TRANSPACEEND:BYTE,HEADCALL:DWORD
  1245                                  ;TRANSPACE       ENDS
  1246                                  
  1247                                  ;TRANTAIL        SEGMENT PUBLIC PARA
  1248                                  ;TRANTAIL        ENDS
  1249                                  
  1250                                  ;ZEXEC_CODE      SEGMENT PUBLIC PARA
  1251                                  ;ZEXEC_CODE      ENDS
  1252                                  
  1253                                  ;ZEXEC_DATA      SEGMENT PUBLIC BYTE
  1254                                  ;ZEXEC_DATA      ENDS
  1255                                  
  1256                                  ;RESGROUP        GROUP   CODERES,DATARES,ENVIRONMENT,INIT,TAIL
  1257                                  ;TRANGROUP       GROUP   TRANCODE,TRANDATA,TRANSPACE,TRANTAIL
  1258                                  ;EGROUP          GROUP   ZEXEC_CODE,ZEXEC_DATA
  1259                                  
  1260                                  ;ENVIRONMENT SEGMENT PUBLIC PARA	; Default COMMAND environment
  1261                                  
  1262                                  ;	PUBLIC  ECOMSPEC,ENVIREND,PATHSTRING
  1263                                  
  1264                                  ;        ORG     0
  1265                                  ;ENVARENA DB     10H DUP (?)     ; Pad for mem arena
  1266                                  ;PATHSTRING DB   "PATH="
  1267                                  ;USERPATH LABEL  BYTE
  1268                                  
  1269                                  ;        DB      0               ; Null path
  1270                                  ;        DB      "COMSPEC="
  1271                                  ;ECOMSPEC DB     "/COMMAND.COM"
  1272                                  ;        DB      134 DUP (0)
  1273                                  
  1274                                  ;ENVIREND        LABEL   BYTE
  1275                                  
  1276                                  ;ENVIRONSIZ EQU  $-PATHSTRING
  1277                                  ;ENVIRONSIZ2 EQU $-ECOMSPEC
  1278                                  ;ENVIRONMENT ENDS
  1279                                  
  1280                                  ;=============================================================================
  1281                                  ; COMMAND.COM Resident Portion Addresses - 29/04/2018
  1282                                  ;=============================================================================
  1283                                  
  1284                                  ; Transient portion loader code offset in resident code segment
  1285                                  LODCOM1	equ	02CFh  ; 30/04/2018
  1286                                  
  1287                                  ; Note: Following offset addresses are in data section of 'command2.s' file.
  1288                                  ; They must be verified by using assembly list (command2.lst) of COMMAND.COM.  
  1289                                  
  1290                                  RETRABASE equ 0827h ; 30/04/2018 (Base address for following common params.)	
  1291                                  
  1292                                  ; RESGROUP       [RESSEG]
  1293                                  ; DATA		  offset
  1294                                  ; --------     	------------
  1295                                  PARENT	  equ	RETRABASE+6	; 082Dh
  1296                                  BATCH	  equ	RETRABASE+13	; 0834h
  1297                                  BATLOC	  equ	RETRABASE+15	; 0836h
  1298                                  BATBYT	  equ	RETRABASE+64	; 0867h
  1299                                  EXTCOM	  equ	RETRABASE+69	; 086Ch
  1300                                  RETCODE	  equ	RETRABASE+70	; 086Dh
  1301                                  ECHOFLAG  equ	RETRABASE+72	; 086Fh
  1302                                  IO_SAVE	  equ	RETRABASE+73	; 0870h
  1303                                  RESTDIR	  equ	RETRABASE+75	; 0872h
  1304                                  PERMCOM	  equ	RETRABASE+76	; 0873h
  1305                                  SINGLECOM equ	RETRABASE+77	; 0874h
  1306                                  VERVAL	  equ	RETRABASE+79	; 0876h
  1307                                  FORFLAG	  equ	RETRABASE+81	; 0878h
  1308                                  UFORDRV   equ	RETRABASE+82	; 0879h
  1309                                  FORSET	  equ	RETRABASE+83	; 087Ah
  1310                                  FORCOM	  equ	RETRABASE+123	; 08A2h
  1311                                  FORVAR	  equ	RETRABASE+213 	; 08FCh
  1312                                  FORPTR	  equ	RETRABASE+214	; 08FDh
  1313                                  FORUFCB	  equ	RETRABASE+216	; 08FFh
  1314                                  FORFCB	  equ	RETRABASE+217	; 0900h
  1315                                  RE_INSTR  equ 	RETRABASE+256	; 0927h
  1316                                  RE_OUT_APP equ	RETRABASE+296	; 094Fh
  1317                                  RE_OUTSTR equ	RETRABASE+297	; 0950h
  1318                                  PIPEFLAG  equ	RETRABASE+337	; 0978h
  1319                                  PIPEFILES equ	RETRABASE+338	; 0979h
  1320                                  PIPEPTR	  equ	RETRABASE+339	; 097Ah
  1321                                  PIPESTR	  equ	RETRABASE+341	; 097Ch
  1322                                  PIPE1	  equ	RETRABASE+470	; 09FDh	
  1323                                  PIPE2	  equ	RETRABASE+484	; 0A0Fh
  1324                                  INPIPEPTR equ	RETRABASE+498	; 0A19h
  1325                                  OUTPIPEPTR equ	RETRABASE+500	; 0A1Bh
  1326                                  ENVIRSEG  equ	RETRABASE+502	; 0A1Dh
  1327                                  EXEC_BLOCK equ	RETRABASE+502 	; 0A1Dh  ; ENVIRSEG
  1328                                  PARMBUF	  equ	RETRABASE+516	; 0A2Bh
  1329                                  LTPA	  equ	RETRABASE+649	; 0AB0h
  1330                                  
  1331                                  ;=============================================================================
  1332                                  					
  1333                                  ; (command2.s -> offset TRANGOUP)
  1334                                  
  1335                                  TRANGROUP:
  1336                                  
  1337                                  ; ----------------------------------------------------------------------------
  1338                                  ; START OF TRANSIENT PORTION
  1339                                  ; ----------------------------------------------------------------------------
  1340                                  ; SEGMENT - TRANSCODE
  1341                                  ; ----------------------------------------------------------------------------
  1342                                  
  1343                                  ;=============================================================================
  1344                                  ; TCODE.ASM
  1345                                  ;=============================================================================
  1346                                  
  1347                                  ;TITLE   PART1 - COMMAND Transient routines.
  1348                                  
  1349                                  ;        INCLUDE COMSW.ASM
  1350                                  ;.xlist
  1351                                  ;.xcref
  1352                                  ;        INCLUDE DOSSYM.ASM
  1353                                  ;        INCLUDE DEVSYM.ASM
  1354                                  ;        INCLUDE COMSEG.ASM
  1355                                  ;.list
  1356                                  ;.cref
  1357                                  ;        INCLUDE COMEQU.ASM
  1358                                  
  1359                                  ; START OF TRANSIENT PORTION
  1360                                  ; This code is loaded at the end of memory and may be overwritten by
  1361                                  ; memory-intensive user programs.
  1362                                  
  1363                                  ;TRANCODE	SEGMENT PUBLIC PARA
  1364                                  ;ASSUME  CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  1365                                  
  1366                                          ;ORG     0
  1367                                  ;ZERO    =       $
  1368                                  
  1369                                          ;ORG     100H                    ; Allow for 100H parameter area
  1370                                  
  1371                                  	[ORG 100H]  ; Nasm syntax ; 21/04/2018
  1372                                  
  1373                                  SETDRV:
  1374 00000000 B40E                            MOV     AH,SET_DEFAULT_DRIVE
  1375 00000002 CD21                            INT     int_command
  1376                                  TCOMMAND:
  1377 00000004 2E8E1EDA2C                      MOV     DS,[CS:RESSEG]
  1378                                  ;ASSUME DS:RESGROUP
  1379 00000009 B8FFFF                          MOV     AX,-1
  1380 0000000C 87067608                        XCHG    AX,[VERVAL]
  1381 00000010 83F8FF                          CMP     AX,-1
  1382 00000013 7404                            JZ	short NOSETVER2
  1383 00000015 B42E                            MOV     AH,SET_VERIFY_ON_WRITE  ; AL has correct value
  1384 00000017 CD21                            INT     int_command
  1385                                  NOSETVER2:
  1386 00000019 2EFF1ED82C                      CALL    FAR [CS:HEADCALL]	; Make sure header fixed
  1387 0000001E 31ED                            XOR     BP,BP                   ; Flag transient not read
  1388 00000020 833E7408FF                      CMP	word [SINGLECOM],-1
  1389 00000025 7505                            JNZ	short COMMAND
  1390                                  _$EXITPREP:
  1391 00000027 0E                              PUSH    CS
  1392 00000028 1F                              POP     DS
  1393 00000029 E90D09                          JMP     _$EXIT			; Have finished the single command
  1394                                  ;ASSUME  DS:NOTHING
  1395                                  COMMAND:
  1396 0000002C FC                              CLD
  1397 0000002D 8CC8                            MOV     AX,CS
  1398 0000002F 8ED0                            MOV     SS,AX
  1399                                  ;ASSUME  SS:TRANGROUP
  1400                                  	;MOV	SP,OFFSET TRANGROUP:STACK
  1401 00000031 BCF62F                  	MOV	SP,STACK			
  1402 00000034 8EC0                            MOV     ES,AX
  1403                                  ;ASSUME  ES:TRANGROUP
  1404 00000036 368E1EDA2C                      MOV     DS,[SS:RESSEG]
  1405                                  ;ASSUME  DS:RESGROUP
  1406 0000003B FB                              STI
  1407 0000003C 36C606402B80                    MOV     byte [SS:UCOMBUF],COMBUFLEN ; Init UCOMBUF
  1408 00000042 36C606C32B80                    MOV     byte [SS:COMBUF],COMBUFLEN ; Init COMBUF (Autoexec doing DATE)
  1409 00000048 09ED                            OR      BP,BP                   ; See if just read
  1410 0000004A 7409                            JZ      short TESTRDIR		; Not read, check user directory
  1411 0000004C 36C706412B010D                  MOV     WORD [SS:UCOMBUF+1],0D01H  ; Reset buffer
  1412 00000053 EB12                            JMP     SHORT NOSETBUF
  1413                                  TESTRDIR:
  1414 00000055 803E720800                      CMP     byte [RESTDIR],0
  1415 0000005A 740B                            JZ      short NOSETBUF		; User directory OK
  1416 0000005C 1E                              PUSH    DS
  1417 0000005D 0E                              PUSH    CS
  1418 0000005E 1F                              POP     DS
  1419                                  ;ASSUME  DS:TRANGROUP
  1420                                          ;MOV     DX,OFFSET TRANGROUP:USERDIR1
  1421 0000005F BA462C                  	MOV	DX,USERDIR1 
  1422 00000062 B43B                            MOV     AH,CHDIR
  1423 00000064 CD21                            INT     int_command             ; Restore users directory
  1424 00000066 1F                              POP     DS
  1425                                  ;ASSUME  DS:RESGROUP
  1426                                  NOSETBUF:
  1427 00000067 803E790900                      CMP     byte [PIPEFILES],0
  1428 0000006C 740A                            JZ      short NOPCLOSE		; Don't bother if they don't exist
  1429 0000006E 803E780900                      CMP     byte [PIPEFLAG],0
  1430 00000073 7503                            JNZ     short NOPCLOSE		; Don't del if still piping
  1431 00000075 E8E105                          CALL    PIPEDEL
  1432                                  NOPCLOSE:
  1433 00000078 C6066C0800                      MOV     byte [EXTCOM],0		; Flag internal command
  1434 0000007D C606720800                      MOV     byte [RESTDIR],0	; Flag users dirs OK
  1435 00000082 8CC8                            MOV     AX,CS                   ; Get segment we're in
  1436 00000084 8ED8                            MOV     DS,AX
  1437                                  ;ASSUME  DS:TRANGROUP
  1438 00000086 50                              PUSH    AX
  1439                                          ;MOV     DX,OFFSET TRANGROUP:INTERNATVARS
  1440 00000087 BA562F                          MOV     DX,INTERNATVARS
  1441                                          ;MOV     AX,INTERNATIONAL SHL 8
  1442 0000008A B80038                  	MOV     AX,INTERNATIONAL*256
  1443 0000008D CD21                            INT     21H
  1444 0000008F 58                              POP     AX
  1445 00000090 2B06DC2C                        SUB     AX,[TPA]                ; AX=size of TPA in paragraphs
  1446 00000094 BA1000                          MOV     DX,16
  1447 00000097 F7E2                            MUL     DX                      ; DX:AX=size of TPA in bytes
  1448 00000099 09D2                            OR      DX,DX                   ; See if over 64K
  1449 0000009B 7403                            JZ      short SAVSIZ		; OK if not
  1450 0000009D B8FFFF                          MOV     AX,-1                   ; If so, limit to 65535 bytes
  1451                                  SAVSIZ:
  1452 000000A0 A3F72C                          MOV     [BYTCNT],AX             ; Max no. of bytes that can be buffered
  1453 000000A3 8E1EDA2C                        MOV     DS,[RESSEG]             ; All batch work must use resident seg.
  1454                                  ;ASSUME  DS:RESGROUP
  1455 000000A7 F6066F08FF                      TEST    byte [ECHOFLAG],-1
  1456 000000AC 7408                            JZ      short GETCOM		; Don't do the CRLF
  1457 000000AE E83C05                          CALL    SINGLETEST
  1458 000000B1 7203                            JB      short GETCOM
  1459 000000B3 E80C0F                          CALL    CRLF2
  1460                                  GETCOM:
  1461 000000B6 B419                            MOV     AH,GET_DEFAULT_DRIVE
  1462 000000B8 CD21                            INT     int_command
  1463 000000BA 36A2EA2C                        MOV     [SS:CURDRV],AL
  1464 000000BE F6066F08FF                      TEST    byte [ECHOFLAG],-1
  1465 000000C3 7408                            JZ      short NOPDRV		; No prompt if echo off
  1466 000000C5 E82505                          CALL    SINGLETEST
  1467 000000C8 7203                            JB      short NOPDRV
  1468 000000CA E87416                          CALL    PRINT_PROMPT            ; Prompt the user
  1469                                  NOPDRV:
  1470 000000CD F6067809FF                      TEST    byte [PIPEFLAG],-1	; Pipe has highest presedence
  1471 000000D2 7403                            JZ      short NOPIPE
  1472 000000D4 E9FD05                          JMP     PIPEPROC                ; Continue the pipeline
  1473                                  NOPIPE:
  1474 000000D7 F6067808FF                      TEST    byte [FORFLAG],-1	; FOR has next highest precedence
  1475 000000DC 7403                            JZ      short TESTFORBAT
  1476 000000DE E9E308                          JMP     FORPROC                 ; Continue the FOR
  1477                                  TESTFORBAT:
  1478 000000E1 C606270900                      MOV     byte [RE_INSTR],0	; Turn redirection back off
  1479 000000E6 C606500900                      MOV     byte [RE_OUTSTR],0
  1480 000000EB C6064F0900                      MOV     byte [RE_OUT_APP],0
  1481 000000F0 F7063408FFFF                    TEST    word [BATCH],-1		; Batch has lowest precedence
  1482 000000F6 7403                            JZ      short ISNOBAT
  1483 000000F8 E90E01                          JMP     READBAT                 ; Continue BATCH
  1484                                  
  1485                                  ISNOBAT:
  1486 000000FB 833E740800                      CMP     word [SINGLECOM],0
  1487 00000100 741D                            JZ      short REGCOM
  1488 00000102 BEFFFF                          MOV     SI,-1
  1489 00000105 87367408                        XCHG    SI,[SINGLECOM]
  1490                                          ;MOV     DI,OFFSET TRANGROUP:COMBUF + 2
  1491 00000109 BFC52B                          MOV     DI,COMBUF+2
  1492 0000010C 31C9                            XOR     CX,CX
  1493                                  SINGLELOOP:
  1494 0000010E AC                              LODSB
  1495 0000010F AA                              STOSB
  1496 00000110 41                              INC     CX
  1497 00000111 3C0D                            CMP     AL,0DH
  1498 00000113 75F9                            JNZ     short SINGLELOOP
  1499 00000115 49                              DEC     CX
  1500 00000116 0E                              PUSH    CS
  1501 00000117 1F                              POP     DS
  1502                                  ;ASSUME  DS:TRANGROUP
  1503 00000118 880EC42B                        MOV     [COMBUF+1],CL
  1504 0000011C E93C01                          JMP     DOCOM
  1505                                  
  1506                                  REGCOM:
  1507 0000011F 0E                              PUSH    CS
  1508 00000120 1F                              POP     DS                      ; Need local segment to point to buffer
  1509                                          ;MOV     DX,OFFSET TRANGROUP:UCOMBUF
  1510 00000121 BA402B                          MOV     DX,UCOMBUF
  1511 00000124 B40A                            MOV     AH,STD_CON_STRING_INPUT
  1512 00000126 CD21                            INT     int_command             ; Get a command
  1513 00000128 8A0E402B                        MOV     CL,[UCOMBUF]
  1514 0000012C 30ED                            XOR     CH,CH
  1515 0000012E 83C103                          ADD     CX,3
  1516                                          ;MOV     SI,OFFSET TRANGROUP:UCOMBUF
  1517 00000131 BE402B                          MOV     SI,UCOMBUF
  1518                                          ;MOV     DI,OFFSET TRANGROUP:COMBUF
  1519 00000134 BFC32B                          MOV     DI,COMBUF
  1520 00000137 F3A4                            REP     MOVSB                   ; Transfer it to the cooked buffer
  1521 00000139 E91F01                          JMP     DOCOM
  1522                                  
  1523                                  ; All batch proccessing has DS set to segment of resident portion
  1524                                  ;ASSUME  DS:RESGROUP,ES:TRANGROUP
  1525                                  
  1526                                  NEEDENV:
  1527 0000013C 1E                              PUSH    DS
  1528 0000013D 56                              PUSH    SI
  1529 0000013E 57                              PUSH    DI
  1530                                  
  1531                                          ;MOV     DI,OFFSET TRANGROUP:ID
  1532 0000013F BF512D                          MOV     DI,ID
  1533 00000142 0430                            ADD     AL,"0"
  1534 00000144 AA                              STOSB
  1535                                  GETENV1:
  1536 00000145 E88E15                          CALL    GETBATBYT
  1537 00000148 AA                              STOSB
  1538 00000149 3C0D                            CMP     AL,13
  1539 0000014B 7409                            JZ      short GETENV2
  1540 0000014D 3C25                            CMP     AL,"%"
  1541 0000014F 75F4                            JNZ     short GETENV1
  1542                                          ;MOV     BYTE PTR ES:[DI-1],"="
  1543 00000151 26C645FF3D                      MOV     BYTE [ES:DI-1],"="
  1544                                  GETENV2:
  1545                                          ;MOV     SI,OFFSET TRANGROUP:ID
  1546 00000156 BE512D                          MOV     SI,ID
  1547 00000159 0E                              PUSH    CS
  1548 0000015A 1F                              POP     DS                      ; DS:SI POINTS TO NAME
  1549                                  ;ASSUME DS:TRANGROUP,ES:RESGROUP
  1550 0000015B E8AD06                          CALL    FIND_NAME_IN_ENVIRONMENT
  1551 0000015E 06                              PUSH    ES
  1552 0000015F 1F                              POP     DS
  1553 00000160 0E                              PUSH    CS
  1554 00000161 07                              POP     ES
  1555                                  ;ASSUME DS:RESGROUP,ES:TRANGROUP
  1556 00000162 89FE                            MOV     SI,DI
  1557 00000164 5F                              POP     DI                      ; get back pointer to command line
  1558 00000165 7305                            JNC     short GETENV4
  1559                                  
  1560                                  GETENV3:                                ; Parameter not found
  1561 00000167 0E                              PUSH    CS
  1562 00000168 1F                              POP     DS
  1563                                          ;MOV     SI,OFFSET TRANGROUP:ID
  1564 00000169 BE512D                  	MOV     SI,ID
  1565                                  
  1566                                  GETENV4:
  1567 0000016C AC                              LODSB                           ; From resident segment
  1568 0000016D 08C0                            OR      AL,AL                   ; Check for end of parameter
  1569 0000016F 740E                            JZ      short GETENV6
  1570 00000171 3C0D                            CMP     AL,13
  1571 00000173 740A                            JZ      short GETENV6
  1572 00000175 3C3D                            CMP     AL,"="
  1573 00000177 7403                            JZ      short GETENVX
  1574 00000179 AA                              STOSB
  1575 0000017A EBF0                            JMP     short GETENV4
  1576                                  
  1577                                  GETENVX:
  1578 0000017C B025                            MOV     AL,"%"
  1579 0000017E AA                              STOSB
  1580                                  GETENV6:
  1581 0000017F 5E                              POP     SI
  1582 00000180 1F                              POP     DS
  1583 00000181 3C0D                            CMP     AL,13
  1584 00000183 740E                            JZ      short SAVBATBYTJ
  1585 00000185 E9A500                          JMP     RDBAT
  1586                                  
  1587                                  NEEDPARM:
  1588 00000188 E84B15                          CALL    GETBATBYT
  1589 0000018B 3C25                            CMP     AL,"%"                  ; Check for two consecutive %
  1590 0000018D 7404                            JZ      short SAVBATBYTJ
  1591 0000018F 3C0D                            CMP     AL,13                   ; Check for end-of-line
  1592 00000191 7503                            JNZ     short PAROK
  1593                                  SAVBATBYTJ:
  1594 00000193 E9A100                          JMP     SAVBATBYT
  1595                                  PAROK:
  1596 00000196 2C30                            SUB     AL,"0"
  1597 00000198 72A2                            JB      short NEEDENV		; look for parameter in the environment
  1598 0000019A 3C09                            CMP     AL,9
  1599 0000019C 779E                            JA	short NEEDENV
  1600                                  
  1601 0000019E 98                              CBW
  1602 0000019F 89C6                            MOV     SI,AX
  1603 000001A1 D1E6                            SHL     SI,1                    ; Two bytes per entry
  1604 000001A3 06                              PUSH    ES
  1605 000001A4 57                              PUSH    DI
  1606 000001A5 8E063408                        MOV     ES,[BATCH]
  1607 000001A9 31C9                            XOR     CX,CX
  1608 000001AB 89C8                            MOV     AX,CX
  1609 000001AD 89CF                            MOV     DI,CX
  1610 000001AF 49                              DEC     CX
  1611 000001B0 F2AE                            REPNZ   SCASB
  1612 000001B2 01F7                            ADD     DI,SI
  1613 000001B4 268B35                          MOV     SI,[ES:DI]
  1614 000001B7 5F                              POP     DI
  1615 000001B8 07                              POP     ES
  1616 000001B9 83FEFF                          CMP     SI,-1                   ; Check if parameter exists
  1617 000001BC 746F                            JZ      short RDBAT		; Ignore if it doesn't
  1618                                  RDPARM:
  1619 000001BE AC                              LODSB                           ; From resident segment
  1620 000001BF 3C0D                            CMP     AL,0DH                  ; Check for end of parameter
  1621 000001C1 746A                            JZ      short RDBAT
  1622 000001C3 AA                              STOSB
  1623 000001C4 EBF8                            JMP     short RDPARM
  1624                                  
  1625                                  PROMPTBAT:
  1626                                          ;MOV     DX,OFFSET TRANGROUP:NEEDBAT
  1627 000001C6 BA[B724]                        MOV     DX,NEEDBAT
  1628                                  	;CALL    [RCH_ADDR]
  1629 000001C9 36FF1EE42C                      CALL    FAR [SS:RCH_ADDR]
  1630 000001CE 7423                            JZ      short ASKFORBAT		; Media is removable
  1631                                  NoAskForBat:
  1632 000001D0 8E063408                        MOV     ES,[BATCH]              ; Turn off batch
  1633 000001D4 B449                            MOV     AH,DEALLOC
  1634 000001D6 CD21                            INT     int_command             ; free up the batch piece
  1635 000001D8 C70634080000                    MOV     word [BATCH],0		; AFTER DEALLOC in case of ^C
  1636 000001DE C606780800                      MOV     byte [FORFLAG],0	; Turn off for processing
  1637 000001E3 C606780900                      MOV     byte [PIPEFLAG],0	; Turn off any pipe
  1638 000001E8 0E                              PUSH    CS
  1639 000001E9 1F                              POP     DS
  1640                                          ;MOV     DX,OFFSET TRANGROUP:BADBAT
  1641 000001EA BA[A024]                        MOV     DX,BADBAT
  1642 000001ED E82217                          CALL    ERROR_PRINT             ; Tell user no batch file
  1643 000001F0 E911FE                          JMP     TCOMMAND
  1644                                  
  1645                                  ASKFORBAT:
  1646 000001F3 0E                              PUSH    CS
  1647 000001F4 1F                              POP     DS
  1648 000001F5 E81A17                          CALL    ERROR_PRINT             ; Prompt for batch file
  1649 000001F8 E80300                          CALL    GetKeystroke
  1650 000001FB E906FE                          JMP     TCOMMAND
  1651                                  
  1652                                  ; read the next keystroke
  1653                                  
  1654                                  GetKeystroke:
  1655                                          ;MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_INPUT_no_echo
  1656 000001FE B8080C                          MOV     AX,(STD_CON_INPUT_FLUSH*256) | STD_CON_INPUT_NO_ECHO
  1657 00000201 CD21                            INT     int_command             ; Get character with KB buffer flush
  1658                                          ;MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) + 0
  1659 00000203 B8000C                  	MOV     AX,STD_CON_INPUT_FLUSH*256
  1660 00000206 CD21                            INT     int_command
  1661                                          ;return
  1662 00000208 C3                      	RETN
  1663                                  
  1664                                  READBAT:
  1665 00000209 E8550B                          CALL    BATOPEN
  1666 0000020C 72B8                            JC      short PROMPTBAT
  1667                                          ;MOV     DI,OFFSET TRANGROUP:COMBUF+2
  1668 0000020E BFC52B                          MOV     DI,COMBUF+2
  1669                                  TESTNOP:
  1670 00000211 E8C214                          CALL    GETBATBYT
  1671 00000214 3C3A                            CMP     AL,':'                  ; Label/Comment?
  1672 00000216 7518                            JNZ     short NOTLABEL
  1673                                  NOPLINE:                                ; Consume the line
  1674 00000218 E8BB14                          CALL    GETBATBYT
  1675 0000021B 3C0D                            CMP     AL,0DH
  1676 0000021D 75F9                            JNZ     short NOPLINE
  1677 0000021F E8B414                          CALL    GETBATBYT               ; Eat Linefeed
  1678 00000222 F7063408FFFF                    TEST    word [BATCH],-1
  1679 00000228 75E7                            JNZ     short TESTNOP
  1680 0000022A E9D7FD                          JMP     TCOMMAND                ; Hit EOF
  1681                                  
  1682                                  RDBAT:
  1683 0000022D E8A614                          CALL    GETBATBYT
  1684                                  NOTLABEL:
  1685 00000230 3C25                            CMP     AL,"%"                  ; Check for parameter
  1686 00000232 7503                            JNZ     short SAVBATBYT
  1687 00000234 E951FF                          JMP     NEEDPARM
  1688                                  SAVBATBYT:
  1689 00000237 AA                              STOSB
  1690 00000238 3C0D                            CMP     AL,0DH
  1691 0000023A 75F1                            JNZ     short RDBAT
  1692                                          ;SUB     DI,OFFSET TRANGROUP:COMBUF+3
  1693 0000023C 81EFC62B                        SUB     DI,COMBUF+3
  1694 00000240 89F8                            MOV     AX,DI
  1695 00000242 26A2C42B                        MOV     [ES:COMBUF+1],AL        ; Set length of line
  1696 00000246 E88D14                          CALL    GETBATBYT               ; Eat linefeed
  1697 00000249 E80B0B                          CALL    BATCLOSE
  1698 0000024C F6066F08FF                      TEST    byte [ECHOFLAG],-1
  1699 00000251 0E                              PUSH    CS
  1700 00000252 1F                              POP     DS                      ; Go back to local segment
  1701 00000253 7409                            JZ      short NOECHO2
  1702                                  ;ASSUME DS:TRANGROUP
  1703                                          ;MOV     DX,OFFSET TRANGROUP:COMBUF+2
  1704 00000255 BAC52B                  	MOV     DX,COMBUF+2
  1705 00000258 E8C016                          CALL    CRPRINT
  1706                                  DOCOM:
  1707                                  ; All segments are local for command line processing
  1708 0000025B E8640D                          CALL    CRLF2
  1709                                  DOCOM1:
  1710                                  
  1711                                  NOECHO2:
  1712 0000025E E88C12                          CALL    PRESCAN                 ; Cook the input buffer
  1713 00000261 7403                            JZ      short NOPIPEPROC
  1714 00000263 E91E04                          JMP     PIPEPROCSTRT            ; Fire up the pipe
  1715                                  NOPIPEPROC:
  1716                                  	;MOV     SI,OFFSET TRANGROUP:COMBUF+2
  1717 00000266 BEC52B                  	MOV     SI,COMBUF+2
  1718                                          ;MOV     DI,OFFSET TRANGROUP:IDLEN
  1719 00000269 BF502D                          MOV     DI,IDLEN
  1720                                          ;MOV	AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 01H ; Make FCB with blank scan-off
  1721 0000026C B80129                          MOV	AX,(PARSE_FILE_DESCRIPTOR*256) | 01H
  1722 0000026F CD21                            INT     int_command
  1723 00000271 3C01                            CMP     AL,1                    ; Check for ambiguous command name
  1724 00000273 7407                            JZ      short BADCOMJ1		; Ambiguous commands not allowed
  1725 00000275 3CFF                            CMP     AL,-1
  1726 00000277 7506                            JNZ     short DRVGD
  1727 00000279 E9D300                          JMP     DRVBAD
  1728                                  
  1729                                  BADCOMJ1:
  1730 0000027C E96303                          JMP	BADCOM
  1731                                  
  1732                                  DRVGD:
  1733 0000027F 8A05                            MOV     AL,[DI]
  1734 00000281 A2F62C                          MOV     [SPECDRV],AL
  1735 00000284 B020                            MOV     AL," "
  1736 00000286 B90900                          MOV     CX,9
  1737 00000289 47                              INC     DI
  1738 0000028A F2AE                            REPNE   SCASB                   ; Count no. of letters in command name
  1739 0000028C B009                            MOV     AL,9
  1740 0000028E 28C8                            SUB     AL,CL
  1741 00000290 A2502D                          MOV     [IDLEN],AL
  1742 00000293 BF8100                          MOV     DI,81H
  1743 00000296 31C9                            XOR     CX,CX
  1744 00000298 56                              PUSH    SI
  1745                                  COMTAIL:
  1746 00000299 AC                              LODSB
  1747 0000029A AA                              STOSB                           ; Move command tail to 80H
  1748 0000029B 3C0D                            CMP     AL,13
  1749 0000029D E0FA                            LOOPNZ  COMTAIL
  1750 0000029F F6D1                            NOT     CL
  1751                                          ;MOV     BYTE PTR DS:[80H],CL
  1752 000002A1 880E8000                        MOV     [80H],CL
  1753 000002A5 5E                              POP     SI
  1754                                  ; If the command has 0 parameters must check here for
  1755                                  ; any switches that might be present.
  1756                                  ; SI -> first character after the command.
  1757 000002A6 E87100                          CALL    SWITCH          	; Is the next character a SWITCHAR
  1758 000002A9 A3ED2C                          MOV     [COMSW],AX
  1759 000002AC BF5C00                          MOV     DI,FCB
  1760                                  	;MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 01H
  1761 000002AF B80129                  	MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 01H
  1762 000002B2 CD21                            INT     int_command
  1763 000002B4 A2EB2C                          MOV     [PARM1],AL		; Save result of parse
  1764                                  
  1765                                  PRBEG:
  1766 000002B7 AC                              LODSB
  1767 000002B8 3A06DE2C                        CMP     AL,[SWITCHAR]
  1768 000002BC 7409                            JZ      short PRFIN
  1769 000002BE 3C0D                            CMP     AL,13
  1770 000002C0 7405                            JZ      short PRFIN
  1771 000002C2 E86914                          CALL    DELIM
  1772 000002C5 75F0                            JNZ     short PRBEG
  1773                                  PRFIN:
  1774 000002C7 4E                              DEC     SI
  1775 000002C8 E84F00                          CALL    SWITCH
  1776 000002CB A3EF2C                          MOV     [ARG1S],AX
  1777 000002CE BF6C00                          MOV     DI,FCB+10H
  1778                                          ;MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 01H
  1779 000002D1 B80129                          MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 01H
  1780 000002D4 CD21                            INT     int_command             ; Parse file name
  1781 000002D6 A2EC2C                          MOV     [PARM2],AL      	; Save result
  1782 000002D9 E83E00                          CALL    SWITCH
  1783 000002DC A3F12C                          MOV     [ARG2S],AX
  1784 000002DF 0B06EF2C                        OR      AX,[ARG1S]
  1785 000002E3 A3F32C                          MOV     [ARGTS],AX
  1786                                  SWTLP:                          	; Find any remaining switches
  1787 000002E6 803C0D                          CMP     BYTE [SI],0DH
  1788 000002E9 740A                            JZ      short GOTALLSW
  1789 000002EB 46                              INC     SI
  1790 000002EC E82B00                          CALL    SWITCH
  1791 000002EF 0906F32C                        OR      [ARGTS],AX
  1792 000002F3 EBF1                            JMP     SHORT SWTLP
  1793                                  
  1794                                  GOTALLSW:
  1795 000002F5 A0502D                          MOV     AL,[IDLEN]
  1796 000002F8 8A16F62C                        MOV     DL,[SPECDRV]
  1797 000002FC 08D2                            OR      DL,DL           	; Check if drive was specified
  1798 000002FE 7403                            JZ      short OK
  1799 00000300 E98A00                          JMP     DRVCHK
  1800                                  OK:
  1801 00000303 FEC8                            DEC     AL              	; Check for null command
  1802 00000305 754E                            JNZ     short FNDCOM
  1803 00000307 8E1EDA2C                        MOV     DS,[RESSEG]
  1804                                  ;ASSUME  DS:RESGROUP
  1805 0000030B 833E7408FF                      CMP     word [SINGLECOM],-1
  1806 00000310 7403                            JZ      short EXITJ
  1807 00000312 E9A1FD                          JMP     GETCOM
  1808                                  
  1809                                  EXITJ:
  1810 00000315 E90FFD                          JMP     _$EXITPREP
  1811                                  
  1812                                  ;ASSUME  DS:TRANGROUP
  1813                                  
  1814                                  RETSW:
  1815 00000318 93                              XCHG    AX,BX           	; Put switches in AX
  1816 00000319 C3                              RETN
  1817                                  
  1818                                  SWITCH:
  1819 0000031A 31DB                            XOR     BX,BX           	; Initialize - no switches set
  1820                                  SWLOOP:
  1821 0000031C E80714                          CALL    SCANOFF         	; Skip any delimiters
  1822 0000031F 3A06DE2C                        CMP     AL,[SWITCHAR]   	; Is it a switch specifier?
  1823 00000323 75F3                            JNZ     short RETSW		; No -- we're finished
  1824 00000325 81CB0080                        OR      BX,GOTSWITCH    	; Indicate there is a switch specified
  1825 00000329 46                              INC     SI              	; Skip over the switch character
  1826 0000032A E8F913                          CALL    SCANOFF
  1827 0000032D 3C0D                            CMP     AL,0DH
  1828 0000032F 74E7                            JZ      short RETSW		; Oops
  1829 00000331 46                              INC     SI
  1830                                  ; Convert lower case input to upper case
  1831 00000332 E85C05                          CALL    UPCONV
  1832                                          ;MOV     DI,OFFSET TRANGROUP:SWLIST
  1833 00000335 BF[4A03]                        MOV     DI,SWLIST
  1834 00000338 B90500                          MOV     CX,SWCOUNT
  1835 0000033B F2AE                            REPNE   SCASB			; Look for matching switch
  1836 0000033D 7509                            JNZ     short BADSW
  1837 0000033F B80100                          MOV     AX,1
  1838 00000342 D3E0                            SHL     AX,CL           	; Set a bit for the switch
  1839 00000344 09C3                            OR      BX,AX
  1840 00000346 EBD4                            JMP     SHORT SWLOOP
  1841                                  
  1842                                  BADSW:
  1843 00000348 EBD2                            JMP     SHORT SWLOOP
  1844                                  
  1845 0000034A 5642415057              SWLIST  DB      "VBAPW"
  1846                                  SWCOUNT EQU     $-SWLIST
  1847                                  
  1848                                  DRVBAD:
  1849                                          ;MOV     DX,OFFSET TRANGROUP:BADDRV
  1850 0000034F BA[FB25]                        MOV     DX,BADDRV
  1851 00000352 E99202                          JMP     CERROR
  1852                                  
  1853                                  FNDCOM:
  1854                                          ;MOV     SI,OFFSET TRANGROUP:COMTAB ; Prepare to search command table
  1855 00000355 BE[4229]                        MOV     SI,COMTAB
  1856 00000358 B500                            MOV     CH,0
  1857                                  FINDCOM:
  1858                                          ;MOV     DI,OFFSET TRANGROUP:IDLEN
  1859 0000035A BF502D                          MOV     DI,IDLEN
  1860 0000035D 8A0C                            MOV     CL,[SI]
  1861 0000035F E332                            JCXZ    EXTERNAL
  1862 00000361 F3A6                            REPE    CMPSB
  1863 00000363 9F                              LAHF
  1864 00000364 01CE                            ADD     SI,CX           ; Bump to next position without affecting flags
  1865 00000366 9E                              SAHF
  1866 00000367 AC                              LODSB           	; Get flag for drive check
  1867 00000368 A2E82C                          MOV     [CHKDRV],AL
  1868 0000036B AD                              LODSW           	; Get address of command
  1869 0000036C 75EC                            JNZ     short FINDCOM
  1870 0000036E 89C2                            MOV     DX,AX
  1871 00000370 803EE82C00                      CMP     byte [CHKDRV],0
  1872 00000375 740B                            JZ      short NOCHECK
  1873 00000377 A0EB2C                          MOV     AL,[PARM1]
  1874 0000037A 0A06EC2C                        OR      AL,[PARM2]      	; Check if either parm. had invalid drive
  1875 0000037E 3CFF                            CMP     AL,-1
  1876 00000380 74CD                            JZ      short DRVBAD
  1877                                  NOCHECK:
  1878 00000382 E8100A                          CALL    IOSET
  1879 00000385 FFD2                            CALL    DX              	; Call the internal
  1880                                  COMJMP:
  1881 00000387 E97AFC                          JMP     TCOMMAND
  1882                                  
  1883                                  SETDRV1:
  1884 0000038A E973FC                          JMP     SETDRV
  1885                                  
  1886                                  DRVCHK:
  1887 0000038D FECA                            DEC     DL              	; Adjust for correct drive number
  1888 0000038F FEC8                            DEC     AL              	; Check if anything else is on line
  1889 00000391 74F7                            JZ      short SETDRV1
  1890                                  EXTERNAL:
  1891 00000393 C606E92C00                      MOV     byte [FILTYP],0
  1892 00000398 8A16F62C                        MOV     DL,[SPECDRV]
  1893 0000039C 8816502D                        MOV     [IDLEN],DL
  1894 000003A0 E87F0E                          CALL    SAVUDIR			; Drive letter already checked
  1895 000003A3 B03F                            MOV     AL,'?'
  1896                                          ;MOV     DI,OFFSET TRANGROUP:COM
  1897 000003A5 BF592D                          MOV     DI,COM
  1898 000003A8 AA                              STOSB				; Look for any extension
  1899 000003A9 AA                              STOSB
  1900 000003AA AA                              STOSB
  1901                                          ;MOV     DX,OFFSET TRANGROUP:DIRBUF ; Command will end up here
  1902 000003AB BACC2D                  	MOV     DX,DIRBUF
  1903 000003AE B41A                            MOV     AH,SET_DMA
  1904 000003B0 CD21                            INT     int_command
  1905 000003B2 06                              PUSH    ES
  1906 000003B3 E84D04                          CALL    FIND_PATH
  1907 000003B6 89FE                            MOV     SI,DI
  1908 000003B8 07                              POP     ES
  1909                                  
  1910                                          ;MOV     DI,OFFSET TRANGROUP:EXECPATH
  1911 000003B9 BF892C                          MOV     DI,EXECPATH
  1912 000003BC C60500                          MOV     BYTE [DI],0         	; Initialize to current directory
  1913                                  RESEARCH:
  1914 000003BF B411                            MOV     AH,DIR_SEARCH_FIRST
  1915                                  COMSRCH:
  1916 000003C1 0E                              PUSH    CS
  1917 000003C2 1F                              POP     DS
  1918                                          ;MOV     DX,OFFSET TRANGROUP:IDLEN
  1919 000003C3 BA502D                          MOV     DX,IDLEN
  1920 000003C6 CD21                            INT     int_command
  1921 000003C8 08C0                            OR      AL,AL
  1922 000003CA B412                            MOV     AH,DIR_SEARCH_NEXT      ; Do search-next next
  1923 000003CC 7543                            JNZ     short PATHCHK
  1924 000003CE 813ED52D434F                    CMP     WORD [DIRBUF+9],4F00H + "C" ; 4F43h ; "CO"
  1925 000003D4 750F                            JNZ     short CHKEXE
  1926 000003D6 803ED72D4D                      CMP     byte [DIRBUF+11],"M"	; 4Dh
  1927 000003DB 7508                            JNZ     short CHKEXE
  1928 000003DD 800EE92C04                      OR      byte [FILTYP],4
  1929 000003E2 E9A701                          JMP     EXECUTE                 ; If we find a COM were done
  1930                                  
  1931                                  CHKEXE:
  1932 000003E5 813ED52D4558                    CMP     WORD [DIRBUF+9],5800H + "E" ; 5845h ; "EX"
  1933 000003EB 750E                            JNZ     short CHKBAT
  1934 000003ED 803ED72D45                      CMP     byte [DIRBUF+11],"E"	; 45h
  1935 000003F2 7507                            JNZ     short CHKBAT
  1936 000003F4 800EE92C01                      OR      byte [FILTYP],1		; Flag an EXE found
  1937 000003F9 EBC6                            JMP     short COMSRCH		; Continue search
  1938                                  
  1939                                  CHKBAT:
  1940 000003FB 813ED52D4241                    CMP     WORD [DIRBUF+9],4100H + "B" ; 4142h ; "BA"
  1941 00000401 75BE                            JNZ	short COMSRCH
  1942 00000403 803ED72D54                      CMP     byte [DIRBUF+11],"T"	; 54h
  1943 00000408 75B7                            JNZ	short COMSRCH
  1944 0000040A 800EE92C02                      OR      byte [FILTYP],2		; Flag BAT found
  1945 0000040F EBB0                            JMP     short COMSRCH		; Continue search
  1946                                  
  1947                                  PATHCHK:
  1948 00000411 F606E92C01                      TEST    byte [FILTYP],1
  1949 00000416 740E                            JZ      short TESTBAT
  1950 00000418 C706D52D4558                    MOV     WORD [DIRBUF+9],5800H+"E"
  1951 0000041E C606D72D45                      MOV     byte [DIRBUF+11],"E"
  1952 00000423 E96601                          JMP     EXECUTE                 ; Found EXE
  1953                                  
  1954                                  TESTBAT:
  1955 00000426 F606E92C02                      TEST    byte [FILTYP],2
  1956 0000042B 741F                            JZ	short NEXTPATH		; Found nothing, try next path
  1957 0000042D C706D52D4241                    MOV     WORD [DIRBUF+9],4100H+"B"
  1958 00000433 C606D72D54                      MOV     byte [DIRBUF+11],"T"
  1959                                          ;MOV     DX,OFFSET TRANGROUP:DIRBUF ; Found BAT
  1960 00000438 BACC2D                          MOV     DX,DIRBUF
  1961 0000043B B40F                            MOV     AH,FCB_OPEN
  1962 0000043D CD21                            INT     int_command
  1963 0000043F 08C0                            OR      AL,AL
  1964 00000441 7406                            JZ      short BATCOMJ		; Bat exists
  1965 00000443 E85A0C                          CALL    RESTUDIR
  1966 00000446 E99901                          JMP     BADCOM
  1967                                  
  1968                                  BATCOMJ:
  1969 00000449 E98E00                          JMP	BATCOM
  1970                                  
  1971                                  NEXTPATH:
  1972                                          ;MOV     DX,OFFSET TRANGROUP:USERDIR1 ; Restore users dir
  1973 0000044C BA462C                          MOV     DX,USERDIR1
  1974 0000044F B43B                            MOV     AH,CHDIR
  1975 00000451 CD21                            INT     int_command
  1976 00000453 8E1EDA2C                        MOV     DS,[RESSEG]
  1977                                  ;ASSUME  DS:RESGROUP
  1978 00000457 C606720800                      MOV     byte [RESTDIR],0
  1979                                  BADPATHEL:
  1980                                          ;MOV     DI,OFFSET TRANGROUP:EXECPATH ; Build a full path here
  1981 0000045C BF892C                          MOV     DI,EXECPATH
  1982 0000045F 89F2                            MOV     DX,SI
  1983 00000461 8E1E1D0A                        MOV     DS,[ENVIRSEG]   	; Point into environment
  1984                                  ;ASSUME  DS:NOTHING
  1985 00000465 AC                              LODSB
  1986                                  
  1987                                          ;IF      KANJI
  1988                                          ;MOV     [KPARSE],0
  1989                                          ;ENDIF
  1990                                  
  1991 00000466 08C0                            OR      AL,AL
  1992 00000468 741F                            JZ      short BADCOMJ		; NUL, command not found
  1993 0000046A 30DB                            XOR     BL,BL                   ; Make BL a NUL
  1994                                  PSKIPLP:                                ; Get the path
  1995 0000046C AA                              STOSB
  1996 0000046D 08C0                            OR      AL,AL
  1997 0000046F 741B                            JZ      short LASTPATH
  1998 00000471 3C3B                            CMP     AL,';'
  1999 00000473 7420                            JZ      short GOTNEXTPATH
  2000                                          ;CMP     DI,15+DirStrLen+(OFFSET TRANGROUP:EXECPATH)
  2001 00000475 81FFD82C                        CMP     DI,15+DIRSTRLEN+EXECPATH
  2002 00000479 720B                            JB      short OKPath
  2003                                  SKIPPathElem:
  2004 0000047B AC                              LODSB                           ; scan to end of path element
  2005 0000047C 08C0                            OR      AL,AL
  2006 0000047E 74DC                            JZ      short BADPATHEL
  2007 00000480 3C3B                            CMP     AL,';'
  2008 00000482 74D8                            JZ      short BADPATHEL
  2009 00000484 EBF5                            JMP     short SKIPPathElem
  2010                                  
  2011                                  OKPath:
  2012                                          ;IF      KANJI
  2013                                          ;MOV     [KPARSE],0
  2014                                          ;CALL    TESTKANJ
  2015                                          ;JZ      NXTPTCHR
  2016                                          ;INC     [KPARSE]
  2017                                          ;MOVSB
  2018                                  ;NXTPTCHR:
  2019                                          ;ENDIF
  2020                                  
  2021 00000486 AC                              LODSB
  2022 00000487 EBE3                            JMP     SHORT PSKIPLP
  2023                                  
  2024                                  BADCOMJ:
  2025 00000489 E95601                          JMP     BADCOM
  2026                                  
  2027                                  LASTPATH:
  2028 0000048C 26C645FF3B                      MOV     BYTE [ES:DI-1],';'	; Fix up the NUL in EXECPATH
  2029 00000491 4E                              DEC     SI                      ; Point to the NUL in PATHSTRING
  2030 00000492 8A5CFF                          MOV     BL,[SI-1]               ; Change substi char to char before NUL
  2031                                  
  2032                                  GOTNEXTPATH:
  2033 00000495 4F                              DEC     DI              	; Point to the end of the dir
  2034 00000496 53                              PUSH    BX
  2035 00000497 56                              PUSH    SI
  2036 00000498 52                              PUSH    DX
  2037 00000499 89D6                            MOV     SI,DX
  2038 0000049B 30D2                            XOR     DL,DL
  2039 0000049D 807C013A                        CMP     BYTE [SI+1],DRVCHAR
  2040 000004A1 7505                            JNZ     short DEFDRVPATH	; No drive spec
  2041 000004A3 8A14                            MOV     DL,[SI]
  2042 000004A5 80EA40                          SUB     DL,'@'
  2043                                  DEFDRVPATH:
  2044 000004A8 1E                              PUSH    DS
  2045 000004A9 0E                              PUSH    CS
  2046 000004AA 1F                              POP     DS
  2047                                  ;ASSUME  DS:TRANGROUP
  2048 000004AB 8816502D                        MOV     [IDLEN],DL      	; New drive
  2049 000004AF 57                              PUSH    DI
  2050 000004B0 E86F0D                          CALL    SAVUDIR         	; Save the users dir
  2051 000004B3 5F                              POP     DI
  2052 000004B4 7306                            JNC     short PATHTRY
  2053                                          ;MOV    DX,OFFSET TRANGROUP:BADPMES ; Tell the user bad stuff in path
  2054 000004B6 BA[C127]                        MOV	DX,BADPMES
  2055 000004B9 E86414                          CALL    PRINT
  2056                                  PATHTRY:
  2057 000004BC 1F                              POP     DS
  2058                                  ;ASSUME  DS:NOTHING
  2059 000004BD 5A                              POP     DX
  2060 000004BE 5E                              POP     SI
  2061 000004BF 5B                              POP     BX
  2062 000004C0 865CFF                          XCHG    BL,[SI-1]      		; Stick in NUL, or same thing if LASTPATH
  2063                                  CDPATH:
  2064 000004C3 B43B                            MOV     AH,CHDIR
  2065 000004C5 CD21                            INT     int_command
  2066 000004C7 885CFF                          MOV     [SI-1],BL       	; Fix the path string back up
  2067 000004CA 368E1EDA2C                      MOV     DS,[SS:RESSEG]
  2068                                  ;ASSUME  DS:RESGROUP
  2069 000004CF FE067208                        INC     byte [RESTDIR]		; Say users dir needs restoring
  2070 000004D3 7302                            JNC	short ResearchJ
  2071 000004D5 EB85                            JMP     short BADPATHEL       	; Ignore a directory which doesn't exist
  2072                                  ResearchJ:
  2073 000004D7 E9E5FE                          JMP     RESEARCH        	; Try looking in this one
  2074                                  
  2075                                  BATCOM:
  2076                                  ;ASSUME	DS:TRANGROUP
  2077                                  ; Batch parameters are read with ES set to segment of resident part
  2078 000004DA E8B808                          CALL    IOSET           ; Set up any redirection
  2079 000004DD 8E06DA2C                        MOV     ES,[RESSEG]
  2080                                  ;ASSUME  ES:RESGROUP
  2081                                  ;Since BATCH has lower precedence than PIPE or FOR. If a new BATCH file
  2082                                  ;is being started it MUST be true that no FOR or PIPE is currently in
  2083                                  ;progress.
  2084 000004E1 26C606780800                    MOV     byte [ES:FORFLAG],0	; Turn off for processing
  2085 000004E7 26C606780900                    MOV     byte [ES:PIPEFLAG],0	; Turn off any pipe
  2086 000004ED 26F7063408FFFF                  TEST    word [ES:BATCH],-1
  2087 000004F4 7511                            JNZ	short CHAINBAT        	; Don't need allocation if chaining
  2088 000004F6 E8C10F                          CALL    FREE_TPA
  2089                                  ;ASSUME  ES:RESGROUP
  2090 000004F9 BB0600                          MOV     BX,6			; 64 + 32 bytes
  2091 000004FC B448                            MOV     AH,ALLOC
  2092 000004FE CD21                            INT     int_command             ; Suck up a little piece for batch processing
  2093 00000500 26A33408                        MOV     [ES:BATCH],AX
  2094 00000504 E8BE0F                          CALL    ALLOC_TPA
  2095                                  CHAINBAT:
  2096 00000507 06                              PUSH    ES
  2097 00000508 268E063408                      MOV     ES,[ES:BATCH]
  2098                                  ;ASSUME  ES:NOTHING
  2099 0000050D 8A16CC2D                        MOV     DL,[DIRBUF]
  2100 00000511 31FF                            XOR     DI,DI
  2101 00000513 E80F0D                          CALL    SAVUDIR1		; ES:DI set up, get dir containing Batch file
  2102 00000516 31C0                            XOR     AX,AX
  2103 00000518 89C1                            MOV     CX,AX
  2104 0000051A 49                              DEC     CX
  2105 0000051B F2AE                            REPNZ   SCASB 			; Find the NUL
  2106 0000051D 4F                              DEC     DI			; Point at the NUL
  2107 0000051E A0DF2C                          MOV     AL,[DIRCHAR]
  2108 00000521 263A45FF                        CMP     AL,[ES:DI-1]
  2109 00000525 7401                            JZ      short NOPUTSLASH
  2110 00000527 AA                              STOSB
  2111                                  NOPUTSLASH:
  2112                                          ;MOV     SI,OFFSET TRANGROUP:DIRBUF+1
  2113 00000528 BECD2D                          MOV     SI,DIRBUF+1
  2114 0000052B E86813                          CALL    FCB_TO_ASCZ		; Tack on batch file name
  2115 0000052E B8FFFF                          MOV     AX,-1
  2116 00000531 89FB                            MOV     BX,DI
  2117 00000533 B90A00                          MOV     CX,10
  2118 00000536 F3AB                            REP     STOSW			; Init Parmtab to no parms
  2119 00000538 07                              POP     ES
  2120                                  ;ASSUME  ES:RESGROUP
  2121 00000539 E8640B                          CALL    RESTUDIR
  2122                                          ;MOV     SI,OFFSET TRANGROUP:COMBUF+2
  2123 0000053C BEC52B                          MOV     SI,COMBUF+2
  2124                                          ;MOV     DI,OFFSET RESGROUP:PARMBUF
  2125 0000053F BF2B0A                          MOV     DI,PARMBUF
  2126 00000542 B90A00                          MOV     CX,10
  2127                                  EACHPARM:
  2128 00000545 E8DE11                          CALL    SCANOFF
  2129 00000548 3C0D                            CMP     AL,0DH
  2130 0000054A 7423                            JZ      short HAVPARM
  2131 0000054C E30C                            JCXZ    MOVPARM			; Only first 10 parms get pointers
  2132 0000054E 06                              PUSH    ES
  2133 0000054F 268E063408                      MOV     ES,[ES:BATCH]
  2134 00000554 26893F                          MOV     [ES:BX],DI		; Set pointer table to point to actual parameter
  2135 00000557 07                              POP     ES
  2136 00000558 43                              INC     BX
  2137 00000559 43                              INC     BX
  2138                                  MOVPARM:
  2139 0000055A AC                              LODSB
  2140 0000055B E8D011                          CALL    DELIM
  2141 0000055E 7407                            JZ      short ENDPARM		; Check for end of parameter
  2142 00000560 AA                              STOSB
  2143 00000561 3C0D                            CMP     AL,0DH
  2144 00000563 740A                            JZ      short HAVPARM
  2145 00000565 EBF3                            JMP     SHORT MOVPARM
  2146                                  ENDPARM:
  2147 00000567 B00D                            MOV     AL,0DH
  2148 00000569 AA                              STOSB           		; End-of-parameter marker
  2149 0000056A E3D9                            JCXZ    EACHPARM
  2150 0000056C 49                              DEC     CX
  2151 0000056D EBD6                            JMP     SHORT EACHPARM
  2152                                  HAVPARM:
  2153 0000056F 30C0                            XOR     AL,AL
  2154 00000571 AA                              STOSB                   	; Nul terminate the parms
  2155 00000572 31C0                            XOR     AX,AX
  2156 00000574 06                              PUSH    ES
  2157 00000575 1F                              POP     DS                      ; Simply batch FCB setup
  2158                                  ;ASSUME  DS:RESGROUP
  2159 00000576 A33608                          MOV     [BATLOC],AX		; Start at beginning of file
  2160 00000579 A33808                          MOV     [BATLOC+2],AX
  2161 0000057C 833E7408FF                      CMP     word [SINGLECOM],-1
  2162 00000581 7506                            JNZ     short NOBATSING
  2163 00000583 C7067408F0FF                    MOV     word [SINGLECOM],0FFF0H	; Flag single command BATCH job
  2164                                  NOBATSING:
  2165 00000589 E978FA                          JMP     TCOMMAND
  2166                                  
  2167                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  2168                                  
  2169                                  EXECUTE:
  2170 0000058C E8110B                          CALL    RESTUDIR
  2171                                  NeoExecute:
  2172 0000058F 803D00                          CMP     BYTE [DI],0		; Command in current directory
  2173 00000592 740E                            JZ	short NNSLSH
  2174 00000594 8A45FF                          MOV     AL,[DI-1]
  2175                                  
  2176                                          ;IF      KANJI
  2177                                          ;CMP     [KPARSE],0
  2178                                          ;JNZ     StuffPath		; Last char is second KANJI byte, might be '\'
  2179                                          ;ENDIF
  2180                                  
  2181 00000597 E83410                          CALL    PATHCHRCMP
  2182 0000059A 740F                            JZ	short HAVEXP		; Don't double slash
  2183                                  StuffPath:
  2184 0000059C A0DF2C                          MOV     AL,[DIRCHAR]
  2185 0000059F AA                              STOSB
  2186 000005A0 EB09                            JMP     SHORT HAVEXP
  2187                                  
  2188                                  NNSLSH:
  2189 000005A2 A0CC2D                          MOV     AL,[DIRBUF]             ; Specify a drive
  2190 000005A5 0440                            ADD     AL,'@'
  2191 000005A7 AA                              STOSB
  2192 000005A8 B03A                            MOV     AL,DRVCHAR
  2193 000005AA AA                              STOSB
  2194                                  HAVEXP:
  2195                                          ;MOV     SI,OFFSET TRANGROUP:DIRBUF+1
  2196 000005AB BECD2D                          MOV     SI,DIRBUF+1
  2197 000005AE E8E512                          CALL    FCB_TO_ASCZ             ; Tack on the filename
  2198 000005B1 E8E107                          CALL    IOSET
  2199 000005B4 8E06DC2C                        MOV     ES,[TPA]
  2200 000005B8 B449                            MOV     AH,DEALLOC
  2201 000005BA CD21                            INT     int_command		; Now running in "free" space
  2202 000005BC 8E06DA2C                        MOV     ES,[RESSEG]
  2203                                  ;ASSUME  ES:RESGROUP
  2204 000005C0 26FE066C08                      INC     byte [ES:EXTCOM]       	; Indicate external command
  2205 000005C5 26C606720800                    MOV     byte [ES:RESTDIR],0    	; Since USERDIR1 is in transient, insure
  2206                                                                  	;  this flag value for re-entry to COMMAND
  2207 000005CB BF5C00                          MOV     DI,FCB
  2208 000005CE 89FE                            MOV     SI,DI
  2209 000005D0 B95200                          MOV     CX,52H
  2210 000005D3 F3A5                            REP     MOVSW           	; Transfer parameters to resident header
  2211                                          ;MOV     DX,OFFSET TRANGROUP:EXECPATH
  2212 000005D5 BA892C                          MOV     DX,EXECPATH
  2213                                  	;MOV     BX,OFFSET RESGROUP:EXEC_BLOCK
  2214 000005D8 BB1D0A                  	MOV     BX,EXEC_BLOCK
  2215                                          ;MOV     AX,EXEC SHL 8
  2216 000005DB B8004B                          MOV     AX,EXEC*256
  2217                                          ;JMP	[EXEC_ADDR]     	; Jmp to the EXEC in the resident
  2218 000005DE FF2EE02C                	JMP	FAR [EXEC_ADDR]
  2219                                  
  2220                                  BADCOM:
  2221 000005E2 0E                              PUSH    CS
  2222 000005E3 1F                              POP     DS
  2223                                          ;MOV     DX,OFFSET TRANGROUP:BADNAM
  2224 000005E4 BA[F524]                        MOV     DX,BADNAM
  2225                                  CERROR:
  2226 000005E7 E82813                          CALL    ERROR_PRINT
  2227 000005EA E917FA                          JMP     TCOMMAND
  2228                                  
  2229                                  SINGLETEST:
  2230                                  ;ASSUME  DS:RESGROUP
  2231 000005ED 833E740800                      CMP     word [SINGLECOM],0
  2232 000005F2 7412                            JZ	short RET5
  2233 000005F4 813E7408FFEF                    CMP     word [SINGLECOM],0EFFFH
  2234                                          ;return
  2235 000005FA C3                      	RETN
  2236                                  
  2237                                  ;ASSUME  DS:TRANGROUP
  2238                                  
  2239                                  SETREST1:
  2240 000005FB B001                            MOV     AL,1
  2241                                  SETREST:
  2242 000005FD 1E                              PUSH    DS
  2243 000005FE 8E1EDA2C                        MOV     DS,[RESSEG]
  2244                                  ;ASSUME  DS:RESGROUP
  2245 00000602 A27208                          MOV     [RESTDIR],AL
  2246 00000605 1F                              POP     DS
  2247                                  ;ASSUME  DS:TRANGROUP
  2248                                  RET5:
  2249                                  	;return
  2250 00000606 C3                      	RETN
  2251                                  
  2252                                  CHKCNT:
  2253 00000607 F706FE2CFFFF                    TEST    word [FILECNT],-1
  2254 0000060D 7505                            JNZ     short ENDDIR
  2255                                  NOTFNDERR:
  2256                                  	;MOV     DX,OFFSET TRANGROUP:NOTFND
  2257 0000060F BA[2725]                	MOV     DX,NOTFND
  2258 00000612 EBD3                            JMP     short CERROR
  2259                                  
  2260                                  ENDDIR:
  2261                                  ; Make sure last line ends with CR/LF
  2262 00000614 A0FD2C                          MOV     AL,[LINLEN]
  2263 00000617 3A06FC2C                        CMP     AL,[LINCNT]     	; Will be equal if just had CR/LF
  2264 0000061B 7403                            JZ      short MESSAGE
  2265 0000061D E8A209                          CALL    CRLF2
  2266                                  MESSAGE:
  2267                                          ;MOV     DX,OFFSET TRANGROUP:DIRMES_PRE
  2268 00000620 BA[EC25]                        MOV     DX,DIRMES_PRE
  2269 00000623 E8FA12                          CALL    PRINT
  2270 00000626 8B36FE2C                        MOV     SI,[FILECNT]
  2271 0000062A 31FF                            XOR     DI,DI
  2272 0000062C E83C10                          CALL    DISP32BITS
  2273                                          ;MOV     DX,OFFSET TRANGROUP:DIRMES_POST
  2274 0000062F BA[E325]                        MOV     DX,DIRMES_POST
  2275 00000632 E8EB12                          CALL    PRINT
  2276 00000635 B436                            MOV     AH,GET_DRIVE_FREESPACE
  2277                                  	;MOV     DL,BYTE PTR DS:[FCB]
  2278 00000637 8A165C00                	MOV     DL,[FCB]
  2279 0000063B CD21                            INT     int_command
  2280 0000063D 83F8FF                          CMP     AX,-1
  2281                                          ;retz
  2282 00000640 74C4                    	jz	short RET5
  2283                                          ;MOV     DX,OFFSET TRANGROUP:BYTMES_PRE
  2284 00000642 BA[FA25]                        MOV     DX,BYTMES_PRE
  2285 00000645 E8D812                          CALL    PRINT
  2286 00000648 F7E1                            MUL     CX              		; AX is bytes per cluster
  2287 0000064A F7E3                            MUL     BX
  2288 0000064C 89D7                            MOV     DI,DX
  2289 0000064E 89C6                            MOV     SI,AX
  2290 00000650 E81810                          CALL    DISP32BITS
  2291                                  	;MOV     DX,OFFSET TRANGROUP:BYTMES_POST
  2292 00000653 BA[ED25]                	MOV     DX,BYTMES_POST
  2293 00000656 E9C712                          JMP     PRINT
  2294                                  
  2295                                  ;ASSUME  DS:RESGROUP
  2296                                  
  2297                                  PIPEDEL:
  2298 00000659 52                              PUSH    DX
  2299                                          ;MOV     DX,OFFSET RESGROUP:PIPE1	; Clean up in case ^C
  2300 0000065A BAFD09                          MOV     DX,PIPE1
  2301 0000065D B441                            MOV     AH,UNLINK
  2302 0000065F CD21                            INT     int_command
  2303                                          ;MOV     DX,OFFSET RESGROUP:PIPE2
  2304 00000661 BA0B0A                          MOV     DX,PIPE2
  2305 00000664 B441                            MOV     AH,UNLINK
  2306 00000666 CD21                            INT     int_command
  2307 00000668 31C0                            XOR     AX,AX
  2308 0000066A A37809                          MOV     WORD [PIPEFLAG],AX		; Pipe files and pipe gone
  2309 0000066D C6066F0801                      MOV     byte [ECHOFLAG],1	; Make sure ^C to pipe doesn't leave ECHO OFF
  2310 00000672 5A                              POP     DX
  2311 00000673 C3                              RETN
  2312                                  
  2313                                  PIPEERRSYN:
  2314                                          ;MOV     DX,OFFSET TRANGROUP:SYNTMES
  2315 00000674 BA[0328]                	MOV     DX,SYNTMES
  2316 00000677 EB03                            JMP     SHORT PIPPERR
  2317                                  PIPEERR:
  2318                                          ;MOV     DX,OFFSET TRANGROUP:PIPEEMES
  2319 00000679 BA[2A28]                        MOV     DX,PIPEEMES
  2320                                  PIPPERR:
  2321 0000067C E8DAFF                          CALL    PIPEDEL
  2322 0000067F 0E                              PUSH    CS
  2323 00000680 1F                              POP     DS
  2324 00000681 E963FF                          JMP     CERROR
  2325                                  
  2326                                  PIPEPROCSTRT:
  2327                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  2328 00000684 8E1EDA2C                        MOV     DS,[RESSEG]
  2329                                  ;ASSUME  DS:RESGROUP
  2330 00000688 FE067909                        INC     byte [PIPEFILES]	; Flag that the pipe files exist
  2331 0000068C B419                            MOV     AH,19H                  ; Get current drive
  2332 0000068E CD21                            INT     int_command
  2333 00000690 0441                            ADD     AL,'A'
  2334 00000692 A20B0A                          MOV     [PIPE2],AL              ; Make pipe files in root of def drv
  2335                                          ;MOV     BX,OFFSET RESGROUP:PIPE1
  2336 00000695 BBFD09                          MOV     BX,PIPE1
  2337 00000698 8807                            MOV     [BX],AL
  2338 0000069A 89DA                            MOV     DX,BX
  2339 0000069C 31C9                            XOR     CX,CX
  2340 0000069E B43C                            MOV     AH,CREAT
  2341 000006A0 CD21                            INT     int_command
  2342 000006A2 72D5                            JC      short PIPEERR		; Couldn't create
  2343 000006A4 89C3                            MOV     BX,AX
  2344 000006A6 B43E                            MOV     AH,CLOSE                ; Don't proliferate handles
  2345 000006A8 CD21                            INT     int_command
  2346                                          ;MOV     DX,OFFSET RESGROUP:PIPE2
  2347 000006AA BA0B0A                          MOV     DX,PIPE2
  2348 000006AD B43C                            MOV     AH,CREAT
  2349 000006AF CD21                            INT     int_command
  2350 000006B1 72C6                            JC      short PIPEERR
  2351 000006B3 89C3                            MOV     BX,AX
  2352 000006B5 B43E                            MOV     AH,CLOSE
  2353 000006B7 CD21                            INT     int_command
  2354 000006B9 E8F606                          CALL    TESTDOREIN      	; Set up a redirection if specified
  2355 000006BC C6066F0800                      MOV     byte [ECHOFLAG],0    	; No echo on pipes
  2356 000006C1 8B367A09                        MOV     SI,[PIPEPTR]
  2357 000006C5 833E7408FF                      CMP     word [SINGLECOM],-1
  2358 000006CA 7506                            JNZ     short NOSINGP
  2359 000006CC C706740800F0                    MOV     word [SINGLECOM],0F000H	; Flag single command pipe
  2360                                  NOSINGP:
  2361 000006D2 EB23                            JMP     SHORT FIRSTPIPE
  2362                                  
  2363                                  PIPEPROC:
  2364                                  ;ASSUME  DS:RESGROUP
  2365 000006D4 C6066F0800                      MOV     byte [ECHOFLAG],0	; No echo on pipes
  2366 000006D9 8B367A09                        MOV     SI,[PIPEPTR]
  2367 000006DD AC                              LODSB
  2368 000006DE 3C7C                            CMP     AL,'|'		; 7Ch
  2369 000006E0 7577                            JNZ	short PIPEEND		; Pipe done
  2370 000006E2 8B16190A                        MOV     DX,[INPIPEPTR]  	; Get the input file name
  2371                                          ;MOV     AX,(OPEN SHL 8)
  2372 000006E6 B8003D                          MOV     AX,OPEN*256
  2373 000006E9 CD21                            INT     int_command
  2374                                  PIPEERRJ:
  2375 000006EB 728C                            JC	short PIPEERR		; Lost the pipe file
  2376 000006ED 89C3                            MOV     BX,AX
  2377 000006EF B0FF                            MOV     AL,0FFH
  2378                                  	;XCHG    AL,[BX.PDB_JFN_Table]
  2379 000006F1 864718                  	XCHG    AL,[BX+PDB.JFN_TABLE]
  2380                                  	;MOV     DS:[PDB_JFN_Table],AL	; Redirect
  2381 000006F4 A21800                  	MOV     [PDB.JFN_TABLE],AL
  2382                                  FIRSTPIPE:
  2383                                          ;MOV     DI,OFFSET TRANGROUP:COMBUF + 2
  2384 000006F7 BFC52B                          MOV     DI,COMBUF+2
  2385 000006FA 31C9                            XOR     CX,CX
  2386 000006FC 803C0D                          CMP     BYTE [SI],0DH		; '|<CR>'
  2387 000006FF 7503                            JNZ	short PIPEOK1
  2388                                  PIPEERRSYNJ:
  2389 00000701 E970FF                          JMP     PIPEERRSYN
  2390                                  PIPEOK1:
  2391 00000704 803C7C                          CMP     BYTE [SI],'|'		; '||'
  2392 00000707 74F8                            JZ	short PIPEERRSYNJ
  2393                                  PIPECOMLP:
  2394 00000709 AC                              LODSB
  2395 0000070A AA                              STOSB
  2396                                  
  2397                                          ;IF	KANJI
  2398                                          ;CALL	TESTKANJ
  2399                                          ;JZ	NOTKANJ5
  2400                                          ;MOVSB
  2401                                          ;JMP	PIPECOMLP
  2402                                  ;NOTKANJ5:
  2403                                          ;ENDIF
  2404                                  
  2405 0000070B 3C0D                            CMP     AL,0DH
  2406 0000070D 7438                            JZ	short LASTPIPE
  2407 0000070F 41                              INC     CX
  2408 00000710 3C7C                            CMP     AL,'|'			; 7Ch
  2409 00000712 75F5                            JNZ     PIPECOMLP
  2410 00000714 26C645FF0D                      MOV     BYTE [ES:DI-1],0DH
  2411 00000719 49                              DEC     CX
  2412                                          ;MOV     [COMBUF+1],CL
  2413 0000071A 36880EC42B                      MOV     [SS:COMBUF+1],CL
  2414 0000071F 4E                              DEC     SI
  2415 00000720 89367A09                        MOV     [PIPEPTR],SI            ; On to next pipe element
  2416 00000724 8B161B0A                        MOV     DX,[OUTPIPEPTR]
  2417 00000728 51                              PUSH    CX
  2418 00000729 31C9                            XOR     CX,CX
  2419                                          ;MOV     AX,(CREAT SHL 8)
  2420 0000072B B8003C                          MOV     AX,CREAT*256
  2421 0000072E CD21                            INT     int_command
  2422 00000730 59                              POP     CX
  2423 00000731 72B8                            JC      short PIPEERRJ		; Lost the file
  2424 00000733 89C3                            MOV     BX,AX
  2425 00000735 B0FF                            MOV     AL,0FFH
  2426                                          ;XCHG    AL,[BX.PDB_JFN_Table]
  2427 00000737 864718                          XCHG    AL,[BX+PDB.JFN_TABLE]
  2428                                          ;MOV     DS:[PDB_JFN_Table+1],AL
  2429 0000073A A21900                          MOV     [PDB.JFN_TABLE+1],AL
  2430 0000073D 8716190A                        XCHG    DX,[INPIPEPTR]          ; Swap for next element of pipe
  2431 00000741 89161B0A                        MOV     [OUTPIPEPTR],DX
  2432 00000745 EB0D                            JMP     SHORT PIPECOM
  2433                                  
  2434                                  LASTPIPE:
  2435 00000747 36880EC42B                      MOV     [SS:COMBUF+1],CL
  2436 0000074C 4E                              DEC     SI
  2437 0000074D 89367A09                        MOV     [PIPEPTR],SI    ; Point at the CR (anything not '|' will do)
  2438 00000751 E88206                          CALL    TESTDOREOUT     ; Set up the redirection if specified
  2439                                  PIPECOM:
  2440 00000754 0E                              PUSH    CS
  2441 00000755 1F                              POP     DS
  2442 00000756 E90DFB                          JMP     NOPIPEPROC      	; Process the pipe element
  2443                                  
  2444                                  PIPEEND:
  2445 00000759 E8FDFE                          CALL    PIPEDEL
  2446 0000075C 813E740800F0                    CMP     word [SINGLECOM],0F000H
  2447 00000762 7506                            JNZ     short NOSINGP2
  2448 00000764 C7067408FFFF                    MOV     word [SINGLECOM],-1	; Make it return
  2449                                  NOSINGP2:
  2450 0000076A E997F8                          JMP	TCOMMAND
  2451                                  
  2452                                  ;TRANCODE  ENDS
  2453                                  ;          END
  2454                                  
  2455                                  ;=============================================================================
  2456                                  ; TCODE2.ASM
  2457                                  ;=============================================================================
  2458                                  
  2459                                  ;TITLE   PART2 - COMMAND Transient routines.
  2460                                  
  2461                                  ;TRANCODE SEGMENT PUBLIC BYTE
  2462                                  ;ASSUME  CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  2463                                  
  2464                                  ;BREAK   <Environment utilities>
  2465                                  
  2466                                  ;ASSUME DS:TRANGROUP
  2467                                  
  2468                                  ADD_PROMPT:
  2469 0000076D E87600                          CALL    DELETE_PROMPT		; DELETE ANY EXISTING PROMPT
  2470 00000770 E8FD00                          CALL    SCAN_DOUBLE_NULL
  2471                                  ADD_PROMPT2:
  2472 00000773 56                              PUSH    SI
  2473 00000774 E8EB00                          CALL    GETARG
  2474 00000777 5E                              POP     SI
  2475                                  	;retz				; PRE SCAN FOR ARGUMENTS
  2476 00000778 7448                    	JZ	SHORT ADD_NAME_retn
  2477 0000077A E8D400                          CALL    MOVE_NAME		; MOVE IN NAME
  2478 0000077D E8E200                          CALL    GETARG
  2479 00000780 EB36                            JMP     SHORT ADD_NAME
  2480                                  ;
  2481                                  ; Input: DS:SI points to a CR terminated string
  2482                                  ; Output: carry flag is set if no room
  2483                                  ;         otherwise name is added to environment
  2484                                  ;
  2485                                  ADD_NAME_TO_ENVIRONMENT:
  2486 00000782 E8DD00                          CALL    GETARG
  2487 00000785 743C                            JZ	short DISP_ENV
  2488                                  ;
  2489                                  ; check if line contains exactly one equals sign
  2490                                  ;
  2491 00000787 31DB                            XOR     BX,BX           	;= COUNT IS 0
  2492 00000789 56                              PUSH    SI              	;SAVE POINTER TO BEGINNING OF LINE
  2493                                  EQLP:
  2494 0000078A AC                              LODSB                   	;GET A CHAR
  2495 0000078B 3C0D                            CMP     AL,13  ; 0Dh		;IF CR WE'RE ALL DONE
  2496 0000078D 740F                            JZ	short QUEQ
  2497 0000078F 3C3D                            CMP     AL,"=" ; 3Dh		;LOOK FOR = SIGN
  2498 00000791 75F7                            JNZ     short EQLP		;NOT THERE, GET NEXT CHAR
  2499 00000793 FEC3                            INC     BL              	;OTHERWISE INCREMENT EQ COUNT
  2500 00000795 803C0D                          CMP     BYTE [SI],13		;LOOK FOR CR FOLLOWING = SIGN
  2501 00000798 75F0                            JNZ	short EQLP
  2502 0000079A FEC7                            INC     BH              	;SET BH=1 MEANS NO PARAMETERS
  2503 0000079C EBEC                            JMP     short EQLP		;AND LOOK FOR MORE
  2504                                  QUEQ:
  2505 0000079E 5E                              POP     SI              	;RESTORE BEGINNING OF LINE
  2506 0000079F FECB                            DEC     BL              	;ZERO FLAG MEANS ONLY ONE EQ
  2507 000007A1 7406                            JZ	short ONEQ		;GOOD LINE
  2508                                          ;MOV     DX,OFFSET TRANGROUP:SYNTMES
  2509 000007A3 BA[0328]                        MOV     DX,SYNTMES
  2510 000007A6 E93EFE                          JMP     CERROR
  2511                                  
  2512                                  ONEQ:
  2513 000007A9 53                              PUSH    BX
  2514 000007AA E83C00                          CALL    DELETE_NAME_IN_ENVIRONMENT
  2515 000007AD 5B                              POP     BX
  2516 000007AE FECF                            DEC     BH
  2517                                          ;retz
  2518 000007B0 7410                    	JZ	SHORT ADD_NAME_retn
  2519                                  
  2520 000007B2 E8BB00                          CALL    SCAN_DOUBLE_NULL
  2521 000007B5 E89900                          CALL    MOVE_NAME
  2522                                  ADD_NAME:
  2523 000007B8 AC                              LODSB
  2524 000007B9 3C0D                            CMP     AL,13
  2525                                          ;retz
  2526 000007BB 7405                    	JZ	SHORT ADD_NAME_retn
  2527 000007BD E8E100                          CALL    STORE_CHAR
  2528 000007C0 EBF6                            JMP     short ADD_NAME
  2529                                  
  2530                                  ADD_NAME_retn:
  2531                                  DISP_ENV_retn:
  2532 000007C2 C3                      	RETN
  2533                                  
  2534                                  DISP_ENV:
  2535 000007C3 8E1EDA2C                        MOV     DS,[RESSEG]
  2536                                  ;ASSUME  DS:RESGROUP
  2537 000007C7 8E1E1D0A                        MOV     DS,[ENVIRSEG]
  2538                                  ;ASSUME  DS:NOTHING
  2539 000007CB 31F6                            XOR     SI,SI
  2540                                  PENVLP:
  2541 000007CD 803C00                          CMP     BYTE [SI],0
  2542                                  	;retz
  2543 000007D0 74F0                    	JZ	SHORT DISP_ENV_retn
  2544                                  
  2545 000007D2 89F2                            MOV     DX,SI
  2546 000007D4 E84E11                          CALL    ZPRINT
  2547 000007D7 E8E807                          CALL    CRLF2
  2548                                  PENVLP2:
  2549 000007DA AC                              LODSB
  2550 000007DB 08C0                            OR      AL,AL
  2551 000007DD 75FB                            JNZ	short PENVLP2
  2552 000007DF EBEC                            JMP	short PENVLP
  2553                                  
  2554                                  ;ASSUME  DS:TRANGROUP
  2555                                  
  2556                                  DELETE_PATH:
  2557                                  	;MOV     SI,OFFSET TRANGROUP:PATH_TEXT
  2558 000007E1 BE[B527]                        MOV     SI,PATH_TEXT
  2559 000007E4 EB03                            JMP     SHORT DELETE_NAME_IN_ENVIRONMENT
  2560                                  
  2561                                  DELETE_PROMPT:
  2562                                  	;MOV     SI,OFFSET TRANGROUP:PROMPT_TEXT
  2563 000007E6 BE[BA27]                	MOV     SI,PROMPT_TEXT
  2564                                  
  2565                                  DELETE_NAME_IN_ENVIRONMENT:
  2566                                  ;
  2567                                  ; Input: DS:SI points to a "=" terminated string
  2568                                  ; Output: carry flag is set if name not found
  2569                                  ;         otherwise name is deleted
  2570                                  ;
  2571 000007E9 56                              PUSH    SI
  2572 000007EA 1E                              PUSH    DS
  2573 000007EB E82400                          CALL    FIND            	; ES:DI POINTS TO NAME
  2574 000007EE 7210                            JC	short DEL1
  2575 000007F0 89FE                            MOV     SI,DI           	; SAVE IT
  2576 000007F2 E89400                          CALL    SCASB2          	; SCAN FOR THE NUL
  2577 000007F5 87F7                            XCHG    SI,DI
  2578 000007F7 E8E600                          CALL    GETENVSIZ
  2579 000007FA 29F1                            SUB     CX,SI
  2580 000007FC 06                              PUSH    ES
  2581 000007FD 1F                              POP     DS	; ES:DI POINTS TO NAME, DS:SI POINTS TO NEXT NAME
  2582 000007FE F3A4                            REP     MOVSB 	; DELETE THE NAME
  2583                                  DEL1:
  2584 00000800 1F                              POP     DS
  2585 00000801 5E                              POP     SI
  2586 00000802 C3                              RETN
  2587                                  
  2588                                  FIND_PATH:
  2589                                          ;MOV     SI,OFFSET TRANGROUP:PATH_TEXT
  2590 00000803 BE[B527]                	MOV     SI,PATH_TEXT
  2591 00000806 EB03                            JMP     SHORT FIND_NAME_IN_ENVIRONMENT
  2592                                  
  2593                                  FIND_PROMPT:
  2594                                          ;MOV     SI,OFFSET TRANGROUP:PROMPT_TEXT
  2595 00000808 BE[BA27]                	MOV     SI,PROMPT_TEXT
  2596                                  
  2597                                  FIND_NAME_IN_ENVIRONMENT:
  2598                                  ;
  2599                                  ; Input: DS:SI points to a "=" terminated string
  2600                                  ; Output: ES:DI points to the arguments in the environment
  2601                                  ;         zero is set if name not found
  2602                                  ;         carry flag is set if name not valid format
  2603                                  ;
  2604 0000080B E80400                          CALL    FIND                    ; FIND THE NAME
  2605                                          ;retc				; CARRY MEANS NOT FOUND
  2606 0000080E 7232                    	jb	short FIND13
  2607 00000810 EB73                            JMP     SCASB1                  ; SCAN FOR = SIGN
  2608                                  ;
  2609                                  ; On return of FIND1, ES:DI points to beginning of name
  2610                                  ;
  2611                                  FIND:
  2612 00000812 FC                              CLD
  2613 00000813 E82D00                          CALL    COUNT0                  ; CX = LENGTH OF NAME
  2614 00000816 8E06DA2C                        MOV     ES,[RESSEG]
  2615                                  ;ASSUME  ES:RESGROUP
  2616                                          ;MOV     ES,[ENVIRSEG]
  2617 0000081A 268E061D0A              	MOV     ES,[ES:ENVIRSEG]
  2618                                  ;ASSUME  ES:NOTHING
  2619 0000081F 31FF                            XOR     DI,DI
  2620                                  FIND1:
  2621 00000821 51                              PUSH    CX
  2622 00000822 56                              PUSH    SI
  2623 00000823 57                              PUSH    DI
  2624                                  FIND11:
  2625 00000824 AC                              LODSB
  2626                                  
  2627                                          ;IF      KANJI
  2628                                          ;CALL    TESTKANJ
  2629                                          ;JZ      NOTKANJ3
  2630                                          ;DEC     SI
  2631                                          ;LODSW
  2632                                          ;INC     DI
  2633                                          ;INC     DI
  2634                                          ;CMP     AX,ES:[DI-2]
  2635                                          ;JNZ     FIND12
  2636                                          ;DEC     CX
  2637                                          ;LOOP    FIND11
  2638                                          ;JMP     SHORT FIND12
  2639                                  ;NOTKANJ3:
  2640                                  	;ENDIF
  2641                                  
  2642 00000825 E86900                          CALL    UPCONV
  2643 00000828 47                              INC     DI
  2644 00000829 263A45FF                        CMP     AL,[ES:DI-1]
  2645 0000082D 7502                            JNZ	short FIND12
  2646 0000082F E2F3                            LOOP    FIND11
  2647                                  FIND12:
  2648 00000831 5F                              POP     DI
  2649 00000832 5E                              POP     SI
  2650 00000833 59                              POP     CX
  2651                                          ;retz
  2652 00000834 740C                    	JZ	short FIND13
  2653 00000836 51                              PUSH    CX
  2654 00000837 E84F00                          CALL    SCASB2                  ; SCAN FOR A NUL
  2655 0000083A 59                              POP     CX
  2656 0000083B 26803D00                        CMP     BYTE [ES:DI],0
  2657 0000083F 75E0                            JNZ     short FIND1
  2658 00000841 F9                              STC                             ; INDICATE NOT FOUND
  2659                                  FIND13:
  2660 00000842 C3                              RETN
  2661                                  
  2662                                  COUNT0:
  2663 00000843 1E                              PUSH    DS
  2664 00000844 07                              POP     ES
  2665 00000845 89F7                            MOV     DI,SI
  2666                                  
  2667                                  ;COUNT1:
  2668 00000847 57                              PUSH    DI                      ; COUNT NUMBER OF CHARS UNTIL "="
  2669 00000848 E83A00                          CALL    SCASB1
  2670                                  ;       JMP     SHORT COUNTX
  2671                                  ;COUNT2:
  2672                                  ;	PUSH    DI                      ; COUNT NUMBER OF CHARS UNTIL NUL
  2673                                  ;	CALL    SCASB2
  2674                                  ;COUNTX:
  2675 0000084B 59                              POP     CX
  2676 0000084C 29CF                            SUB     DI,CX
  2677 0000084E 87F9                            XCHG    DI,CX
  2678 00000850 C3                              RETN
  2679                                  
  2680                                  MOVE_NAME:
  2681                                          ;CMP     BYTE PTR DS:[SI],13
  2682                                          ;retz
  2683 00000851 803C0D                  	CMP     BYTE [SI],13
  2684 00000854 740B                    	JZ	short MVNM_retn	
  2685 00000856 AC                              LODSB
  2686                                  
  2687                                          ;IF      KANJI
  2688                                  	;CALL    TESTKANJ
  2689                                          ;JZ      NOTKANJ1
  2690                                          ;CALL    STORE_CHAR
  2691                                          ;LODSB
  2692                                          ;CALL    STORE_CHAR
  2693                                          ;JMP     SHORT MOVE_NAME
  2694                                  ;NOTKANJ1:
  2695                                  	;ENDIF
  2696                                  
  2697 00000857 E83700                          CALL    UPCONV
  2698 0000085A E84400                          CALL    STORE_CHAR
  2699 0000085D 3C3D                            CMP     AL,"="
  2700 0000085F 75F0                            JNZ     MOVE_NAME
  2701                                  MVNM_retn:
  2702                                          ;return
  2703 00000861 C3                      	RETN
  2704                                  
  2705                                  GETARG:
  2706 00000862 BE8000                          MOV     SI,80H
  2707 00000865 AC                              LODSB
  2708 00000866 08C0                            OR      AL,AL
  2709                                          ;retz
  2710 00000868 7405                    	jz	short GETARG_retn
  2711 0000086A E8B90E                          CALL    SCANOFF
  2712 0000086D 3C0D                            CMP     AL,13
  2713                                  GETARG_retn:
  2714                                          ;return
  2715 0000086F C3                      	RETN
  2716                                  
  2717                                  SCAN_DOUBLE_NULL:
  2718 00000870 8E06DA2C                        MOV     ES,[RESSEG]
  2719                                  ;ASSUME  ES:RESGROUP
  2720 00000874 268E061D0A                      MOV     ES,[ES:ENVIRSEG]
  2721                                  ;ASSUME  ES:NOTHING
  2722 00000879 31FF                            XOR     DI,DI
  2723                                  SDN1:
  2724 0000087B E80B00                          CALL    SCASB2
  2725 0000087E 26803D00                        CMP     BYTE  [ES:DI],0
  2726 00000882 75F7                            JNZ     short SDN1
  2727 00000884 C3                              RETN
  2728                                  
  2729                                  SCASB1:
  2730 00000885 B03D                            MOV     AL,"="                  ; SCAN FOR AN =
  2731 00000887 EB02                            JMP     SHORT SCASBX
  2732                                  SCASB2:
  2733 00000889 30C0                            XOR     AL,AL                   ; SCAN FOR A NUL
  2734                                  SCASBX:
  2735 0000088B B90001                          MOV     CX,100H
  2736 0000088E F2AE                            REPNZ   SCASB
  2737                                          ;return
  2738 00000890 C3                      	RETN
  2739                                  
  2740                                          ;IF      KANJI
  2741                                  ;TESTKANJ:
  2742                                          ;CMP     AL,81H
  2743                                          ;JB      NOTLEAD
  2744                                          ;CMP     AL,9FH
  2745                                          ;JBE     ISLEAD
  2746                                          ;CMP     AL,0E0H
  2747                                          ;JB      NOTLEAD
  2748                                          ;CMP     AL,0FCH
  2749                                          ;JBE     ISLEAD
  2750                                  ;NOTLEAD:
  2751                                          ;PUSH    AX
  2752                                          ;XOR     AX,AX		;Set zero
  2753                                          ;POP     AX
  2754                                          ;return
  2755                                  ;ISLEAD:
  2756                                          ;PUSH    AX
  2757                                          ;XOR     AX,AX		;Set zero
  2758                                          ;INC     AX		;Reset zero
  2759                                          ;POP     AX
  2760                                          ;return
  2761                                          ;ENDIF
  2762                                  
  2763                                  UPCONV:
  2764 00000891 3C61                            CMP     AL,"a"
  2765 00000893 7206                            JB	short RET22C
  2766 00000895 3C7A                            CMP     AL,"z"
  2767 00000897 7702                            JA	short RET22C
  2768 00000899 2C20                            SUB     AL,20H          ; Lower-case changed to upper-case
  2769                                  RET22C:
  2770                                          ;CALL	DWORD PTR CS:[INTERNATVARS.Map_call]
  2771 0000089B 2EFF1E682F                      CALL	FAR [CS:INTERNATVARS+INTERNAT_BLOCK.Map_call]
  2772 000008A0 C3                              RETN
  2773                                  ;
  2774                                  ; STORE A CHAR IN environment, GROWING IT IF NECESSARY
  2775                                  ;
  2776                                  STORE_CHAR:
  2777 000008A1 51                              PUSH    CX
  2778 000008A2 53                              PUSH    BX
  2779 000008A3 E83A00                          CALL    GETENVSIZ
  2780 000008A6 89CB                            MOV     BX,CX
  2781 000008A8 83EB02                          SUB     BX,2            ; SAVE ROOM FOR DOUBLE NULL
  2782 000008AB 39DF                            CMP     DI,BX
  2783 000008AD 7228                            JB	short STORE1
  2784                                  
  2785 000008AF 50                              PUSH    AX
  2786 000008B0 51                              PUSH    CX
  2787 000008B1 53                              PUSH    BX              ; Save Size of environment
  2788 000008B2 E8050C                          CALL    FREE_TPA
  2789 000008B5 5B                              POP     BX
  2790 000008B6 83C302                          ADD     BX,2            ; Recover true environment size
  2791 000008B9 B104                            MOV     CL,4
  2792 000008BB D3EB                            SHR     BX,CL           ; Convert back to paragraphs
  2793 000008BD 43                              INC     BX              ; Try to grow environment by one para
  2794 000008BE B44A                            MOV     AH,SETBLOCK
  2795 000008C0 CD21                            INT     int_command
  2796 000008C2 9C                              PUSHF
  2797 000008C3 06                              PUSH    ES
  2798 000008C4 8E06DA2C                        MOV     ES,[RESSEG]
  2799 000008C8 E8FA0B                          CALL    ALLOC_TPA
  2800 000008CB 07                              POP     ES
  2801 000008CC 9D                              POPF
  2802 000008CD 59                              POP     CX
  2803 000008CE 58                              POP     AX
  2804 000008CF 7306                            JNC	short STORE1
  2805                                          ;MOV     DX,OFFSET TRANGROUP:ENVERR
  2806 000008D1 BA[5225]                        MOV     DX,ENVERR
  2807 000008D4 E910FD                          JMP     CERROR
  2808                                  STORE1:
  2809 000008D7 AA                              STOSB
  2810 000008D8 26C7050000                      MOV     WORD [ES:DI],0		; NULL IS AT END
  2811 000008DD 5B                              POP     BX
  2812 000008DE 59                              POP     CX
  2813 000008DF C3                              RETN
  2814                                  
  2815                                  GETENVSIZ:
  2816                                  ;Get size of environment in bytes, rounded up to paragraph boundry
  2817                                  ;ES has environment segment
  2818                                  ;Size returned in CX, all other registers preserved
  2819                                  
  2820 000008E0 06                              PUSH    ES
  2821 000008E1 50                              PUSH    AX
  2822 000008E2 8CC0                            MOV     AX,ES
  2823 000008E4 48                              DEC     AX              	;Point at arena
  2824 000008E5 8EC0                            MOV     ES,AX
  2825                                  	;MOV     AX,ES:[arena_size]
  2826 000008E7 26A10300                	MOV	AX, [ES:ARENA.SIZE]
  2827 000008EB B104                            MOV     CL,4
  2828 000008ED D3E0                            SHL     AX,CL           	;Convert to bytes
  2829 000008EF 89C1                            MOV     CX,AX
  2830 000008F1 58                              POP     AX
  2831 000008F2 07                              POP     ES
  2832 000008F3 C3                              RETN
  2833                                  
  2834                                  PRINT_DRIVE:
  2835 000008F4 B419                            MOV     AH,GET_DEFAULT_DRIVE
  2836 000008F6 CD21                            INT     int_command
  2837 000008F8 0441                            ADD     AL,"A"
  2838 000008FA E9F00F                          JMP     OUT
  2839                                  
  2840                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  2841                                  PWD:
  2842 000008FD E80800                          CALL    PRINT_DIRECTORY
  2843                                          ;CALL	CRLF2
  2844                                  	;RETN
  2845 00000900 E9BF06                  	JMP	CRLF2
  2846                                  
  2847                                  PRINT_DEFAULT_DIRECTORY:
  2848                                          ;MOV     BYTE PTR DS:[FCB],0
  2849 00000903 C6065C0000                      MOV     BYTE [FCB],0
  2850                                  PRINT_DIRECTORY:
  2851                                          ;MOV     DL,DS:[FCB]
  2852 00000908 8A165C00                        MOV     DL,[FCB]
  2853 0000090C 88D0                            MOV     AL,DL
  2854 0000090E 0440                            ADD     AL,'@'
  2855 00000910 3C40                            CMP     AL,'@'
  2856 00000912 7506                            JNZ     short GOTDRIVE
  2857 00000914 0206EA2C                        ADD     AL,[CURDRV]
  2858 00000918 FEC0                            INC     AL
  2859                                  GOTDRIVE:
  2860 0000091A 50                              PUSH    AX
  2861                                  	;MOV     SI,OFFSET TRANGROUP:PWDBUF+3
  2862 0000091B BECF2D                  	MOV     SI,PWDBUF+3
  2863 0000091E B447                            MOV     AH,CURRENT_DIR
  2864 00000920 CD21                            INT     int_command
  2865 00000922 7305                            JNC     short DPBISOK
  2866 00000924 0E                              PUSH    CS
  2867 00000925 1F                              POP     DS
  2868 00000926 E926FA                          JMP     DRVBAD
  2869                                  DPBISOK:
  2870                                  	;MOV     DI,OFFSET TRANGROUP:PWDBUF
  2871 00000929 BFCC2D                  	MOV     DI,PWDBUF
  2872 0000092C 89FA                            MOV     DX,DI
  2873 0000092E 58                              POP     AX
  2874 0000092F B43A                            MOV     AH,DRVCHAR
  2875 00000931 AB                              STOSW
  2876 00000932 A0DF2C                          MOV     AL,[DIRCHAR]
  2877 00000935 AA                              STOSB
  2878 00000936 E9EC0F                          JMP     ZPRINT
  2879                                  
  2880                                  _$EXIT:
  2881 00000939 06                              PUSH    ES
  2882 0000093A 8E06DA2C                        MOV     ES,[RESSEG]
  2883                                  ;ASSUME  ES:RESGROUP
  2884                                          ;MOV     AX,[PARENT]
  2885 0000093E 26A12D08                	MOV	AX,[ES:PARENT] ; 30/04/2018
  2886                                          ;MOV     WORD PTR ES:[PDB_Parent_PID],AX
  2887 00000942 26A31600                        MOV     [ES:PDB.PARENT_PID],AX
  2888                                  
  2889                                  ;IF IBM
  2890                                  	;CMP     byte [PERMCOM],0
  2891                                  	;JNZ     short NORESETVEC	;Don't reset the vector if a PERMCOM
  2892                                          ;;LDS     DX,DWORD PTR ES:[SYS_CALL]
  2893                                          ;LDS     DX,[ES:SYS_CALL]
  2894                                  ;ASSUME  DS:NOTHING
  2895                                          ;MOV     AX,(SET_INTERRUPT_VECTOR SHL 8) + INT_COMMAND
  2896                                          ;MOV     AX,(SET_INTERRUPT_VECTOR*256) + INT_COMMAND
  2897                                          ;INT     int_command
  2898                                  ;NORESETVEC:
  2899                                  ;ENDIF
  2900                                  
  2901 00000946 07                              POP     ES
  2902                                  ;ASSUME  ES:TRANGROUP
  2903                                          ;MOV     ES,[TPA]
  2904                                          ;MOV     ES,[SS:TPA]
  2905 00000947 8E06DC2C                        MOV     ES,[TPA] ; 30/04/2018
  2906 0000094B B449                            MOV     AH,DEALLOC
  2907 0000094D CD21                            INT     int_command		; Now running in "free" space
  2908                                  	;MOV     AX,(EXIT SHL 8)
  2909 0000094F B8004C                  	MOV     AX,EXIT*256
  2910 00000952 CD21                            INT     int_command
  2911                                  
  2912                                  CTTY:
  2913 00000954 E8590E                          CALL    SETPATH         	; Get spec
  2914                                          ;MOV     AX,(OPEN SHL 8) OR 2	; Read and write
  2915 00000957 B8023D                          MOV     AX,(OPEN*256) | 2
  2916 0000095A CD21                            INT     int_command             ; Open new device
  2917 0000095C 7210                            JC	short ISBADDEV
  2918 0000095E 89C3                            MOV     BX,AX
  2919                                  	;MOV     AX,IOCTL SHL 8
  2920 00000960 B80044                  	MOV     AX,IOCTL*256
  2921 00000963 CD21                            INT     int_command
  2922 00000965 F6C280                          TEST    DL,80H
  2923 00000968 750C                            JNZ	short DEVISOK
  2924 0000096A B43E                            MOV     AH,CLOSE		; Close initial handle
  2925 0000096C CD21                            INT     int_command
  2926                                  ISBADDEV:
  2927                                          ;MOV     DX,OFFSET TRANGROUP:BADDEV
  2928 0000096E BA[E027]                        MOV     DX,BADDEV
  2929 00000971 E8AC0F                          CALL    PRINT
  2930 00000974 EB28                            JMP     short RESRET
  2931                                  
  2932                                  DEVISOK:
  2933 00000976 30F6                            XOR     DH,DH
  2934 00000978 80CA03                          OR      DL,3            	; Make sure has CON attributes
  2935                                          ;MOV     AX,(IOCTL SHL 8) OR 1
  2936 0000097B B80144                          MOV     AX,(IOCTL*256) | 1
  2937 0000097E CD21                            INT     int_command
  2938 00000980 53                              PUSH    BX                      ; Save handle
  2939 00000981 B90300                          MOV     CX,3
  2940 00000984 31DB                            XOR     BX,BX
  2941                                  ICLLOOP:                                ; Close basic handles
  2942 00000986 B43E                            MOV     AH,CLOSE
  2943 00000988 CD21                            INT     int_command
  2944 0000098A 43                              INC     BX
  2945 0000098B E2F9                            LOOP    ICLLOOP
  2946 0000098D 5B                              POP     BX              	; Get handle
  2947 0000098E B445                            MOV     AH,XDUP
  2948 00000990 CD21                            INT     int_command             ; Dup it to 0
  2949 00000992 B445                            MOV     AH,XDUP
  2950 00000994 CD21                            INT     int_command             ; Dup to 1
  2951 00000996 B445                            MOV     AH,XDUP
  2952 00000998 CD21                            INT     int_command             ; Dup to 2
  2953 0000099A B43E                            MOV     AH,CLOSE        	; Close initial handle
  2954 0000099C CD21                            INT     int_command
  2955                                  RESRET:
  2956                                          ;MOV     DS,[SS:RESSEG]
  2957 0000099E 8E1EDA2C                        MOV     DS,[RESSEG] ; 30/04/2018
  2958                                  ;ASSUME  DS:RESGROUP
  2959 000009A2 1E                              PUSH    DS
  2960                                          ;MOV	AX,WORD PTR DS:[PDB_JFN_Table] ; Get new 0 and 1
  2961 000009A3 A11800                          MOV	AX,[PDB.JFN_TABLE]
  2962 000009A6 A37008                          MOV     [IO_SAVE],AX
  2963                                          ;MOV	AX,OFFSET RESGROUP:LODCOM1
  2964 000009A9 B8CF02                          MOV     AX,LODCOM1  ; (Transient portion loader address)	
  2965 000009AC 50                              PUSH    AX
  2966                                  ;ZMMMM	PROC FAR
  2967                                          ;RET				; Force header to be checked
  2968 000009AD CB                      	RETF
  2969                                  ;ZMMMM	ENDP
  2970                                  
  2971                                  ;TRANCODE ENDS
  2972                                          ;END
  2973                                  
  2974                                  ;=============================================================================
  2975                                  ; TCODE3.ASM
  2976                                  ;=============================================================================
  2977                                  
  2978                                  ;TITLE   PART3 - COMMAND Transient routines.
  2979                                  
  2980                                  ;TRANCODE  SEGMENT PUBLIC BYTE
  2981                                  ;ASSUME  CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  2982                                  
  2983                                  ; ASSUME  DS:RESGROUP
  2984                                  
  2985                                  FORTERM:
  2986 000009AE C606780800                      MOV     byte [FORFLAG],0
  2987 000009B3 813E740800FF                    CMP     word [SINGLECOM],0FF00H
  2988 000009B9 7506                            JNZ	short NOFORP2
  2989 000009BB C7067408FFFF                    MOV	word [SINGLECOM],-1	; Cause a terminate
  2990                                  NOFORP2:
  2991 000009C1 E940F6                          JMP     TCOMMAND
  2992                                  
  2993                                  FORPROC:
  2994                                  ;ASSUME  DS:RESGROUP
  2995 000009C4 803EFF08FF                      CMP     byte [FORUFCB],-1
  2996 000009C9 744F                            JZ	short NORMFOR
  2997                                          ;MOV     DX,OFFSET TRANGROUP:DIRBUF
  2998 000009CB BACC2D                          MOV     DX,DIRBUF
  2999 000009CE 1E                              PUSH    DS
  3000 000009CF 0E                              PUSH    CS
  3001 000009D0 1F                              POP     DS
  3002                                  ;ASSUME  DS:TRANGROUP
  3003 000009D1 B41A                            MOV     AH,SET_DMA
  3004 000009D3 CD21                            INT     int_command
  3005 000009D5 1F                              POP     DS
  3006                                  ;ASSUME  DS:RESGROUP
  3007                                          ;MOV     DX,OFFSET RESGROUP:FORFCB
  3008 000009D6 BA0009                          MOV     DX,FORFCB
  3009 000009D9 B412                            MOV     AH,DIR_SEARCH_NEXT
  3010 000009DB 803EFF0800                      CMP     byte [FORUFCB],0
  3011 000009E0 7407                            JZ	short DOFORSRCH
  3012 000009E2 B411                            MOV     AH,DIR_SEARCH_FIRST
  3013 000009E4 C606FF0800                      MOV	byte [FORUFCB],0
  3014                                  DOFORSRCH:
  3015 000009E9 CD21                            INT     int_command
  3016 000009EB 08C0                            OR      AL,AL
  3017 000009ED 75BF                            JNZ	short FORTERM
  3018 000009EF 1E                              PUSH    DS
  3019 000009F0 07                              POP     ES
  3020                                  ;ASSUME  ES:RESGROUP
  3021 000009F1 0E                              PUSH    CS
  3022 000009F2 1F                              POP     DS
  3023                                  ;ASSUME  DS:TRANGROUP
  3024                                          ;MOV     SI,OFFSET TRANGROUP:DIRBUF
  3025 000009F3 BECC2D                          MOV     SI,DIRBUF
  3026                                  	;MOV     DI,OFFSET RESGROUP:FORSET
  3027 000009F6 BF7A08                  	MOV     DI,FORSET
  3028                                          ;MOV     [FORPTR],DI
  3029 000009F9 26893EFD08                      MOV     [ES:FORPTR],DI
  3030 000009FE AC                              LODSB				;Get drive spec
  3031 000009FF 0440                            ADD     AL,'@'
  3032 00000A01 3C40                            CMP     AL,'@'
  3033 00000A03 740B                            JZ	short NDRV8
  3034                                          ;CMP     [UFORDRV],0
  3035 00000A05 26803E790800                    CMP     byte [ES:UFORDRV],0
  3036 00000A0B 7403                            JZ	short NDRV8
  3037 00000A0D B43A                            MOV     AH,':'
  3038 00000A0F AB                              STOSW
  3039                                  NDRV8:
  3040 00000A10 E8830E                          CALL    FCB_TO_ASCZ
  3041                                          ;MOV     BYTE PTR ES:[DI-1],0DH
  3042 00000A13 26C645FF0D                      MOV     BYTE [ES:DI-1],0DH
  3043 00000A18 06                              PUSH    ES
  3044 00000A19 1F                              POP     DS
  3045                                  ;ASSUME  DS:RESGROUP
  3046                                  NORMFOR:
  3047 00000A1A 0E                              PUSH    CS
  3048 00000A1B 07                              POP     ES
  3049                                  ;ASSUME  ES:TRANGROUP
  3050 00000A1C 8B1EFD08                        MOV     BX,[FORPTR]
  3051 00000A20 803F00                          CMP     BYTE [BX],0
  3052 00000A23 7489                            JZ	short FORTERM
  3053 00000A25 89DE                            MOV     SI,BX
  3054                                  PARMSUB0:
  3055 00000A27 AC                              LODSB
  3056 00000A28 3C0D                            CMP     AL,0DH
  3057 00000A2A 75FB                            JNZ	short PARMSUB0
  3058 00000A2C 89F2                            MOV     DX,SI           ; DX points to next parm
  3059                                          ;MOV     SI,OFFSET RESGROUP:FORCOM
  3060 00000A2E BEA208                          MOV     SI,FORCOM
  3061                                          ;MOV     DI,OFFSET TRANGROUP:COMBUF+2
  3062 00000A31 BFC52B                          MOV     DI,COMBUF+2
  3063 00000A34 31C9                            XOR     CX,CX
  3064                                  TFORCOM:
  3065 00000A36 AC                              LODSB
  3066 00000A37 3C25                            CMP     AL,'%'
  3067 00000A39 7518                            JNZ	short NOFORPARM
  3068 00000A3B 8A26FC08                        MOV     AH,[FORVAR]
  3069 00000A3F 3A24                            CMP     AH,[SI]
  3070 00000A41 7510                            JNZ	short NOFORPARM
  3071 00000A43 46                              INC     SI
  3072 00000A44 56                              PUSH    SI
  3073 00000A45 89DE                            MOV     SI,BX
  3074                                  PARMSUB:
  3075 00000A47 AC                              LODSB
  3076 00000A48 3C0D                            CMP     AL,0DH
  3077 00000A4A 7404                            JZ	short PARMSUBDONE
  3078 00000A4C 41                              INC     CX
  3079 00000A4D AA                              STOSB
  3080 00000A4E EBF7                            JMP     SHORT PARMSUB
  3081                                  PARMSUBDONE:
  3082 00000A50 5E                              POP     SI			; Get back command line pointer
  3083 00000A51 EBE3                            JMP	short TFORCOM
  3084                                  NOFORPARM:
  3085 00000A53 AA                              STOSB
  3086 00000A54 41                              INC     CX
  3087 00000A55 3C0D                            CMP     AL,0DH
  3088 00000A57 75DD                            JNZ	short TFORCOM
  3089 00000A59 49                              DEC     CX
  3090                                          ;MOV     [COMBUF+1],CL
  3091                                          ;MOV     [SS:COMBUF+1],CL
  3092 00000A5A 2E880EC42B                      MOV     [CS:COMBUF+1],CL
  3093 00000A5F 8916FD08                        MOV     [FORPTR],DX		; Point to next set element
  3094 00000A63 F6066F08FF                      TEST    byte [ECHOFLAG],-1
  3095 00000A68 0E                              PUSH    CS
  3096 00000A69 1F                              POP     DS
  3097                                  ;ASSUME  DS:TRANGROUP
  3098 00000A6A 7413                            JZ	short NOECHO3
  3099                                          ;MOV     BYTE PTR ES:[DI-1],'$'
  3100 00000A6C 26C645FF24              	MOV	BYTE [ES:DI-1],'$'
  3101                                  	;MOV     DX,OFFSET TRANGROUP:COMBUF+2
  3102 00000A71 BAC52B                  	MOV     DX,COMBUF+2
  3103 00000A74 E8A90E                          CALL    PRINT
  3104                                          ;MOV     BYTE PTR ES:[DI-1],0DH
  3105 00000A77 26C645FF0D                      MOV     BYTE [ES:DI-1],0DH
  3106 00000A7C E9DCF7                          JMP     DOCOM
  3107                                  NOECHO3:
  3108 00000A7F E9DCF7                          JMP     DOCOM1
  3109                                  
  3110                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  3111                                  
  3112                                  FORNESTERR:
  3113 00000A82 1E                              PUSH    DS
  3114 00000A83 8E1EDA2C                        MOV     DS,[RESSEG]
  3115                                  ;ASSUME  DS:RESGROUP
  3116                                  	;MOV     DX,OFFSET TRANGROUP:FORNESTMES
  3117 00000A87 BA[1228]                	MOV     DX,FORNESTMES
  3118 00000A8A 813E740800FF                    CMP     word [SINGLECOM],0FF00H
  3119 00000A90 7506                            JNZ	short NOFORP3
  3120 00000A92 C7067408FFFF                    MOV	word [SINGLECOM],-1	; Cause termination
  3121                                  NOFORP3:
  3122 00000A98 1F                              POP     DS
  3123                                  ;ASSUME  DS:TRANGROUP
  3124 00000A99 E94BFB                          JMP     CERROR
  3125                                  
  3126                                  _$FOR:
  3127 00000A9C BE8100                          MOV     SI,81H
  3128 00000A9F 31C9                            XOR     CX,CX
  3129 00000AA1 8E06DA2C                        MOV     ES,[RESSEG]
  3130                                  ;ASSUME  ES:RESGROUP
  3131                                          ;MOV     DI,OFFSET RESGROUP:FORSET
  3132 00000AA5 BF7A08                          MOV     DI,FORSET
  3133 00000AA8 30C0                            XOR     AL,AL
  3134                                          ;MOV     [UFORDRV],AL
  3135 00000AAA 26A27908                        MOV     [ES:UFORDRV],AL
  3136                                          ;XCHG    AL,[FORFLAG]
  3137 00000AAE 2686067808                      XCHG    AL,[ES:FORFLAG]
  3138 00000AB3 08C0                            OR      AL,AL
  3139 00000AB5 75CB                            JNZ	short FORNESTERR
  3140                                          ;MOV     [FORPTR],DI
  3141 00000AB7 26893EFD08                      MOV     [ES:FORPTR],DI
  3142                                          ;MOV     [FORUFCB],-1
  3143 00000ABC 26C606FF08FF                    MOV     byte [ES:FORUFCB],-1
  3144 00000AC2 E8610C                          CALL    SCANOFF
  3145 00000AC5 AD                              LODSW
  3146 00000AC6 3C25                            CMP     AL,'%'
  3147 00000AC8 756D                            JNZ	short FORERRORJ
  3148                                          ;MOV     [FORVAR],AH
  3149 00000ACA 268826FC08                      MOV     [ES:FORVAR],AH
  3150 00000ACF E8540C                          CALL    SCANOFF
  3151 00000AD2 3C0D                            CMP     AL,0DH
  3152 00000AD4 7424                            JZ	short FORERRORJ2
  3153 00000AD6 AD                              LODSW
  3154                                          ;CMP     AX,('N' SHL 8) OR 'I'
  3155 00000AD7 3D494E                  	CMP     AX,4E49H ; 'IN'
  3156 00000ADA 7405                            JZ	SHORT FOROK1
  3157                                          ;CMP     AX,('n' SHL 8) OR 'i'
  3158 00000ADC 3D696E                          CMP     AX,6E69H ; 'in'
  3159 00000ADF 7556                            JNZ	SHORT FORERRORJ
  3160                                  FOROK1:
  3161 00000AE1 E8420C                          CALL    SCANOFF
  3162 00000AE4 AC                              LODSB
  3163 00000AE5 3C28                            CMP     AL,'('   ; 28H
  3164 00000AE7 754E                            JNZ	short FORERRORJ
  3165 00000AE9 E83A0C                          CALL    SCANOFF
  3166 00000AEC 3C29                            CMP     AL,')'	 ; 29H		; Special check for null set
  3167 00000AEE 7507                            JNZ	short FORSETLP
  3168 00000AF0 8E1EDA2C                        MOV     DS,[RESSEG]
  3169 00000AF4 E9B7FE                          JMP     FORTERM
  3170                                  FORSETLP:
  3171 00000AF7 AC                              LODSB
  3172 00000AF8 3C0D                            CMP     AL,0DH
  3173                                  FORERRORJ2:
  3174 00000AFA 7442                            JZ	short FORERRORJ3
  3175 00000AFC 3C29                            CMP     AL,')'   ; 29H
  3176 00000AFE 741E                            JZ	short FORSETEND
  3177 00000B00 AA                              STOSB
  3178 00000B01 3C2A                            CMP     AL,'*'	 ; 2AH
  3179 00000B03 7404                            JZ	short SETFORSCAN
  3180 00000B05 3C3F                            CMP     AL,'?'	 ; 3FH
  3181 00000B07 7506                            JNZ	short NOFORSCAN
  3182                                  SETFORSCAN:
  3183                                          ;MOV     [FORUFCB],1
  3184 00000B09 26C606FF0801                    MOV	byte [ES:FORUFCB],1
  3185                                  NOFORSCAN:
  3186 00000B0F E81C0C                          CALL    DELIM
  3187 00000B12 75E3                            JNZ	short FORSETLP
  3188 00000B14 26C645FF0D                      MOV     BYTE [ES:DI-1],0DH
  3189 00000B19 E80A0C                          CALL    SCANOFF
  3190 00000B1C EBD9                            JMP	short FORSETLP
  3191                                  
  3192                                  FORSETEND:
  3193 00000B1E B80D00                          MOV     AX,000DH
  3194 00000B21 26807DFF0D                      CMP     BYTE [ES:DI-1],0DH
  3195 00000B26 7502                            JNZ	short FORSETTERM
  3196 00000B28 31C0                            XOR     AX,AX
  3197                                  FORSETTERM:
  3198 00000B2A AB                              STOSW
  3199 00000B2B E8F80B                          CALL    SCANOFF
  3200 00000B2E AD                              LODSW
  3201                                          ;CMP     AX,('O' SHL 8) OR 'D'
  3202 00000B2F 3D444F                  	CMP     AX,4F44H ; 'DO'
  3203 00000B32 7405                            JZ	short FOROK2
  3204                                          ;CMP     AX,('o' SHL 8) OR 'd'
  3205 00000B34 3D646F                          CMP     AX,6F64H ; 'do'
  3206                                  FORERRORJ:
  3207 00000B37 7545                            JNZ	short FORERROR
  3208                                  FOROK2:
  3209 00000B39 E8EA0B                          CALL    SCANOFF
  3210 00000B3C 3C0D                            CMP     AL,0DH
  3211                                  FORERRORJ3:
  3212 00000B3E 743E                            JZ	short FORERROR
  3213                                  	;MOV     DI,OFFSET RESGROUP:FORCOM
  3214 00000B40 BFA208                  	MOV     DI,FORCOM
  3215                                  FORCOMLP:
  3216 00000B43 AC                              LODSB
  3217 00000B44 AA                              STOSB
  3218 00000B45 3C0D                            CMP     AL,0DH
  3219 00000B47 75FA                            JNZ	short FORCOMLP
  3220                                          ;INC     [FORFLAG]
  3221 00000B49 26FE067808                      INC     byte [ES:FORFLAG]
  3222                                          ;CMP     [SINGLECOM],-1
  3223 00000B4E 26833E7408FF                    CMP     word [ES:SINGLECOM],-1
  3224 00000B54 7507                            JNZ	short NOFORP
  3225                                  	;MOV     [SINGLECOM],0FF00H	; Flag single command for
  3226 00000B56 26C706740800FF          	MOV     word [ES:SINGLECOM],0FF00H
  3227                                  NOFORP:
  3228                                          ;CMP     [FORUFCB],1
  3229 00000B5D 26803EFF0801                    CMP     byte [ES:FORUFCB],1
  3230                                          ;retnz
  3231 00000B63 7517                    	JNZ	short FOR_retn
  3232 00000B65 06                              PUSH    ES
  3233 00000B66 1F                              POP     DS
  3234                                  ;ASSUME  DS:RESGROUP
  3235                                          ;MOV     DI,OFFSET RESGROUP:FORFCB
  3236 00000B67 BF0009                          MOV     DI,FORFCB
  3237                                          ;MOV     SI,OFFSET RESGROUP:FORSET
  3238 00000B6A BE7A08                          MOV     SI,FORSET
  3239 00000B6D 807C013A                        CMP     BYTE [SI+1],':'  ;3AH
  3240 00000B71 7504                            JNZ	short NOSETUDRV
  3241 00000B73 FE067908                        INC     byte [UFORDRV]
  3242                                  NOSETUDRV:
  3243                                          ;MOV     AX,PARSE_FILE_DESCRIPTOR SHL 8
  3244 00000B77 B80029                          MOV     AX,PARSE_FILE_DESCRIPTOR*256
  3245 00000B7A CD21                            INT     int_command
  3246                                  FOR_retn:
  3247 00000B7C C3                              RETN
  3248                                  
  3249                                  
  3250                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  3251                                  
  3252                                  IFERRORP:
  3253 00000B7D 58                              POP     AX
  3254                                  IFERROR:
  3255                                  FORERROR:
  3256                                  	;MOV     DX,OFFSET TRANGROUP:SYNTMES
  3257 00000B7E BA[0328]                	MOV     DX,SYNTMES
  3258 00000B81 E963FA                          JMP     CERROR
  3259                                  
  3260                                  _$IF:
  3261 00000B84 C606E92C00                      MOV     byte [IFNOTFLAG],0
  3262 00000B89 BE8100                          MOV     SI,81H
  3263                                  IFREENT:
  3264 00000B8C E8970B                          CALL    SCANOFF
  3265 00000B8F 3C0D                            CMP     AL,0DH
  3266 00000B91 74EB                            JZ	short IFERROR
  3267 00000B93 89F5                            MOV     BP,SI
  3268                                  	;MOV     DI,OFFSET TRANGROUP:IFTAB ; Prepare to search if table
  3269 00000B95 BF[2629]                	MOV     DI,IFTAB
  3270 00000B98 B500                            MOV     CH,0
  3271                                  IFINDCOM:
  3272 00000B9A 89EE                            MOV     SI,BP
  3273 00000B9C 8A0D                            MOV     CL,[DI]
  3274 00000B9E 47                              INC     DI
  3275 00000B9F E333                            JCXZ    IFSTRING
  3276 00000BA1 EB02                            JMP     SHORT FIRSTCOMP
  3277                                  IFCOMP:
  3278 00000BA3 7510                            JNZ	short IFDIF
  3279                                  FIRSTCOMP:
  3280 00000BA5 AC                              LODSB
  3281 00000BA6 268A25                          MOV     AH,[ES:DI]
  3282 00000BA9 47                              INC     DI
  3283 00000BAA 38E0                            CMP     AL,AH
  3284 00000BAC 7405                            JZ	short IFLP
  3285 00000BAE 80CC20                          OR      AH,20H          ; Try lower case
  3286 00000BB1 38E0                            CMP     AL,AH
  3287                                  IFLP:
  3288 00000BB3 E2EE                            LOOP    IFCOMP
  3289                                  IFDIF:
  3290 00000BB5 9F                              LAHF
  3291 00000BB6 01CF                            ADD     DI,CX           ; Bump to next position without affecting flags
  3292 00000BB8 8B1D                            MOV     BX,[DI]         ; Get handler address
  3293 00000BBA 47                              INC     DI
  3294 00000BBB 47                              INC     DI
  3295 00000BBC 9E                              SAHF
  3296 00000BBD 75DB                            JNZ	short IFINDCOM
  3297 00000BBF AC                              LODSB
  3298 00000BC0 3C0D                            CMP     AL,0DH
  3299                                  IFERRORJ:
  3300 00000BC2 74BA                            JZ	short IFERROR
  3301 00000BC4 E8670B                          CALL    DELIM
  3302 00000BC7 75D1                            JNZ	short IFINDCOM
  3303 00000BC9 E85A0B                          CALL    SCANOFF
  3304 00000BCC FFE3                            JMP     BX
  3305                                  
  3306                                  IFNOT:
  3307 00000BCE F616E92C                        NOT     byte [IFNOTFLAG]
  3308 00000BD2 EBB8                            JMP     short IFREENT
  3309                                  
  3310                                  IFSTRING:
  3311 00000BD4 56                              PUSH    SI
  3312 00000BD5 31C9                            XOR     CX,CX
  3313                                  FIRST_STRING:
  3314 00000BD7 AC                              LODSB
  3315 00000BD8 3C0D                            CMP     AL,0DH
  3316 00000BDA 74A1                            JZ	short IFERRORP
  3317 00000BDC E84F0B                          CALL    DELIM
  3318 00000BDF 7403                            JZ	short EQUAL_CHECK
  3319 00000BE1 41                              INC     CX
  3320 00000BE2 EBF3                            JMP     SHORT FIRST_STRING
  3321                                  EQUAL_CHECK:
  3322 00000BE4 3C3D                            CMP     AL,'='
  3323 00000BE6 7407                            JZ	short EQUAL_CHECK2
  3324 00000BE8 3C0D                            CMP     AL,0DH
  3325 00000BEA 7491                            JZ	short IFERRORP
  3326 00000BEC AC                              LODSB
  3327 00000BED EBF5                            JMP     SHORT EQUAL_CHECK
  3328                                  EQUAL_CHECK2:
  3329 00000BEF AC                              LODSB
  3330 00000BF0 3C3D                            CMP     AL,'='
  3331 00000BF2 7589                            JNZ	short IFERRORP
  3332 00000BF4 E82F0B                          CALL    SCANOFF
  3333 00000BF7 3C0D                            CMP     AL,0DH
  3334 00000BF9 7482                            JZ	short IFERRORP
  3335 00000BFB 5F                              POP     DI
  3336 00000BFC F3A6                            REPE    CMPSB
  3337 00000BFE 7414                            JZ	short MATCH
  3338 00000C00 807CFF0D                        CMP     BYTE [SI-1],0DH
  3339 00000C04 74BC                            JZ	short IFERRORJ
  3340                                  SKIPSTRINGEND:
  3341 00000C06 AC                              LODSB
  3342                                  NOTMATCH:
  3343 00000C07 3C0D                            CMP     AL,0DH
  3344                                  IFERRORJ2:
  3345 00000C09 74B7                            JZ	short IFERRORJ
  3346 00000C0B E8200B                          CALL    DELIM
  3347 00000C0E 75F6                            JNZ	short SKIPSTRINGEND
  3348 00000C10 B0FF                            MOV     AL,-1
  3349 00000C12 EB18                            JMP     SHORT IFRET
  3350                                  MATCH:
  3351 00000C14 AC                              LODSB
  3352 00000C15 E8160B                          CALL    DELIM
  3353 00000C18 75ED                            JNZ	short NOTMATCH
  3354 00000C1A 30C0                            XOR     AL,AL
  3355 00000C1C EB0E                            JMP     SHORT IFRET
  3356                                  
  3357                                  IFEXISTS:
  3358                                          ;MOV     DI,OFFSET TRANGROUP:DIRBUF
  3359 00000C1E BFCC2D                          MOV     DI,DIRBUF
  3360                                          ;MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 01H
  3361 00000C21 B80129                          MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 01H
  3362 00000C24 CD21                            INT     int_command
  3363 00000C26 B40F                            MOV     AH,FCB_OPEN
  3364 00000C28 89FA                            MOV     DX,DI
  3365 00000C2A CD21                            INT     int_command
  3366                                  IFRET:
  3367 00000C2C F606E92CFF                      TEST    byte [IFNOTFLAG],-1
  3368 00000C31 7402                            JZ	short REALTEST
  3369 00000C33 F6D0                            NOT     AL
  3370                                  REALTEST:
  3371 00000C35 08C0                            OR      AL,AL
  3372 00000C37 7403                            JZ	short IFTRUE
  3373 00000C39 E9C8F3                          JMP     TCOMMAND
  3374                                  IFTRUE:
  3375 00000C3C E8E70A                          CALL    SCANOFF
  3376 00000C3F 89F1                            MOV     CX,SI
  3377 00000C41 81E98100                        SUB     CX,81H
  3378                                          ;SUB     DS:[80H],CL
  3379 00000C45 280E8000                        SUB     [80H],CL
  3380                                          ;MOV     CL,DS:[80H]
  3381 00000C49 8A0E8000                        MOV     CL,[80H]
  3382 00000C4D 880EC42B                        MOV     [COMBUF+1],CL
  3383                                          ;MOV     DI,OFFSET TRANGROUP:COMBUF+2
  3384 00000C51 BFC52B                          MOV     DI,COMBUF+2
  3385 00000C54 F3A4                            REP     MOVSB
  3386 00000C56 B00D                            MOV     AL,0DH
  3387 00000C58 AA                              STOSB
  3388 00000C59 E902F6                          JMP     DOCOM1
  3389                                  
  3390                                  IFERLEV:
  3391 00000C5C B70A                            MOV     BH,10
  3392 00000C5E 30DB                            XOR     BL,BL
  3393                                  GETNUMLP:
  3394 00000C60 AC                              LODSB
  3395 00000C61 3C0D                            CMP     AL,0DH
  3396 00000C63 74A4                            JZ	short IFERRORJ2
  3397 00000C65 E8C60A                          CALL    DELIM
  3398 00000C68 740C                            JZ	short GOTNUM
  3399 00000C6A 2C30                            SUB     AL,'0'
  3400 00000C6C 86C3                            XCHG    AL,BL
  3401 00000C6E F6E7                            MUL     BH
  3402 00000C70 00D8                            ADD     AL,BL
  3403 00000C72 86C3                            XCHG    AL,BL
  3404 00000C74 EBEA                            JMP     SHORT GETNUMLP
  3405                                  GOTNUM:
  3406 00000C76 1E                              PUSH    DS
  3407 00000C77 8E1EDA2C                        MOV     DS,[RESSEG]
  3408                                  ;ASSUME  DS:RESGROUP
  3409                                          ;MOV     AH,BYTE PTR [RETCODE]
  3410 00000C7B 8A266D08                        MOV     AH,[RETCODE]
  3411 00000C7F 1F                              POP     DS
  3412                                  ;ASSUME  DS:TRANGROUP
  3413 00000C80 30C0                            XOR     AL,AL
  3414 00000C82 38DC                            CMP     AH,BL
  3415 00000C84 73A6                            JAE	short IFRET
  3416 00000C86 FEC8                            DEC     AL
  3417 00000C88 EBA2                            JMP     SHORT IFRET
  3418                                  
  3419                                  ;ASSUME  DS:TRANGROUP
  3420                                  
  3421                                  SHIFT:
  3422 00000C8A 8E1EDA2C                        MOV     DS,[RESSEG]
  3423                                  ;ASSUME  DS:RESGROUP
  3424 00000C8E A13408                          MOV     AX,[BATCH]
  3425 00000C91 A9FFFF                          TEST    AX,-1
  3426                                          ;retz
  3427 00000C94 7433                    	JZ	short SHIFT_retn
  3428 00000C96 8EC0                            MOV     ES,AX
  3429 00000C98 8ED8                            MOV     DS,AX
  3430                                  ;ASSUME  DS:NOTHING,ES:NOTHING
  3431 00000C9A 31C9                            XOR     CX,CX
  3432 00000C9C 89C8                            MOV     AX,CX
  3433 00000C9E 89CF                            MOV     DI,CX
  3434 00000CA0 49                              DEC     CX
  3435 00000CA1 F2AE                            REPNZ   SCASB
  3436 00000CA3 89FE                            MOV     SI,DI
  3437 00000CA5 46                              INC     SI
  3438 00000CA6 46                              INC     SI
  3439 00000CA7 B90900                          MOV     CX,9
  3440 00000CAA F3A5                            REP     MOVSW                   ; Perform shift of existing parms
  3441 00000CAC 833DFF                          CMP	WORD [DI],-1
  3442                                          ;retz				; No new parm
  3443 00000CAF 7418                    	JZ	short SHIFT_retn
  3444 00000CB1 8B35                            MOV     SI,[DI]
  3445 00000CB3 C705FFFF                        MOV     WORD [DI],-1		; Assume no parm
  3446                                          ;MOV     DS,[RESSEG]
  3447                                          ;MOV     DS,[SS:RESSEG]
  3448 00000CB7 2E8E1EDA2C                      MOV     DS,[CS:RESSEG] ; 30/04/2018
  3449                                  ;ASSUME  DS:RESGROUP
  3450                                  SKIPCRLP:
  3451 00000CBC AC                              LODSB
  3452 00000CBD 3C0D                            CMP     AL,0DH
  3453 00000CBF 75FB                            JNZ	short SKIPCRLP
  3454 00000CC1 803C00                          CMP     BYTE [SI],0
  3455                                  	;retz				; End of parms
  3456 00000CC4 7403                    	JZ	short SHIFT_retn
  3457 00000CC6 268935                          MOV     [ES:DI],SI		; Pointer to next parm as %9
  3458                                  SHIFT_retn:
  3459                                  GOTO_retn:
  3460 00000CC9 C3                              RETN
  3461                                  
  3462                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  3463                                  
  3464                                  GOTO:
  3465 00000CCA 8E1EDA2C                        MOV     DS,[RESSEG]
  3466                                  ;ASSUME  DS:RESGROUP
  3467 00000CCE F7063408FFFF                    TEST    word [BATCH],-1
  3468                                          ;retz				; If not in batch mode, a nop
  3469 00000CD4 74F3                    	JZ	short GOTO_retn
  3470 00000CD6 31D2                            XOR     DX,DX
  3471 00000CD8 89163608                        MOV     [BATLOC],DX		; Back to start
  3472 00000CDC 89163808                        MOV     [BATLOC+2],DX
  3473 00000CE0 E87E00                          CALL    BATOPEN                 ; Find the batch file
  3474 00000CE3 BF5D00                          MOV     DI,FCB+1		; Get the label
  3475 00000CE6 B90B00                          MOV     CX,11
  3476 00000CE9 B020                            MOV     AL,' '
  3477 00000CEB F2AE                            REPNE   SCASB
  3478 00000CED 7501                            JNZ	short NOINC
  3479 00000CEF 41                              INC     CX
  3480                                  NOINC:
  3481 00000CF0 83E90B                          SUB     CX,11
  3482 00000CF3 F7D9                            NEG     CX
  3483                                          ;MOV     [GOTOLEN],CX
  3484                                          ;MOV     [SS:GOTOLEN],CX
  3485 00000CF5 2E890ECC2D                      MOV     [CS:GOTOLEN],CX ; 30/04/2018
  3486 00000CFA E8D909                          CALL    GETBATBYT
  3487 00000CFD 3C3A                            CMP     AL,':'
  3488 00000CFF 7421                            JZ	short CHKLABEL
  3489                                  LABLKLP:				; Look for the label
  3490 00000D01 E8D209                          CALL    GETBATBYT
  3491 00000D04 3C0A                            CMP     AL,0AH
  3492 00000D06 7507                            JNZ	short LABLKTST
  3493 00000D08 E8CB09                          CALL    GETBATBYT
  3494 00000D0B 3C3A                            CMP     AL,':'
  3495 00000D0D 7413                            JZ	short CHKLABEL
  3496                                  LABLKTST:
  3497 00000D0F F7063408FFFF                    TEST    word [BATCH],-1
  3498 00000D15 75EA                            JNZ	short LABLKLP
  3499 00000D17 E83D00                          CALL    BATCLOSE
  3500 00000D1A 0E                              PUSH    CS
  3501 00000D1B 1F                              POP     DS
  3502                                          ;MOV     DX,OFFSET TRANGROUP:BADLAB
  3503 00000D1C BA[F127]                        MOV     DX,BADLAB
  3504 00000D1F E9C5F8                          JMP     CERROR
  3505                                  
  3506                                  CHKLABEL:
  3507 00000D22 BF5D00                          MOV     DI,FCB+1
  3508                                          ;MOV     CX,[GOTOLEN]
  3509                                  	;MOV     CX,[SS:GOTOLEN]
  3510 00000D25 2E8B0ECC2D              	MOV     CX,[CS:GOTOLEN] ; 30/04/2018
  3511                                  NEXTCHRLP:
  3512 00000D2A 51                              PUSH    CX
  3513 00000D2B E8A809                          CALL    GETBATBYT
  3514 00000D2E 59                              POP     CX
  3515 00000D2F 0C20                            OR      AL,20H
  3516 00000D31 263A05                          CMP     AL,[ES:DI]
  3517 00000D34 7502                            JNZ	short TRYUPPER
  3518 00000D36 EB07                            JMP     SHORT NEXTLABCHR
  3519                                  TRYUPPER:
  3520 00000D38 2C20                            SUB     AL,20H
  3521 00000D3A 263A05                          CMP     AL,[ES:DI]
  3522 00000D3D 75D0                            JNZ	short LABLKTST
  3523                                  NEXTLABCHR:
  3524 00000D3F 47                              INC     DI
  3525 00000D40 E2E8                            LOOP    NEXTCHRLP
  3526 00000D42 E89109                          CALL    GETBATBYT
  3527 00000D45 3C20                            CMP     AL,' '
  3528 00000D47 77C6                            JA	short LABLKTST
  3529 00000D49 3C0D                            CMP     AL,0DH
  3530 00000D4B 7407                            JZ	short SKIPLFEED
  3531                                  TONEXTBATLIN:
  3532 00000D4D E88609                          CALL    GETBATBYT
  3533 00000D50 3C0D                            CMP     AL,0DH
  3534 00000D52 75F9                            JNZ	short TONEXTBATLIN
  3535                                  SKIPLFEED:
  3536 00000D54 E87F09                          CALL    GETBATBYT
  3537                                  BATCLOSE:
  3538                                          ;MOV     BX,CS:[BATHAND]
  3539 00000D57 2E8B1E432F                      MOV     BX,[CS:BATHAND]
  3540 00000D5C B43E                            MOV     AH,CLOSE
  3541 00000D5E CD21                            INT     int_command
  3542 00000D60 C3                              RETN
  3543                                  
  3544                                  BATOPEN:
  3545                                  ;Open the BATCH file, If open fails, AL is drive of batch file (A=1)
  3546                                  ;ASSUME  DS:RESGROUP,ES:TRANGROUP
  3547 00000D61 1E                              PUSH    DS
  3548 00000D62 8E1E3408                        MOV     DS,[BATCH]
  3549                                  ;ASSUME  DS:NOTHING
  3550 00000D66 31D2                            XOR     DX,DX
  3551                                          ;MOV     AX,OPEN SHL 8
  3552 00000D68 B8003D                          MOV     AX,OPEN*256
  3553 00000D6B CD21                            INT     int_command             ; Open the batch file
  3554 00000D6D 7215                            JC	short SETERRDL
  3555 00000D6F 1F                              POP     DS
  3556                                  ;ASSUME  DS:RESGROUP
  3557                                          ;MOV     [BATHAND],AX
  3558                                          ;MOV     [SS:BATHAND],AX
  3559 00000D70 2EA3432F                        MOV     [CS:BATHAND],AX ; 30/04/2018
  3560 00000D74 89C3                            MOV     BX,AX
  3561 00000D76 8B163608                        MOV     DX,[BATLOC]
  3562 00000D7A 8B0E3808                        MOV     CX,[BATLOC+2]
  3563                                          ;MOV     AX,LSEEK SHL 8          ; Go to the right spot
  3564 00000D7E B80042                          MOV     AX,LSEEK*256
  3565 00000D81 CD21                            INT     int_command
  3566 00000D83 C3                              RETN
  3567                                  
  3568                                  SETERRDL:
  3569 00000D84 89D3                            MOV     BX,DX
  3570 00000D86 8A07                            MOV     AL,[BX]                 ; Get drive spec
  3571 00000D88 2C40                            SUB     AL,'@'                  ; A = 1
  3572 00000D8A 1F                              POP     DS
  3573 00000D8B F9                              STC                             ; SUB mucked over carry
  3574                                  MESTRAN_retn:
  3575 00000D8C C3                              RETN
  3576                                  
  3577                                  MESTRAN:
  3578                                  ;ASSUME  DS:NOTHING,ES:NOTHING
  3579 00000D8D AC                              LODSB
  3580 00000D8E 3C24                            CMP     AL,"$"
  3581                                          ;retz
  3582 00000D90 74FA                    	JZ	short MESTRAN_retn
  3583 00000D92 AA                              STOSB
  3584 00000D93 EBF8                            JMP     MESTRAN
  3585                                  IOSET:
  3586                                  ; ALL REGISTERS PRESERVED
  3587                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  3588 00000D95 1E                              PUSH    DS
  3589 00000D96 52                              PUSH    DX
  3590 00000D97 50                              PUSH    AX
  3591 00000D98 53                              PUSH    BX
  3592 00000D99 51                              PUSH    CX
  3593                                          ;MOV     DS,[RESSEG]
  3594 00000D9A 2E8E1EDA2C              	MOV	DS, [CS:RESSEG]
  3595                                  ;ASSUME  DS:RESGROUP
  3596 00000D9F 803E780900                      CMP     byte [PIPEFLAG],0
  3597 00000DA4 7506                            JNZ     short NOREDIR		; Don't muck up the pipe
  3598 00000DA6 E80900                          CALL    TESTDOREIN
  3599 00000DA9 E82A00                          CALL    TESTDOREOUT
  3600                                  NOREDIR:
  3601 00000DAC 59                              POP     CX
  3602 00000DAD 5B                              POP     BX
  3603 00000DAE 58                              POP     AX
  3604 00000DAF 5A                              POP     DX
  3605 00000DB0 1F                              POP     DS
  3606                                  ;ASSUME  DS:NOTHING
  3607 00000DB1 C3                              RETN
  3608                                  
  3609                                  TESTDOREIN:
  3610                                  ;ASSUME  DS:RESGROUP
  3611 00000DB2 803E270900                      CMP     byte [RE_INSTR],0
  3612                                  	;retz
  3613 00000DB7 7417                    	JZ	short TESTDOREIN_retn
  3614                                          ;MOV     DX,OFFSET RESGROUP:RE_INSTR
  3615 00000DB9 BA2709                          MOV     DX,RE_INSTR
  3616                                          ;MOV     AX,(OPEN SHL 8)
  3617 00000DBC B8003D                          MOV     AX,OPEN*256
  3618 00000DBF CD21                            INT     int_command
  3619                                          ;MOV     DX,OFFSET TRANGROUP:NOTFND
  3620 00000DC1 BA[2725]                        MOV     DX,NOTFND
  3621 00000DC4 720B                            JC      short REDIRERR
  3622 00000DC6 89C3                            MOV     BX,AX
  3623 00000DC8 B0FF                            MOV     AL,0FFH
  3624                                          ;XCHG    AL,[BX.PDB_JFN_Table]
  3625 00000DCA 864718                          XCHG    AL,[BX+PDB.JFN_TABLE]
  3626                                          ;MOV     DS:[PDB_JFN_Table],AL
  3627 00000DCD A21800                          MOV     [PDB.JFN_TABLE],AL
  3628                                  TESTDOREIN_retn:
  3629 00000DD0 C3                              RETN
  3630                                  
  3631                                  REDIRERR:
  3632 00000DD1 0E                              PUSH    CS
  3633 00000DD2 1F                              POP     DS
  3634 00000DD3 E911F8                          JMP     CERROR
  3635                                  
  3636                                  TESTDOREOUT:
  3637                                  ;ASSUME  DS:RESGROUP
  3638 00000DD6 803E500900                      CMP     byte [RE_OUTSTR],0
  3639 00000DDB 7436                            JZ	short NOREOUT
  3640 00000DDD 803E4F0900                      CMP     byte [RE_OUT_APP],0
  3641 00000DE2 7417                            JZ	short REOUTCRT
  3642                                          ;MOV     DX,OFFSET RESGROUP:RE_OUTSTR
  3643 00000DE4 BA5009                          MOV     DX,RE_OUTSTR
  3644                                          ;MOV     AX,(OPEN SHL 8) OR 1
  3645 00000DE7 B8013D                          MOV     AX,(OPEN*256) | 1
  3646 00000DEA CD21                            INT     int_command
  3647 00000DEC 720D                            JC	short REOUTCRT
  3648 00000DEE 31D2                            XOR     DX,DX
  3649 00000DF0 31C9                            XOR     CX,CX
  3650 00000DF2 89C3                            MOV     BX,AX
  3651                                          ;MOV     AX,(LSEEK SHL 8) OR 2
  3652 00000DF4 B80242                          MOV     AX,(LSEEK*256) | 2
  3653 00000DF7 CD21                            INT     int_command
  3654 00000DF9 EB10                            JMP     SHORT SET_REOUT
  3655                                  REOUTCRT:
  3656                                          ;MOV     DX,OFFSET RESGROUP:RE_OUTSTR
  3657 00000DFB BA5009                          MOV     DX,RE_OUTSTR
  3658 00000DFE 31C9                            XOR     CX,CX
  3659 00000E00 B43C                            MOV     AH,CREAT
  3660 00000E02 CD21                            INT     int_command
  3661                                          ;MOV     DX,OFFSET TRANGROUP:FULDIR
  3662 00000E04 BA[6D25]                        MOV     DX,FULDIR
  3663 00000E07 72C8                            JC	short REDIRERR
  3664 00000E09 89C3                            MOV     BX,AX
  3665                                  SET_REOUT:
  3666 00000E0B B0FF                            MOV     AL,0FFH
  3667                                  	;XCHG    AL,[BX.PDB_JFN_Table]
  3668 00000E0D 864718                  	XCHG    AL,[BX+PDB.JFN_TABLE]
  3669                                  	;MOV     DS:[PDB_JFN_Table+1],AL
  3670 00000E10 A21900                  	MOV	[PDB.JFN_TABLE+1],AL
  3671                                  NOREOUT:
  3672 00000E13 C3                              RETN	
  3673                                  
  3674                                  STRCOMP:
  3675                                  ; Compare ASCIZ DS:SI with ES:DI.
  3676                                  ; SI,DI destroyed.
  3677 00000E14 A6                              CMPSB
  3678                                          ;retnz				; Strings not equal
  3679 00000E15 75FC                    	JNZ	short NOREOUT	
  3680 00000E17 807CFF00                        cmp     byte [SI-1],0		; Hit NUL terminator?
  3681                                          ;retz				; Yes, strings equal
  3682 00000E1B 74F6                    	JZ	short NOREOUT
  3683 00000E1D EBF5                            jmp     short STRCOMP           ; Equal so far, keep going
  3684                                  
  3685                                  ;TRANCODE  ENDS
  3686                                  ;        END
  3687                                  
  3688                                  
  3689                                  ;=============================================================================
  3690                                  ; TCODE4.ASM
  3691                                  ;=============================================================================
  3692                                  
  3693                                  ;TITLE   PART4 - COMMAND Transient routines.
  3694                                  
  3695                                  ;TRANCODE SEGMENT PUBLIC BYTE
  3696                                  ;ASSUME  CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3697                                  
  3698                                  CATALOG:
  3699 00000E1F E8AD02                          CALL    OKVOLARG
  3700 00000E22 B03F                            MOV     AL,"?"                  ; *.* is default file spec.
  3701 00000E24 BF5D00                          MOV     DI,5DH
  3702 00000E27 B90B00                          MOV     CX,11
  3703 00000E2A F3AA                            REP     STOSB
  3704 00000E2C BE8100                          MOV     SI,81H
  3705 00000E2F E8E8F4                          CALL    SWITCH
  3706 00000E32 BF5C00                          MOV     DI,FCB
  3707                                  	          			; Parse with default name and extension
  3708                                  	;MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 0DH
  3709 00000E35 B80D29                  	MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 0DH
  3710 00000E38 CD21                            INT     int_command
  3711                                  
  3712                                  ; Begin by processing any switches that may have been specified.
  3713                                  ; BITS will contain any information about switches that was
  3714                                  ; found when the command line was parsed.
  3715                                  
  3716                                  SETSWT:
  3717 00000E3A A1ED2C                          MOV     AX,[COMSW]		; Get switches from command
  3718 00000E3D 0B06F32C                        OR      AX,[ARGTS]		; OR in switches from all of tail
  3719 00000E41 A31B2E                          MOV     [_BITS],AX
  3720 00000E44 C606232E17                      MOV     BYTE [FULLSCR],LINPERPAG
  3721 00000E49 A801                            TEST    AL,1                    ; Look for W switch
  3722 00000E4B B001                            MOV     AL,NORMPERLIN
  3723 00000E4D 7402                            JZ	short DIR
  3724 00000E4F B005                            MOV     AL,WIDEPERLIN
  3725                                  DIR:
  3726 00000E51 A2FD2C                          MOV     [LINLEN],AL             ; Set number of entries per line
  3727 00000E54 A2FC2C                          MOV     [LINCNT],AL
  3728 00000E57 C706FE2C0000                    MOV     word [FILECNT],0     	; Keep track of how many files found
  3729                                          ;MOV     DX,OFFSET TRANGROUP:DIRBUF ; Set Disk transfer address
  3730 00000E5D BACC2D                          MOV     DX,DIRBUF		; Set Disk transfer address
  3731 00000E60 B41A                            MOV     AH,SET_DMA
  3732 00000E62 CD21                            INT     int_command
  3733 00000E64 E87507                          CALL    PATHCRUNCH		; Get where we're going
  3734 00000E67 9C                              PUSHF
  3735 00000E68 730A                            JNC	short NOTEST
  3736 00000E6A 803E252E00                      CMP     byte [DESTISDIR],0	; No CHDIRs worked
  3737 00000E6F 7403                            JZ	short NOTEST		; see if they should have
  3738 00000E71 E98601                          JMP     BADCDERR
  3739                                  
  3740                                  NOTEST:
  3741 00000E74 BE5C00                          MOV     SI,FCB
  3742                                          ;MOV     DI,OFFSET TRANGROUP:DIRBUF
  3743 00000E77 BFCC2D                          MOV     DI,DIRBUF
  3744 00000E7A 89FA                            MOV     DX,DI
  3745 00000E7C B90C00                          MOV     CX,12
  3746 00000E7F F3A4                            REP     MOVSB
  3747 00000E81 B40F                            MOV     AH,FCB_OPEN
  3748 00000E83 CD21                            INT     int_command
  3749                                  	;MOV     DX,OFFSET TRANGROUP:DIRHEAD_PRE ; Print "Directory of"
  3750 00000E85 BA[9C27]                	MOV     DX,DIRHEAD_PRE		; Print "Directory of"
  3751 00000E88 50                              PUSH    AX 			; save return code
  3752 00000E89 E8940A                          CALL    PRINT
  3753 00000E8C E86EFA                          CALL    PWD			; print the path
  3754                                  	;MOV     DX,OFFSET TRANGROUP:DIRHEAD_POST
  3755 00000E8F BA[9927]                	MOV     DX,DIRHEAD_POST
  3756 00000E92 E88B0A                          CALL    PRINT
  3757 00000E95 58                              POP     AX
  3758 00000E96 08C0                            OR      AL,AL
  3759 00000E98 750A                            JNZ	short OKDODIR		; Go ahead and dir if open fail
  3760 00000E9A F606E42D80                      TEST    byte [DIRBUF+SYS_FCB.DEVID],devid_device
  3761 00000E9F 7403                            JZ	short OKDODIR
  3762 00000EA1 E96BF7                          JMP     NOTFNDERR		; Can't DIR a device
  3763                                  OKDODIR:
  3764 00000EA4 B411                            MOV     AH,DIR_SEARCH_FIRST
  3765                                          ;MOV     BYTE PTR DS:[FCB-7],0FFH
  3766                                          ;MOV     BYTE PTR DS:[FCB-1],010H
  3767 00000EA6 C6065500FF                      MOV     BYTE [FCB-7],0FFH
  3768 00000EAB C6065B0010                      MOV     BYTE [FCB-1],010H
  3769 00000EB0 9D                              POPF
  3770 00000EB1 7226                            JC	short SHOWDIR		; Current dir
  3771 00000EB3 7418                            JZ	short DOFIRST		; FCB is *.*
  3772 00000EB5 B03F                            MOV     AL,"?"
  3773 00000EB7 BF5D00                          MOV     DI,5DH
  3774 00000EBA B90B00                          MOV     CX,11
  3775 00000EBD F3AA                            REP     STOSB			; Remake default FCB
  3776 00000EBF 8B36272E                        MOV     SI,[DESTTAIL]
  3777 00000EC3 BF5C00                          MOV     DI,FCB
  3778                                  				; Parse with default drive, name and extension
  3779                                          ;MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 0EH
  3780 00000EC6 B80E29                          MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 0EH
  3781 00000EC9 CD21                            INT     int_command
  3782 00000ECB B411                            MOV     AH,DIR_SEARCH_FIRST
  3783                                  DOFIRST:
  3784 00000ECD BA5500                          MOV     DX,FCB-7
  3785 00000ED0 CD21                            INT     int_command
  3786 00000ED2 50                              PUSH    AX
  3787 00000ED3 E8CA01                          CALL    RESTUDIR
  3788 00000ED6 58                              POP     AX
  3789 00000ED7 EB05                            JMP     SHORT DIRSTART
  3790                                  
  3791                                  SHOWDIR:
  3792 00000ED9 BA5500                          MOV     DX,FCB-7        	; DX -> Unopened FCB
  3793 00000EDC CD21                            INT     int_command             ; Search for a file to match FCB
  3794                                  DIRSTART:
  3795 00000EDE FEC0                            INC     AL			; FF = file not found
  3796 00000EE0 7506                            JNZ	short AGAIN		; Either an error or we are finished
  3797 00000EE2 E922F7                          JMP     CHKCNT
  3798                                  NEXENTJ:
  3799 00000EE5 E98000                          JMP	NEXENT
  3800                                  AGAIN:
  3801 00000EE8 FF06FE2C                        INC     word [FILECNT]       	; Keep track of how many we find
  3802                                          ;MOV	SI,OFFSET TRANGROUP:DIRBUF+8
  3803 00000EEC BED42D                          MOV	SI,DIRBUF+8 		; SI -> information returned by sys call
  3804 00000EEF E8AF00                          CALL    SHONAME
  3805 00000EF2 F6061B2E01                      TEST    BYTE [_BITS],WSWITCH 	; W switch set?
  3806 00000EF7 75EC                            JNZ	short NEXENTJ		; If so, no size, date, or time
  3807                                          ;MOV     SI,OFFSET TRANGROUP:DIRBUF+8+dir_attr
  3808 00000EF9 BEDF2D                  	MOV     SI,DIRBUF+8+dir_entry.dir_attr
  3809 00000EFC F60410                          TEST    BYTE [SI],attr_directory
  3810 00000EFF 7408                            JZ	short FILEENT
  3811                                          ;MOV     DX,OFFSET TRANGROUP:DMES
  3812 00000F01 BA[DC26]                        MOV     DX,DMES
  3813 00000F04 E8190A                          CALL    PRINT
  3814 00000F07 EB03                            JMP     SHORT NOFSIZ
  3815                                  FILEENT:
  3816 00000F09 E85707                          CALL    DISPSIZE		; Print size of file
  3817                                  NOFSIZ:
  3818                                  	;MOV     AX,WORD PTR [DIRBUF+8+dir_date]
  3819 00000F0C A1EC2D                  	MOV     AX,[DIRBUF+8+dir_entry.dir_date]  ; Get date
  3820 00000F0F 09C0                            OR      AX,AX
  3821 00000F11 7455                            JZ	short NEXENT		; Skip if no date
  3822                                  	;MOV     DI,OFFSET TRANGROUP:CHARBUF
  3823 00000F13 BF002D                  	MOV     DI,CHARBUF
  3824 00000F16 50                              PUSH    AX
  3825 00000F17 B82020                          MOV     AX,"  " ; 2020h
  3826 00000F1A AB                              STOSW
  3827 00000F1B 58                              POP     AX
  3828 00000F1C 89C3                            MOV     BX,AX
  3829 00000F1E 83E01F                          AND     AX,1FH			; get day
  3830 00000F21 88C2                            MOV     DL,AL
  3831 00000F23 89D8                            MOV     AX,BX
  3832 00000F25 B105                            MOV     CL,5
  3833 00000F27 D3E8                            SHR     AX,CL			; Align month
  3834 00000F29 240F                            AND     AL,0FH			; Get month
  3835 00000F2B 88C6                            MOV     DH,AL
  3836 00000F2D 88F9                            MOV     CL,BH
  3837 00000F2F D0E9                            SHR     CL,1			; Align year
  3838 00000F31 30ED                            XOR     CH,CH
  3839 00000F33 83C150                          ADD     CX,80			; Relative 1980
  3840 00000F36 80F964                          CMP     CL,100
  3841 00000F39 7203                            JB	short MILLENIUM
  3842 00000F3B 80E964                          SUB     CL,100
  3843                                  MILLENIUM:
  3844 00000F3E E83103                          CALL    DATE_CXDX
  3845                                          ;MOV     CX,WORD PTR[DIRBUF+8+dir_time]
  3846 00000F41 8B0EEA2D                        MOV     CX,[DIRBUF+8+dir_entry.dir_time]  ; Get time
  3847 00000F45 E318                            JCXZ    PRBUF			; Time field present?
  3848 00000F47 B82020                          MOV     AX,"  " ; 2020h
  3849 00000F4A AB                              STOSW
  3850 00000F4B D1E9                            SHR     CX,1
  3851 00000F4D D1E9                            SHR     CX,1
  3852 00000F4F D1E9                            SHR     CX,1
  3853 00000F51 D0E9                            SHR     CL,1
  3854 00000F53 D0E9                            SHR     CL,1            ; Hours in CH, minutes in CL
  3855 00000F55 8A1E672F                        MOV     BL,[INTERNATVARS+INTERNAT_BLOCK.Time_24]
  3856 00000F59 80CB80                          OR      BL,80H          ; Tell P_TIME called from DIR
  3857 00000F5C E88104                          CALL    P_TIME          ; Don't care about DX, never used with DIR
  3858                                  PRBUF:
  3859 00000F5F 31C0                            XOR     AX,AX
  3860 00000F61 AA                              STOSB
  3861                                          ;MOV     DX,OFFSET TRANGROUP:CHARBUF
  3862 00000F62 BA002D                          MOV     DX,CHARBUF
  3863 00000F65 E8BD09                          CALL    ZPRINT
  3864                                  NEXENT:
  3865 00000F68 FE0EFC2C                        DEC	byte [LINCNT]
  3866 00000F6C 752C                            JNZ     short SAMLIN
  3867                                  NEXLIN:
  3868 00000F6E A0FD2C                          MOV     AL,[LINLEN]
  3869 00000F71 A2FC2C                          MOV     [LINCNT],AL
  3870 00000F74 E84B00                          CALL    CRLF2
  3871 00000F77 F6061B2E02                      TEST    BYTE [_BITS],PSWITCH ; P switch present?
  3872 00000F7C 7417                            JZ	short SCROLL	; If not, just continue
  3873 00000F7E FE0E232E                        DEC     BYTE [FULLSCR]
  3874 00000F82 7511                            JNZ	short SCROLL
  3875 00000F84 C606232E17                      MOV     BYTE [FULLSCR],LINPERPAG
  3876                                  	;MOV     DX,OFFSET TRANGROUP:PAUSEMES
  3877 00000F89 BA[1926]                	MOV     DX,PAUSEMES
  3878 00000F8C E89109                          CALL    PRINT
  3879 00000F8F E86CF2                          CALL    GetKeystroke
  3880 00000F92 E82D00                          CALL    CRLF2
  3881                                  SCROLL:
  3882 00000F95 B412                            MOV     AH,DIR_SEARCH_NEXT
  3883 00000F97 E93FFF                          JMP     SHOWDIR
  3884                                  
  3885                                  SAMLIN:
  3886 00000F9A B009                            MOV     AL,9            ; Output a tab
  3887 00000F9C E84E09                          CALL    OUT
  3888 00000F9F EBF4                            JMP     SHORT SCROLL
  3889                                  
  3890                                  SHONAME:
  3891                                          ;MOV     DI,OFFSET TRANGROUP:CHARBUF
  3892 00000FA1 BF002D                  	MOV     DI,CHARBUF
  3893 00000FA4 B90800                          MOV     CX,8
  3894 00000FA7 F3A4                            REP     MOVSB
  3895 00000FA9 B020                            MOV     AL," "
  3896 00000FAB AA                              STOSB
  3897 00000FAC B90300                          MOV     CX,3
  3898 00000FAF F3A4                            REP     MOVSB
  3899 00000FB1 31C0                            XOR     AX,AX
  3900 00000FB3 AA                              STOSB
  3901 00000FB4 52                              PUSH    DX
  3902                                  	;MOV     DX,OFFSET TRANGROUP:CHARBUF
  3903 00000FB5 BA002D                  	MOV     DX,CHARBUF
  3904 00000FB8 E86A09                          CALL    ZPRINT
  3905 00000FBB 5A                              POP     DX
  3906 00000FBC C3                              RETN
  3907                                  
  3908                                  ONESPC:
  3909 00000FBD B020                            MOV     AL," "
  3910 00000FBF E92B09                          JMP     OUT
  3911                                  
  3912                                  CRLF2:
  3913 00000FC2 52                              PUSH    DX
  3914                                          ;MOV     DX,OFFSET TRANGROUP:ACRLF
  3915 00000FC3 BA[F228]                        MOV     DX,ACRLF
  3916                                  PR:
  3917 00000FC6 1E                              PUSH    DS
  3918 00000FC7 0E                              PUSH    CS
  3919 00000FC8 1F                              POP     DS
  3920 00000FC9 E85409                          CALL    PRINT
  3921 00000FCC 1F                              POP     DS
  3922 00000FCD 5A                              POP     DX
  3923 00000FCE C3                              RETN
  3924                                  
  3925                                  PAUSE:
  3926                                          ;MOV     DX,OFFSET TRANGROUP:PAUSEMES
  3927 00000FCF BA[1926]                        MOV     DX,PAUSEMES
  3928 00000FD2 E83D09                          CALL    ERROR_PRINT
  3929 00000FD5 E826F2                          CALL    GetKeystroke
  3930 00000FD8 E8E7FF                          CALL    CRLF2
  3931                                  PAUSE_retn:
  3932 00000FDB C3                              RETN
  3933                                  
  3934                                  ERASE:
  3935                                          ;MOV     DX,OFFSET TRANGROUP:BADARGS
  3936 00000FDC BA[BC28]                        MOV     DX,BADARGS
  3937 00000FDF BE8000                          MOV     SI,80H
  3938 00000FE2 AC                              LODSB
  3939 00000FE3 08C0                            OR      AL,AL
  3940 00000FE5 7416                            JZ	short ERRJ2
  3941 00000FE7 E83C07                          CALL    SCANOFF
  3942 00000FEA 3C0D                            CMP     AL,13			; RETURN KEY?
  3943 00000FEC 740F                            JZ	short ERRJ2		; IF SO NO PARAMETERS SPECIFIED
  3944                                  
  3945                                  ERA1:
  3946 00000FEE E8EB05                          CALL    PATHCRUNCH
  3947 00000FF1 730D                            JNC	short NOTEST2J
  3948 00000FF3 803E252E00                      CMP	byte [DESTISDIR],0	; No CHDIRs worked
  3949 00000FF8 7406                            JZ	short NOTEST2J		; see if they should have
  3950                                  BADCDERR:
  3951                                          ;MOV     DX,OFFSET TRANGROUP:BADCD
  3952 00000FFA BA[1B27]                        MOV     DX,BADCD
  3953                                  ERRJ2:
  3954 00000FFD E9E7F5                          JMP     CERROR
  3955                                  
  3956                                  NOTEST2J:
  3957 00001000 E96609                          JMP     NOTEST2
  3958                                  
  3959                                  CRENAME:
  3960 00001003 E8D605                          CALL    PATHCRUNCH
  3961 00001006 7309                            JNC	short NOTEST3
  3962 00001008 803E252E00                      CMP	byte [DESTISDIR],0	; No CHDIRs worked
  3963 0000100D 7402                            JZ	short NOTEST3		; see if they should have
  3964 0000100F EBE9                            JMP	short BADCDERR
  3965                                  
  3966                                  NOTEST3:
  3967 00001011 8B361F2E                        MOV     SI,[PATHPOS]
  3968 00001015 BF6C00                          MOV     DI,FCB+10H
  3969 00001018 E80B07                  	CALL    SCANOFF
  3970                                  	;MOV	AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 01H
  3971 0000101B B80129                  	MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 01H
  3972 0000101E CD21                            INT     int_command
  3973                                  	;CMP	BYTE PTR DS:[FCB+10H+1]," "  ; Check if parameter exists
  3974 00001020 803E6D0020              	CMP	BYTE [FCB+10H+1]," " ; 20h
  3975                                  	;MOV     DX,OFFSET TRANGROUP:BADARGS
  3976 00001025 BA[BC28]                	MOV     DX,BADARGS
  3977 00001028 7413                            JZ	short ERRJ		; Error if missing parameter
  3978 0000102A B417                            MOV     AH,FCB_RENAME
  3979 0000102C BA5C00                          MOV     DX,FCB
  3980 0000102F CD21                            INT     int_command
  3981 00001031 50                              PUSH    AX
  3982 00001032 E86B00                          CALL    RESTUDIR
  3983 00001035 58                              POP     AX
  3984                                  	;MOV     DX,OFFSET TRANGROUP:RENERR
  3985 00001036 BA[1025]                	MOV     DX,RENERR
  3986 00001039 FEC0                            INC     AL
  3987                                          ;retnz
  3988 0000103B 759E                    	jnz	short PAUSE_retn
  3989                                  ERRJ:
  3990 0000103D E9A7F5                          JMP     CERROR
  3991                                  
  3992                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  3993                                  
  3994                                  TYPEFIL:
  3995 00001040 BE8100                          mov     si,81H
  3996 00001043 E8E006                          call    SCANOFF         	; Skip to first non-delim
  3997 00001046 3C0D                            cmp     al,0DH
  3998 00001048 7503                            jnz	short GOTTARG
  3999 0000104A E9A001                          jmp     NOARGERR        	; No args
  4000                                  GOTTARG:
  4001 0000104D E86007                          CALL    SETPATH
  4002                                          ;MOV     AX,OPEN SHL 8
  4003 00001050 B8003D                          MOV     AX,OPEN*256
  4004 00001053 CD21                            INT     int_command
  4005                                          ;MOV     DX,OFFSET TRANGROUP:NOTFND
  4006 00001055 BA[2725]                        MOV     DX,NOTFND
  4007 00001058 72E3                            JC	short ERRJ
  4008 0000105A 89C3                            MOV     BX,AX           	; Handle
  4009 0000105C 8E1EDC2C                        MOV     DS,[TPA]
  4010 00001060 31D2                            XOR     DX,DX
  4011                                  ;ASSUME  DS:NOTHING
  4012                                  TYPELP:
  4013                                          ;MOV     CX,[BYTCNT]
  4014                                          ;MOV     CX,[SS:BYTCNT]
  4015 00001062 2E8B0EF72C                      MOV     CX,[CS:BYTCNT] ; 30/04/2018
  4016 00001067 B43F                            MOV     AH,READ
  4017 00001069 CD21                            INT     int_command
  4018 0000106B 89C1                            MOV     CX,AX
  4019 0000106D E33D                            JCXZ    RET56
  4020 0000106F 53                              PUSH    BX
  4021 00001070 BB0100                          MOV     BX,1
  4022 00001073 B440                            MOV     AH,WRITE
  4023 00001075 CD21                            INT     int_command
  4024 00001077 5B                              POP     BX
  4025 00001078 7209                            JC	short ERROR_OUTPUTJ
  4026 0000107A 39C8                            CMP     AX,CX
  4027 0000107C 74E4                            JZ	short TYPELP
  4028 0000107E 49                              DEC     CX
  4029 0000107F 39C8                            CMP     AX,CX
  4030                                          ;retz				; One less byte OK (^Z)
  4031 00001081 7429                    	jz	short RET56
  4032                                  ERROR_OUTPUTJ:
  4033 00001083 BB0100                          MOV     BX,1
  4034                                          ;MOV     AX,IOCTL SHL 8
  4035 00001086 B80044                          MOV     AX,IOCTL*256
  4036 00001089 CD21                            INT     int_command
  4037 0000108B F6C280                          TEST    DL,devid_ISDEV
  4038                                  	;retnz				; If device, no error message
  4039 0000108E 751C                    	jnz	short RET56
  4040 00001090 E9B908                          JMP     ERROR_OUTPUT
  4041                                  
  4042                                  RESTUDIR1:
  4043 00001093 1E                              PUSH    DS
  4044 00001094 8E1EDA2C                        MOV     DS,[RESSEG]
  4045                                  ;ASSUME  DS:RESGROUP
  4046 00001098 803E720800                      CMP     byte [RESTDIR],0
  4047 0000109D 1F                              POP     DS
  4048                                  ;ASSUME  DS:TRANGROUP
  4049                                          ;retz
  4050 0000109E 740C                    	jz	short RET56
  4051                                  RESTUDIR:
  4052                                          ;MOV     DX,OFFSET TRANGROUP:USERDIR1
  4053 000010A0 BA462C                  	MOV     DX,USERDIR1
  4054 000010A3 B43B                            MOV     AH,CHDIR
  4055 000010A5 CD21                            INT     int_command             ; Restore users DIR
  4056 000010A7 30C0                            XOR     AL,AL
  4057 000010A9 E851F5                          CALL    SETREST
  4058                                  RET56:
  4059                                          ;return
  4060 000010AC C3                      	RETN
  4061                                  
  4062                                  VOLUME:
  4063 000010AD BE8100                          mov     si,81H
  4064 000010B0 E87306                          call    SCANOFF         ; Skip to first non-delim
  4065                                          ;CMP     BYTE PTR DS:[FCB],0	;Default drive?
  4066 000010B3 803E5C0000                      CMP     BYTE [FCB],0
  4067 000010B8 740B                            JZ	short CHECKNOARG	;Yes
  4068 000010BA 46                              INC     SI
  4069 000010BB 46                              INC     SI      		;Skip over d:
  4070 000010BC 89F3                            MOV     BX,SI
  4071 000010BE E86506                          CALL    SCANOFF
  4072 000010C1 39F3                            CMP     BX,SI
  4073 000010C3 750A                            JNZ	short OKVOLARG	; If we skipped some delims at this point, OK
  4074                                  CHECKNOARG:
  4075 000010C5 3C0D                            cmp     al,0DH
  4076 000010C7 7406                            JZ	short OKVOLARG
  4077                                  BADVOLARG:
  4078                                          ;MOV	DX,OFFSET TRANGROUP:BADDRV
  4079 000010C9 BA[FB25]                        MOV	DX,BADDRV
  4080 000010CC E918F5                          JMP     CERROR
  4081                                  
  4082                                  OKVOLARG:
  4083 000010CF E8F0FE                          CALL    CRLF2
  4084 000010D2 1E                              PUSH    DS
  4085 000010D3 07                              POP     ES
  4086 000010D4 BF5500                          MOV     DI,FCB-7        ; Set up extended FCB
  4087 000010D7 B8FFFF                          MOV     AX,-1
  4088 000010DA AA                              STOSB
  4089 000010DB 31C0                            XOR     AX,AX
  4090 000010DD AB                              STOSW
  4091 000010DE AB                              STOSW
  4092 000010DF AA                              STOSB
  4093 000010E0 B008                            MOV     AL,8            ; Look for volume label
  4094 000010E2 AA                              STOSB
  4095 000010E3 47                              INC     DI              ; Skip drive byte
  4096 000010E4 B90B00                          MOV     CX,11
  4097 000010E7 B03F                            MOV     AL,'?'
  4098 000010E9 F3AA                            REP     STOSB
  4099                                          ;MOV     DX,OFFSET TRANGROUP:DIRBUF
  4100 000010EB BACC2D                          MOV     DX,DIRBUF
  4101 000010EE B41A                            MOV     AH,SET_DMA
  4102 000010F0 CD21                            INT     int_command
  4103 000010F2 BA5500                          MOV     DX,FCB-7
  4104 000010F5 B411                            MOV     AH,DIR_SEARCH_FIRST
  4105 000010F7 CD21                            INT     int_command
  4106 000010F9 E98609                          JMP	PRINTVOL
  4107                                  
  4108                                  VERSION:
  4109 000010FC E8C3FE                          CALL    CRLF2
  4110 000010FF E80300                          CALL    PRINT_VERSION
  4111 00001102 E9BDFE                          JMP     CRLF2
  4112                                  
  4113                                  PRINT_VERSION:
  4114                                          ;MOV     DI,OFFSET TRANGROUP:CHARBUF
  4115 00001105 BF002D                  	MOV     DI,CHARBUF
  4116                                  	;MOV     SI,OFFSET TRANGROUP:VERMES_PRE
  4117 00001108 BE[E626]                	MOV     SI,VERMES_PRE
  4118 0000110B E87FFC                          CALL    MESTRAN
  4119 0000110E B430                            MOV     AH,GET_VERSION
  4120 00001110 CD21                            INT     int_command
  4121 00001112 50                              PUSH    AX
  4122 00001113 30E4                            XOR     AH,AH
  4123 00001115 B10A                            MOV     CL,10
  4124 00001117 F6F1                            DIV     CL
  4125 00001119 B104                            MOV     CL,4
  4126 0000111B D2E0                            SHL     AL,CL
  4127 0000111D 08E0                            OR      AL,AH
  4128 0000111F B91011                          MOV     CX,1110H
  4129 00001122 88C2                            MOV     DL,AL
  4130 00001124 E88105                          CALL    OUTBYTE
  4131 00001127 B02E                            MOV     AL,'.'
  4132 00001129 AA                              STOSB
  4133 0000112A 58                              POP     AX
  4134 0000112B 88E0                            MOV     AL,AH
  4135 0000112D 30E4                            XOR     AH,AH
  4136 0000112F B10A                            MOV     CL,10
  4137 00001131 F6F1                            DIV     CL
  4138 00001133 B104                            MOV     CL,4
  4139 00001135 D2E0                            SHL     AL,CL
  4140 00001137 08E0                            OR      AL,AH
  4141 00001139 B91010                          MOV     CX,1010H
  4142 0000113C 88C2                            MOV     DL,AL
  4143 0000113E E86705                          CALL    OUTBYTE
  4144                                          ;MOV     SI,OFFSET TRANGROUP:VERMES_POST
  4145 00001141 BE[F526]                        MOV     SI,VERMES_POST
  4146 00001144 E846FC                          CALL    MESTRAN
  4147 00001147 31C0                            XOR     AX,AX
  4148 00001149 AA                              STOSB
  4149                                          ;MOV     DX,OFFSET TRANGROUP:CHARBUF
  4150 0000114A BA002D                          MOV     DX,CHARBUF
  4151 0000114D E9D507                          JMP     ZPRINT
  4152                                  
  4153                                  ;ASSUME  DS:TRANGROUP
  4154                                  
  4155                                  CLS:
  4156                                          ;IF      IBMVER
  4157 00001150 BB0100                          MOV     BX,1
  4158                                          ;MOV     AX,IOCTL SHL 8
  4159 00001153 B80044                          MOV     AX,IOCTL*256
  4160 00001156 CD21                            INT     int_command
  4161 00001158 F6C280                          TEST    DL,devid_ISDEV
  4162 0000115B 743A                            JZ	short ANSICLS	; If a file put out ANSI
  4163 0000115D F6C210                          TEST    DL,devid_SPECIAL
  4164 00001160 7435                            JZ	short ANSICLS	; If not special CON, do ANSI
  4165                                          ;MOV     AX,(GET_INTERRUPT_VECTOR SHL 8) OR 29H
  4166 00001162 B82935                          MOV     AX,(GET_INTERRUPT_VECTOR*256) | 29H
  4167 00001165 CD21                            INT     int_command
  4168 00001167 8CC2                            MOV     DX,ES
  4169                                          ;MOV     AX,(GET_INTERRUPT_VECTOR SHL 8) OR 20H
  4170 00001169 B82035                          MOV     AX,(GET_INTERRUPT_VECTOR*256) | 20H
  4171 0000116C CD21                            INT     int_command
  4172 0000116E 8CC0                            MOV     AX,ES
  4173 00001170 39C2                            CMP     DX,AX
  4174 00001172 7723                            JA	short ANSICLS	; If not default driver, do ANSI
  4175 00001174 B40B                            MOV     AH,0Bh          ; Set overscan to black
  4176 00001176 31DB                            XOR     BX,BX
  4177 00001178 CD10                            INT     10h
  4178 0000117A B40F                            MOV     AH,0Fh
  4179 0000117C CD10                            INT     10h
  4180 0000117E 88E2                            MOV     DL,AH
  4181 00001180 FECA                            DEC     DL
  4182                                  
  4183                                          ;IF      KANJI
  4184                                          ;MOV     DH,23
  4185                                          ;ELSE
  4186 00001182 B619                            MOV     DH,25
  4187                                          ;ENDIF
  4188                                  
  4189 00001184 31C0                            XOR     AX,AX
  4190 00001186 89C1                            MOV     CX,AX
  4191                                  
  4192                                          ;IF      KANJI
  4193                                          ;MOV     BH,0
  4194                                          ;ELSE
  4195 00001188 B707                            MOV     BH,7
  4196                                          ;ENDIF
  4197                                  
  4198 0000118A B406                            MOV     AH,6
  4199 0000118C CD10                            INT     10h
  4200 0000118E 31D2                            XOR     DX,DX
  4201 00001190 B700                            MOV     BH,0
  4202 00001192 B402                            MOV     AH,2
  4203 00001194 CD10                            INT     10h
  4204                                          ;return
  4205 00001196 C3                      	RETN
  4206                                  
  4207                                  ANSICLS:
  4208                                          ;ENDIF
  4209                                  
  4210                                  	;MOV     SI,OFFSET TRANGROUP:CLSSTRING
  4211 00001197 BE[F928]                	MOV     SI,CLSSTRING
  4212 0000119A AC                              LODSB
  4213 0000119B 88C1                            MOV     CL,AL
  4214 0000119D 30ED                            XOR     CH,CH
  4215 0000119F B406                            MOV     AH,RAW_CON_IO
  4216                                  CLRLOOP:
  4217 000011A1 AC                              LODSB
  4218 000011A2 88C2                            MOV     DL,AL
  4219 000011A4 CD21                            INT     int_command
  4220 000011A6 E2F9                            LOOP    CLRLOOP
  4221                                  ANSICLS_retn:
  4222 000011A8 C3                              RETN
  4223                                  
  4224                                  _$CHDIR:
  4225 000011A9 A1ED2C                          MOV     AX,[COMSW]
  4226 000011AC 0B06F32C                        OR      AX,[ARGTS]
  4227                                          ;MOV     DX,OFFSET TRANGROUP:BADSWT
  4228 000011B0 BA[3826]                        MOV     DX,BADSWT
  4229 000011B3 7535                            JNZ	short CERRORJ3
  4230 000011B5 BE8100                          mov     si,81H
  4231 000011B8 E86B05                          call    SCANOFF         ; Skip to first non-delim
  4232 000011BB 3C0D                            cmp     al,0DH
  4233 000011BD 7407                            jz	short PWDJ 	; No args
  4234 000011BF 46                              inc     si              ; Skip first char
  4235 000011C0 AD                              lodsw
  4236                                          ;cmp	ax,(0DH SHL 8) OR ':' ; d:<CR> ?
  4237 000011C1 3D3A0D                          cmp	ax,0D3Ah	; d:<CR> ?
  4238 000011C4 7503                            jnz	short REALCD	; no
  4239                                  PWDJ:
  4240 000011C6 E934F7                          jmp     PWD             ; Drive only specified
  4241                                  REALCD:
  4242 000011C9 E8E405                          CALL    SETPATH
  4243 000011CC F606292E02                      TEST    byte [DESTINFO],2
  4244 000011D1 7506                            JNZ     BADCDERRJ
  4245 000011D3 B43B                            MOV     AH,CHDIR
  4246 000011D5 CD21                            INT     int_command
  4247                                          ;retnc
  4248 000011D7 73CF                    	jnc	short ANSICLS_retn
  4249                                  BADCDERRJ:
  4250 000011D9 E91EFE                          JMP	BADCDERR
  4251                                  
  4252                                  _$MKDIR:
  4253 000011DC E81300                          CALL    SETRMMK
  4254 000011DF 7506                            JNZ	short BADMDERR
  4255 000011E1 B439                            MOV     AH,MKDIR
  4256 000011E3 CD21                            INT     int_command
  4257                                          ;retnc
  4258 000011E5 73C1                    	jnc	short ANSICLS_retn
  4259                                  BADMDERR:
  4260                                          ;MOV     DX,OFFSET TRANGROUP:BADMKD
  4261 000011E7 BA[2F27]                	MOV     DX,BADMKD
  4262                                  CERRORJ3:
  4263 000011EA E9FAF3                          JMP	CERROR
  4264                                  
  4265                                  NOARGERR:
  4266                                          ;MOV     DX,OFFSET TRANGROUP:BADARGS
  4267 000011ED BA[BC28]                        MOV     DX,BADARGS
  4268 000011F0 EBF8                            JMP     SHORT CERRORJ3
  4269                                  
  4270                                  SETRMMK:
  4271 000011F2 BE8100                          mov     si,81H
  4272 000011F5 E82E05                          call    SCANOFF         ; Skip to first non-delim
  4273 000011F8 3C0D                            cmp     al,0DH
  4274 000011FA 74F1                            jz	short NOARGERR	; No args
  4275 000011FC A1ED2C                          MOV     AX,[COMSW]
  4276 000011FF 0B06F32C                        OR      AX,[ARGTS]
  4277                                          ;MOV     DX,OFFSET TRANGROUP:BADSWT
  4278 00001203 BA[3826]                	MOV     DX,BADSWT
  4279 00001206 75E2                            JNZ	short CERRORJ3
  4280 00001208 E8A505                          CALL    SETPATH
  4281 0000120B F606292E02                      TEST	byte [DESTINFO],2
  4282                                  SETRMMK_retn:
  4283 00001210 C3                              RETN
  4284                                  
  4285                                  _$RMDIR:
  4286 00001211 E8DEFF                          CALL    SETRMMK
  4287 00001214 7506                            JNZ	short BADRDERR
  4288 00001216 B43A                            MOV     AH,RMDIR
  4289 00001218 CD21                            INT     int_command
  4290                                          ;retnc
  4291 0000121A 73F4                    	jnc	short SETRMMK_retn
  4292                                  BADRDERR:
  4293                                          ;MOV     DX,OFFSET TRANGROUP:BADRMD
  4294 0000121C BA[4C27]                        MOV     DX,BADRMD
  4295 0000121F E9C5F3                          JMP     CERROR
  4296                                  
  4297                                  SAVUDIR:
  4298                                  ; DL is drive number A=1
  4299                                          ;MOV     DI,OFFSET TRANGROUP:USERDIR1
  4300 00001222 BF462C                  	MOV     DI,USERDIR1
  4301                                  SAVUDIR1:
  4302 00001225 88D0                            MOV     AL,DL
  4303 00001227 0440                            ADD     AL,'@'
  4304 00001229 3C40                            CMP     AL,'@'
  4305 0000122B 7506                            JNZ	short GOTUDRV
  4306 0000122D 0206EA2C                        ADD     AL,[CURDRV]
  4307 00001231 FEC0                            INC     AL		; A = 1
  4308                                  GOTUDRV:
  4309 00001233 AA                              STOSB
  4310 00001234 8A26DF2C                        MOV     AH,[DIRCHAR]
  4311 00001238 B03A                            MOV     AL,DRVCHAR
  4312 0000123A AB                              STOSW
  4313 0000123B 06                              PUSH    ES
  4314 0000123C 1F                              POP     DS
  4315                                  ;ASSUME  DS:NOTHING
  4316 0000123D 89FE                            MOV     SI,DI
  4317 0000123F B447                            MOV     AH,CURRENT_DIR	; Get the Directory Text
  4318 00001241 CD21                            INT     int_command
  4319                                          ;retc
  4320 00001243 7202                    	jc	short SAVUDIR_retn
  4321 00001245 0E                              PUSH    CS
  4322 00001246 1F                              POP     DS
  4323                                  ;ASSUME  DS:TRANGROUP
  4324                                  SAVUDIR_retn:
  4325 00001247 C3                              RETN
  4326                                  
  4327                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  4328                                  
  4329                                  ; Date and time are set during initialization and use
  4330                                  ; this routines since they need to do a long return
  4331                                  
  4332                                  ;DATINIT PROC    FAR
  4333                                  
  4334                                  DATINIT:
  4335 00001248 06                              PUSH    ES
  4336 00001249 1E                              PUSH    DS              ; Going to use the previous stack
  4337 0000124A 8CC8                            MOV     AX,CS           ; Set up the appropriate segment registers
  4338 0000124C 8EC0                            MOV     ES,AX
  4339 0000124E 8ED8                            MOV     DS,AX
  4340                                          ;MOV     DX,OFFSET TRANGROUP:INTERNATVARS ;Set up internat vars
  4341 00001250 BA562F                          MOV     DX,INTERNATVARS
  4342                                          ;MOV     AX,INTERNATIONAL SHL 8
  4343 00001253 B80038                          MOV     AX,INTERNATIONAL*256
  4344 00001256 CD21                            INT     21H
  4345                                          ;MOV     WORD PTR DS:[81H],13
  4346 00001258 C70681000D00                    MOV     word [81H],13 ; Want to prompt for date during initialization
  4347 0000125E C606C32B80                      MOV     byte [COMBUF],COMBUFLEN ; Init COMBUF
  4348 00001263 C706C42B010D                    MOV     WORD [COMBUF+1],0D01H
  4349 00001269 E86C00                          CALL    DATE
  4350 0000126C E84201                          CALL    CTIME
  4351 0000126F 1F                              POP     DS
  4352 00001270 07                              POP     ES
  4353 00001271 CB                              RETF
  4354                                  
  4355                                  ;DATINIT ENDP
  4356                                  
  4357                                  ; DATE - Gets and sets the time
  4358                                  
  4359                                  DATE_CXDX:
  4360 00001272 89CB                            MOV     BX,CX
  4361                                  P_DATE:
  4362 00001274 89D8                            MOV     AX,BX
  4363 00001276 89D1                            MOV     CX,DX
  4364 00001278 B264                            MOV     DL,100
  4365 0000127A F6F2                            DIV     DL
  4366 0000127C 86C4                            XCHG    AL,AH
  4367 0000127E 92                              XCHG    AX,DX
  4368 0000127F B710                            MOV     BH,"0"-" "      ; Enable leading zero suppression
  4369                                          ;MOV     AX,WORD PTR [INTERNATVARS.Date_tim_format]
  4370 00001281 A1562F                          MOV     AX,[INTERNATVARS+INTERNAT_BLOCK.Date_tim_format]
  4371 00001284 09C0                            OR      AX,AX
  4372 00001286 7415                            JZ	short USPDAT
  4373 00001288 48                              DEC     AX
  4374 00001289 7422                            JZ	short EUPDAT
  4375 0000128B B700                            MOV     BH,0            ; Disable leading zero suppression
  4376 0000128D E83900                          CALL    P_YR
  4377 00001290 E82B00                          CALL    P_DSEP
  4378 00001293 E82200                          CALL    P_MON
  4379 00001296 E82500                          CALL    P_DSEP
  4380 00001299 E82700                          CALL    P_DAY
  4381 0000129C C3                              RETN
  4382                                  
  4383                                  USPDAT:
  4384 0000129D E81800                          CALL    P_MON
  4385 000012A0 E81B00                          CALL    P_DSEP
  4386 000012A3 E81D00                          CALL    P_DAY
  4387                                  PLST:
  4388 000012A6 E81500                          CALL    P_DSEP
  4389 000012A9 E81D00                          CALL    P_YR
  4390 000012AC C3                              RETN
  4391                                  
  4392                                  EUPDAT:
  4393 000012AD E81300                          CALL    P_DAY
  4394 000012B0 E80B00                          CALL    P_DSEP
  4395 000012B3 E80200                          CALL    P_MON
  4396 000012B6 EBEE                            JMP	short PLST
  4397                                  
  4398                                  P_MON:
  4399 000012B8 88E8                            MOV     AL,CH
  4400 000012BA E81F06                          CALL    OUT2
  4401 000012BD C3                              RETN
  4402                                  
  4403                                  P_DSEP:
  4404                                          ;MOV     AL,BYTE PTR [INTERNATVARS.Date_sep]
  4405 000012BE A0612F                          MOV     AL,[INTERNATVARS+INTERNAT_BLOCK.Date_sep]
  4406 000012C1 AA                              STOSB
  4407 000012C2 C3                              RETN
  4408                                  
  4409                                  P_DAY:
  4410 000012C3 88C8                            MOV     AL,CL
  4411 000012C5 E81406                          CALL    OUT2
  4412 000012C8 C3                      	RETN
  4413                                  
  4414                                  P_YR:
  4415 000012C9 88F0                            MOV     AL,DH
  4416 000012CB 08C0                            OR      AL,AL
  4417 000012CD 7403                            JZ	short TWODIGYR	; Two instead of 4 digit year
  4418 000012CF E80A06                          CALL    OUT2
  4419                                  TWODIGYR:
  4420 000012D2 88D0                            MOV     AL,DL
  4421 000012D4 E80506                          CALL    OUT2
  4422 000012D7 C3                              RETN
  4423                                  
  4424                                  DATE:
  4425 000012D8 BE8100                          MOV     SI,81H          ; Accepting argument for date inline
  4426 000012DB E84804                          CALL    SCANOFF
  4427 000012DE 3C0D                            CMP     AL,13
  4428 000012E0 7402                            JZ	short PRMTDAT
  4429                                  DATE_retn:
  4430 000012E2 EB27                            JMP	short COMDAT
  4431                                  
  4432                                  PRMTDAT:
  4433                                  	;MOV     DX,OFFSET TRANGROUP:CURDAT_PRE
  4434 000012E4 BA[7026]                	MOV     DX,CURDAT_PRE
  4435 000012E7 E83606                          CALL    PRINT           ; Print "Current date is "
  4436 000012EA E8D807                          CALL    PRINT_DATE
  4437                                  	;MOV     DX,OFFSET TRANGROUP:CURDAT_POST
  4438 000012ED BA[8026]                	MOV     DX,CURDAT_POST
  4439 000012F0 E82D06                          CALL    PRINT
  4440                                  GETDAT:
  4441                                  	;MOV     DX,OFFSET TRANGROUP:NEWDAT
  4442 000012F3 BA[8126]                	MOV     DX,NEWDAT
  4443 000012F6 E81906                          CALL    ERROR_PRINT     ; Print "Enter new date: "
  4444 000012F9 B40A                            MOV     AH,STD_CON_STRING_INPUT
  4445                                          ;MOV     DX,OFFSET TRANGROUP:COMBUF
  4446 000012FB BAC32B                          MOV     DX,COMBUF
  4447 000012FE CD21                            INT     int_command	; Get input line
  4448 00001300 E8BFFC                          CALL    CRLF2
  4449                                  	;MOV     SI,OFFSET TRANGROUP:COMBUF+2
  4450 00001303 BEC52B                  	MOV     SI,COMBUF+2
  4451 00001306 803C0D                          CMP     BYTE [SI],13	; Check if new date entered
  4452                                          ;retz
  4453 00001309 74D7                    	jz	short DATE_retn
  4454                                  COMDAT:
  4455                                          ;MOV     AX,WORD PTR [INTERNATVARS.Date_tim_format]
  4456 0000130B A1562F                          MOV     AX,[INTERNATVARS+INTERNAT_BLOCK.Date_tim_format]
  4457 0000130E 09C0                            OR      AX,AX
  4458 00001310 742A                            JZ	short USSDAT
  4459 00001312 48                              DEC     AX
  4460 00001313 7440                            JZ	short EUSDAT
  4461 00001315 E85A00                          CALL    GET_YR
  4462 00001318 722A                            JC	short DATERRJ
  4463 0000131A E88500                          CALL    GET_DSEP
  4464 0000131D 7225                            JC	short DATERRJ
  4465 0000131F E84200                          CALL    GET_MON
  4466 00001322 7220                            JC	short DATERRJ
  4467 00001324 E87B00                          CALL    GET_DSEP
  4468 00001327 721B                            JC	short DATERRJ
  4469 00001329 E84000                          CALL    GET_DAY
  4470                                  DAT_SET:
  4471 0000132C 726B                            JC	short DATERR
  4472 0000132E AC                              LODSB
  4473 0000132F 3C0D                            CMP     AL,13
  4474 00001331 7566                            JNZ	short DATERR
  4475 00001333 B42B                            MOV     AH,SET_DATE
  4476 00001335 CD21                            INT     int_command
  4477 00001337 08C0                            OR      AL,AL
  4478 00001339 755E                            JNZ	short DATERR
  4479                                  DAT_SET_retn:
  4480 0000133B C3                              RETN
  4481                                  
  4482                                  USSDAT:
  4483 0000133C E82500                          CALL    GET_MON
  4484 0000133F 7258                            JC	short DATERR
  4485 00001341 E85E00                          CALL    GET_DSEP
  4486                                  DATERRJ:
  4487 00001344 7253                            JC	short DATERR
  4488 00001346 E82300                          CALL    GET_DAY
  4489                                  TGET:
  4490 00001349 724E                            JC	short DATERR
  4491 0000134B E85400                          CALL    GET_DSEP
  4492 0000134E 7249                            JC	short DATERR
  4493 00001350 E81F00                          CALL    GET_YR
  4494 00001353 EBD7                            JMP	short DAT_SET
  4495                                  
  4496                                  EUSDAT:
  4497 00001355 E81400                          CALL    GET_DAY
  4498 00001358 723F                            JC	short DATERR
  4499 0000135A E84500                          CALL    GET_DSEP
  4500 0000135D 723A                            JC	short DATERR
  4501 0000135F E80200                          CALL    GET_MON
  4502 00001362 EBE5                            JMP	short TGET
  4503                                  
  4504                                  GET_MON:
  4505 00001364 E85505                          CALL    GETNUM          ; Get one or two digit number
  4506                                          ;retc
  4507 00001367 72D2                    	jc	short  DAT_SET_retn
  4508 00001369 88E6                            MOV     DH,AH           ; Put in position
  4509 0000136B C3                      	RETN
  4510                                  
  4511                                  GET_DAY:
  4512 0000136C E84D05                          CALL    GETNUM
  4513 0000136F 88E2                            MOV     DL,AH           ; Put in position
  4514                                  GET_DAY_retn:
  4515 00001371 C3                              RETN
  4516                                  
  4517                                  GET_YR:
  4518 00001372 E84705                          CALL    GETNUM
  4519                                          ;retc
  4520 00001375 72FA                    	jc	short GET_DAY_retn
  4521 00001377 B96C07                          MOV     CX,1900
  4522 0000137A E82500                          CALL    GET_DSEP
  4523 0000137D 9C                              PUSHF
  4524 0000137E 4E                              DEC     SI
  4525 0000137F 9D                              POPF
  4526 00001380 7410                            JZ      short BIAS
  4527 00001382 803C0D                          CMP     BYTE [SI],13
  4528 00001385 740B                            JZ      short BIAS
  4529 00001387 B064                            MOV     AL,100
  4530 00001389 F6E4                            MUL     AH
  4531 0000138B 89C1                            MOV     CX,AX
  4532 0000138D E82C05                          CALL    GETNUM
  4533                                  	;retc
  4534 00001390 72DF                    	jc	short GET_DAY_retn
  4535                                  BIAS:
  4536 00001392 88E0                            MOV     AL,AH
  4537 00001394 B400                            MOV     AH,0
  4538 00001396 01C1                            ADD     CX,AX
  4539                                  
  4540                                          ;IF IBM AND KANJI
  4541                                  ;
  4542                                  ; Gross hack for PC-J machine: CMOS clock cannot handle years after 2079
  4543                                  ;
  4544                                  	;CMP	CX,2080
  4545                                  	;JB	short YearOk
  4546                                          ;STC
  4547                                          ;return
  4548                                  ;YearOk: CLC
  4549                                          ;ENDIF
  4550                                  BIAS_retn:
  4551                                          ;return
  4552 00001398 C3                      	RETN
  4553                                  
  4554                                  DATERR:
  4555                                          ;MOV     DX,OFFSET TRANGROUP:BADDAT
  4556 00001399 BA[6126]                        MOV     DX,BADDAT
  4557 0000139C E88105                          CALL    PRINT
  4558 0000139F E951FF                          JMP     GETDAT
  4559                                  
  4560                                  GET_DSEP:
  4561 000013A2 AC                              LODSB
  4562 000013A3 3C2F                            CMP     AL,'/'
  4563                                          ;retz
  4564 000013A5 74F1                    	jz	short BIAS_retn
  4565 000013A7 3C2E                            CMP     AL,'.'
  4566                                          ;retz
  4567 000013A9 74ED                    	jz	short BIAS_retn
  4568 000013AB 3C2D                            CMP     AL,'-'
  4569                                          ;retz
  4570 000013AD 74E9                    	jz	short BIAS_retn
  4571 000013AF F9                              STC
  4572                                          ;return
  4573 000013B0 C3                      	RETN
  4574                                  
  4575                                  ; TIME gets and sets the time
  4576                                  
  4577                                  CTIME:
  4578 000013B1 BE8100                          MOV     SI,81H                  ; Accepting argument for time inline
  4579 000013B4 E86F03                          CALL    SCANOFF
  4580 000013B7 3C0D                            CMP     AL,13
  4581 000013B9 7474                            JZ	short PRMTTIM
  4582 000013BB BB3A2E                          MOV     BX, 2E3Ah ; ":."  ; 01/05/2018
  4583 000013BE E8DE00                          CALL    INLINE
  4584 000013C1 E98500                          JMP	COMTIM
  4585                                  
  4586                                  PRINT_TIME:
  4587 000013C4 B42C                            MOV     AH,GET_TIME
  4588 000013C6 CD21                            INT     int_command              ; Get time in CX:DX
  4589 000013C8 57                              PUSH    DI
  4590 000013C9 06                              PUSH    ES
  4591 000013CA 0E                              PUSH    CS
  4592 000013CB 07                              POP     ES
  4593                                          ;MOV     DI,OFFSET TRANGROUP:CHARBUF
  4594 000013CC BF002D                          MOV     DI,CHARBUF
  4595 000013CF B301                            MOV     BL,1           		; Always 24 hour time
  4596 000013D1 E80C00                          CALL    P_TIME
  4597 000013D4 31C0                            XOR     AX,AX
  4598 000013D6 AA                              STOSB
  4599                                          ;MOV     DX,OFFSET TRANGROUP:CHARBUF
  4600 000013D7 BA002D                          MOV     DX,CHARBUF
  4601 000013DA E84805                          CALL    ZPRINT
  4602 000013DD 07                              POP     ES
  4603 000013DE 5F                              POP     DI
  4604                                  P_TIME_retn:
  4605 000013DF C3                              RETN
  4606                                  
  4607                                  P_TIME:
  4608 000013E0 88E8                            MOV     AL,CH
  4609 000013E2 F6C37F                          TEST    BL,07FH         ; Ignore high bit
  4610 000013E5 7512                            JNZ	short T24	; 24 hr time?
  4611 000013E7 B761                            MOV     BH,"a"          ; Assume A.M.
  4612 000013E9 3C0C                            CMP     AL,12           ; In the afternoon?
  4613 000013EB 7206                            JB	short MORN
  4614 000013ED B770                            MOV     BH,"p"
  4615 000013EF 7402                            JE	short MORN
  4616 000013F1 2C0C                            SUB     AL,12           ; Keep it to 12 hours or less
  4617                                  MORN:
  4618 000013F3 08C0                            OR      AL,AL           ; Before 1 am?
  4619 000013F5 7502                            JNZ	short T24
  4620 000013F7 B00C                            MOV     AL,12
  4621                                  T24:
  4622 000013F9 53                              PUSH    BX
  4623 000013FA B710                            MOV     BH,"0"-" "      ; Enable leading zero suppression
  4624 000013FC E8DD04                          CALL    OUT2
  4625 000013FF E82800                          CALL    P_TSEP
  4626 00001402 88C8                            MOV     AL,CL
  4627 00001404 E8D504                          CALL    OUT2
  4628 00001407 5B                              POP     BX
  4629 00001408 53                              PUSH    BX
  4630 00001409 F6C380                          TEST    BL,80H
  4631 0000140C 7512                            JNZ	short PAP	; If from DIR, go directly to am pm
  4632 0000140E B700                            MOV     BH,0            ; Disable leading zero suppression
  4633 00001410 E81700                          CALL    P_TSEP
  4634 00001413 88F0                            MOV     AL,DH
  4635 00001415 E8C404                          CALL    OUT2
  4636                                          ;IF NOT IBMJAPAN
  4637 00001418 B02E                            MOV     AL,"."
  4638 0000141A AA                              STOSB
  4639 0000141B 88D0                            MOV     AL,DL
  4640 0000141D E8BC04                          CALL    OUT2
  4641                                          ;ENDIF
  4642                                  PAP:
  4643 00001420 5B                              POP     BX
  4644 00001421 F6C37F                          TEST    BL,07FH         ; Ignore high bit
  4645                                  	;retnz			; 24 hour time, no am pm
  4646 00001424 75B9                    	jnz	short P_TIME_retn
  4647 00001426 88F8                            MOV     AL,BH
  4648 00001428 AA                              STOSB                   ; Store 'a' or 'p'
  4649                                  ;P_TIME_retn:
  4650 00001429 C3                              RETN
  4651                                  
  4652                                  P_TSEP:
  4653                                          ;MOV     AL,[INTERNATVAR.Time_sep]
  4654 0000142A A0632F                          MOV     AL,[INTERNATVARS+INTERNAT_BLOCK.Time_sep]
  4655 0000142D AA                              STOSB
  4656                                  P_TSEP_retn:
  4657 0000142E C3                              RETN
  4658                                  
  4659                                  PRMTTIM:
  4660                                  	;MOV     DX,OFFSET TRANGROUP:CURTIM_PRE
  4661 0000142F BA[A326]                	MOV     DX,CURTIM_PRE
  4662 00001432 E8EB04                          CALL    PRINT           ; Print "Current time is "
  4663 00001435 E88CFF                          CALL    PRINT_TIME
  4664                                          ;MOV     DX,OFFSET TRANGROUP:CURTIM_POST
  4665 00001438 BA[B326]                        MOV     DX,CURTIM_POST
  4666 0000143B E8E204                          CALL    PRINT
  4667                                  GETTIM:
  4668 0000143E 31C9                            XOR     CX,CX           ; Initialize hours and minutes to zero
  4669                                          ;MOV     DX,OFFSET TRANGROUP:NEWTIM
  4670 00001440 BA[B426]                        MOV     DX,NEWTIM
  4671 00001443 BB3A2E                          MOV     BX, 2E3Ah ; ":."
  4672 00001446 E84100                          CALL    GETBUF
  4673                                  COMTIM:
  4674                                         ;retz			; If no time present, don't change it
  4675 00001449 74E3                    	jz	short P_TSEP_retn
  4676 0000144B 7235                            JC	short TIMERR
  4677 0000144D 89D1                            MOV     CX,DX
  4678 0000144F 31D2                            XOR     DX,DX
  4679 00001451 AC                              LODSB
  4680 00001452 3C0D                            CMP     AL,13
  4681 00001454 7424                            JZ	short SAVTIM
  4682 00001456 38D8                            CMP     AL,BL
  4683 00001458 7404                            JZ	short GOTSEC
  4684 0000145A 38F8                            CMP     AL,BH
  4685 0000145C 7524                            JNZ 	short TIMERR
  4686                                  GOTSEC:
  4687 0000145E E85B04                          CALL    GETNUM
  4688 00001461 721F                            JC	short TIMERR
  4689 00001463 88E6                            MOV     DH,AH           ; Position seconds
  4690 00001465 AC                              LODSB
  4691 00001466 3C0D                            CMP     AL,13
  4692 00001468 7410                            JZ	short SAVTIM
  4693 0000146A 3C2E                            CMP     AL,"."
  4694 0000146C 7514                            JNZ	short TIMERR
  4695 0000146E E84B04                          CALL    GETNUM
  4696 00001471 720F                            JC	short TIMERR
  4697 00001473 88E2                            MOV     DL,AH
  4698 00001475 AC                              LODSB
  4699 00001476 3C0D                            CMP     AL,13
  4700 00001478 7508                            JNZ	short TIMERR
  4701                                  SAVTIM:
  4702 0000147A B42D                            MOV     AH,SET_TIME
  4703 0000147C CD21                            INT     int_command
  4704 0000147E 08C0                            OR      AL,AL
  4705                                          ;retz                    ; Error in time?
  4706 00001480 74AC                    	jz	short P_TSEP_retn
  4707                                  TIMERR:
  4708                                          ;MOV     DX,OFFSET TRANGROUP:BADTIM
  4709 00001482 BA[9426]                        MOV     DX,BADTIM
  4710 00001485 E89804                          CALL    PRINT           ; Print error message
  4711 00001488 EBB4                            JMP	short GETTIM	; Try again
  4712                                  
  4713                                  GETBUF:
  4714 0000148A E88504                          CALL    ERROR_PRINT     ; Print "Enter new time: "
  4715 0000148D B40A                            MOV     AH,STD_CON_STRING_INPUT
  4716                                  	;MOV     DX,OFFSET TRANGROUP:COMBUF
  4717 0000148F BAC32B                  	MOV     DX,COMBUF
  4718 00001492 CD21                            INT     int_command	; Get input line
  4719 00001494 E82BFB                          CALL    CRLF2
  4720                                  	;MOV     SI,OFFSET TRANGROUP:COMBUF+2
  4721 00001497 BEC52B                  	MOV     SI,COMBUF+2
  4722 0000149A 803C0D                          CMP     BYTE [SI],13	; Check if new time entered
  4723                                          ;retz
  4724 0000149D 748F                    	jz	short P_TSEP_retn
  4725                                  
  4726                                  INLINE:
  4727 0000149F E81A04                          CALL    GETNUM          ; Get one or two digit number
  4728                                          ;retc
  4729 000014A2 728A                    	jc	short P_TSEP_retn
  4730 000014A4 88E6                            MOV     DH,AH           ; Put in position
  4731 000014A6 AC                              LODSB
  4732 000014A7 38D8                            CMP     AL,BL
  4733 000014A9 7409                            JZ	short NEXT
  4734 000014AB 38F8                            CMP     AL,BH
  4735 000014AD 7405                            JZ	short NEXT
  4736 000014AF 4E                              DEC     SI              ; Clears zero flag
  4737 000014B0 F8                              CLC
  4738 000014B1 B200                            MOV     DL,0
  4739 000014B3 C3                              RETN			; Time may have only an hour specified
  4740                                  
  4741                                  NEXT:
  4742 000014B4 E80504                          CALL    GETNUM
  4743 000014B7 88E2                            MOV     DL,AH           ; Put in position
  4744 000014B9 C3                              RETN
  4745                                  
  4746                                  ;TRANCODE	ENDS
  4747                                  ;		END
  4748                                  
  4749                                  ;=============================================================================
  4750                                  ; TCODE5.ASM
  4751                                  ;=============================================================================
  4752                                  
  4753                                  ;TITLE   PART5 - COMMAND Transient routines.
  4754                                  
  4755                                  ;TRANCODE SEGMENT PUBLIC BYTE
  4756                                  ;ASSUME  CS:TRANGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  4757                                  
  4758                                  FREE_TPA:
  4759                                  ;ASSUME  DS:TRANGROUP,ES:NOTHING
  4760 000014BA 06                              PUSH    ES
  4761 000014BB 8E06DC2C                        MOV     ES,[TPA]
  4762 000014BF B449                            MOV     AH,DEALLOC
  4763 000014C1 CD21                            INT     int_command		; Make lots of free memory
  4764 000014C3 07                              POP     ES
  4765 000014C4 C3                              RETN
  4766                                  
  4767                                  ALLOC_TPA:
  4768                                  ;ASSUME DS:TRANGROUP,ES:RESGROUP
  4769 000014C5 BBFFFF                          MOV     BX,0FFFFH		; Re-allocate the transient
  4770 000014C8 B448                            MOV     AH,ALLOC
  4771 000014CA CD21                            INT     int_command
  4772 000014CC B448                            MOV     AH,ALLOC
  4773 000014CE CD21                            INT     int_command
  4774                                          ;MOV     [LTPA],AX		; Re-compute evrything
  4775 000014D0 26A3B00A                        MOV     [ES:LTPA],AX
  4776 000014D4 A3DC2C                          MOV     [TPA],AX
  4777 000014D7 89C3                            MOV     BX,AX
  4778 000014D9 8CC8                            MOV     AX,CS
  4779 000014DB 29D8                            SUB     AX,BX
  4780 000014DD BA1000                          MOV     DX,16
  4781 000014E0 F7E2                            MUL     DX
  4782 000014E2 09D2                            OR      DX,DX
  4783 000014E4 7403                            JZ	short SAVSIZ2
  4784 000014E6 B8FFFF                          MOV     AX,-1
  4785                                  SAVSIZ2:
  4786 000014E9 A3F72C                          MOV     [BYTCNT],AX
  4787 000014EC C3                              RETN
  4788                                  
  4789                                  
  4790                                  PRESCAN:                        	; Cook the input buffer
  4791                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  4792 000014ED 31C9                            XOR     CX,CX
  4793 000014EF 8E06DA2C                        MOV     ES,[RESSEG]
  4794                                  ;ASSUME  ES:RESGROUP
  4795                                          ;MOV     SI,OFFSET TRANGROUP:COMBUF+2
  4796 000014F3 BEC52B                          MOV     SI,COMBUF+2
  4797 000014F6 89F7                            MOV     DI,SI
  4798                                  
  4799                                  CountQuotes:
  4800 000014F8 AC                              LODSB                           ; get a byte
  4801 000014F9 3C22                            CMP     AL,22h                  ; is it a quote?
  4802 000014FB 7504                            JNZ	SHORT CountEnd		; no, try for end of road
  4803 000014FD FEC5                            INC     CH                      ; bump count
  4804 000014FF EBF7                            JMP	short CountQuotes	; go get next char
  4805                                  CountEnd:
  4806 00001501 3C0D                            CMP     AL,13                   ; end of road?
  4807 00001503 75F3                            JNZ	short CountQuotes	; no, go back for next char
  4808                                  
  4809                                          ;IF      KANJI
  4810                                          ;PUSH    CX			; save count
  4811                                          ;MOV     SI,DI			; get back beginning of buffer
  4812                                  ;KanjiScan:
  4813                                          ;LODSB				; get a byte
  4814                                          ;CALL    TestKanj 		; is it a leadin byte
  4815                                          ;JZ      KanjiQuote		; no, check for quotes
  4816                                          ;MOV     AH,A			; save leadin
  4817                                          ;LODSB				; get trailing byte
  4818                                          ;CMP     AX,8140h		; is it Kanji space
  4819                                          ;JNZ     KanjiScan		; no, go get next
  4820                                          ;MOV     [SI-2],2020h		; replace with spaces
  4821                                          ;JMP     KanjiScan		; go get next char
  4822                                  ;KanjiQuote:
  4823                                          ;CMP     AL,22h			; beginning of quoted string
  4824                                          ;JNZ     KanjiEnd		; no, check for end
  4825                                          ;DEC     CH			; drop count
  4826                                          ;JZ      KanjiScan		; if count is zero, no quoting
  4827                                  ;KanjiQuoteLoop:
  4828                                          ;LODSB				; get next byte
  4829                                          ;CMP     AL,22h			; is it another quote
  4830                                          ;JNZ     KanjiQuoteLoop		; no, get another
  4831                                          ;DEC     CH			; yes, drop count
  4832                                          ;JMP     KanjiScan		; go get next char
  4833                                  ;KanjiEnd:
  4834 00001505 3C0D                            CMP     AL,13                   ; end of line character?
  4835                                          ;JNZ     KanjiScan		; go back to beginning
  4836                                          ;POP     CX			; get back original count
  4837                                          ;ENDIF
  4838                                  
  4839 00001507 89FE                            MOV     SI,DI                   ; restore pointer to begining
  4840                                  PRESCANLP:
  4841 00001509 AC                              LODSB
  4842                                  
  4843                                          ;IF      KANJI
  4844                                          ;CALL    TESTKANJ
  4845                                          ;JZ      NOTKANJ6
  4846                                          ;MOV     [DI],AL
  4847                                          ;INC     DI			; fake STOSB into DS
  4848                                          ;LODSB				; grab second byte
  4849                                          ;MOV     [DI],AL		; fake stosb into DS
  4850                                          ;INC     DI
  4851                                          ;INC     CL
  4852                                          ;INC     CL
  4853                                          ;JMP     PRESCANLP
  4854                                  ;NOTKANJ6:
  4855                                          ;ENDIF
  4856                                  
  4857 0000150A 3C22                            CMP     AL,22H			; " character
  4858 0000150C 7510                            JNZ	short TRYGREATER
  4859 0000150E FECD                            DEC     CH
  4860 00001510 740C                            JZ	short TRYGREATER
  4861                                  QLOOP:
  4862 00001512 8805                            MOV     [DI],AL
  4863 00001514 47                              INC     DI
  4864 00001515 FEC1                            INC     CL
  4865 00001517 AC                              LODSB
  4866 00001518 3C22                            CMP     AL,22H			; " character
  4867 0000151A 75F6                            JNZ	short QLOOP
  4868 0000151C FECD                            DEC     CH
  4869                                  
  4870                                  TRYGREATER:
  4871 0000151E 3C3E                            CMP     AL,'>'
  4872 00001520 7532                            JNZ	short NOOUT
  4873 00001522 803C3E                          CMP     BYTE [SI],'>'
  4874 00001525 7506                            JNZ	short NOAPPND
  4875 00001527 AC                              LODSB
  4876                                  	;INC	[RE_OUT_APP]		; Flag >>
  4877 00001528 26FE064F09              	INC	byte [ES:RE_OUT_APP]
  4878                                  NOAPPND:
  4879 0000152D E8F601                          CALL    SCANOFF
  4880 00001530 3C0D                            CMP     AL,0DH
  4881 00001532 7509                            JNZ	short GOTREOFIL
  4882                                          ;MOV     WORD PTR [RE_OUTSTR],09H ; Cause an error later
  4883 00001534 26C70650090900                  MOV     WORD [ES:RE_OUTSTR],09H
  4884 0000153B EB68                            JMP     SHORT PRESCANEND
  4885                                  GOTREOFIL:
  4886 0000153D 57                              PUSH    DI
  4887                                          ;MOV     DI,OFFSET RESGROUP:RE_OUTSTR
  4888 0000153E BF5009                          MOV     DI,RE_OUTSTR
  4889                                  SETREOUTSTR:                            ; Get the output redirection name
  4890 00001541 AC                              LODSB
  4891 00001542 3C0D                            CMP     AL,0DH
  4892 00001544 7444                            JZ	short GOTRESTR
  4893 00001546 E8E501                          CALL    DELIM
  4894 00001549 743F                            JZ	short GOTRESTR
  4895 0000154B 3A06DE2C                        CMP     AL,[SWITCHAR]
  4896 0000154F 7439                            JZ	short GOTRESTR
  4897 00001551 AA                              STOSB                           ; store it into resgroup
  4898 00001552 EBED                            JMP     SHORT SETREOUTSTR
  4899                                  
  4900                                  NOOUT:
  4901 00001554 3C3C                            CMP     AL,'<'
  4902 00001556 7516                            JNZ	short CHKPIPE
  4903 00001558 E8CB01                          CALL    SCANOFF
  4904 0000155B 3C0D                            CMP     AL,0DH
  4905 0000155D 7509                            JNZ	short GOTREIFIL
  4906                                          ;MOV     WORD PTR [RE_INSTR],09H ; Cause an error later
  4907 0000155F 26C70627090900                  MOV     WORD [ES:RE_INSTR],09H
  4908 00001566 EB3D                            JMP     SHORT PRESCANEND
  4909                                  GOTREIFIL:
  4910 00001568 57                              PUSH    DI
  4911                                          ;MOV     DI,OFFSET RESGROUP:RE_INSTR
  4912 00001569 BF2709                          MOV     DI,RE_INSTR
  4913 0000156C EBD3                            JMP     SHORT SETREOUTSTR       ; Get the input redirection name
  4914                                  
  4915                                  CHKPIPE:
  4916 0000156E 88C4                            MOV     AH,AL
  4917 00001570 80FC7C                          CMP     AH,'|' ; 7Ch
  4918 00001573 7523                            JNZ	short CONTPRESCAN
  4919                                          ;INC	[PIPEFLAG]
  4920 00001575 26FE067809                      INC	byte [ES:PIPEFLAG]
  4921 0000157A E8A901                          CALL    SCANOFF
  4922 0000157D 3C0D                            CMP     AL,0DH
  4923 0000157F 7404                            JZ	short PIPEERRSYNJ5
  4924 00001581 3C7C                            CMP     AL,'|'          	; Double '|'?
  4925 00001583 7513                            JNZ	short CONTPRESCAN
  4926                                  PIPEERRSYNJ5:
  4927 00001585 06                              PUSH    ES
  4928 00001586 1F                              POP     DS              	; DS->RESGROUP
  4929 00001587 E9EAF0                          JMP     PIPEERRSYN
  4930                                  
  4931                                  GOTRESTR:
  4932 0000158A 86E0                            XCHG    AH,AL
  4933                                          ;CMP     BYTE PTR ES:[DI-1],':'	; Trailing ':' OK on devices
  4934 0000158C 26807DFF3A              	CMP     BYTE [ES:DI-1],':'  ; 3Ah
  4935 00001591 7501                            JNZ	short NOTTRAILCOL
  4936 00001593 4F                              DEC     DI              	; Back up over trailing ':'
  4937                                  NOTTRAILCOL:
  4938 00001594 30C0                            XOR     AL,AL
  4939 00001596 AA                              STOSB                   	; NUL terminate the string
  4940 00001597 5F                              POP     DI              	; Remember the start
  4941                                  CONTPRESCAN:
  4942 00001598 8825                            MOV     [DI],AH         	; "delete" the redirection string
  4943 0000159A 47                              INC     DI
  4944 0000159B 80FC0D                          CMP     AH,0DH
  4945 0000159E 7405                            JZ      PRESCANEND
  4946 000015A0 FEC1                            INC     CL
  4947 000015A2 E964FF                          JMP     PRESCANLP
  4948                                  PRESCANEND:
  4949                                          ;CMP     [PIPEFLAG],0
  4950 000015A5 26803E780900                    CMP	byte [ES:PIPEFLAG],0
  4951 000015AB 7414                            JZ	short ISNOPIPE
  4952                                          ;MOV     DI,OFFSET RESGROUP:PIPESTR
  4953 000015AD BF7C09                          MOV     DI,PIPESTR
  4954                                          ;MOV     [PIPEPTR],DI
  4955 000015B0 26893E7A09                      MOV     [ES:PIPEPTR],DI
  4956                                  	;MOV     SI,OFFSET TRANGROUP:COMBUF+2
  4957 000015B5 BEC52B                  	MOV     SI,COMBUF+2
  4958 000015B8 E86B01                          CALL    SCANOFF
  4959                                  PIPESETLP:                      ; Transfer the pipe into the resident pipe buffer
  4960 000015BB AC                              LODSB
  4961 000015BC AA                              STOSB
  4962 000015BD 3C0D                            CMP     AL,0DH
  4963 000015BF 75FA                            JNZ	short PIPESETLP
  4964                                  ISNOPIPE:
  4965 000015C1 880EC42B                        MOV     [COMBUF+1],CL
  4966                                          ;CMP     [PIPEFLAG],0
  4967 000015C5 26803E780900            	CMP     byte [ES:PIPEFLAG],0
  4968 000015CB 0E                              PUSH    CS
  4969 000015CC 07                              POP     ES
  4970 000015CD C3                              RETN
  4971                                  
  4972                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  4973                                  
  4974                                  PATHCHRCMP:
  4975 000015CE 803EDE2C2F                      CMP     byte [SWITCHAR],'/'
  4976 000015D3 7404                            JZ	short NOSLASHT
  4977 000015D5 3C2F                            CMP     AL,'/'
  4978                                  	;retz
  4979 000015D7 7402                    	jz	short PATHCHRCMP_retn
  4980                                  NOSLASHT:
  4981 000015D9 3C5C                            CMP     AL,'\'
  4982                                  PATHCHRCMP_retn:
  4983 000015DB C3                              RETN
  4984                                  
  4985                                  PATHCRUNCH:
  4986                                  ; Drive taken from FCB
  4987                                  ; DI = Dirsave pointer
  4988                                  ;
  4989                                  ; Zero set if path dir, CHDIR to this dir, FCB filled with ?
  4990                                  ; NZ set if path/file, CHDIR to file, FCB has file (parsed fill ' ')
  4991                                  ;       [DESTTAIL] points to parse point
  4992                                  ; Carry set if no CHDIRs worked, FCB not altered.
  4993                                  ; DESTISDIR set non zero if PATHCHRs in path (via SETPATH)
  4994                                  
  4995                                          ;MOV     DL,DS:[FCB]
  4996 000015DC 8A165C00                        MOV     DL,[FCB]
  4997 000015E0 E83FFC                          CALL    SAVUDIR
  4998 000015E3 E8CA01                          CALL    SETPATH
  4999 000015E6 F606292E02                      TEST    byte [DESTINFO],2
  5000 000015EB 7516                            JNZ     short TRYPEEL 		; If ? or * cannot be pure dir
  5001 000015ED B43B                            MOV     AH,CHDIR
  5002 000015EF CD21                            INT     int_command
  5003 000015F1 7210                            JC	short TRYPEEL
  5004 000015F3 E805F0                          CALL    SETREST1
  5005 000015F6 B03F                            MOV     AL,"?"          	; *.* is default file spec if pure dir
  5006 000015F8 BF5D00                          MOV     DI,5DH
  5007 000015FB B90B00                          MOV     CX,11
  5008 000015FE F3AA                            REP     STOSB
  5009 00001600 30C0                            XOR     AL,AL           	; Set zero
  5010 00001602 C3                              RETN
  5011                                  
  5012                                  TRYPEEL:
  5013 00001603 8B361F2E                        MOV     SI,[PATHPOS]
  5014 00001607 4E                              DEC     SI              	; Point at NUL
  5015 00001608 8A44FF                          MOV     AL,[SI-1]
  5016                                  
  5017                                          ;IF      KANJI
  5018                                          ;CMP     [KPARSE],0
  5019                                          ;JNZ     DELSTRT	; Last char is second KANJI byte, might be '\'
  5020                                          ;ENDIF
  5021                                  
  5022 0000160B E8C0FF                          CALL    PATHCHRCMP
  5023 0000160E 7420                            JZ	short PEELFAIL		; Trailing '/'
  5024                                  
  5025                                          ;IF      KANJI
  5026                                  ;DELSTRT:
  5027                                          ;MOV     CX,SI
  5028                                          ;MOV     SI,DX
  5029                                          ;PUSH    DX
  5030                                  ;DELLOOP:
  5031                                          ;CMP     SI,CX
  5032                                          ;JZ      GOTDELE
  5033                                          ;LODSB
  5034                                          ;CALL    TESTKANJ
  5035                                          ;JZ      NOTKANJ8
  5036                                          ;INC     SI
  5037                                          ;JMP     DELLOOP
  5038                                  ;NOTKANJ8:
  5039                                          ;CALL    PATHCHRCMP
  5040                                          ;JNZ     DELLOOP
  5041                                          ;MOV     DX,SI
  5042                                          ;DEC     DX
  5043                                          ;JMP     DELLOOP
  5044                                  ;GOTDELE:
  5045                                          ;MOV     SI,DX
  5046                                          ;POP     DX
  5047                                          ;CMP     SI,DX
  5048                                  	;JZ      BADRET
  5049                                          ;MOV     CX,SI
  5050                                          ;MOV     SI,DX
  5051                                  ;DELLOOP2:			; Set value of KPARSE
  5052                                          ;CMP     SI,CX
  5053                                          ;JZ      KSET
  5054                                          ;MOV     [KPARSE],0
  5055                                          ;LODSB
  5056                                          ;CALL    TESTKANJ
  5057                                          ;JZ      DELLOOP2
  5058                                          ;INC     SI
  5059                                          ;INC     [KPARSE]
  5060                                          ;JMP     DELLOOP2
  5061                                  ;KSET:
  5062                                          ;ELSE
  5063                                  DELLOOP:
  5064 00001610 39D6                            CMP     SI,DX
  5065 00001612 7428                            JZ	short BADRET
  5066 00001614 8A04                            MOV     AL,[SI]
  5067 00001616 E8B5FF                          CALL    PATHCHRCMP
  5068 00001619 7403                            JZ	short TRYCD
  5069 0000161B 4E                              DEC     SI
  5070 0000161C EBF2                            JMP     SHORT DELLOOP
  5071                                          ;ENDIF
  5072                                  
  5073                                  TRYCD:
  5074 0000161E 807C012E                        CMP     BYTE [SI+1],'.'
  5075 00001622 740C                            JZ	short PEELFAIL		; If . or .., pure cd should have worked
  5076 00001624 8A44FF                          mov     al,[si-1]
  5077 00001627 3C3A                            CMP     al,DRVCHAR		; Special case dDRVCHAR,DIRCHARfile
  5078 00001629 7411                            JZ	short BADRET
  5079                                  
  5080                                          ;IF      KANJI
  5081                                          ;CMP     [KPARSE],0
  5082                                          ;JNZ     NOTDOUBLESL	; Last char is second KANJI byte, might be '\'
  5083                                          ;ENDIF
  5084                                  
  5085 0000162B E8A0FF                          CALL    PATHCHRCMP
  5086 0000162E 7502                            JNZ	short NOTDOUBLESL
  5087                                  PEELFAIL:
  5088 00001630 F9                              STC					; //
  5089 00001631 C3                              RETN
  5090                                  NOTDOUBLESL:
  5091 00001632 C60400                          MOV     BYTE [SI],0
  5092 00001635 B43B                            MOV     AH,CHDIR
  5093 00001637 CD21                            INT     int_command
  5094 00001639 7317                            JNC	short CDSUCC
  5095                                  PATHCRUNCH_retn:
  5096 0000163B C3                              RETN
  5097                                  
  5098                                  BADRET:
  5099 0000163C 8A04                            MOV     AL,[SI]
  5100 0000163E E88DFF                          CALL    PATHCHRCMP			; Special case 'DIRCHAR'file
  5101 00001641 F9                              STC
  5102                                          ;retnz
  5103 00001642 75F7                            jnz	short PATHCRUNCH_retn
  5104 00001644 30DB                    	XOR     BL,BL
  5105 00001646 865C01                          XCHG    BL,[SI+1]
  5106 00001649 B43B                            MOV     AH,CHDIR
  5107 0000164B CD21                            INT     int_command
  5108                                  	;retc
  5109 0000164D 72EC                    	jc	short PATHCRUNCH_retn
  5110 0000164F 885C01                          MOV     [SI+1],BL
  5111                                  CDSUCC:
  5112 00001652 E8A6EF                          CALL    SETREST1
  5113 00001655 46                              INC     SI				; Reset zero
  5114 00001656 8936272E                        MOV     [DESTTAIL],SI
  5115 0000165A BF5C00                          MOV     DI,FCB
  5116                                          ;MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8) OR 02H
  5117 0000165D B80229                          MOV     AX,(PARSE_FILE_DESCRIPTOR*256) | 02H ; Parse with default drive
  5118 00001660 CD21                    	INT     int_command
  5119 00001662 C3                              RETN
  5120                                  
  5121                                  DISPSIZE:
  5122                                          ;MOV     SI,WORD PTR[DIRBUF+29+7]
  5123 00001663 8B36F02D                        MOV     SI,[DIRBUF+29+7]
  5124                                  	;MOV     DI,WORD PTR[DIRBUF+31+7]
  5125 00001667 8B3EF22D                	MOV     DI,[DIRBUF+31+7]
  5126                                  
  5127                                  DISP32BITS:
  5128                                  ; Prints the 32-bit number DI:SI on the console in decimal. Uses a total
  5129                                  ; of 9 digit positions with leading blanks.
  5130 0000166B 31C0                            XOR     AX,AX
  5131 0000166D 89C3                            MOV     BX,AX
  5132 0000166F 89C5                            MOV     BP,AX
  5133 00001671 B92000                          MOV     CX,32
  5134                                  CONVLP:
  5135 00001674 D1E6                            SHL     SI,1
  5136 00001676 D1D7                            RCL     DI,1
  5137 00001678 95                              XCHG    AX,BP
  5138 00001679 E84F00                          CALL    CONVWRD
  5139 0000167C 95                              XCHG    AX,BP
  5140 0000167D 93                              XCHG    AX,BX
  5141 0000167E E84A00                          CALL    CONVWRD
  5142 00001681 93                              XCHG    AX,BX
  5143 00001682 1400                            ADC     AL,0
  5144 00001684 E2EE                            LOOP    CONVLP
  5145                                  
  5146                                  ; Conversion complete. Print 9-digit number.
  5147                                  
  5148                                          ;MOV     DI,OFFSET TRANGROUP:CHARBUF
  5149 00001686 BF002D                          MOV     DI,CHARBUF
  5150 00001689 B91018                          MOV     CX,1810H        ; Allow leading zero blanking for 8 digits
  5151 0000168C 92                              XCHG    DX,AX
  5152 0000168D E82700                          CALL    DIGIT
  5153 00001690 93                              XCHG    AX,BX
  5154 00001691 E80D00                          CALL    OUTWORD
  5155 00001694 95                              XCHG    AX,BP
  5156 00001695 E80900                          CALL    OUTWORD
  5157 00001698 31C0                            XOR     AX,AX
  5158 0000169A AA                              STOSB
  5159                                          ;MOV     DX,OFFSET TRANGROUP:CHARBUF
  5160 0000169B BA002D                          MOV     DX,CHARBUF
  5161 0000169E E98402                          JMP     ZPRINT
  5162                                  
  5163                                  OUTWORD:
  5164 000016A1 50                              PUSH    AX
  5165 000016A2 88E2                            MOV     DL,AH
  5166 000016A4 E80100                          CALL    OUTBYTE
  5167 000016A7 5A                              POP     DX
  5168                                  OUTBYTE:
  5169 000016A8 88D6                            MOV     DH,DL
  5170 000016AA D0EA                            SHR     DL,1
  5171 000016AC D0EA                            SHR     DL,1
  5172 000016AE D0EA                            SHR     DL,1
  5173 000016B0 D0EA                            SHR     DL,1
  5174 000016B2 E80200                          CALL    DIGIT
  5175 000016B5 88F2                            MOV     DL,DH
  5176                                  DIGIT:
  5177 000016B7 80E20F                          AND     DL,0FH
  5178 000016BA 7402                            JZ	short BLANKZER
  5179 000016BC B100                            MOV     CL,0
  5180                                  BLANKZER:
  5181 000016BE FECD                            DEC     CH
  5182 000016C0 20E9                            AND     CL,CH
  5183 000016C2 80CA30                          OR      DL,30H
  5184 000016C5 28CA                            SUB     DL,CL
  5185 000016C7 88D0                            MOV     AL,DL
  5186 000016C9 AA                              STOSB
  5187 000016CA C3                              RETN
  5188                                  
  5189                                  CONVWRD:
  5190 000016CB 10C0                            ADC     AL,AL
  5191 000016CD 27                              DAA
  5192 000016CE 86C4                            XCHG    AL,AH
  5193 000016D0 10C0                            ADC     AL,AL
  5194 000016D2 27                              DAA
  5195 000016D3 86C4                            XCHG    AL,AH
  5196 000016D5 C3                              RETN
  5197                                  
  5198                                  GETBATBYT:
  5199                                  ; Get one byte from the batch file and return it in AL. End-of-file
  5200                                  ; returns <CR> and ends batch mode. DS must be set to resident segment.
  5201                                  ; AH, CX, DX destroyed.
  5202                                  
  5203                                  ;ASSUME  DS:RESGROUP
  5204                                  
  5205 000016D6 8306360801                      ADD     WORD [BATLOC],1		; Add one to file location
  5206 000016DB 8316380800                      ADC     WORD [BATLOC+2],0
  5207 000016E0 53                              PUSH    BX
  5208                                          ;MOV     DX,OFFSET RESGROUP:BATBYT
  5209 000016E1 BA6708                          MOV     DX,BATBYT
  5210                                          ;MOV     BX,[BATHAND]
  5211                                          ;MOV     BX,[SS:BATHAND]
  5212 000016E4 2E8B1E432F                      MOV     BX,[CS:BATHAND] ; 30/04/2018
  5213 000016E9 B43F                            MOV     AH,READ
  5214 000016EB B90100                          MOV     CX,1
  5215 000016EE CD21                            INT     int_command		; Get one more byte from batch file
  5216 000016F0 5B                              POP     BX
  5217 000016F1 89C1                            MOV     CX,AX
  5218 000016F3 7209                            JC	short BATEOF
  5219 000016F5 E307                            JCXZ    BATEOF
  5220 000016F7 A06708                          MOV     AL,[BATBYT]
  5221 000016FA 3C1A                            CMP     AL,1AH
  5222                                          ;retnz
  5223 000016FC 7527                    	jnz	short GETBATBYT_retn
  5224                                  BATEOF:
  5225 000016FE 06                              PUSH    ES
  5226 000016FF 8E063408                        MOV     ES,[BATCH]		; Turn off batch
  5227 00001703 B449                            MOV     AH,DEALLOC
  5228 00001705 CD21                            INT     int_command             ; free up the batch piece
  5229 00001707 07                              POP     ES
  5230 00001708 C70634080000                    MOV     word [BATCH],0		; AFTER DEALLOC in case of ^C
  5231 0000170E E846F6                          CALL    BATCLOSE
  5232 00001711 B00D                            MOV     AL,0DH			; If end-of-file, then end of line
  5233 00001713 833E7408F0                      CMP     word [SINGLECOM],0FFF0H	; See if we need to set SINGLECOM
  5234 00001718 7506                            JNZ     NOSETSING2
  5235 0000171A C7067408FFFF                    MOV     word [SINGLECOM],-1	; Cause termination
  5236                                  NOSETSING2:
  5237 00001720 C6066F0801                      MOV     byte [ECHOFLAG],1
  5238                                  GETBATBYT_retn:
  5239 00001725 C3                              RETN
  5240                                  
  5241                                  ;ASSUME  DS:TRANGROUP
  5242                                  
  5243                                  SCANOFF:
  5244 00001726 AC                              LODSB
  5245 00001727 E80400                          CALL    DELIM
  5246 0000172A 74FA                            JZ 	short SCANOFF
  5247 0000172C 4E                              DEC     SI			; Point to first non-delimiter
  5248 0000172D C3                              RETN
  5249                                  
  5250                                  DELIM:
  5251 0000172E 3C20                            CMP     AL," "
  5252                                          ;retz
  5253 00001730 740E                    	jz	short DELIM_retn
  5254 00001732 3C3D                            CMP     AL,"="
  5255                                          ;retz
  5256 00001734 740A                    	jz	short DELIM_retn
  5257 00001736 3C2C                            CMP     AL,","
  5258                                          ;retz
  5259 00001738 7406                    	jz	short DELIM_retn
  5260 0000173A 3C3B                            CMP     AL,";"
  5261                                          ;retz
  5262 0000173C 7402                    	jz	short DELIM_retn
  5263 0000173E 3C09                            CMP     AL,9			; Check for TAB character
  5264                                  DELIM_retn:
  5265 00001740 C3                              RETN
  5266                                  
  5267                                  PRINT_PROMPT:
  5268 00001741 1E                              PUSH    DS
  5269 00001742 0E                              PUSH    CS
  5270 00001743 1F                              POP     DS              	; MAKE SURE DS IS IN TRANGROUP
  5271                                  
  5272 00001744 06                              PUSH    ES
  5273 00001745 E8C0F0                          CALL    FIND_PROMPT     	; LOOK FOR PROMPT STRING
  5274 00001748 7206                            JC	short PP0		; CAN'T FIND ONE
  5275 0000174A 26803D00                        CMP     BYTE [ES:DI],0
  5276 0000174E 750A                            JNZ	short PP1
  5277                                  PP0:
  5278 00001750 E8A1F1                          CALL    PRINT_DRIVE     	; USE DEFAULT PROMPT
  5279 00001753 B03E                            MOV     AL,SYM  	; 3Eh	; '>'
  5280 00001755 E89501                          CALL    OUT
  5281 00001758 EB38                            JMP     SHORT PP5
  5282                                  
  5283                                  PP1:
  5284 0000175A 268A05                          MOV     AL,[ES:DI]		; GET A CHAR
  5285 0000175D 47                              INC     DI
  5286 0000175E 08C0                            OR      AL,AL
  5287 00001760 7430                            JZ	short PP5		; NUL TERMINATED
  5288 00001762 3C24                            CMP     AL,"$"          	; META CHARACTER?
  5289 00001764 7405                            JZ	short PP2		; NOPE
  5290                                  PPP1:
  5291 00001766 E88401                          CALL    OUT
  5292 00001769 EBEF                            JMP	short PP1
  5293                                  
  5294                                  PP2:
  5295 0000176B 268A05                          MOV     AL,[ES:DI]
  5296 0000176E 47                              INC     DI
  5297                                          ;MOV     BX,OFFSET TRANGROUP:PROMPT_TABLE-3
  5298 0000176F BB[FB28]                        MOV     BX,PROMPT_TABLE-3
  5299 00001772 08C0                            OR      AL,AL
  5300 00001774 741C                            JZ	short PP5
  5301                                  
  5302                                  PP3:
  5303 00001776 83C303                          ADD     BX,3
  5304 00001779 E815F1                          CALL    UPCONV
  5305 0000177C 3A07                            CMP     AL,[BX]
  5306 0000177E 7407                            JZ	short PP4
  5307 00001780 803F00                          CMP     BYTE [BX],0
  5308 00001783 75F1                            JNZ	short PP3
  5309 00001785 EBD3                            JMP	short PP1
  5310                                  
  5311                                  PP4:
  5312 00001787 06                              PUSH    ES
  5313 00001788 57                              PUSH    DI
  5314 00001789 0E                              PUSH    CS
  5315 0000178A 07                              POP     ES
  5316 0000178B FF5701                          CALL    word [BX+1]
  5317 0000178E 5F                              POP     DI
  5318 0000178F 07                              POP     ES
  5319 00001790 EBC8                            JMP	short PP1
  5320                                  
  5321                                  PP5:
  5322 00001792 07                              POP     ES              	; RESTORE SEGMENTS
  5323 00001793 1F                              POP     DS
  5324 00001794 C3                              RETN
  5325                                  
  5326                                  PRINT_BACK:
  5327                                          ;MOV     DX,OFFSET TRANGROUP:DBACK
  5328 00001795 BA[F528]                        MOV     DX,DBACK
  5329 00001798 E98A01                          JMP     ZPRINT
  5330                                  
  5331                                  PRINT_EQ:
  5332 0000179B B03D                            MOV     AL,"="
  5333 0000179D EB0E                            JMP     SHORT OUTV
  5334                                  PRINT_ESC:
  5335 0000179F B01B                            MOV     AL,1BH
  5336 000017A1 EB0A                            JMP     SHORT OUTV
  5337                                  PRINT_G:
  5338 000017A3 B03E                            MOV     AL,">"
  5339 000017A5 EB06                            JMP     SHORT OUTV
  5340                                  PRINT_L:
  5341 000017A7 B03C                            MOV     AL,"<"
  5342 000017A9 EB02                            JMP     SHORT OUTV
  5343                                  PRINT_B:
  5344 000017AB B07C                            MOV     AL,"|"
  5345                                  OUTV:
  5346 000017AD E93D01                          JMP     OUT
  5347                                  
  5348                                  SETPATH:
  5349                                  ; Get an ASCIZ argument from the unformatted parms
  5350                                  ; DESTISDIR set if pathchars in string
  5351                                  ; DESTINFO  set if ? or * in string
  5352 000017B0 BE8000                          MOV     SI,80H
  5353 000017B3 AC                              LODSB
  5354 000017B4 30E4                            XOR     AH,AH
  5355 000017B6 A31D2E                          MOV     [PATHCNT],AX
  5356 000017B9 89361F2E                        MOV     [PATHPOS],SI
  5357                                  GETPATH:
  5358 000017BD C606292E00                      MOV     byte [DESTINFO],0
  5359 000017C2 C606252E00                      MOV     byte [DESTISDIR],0
  5360 000017C7 8B361F2E                        MOV     SI,[PATHPOS]
  5361 000017CB 8B0E1D2E                        MOV     CX,[PATHCNT]
  5362 000017CF 89F2                            MOV     DX,SI
  5363 000017D1 E33B                            JCXZ    PATHDONE
  5364 000017D3 51                              PUSH    CX
  5365 000017D4 56                              PUSH    SI
  5366 000017D5 E842EB                          CALL    SWITCH
  5367 000017D8 A3212E                          MOV     [PATHSW],AX
  5368 000017DB 5B                              POP     BX
  5369 000017DC 29F3                            SUB     BX,SI
  5370 000017DE 59                              POP     CX
  5371 000017DF 01D9                            ADD     CX,BX
  5372 000017E1 89F2                            MOV     DX,SI
  5373                                  SKIPPATH:
  5374                                  
  5375                                          ;IF	KANJI
  5376                                          ;MOV	[KPARSE],0
  5377                                  ;SKIPPATH2:
  5378                                          ;ENDIF
  5379                                  
  5380 000017E3 E329                            JCXZ	PATHDONE
  5381 000017E5 49                              DEC     CX
  5382 000017E6 AC                              LODSB
  5383                                  
  5384                                          ;IF	KANJI
  5385                                          ;CALL	TESTKANJ
  5386                                          ;JZ	TESTPPSEP
  5387                                          ;DEC	CX
  5388                                          ;INC	SI
  5389                                          ;INC	[KPARSE]
  5390                                          ;JMP	SKIPPATH2
  5391                                  ;TESTPPSEP:
  5392                                          ;ENDIF
  5393                                  
  5394 000017E7 E8E4FD                          CALL    PATHCHRCMP
  5395 000017EA 7504                            JNZ	short TESTPMETA
  5396 000017EC FE06252E                        INC	byte [DESTISDIR]
  5397                                  TESTPMETA:
  5398 000017F0 3C3F                            CMP     AL,'?'
  5399 000017F2 7505                            JNZ	short TESTPSTAR
  5400 000017F4 800E292E02                      OR      byte [DESTINFO],2
  5401                                  TESTPSTAR:
  5402 000017F9 3C2A                            CMP     AL,'*'
  5403 000017FB 7505                            JNZ	short TESTPDELIM
  5404 000017FD 800E292E02                      OR      byte [DESTINFO],2
  5405                                  TESTPDELIM:
  5406 00001802 E829FF                          CALL    DELIM
  5407 00001805 7406                            JZ	short PATHDONEDEC
  5408 00001807 3A06DE2C                        CMP     AL,[SWITCHAR]
  5409 0000180B 75D6                            JNZ	short SKIPPATH
  5410                                  PATHDONEDEC:
  5411 0000180D 4E                              DEC     SI
  5412                                  PATHDONE:
  5413 0000180E 30C0                            XOR     AL,AL
  5414 00001810 8604                            XCHG    AL,[SI]
  5415 00001812 46                              INC     SI
  5416 00001813 3C0D                            CMP     AL,0DH
  5417 00001815 7502                            JNZ	short NOPSTORE
  5418 00001817 8804                            MOV     [SI],AL			;Don't loose the CR
  5419                                  NOPSTORE:
  5420 00001819 89361F2E                        MOV     [PATHPOS],SI
  5421 0000181D 890E1D2E                        MOV     [PATHCNT],CX
  5422 00001821 C3                              RETN
  5423                                  
  5424                                  PGETARG:
  5425 00001822 BE8000                          MOV     SI,80H
  5426 00001825 AC                              LODSB
  5427 00001826 08C0                            OR      AL,AL
  5428                                          ;retz
  5429 00001828 7405                    	jz	short PGETARG_retn
  5430 0000182A E80300                          CALL    PSCANOFF
  5431 0000182D 3C0D                            CMP     AL,13
  5432                                  PGETARG_retn:
  5433 0000182F C3                              RETN
  5434                                  
  5435                                  PSCANOFF:
  5436 00001830 AC                              LODSB
  5437 00001831 E8FAFE                          CALL    DELIM
  5438 00001834 7504                            JNZ	short PSCANOFFD
  5439 00001836 3C3B                            CMP     AL,';'
  5440 00001838 75F6                            JNZ	short PSCANOFF		; ';' is not a delimiter
  5441                                  PSCANOFFD:
  5442 0000183A 4E                              DEC     SI			; Point to first non-delimiter
  5443 0000183B C3                              RETN
  5444                                  
  5445                                  PATH:
  5446 0000183C E8C4EF                          CALL    FIND_PATH
  5447 0000183F E8E0FF                          CALL    PGETARG         	; Pre scan for arguments
  5448 00001842 742A                            JZ	short DISPPATH		; Print the current path
  5449 00001844 E89AEF                          CALL    DELETE_PATH     	; DELETE ANY OFFENDING NAME
  5450 00001847 E826F0                          CALL    SCAN_DOUBLE_NULL
  5451 0000184A E804F0                          CALL    MOVE_NAME       	; MOVE IN PATH=
  5452 0000184D E8D2FF                          CALL    PGETARG
  5453 00001850 3C3B                            CMP     AL,';'          	; NUL path argument?
  5454 00001852 7416                            JZ	short GOTPATHS
  5455                                  PATHSLP:                        	; Get the user specified path
  5456 00001854 AC                              LODSB
  5457 00001855 3C0D                            CMP     AL,0DH
  5458 00001857 7411                            JZ	short GOTPATHS
  5459                                  
  5460                                          ;IF      KANJI
  5461                                          ;CALL    TESTKANJ
  5462                                          ;JZ      NOTKANJ2
  5463                                          ;CALL    STORE_CHAR
  5464                                          ;LODSB
  5465                                          ;CALL    STORE_CHAR
  5466                                          ;JMP     SHORT PATHSLP
  5467                                  ;NOTKANJ2:
  5468                                          ;ENDIF
  5469                                  
  5470 00001859 E835F0                          CALL    UPCONV
  5471 0000185C 3C3B                            CMP     AL,';'          	; ';' not a delimiter on PATH
  5472 0000185E 7405                            JZ	short NOTDELIM
  5473 00001860 E8CBFE                          CALL    DELIM
  5474 00001863 7405                            JZ	short GOTPATHS
  5475                                  NOTDELIM:
  5476 00001865 E839F0                          CALL    STORE_CHAR
  5477 00001868 EBEA                            JMP     SHORT PATHSLP
  5478                                  
  5479                                  GOTPATHS:
  5480 0000186A 31C0                            XOR     AX,AX
  5481 0000186C AB                              STOSW
  5482 0000186D C3                              RETN
  5483                                  
  5484                                  DISPPATH:
  5485 0000186E E80400                          CALL    PRINT_PATH
  5486 00001871 E84EF7                          CALL    CRLF2
  5487 00001874 C3                              RETN
  5488                                  
  5489                                  PRINT_PATH:
  5490 00001875 26803D00                        CMP     BYTE [ES:DI],0
  5491 00001879 7508                            JNZ	short PATH1
  5492                                  PATH0:
  5493                                          ;MOV     DX,OFFSET TRANGROUP:NULPATH
  5494 0000187B BA[AC27]                        MOV     DX,NULPATH
  5495 0000187E 0E                              PUSH    CS
  5496 0000187F 1F                              POP     DS
  5497 00001880 E99D00                          JMP     PRINT
  5498                                  PATH1:
  5499 00001883 06                              PUSH    ES
  5500 00001884 1F                              POP     DS
  5501 00001885 83EF05                          SUB     DI,5
  5502 00001888 89FA                            MOV     DX,DI
  5503                                  ;ASSUME  DS:RESGROUP
  5504 0000188A E8FCEF                          CALL    SCASB2                  ; LOOK FOR NUL
  5505 0000188D 81F9FF00                        CMP     CX,0FFH
  5506 00001891 74E8                            JZ	short PATH0
  5507 00001893 E98F00                          JMP     ZPRINT
  5508                                  
  5509                                  FCB_TO_ASCZ:                            ; Convert DS:SI to ASCIZ ES:DI
  5510 00001896 B90800                          MOV     CX,8
  5511                                  MAINNAME:
  5512 00001899 AC                              LODSB
  5513 0000189A 3C20                            CMP     AL,' '
  5514 0000189C 7401                            JZ	short SKIPSPC
  5515 0000189E AA                              STOSB
  5516                                  SKIPSPC:
  5517 0000189F E2F8                            LOOP    MAINNAME
  5518 000018A1 AC                              LODSB
  5519 000018A2 3C20                            CMP     AL,' '
  5520 000018A4 7412                            JZ	short GOTNAME
  5521 000018A6 88C4                            MOV     AH,AL
  5522 000018A8 B02E                            MOV     AL,'.'
  5523 000018AA AA                              STOSB
  5524 000018AB 86C4                            XCHG    AL,AH
  5525 000018AD AA                              STOSB
  5526 000018AE B102                            MOV     CL,2
  5527                                  EXTNAME:
  5528 000018B0 AC                              LODSB
  5529 000018B1 3C20                            CMP     AL,' '
  5530 000018B3 7403                            JZ	short GOTNAME
  5531 000018B5 AA                              STOSB
  5532 000018B6 E2F8                            LOOP    EXTNAME
  5533                                  
  5534                                  GOTNAME:
  5535 000018B8 30C0                            XOR     AL,AL
  5536 000018BA AA                              STOSB
  5537                                  FCB_TO_ASCZ_retn:
  5538 000018BB C3                              RETN
  5539                                  
  5540                                  GETNUM:
  5541 000018BC E81000                          CALL    INDIG
  5542                                  	;retc
  5543                                  	;jc	short FCB_TO_ASCZ_retn
  5544 000018BF 720D                    	jc	short GETNUM_retn
  5545 000018C1 88C4                            MOV     AH,AL           	; Save first digit
  5546 000018C3 E80900                          CALL    INDIG           	; Another digit?
  5547 000018C6 7204                            JC      short OKRET
  5548 000018C8 D50A                            AAD                     	; Convert unpacked BCD to decimal
  5549 000018CA 88C4                            MOV     AH,AL
  5550                                  OKRET:
  5551 000018CC 0C01                            OR      AL,1
  5552                                  GETNUM_retn:
  5553 000018CE C3                              RETN
  5554                                  
  5555                                  INDIG:
  5556 000018CF 8A04                            MOV     AL,[SI]
  5557 000018D1 2C30                            SUB     AL,"0"
  5558                                          ;retc
  5559 000018D3 72F9                    	jc	short GETNUM_retn
  5560 000018D5 3C0A                            CMP     AL,10
  5561 000018D7 F5                              CMC
  5562                                          ;retc
  5563 000018D8 72F4                    	jc	short GETNUM_retn
  5564 000018DA 46                              INC     SI
  5565 000018DB C3                              RETN
  5566                                  
  5567                                  OUT2:   ; Output binary number as two ASCII digits
  5568 000018DC D40A                            AAM                     	; Convert binary to unpacked BCD
  5569 000018DE 86C4                            XCHG    AL,AH
  5570 000018E0 0D3030                          OR      AX,3030H        	; Add "0" bias to both digits
  5571 000018E3 3C30                            CMP     AL,"0"          	; Is MSD zero?
  5572 000018E5 7502                            JNZ	short NOSUP
  5573 000018E7 28F8                            SUB     AL,BH           	; Suppress leading zero if enabled
  5574                                  NOSUP:
  5575 000018E9 B700                            MOV     BH,0            	; Disable zero suppression
  5576 000018EB AB                              STOSW
  5577 000018EC C3                              RETN
  5578                                  
  5579                                  OUT:
  5580                                  ; Print char in AL without affecting registers
  5581 000018ED 92                              XCHG    AX,DX
  5582 000018EE 50                              PUSH    AX
  5583 000018EF E80300                          CALL    OUT_CHAR
  5584 000018F2 58                              POP     AX
  5585 000018F3 92                              XCHG    AX,DX
  5586 000018F4 C3                              RETN
  5587                                  
  5588                                  OUT_CHAR:
  5589 000018F5 1E                              PUSH    DS
  5590 000018F6 52                              PUSH    DX
  5591 000018F7 51                              PUSH    CX
  5592 000018F8 53                              PUSH    BX
  5593 000018F9 50                              PUSH    AX
  5594 000018FA 0E                              PUSH    CS
  5595 000018FB 1F                              POP     DS
  5596                                          ;MOV     BX,OFFSET TRANGROUP:CHARBUF
  5597 000018FC BB002D                          MOV     BX,CHARBUF
  5598 000018FF 8817                            MOV     [BX],DL
  5599 00001901 89DA                            MOV     DX,BX
  5600 00001903 BB0100                          MOV     BX,1
  5601 00001906 89D9                            MOV     CX,BX
  5602 00001908 B440                            MOV     AH,WRITE
  5603 0000190A CD21                            INT     int_command
  5604 0000190C 58                              POP     AX
  5605 0000190D 5B                              POP     BX
  5606 0000190E 59                              POP     CX
  5607 0000190F 5A                              POP     DX
  5608 00001910 1F                              POP     DS
  5609 00001911 C3                              RETN
  5610                                  
  5611                                  
  5612                                  ERROR_PRINT:
  5613 00001912 50                              PUSH    AX
  5614 00001913 53                              PUSH    BX
  5615 00001914 B024                            MOV     AL,"$"
  5616 00001916 BB0200                          MOV     BX,2            	;STD ERROR
  5617 00001919 EB11                            JMP     SHORT STRING_OUT
  5618                                  
  5619                                  CRPRINT:
  5620 0000191B 50                              PUSH    AX
  5621 0000191C B00D                            MOV     AL,13
  5622 0000191E EB08                            JMP     SHORT _Z$PRINT
  5623                                  PRINT:                          	;$ TERMINATED STRING
  5624 00001920 50                              PUSH    AX
  5625 00001921 B024                            MOV     AL,"$"
  5626 00001923 EB03                            JMP     SHORT _Z$PRINT
  5627                                  ZPRINT:
  5628 00001925 50                              PUSH    AX
  5629 00001926 31C0                            XOR     AX,AX           	;NUL TERMINATED STRING
  5630                                  _Z$PRINT:
  5631 00001928 53                              PUSH    BX
  5632 00001929 BB0100                          MOV     BX,1            	;STD CON OUT
  5633                                  ;
  5634                                  ; output string terminated by AL to handle BX, DS:DX points to string
  5635                                  ;
  5636                                  STRING_OUT:
  5637 0000192C 51                              PUSH    CX
  5638 0000192D 57                              PUSH    DI
  5639 0000192E 89D7                            MOV     DI,DX
  5640 00001930 B9FFFF                          MOV     CX,-1
  5641 00001933 06                              PUSH    ES
  5642 00001934 1E                              PUSH    DS
  5643 00001935 07                              POP     ES
  5644 00001936 F2AE                            REPNZ   SCASB           	; LOOK FOR TERMINATOR
  5645 00001938 07                              POP     ES
  5646 00001939 F7D9                            NEG     CX
  5647 0000193B 49                              DEC     CX
  5648 0000193C 49                              DEC     CX
  5649                                  ;
  5650                                  ; WRITE CHARS AT DS:DX TO HANDLE IN BX, COUNT IN CX
  5651                                  ;
  5652 0000193D B440                            MOV     AH,WRITE
  5653 0000193F CD21                            INT     int_command
  5654 00001941 7209                            JC	short ERROR_OUTPUT
  5655 00001943 39C8                            CMP     AX,CX
  5656 00001945 7505                            JNZ	short ERROR_OUTPUT
  5657 00001947 5F                              POP     DI
  5658 00001948 59                              POP     CX
  5659 00001949 5B                              POP     BX
  5660 0000194A 58                              POP     AX
  5661 0000194B C3                              RETN
  5662                                  
  5663                                  ERROR_OUTPUT:
  5664 0000194C 0E                              PUSH    CS
  5665 0000194D 1F                              POP     DS
  5666                                  ;ASSUME  DS:TRANGROUP
  5667 0000194E 8E06DA2C                        MOV     ES,[RESSEG]
  5668                                  ;ASSUME  ES:RESGROUP
  5669                                          ;MOV     DX,OFFSET TRANGROUP:NOSPACE
  5670 00001952 BA[3825]                        MOV     DX,NOSPACE
  5671                                          ;CMP     [PIPEFLAG],0
  5672 00001955 26803E780900                    CMP	byte [ES:PIPEFLAG],0
  5673 0000195B 7409                            JZ	short GO_TO_ERROR
  5674                                          ;MOV     [PIPEFLAG],0
  5675 0000195D 26C606780900                    MOV     byte [ES:PIPEFLAG],0
  5676                                          ;MOV     DX,OFFSET TRANGROUP:PIPEEMES
  5677 00001963 BA[2A28]                        MOV     DX,PIPEEMES
  5678                                  GO_TO_ERROR:
  5679 00001966 E97EEC                          JMP     CERROR
  5680                                  
  5681                                  ;TRANCODE   ENDS
  5682                                  ;           END
  5683                                  
  5684                                  ;=============================================================================
  5685                                  ; TUCODE.ASM
  5686                                  ;=============================================================================
  5687                                  
  5688                                  ;TITLE   COMMAND Language midifiable Code Transient
  5689                                  
  5690                                  ;TRANCODE	SEGMENT PUBLIC BYTE
  5691                                  
  5692                                  ;ASSUME  CS:TRANGROUP,DS:TRANGROUP,ES:TRANGROUP,SS:NOTHING
  5693                                  
  5694                                  ; ARE YOU SURE prompt when deleting *.*
  5695                                  
  5696                                  NOTEST2:
  5697 00001969 B90B00                          MOV     CX,11
  5698 0000196C BE5D00                          MOV     SI,FCB+1
  5699                                  AMBSPEC:
  5700 0000196F AC                              LODSB
  5701 00001970 3C3F                            CMP     AL,"?"
  5702 00001972 7502                            JNZ	short ALLFIL
  5703 00001974 E2F9                            LOOP    AMBSPEC
  5704                                  ALLFIL:
  5705 00001976 83F900                          CMP     CX,0
  5706 00001979 752B                            JNZ	short NOPRMPT
  5707                                  ASKAGN:
  5708                                          ;MOV	DX,OFFSET TRANGROUP:SUREMES ; "Are you sure (Y/N)?"
  5709 0000197B BA[C726]                        MOV	DX,SUREMES
  5710 0000197E E89FFF                          CALL    PRINT
  5711 00001981 BE8000                          MOV     SI,80H
  5712 00001984 89F2                            MOV     DX,SI
  5713 00001986 C7047800                        MOV     WORD [SI],120		; zero length
  5714                                          ;MOV	AX,(STD_CON_INPUT_FLUSH SHL 8) OR STD_CON_STRING_INPUT
  5715 0000198A B80A0C                          MOV	AX,(STD_CON_INPUT_FLUSH*256) | STD_CON_STRING_INPUT
  5716 0000198D CD21                            INT     int_command
  5717 0000198F AD                              LODSW
  5718 00001990 08E4                            OR      AH,AH
  5719 00001992 74E7                            JZ	short ASKAGN
  5720 00001994 E88FFD                          CALL    SCANOFF
  5721 00001997 0C20                            OR      AL,20H                  ; Convert to lower case
  5722 00001999 3C6E                            CMP     AL,'n'
  5723 0000199B 741C                            JZ	short RETERA
  5724 0000199D 3C79                            CMP     AL,'y'
  5725 0000199F 9C                              PUSHF
  5726 000019A0 E81FF6                          CALL    CRLF2
  5727 000019A3 9D                              POPF
  5728 000019A4 75D5                            JNZ	short ASKAGN
  5729                                  NOPRMPT:
  5730 000019A6 B413                            MOV     AH,FCB_DELETE
  5731 000019A8 BA5C00                          MOV     DX,FCB
  5732 000019AB CD21                            INT     int_command
  5733 000019AD 50                              PUSH    AX
  5734 000019AE E8EFF6                          CALL    RESTUDIR
  5735 000019B1 58                              POP     AX
  5736                                          ;MOV     DX,OFFSET TRANGROUP:NOTFND
  5737 000019B2 BA[2725]                        MOV     DX,NOTFND
  5738 000019B5 FEC0                            INC     AL
  5739 000019B7 7437                            JZ	short CERRORJ
  5740                                  RETERA:
  5741 000019B9 C3                              RET
  5742                                  
  5743                                  ; ECHO, BREAK, and VERIFY commands. Check for "ON" and "OFF"
  5744                                  
  5745                                  ECHO:
  5746                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  5747 000019BA E89B00                          CALL    ON_OFF
  5748 000019BD 7212                            JC	short DOEMES
  5749 000019BF 8E1EDA2C                        MOV     DS,[RESSEG]
  5750                                  ;ASSUME  DS:RESGROUP
  5751 000019C3 7506                            JNZ	short ECH_OFF
  5752 000019C5 C6066F0801                      MOV	byte [ECHOFLAG],1
  5753 000019CA C3                              RET
  5754                                  ECH_OFF:
  5755 000019CB C6066F0800                      MOV     byte [ECHOFLAG],0
  5756 000019D0 C3                              RETN
  5757                                  
  5758                                  ;ASSUME  DS:TRANGROUP
  5759                                  DOEMES:
  5760                                          ;MOV     AL,BYTE PTR DS:[80H]
  5761 000019D1 A08000                          MOV     AL,[80H]
  5762 000019D4 3C02                            CMP     AL,2
  5763 000019D6 7209                            JB	short PECHO		; Gota have at least 2 characters
  5764 000019D8 BA8200                          MOV     DX,82H                  ; Skip one char after "ECHO"
  5765 000019DB E83DFF                          CALL    CRPRINT
  5766 000019DE E9E1F5                          JMP     CRLF2
  5767                                  
  5768                                  PECHO:
  5769 000019E1 8E1EDA2C                        MOV     DS,[RESSEG]
  5770                                  ;ASSUME  DS:RESGROUP
  5771 000019E5 8A1E6F08                        MOV     BL,[ECHOFLAG]
  5772 000019E9 0E                              PUSH    CS
  5773 000019EA 1F                              POP     DS
  5774                                  ;ASSUME  DS:TRANGROUP
  5775                                          ;MOV     DX,OFFSET TRANGROUP:ECHOMES
  5776 000019EB BA[9728]                        MOV     DX,ECHOMES
  5777 000019EE EB36                            JMP     SHORT PYN
  5778                                  
  5779                                  CERRORJ:
  5780 000019F0 E9F4EB                          JMP     CERROR
  5781                                  
  5782                                  ; is rest of line blank?
  5783                                  IsBlank:
  5784 000019F3 BE8100                          MOV     SI,81h                  ; point at text spot
  5785 000019F6 E82DFD                          CALL    SCANOFF                 ; skip separators
  5786 000019F9 81EE8100                        SUB     SI,81h                  ; number of characters advanced
  5787 000019FD 89F1                            MOV     CX,SI                   ; put count in byte addressable spot
  5788                                  	;CMP	CL,DS:[80h]             ; compare with count
  5789 000019FF 3A0E8000                	CMP     CL,[80h]
  5790 00001A03 C3                              RETN				; bye!
  5791                                  
  5792                                  ;The BREAK command
  5793                                  CNTRLC:
  5794 00001A04 E85100                          CALL    ON_OFF
  5795                                          ;MOV     AX,(SET_CTRL_C_TRAPPING SHL 8) OR 1
  5796 00001A07 B80133                          MOV     AX,(SET_CTRL_C_TRAPPING*256) | 1
  5797 00001A0A 720C                            JC	short PCNTRLC
  5798 00001A0C 7505                            JNZ	short CNTRLC_OFF
  5799 00001A0E B201                            MOV     DL,1
  5800 00001A10 CD21                            INT     int_command             ; Set ^C
  5801 00001A12 C3                              RETN
  5802                                  CNTRLC_OFF:
  5803 00001A13 30D2                            XOR     DL,DL
  5804 00001A15 CD21                            INT     int_command             ; Turn off ^C check
  5805 00001A17 C3                              RETN
  5806                                  
  5807                                  PCNTRLC:
  5808 00001A18 E8D8FF                          CALL    IsBlank                 ; rest of line blank?
  5809 00001A1B 75D3                            JNZ	short CERRORJ		; no, oops!
  5810 00001A1D 30C0                            XOR     AL,AL
  5811 00001A1F CD21                            INT     int_command
  5812 00001A21 88D3                            MOV     BL,DL
  5813                                  	;MOV	DX,OFFSET TRANGROUP:CTRLCMES
  5814 00001A23 BA[8228]                	MOV	DX,CTRLCMES
  5815                                  PYN:
  5816 00001A26 E8F7FE                          CALL    PRINT
  5817                                          ;MOV	DX,OFFSET TRANGROUP:ONMES
  5818 00001A29 BA[7D28]                	MOV     DX,ONMES
  5819 00001A2C 08DB                            OR      BL,BL
  5820 00001A2E 7503                            JNZ	short PRINTVAL
  5821                                          ;MOV	DX,OFFSET TRANGROUP:OFFMES
  5822 00001A30 BA[7728]                        MOV	DX,OFFMES
  5823                                  PRINTVAL:
  5824 00001A33 E9EAFE                          JMP     PRINT
  5825                                  
  5826                                  VERIFY:
  5827 00001A36 E81F00                          CALL    ON_OFF
  5828                                          ;MOV	AX,(SET_VERIFY_ON_WRITE SHL 8) OR 1
  5829 00001A39 B8012E                          MOV	AX,(SET_VERIFY_ON_WRITE*256) | 1
  5830 00001A3C 720A                            JC	short PVERIFY
  5831 00001A3E 7503                            JNZ	short VER_OFF
  5832 00001A40 CD21                            INT     int_command             ; Set verify
  5833 00001A42 C3                              RETN
  5834                                  VER_OFF:
  5835 00001A43 FEC8                            DEC     AL
  5836 00001A45 CD21                            INT     int_command             ; Turn off verify after write
  5837 00001A47 C3                              RETN
  5838                                  
  5839                                  PVERIFY:
  5840 00001A48 E8A8FF                          CALL    IsBlank                 ; is rest of line blank?
  5841 00001A4B 75A3                            JNZ	short CERRORJ		; nope...
  5842 00001A4D B454                            MOV     AH,GET_VERIFY_ON_WRITE
  5843 00001A4F CD21                            INT     int_command
  5844 00001A51 88C3                            MOV     BL,AL
  5845                                          ;MOV     DX,OFFSET TRANGROUP:VERIMES
  5846 00001A53 BA[8C28]                        MOV     DX,VERIMES
  5847 00001A56 EBCE                            JMP	short PYN
  5848                                  
  5849                                  ON_OFF:
  5850 00001A58 BE5D00                          MOV     SI,FCB+1
  5851 00001A5B AC                              LODSB
  5852 00001A5C 0C20                            OR      AL,20H
  5853 00001A5E 3C6F                            CMP     AL,'o'
  5854 00001A60 751B                            JNZ	short BADONF
  5855 00001A62 AD                              LODSW
  5856 00001A63 0D2020                          OR      AX,2020H                ; Convert to lower case
  5857 00001A66 3C6E                            CMP     AL,'n'
  5858 00001A68 7506                            JNZ	short OFFCHK
  5859 00001A6A 80FC20                          CMP     AH,' '                  ; ' ' ORed with 20H is still ' '
  5860 00001A6D 750E                            JNZ	short BADONF
  5861 00001A6F C3                              RETN                             ; Carry clear from CMP
  5862                                  OFFCHK:
  5863 00001A70 3D6666                          CMP     AX,6666H                ; 'ff'
  5864 00001A73 7508                            JNZ	short BADONF
  5865 00001A75 AC                              LODSB
  5866 00001A76 3C20                            CMP     AL,' '
  5867 00001A78 7503                            JNZ	short BADONF
  5868 00001A7A FEC0                            INC     AL                      ; Reset zero Carry clear from CMP
  5869 00001A7C C3                              RETN
  5870                                  BADONF:
  5871                                          ;MOV     DX,OFFSET TRANGROUP:BAD_ON_OFF
  5872 00001A7D BA[8327]                        MOV     DX,BAD_ON_OFF
  5873 00001A80 F9                              STC
  5874 00001A81 C3                              RETN
  5875                                  
  5876                                  ; Print volume ID info
  5877                                  
  5878                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  5879                                  
  5880                                  PRINTVOL:
  5881 00001A82 50                              PUSH    AX		; AX return from SEARCH_FIRST for VOL ID
  5882                                          ;MOV     DX,OFFSET TRANGROUP:VOLMES
  5883 00001A83 BA[F626]                        MOV     DX,VOLMES
  5884 00001A86 E897FE                          CALL    PRINT
  5885                                          ;MOV     AL,DS:[FCB]
  5886 00001A89 A05C00                          MOV     AL,[FCB]
  5887 00001A8C 0440                            ADD     AL,'@'
  5888 00001A8E 3C40                            CMP     AL,'@'
  5889 00001A90 7505                            JNZ	short DRVOK
  5890 00001A92 A0EA2C                          MOV     AL,[CURDRV]
  5891 00001A95 0441                            ADD     AL,'A'
  5892                                  DRVOK:
  5893 00001A97 E853FE                          CALL    OUT
  5894 00001A9A 58                              POP     AX
  5895 00001A9B 08C0                            OR      AL,AL
  5896 00001A9D 7409                            JZ	short GOODVOL
  5897                                          ;MOV     DX,OFFSET TRANGROUP:NOVOL
  5898 00001A9F BA[0D27]                        MOV     DX,NOVOL
  5899 00001AA2 E87BFE                          CALL    PRINT
  5900 00001AA5 E91AF5                          JMP     CRLF2
  5901                                  GOODVOL:
  5902                                          ;MOV     DX,OFFSET TRANGROUP:GOTVOL
  5903 00001AA8 BA[0827]                        MOV     DX,GOTVOL
  5904 00001AAB E872FE                          CALL    PRINT
  5905                                          ;MOV     SI,OFFSET TRANGROUP:DIRBUF+8
  5906 00001AAE BED42D                          MOV     SI,DIRBUF+8
  5907 00001AB1 B90B00                          MOV     CX,11
  5908                                          ;MOV     DI,OFFSET TRANGROUP:CHARBUF
  5909 00001AB4 BF002D                          MOV     DI,CHARBUF
  5910 00001AB7 89FA                            MOV     DX,DI
  5911 00001AB9 F3A4                            REP     MOVSB
  5912 00001ABB B80D0A                          MOV     AX,0A0DH
  5913 00001ABE AB                              STOSW
  5914 00001ABF 31C0                            XOR     AX,AX
  5915 00001AC1 AA                              STOSB
  5916 00001AC2 E960FE                          JMP     ZPRINT
  5917                                  
  5918                                  ; print date
  5919                                  
  5920                                  PRINT_DATE:
  5921 00001AC5 06                              PUSH    ES
  5922 00001AC6 57                              PUSH    DI
  5923 00001AC7 0E                              PUSH    CS
  5924 00001AC8 07                              POP     ES
  5925                                  	;MOV     DI,OFFSET TRANGROUP:CHARBUF
  5926 00001AC9 BF002D                  	MOV     DI,CHARBUF
  5927 00001ACC B42A                            MOV     AH,GET_DATE
  5928 00001ACE CD21                            INT     int_command             ; Get date in CX:DX
  5929 00001AD0 98                              CBW
  5930 00001AD1 E81800                          CALL    GetDate                 ; get date and put into DI
  5931 00001AD4 B020                            MOV     AL," "
  5932 00001AD6 AA                              STOSB
  5933                                  	;MOV     SI,OFFSET TRANGROUP:CURDAT_MID
  5934 00001AD7 BE[8026]                        MOV     SI,CURDAT_MID
  5935 00001ADA E8B0F2                          CALL    MESTRAN
  5936 00001ADD E894F7                          CALL    P_DATE
  5937 00001AE0 31C0                            XOR     AX,AX
  5938 00001AE2 AA                              STOSB
  5939                                          ;MOV     DX,OFFSET TRANGROUP:CHARBUF
  5940 00001AE3 BA002D                          MOV     DX,CHARBUF
  5941 00001AE6 E83CFE                          CALL    ZPRINT
  5942 00001AE9 07                              POP     ES
  5943 00001AEA 5F                              POP     DI
  5944 00001AEB C3                              RETN
  5945                                  
  5946                                  GetDate:
  5947 00001AEC 89C6                            MOV     SI,AX
  5948 00001AEE D1E6                            SHL     SI,1
  5949 00001AF0 01C6                            ADD     SI,AX           ; SI=AX*3
  5950                                          ;ADD     SI,OFFSET TRANGROUP:WEEKTAB
  5951 00001AF2 81C6[4C26]                      ADD     SI,WEEKTAB
  5952 00001AF6 89CB                            MOV     BX,CX
  5953 00001AF8 B90300                          MOV     CX,3
  5954 00001AFB F3A4                            REP     MOVSB
  5955 00001AFD C3                              RETN
  5956                                  
  5957                                  ;TRANCODE	ENDS
  5958                                  ;	END
  5959                                  
  5960                                  ;=============================================================================
  5961                                  ; COPY.ASM
  5962                                  ;=============================================================================
  5963                                  
  5964                                  ;TITLE   COMMAND COPY routines.
  5965                                  
  5966                                  ; COPY CODE
  5967                                  
  5968                                  ;TRANCODE	SEGMENT PUBLIC BYTE
  5969                                  
  5970                                  ;ASSUME  CS:TRANGROUP,DS:TRANGROUP,ES:TRANGROUP,SS:NOTHING
  5971                                  
  5972                                  DOMELCOPY:
  5973 00001AFE 803E822EFF                      cmp     byte [MELCOPY],0FFH
  5974 00001B03 740D                            jz	short CONTMEL
  5975 00001B05 8B36352F                        mov     SI,[SRCPT]
  5976 00001B09 8936832E                        mov     [MELSTART],si
  5977 00001B0D C606822EFF                      mov     byte [MELCOPY],0FFH
  5978                                  CONTMEL:
  5979 00001B12 31ED                            xor     BP,BP
  5980 00001B14 8B36352F                        mov     si,[SRCPT]
  5981 00001B18 B32B                            mov     bl,'+'
  5982                                  SCANSRC2:
  5983                                          ;mov     di,OFFSET TRANGROUP:SCANBUF
  5984 00001B1A BFE12E                  	mov     di,SCANBUF
  5985 00001B1D E82008                          call    CPARSE
  5986 00001B20 F6C780                          test    bh,80H
  5987 00001B23 7423                            jz	short NEXTMEL		; Go back to start
  5988 00001B25 F6C701                          test    bh,1                    ; Switch ?
  5989 00001B28 75F0                            jnz	short SCANSRC2		; Yes
  5990 00001B2A E8F401                          call    SOURCEPROC
  5991 00001B2D E863F5                          call    RESTUDIR1
  5992                                          ;mov     di,OFFSET TRANGROUP:DESTFCB2
  5993 00001B30 BF502D                  	mov     di,DESTFCB2
  5994                                          ;mov     ax,PARSE_FILE_DESCRIPTOR SHL 8
  5995 00001B33 B80029                          mov     ax,PARSE_FILE_DESCRIPTOR*256
  5996 00001B36 CD21                            INT     int_command
  5997                                          ;mov     bx,OFFSET TRANGROUP:SDIRBUF + 1
  5998 00001B38 BB102E                          mov     bx,SDIRBUF+1
  5999                                          ;mov     si,OFFSET TRANGROUP:DESTFCB2 + 1
  6000 00001B3B BE512D                          mov     si,DESTFCB2+1
  6001 00001B3E 8B3E872E                        mov     di,[SRCTAIL]
  6002 00001B42 E8CC07                          call    BUILDNAME
  6003 00001B45 E99602                          jmp     MELDO
  6004                                  
  6005                                  
  6006                                  NEXTMEL:
  6007 00001B48 E8FB04                          call    CLOSEDEST
  6008 00001B4B 31C0                            xor     ax,ax
  6009 00001B4D A2F52C                          mov     [CFLAG],al
  6010 00001B50 A3F92C                          mov     [NXTADD],ax
  6011 00001B53 A2F62C                          mov     [DESTCLOSED],al
  6012 00001B56 8B36832E                        mov     si,[MELSTART]
  6013 00001B5A 8936352F                        mov     [SRCPT],si
  6014 00001B5E E80304                          call    SEARCHNEXT
  6015 00001B61 7403                            jz	short SETNMELJ
  6016 00001B63 E98D01                          jmp     ENDCOPY2
  6017                                  SETNMELJ:
  6018 00001B66 E95B02                          jmp     SETNMEL
  6019                                  
  6020                                  COPY:
  6021                                  ; First order of buisness is to find out about the destination
  6022                                  ;ASSUME  DS:TRANGROUP,ES:TRANGROUP
  6023 00001B69 31C0                            xor     ax,ax
  6024 00001B6B A3F32C                          mov     [ALLSWITCH],AX          ; no switches
  6025 00001B6E A2EC2C                          mov     [ARGC],al               ; no arguments
  6026 00001B71 A23E2F                          mov     [PLUS],al               ; no concatination
  6027 00001B74 A23A2F                          mov     [BINARY],al             ; Binary not specifically specified
  6028 00001B77 A23D2F                          mov     [ASCII],al              ; ASCII not specifically specified
  6029 00001B7A A3FE2C                          mov     [FILECNT],ax            ; No files yet
  6030 00001B7D A23B2F                          mov     [WRITTEN],al            ; Nothing written yet
  6031 00001B80 A2EB2C                          mov     [CONCAT],al             ; No concatination
  6032 00001B83 A2822E                          mov     [MELCOPY],al            ; Not a Mel Hallerman copy
  6033 00001B86 A3E12E                          mov     [SCANBUF],ax   		; Init buffer
  6034 00001B89 A32A2E                          mov     [DESTBUF],ax   		; Init buffer
  6035 00001B8C A38A2E                          mov     [SRCBUF],ax    		; Init buffer
  6036 00001B8F A30F2E                          mov     [SDIRBUF],ax   		; Init buffer
  6037 00001B92 A3CC2D                          mov     [DIRBUF],ax    		; Init buffer
  6038 00001B95 A38C2D                          mov     [DESTFCB],ax   		; Init buffer
  6039 00001B98 48                              dec     ax
  6040 00001B99 A2FB2C                          mov     [FRSTSRCH],al           ; First search call
  6041 00001B9C A2812E                          mov     [FIRSTDEST],al          ; First time
  6042 00001B9F A2252E                          mov     [DESTISDIR],al          ; Don't know about dest
  6043 00001BA2 BE8100                          mov     si,81H
  6044 00001BA5 B32B                            mov     bl,'+'                  ; include '+' as a delimiter
  6045                                  DESTSCAN:
  6046 00001BA7 31ED                            xor     bp,bp                   ; no switches
  6047                                  	;mov     di,offset trangroup:SCANBUF
  6048 00001BA9 BFE12E                  	mov     di,SCANBUF
  6049 00001BAC E89107                          call    CPARSE
  6050 00001BAF 9C                              PUSHF                           ; save flags
  6051 00001BB0 F6C780                          test    bh,80H                  ; A '+' argument?
  6052 00001BB3 7405                            jz	short NOPLUS		; no
  6053 00001BB5 C6063E2F01                      mov	byte [PLUS],1		; yes
  6054                                  NOPLUS:
  6055 00001BBA 9D                              POPF                            ; get flags back
  6056 00001BBB 723D                            jc	short CHECKDONE		; Hit CR?
  6057 00001BBD F6C701                          test    bh,1                    ; Switch?
  6058 00001BC0 740A                            jz	short TESTP2		; no
  6059 00001BC2 092EF12C                        or      [DESTSWITCH],BP         ; Yes, assume destination
  6060 00001BC6 092EF32C                        or      [ALLSWITCH],BP          ; keep tabs on all switches
  6061 00001BCA EBDB                            jmp     short DESTSCAN
  6062                                  
  6063                                  TESTP2:
  6064 00001BCC F6C780                          test    bh,80H                  ; Plus?
  6065 00001BCF 7504                            jnz	short GOTPLUS		; Yes, not a separate arg
  6066 00001BD1 FE06EC2C                        inc	byte [ARGC]		; found a real arg
  6067                                  
  6068                                  GOTPLUS:
  6069 00001BD5 56                              push    SI
  6070 00001BD6 A1452F                          mov     ax,[STARTEL]
  6071                                          ;mov     SI,offset trangroup:SCANBUF ; Adjust to copy
  6072 00001BD9 BEE12E                          mov     SI,SCANBUF
  6073 00001BDC 29F0                            sub     ax,SI
  6074                                          ;mov     DI,offset trangroup:DESTBUF
  6075 00001BDE BF2A2E                          mov     DI,DESTBUF
  6076 00001BE1 01F8                            add     ax,DI
  6077 00001BE3 A3272E                          mov     [DESTTAIL],AX
  6078 00001BE6 880E262E                        mov     [DESTSIZ],cl            ; Save its size
  6079 00001BEA 41                              inc     cx                      ; Include the NUL
  6080 00001BEB F3A4                            rep     movsb                   ; Save potential destination
  6081 00001BED 883E292E                        mov     [DESTINFO],bh           ; Save info about it
  6082 00001BF1 C706F12C0000                    mov     word [DESTSWITCH],0	; reset switches
  6083 00001BF7 5E                              pop     SI
  6084 00001BF8 EBAD                            jmp     short DESTSCAN          ; keep going
  6085                                  
  6086                                  CHECKDONE:
  6087 00001BFA A03E2F                          mov     al,[PLUS]
  6088 00001BFD A2EB2C                          mov     [CONCAT],al             ; PLUS -> Concatination
  6089 00001C00 D0E0                            shl     al,1
  6090 00001C02 D0E0                            shl     al,1
  6091 00001C04 A2372F                          mov     [INEXACT],al            ; CONCAT -> inexact copy
  6092                                          ;mov     dx,offset trangroup:BADARGS
  6093 00001C07 BA[BC28]                	mov     dx,BADARGS
  6094 00001C0A A0EC2C                          mov     al,[ARGC]
  6095 00001C0D 08C0                            or      al,al                   ; Good number of args?
  6096 00001C0F 7404                            jz	short CERROR4J		; no, not enough
  6097 00001C11 3C02                            cmp     al,2
  6098 00001C13 7603                            jbe	short ACOUNTOK
  6099                                  CERROR4J:
  6100 00001C15 E9CFE9                          jmp	CERROR			; no, too many
  6101                                  ACOUNTOK:
  6102                                  	;mov     bp,offset trangroup:DESTVARS
  6103 00001C18 BD252E                  	mov     bp,DESTVARS
  6104 00001C1B 3C01                            cmp     al,1
  6105 00001C1D 7520                            jnz	short GOT2ARGS
  6106 00001C1F A0EA2C                          mov     al,[CURDRV]             ; Dest is default drive:*.*
  6107 00001C22 0441                            add     al,'A'
  6108 00001C24 B43A                            mov     ah,':'
  6109                                          ;mov	[bp.SIZ],2
  6110 00001C26 C6460102                        mov	byte [bp+VARSTRUC.SIZ],2
  6111                                  	;mov     di,offset trangroup:DESTBUF
  6112 00001C2A BF2A2E                  	mov     di,DESTBUF
  6113 00001C2D AB                              stosw
  6114 00001C2E C706F12C0000                    mov     word [DESTSWITCH],0	; no switches on dest
  6115                                          ;mov     [bp.INFO],2		; Flag dest is ambig
  6116 00001C34 C6460402                        mov     byte [bp+VARSTRUC.INFO],2
  6117                                          ;mov     [bp.ISDIR],0		; Know destination specs file
  6118 00001C38 C6460000                        mov     byte [bp+VARSTRUC.ISDIR],0
  6119 00001C3C E8BB02                          call    SETSTARS
  6120                                  GOT2ARGS:
  6121 00001C3F 807E0102                        cmp     byte [bp+VARSTRUC.SIZ],2
  6122 00001C43 7515                            jnz	short NOTSHORTDEST
  6123 00001C45 803E2B2E3A                      cmp     byte [DESTBUF+1],':'
  6124 00001C4A 750E                            jnz     NOTSHORTDEST            ; Two char file name
  6125 00001C4C 804E0402                        or      byte [bp+VARSTRUC.INFO],2 ; Know dest is d:
  6126                                  	;mov     di,offset trangroup:DESTBUF + 2
  6127 00001C50 BF2C2E                          mov     di,DESTBUF+2
  6128 00001C53 C6460000                        mov     byte [bp+VARSTRUC.ISDIR],0 ; Know destination specs file
  6129 00001C57 E8A002                          call    SETSTARS
  6130                                  NOTSHORTDEST:
  6131                                          ;mov     di,[bp.TTAIL]
  6132 00001C5A 8B7E02                          mov     di,[bp+VARSTRUC.TTAIL]
  6133 00001C5D 803D00                          cmp     byte [DI],0
  6134 00001C60 7514                            jnz	short CHKSWTCHES
  6135                                          ;mov     dx,offset trangroup:BADCD
  6136 00001C62 BA[1B27]                        mov     dx,BADCD
  6137 00001C65 807DFE3A                        cmp     byte [DI-2],':'
  6138 00001C69 75AA                            jnz	short CERROR4J		; Trailing '/' error
  6139 00001C6B C6460002                        mov     byte [bp+VARSTRUC.ISDIR],2 ; Know destination is d:/
  6140 00001C6F 804E0406                        or      byte [bp+VARSTRUC.INFO],6
  6141 00001C73 E88402                          call    SETSTARS
  6142                                  CHKSWTCHES:
  6143                                          ;mov     dx,offset trangroup:BADSWT
  6144 00001C76 BA[3826]                        mov     dx,BADSWT
  6145 00001C79 A1F32C                          mov     ax,[ALLSWITCH]
  6146 00001C7C 3D0080                          cmp     ax,GOTSWITCH
  6147 00001C7F 7494                            jz	short CERROR4J		; Switch specified which is not known
  6148                                  
  6149                                  ; Now know most of the information needed about the destination
  6150                                  
  6151 00001C81 A91000                          TEST    AX,VSWITCH              ; Verify requested?
  6152 00001C84 7414                            JZ	short NOVERIF                 ; No
  6153 00001C86 B454                            MOV     AH,GET_VERIFY_ON_WRITE
  6154 00001C88 CD21                            INT     int_command             ; Get current setting
  6155 00001C8A 1E                              PUSH    DS
  6156 00001C8B 8E1EDA2C                        MOV     DS,[RESSEG]
  6157                                  ;ASSUME  DS:RESGROUP
  6158 00001C8F 30E4                            XOR     AH,AH
  6159 00001C91 A37608                          MOV     [VERVAL],AX             ; Save current setting
  6160 00001C94 1F                              POP     DS
  6161                                  ;ASSUME  DS:TRANGROUP
  6162                                  	;MOV     AX,(SET_VERIFY_ON_WRITE SHL 8) OR 1 ; Set verify
  6163 00001C95 B8012E                          MOV     AX,(SET_VERIFY_ON_WRITE*256) | 1
  6164 00001C98 CD21                            INT     int_command
  6165                                  NOVERIF:
  6166 00001C9A 31ED                            xor     bp,bp                   ; no switches
  6167 00001C9C BE8100                          mov     si,81H
  6168 00001C9F B32B                            mov     bl,'+'                  ; include '+' as a delimiter
  6169                                  SCANFSRC:
  6170                                  	;mov     di,offset trangroup:SCANBUF
  6171 00001CA1 BFE12E                  	mov     di,SCANBUF
  6172 00001CA4 E89906                          call    CPARSE                  ; Parse first source name
  6173 00001CA7 F6C701                          test    bh,1                    ; Switch?
  6174 00001CAA 75F5                            jnz	short SCANFSRC		; Yes, try again
  6175 00001CAC 092EF12C                        or      [DESTSWITCH],bp         ; Include copy wide switches on DEST
  6176 00001CB0 F7C50800                        test    bp,BSWITCH
  6177 00001CB4 750C                            jnz	short NOSETCASC		; Binary explicit
  6178 00001CB6 803EEB2C00                      cmp	byte [CONCAT],0
  6179 00001CBB 7405                            JZ	short NOSETCASC		; Not Concat
  6180 00001CBD C6063D2F04                      mov     byte [ASCII],ASWITCH	; Concat -> ASCII copy if no B switch
  6181                                  NOSETCASC:
  6182 00001CC2 56                              push    SI
  6183 00001CC3 A1452F                          mov     ax,[STARTEL]
  6184                                  	;mov     SI,offset trangroup:SCANBUF ; Adjust to copy
  6185 00001CC6 BEE12E                  	mov     SI,SCANBUF
  6186 00001CC9 29F0                            sub     ax,SI
  6187                                          ;mov     DI,offset trangroup:SRCBUF
  6188 00001CCB BF8A2E                          mov     DI,SRCBUF
  6189 00001CCE 01F8                            add     ax,DI
  6190 00001CD0 A3872E                          mov     [SRCTAIL],AX
  6191 00001CD3 880E862E                        mov     [SRCSIZ],cl             ; Save its size
  6192 00001CD7 41                              inc     cx                      ; Include the NUL
  6193 00001CD8 F3A4                            rep     movsb                   ; Save this source
  6194 00001CDA 883E892E                        mov     [SRCINFO],bh            ; Save info about it
  6195 00001CDE 5E                              pop     SI
  6196 00001CDF 89E8                            mov     ax,bp                   ; Switches so far
  6197 00001CE1 E86105                          call    SETASC                  ; Set A,B switches accordingly
  6198 00001CE4 E833E6                          call    SWITCH                  ; Get any more switches on this arg
  6199 00001CE7 E85B05                          call    SETASC                  ; Set
  6200 00001CEA E86300                          call    FRSTSRC
  6201 00001CED E9A400                          jmp     FIRSTENT
  6202                                  
  6203                                  ENDCOPY:
  6204 00001CF0 E85303                          CALL    CLOSEDEST
  6205                                  ENDCOPY2:
  6206                                          ;MOV     DX,OFFSET TRANGROUP:COPIED_PRE
  6207 00001CF3 BA[E225]                        MOV     DX,COPIED_PRE
  6208 00001CF6 E827FC                          CALL    PRINT
  6209 00001CF9 8B36FE2C                        MOV     SI,[FILECNT]
  6210 00001CFD 31FF                            XOR     DI,DI
  6211 00001CFF E869F9                          CALL    DISP32BITS
  6212                                          ;MOV     DX,OFFSET TRANGROUP:COPIED_POST
  6213 00001D02 BA[D125]                	MOV     DX,COPIED_POST
  6214 00001D05 E818FC                          CALL    PRINT
  6215 00001D08 E9F9E2                          JMP     TCOMMAND                ; Stack could be messed up
  6216                                  
  6217                                  SRCNONEXIST:
  6218 00001D0B 803EEB2C00                      cmp     byte [CONCAT],0
  6219 00001D10 755B                            jnz	short NEXTSRC		; If in concat mode, ignore error
  6220                                          ;mov     dx,offset trangroup:SRCBUF
  6221 00001D12 BA8A2E                          mov     dx,SRCBUF
  6222 00001D15 E80DFC                          call    ZPRINT
  6223 00001D18 E8A2F2                          CALL    ONESPC
  6224                                          ;mov     dx,offset trangroup:NOTFND
  6225 00001D1B BA[2725]                        mov     dx,NOTFND
  6226 00001D1E E9EA04                          jmp     COPERR
  6227                                  
  6228                                  SOURCEPROC:
  6229 00001D21 56                              push    SI
  6230 00001D22 A1452F                          mov     ax,[STARTEL]
  6231                                  	;mov     SI,offset trangroup:SCANBUF ; Adjust to copy
  6232 00001D25 BEE12E                  	mov     SI,SCANBUF
  6233 00001D28 29F0                            sub     ax,SI
  6234                                  	;mov     DI,offset trangroup:SRCBUF
  6235 00001D2A BF8A2E                  	mov     DI,SRCBUF
  6236 00001D2D 01F8                            add     ax,DI
  6237 00001D2F A3872E                          mov     [SRCTAIL],AX
  6238 00001D32 880E862E                        mov     [SRCSIZ],cl             ; Save its size
  6239 00001D36 41                              inc     cx                      ; Include the NUL
  6240 00001D37 F3A4                            rep     movsb                   ; Save this sorce
  6241 00001D39 883E892E                        mov     [SRCINFO],bh            ; Save info about it
  6242 00001D3D 5E                              pop     SI
  6243 00001D3E 89E8                            mov     ax,bp                   ; Switches so far
  6244 00001D40 E80205                          call    SETASC                  ; Set A,B switches accordingly
  6245 00001D43 E8D4E5                          call    SWITCH                  ; Get any more switches on this arg
  6246 00001D46 E8FC04                          call    SETASC                  ; Set
  6247 00001D49 803EEB2C00                      cmp     byte [CONCAT],0
  6248 00001D4E 750B                            jnz	short LEAVECFLAG	; Leave CFLAG if concatination
  6249                                  FRSTSRC:
  6250 00001D50 31C0                            xor     ax,ax
  6251 00001D52 A2F52C                          mov     [CFLAG],al              ; Flag destination not created
  6252 00001D55 A3F92C                          mov     [NXTADD],ax             ; Zero out buffer
  6253 00001D58 A2F62C                          mov     [DESTCLOSED],al         ; Not created -> not closed
  6254                                  LEAVECFLAG:
  6255 00001D5B 8936352F                        mov     [SRCPT],SI              ; remember where we are
  6256                                  	;mov     di,offset trangroup:USERDIR1
  6257 00001D5F BF462C                  	mov     di,USERDIR1
  6258                                          ;mov     bp,offset trangroup:SRCVARS
  6259 00001D62 BD852E                          mov     bp,SRCVARS
  6260 00001D65 E8C400                          call    BUILDPATH               ; Figure out everything about the source
  6261 00001D68 8B36872E                        mov     si,[SRCTAIL]            ; Create the search FCB
  6262 00001D6C C3                              RETN
  6263                                  
  6264                                  NEXTSRC:
  6265 00001D6D 803E3E2F00                      cmp     byte [PLUS],0
  6266 00001D72 7503                            jnz	short MORECP
  6267                                  ENDCOPYJ2:
  6268 00001D74 E979FF                          jmp     ENDCOPY                 ; Done
  6269                                  MORECP:
  6270 00001D77 31ED                            xor     bp,bp                   ; no switches
  6271 00001D79 8B36352F                        mov     si,[SRCPT]
  6272 00001D7D B32B                            mov     bl,'+'                  ; include '+' as a delimiter
  6273                                  SCANSRC:
  6274                                          ;mov     di,offset trangroup:SCANBUF
  6275 00001D7F BFE12E                          mov     di,SCANBUF
  6276 00001D82 E8BB05                          call    CPARSE                  ; Parse first source name
  6277 00001D85 72ED                            JC	short ENDCOPYJ2		; if error, then end (trailing + case)
  6278 00001D87 F6C780                          test    bh,80H
  6279 00001D8A 74E8                            jz	short ENDCOPYJ2		; If no '+' we're done
  6280 00001D8C F6C701                          test    bh,1                    ; Switch?
  6281 00001D8F 75EE                            jnz	short SCANSRC		; Yes, try again
  6282 00001D91 E88DFF                          call    SOURCEPROC
  6283                                  FIRSTENT:
  6284 00001D94 BF5C00                          mov     di,FCB
  6285                                  	;mov     ax,PARSE_FILE_DESCRIPTOR SHL 8
  6286 00001D97 B80029                  	mov     ax,PARSE_FILE_DESCRIPTOR*256
  6287 00001D9A CD21                            INT     int_command
  6288 00001D9C A18A2E                          mov     ax,[SRCBUF]		; Get drive
  6289 00001D9F 80FC3A                          cmp     ah,':'
  6290 00001DA2 7402                            jz	short DRVSPEC1
  6291 00001DA4 B040                            mov     al,'@'
  6292                                  DRVSPEC1:
  6293 00001DA6 2C40                            sub     al,'@'
  6294 00001DA8 A25C00                          mov     [FCB],al
  6295 00001DAB B411                            mov     ah,DIR_SEARCH_FIRST
  6296 00001DAD E8C001                          call    SEARCH
  6297 00001DB0 9C                              pushf                           ; Save result of search
  6298 00001DB1 E8DFF2                          call    RESTUDIR1               ; Restore users dir
  6299 00001DB4 9D                              popf
  6300 00001DB5 7403                            jz	short NEXTAMBIG0
  6301 00001DB7 E951FF                          jmp     SRCNONEXIST             ; Failed
  6302                                  NEXTAMBIG0:
  6303 00001DBA 30C0                            xor     al,al
  6304 00001DBC 8606FB2C                        xchg    al,[FRSTSRCH]
  6305 00001DC0 08C0                            or      al,al
  6306 00001DC2 740B                            jz	short NEXTAMBIG
  6307                                  SETNMEL:
  6308 00001DC4 B90C00                          mov     cx,12
  6309                                          ;mov     di,OFFSET TRANGROUP:SDIRBUF
  6310 00001DC7 BF0F2E                          mov     di,SDIRBUF
  6311                                          ;mov     si,OFFSET TRANGROUP:DIRBUF
  6312 00001DCA BECC2D                          mov     si,DIRBUF
  6313 00001DCD F3A4                            rep     movsb                   ; Save very first source name
  6314                                  NEXTAMBIG:
  6315 00001DCF 30C0                            xor     al,al
  6316 00001DD1 A2392F                          mov     [NOWRITE],al            ; Turn off NOWRITE
  6317 00001DD4 8B3E872E                        mov     di,[SRCTAIL]
  6318                                  	;mov     si,offset trangroup:DIRBUF + 1
  6319 00001DD8 BECD2D                  	mov     si,DIRBUF+1
  6320 00001DDB E8B8FA                          call    FCB_TO_ASCZ             ; SRCBUF has complete name
  6321                                  MELDO:
  6322 00001DDE 803EEB2C00                      cmp	byte [CONCAT],0
  6323 00001DE3 7507                            jnz	short SHOWCPNAM		; Show name if concat
  6324 00001DE5 F606892E02                      test    byte [SRCINFO],2	; Show name if multi
  6325 00001DEA 7409                            jz	short DOREAD
  6326                                  SHOWCPNAM:
  6327                                          ;mov     dx,offset trangroup:SRCBUF
  6328 00001DEC BA8A2E                          mov     dx,SRCBUF
  6329 00001DEF E833FB                          call    ZPRINT
  6330 00001DF2 E8CDF1                          call    CRLF2
  6331                                  DOREAD:
  6332 00001DF5 E88901                          call    DOCOPY
  6333 00001DF8 803EEB2C00                      cmp     byte [CONCAT],0
  6334 00001DFD 750A                            jnz	short NODCLOSE		; If concat, do not close
  6335 00001DFF E84402                          call    CLOSEDEST               ; else close current destination
  6336 00001E02 7205                            jc	short NODCLOSE		; Concat flag got set, close didn't really happen
  6337 00001E04 C606F52C00                      mov     byte [CFLAG],0		; Flag destination not created
  6338                                  NODCLOSE:
  6339 00001E09 803EEB2C00                      cmp     byte [CONCAT],0		; Check CONCAT again
  6340 00001E0E 740D                            jz	short NOFLUSH
  6341 00001E10 E8FE02                          CALL    FLSHFIL                 ; Flush output between source files on CONCAT
  6342                                                                          ;  so LOSTERR stuff works correctly
  6343 00001E13 F606822EFF                      TEST    byte [MELCOPY],0FFH
  6344 00001E18 7403                            jz	short NOFLUSH
  6345 00001E1A E9E1FC                          jmp     DOMELCOPY
  6346                                  
  6347                                  NOFLUSH:
  6348 00001E1D E84401                          call    SEARCHNEXT              ; Try next match
  6349 00001E20 7507                            jnz	short NEXTSRCJ		; Finished with this source spec
  6350 00001E22 C606F62C00                      mov	byte [DESTCLOSED],0	; Not created or concat -> not closed
  6351 00001E27 EBA6                            jmp     NEXTAMBIG               ; Do next ambig
  6352                                  
  6353                                  NEXTSRCJ:
  6354 00001E29 E941FF                          jmp   NEXTSRC
  6355                                  
  6356                                  BUILDPATH:
  6357                                  	;test    [BP.INFO],2
  6358 00001E2C F6460402                	test    byte [BP+VARSTRUC.INFO],2
  6359 00001E30 7522                            jnz	short NOTPFILE		; If ambig don't bother with open
  6360 00001E32 89EA                            mov     dx,bp
  6361 00001E34 83C205                          add     dx,VARSTRUC.BUF		; Set DX to spec
  6362                                          ;mov     ax,OPEN SHL 8
  6363 00001E37 B8003D                          mov     ax,OPEN*256
  6364 00001E3A CD21                            INT     int_command
  6365 00001E3C 7216                            jc	short NOTPFILE
  6366 00001E3E 89C3                            mov     bx,ax                   ; Is pure file
  6367                                          ;mov     ax,IOCTL SHL 8
  6368 00001E40 B80044                  	mov     ax,IOCTL*256
  6369 00001E43 CD21                            INT     int_command
  6370 00001E45 B43E                            mov     ah,CLOSE
  6371 00001E47 CD21                            INT     int_command
  6372 00001E49 F6C280                          test    dl,devid_ISDEV
  6373 00001E4C 7541                            jnz	short ISADEV		; If device, done
  6374                                          ;test    [BP.INFO],4
  6375 00001E4E F6460404                        test    byte [BP+VARSTRUC.INFO],4
  6376 00001E52 743B                            jz	short ISSIMPFILE	; If no path seps, done
  6377                                  NOTPFILE:
  6378                                          ;mov     dx,word ptr [BP.BUF]
  6379 00001E54 8B5605                          mov     dx,[BP+VARSTRUC.BUF]
  6380 00001E57 80FE3A                          cmp     dh,':'
  6381 00001E5A 7402                            jz	short DRVSPEC5
  6382 00001E5C B240                            mov     dl,'@'
  6383                                  DRVSPEC5:
  6384 00001E5E 80EA40                          sub     dl,'@'                  ; A = 1
  6385 00001E61 E8C1F3                          call    SAVUDIR1
  6386 00001E64 89EA                            mov     dx,bp
  6387 00001E66 83C205                          add     dx,VARSTRUC.BUF		; Set DX for upcomming CHDIRs
  6388                                          ;mov     bh,[BP.INFO]
  6389 00001E69 8A7E04                          mov     bh,[BP+VARSTRUC.INFO]
  6390 00001E6C 80E706                          and     bh,6
  6391 00001E6F 80FF06                          cmp     bh,6                    ; Ambig and path ?
  6392 00001E72 7516                            jnz	short CHECKAMB		; jmp if no
  6393                                          ;mov     si,[BP.TTAIL]
  6394 00001E74 8B7602                          mov     si,[BP+VARSTRUC.TTAIL]
  6395 00001E77 807CFE3A                        cmp     byte [si-2],':'
  6396 00001E7B 7506                            jnz	short KNOWNOTSPEC
  6397                                  	;mov     [BP.ISDIR],2		; Know is d:/file
  6398 00001E7D C6460002                	mov     byte [BP+VARSTRUC.ISDIR],2
  6399 00001E81 EB05                            jmp     short DOPCDJ
  6400                                  
  6401                                  KNOWNOTSPEC:
  6402                                  	;mov     [BP.ISDIR],1		; Know is path/file
  6403 00001E83 C6460001                	mov     byte [BP+VARSTRUC.ISDIR],1
  6404 00001E87 4E                              dec     si                      ; Point to the /
  6405                                  DOPCDJ:
  6406 00001E88 EB5E                            jmp     short DOPCD
  6407                                  
  6408                                  CHECKAMB:
  6409 00001E8A 80FF02                          cmp     bh,2
  6410 00001E8D 7505                            jnz	short CHECKCD
  6411                                  ISSIMPFILE:
  6412                                  ISADEV:
  6413                                  	;mov     [BP.ISDIR],0		; Know is file since ambig but no path
  6414 00001E8F C6460000                        mov     byte [BP+VARSTRUC.ISDIR],0
  6415                                          ;return
  6416 00001E93 C3                      	RETN
  6417                                  
  6418                                  CHECKCD:
  6419 00001E94 E864E7                          call    SETREST1
  6420 00001E97 B43B                            mov     ah,CHDIR
  6421 00001E99 CD21                            INT     int_command
  6422 00001E9B 7223                            jc	short NOTPDIR
  6423 00001E9D 89D7                            mov     di,dx
  6424 00001E9F 31C0                            xor     ax,ax
  6425 00001EA1 89C1                            mov     cx,ax
  6426 00001EA3 49                              dec     cx
  6427 00001EA4 F2AE                            repne   scasb
  6428 00001EA6 4F                              dec     di
  6429 00001EA7 A0DF2C                          mov     al,[DIRCHAR]
  6430 00001EAA C6460002                	mov     byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
  6431 00001EAE 3A45FF                          cmp     al,[di-1]
  6432 00001EB1 7405                            jz	short GOTSRCSLSH
  6433 00001EB3 AA                              stosb
  6434 00001EB4 C6460001                        mov     byte [bp+VARSTRUC.ISDIR],1 ; know path/file
  6435                                  GOTSRCSLSH:
  6436 00001EB8 804E0406                        or      byte [bp+VARSTRUC.INFO],6
  6437 00001EBC E83B00                          call    SETSTARS
  6438                                  NOTPDIR_retn:
  6439 00001EBF C3                              RETN
  6440                                  
  6441                                  NOTPDIR:
  6442 00001EC0 C6460000                        mov     byte [bp+VARSTRUC.ISDIR],0 ; assume pure file
  6443 00001EC4 8A7E04                          mov     bh,[bp+VARSTRUC.INFO]
  6444 00001EC7 F6C704                          test    bh,4
  6445                                  	;retz				; Know pure file, no path seps
  6446 00001ECA 74F3                    	jz	short NOTPDIR_retn 				
  6447 00001ECC C6460002                        mov     byte [bp+VARSTRUC.ISDIR],2 ; assume d:/file
  6448 00001ED0 8B7602                          mov     si,[bp+VARSTRUC.TTAIL]
  6449 00001ED3 803C00                          cmp     byte [si],0
  6450 00001ED6 741F                            jz	short BADCDERRJ2	; Trailing '/'
  6451 00001ED8 803C2E                          cmp     byte [si],'.'
  6452 00001EDB 741A                            jz	short BADCDERRJ2	; If . or .. pure cd should have worked
  6453 00001EDD 807CFE3A                        cmp     byte [si-2],':'
  6454 00001EE1 7405                            jz	short DOPCD		; Know d:/file
  6455 00001EE3 C6460001                        mov	byte [bp+VARSTRUC.ISDIR],1 ; Know path/file
  6456 00001EE7 4E                              dec     si                      ; Point at last '/'
  6457                                  DOPCD:
  6458 00001EE8 30DB                            xor     bl,bl
  6459 00001EEA 861C                            xchg    bl,[SI]                 ; Stick in a NUL
  6460 00001EEC E80CE7                          call    SETREST1
  6461 00001EEF B43B                            mov     ah,CHDIR
  6462 00001EF1 CD21                            INT     int_command
  6463 00001EF3 861C                            xchg    bl,[SI]
  6464                                          ;retnc
  6465 00001EF5 73C8                    	jnc	short NOTPDIR_retn
  6466                                  BADCDERRJ2:
  6467 00001EF7 E900F1                          JMP     BADCDERR
  6468                                  
  6469                                  SETSTARS:
  6470 00001EFA 897E02                          mov     [bp+VARSTRUC.TTAIL],DI
  6471 00001EFD 8046010C                        add     byte [bp+VARSTRUC.SIZ],12
  6472                                          ;mov     ax,('.' SHL 8) OR '?'
  6473 00001F01 B83F2E                          mov     ax,2E3Fh ; '?.'
  6474 00001F04 B90800                          mov     cx,8
  6475 00001F07 F3AA                            rep     stosb
  6476 00001F09 86C4                            xchg    al,ah
  6477 00001F0B AA                              stosb
  6478 00001F0C 86C4                            xchg    al,ah
  6479 00001F0E B103                            mov     cl,3
  6480 00001F10 F3AA                            rep     stosb
  6481 00001F12 30C0                            xor     al,al
  6482 00001F14 AA                              stosb
  6483 00001F15 C3                              retn
  6484                                  
  6485                                  COMPNAME:
  6486 00001F16 51                              PUSH    CX
  6487 00001F17 50                              PUSH    AX
  6488                                  	;MOV     si,offset trangroup:SRCBUF
  6489 00001F18 BE8A2E                  	MOV     si,SRCBUF
  6490                                  	;MOV     di,offset trangroup:DESTBUF
  6491 00001F1B BF2A2E                  	MOV     di,DESTBUF
  6492 00001F1E 8A0EEA2C                        MOV     CL,[CURDRV]
  6493 00001F22 88CD                            MOV     CH,CL
  6494 00001F24 807C013A                        CMP     BYTE [SI+1],':'
  6495 00001F28 7505                            JNZ	short NOSRCDRV
  6496 00001F2A AD                              LODSW
  6497 00001F2B 2C41                            SUB     AL,'A'
  6498 00001F2D 88C1                            MOV     CL,AL
  6499                                  NOSRCDRV:
  6500 00001F2F 807D013A                        CMP     BYTE [DI+1],':'
  6501 00001F33 7508                            JNZ	short NODSTDRV
  6502 00001F35 8A05                            MOV     AL,[DI]
  6503 00001F37 47                              INC     DI
  6504 00001F38 47                              INC     DI
  6505 00001F39 2C41                            SUB     AL,'A'
  6506 00001F3B 88C5                            MOV     CH,AL
  6507                                  NODSTDRV:
  6508 00001F3D 38CD                            CMP     CH,CL
  6509 00001F3F 7520                            jnz	short RET81P
  6510 00001F41 E8D0EE                          call    STRCOMP
  6511 00001F44 741B                            jz	short RET81P
  6512 00001F46 8B44FF                          mov     ax,[si-1]
  6513 00001F49 8B4DFF                          mov     cx,[di-1]
  6514 00001F4C 50                              push    ax
  6515 00001F4D 20C8                            and     al,cl
  6516 00001F4F 58                              pop     ax
  6517 00001F50 750F                            jnz	short RET81P		; Neither of the mismatch chars was a NUL
  6518                                  ; Know one of the mismatch chars is a NUL
  6519                                  ; Check for ".NUL" compared with NUL
  6520 00001F52 3C2E                            cmp     al,'.'
  6521 00001F54 7504                            jnz	short CHECKCL
  6522 00001F56 08E4                            or      ah,ah
  6523 00001F58 EB07                            jmp     short RET81P            ; If NUL return match, else no match
  6524                                  CHECKCL:
  6525 00001F5A 80F92E                          cmp     cl,'.'
  6526 00001F5D 7502                            jnz	short RET81P		; Mismatch
  6527 00001F5F 08ED                            or      ch,ch                   ; If NUL return match, else no match
  6528                                  RET81P:
  6529 00001F61 58                              POP     AX
  6530 00001F62 59                              POP     CX
  6531 00001F63 C3                              RETN
  6532                                  
  6533                                  ;TRANCODE	ENDS
  6534                                  
  6535                                  ;	END
  6536                                  
  6537                                  ;=============================================================================
  6538                                  ; COPYPROC.ASM
  6539                                  ;=============================================================================
  6540                                  
  6541                                  ;TITLE   COPYRPOC		;Procedures called by COPY
  6542                                  
  6543                                  ;TRANCODE	SEGMENT PUBLIC BYTE
  6544                                  
  6545                                  ;ASSUME  CS:TRANGROUP,DS:TRANGROUP,ES:TRANGROUP,SS:NOTHING
  6546                                  
  6547                                  SEARCHNEXT:
  6548 00001F64 B412                            MOV     AH,DIR_SEARCH_NEXT
  6549 00001F66 F606892E02                      TEST	byte [SRCINFO],2
  6550 00001F6B 7503                            JNZ	short SEARCH		; Do search-next if ambig
  6551 00001F6D 08E4                            OR      AH,AH                   ; Reset zero flag
  6552 00001F6F C3                      	RETN
  6553                                  SEARCH:
  6554 00001F70 50                              PUSH    AX
  6555 00001F71 B41A                            MOV     AH,SET_DMA
  6556                                  	;MOV     DX,OFFSET TRANGROUP:DIRBUF
  6557 00001F73 BACC2D                  	MOV     DX,DIRBUF
  6558 00001F76 CD21                            INT     int_command             ; Put result of search in DIRBUF
  6559 00001F78 58                              POP     AX                      ; Restore search first/next command
  6560 00001F79 BA5C00                          MOV     DX,FCB
  6561 00001F7C CD21                            INT     int_command             ; Do the search
  6562 00001F7E 08C0                            OR      AL,AL
  6563                                  DOCOPY_retn:
  6564                                          ;return
  6565 00001F80 C3                      	RETN
  6566                                  
  6567                                  DOCOPY:
  6568 00001F81 C606E92C00                      mov     byte [RDEOF],0		; No EOF yet
  6569                                  	;mov     dx,offset trangroup:SRCBUF
  6570 00001F86 BA8A2E                  	mov     dx,SRCBUF
  6571                                          ;mov     ax,OPEN SHL 8
  6572 00001F89 B8003D                          mov     ax,OPEN*256
  6573 00001F8C CD21                            INT     int_command
  6574                                          ;retc				; If open fails, ignore
  6575 00001F8E 72F0                            jc	short DOCOPY_retn
  6576 00001F90 89C3                    	mov     bx,ax                   ; Save handle
  6577 00001F92 891EDE2E                        mov     [SRCHAND],bx            ; Save handle
  6578                                          ;mov     ax,(FILE_TIMES SHL 8)
  6579 00001F96 B80057                          mov     ax,FILE_TIMES*256
  6580 00001F99 CD21                            INT     int_command
  6581 00001F9B 89163F2F                        mov     [CPDATE],dx             ; Save DATE
  6582 00001F9F 890E412F                        mov     [CPTIME],cx             ; Save TIME
  6583                                  	;mov     ax,(IOCTL SHL 8)
  6584 00001FA3 B80044                  	mov     ax,IOCTL*256
  6585 00001FA6 CD21                            INT     int_command             ; Get device stuff
  6586 00001FA8 80E280                          and     dl,devid_ISDEV
  6587 00001FAB 8816E02E                        mov     [SRCISDEV],dl           ; Set source info
  6588 00001FAF 740D                            jz	short COPYLP		; Source not a device
  6589 00001FB1 803E3A2F00                      cmp	byte [BINARY],0
  6590 00001FB6 7406                            jz	short COPYLP		; ASCII device OK
  6591                                  	;mov     dx,offset trangroup:INBDEV  ; Cannot do binary input
  6592 00001FB8 BA[5028]                	mov     dx,INBDEV
  6593 00001FBB E94D02                          jmp     COPERR
  6594                                  
  6595                                  COPYLP:
  6596 00001FBE 8B1EDE2E                        mov     bx,[SRCHAND]
  6597 00001FC2 8B0EF72C                        mov     cx,[BYTCNT]
  6598 00001FC6 8B16F92C                        mov     dx,[NXTADD]
  6599 00001FCA 29D1                            sub     cx,dx                   ; Compute available space
  6600 00001FCC 750E                            jnz	short GOTROOM
  6601 00001FCE E84001                          call    FLSHFIL
  6602 00001FD1 803E3C2F00                      CMP	byte [TERMREAD],0
  6603 00001FD6 7565                            JNZ	short CLOSESRC		; Give up
  6604 00001FD8 8B0EF72C                        mov     cx,[BYTCNT]
  6605                                  GOTROOM:
  6606 00001FDC 1E                              push    ds
  6607 00001FDD 8E1EDC2C                        mov     ds,[TPA]
  6608                                  ;ASSUME  DS:NOTHING
  6609 00001FE1 B43F                            mov     ah,READ
  6610 00001FE3 CD21                            INT     int_command
  6611 00001FE5 1F                              pop     ds
  6612                                  ;ASSUME  DS:TRANGROUP
  6613 00001FE6 7255                            jc	short CLOSESRC		; Give up if error
  6614 00001FE8 89C1                            mov     cx,ax                   ; Get count
  6615 00001FEA E351                            jcxz    CLOSESRC                ; No more to read
  6616 00001FEC 803EE02E00                      cmp	byte [SRCISDEV],0
  6617 00001FF1 7507                            jnz	short NOTESTA		; Is a device, ASCII mode
  6618 00001FF3 803E3D2F00                      cmp     byte [ASCII],0
  6619 00001FF8 741B                            jz	short BINREAD
  6620                                  NOTESTA:
  6621 00001FFA 89CA                            MOV     DX,CX
  6622 00001FFC 8B3EF92C                        MOV     DI,[NXTADD]
  6623 00002000 B01A                            MOV     AL,1AH
  6624 00002002 06                              PUSH    ES
  6625 00002003 8E06DC2C                        MOV     ES,[TPA]
  6626 00002007 F2AE                            REPNE   SCASB                   ; Scan for EOF
  6627 00002009 07                              POP     ES
  6628 0000200A 7505                            JNZ	short USEALL
  6629 0000200C FE06E92C                        INC	byte [RDEOF]
  6630 00002010 41                              INC     CX
  6631                                  USEALL:
  6632 00002011 29CA                            SUB     DX,CX
  6633 00002013 89D1                            MOV     CX,DX
  6634                                  BINREAD:
  6635 00002015 030EF92C                        ADD     CX,[NXTADD]
  6636 00002019 890EF92C                        MOV     [NXTADD],CX
  6637 0000201D 3B0EF72C                        CMP     CX,[BYTCNT]             ; Is buffer full?
  6638 00002021 720C                            JB	short TESTDEV		; If not, we may have found EOF
  6639 00002023 E8EB00                          CALL    FLSHFIL
  6640 00002026 803E3C2F00                      CMP	byte [TERMREAD],0
  6641 0000202B 7510                            JNZ	short CLOSESRC		; Give up
  6642 0000202D EB8F                            JMP     SHORT COPYLP
  6643                                  
  6644                                  TESTDEV:
  6645 0000202F 803EE02E00                      cmp	byte [SRCISDEV],0
  6646 00002034 7407                            JZ	short CLOSESRC		; If file then EOF
  6647 00002036 803EE92C00                      CMP	byte [RDEOF],0
  6648 0000203B 7481                            JZ	short COPYLP		; On device, go till ^Z
  6649                                  CLOSESRC:
  6650 0000203D 8B1EDE2E                        mov     bx,[SRCHAND]
  6651 00002041 B43E                            mov     ah,CLOSE
  6652 00002043 CD21                            INT     int_command
  6653                                  CLOSESRCDEST_retn:
  6654                                          ;return
  6655 00002045 C3                      	RETN
  6656                                  
  6657                                  CLOSEDEST:
  6658 00002046 803EF62C00                      cmp	byte [DESTCLOSED],0
  6659                                  	;retnz				; Don't double close
  6660 0000204B 75F8                    	jnz	short CLOSESRCDEST_retn
  6661 0000204D A0F12C                          MOV     AL,[DESTSWITCH]
  6662 00002050 E8F201                          CALL    SETASC                  ; Check for B or A switch on destination
  6663 00002053 7436                            JZ	short BINCLOS
  6664 00002055 8B1EF92C                        MOV     BX,[NXTADD]
  6665 00002059 3B1EF72C                        CMP     BX,[BYTCNT]             ; Is memory full?
  6666 0000205D 7509                            JNZ	short PUTZ
  6667 0000205F E8A200                          call    TRYFLUSH                ; Make room for one lousy byte
  6668 00002062 7402                            jz	short NOCONC
  6669                                  CONCHNG:                                ; Concat flag changed on us
  6670 00002064 F9                              STC
  6671 00002065 C3                              RETN
  6672                                  NOCONC:
  6673 00002066 31DB                            XOR     BX,BX
  6674                                  PUTZ:
  6675 00002068 1E                              PUSH    DS
  6676 00002069 8E1EDC2C                        MOV     DS,[TPA]
  6677 0000206D C7071A00                        MOV     WORD [BX],1AH		; Add End-of-file mark (Ctrl-Z)
  6678 00002071 1F                              POP     DS
  6679 00002072 FF06F92C                        INC     word [NXTADD]
  6680 00002076 C606392F00                      MOV     byte [NOWRITE],0	; Make sure our ^Z gets written
  6681 0000207B A03B2F                          MOV     AL,[WRITTEN]
  6682 0000207E 30E4                            XOR     AH,AH
  6683 00002080 0306F92C                        ADD     AX,[NXTADD]
  6684 00002084 7205                            JC	short BINCLOS		; > 1
  6685 00002086 83F801                          CMP     AX,1
  6686 00002089 7463                            JZ	short FORGETIT		; WRITTEN = 0 NXTADD = 1 (the ^Z)
  6687                                  BINCLOS:
  6688 0000208B E87600                          call    TRYFLUSH
  6689 0000208E 75D4                            jnz	short CONCHNG
  6690 00002090 803E3B2F00                      cmp	byte [WRITTEN],0
  6691 00002095 7457                            jz	short FORGETIT		; Never wrote nothin
  6692 00002097 8B1E7E2E                        MOV     BX,[DESTHAND]
  6693 0000209B 8B0E412F                        MOV     CX,[CPTIME]
  6694 0000209F 8B163F2F                        MOV     DX,[CPDATE]
  6695 000020A3 803E372F00                      CMP	byte [INEXACT],0	; Copy not exact?
  6696 000020A8 7431                            JZ	short DODCLOSE		; If no, copy date & time
  6697 000020AA B42C                            MOV     AH,GET_TIME
  6698 000020AC CD21                            INT     int_command
  6699 000020AE D0E1                            SHL     CL,1
  6700 000020B0 D0E1                            SHL     CL,1                    ; Left justify min in CL
  6701 000020B2 D1E1                            SHL     CX,1
  6702 000020B4 D1E1                            SHL     CX,1
  6703 000020B6 D1E1                            SHL     CX,1                    ; hours to high 5 bits, min to 5-10
  6704 000020B8 D0EE                            SHR     DH,1                    ; Divide seconds by 2 (now 5 bits)
  6705 000020BA 08F1                            OR      CL,DH                   ; And stick into low 5 bits of CX
  6706 000020BC 51                              PUSH    CX                      ; Save packed time
  6707 000020BD B42A                            MOV     AH,GET_DATE
  6708 000020BF CD21                            INT     int_command
  6709 000020C1 81E9BC07                        SUB     CX,1980
  6710 000020C5 86E9                            XCHG    CH,CL
  6711 000020C7 D1E1                            SHL     CX,1                    ; Year to high 7 bits
  6712 000020C9 D0E6                            SHL     DH,1                    ; Month to high 3 bits
  6713 000020CB D0E6                            SHL     DH,1
  6714 000020CD D0E6                            SHL     DH,1
  6715 000020CF D0E6                            SHL     DH,1
  6716 000020D1 D0E6                            SHL     DH,1                    ; Most sig bit of month in carry
  6717 000020D3 80D500                          ADC     CH,0                    ; Put that bit next to year
  6718 000020D6 08F2                            OR      DL,DH                   ; Or low three of month into day
  6719 000020D8 88EE                            MOV     DH,CH                   ; Get year and high bit of month
  6720 000020DA 59                              POP     CX                      ; Get time back
  6721                                  DODCLOSE:
  6722                                  	;MOV     AX,(FILE_TIMES SHL 8) OR 1
  6723 000020DB B80157                  	MOV     AX,(FILE_TIMES*256) | 1
  6724 000020DE CD21                            INT     int_command             ; Set date and time
  6725 000020E0 B43E                            MOV     AH,CLOSE
  6726 000020E2 CD21                            INT     int_command
  6727 000020E4 FF06FE2C                        INC	word [FILECNT]
  6728 000020E8 FE06F62C                        INC	byte [DESTCLOSED]
  6729                                  RET50:
  6730 000020EC F8                              CLC
  6731 000020ED C3                              RETN
  6732                                  
  6733                                  FORGETIT:
  6734 000020EE 8B1E7E2E                        MOV     BX,[DESTHAND]
  6735 000020F2 E8E6FF                          CALL    DODCLOSE                ; Close the dest
  6736                                          ;MOV     DX,OFFSET TRANGROUP:DESTBUF
  6737 000020F5 BA2A2E                          MOV     DX,DESTBUF
  6738 000020F8 B441                            MOV     AH,UNLINK
  6739 000020FA CD21                            INT     int_command             ; And delete it
  6740 000020FC C706FE2C0000                    MOV	word [FILECNT],0	; No files transferred
  6741 00002102 EBE8                            JMP	short RET50
  6742                                  
  6743                                  TRYFLUSH:
  6744 00002104 A0EB2C                          mov     al,[CONCAT]
  6745 00002107 50                              push    ax
  6746 00002108 E80600                          call    FLSHFIL
  6747 0000210B 58                              pop     ax
  6748 0000210C 3A06EB2C                        cmp     al,[CONCAT]
  6749                                          ;return
  6750 00002110 C3                      	retn
  6751                                  
  6752                                  FLSHFIL:
  6753                                  ; Write out any data remaining in memory.
  6754                                  ; Inputs:
  6755                                  ;       [NXTADD] = No. of bytes to write
  6756                                  ;       [CFLAG] <>0 if file has been created
  6757                                  ; Outputs:
  6758                                  ;       [NXTADD] = 0
  6759                                  
  6760 00002111 C6063C2F00                      MOV     byte [TERMREAD],0
  6761 00002116 803EF52C00                      cmp     byte [CFLAG],0
  6762 0000211B 7403                            JZ	short NOTEXISTS
  6763 0000211D E98000                          JMP     EXISTS
  6764                                  NOTEXISTS:
  6765 00002120 E83C01                          call    BUILDDEST               ; Find out all about the destination
  6766 00002123 E8F0FD                          CALL    COMPNAME                ; Source and dest. the same?
  6767 00002126 7516                            JNZ	short PROCDEST		; If not, go ahead
  6768 00002128 803EE02E00                      CMP	byte [SRCISDEV],0
  6769 0000212D 750F                            JNZ	short PROCDEST		; Same name on device OK
  6770 0000212F 803EEB2C00                      CMP	byte [CONCAT],0		; Concatenation?
  6771                                          ;MOV     DX,OFFSET TRANGROUP:OVERWR
  6772 00002134 BA[8325]                        MOV     DX,OVERWR
  6773 00002137 745B                            JZ	short COPERRJ		; If not, overwrite error
  6774 00002139 C606392F01                      MOV	byte [NOWRITE],1	; Flag not writting (just seeking)
  6775                                  PROCDEST:
  6776                                  	;mov     ax,(OPEN SHL 8) OR 1
  6777 0000213E B8013D                  	mov     ax,(OPEN*256) | 1
  6778 00002141 803E392F00                      CMP     byte [NOWRITE],0
  6779 00002146 7504                            JNZ	short DODESTOPEN	; Don't actually create if NOWRITE set
  6780 00002148 B43C                            mov     ah,CREAT
  6781 0000214A 31C9                            xor     cx,cx
  6782                                  DODESTOPEN:
  6783                                  	;mov     dx,offset trangroup:DESTBUF
  6784 0000214C BA2A2E                  	mov     dx,DESTBUF
  6785 0000214F CD21                            INT     int_command
  6786                                          ;MOV     DX,OFFSET TRANGROUP:FULDIR
  6787 00002151 BA[6D25]                        MOV     DX,FULDIR
  6788 00002154 723E                            JC	short COPERRJ
  6789 00002156 A37E2E                          mov     [DESTHAND],ax           ; Save handle
  6790 00002159 C606F52C01                      mov	byte [CFLAG],1		; Destination now exists
  6791 0000215E 89C3                            mov     bx,ax
  6792                                  	;mov     ax,(IOCTL SHL 8)
  6793 00002160 B80044                  	mov     ax,IOCTL*256
  6794 00002163 CD21                            INT     int_command             ; Get device stuff
  6795 00002165 8816802E                        mov     [DESTISDEV],dl          ; Set dest info
  6796 00002169 F6C280                          test    dl,devid_ISDEV
  6797 0000216C 7432                            jz	short EXISTS		; Dest not a device
  6798 0000216E A0F12C                          mov     al,[DESTSWITCH]
  6799 00002171 240C                            AND     AL,ASWITCH+BSWITCH
  6800 00002173 7509                            JNZ	short TESTBOTH
  6801 00002175 A03D2F                          MOV     AL,[ASCII]              ; Neither set, use current setting
  6802 00002178 0A063A2F                        OR      AL,[BINARY]
  6803 0000217C 7418                            JZ	short EXSETA		; Neither set, default to ASCII
  6804                                  TESTBOTH:
  6805 0000217E 7A20                            JPE	short EXISTS		; Both are set, ignore
  6806 00002180 A808                            test    AL,BSWITCH
  6807 00002182 741C                            jz	short EXISTS		; Leave in cooked mode
  6808                                          ;mov     ax,(IOCTL SHL 8) OR 1
  6809 00002184 B80144                          mov     ax,(IOCTL*256) | 1
  6810 00002187 30F6                            xor     dh,dh
  6811 00002189 80CA20                          or      dl,devid_RAW
  6812 0000218C 8816802E                        mov     byte [DESTISDEV],dl	; New value
  6813 00002190 CD21                            INT     int_command             ; Set device to RAW mode
  6814 00002192 EB0C                            jmp     short EXISTS
  6815                                  
  6816                                  COPERRJ:
  6817 00002194 EB75                            jmp     SHORT COPERR
  6818                                  
  6819                                  EXSETA:
  6820                                  ; What we read in may have been in binary mode, flag zapped write OK
  6821 00002196 C6063D2F04                      mov     byte [ASCII],ASWITCH	; Set ASCII mode
  6822 0000219B 800E372F04                      or	byte [INEXACT],ASWITCH	; ASCII -> INEXACT
  6823                                  EXISTS:
  6824 000021A0 803E392F00                      cmp	byte [NOWRITE],0
  6825 000021A5 751D                            jnz	short NOCHECKING	; If nowrite don't bother with name check
  6826 000021A7 E86CFD                          CALL    COMPNAME                ; Source and dest. the same?
  6827 000021AA 7518                            JNZ	short NOCHECKING	; If not, go ahead
  6828 000021AC 803EE02E00                      CMP	byte [SRCISDEV],0
  6829 000021B1 7511                            JNZ	short NOCHECKING	; Same name on device OK
  6830                                  ; At this point we know in append (would have gotten overwrite error on first
  6831                                  ; destination create otherwise), and user trying to specify destination which
  6832                                  ; has been scribbled already (if dest had been named first, NOWRITE would
  6833                                  ; be set).
  6834                                  	;MOV	 DX,OFFSET TRANGROUP:LOSTERR ; Tell him he's not going to get it
  6835 000021B3 BA[A725]                	MOV	 DX,LOSTERR
  6836 000021B6 E867F7                          CALL    PRINT
  6837 000021B9 C706F92C0000                    MOV     word [NXTADD],0		; Set return
  6838 000021BF FE063C2F                        INC	byte [TERMREAD]		; Tell Read to give up
  6839                                  RET60:
  6840 000021C3 C3                              RETN
  6841                                  
  6842                                  NOCHECKING:
  6843 000021C4 8B1E7E2E                        mov     bx,[DESTHAND]           ; Get handle
  6844 000021C8 31C9                            XOR     CX,CX
  6845 000021CA 870EF92C                        XCHG    CX,[NXTADD]
  6846 000021CE E3F3                            JCXZ    RET60                   ; If Nothing to write, forget it
  6847 000021D0 FE063B2F                        INC	byte [WRITTEN]		; Flag that we wrote something
  6848 000021D4 803E392F00                      CMP	byte [NOWRITE],0	; If NOWRITE set, just seek CX bytes
  6849 000021D9 7555                            JNZ	short SEEKEND
  6850 000021DB 31D2                            XOR     DX,DX
  6851 000021DD 1E                              PUSH    DS
  6852 000021DE 8E1EDC2C                        MOV     DS,[TPA]
  6853                                  ;ASSUME  DS:NOTHING
  6854 000021E2 B440                            MOV     AH,WRITE
  6855 000021E4 CD21                            INT     int_command
  6856 000021E6 1F                              POP     DS
  6857                                  ;ASSUME  DS:TRANGROUP
  6858                                          ;MOV     DX,OFFSET TRANGROUP:NOSPACE
  6859 000021E7 BA[3825]                        MOV     DX,NOSPACE
  6860 000021EA 721F                            JC	short COPERR		; Failure
  6861 000021EC 29C1                            sub     cx,ax
  6862                                          ;retz				; Wrote all supposed to
  6863 000021EE 74D3                    	jz	short RET60
  6864 000021F0 F606802E80                      test    byte [DESTISDEV],devid_ISDEV
  6865 000021F5 7414                            jz	short COPERR		; Is a file, error
  6866 000021F7 F606802E20                      test    byte [DESTISDEV],devid_RAW
  6867 000021FC 750A                            jnz	short DEVWRTERR		; Is a raw device, error
  6868 000021FE 803E372F00                      cmp	byte [INEXACT],0
  6869                                          ;retnz				; INEXACT so OK
  6870 00002203 753F                    	jnz	short SEEKEND_retn
  6871 00002205 49                      	dec     cx
  6872                                          ;retz				; Wrote one byte less (the ^Z)
  6873 00002206 743C                    	jz	short SEEKEND_retn
  6874                                  DEVWRTERR:
  6875                                  	;MOV     DX,OFFSET TRANGROUP:DEVWMES
  6876 00002208 BA[DB28]                	MOV     DX,DEVWMES
  6877                                  COPERR:
  6878 0000220B E812F7                          CALL    PRINT
  6879 0000220E FE06F62C                        inc	byte [DESTCLOSED]
  6880 00002212 803EF52C00                      cmp	byte [CFLAG],0
  6881 00002217 7414                            jz	short ENDCOPYJ		; Never actually got it open
  6882 00002219 8B1E7E2E                        MOV     bx,[DESTHAND]
  6883 0000221D B43E                            MOV     AH,CLOSE                ; Close the file
  6884 0000221F CD21                            INT     int_command
  6885                                          ;MOV     DX,OFFSET TRANGROUP:DESTBUF
  6886 00002221 BA2A2E                          MOV     DX,DESTBUF
  6887 00002224 B441                            MOV     AH,UNLINK
  6888 00002226 CD21                            INT     int_command             ; And delete it
  6889 00002228 C606F52C00                      MOV     byte [CFLAG],0
  6890                                  ENDCOPYJ:
  6891 0000222D E9C0FA                          JMP	ENDCOPY
  6892                                  
  6893                                  SEEKEND:
  6894 00002230 31D2                            xor     dx,dx                   ; Zero high half of offset
  6895 00002232 87D1                            xchg    dx,cx                   ; cx:dx is seek location
  6896                                  	;mov     ax,(LSEEK SHL 8) OR 1
  6897 00002234 B80142                  	mov     ax,(LSEEK*256) | 1
  6898 00002237 CD21                            INT     int_command             ; Seek ahead in the file
  6899 00002239 803EE92C00                      cmp	byte [RDEOF],0
  6900                                          ;retz
  6901 0000223E 7404                    	jz	short SEEKEND_retn
  6902                                  ; If a ^Z has been read we must set the file size to the current
  6903                                  ; file pointer location
  6904 00002240 B440                            MOV     AH,WRITE
  6905 00002242 CD21                            INT     int_command             ; CX is zero, truncates file
  6906                                  SEEKEND_retn:
  6907                                          ;return
  6908 00002244 C3                      	RETN
  6909                                  
  6910                                  SETASC:
  6911                                  ; Given switch vector in AX,
  6912                                  ;       Set ASCII switch if A is set
  6913                                  ;       Clear ASCII switch if B is set
  6914                                  ;       BINARY set if B specified
  6915                                  ;       Leave ASCII unchanged if neither or both are set
  6916                                  ; Also sets INEXACT if ASCII is ever set. AL = ASCII on exit, flags set
  6917 00002245 240C                            AND     AL,ASWITCH+BSWITCH
  6918 00002247 7A10                            JPE	short LOADSW		; PE means both or neither are set
  6919 00002249 50                              PUSH    AX
  6920 0000224A 2408                            AND     AL,BSWITCH
  6921 0000224C A23A2F                          MOV     [BINARY],AL
  6922 0000224F 58                              POP     AX
  6923 00002250 2404                            AND     AL,ASWITCH
  6924 00002252 A23D2F                          MOV     [ASCII],AL
  6925 00002255 0806372F                        OR      [INEXACT],AL
  6926                                  LOADSW:
  6927 00002259 A03D2F                          MOV     AL,[ASCII]
  6928 0000225C 08C0                            OR      AL,AL
  6929 0000225E C3                              RETN
  6930                                  
  6931                                  BUILDDEST:
  6932 0000225F 803E252EFF                      cmp     byte [DESTISDIR],-1
  6933 00002264 750C                            jnz	short KNOWABOUTDEST	; Already done the figuring
  6934                                  	;MOV     DI,OFFSET TRANGROUP:USERDIR1
  6935 00002266 BF462C                          MOV     DI,USERDIR1
  6936                                          ;mov     bp,offset trangroup:DESTVARS
  6937 00002269 BD252E                          mov     bp,DESTVARS
  6938 0000226C E8BDFB                          call    BUILDPATH
  6939 0000226F E821EE                          call    RESTUDIR1
  6940                                  
  6941                                  ; Now know all about the destination
  6942                                  
  6943                                  KNOWABOUTDEST:
  6944 00002272 30C0                            xor     al,al
  6945 00002274 8606812E                        xchg    al,[FIRSTDEST]
  6946 00002278 08C0                            or      al,al
  6947 0000227A 7502                            jnz	short FIRSTDST
  6948 0000227C EB7F                            jmp     NOTFIRSTDEST
  6949                                  FIRSTDST:
  6950 0000227E 8B36272E                        mov     si,[DESTTAIL]           ; Create an FCB of the original DEST
  6951                                  	;mov     di,offset trangroup:DESTFCB
  6952 00002282 BF8C2D                  	mov     di,DESTFCB
  6953                                  	;mov     ax,PARSE_FILE_DESCRIPTOR SHL 8
  6954 00002285 B80029                  	mov     ax,PARSE_FILE_DESCRIPTOR*256
  6955 00002288 CD21                            INT     int_command
  6956 0000228A A12A2E                          mov     ax,[DESTBUF]		; Get drive
  6957 0000228D 80FC3A                          cmp     ah,':'
  6958 00002290 7402                            jz	short DRVSPEC4
  6959 00002292 B040                            mov     al,'@'
  6960                                  DRVSPEC4:
  6961 00002294 8A0E3D2F                        MOV     CL,[ASCII]              ; Save current ASCII setting
  6962 00002298 2C40                            sub     al,'@'
  6963 0000229A A28C2D                          mov     [DESTFCB],al
  6964 0000229D A0292E                          mov     al,[DESTINFO]
  6965 000022A0 8A26892E                        mov     ah,[SRCINFO]
  6966 000022A4 250202                          and     ax,0202H
  6967 000022A7 08C0                            or      al,al
  6968 000022A9 7413                            jz	short NOTMELCOPY
  6969 000022AB 38E0                            cmp     al,ah
  6970 000022AD 750F                            jnz	short NOTMELCOPY
  6971 000022AF 803E3E2F00                      cmp     byte [PLUS],0
  6972 000022B4 7408                            jz	short NOTMELCOPY
  6973 000022B6 FE06822E                        inc     byte [MELCOPY]		; ambig source, ambig dest, and pluses
  6974 000022BA 30C0                            xor     al,al
  6975 000022BC EB06                            jmp     short SETCONC
  6976                                  
  6977                                  NOTMELCOPY:
  6978 000022BE 3402                            xor     al,2                    ; al=2 if unambig dest, =0 if ambig dest
  6979 000022C0 20E0                            and     al,ah
  6980 000022C2 D0E8                            shr     al,1                    ; al=1 if unambig dest AND ambig sorce
  6981                                                                          ;   Implies concatination
  6982                                  SETCONC:
  6983 000022C4 0A063E2F                        or      al,[PLUS]               ; al=1 if concat
  6984 000022C8 A2EB2C                          mov     [CONCAT],al
  6985 000022CB D0E0                            shl     al,1
  6986 000022CD D0E0                            shl     al,1
  6987 000022CF A2372F                          mov     [INEXACT],al            ; Concat -> inexact copy
  6988 000022D2 803E3A2F00                      cmp	byte [BINARY],0
  6989 000022D7 7524                            jnz	short NOTFIRSTDEST	; Binary explicitly given, all OK
  6990 000022D9 A23D2F                          mov     [ASCII],al              ; Concat -> ASCII
  6991 000022DC 08C9                            or      cl,cl
  6992 000022DE 751D                            jnz	short NOTFIRSTDEST	; ASCII flag set before, DATA read correctly
  6993 000022E0 08C0                            or      al,al
  6994 000022E2 7419                            JZ	short NOTFIRSTDEST	; ASCII flag did not change states
  6995                                  ; At this point there may already be binary read data in the read buffer.
  6996                                  ; We need to find the first ^Z (if there is one) and trim the amount
  6997                                  ; of data in the buffer correctly.
  6998 000022E4 8B0EF92C                        MOV     CX,[NXTADD]
  6999 000022E8 E313                            JCXZ    NOTFIRSTDEST            ; No data, everything OK
  7000 000022EA B01A                            MOV     AL,1AH
  7001 000022EC 06                              PUSH    ES
  7002 000022ED 31FF                            XOR     DI,DI
  7003 000022EF 8E06DC2C                        MOV     ES,[TPA]
  7004 000022F3 F2AE                            REPNE   SCASB                   ; Scan for EOF
  7005 000022F5 07                              POP     ES
  7006 000022F6 7505                            JNZ	short NOTFIRSTDEST	; No ^Z in buffer, everything OK
  7007 000022F8 4F                              DEC     DI                      ; Point at ^Z
  7008 000022F9 893EF92C                        MOV     [NXTADD],DI             ; New buffer
  7009                                  NOTFIRSTDEST:
  7010                                  	;mov     bx,offset trangroup:DIRBUF+1 ; Source of replacement chars
  7011 000022FD BBCD2D                  	mov     bx,DIRBUF+1		; Source of replacement chars
  7012 00002300 803EEB2C00                      cmp	byte [CONCAT],0
  7013 00002305 7403                            jz	short GOTCHRSRC		; Not a concat
  7014                                  	;mov     bx,offset trangroup:SDIRBUF+1 ; Source of replacement chars
  7015 00002307 BB102E                  	mov     bx,SDIRBUF+1
  7016                                  GOTCHRSRC:
  7017                                  	;mov     si,offset trangroup:DESTFCB+1 ; Original dest name
  7018 0000230A BE8D2D                  	mov     si,DESTFCB+1
  7019 0000230D 8B3E272E                        mov     di,[DESTTAIL]           ; Where to put result
  7020                                  
  7021                                  BUILDNAME:
  7022 00002311 B90800                          mov     cx,8
  7023                                  BUILDMAIN:
  7024 00002314 AC                              lodsb
  7025 00002315 3C3F                            cmp     al,"?"
  7026 00002317 7502                            jnz	short NOTAMBIG
  7027 00002319 8A07                            mov     al,[BX]
  7028                                  NOTAMBIG:
  7029 0000231B 3C20                            cmp     al,' '
  7030 0000231D 7401                            jz	short NOSTORE
  7031 0000231F AA                              stosb
  7032                                  NOSTORE:
  7033 00002320 43                              inc     bx
  7034 00002321 E2F1                            loop    BUILDMAIN
  7035 00002323 B103                            mov     cl,3
  7036 00002325 803C20                          cmp     byte [SI],' '
  7037 00002328 7412                            jz	short ENDDEST		; No extension
  7038 0000232A B02E                            mov     al,'.'
  7039 0000232C AA                              stosb
  7040                                  BUILDEXT:
  7041 0000232D AC                              lodsb
  7042 0000232E 3C3F                            cmp     al,"?"
  7043 00002330 7502                            jnz	short NOTAMBIGE
  7044 00002332 8A07                            mov     al,[BX]
  7045                                  NOTAMBIGE:
  7046 00002334 3C20                            cmp     al,' '
  7047 00002336 7401                            jz	short NOSTOREE
  7048 00002338 AA                              stosb
  7049                                  NOSTOREE:
  7050 00002339 43                              inc     bx
  7051 0000233A E2F1                            loop    BUILDEXT
  7052                                  ENDDEST:
  7053 0000233C 30C0                            xor     al,al
  7054 0000233E AA                              stosb                           ; NUL terminate
  7055 0000233F C3                              retn
  7056                                  
  7057                                  ;TRANCODE	ENDS
  7058                                  ;	END
  7059                                  
  7060                                  ;=============================================================================
  7061                                  ; CPARSE.ASM
  7062                                  ;=============================================================================
  7063                                  
  7064                                  ;TITLE   CPARSE
  7065                                  
  7066                                  ;TRANCODE        SEGMENT PUBLIC BYTE
  7067                                  
  7068                                  ;ASSUME  CS:TRANGROUP,DS:TRANGROUP,ES:TRANGROUP
  7069                                  
  7070                                  ;SWCOUNT EQU 5
  7071                                  
  7072                                  	;PUBLIC  CPARSE
  7073                                  
  7074                                  CPARSE:
  7075                                  
  7076                                  ;-----------------------------------------------------------------------;
  7077                                  ; ENTRY:                                                                ;
  7078                                  ;       DS:SI   Points input buffer                                     ;
  7079                                  ;       ES:DI   Points to the token buffer                              ;
  7080                                  ;       BL      Special delimiter for this call                         ;
  7081                                  ;                   Always checked last                                 ;
  7082                                  ;                   set it to space if there is no special delimiter    ;
  7083                                  ; EXIT:                                                                 ;
  7084                                  ;       DS:SI   Points to next char in the input buffer                 ;
  7085                                  ;       ES:DI   Points to the token buffer                              ;
  7086                                  ;       [STARTEL] Points to start of last element of path in token      ;
  7087                                  ;               points to a NUL for no element strings 'd:' 'd:/'       ;
  7088                                  ;       CX      Character count                                         ;
  7089                                  ;       BH      Condition Code                                          ;
  7090                                  ;                       Bit 1H of BH set if switch character            ;
  7091                                  ;                               Token buffer contains char after        ;
  7092                                  ;                               switch character                        ;
  7093                                  ;                               BP has switch bits set (ORing only)     ;
  7094                                  ;                       Bit 2H of BH set if ? or * in token             ;
  7095                                  ;                               if * found element ? filled             ;
  7096                                  ;                       Bit 4H of BH set if path sep in token           ;
  7097                                  ;                       Bit 80H of BH set if the special delimiter      ;
  7098                                  ;                          was skipped at the start of this token       ;
  7099                                  ;               Token buffer always starts d: for non switch tokens     ;
  7100                                  ;       CARRY SET                                                       ;
  7101                                  ;           if CR on input                                              ;
  7102                                  ;               token buffer not altered                                ;
  7103                                  ;                                                                       ;
  7104                                  ;       DOES NOT RETURN ON BAD PATH ERROR                               ;
  7105                                  ; MODIFIES:                                                             ;
  7106                                  ;       CX, SI, AX, BH, DX and the Carry Flag                           ;       ;
  7107                                  ;                                                                       ;
  7108                                  ; -----------------------------------------------------------------------;
  7109                                  
  7110 00002340 31C0                            xor     ax,ax
  7111 00002342 893E452F                        mov     [STARTEL],DI            ; No path element (Is DI correct?)
  7112 00002346 A2482F                          mov     [ELPOS],al              ; Start in 8 char prefix
  7113 00002349 A2492F                          mov     [SKPDEL],al             ; No skip delimiter yet
  7114 0000234C 88C7                            mov     bh,al                   ; Init nothing
  7115 0000234E 9C                              pushf                           ; save flags
  7116 0000234F 57                              push    di                      ; save the token buffer addrss
  7117 00002350 31C9                            xor     cx,cx                   ; no chars in token buffer
  7118                                  moredelim:
  7119 00002352 AC                              LODSB
  7120 00002353 E8D8F3                          CALL    DELIM
  7121 00002356 7513                            JNZ	short SCANCDONE
  7122 00002358 3C20                            CMP     AL,' '
  7123 0000235A 74F6                            JZ	short moredelim
  7124 0000235C 3C09                            CMP     AL,9
  7125 0000235E 74F2                            JZ	short moredelim
  7126 00002360 8606492F                        xchg    al,[SKPDEL]
  7127 00002364 08C0                            or      al,al
  7128 00002366 74EA                            jz	short moredelim		; One non space/tab delimiter allowed
  7129 00002368 E9E800                          JMP     x_done                  ; Nul argument
  7130                                  
  7131                                  SCANCDONE:
  7132                                          ;IF      NOT KANJI
  7133 0000236B E823E5                          call    UPCONV
  7134                                          ;ENDIF
  7135                                  
  7136 0000236E 38D8                            cmp     al,bl                   ; Special delimiter?
  7137 00002370 7505                            jnz	short nospec
  7138 00002372 80CF80                          or      bh,80H
  7139 00002375 EBDB                            jmp     short moredelim
  7140                                  
  7141                                  nospec:
  7142 00002377 3C0D                            cmp     al,0DH                  ; a CR?
  7143 00002379 7503                            jne	short ncperror
  7144 0000237B E9D000                          jmp     cperror
  7145                                  ncperror:
  7146 0000237E 3A06DE2C                        cmp     al,[SWITCHAR]           ; is the char the switch char?
  7147 00002382 7503                            jne	short na_switch		; yes, process...
  7148 00002384 E9CF00                          jmp     a_switch
  7149                                  na_switch:
  7150 00002387 803C3A                          cmp     byte [si],':'
  7151 0000238A 7513                            jne	short anum_chard	; Drive not specified
  7152                                  
  7153                                          ;IF      KANJI
  7154                                          ;call    UPCONV
  7155                                          ;ENDIF
  7156                                  
  7157 0000238C E8FC00                          call    move_char
  7158 0000238F AC                              lodsb                           ; Get the ':'
  7159 00002390 E8F800                          call    move_char
  7160 00002393 893E452F                        mov     [STARTEL],di
  7161 00002397 C606472F00                      mov     byte [ELCNT],0
  7162 0000239C E98500                          jmp     anum_test
  7163                                  
  7164                                  anum_chard:
  7165 0000239F 893E452F                        mov     [STARTEL],di
  7166 000023A3 C606472F00                      mov     byte [ELCNT],0		; Store of this char sets it to one
  7167 000023A8 E823F2                          call    PATHCHRCMP              ; Starts with a pathchar?
  7168 000023AB 7518                            jnz	short anum_char		; no
  7169 000023AD 50                              push    ax
  7170 000023AE A0EA2C                          mov     al,[CURDRV]             ; Insert drive spec
  7171 000023B1 0441                            add     al,'A'
  7172 000023B3 E8D500                          call    move_char
  7173 000023B6 B03A                            mov     al,':'
  7174 000023B8 E8D000                          call    move_char
  7175 000023BB 58                              pop     ax
  7176 000023BC 893E452F                        mov     [STARTEL],di
  7177 000023C0 C606472F00                      mov     byte [ELCNT],0
  7178                                  
  7179                                  anum_char:
  7180                                  
  7181                                          ;IF      KANJI
  7182                                          ;call    TESTKANJ
  7183                                          ;jz      TESTDOT
  7184                                          ;call    move_char
  7185                                          ;lodsb
  7186                                          ;jmp     short notspecial
  7187                                  ;TESTDOT:
  7188                                  	;ENDIF
  7189                                  
  7190 000023C5 3C2E                            cmp     al,'.'
  7191 000023C7 7509                            jnz	short testquest
  7192 000023C9 FE06482F                        inc     byte [ELPOS]		; flag in extension
  7193 000023CD C606472FFF                      mov     byte [ELCNT],0FFH	; Store of the '.' resets it to 0
  7194                                  testquest:
  7195 000023D2 3C3F                            cmp     al,'?'
  7196 000023D4 7503                            jnz	short testsplat
  7197 000023D6 80CF02                          or      bh,2
  7198                                  testsplat:
  7199 000023D9 3C2A                            cmp     al,'*'
  7200 000023DB 7525                            jnz	short testpath
  7201 000023DD 80CF02                          or      bh,2
  7202 000023E0 B407                            mov     ah,7
  7203 000023E2 803E482F00                      cmp     byte [ELPOS],0
  7204 000023E7 7402                            jz	short gotelcnt
  7205 000023E9 B402                            mov     ah,2
  7206                                  gotelcnt:
  7207 000023EB B03F                            mov     al,'?'
  7208 000023ED 2A26472F                        sub     ah,[ELCNT]
  7209 000023F1 7252                            jc	short badperr2
  7210 000023F3 86E1                            xchg    ah,cl
  7211 000023F5 E309                            jcxz    testpathx
  7212                                  qmove:
  7213 000023F7 86E1                            xchg    ah,cl
  7214 000023F9 E88F00                          call    move_char
  7215 000023FC 86E1                            xchg    ah,cl
  7216 000023FE E2F7                            loop    qmove
  7217                                  testpathx:
  7218 00002400 86E1                            xchg    ah,cl
  7219                                  testpath:
  7220 00002402 E8C9F1                          call    PATHCHRCMP
  7221 00002405 751A                            jnz	short notspecial
  7222 00002407 80CF04                          or      bh,4
  7223 0000240A F6C702                          test    bh,2                    ; If just hit a '/', cannot have ? or * yet
  7224 0000240D 753C                            jnz	short badperr
  7225 0000240F 893E452F                        mov     [STARTEL],di            ; New element
  7226 00002413 FF06452F                        INC     word [STARTEL]		; Point to char after /
  7227 00002417 C606472FFF                      mov     byte [ELCNT],0FFH	; Store of '/' sets it to 0
  7228 0000241C C606482F00                      mov     byte [ELPOS],0
  7229                                  notspecial:
  7230 00002421 E86700                          call    move_char               ; just an alphanum string
  7231                                  anum_test:
  7232 00002424 AC                              lodsb
  7233                                  
  7234                                          ;IF      NOT KANJI
  7235 00002425 E869E4                          call    UPCONV
  7236                                          ;ENDIF
  7237                                  
  7238 00002428 E803F3                          call    DELIM
  7239 0000242B 7426                            je	short x_done
  7240 0000242D 3C0D                            cmp     al,0DH
  7241 0000242F 7422                            je	short x_done
  7242 00002431 3A06DE2C                        cmp     al,[SWITCHAR]
  7243 00002435 741C                            je	short x_done
  7244 00002437 38D8                            cmp     al,bl
  7245 00002439 7418                            je	short x_done
  7246 0000243B 3C3A                            cmp     al,':'                  ; ':' allowed as trailer because
  7247                                                                          ; of devices
  7248                                          ;IF      KANJI
  7249                                          ;je      FOO15
  7250                                          ;jmp     anum_char
  7251                                  ;FOO15:
  7252                                          ;ELSE
  7253 0000243D 7586                            jne     anum_char
  7254                                          ;ENDIF
  7255                                  
  7256 0000243F C644FF20                	mov     byte [si-1],' '		; Change the trailing ':' to a space
  7257 00002443 EB0E                            jmp     short x_done
  7258                                  
  7259                                  badperr2:
  7260                                          ;mov     dx,offset trangroup:BADCPMES
  7261 00002445 BA[A028]                	mov     dx,BADCPMES
  7262 00002448 E99CE1                          jmp     CERROR
  7263                                  
  7264                                  badperr:
  7265 0000244B E9ACEB                          jmp     BADCDERR
  7266                                  
  7267                                  cperror:
  7268 0000244E 4E                              dec     si                      ; adjust the pointer
  7269 0000244F 5F                              pop     di                      ; retrive token buffer address
  7270 00002450 9D                              popf                            ; restore flags
  7271 00002451 F9                              stc                             ; set the carry bit
  7272 00002452 C3                              retn
  7273                                  
  7274                                  x_done:
  7275 00002453 4E                              dec     si                      ; adjust for next round
  7276 00002454 EB2E                            jmp     short out_token
  7277                                  
  7278                                  a_switch:
  7279 00002456 80CF01                          OR      BH,1                    ; Indicate switch
  7280 00002459 81CD0080                        OR      BP,GOTSWITCH
  7281 0000245D E8C6F2                          CALL    SCANOFF
  7282 00002460 46                              INC     SI
  7283 00002461 3C0D                            cmp     al,0DH
  7284 00002463 74E9                            je	short cperror
  7285 00002465 E82300                          call    move_char               ; store the character
  7286 00002468 E826E4                          CALL    UPCONV
  7287 0000246B 06                              PUSH    ES
  7288 0000246C 57                              PUSH    DI
  7289 0000246D 51                              PUSH    CX
  7290 0000246E 0E                              PUSH    CS
  7291 0000246F 07                              POP     ES
  7292                                  ;ASSUME  ES:TRANGROUP
  7293                                          ;MOV     DI,OFFSET TRANGROUP:SWLIST
  7294 00002470 BF[4A03]                        MOV     DI,SWLIST
  7295 00002473 B90500                          MOV     CX,SWCOUNT
  7296 00002476 F2AE                            REPNE   SCASB
  7297 00002478 7507                            JNZ	short out_tokenp
  7298 0000247A B80100                          MOV     AX,1
  7299 0000247D D3E0                            SHL     AX,CL
  7300 0000247F 09C5                            OR      BP,AX
  7301                                  out_tokenp:
  7302 00002481 59                              POP     CX
  7303 00002482 5F                              POP     DI
  7304 00002483 07                              POP     ES
  7305                                  ;ASSUME  ES:NOTHING
  7306                                  out_token:
  7307 00002484 B000                            mov     al,0
  7308 00002486 AA                              stosb                           ; null at the end
  7309 00002487 5F                              pop     di                      ; restore token buffer pointer
  7310 00002488 9D                              popf
  7311 00002489 F8                              clc                             ; clear carry flag
  7312 0000248A C3                              retn
  7313                                  
  7314                                  move_char:
  7315 0000248B AA                              stosb                           ; store char in token buffer
  7316 0000248C 41                              inc     cx                      ; increment char count
  7317 0000248D FE06472F                        inc     byte [ELCNT]		; increment element count for * substi
  7318 00002491 C3                              retn
  7319                                  
  7320                                  ;TRANCODE ENDS
  7321                                  ;	END
  7322                                  
  7323                                  ; ----------------------------------------------------------------------------
  7324                                  ; SEGMENT - TRANDATA
  7325                                  ; ----------------------------------------------------------------------------
  7326 00002492 90<rept>                ALIGN 16
  7327                                  ; ----------------------------------------------------------------------------
  7328                                  ;Data for transient portion
  7329                                  ; ----------------------------------------------------------------------------
  7330                                  
  7331                                  TRANDATA:
  7332                                  
  7333                                  ;=============================================================================
  7334                                  ; TDATA.ASM
  7335                                  ;=============================================================================
  7336                                  
  7337                                  ;TITLE   COMMAND Transient Initialized DATA
  7338                                  
  7339                                  ; Data for transient portion
  7340                                  
  7341                                  ;TRANDATA SEGMENT PUBLIC BYTE
  7342                                  
  7343                                          ;ORG     0
  7344                                  ;ZERO    =       $
  7345 000024A0 0D0A42617463682066-     BADBAT  DB      13,10,"Batch file missing",13,10,"$"	 ; offset 2580h 
  7346 000024A9 696C65206D69737369-
  7347 000024B2 6E670D0A24         
  7348 000024B7 0D0A496E7365727420-     NEEDBAT DB      13,10,"Insert disk with batch file"	 ; offset 2597h
  7349 000024C0 6469736B2077697468-
  7350 000024C9 206261746368206669-
  7351 000024D2 6C65               
  7352 000024D4 0D0A616E6420707265-             DB      13,10,"and press any key when ready",13,10,"$"
  7353 000024DD 737320616E79206B65-
  7354 000024E6 79207768656E207265-
  7355 000024EF 6164790D0A24       
  7356 000024F5 42616420636F6D6D61-     BADNAM  DB      "Bad command or file name",13,10,"$"
  7357 000024FE 6E64206F722066696C-
  7358 00002507 65206E616D650D0A24 
  7359 00002510 4475706C6963617465-     RENERR  DB      "Duplicate file name or "
  7360 00002519 2066696C65206E616D-
  7361 00002522 65206F7220         
  7362 00002527 46696C65206E6F7420-     NOTFND  DB      "File not found",13,10,"$"
  7363 00002530 666F756E640D0A24   
  7364 00002538 496E73756666696369-     NOSPACE DB      "Insufficient disk space",13,10,"$"
  7365 00002541 656E74206469736B20-
  7366 0000254A 73706163650D0A24   
  7367 00002552 4F7574206F6620656E-     ENVERR  DB      "Out of environment space",13,10,"$"
  7368 0000255B 7669726F6E6D656E74-
  7369 00002564 2073706163650D0A24 
  7370 0000256D 46696C652063726561-     FULDIR  DB      "File creation error",13,10,"$"
  7371 00002576 74696F6E206572726F-
  7372 0000257F 720D0A24           
  7373 00002583 46696C652063616E6E-     OVERWR  DB      "File cannot be copied onto itself",13,10,"$"
  7374 0000258C 6F7420626520636F70-
  7375 00002595 696564206F6E746F20-
  7376 0000259E 697473656C660D0A24 
  7377 000025A7 436F6E74656E74206F-     LOSTERR DB      "Content of destination lost before copy",13,10,"$"
  7378 000025B0 662064657374696E61-
  7379 000025B9 74696F6E206C6F7374-
  7380 000025C2 206265666F72652063-
  7381 000025CB 6F70790D0A24       
  7382                                  
  7383                                  ;"COPIED_PRE<# files copied>COPIED_POST"
  7384 000025D1 2046696C6528732920-     COPIED_POST  DB      " File(s) copied",13,10
  7385 000025DA 636F706965640D0A   
  7386 000025E2 24                      COPIED_PRE   DB      "$"
  7387                                  
  7388                                  ;"DIRMES_PRE<# files in dir>DIRMES_POST"
  7389 000025E3 2046696C6528732920      DIRMES_POST  DB	" File(s) "
  7390 000025EC 24                      DIRMES_PRE   DB	"$"
  7391                                  
  7392                                  ;"BYTMES_PRE<# free bytes>BYTMES_POST"
  7393 000025ED 206279746573206672-     BYTMES_POST  DB	" bytes free",13,10
  7394 000025F6 65650D0A           
  7395 000025FA 24                      BYTMES_PRE   DB	"$"
  7396                                  
  7397 000025FB 496E76616C69642064-     BADDRV  DB	"Invalid drive specification",13,10,"$"
  7398 00002604 726976652073706563-
  7399 0000260D 696669636174696F6E-
  7400 00002616 0D0A24             
  7401 00002619 537472696B65206120-     PAUSEMES DB	"Strike a key when ready . . . $"
  7402 00002622 6B6579207768656E20-
  7403 0000262B 7265616479202E202E-
  7404 00002634 202E2024           
  7405 00002638 496E76616C69642070-     BADSWT  DB	"Invalid parameter",13,10,"$"
  7406 00002641 6172616D657465720D-
  7407 0000264A 0A24               
  7408 0000264C 53756E4D6F6E547565-     WEEKTAB DB	"SunMonTueWedThuFriSat"
  7409 00002655 576564546875467269-
  7410 0000265E 536174             
  7411 00002661 0D0A496E76616C6964-     BADDAT  DB	13,10,"Invalid date$"
  7412 0000266A 206461746524       
  7413                                  
  7414                                  ;"CURDAT_PRE<day of week>CURDAT_MID<MO,DAY,YR>CURDAT_POST"
  7415                                  ;Note: CURDAT_MID also appears in the date printed via PROMPT command
  7416 00002670 43757272656E742064-     CURDAT_PRE DB	"Current date is "
  7417 00002679 61746520697320     
  7418                                  ;CURDAT_MID LABEL BYTE
  7419                                  CURDAT_MID:
  7420 00002680 24                      CURDAT_POST DB	"$"
  7421                                  
  7422 00002681 0D0A456E746572206E-     NEWDAT  DB	13,10,"Enter new date: $"
  7423 0000268A 657720646174653A20-
  7424 00002693 24                 
  7425 00002694 0D0A496E76616C6964-     BADTIM  DB	13,10,"Invalid time$"
  7426 0000269D 2074696D6524       
  7427                                  
  7428                                  ;"CURTIM_PRE<HR,MIN,SEC,HSEC>CURTIM_POST"
  7429 000026A3 43757272656E742074-     CURTIM_PRE  DB	"Current time is "
  7430 000026AC 696D6520697320     
  7431 000026B3 24                      CURTIM_POST DB	"$"
  7432                                  
  7433 000026B4 0D0A456E746572206E-     NEWTIM  DB      13,10,"Enter new time: $"
  7434 000026BD 65772074696D653A20-
  7435 000026C6 24                 
  7436 000026C7 41726520796F752073-     SUREMES DB      "Are you sure (Y/N)? $"
  7437 000026D0 7572652028592F4E29-
  7438 000026D9 3F2024             
  7439 000026DC 203C4449523E202020-     DMES    DB      " <DIR>   $"
  7440 000026E5 24                 
  7441                                  
  7442                                  ;"VERMES_PRE<version #>VERMES_POST"
  7443                                  	;IF	IBMVER
  7444                                  ;VERMES_PRE DB	"TeleVideo Personal Computer DOS Version "
  7445                                          ;ENDIF
  7446                                          ;IF	MSVER
  7447 000026E6 4D532D444F53205665-     VERMES_PRE  DB	"MS-DOS Version "
  7448 000026EF 7273696F6E20       
  7449                                          ;ENDIF
  7450 000026F5 24                      VERMES_POST DB	"$"
  7451                                  
  7452 000026F6 20566F6C756D652069-     VOLMES  DB	" Volume in drive $"
  7453 000026FF 6E2064726976652024 
  7454 00002708 2069732024              GOTVOL  DB      " is $"
  7455 0000270D 20686173206E6F206C-     NOVOL   DB      " has no label$"
  7456 00002716 6162656C24         
  7457                                  
  7458 0000271B 496E76616C69642064-     BADCD   DB      "Invalid directory",13,10,"$"
  7459 00002724 69726563746F72790D-
  7460 0000272D 0A24               
  7461 0000272F 556E61626C6520746F-     BADMKD  DB      "Unable to create directory",13,10,"$"
  7462 00002738 206372656174652064-
  7463 00002741 69726563746F72790D-
  7464 0000274A 0A24               
  7465 0000274C 496E76616C69642070-     BADRMD  DB      "Invalid path, not directory,",13,10
  7466 00002755 6174682C206E6F7420-
  7467 0000275E 6469726563746F7279-
  7468 00002767 2C0D0A             
  7469 0000276A 6F7220646972656374-             DB      "or directory not empty",13,10,"$"
  7470 00002773 6F7279206E6F742065-
  7471 0000277C 6D7074790D0A24     
  7472 00002783 4D7573742073706563-     BAD_ON_OFF DB   "Must specify ON or OFF"        ;Note Run over to next message
  7473 0000278C 696679204F4E206F72-
  7474 00002795 204F4646           
  7475                                  
  7476                                  ;"DIRHEAD_PRE<path of dir>DIRHEAD_POST"
  7477 00002799 0D0A24                  DIRHEAD_POST DB	13,10,"$"
  7478 0000279C 204469726563746F72-     DIRHEAD_PRE  DB	" Directory of  $"
  7479 000027A5 79206F66202024     
  7480 000027AC 4E6F20506174682024      NULPATH DB      "No Path $"
  7481 000027B5 504154483D              PATH_TEXT    DB "PATH="
  7482 000027BA 50524F4D50543D          PROMPT_TEXT  DB "PROMPT="
  7483 000027C1 496E76616C69642064-     BADPMES DB      "Invalid drive in search path",13,10,"$"
  7484 000027CA 7269766520696E2073-
  7485 000027D3 656172636820706174-
  7486 000027DC 680D0A24           
  7487 000027E0 496E76616C69642064-     BADDEV  DB      "Invalid device",13,10,"$"
  7488 000027E9 65766963650D0A24   
  7489 000027F1 4C6162656C206E6F74-     BADLAB  DB      "Label not found",13,10,"$"
  7490 000027FA 20666F756E640D0A24 
  7491 00002803 53796E746178206572-     SYNTMES DB      "Syntax error",13,10,"$"
  7492 0000280C 726F720D0A24       
  7493 00002812 0D464F522063616E6E-     FORNESTMES DB   13,"FOR cannot be nested",13,10,"$"	; Offset 28F2h
  7494 0000281B 6F74206265206E6573-
  7495 00002824 7465640D0A24       
  7496 0000282A 496E7465726D656469-     PIPEEMES DB     "Intermediate file error during pipe",13,10,"$"
  7497 00002833 6174652066696C6520-
  7498 0000283C 6572726F7220647572-
  7499 00002845 696E6720706970650D-
  7500 0000284E 0A24               
  7501 00002850 43616E6E6F7420646F-     INBDEV  DB      "Cannot do binary reads from a device",13,10,"$"
  7502 00002859 2062696E6172792072-
  7503 00002862 656164732066726F6D-
  7504 0000286B 206120646576696365-
  7505 00002874 0D0A24             
  7506 00002877 6F66660D0A24            OFFMES  DB      "off",13,10,"$"
  7507 0000287D 6F6E0D0A24              ONMES   DB      "on",13,10,"$"
  7508 00002882 425245414B20697320-     CTRLCMES DB     "BREAK is $"
  7509 0000288B 24                 
  7510 0000288C 564552494659206973-     VERIMES DB      "VERIFY is $"
  7511 00002895 2024               
  7512 00002897 4543484F2069732024      ECHOMES DB      "ECHO is $"
  7513 000028A0 496E76616C69642070-     BADCPMES DB     "Invalid path or file name",13,10,"$"
  7514 000028A9 617468206F72206669-
  7515 000028B2 6C65206E616D650D0A-
  7516 000028BB 24                 
  7517 000028BC 496E76616C6964206E-     BADARGS DB      "Invalid number of parameters",13,10,"$"
  7518 000028C5 756D626572206F6620-
  7519 000028CE 706172616D65746572-
  7520 000028D7 730D0A24           
  7521 000028DB 4572726F7220777269-     DEVWMES DB      "Error writing to device"
  7522 000028E4 74696E6720746F2064-
  7523 000028ED 6576696365         
  7524 000028F2 0D0A24                  ACRLF   DB      13,10,"$"
  7525 000028F5 08200800                DBACK   DB      8," ",8,0               ; DESTRUCTIVE BACK SPACE
  7526                                  
  7527 000028F9 041B5B324A              CLSSTRING DB	4,01BH,"[2J"            ; ANSI Clear screen
  7528                                  
  7529                                  ;PROMPT_TABLE LABEL BYTE
  7530                                  PROMPT_TABLE:
  7531 000028FE 44                              DB      "D"
  7532 000028FF [C51A]                          DW      PRINT_DATE	; OFFSET TRANGROUP:PRINT_DATE
  7533 00002901 54                              DB      "T"
  7534 00002902 [C413]                          DW      PRINT_TIME	; OFFSET TRANGROUP:PRINT_TIME
  7535 00002904 50                              DB      "P"
  7536 00002905 [0309]                          DW      PRINT_DEFAULT_DIRECTORY ; OFFSET TRANGROUP:PRINT_DEFAULT_DIRECTORY
  7537 00002907 4E                              DB      "N"
  7538 00002908 [F408]                          DW      PRINT_DRIVE	; OFFSET TRANGROUP:PRINT_DRIVE
  7539 0000290A 56                              DB      "V"
  7540 0000290B [0511]                          DW      PRINT_VERSION	; OFFSET TRANGROUP:PRINT_VERSION
  7541 0000290D 47                              DB      "G"
  7542 0000290E [A317]                          DW      PRINT_G		; OFFSET TRANGROUP:PRINT_G
  7543 00002910 4C                              DB      "L"
  7544 00002911 [A717]                          DW      PRINT_L		; OFFSET TRANGROUP:PRINT_L
  7545 00002913 42                              DB      "B"
  7546 00002914 [AB17]                          DW      PRINT_B		; OFFSET TRANGROUP:PRINT_B
  7547 00002916 5F                              DB      "_"
  7548 00002917 [C20F]                          DW      CRLF2		; OFFSET TRANGROUP:CRLF2
  7549 00002919 24                              DB      "$"
  7550 0000291A [ED18]                          DW      OUT		; OFFSET TRANGROUP:OUT
  7551 0000291C 45                              DB      "E"
  7552 0000291D [9F17]                          DW      PRINT_ESC	; OFFSET TRANGROUP:PRINT_ESC
  7553 0000291F 48                              DB      "H"
  7554 00002920 [9517]                          DW      PRINT_BACK	; OFFSET TRANGROUP:PRINT_BACK
  7555 00002922 51                              DB      "Q"
  7556 00002923 [9B17]                          DW      PRINT_EQ	; OFFSET TRANGROUP:PRINT_EQ
  7557 00002925 00                              DB      0                       ; NUL TERMINATED
  7558                                  
  7559                                  ;IFTAB   LABEL   BYTE			; Table of IF conditionals
  7560                                  IFTAB:
  7561 00002926 034E4F54                        DB      3,"NOT"                 ; First byte is count
  7562 0000292A [CE0B]                  	DW      IFNOT		; OFFSET TRANGROUP:IFNOT
  7563 0000292C 0A4552524F524C4556-             DB      10,"ERRORLEVEL"
  7564 00002935 454C               
  7565 00002937 [5C0C]                          DW      IFERLEV		; OFFSET TRANGROUP:IFERLEV
  7566 00002939 054558495354                    DB      5,"EXIST"
  7567 0000293F [1E0C]                          DW      IFEXISTS	; OFFSET TRANGROUP:IFEXISTS
  7568 00002941 00                              DB      0
  7569                                  
  7570                                  COMTAB:					; Table for internal command names	
  7571 00002942 0444495201              	DB      4,"DIR",1
  7572 00002947 [1F0E]                          DW      CATALOG		; OFFSET TRANGROUP:CATALOG
  7573 00002949 0752454E414D4501                DB      7,"RENAME",1
  7574 00002951 [0310]                          DW      CRENAME		; OFFSET TRANGROUP:CRENAME
  7575 00002953 0452454E01                      DB      4,"REN",1
  7576 00002958 [0310]                          DW	CRENAME		; OFFSET TRANGROUP:CRENAME
  7577 0000295A 06455241534501                  DB      6,"ERASE",1
  7578 00002961 [DC0F]                          DW      ERASE		; OFFSET TRANGROUP:ERASE
  7579 00002963 0444454C01                      DB      4,"DEL",1
  7580 00002968 [DC0F]                          DW      ERASE		; OFFSET TRANGROUP:ERASE
  7581 0000296A 055459504501                    DB      5,"TYPE",1
  7582 00002970 [4010]                          DW      TYPEFIL		; OFFSET TRANGROUP:TYPEFIL
  7583 00002972 0452454D00                      DB      4,"REM",0
  7584 00002977 [0400]                          DW      TCOMMAND	; OFFSET TRANGROUP:TCOMMAND
  7585 00002979 05434F505901                    DB      5,"COPY",1
  7586 0000297F [691B]                          DW      COPY		; OFFSET TRANGROUP:COPY
  7587 00002981 06504155534500                  DB      6,"PAUSE",0
  7588 00002988 [CF0F]                          DW      PAUSE		; OFFSET TRANGROUP:PAUSE
  7589 0000298A 054441544500                    DB      5,"DATE",0
  7590 00002990 [D812]                          DW      DATE		; OFFSET TRANGROUP:DATE
  7591 00002992 0554494D4500                    DB      5,"TIME",0
  7592 00002998 [B113]                          DW	CTIME 		; OFFSET TRANGROUP:CTIME
  7593 0000299A 0456455200                      DB      4,"VER",0
  7594 0000299F [FC10]                          DW      VERSION 	; OFFSET TRANGROUP:VERSION
  7595 000029A1 04564F4C01                      DB      4,"VOL",1
  7596 000029A6 [AD10]                          DW      VOLUME 		; OFFSET TRANGROUP:VOLUME
  7597 000029A8 03434401                        DB      3,"CD",1
  7598 000029AC [A911]                          DW      _$CHDIR		; OFFSET TRANGROUP:$CHDIR
  7599 000029AE 06434844495201                  DB      6,"CHDIR",1
  7600 000029B5 [A911]                          DW      _$CHDIR		; OFFSET TRANGROUP:$CHDIR
  7601 000029B7 034D4401                        DB      3,"MD",1
  7602 000029BB [DC11]                          DW      _$MKDIR		; OFFSET TRANGROUP:$MKDIR
  7603 000029BD 064D4B44495201                  DB      6,"MKDIR",1
  7604 000029C4 [DC11]                          DW	_$MKDIR		; OFFSET TRANGROUP:$MKDIR
  7605 000029C6 03524401                        DB      3,"RD",1
  7606 000029CA [1112]                          DW      _$RMDIR		; OFFSET TRANGROUP:$RMDIR
  7607 000029CC 06524D44495201                  DB      6,"RMDIR",1
  7608 000029D3 [1112]                          DW      _$RMDIR		; OFFSET TRANGROUP:$RMDIR
  7609 000029D5 06425245414B00                  DB      6,"BREAK",0
  7610 000029DC [041A]                          DW      CNTRLC		; OFFSET TRANGROUP:CNTRLC
  7611 000029DE 0756455249465900                DB      7,"VERIFY",0
  7612 000029E6 [361A]                          DW      VERIFY		; OFFSET TRANGROUP:VERIFY
  7613 000029E8 0453455400                      DB      4,"SET",0
  7614 000029ED [8207]                          DW      ADD_NAME_TO_ENVIRONMENT	; OFFSET TRANGROUP:ADD_NAME_TO_ENVIRONMENT
  7615 000029EF 0750524F4D505400                DB      7,"PROMPT",0
  7616 000029F7 [6D07]                          DW      ADD_PROMPT	; OFFSET TRANGROUP:ADD_PROMPT
  7617 000029F9 055041544800                    DB      5,"PATH",0
  7618 000029FF [3C18]                          DW      PATH		; OFFSET TRANGROUP:PATH
  7619 00002A01 054558495400            	DB      5,"EXIT",0
  7620 00002A07 [3909]                          DW      _$EXIT		; OFFSET TRANGROUP:$EXIT
  7621 00002A09 054354545901                    DB      5,"CTTY",1
  7622 00002A0F [5409]                          DW      CTTY		; OFFSET TRANGROUP:CTTY
  7623 00002A11 054543484F00                    DB      5,"ECHO",0
  7624 00002A17 [BA19]                          DW      ECHO		; OFFSET TRANGROUP:ECHO
  7625 00002A19 05474F544F00                    DB      5,"GOTO",0
  7626 00002A1F [CA0C]                          DW	GOTO		; OFFSET TRANGROUP:GOTO
  7627 00002A21 06534849465400                  DB      6,"SHIFT",0
  7628 00002A28 [8A0C]                          DW      SHIFT		; OFFSET TRANGROUP:SHIFT
  7629 00002A2A 03494600                        DB      3,"IF",0
  7630 00002A2E [840B]                          DW      _$IF		; OFFSET TRANGROUP:$IF
  7631 00002A30 04464F5200                      DB      4,"FOR",0
  7632 00002A35 [9C0A]                          DW	_$FOR		; OFFSET TRANGROUP:$FOR
  7633 00002A37 04434C5300                      DB      4,"CLS",0
  7634 00002A3C [5011]                          DW      CLS		; OFFSET TRANGROUP:CLS
  7635 00002A3E 00                              DB      0               ; Terminate command table
  7636                                  
  7637                                  ;TRANDATAEND	LABEL   BYTE
  7638                                  
  7639 00002A3F FF                      	DB	0FFh ; 30/04/2018
  7640                                  
  7641                                  TRANDATAEND:
  7642                                  
  7643                                  ;TRANDATA	ENDS
  7644                                  ;	END
  7645                                  
  7646                                  ;COMLEN	EQU	$-$$
  7647                                  
  7648                                  ;BSS_START EQU	COMLEN+100H
  7649                                  
  7650                                  BSS_START EQU	$-$$
  7651                                  
  7652                                  ; ----------------------------------------------------------------------------
  7653                                  ; SEGMENT - TRANDATA
  7654                                  ; ----------------------------------------------------------------------------
  7655                                  
  7656                                  ; ----------------------------------------------------------------------------
  7657                                  ;Uninitialized transient data
  7658                                  ; ----------------------------------------------------------------------------
  7659                                  
  7660                                  TRANSPACEPARAGS EQU (BSS_START+15)/16	
  7661                                  
  7662                                  TRANSPACE	EQU (16*TRANSPACEPARAGS)+100h ; 01/05/2018
  7663                                  
  7664                                  ABSOLUTE TRANSPACE
  7665                                  
  7666                                  ;=============================================================================
  7667                                  ; TSPC.ASM
  7668                                  ;=============================================================================
  7669                                  
  7670                                  ;TITLE   COMMAND Transient Uninitialized DATA
  7671                                  
  7672                                  ; Uninitialized transient data
  7673                                  ;TRANSPACE SEGMENT PUBLIC BYTE
  7674                                  
  7675                                  	;ORG     0
  7676                                  ;ZERO    =       $
  7677                                  
  7678 00002B40 <res 00000083>          UCOMBUF	RESB	COMBUFLEN+3	; Raw console buffer	; offset 2B20h
  7679 00002BC3 <res 00000083>          COMBUF	RESB	COMBUFLEN+3	; Cooked console buffer	; offset 2BA3h
  7680 00002C46 <res 00000043>          USERDIR1 RESB	DIRSTRLEN+3	; Storage for users current directory
  7681 00002C89 <res 0000004F>          EXECPATH RESB	DIRSTRLEN+15	; Path for external command
  7682                                  
  7683                                  ; Variables passed up from resident
  7684                                  ;HEADCALL LABEL  DWORD
  7685                                  HEADCALL:		; offset 2CD8h
  7686 00002CD8 <res 00000002>                  RESW	1	
  7687 00002CDA <res 00000002>          RESSEG	RESW	1	; offset 2CDAh
  7688 00002CDC <res 00000002>          TPA	RESW	1	; offset 2CDCh	
  7689 00002CDE <res 00000001>          SWITCHAR RESB	1
  7690 00002CDF <res 00000001>          DIRCHAR	RESB 	1
  7691 00002CE0 <res 00000004>          EXEC_ADDR RESD	1
  7692 00002CE4 <res 00000004>          RCH_ADDR RESD	1	; offset 2CE4h
  7693                                  
  7694 00002CE8 <res 00000001>          CHKDRV	RESB	1
  7695                                  ;RDEOF	LABEL   BYTE		; Misc flags
  7696                                  RDEOF:
  7697                                  ;IFNOTFLAG LABEL BYTE
  7698                                  IFNOTFLAG:
  7699 00002CE9 <res 00000001>          FILTYP	RESB	1
  7700 00002CEA <res 00000001>          CURDRV	RESB	1	; offset 2CEAh		
  7701                                  ;CONCAT	LABEL   BYTE
  7702                                  CONCAT:
  7703 00002CEB <res 00000001>          PARM1	RESB	1
  7704                                  ;ARGC	LABEL   BYTE
  7705                                  ARGC:	
  7706 00002CEC <res 00000001>          PARM2	RESB	1
  7707 00002CED <res 00000002>          COMSW	RESW	1		; Switches between command and 1st arg
  7708 00002CEF <res 00000002>          ARG1S	RESW	1		; Switches between 1st and 2nd arg
  7709                                  ;DESTSWITCH LABEL WORD
  7710                                  DESTSWITCH:
  7711 00002CF1 <res 00000002>          ARG2S	RESW	1		; Switches after 2nd arg
  7712                                  ;ALLSWITCH LABEL WORD
  7713                                  ALLSWITCH:
  7714 00002CF3 <res 00000002>          ARGTS	RESW	1		; ALL switches except for COMSW
  7715 00002CF5 <res 00000001>          CFLAG	RESB	1
  7716                                  ;DESTCLOSED LABEL BYTE
  7717                                  DESTCLOSED:
  7718 00002CF6 <res 00000001>          SPECDRV	RESB	1
  7719 00002CF7 <res 00000002>          BYTCNT	RESW	1 ; off 2CF7h	; Size of buffer between RES and TRANS
  7720 00002CF9 <res 00000002>          NXTADD	RESW	1
  7721 00002CFB <res 00000001>          FRSTSRCH RESB	1
  7722 00002CFC <res 00000001>          LINCNT	RESB	1
  7723 00002CFD <res 00000001>          LINLEN	RESB	1
  7724 00002CFE <res 00000002>          FILECNT	RESW	1
  7725 00002D00 <res 00000050>          CHARBUF	RESB	80 ; off 2D00h	; line byte character buffer for xenix write
  7726                                  ;DESTFCB2 LABEL  BYTE
  7727                                  DESTFCB2:		; offset 2D50h		
  7728 00002D50 <res 00000001>          IDLEN	RESB	1
  7729 00002D51 <res 00000008>          ID	RESB	8 	; offset 2D51h	
  7730 00002D59 <res 00000003>          COM	RESB	3
  7731 00002D5C <res 00000025>          DEST	RESB	37
  7732 00002D81 <res 0000000B>          DESTNAME RESB	11
  7733                                  ;DESTFCB LABEL   BYTE
  7734                                  DESTFCB:
  7735 00002D8C <res 00000040>          DESTDIR	RESB	DIRSTRLEN	; Directory for PATH searches
  7736                                  ;GOTOLEN LABEL   WORD
  7737                                  GOTOLEN:		; offset 2DCCh
  7738                                  ;PWDBUF  LABEL   BYTE
  7739                                  PWDBUF:
  7740                                  ;EXEFCB  LABEL   WORD
  7741                                  EXEFCB:
  7742 00002DCC <res 00000043>          DIRBUF	RESB	DIRSTRLEN+3	; offset 2DCCh 
  7743 00002E0F <res 0000000C>          SDIRBUF	RESB	12
  7744 00002E1B <res 00000002>          _BITS	RESW	1
  7745 00002E1D <res 00000002>          PATHCNT	RESW	1
  7746 00002E1F <res 00000002>          PATHPOS	RESW	1
  7747 00002E21 <res 00000002>          PATHSW	RESW	1
  7748 00002E23 <res 00000002>          FULLSCR	RESW	1
  7749                                  
  7750                                  ;IF  IBM
  7751                                  ;ROM_CALL RESB	1		; flag for rom function
  7752                                  ;ROM_IP	RESW	1
  7753                                  ;ROM_CS	RESW	1
  7754                                  ;ENDIF
  7755                                  
  7756                                  ;DESTVARS LABEL  BYTE
  7757                                  DESTVARS:
  7758 00002E25 <res 00000001>          DESTISDIR RESB 	1
  7759 00002E26 <res 00000001>          DESTSIZ	RESB	1
  7760 00002E27 <res 00000002>          DESTTAIL RESW	1
  7761 00002E29 <res 00000001>          DESTINFO RESB	1
  7762 00002E2A <res 00000054>          DESTBUF	RESB	DIRSTRLEN+20
  7763                                  
  7764 00002E7E <res 00000002>          DESTHAND RESW	1	
  7765 00002E80 <res 00000001>          DESTISDEV RESB	1
  7766 00002E81 <res 00000001>          FIRSTDEST RESB	1
  7767 00002E82 <res 00000001>          MELCOPY RESB	1	; offset 2E82h
  7768 00002E83 <res 00000002>          MELSTART RESW	1	; offset 2E83h
  7769                                  
  7770                                  ;SRCVARS  LABEL  BYTE
  7771                                  SRCVARS:
  7772 00002E85 <res 00000001>          SRCISDIR RESB	1
  7773 00002E86 <res 00000001>          SRCSIZ	RESB	1
  7774 00002E87 <res 00000002>          SRCTAIL RESW	1
  7775 00002E89 <res 00000001>          SRCINFO	RESB	1
  7776 00002E8A <res 00000054>          SRCBUF	RESB	DIRSTRLEN+20
  7777                                  
  7778 00002EDE <res 00000002>          SRCHAND	RESW	1
  7779 00002EE0 <res 00000001>          SRCISDEV RESB	1
  7780                                  
  7781 00002EE1 <res 00000054>          SCANBUF	RESB	DIRSTRLEN+20 ; offset 2EE1h
  7782                                  
  7783 00002F35 <res 00000002>          SRCPT   RESW	1	; offset 2F35h
  7784 00002F37 <res 00000001>          INEXACT RESB	1
  7785 00002F38 <res 00000001>          APPEND  RESB	1
  7786 00002F39 <res 00000001>          NOWRITE RESB	1
  7787 00002F3A <res 00000001>          BINARY  RESB	1
  7788 00002F3B <res 00000001>          WRITTEN RESB	1
  7789 00002F3C <res 00000001>          TERMREAD RESB	1
  7790 00002F3D <res 00000001>          ASCII   RESB	1
  7791 00002F3E <res 00000001>          PLUS    RESB	1
  7792 00002F3F <res 00000002>          CPDATE  RESW	1
  7793 00002F41 <res 00000002>          CPTIME  RESW	1
  7794 00002F43 <res 00000002>          BATHAND RESW	1		; Batch handle
  7795 00002F45 <res 00000002>          STARTEL RESW	1	; offset 2F45h
  7796 00002F47 <res 00000001>          ELCNT   RESB	1	; offset 2F47h
  7797 00002F48 <res 00000001>          ELPOS   RESB	1	; offset 2F48h
  7798 00002F49 <res 00000001>          SKPDEL  RESB	1
  7799 00002F4A <res 0000000B>          SOURCE  RESB	11
  7800                                  
  7801 00002F55 <res 00000001>          	resb 1 ; 30/04/2018
  7802                                  
  7803                                          ;IF     KANJI
  7804                                  ;KPARSE DB      ?	
  7805                                          ;ENDIF
  7806                                  
  7807                                  ;INTERNATVARS    internat_block <>
  7808                                  ;		DB      (internat_block_max - ($ - INTERNATVARS)) DUP (?)
  7809                                  
  7810 00002F56 <res 00000018>          INTERNATVARS	RESB	INTERNAT_BLOCK.size
  7811                                  
  7812 00002F6E <res 00000008>          		RESB	(internat_block_max - ($ - INTERNATVARS))
  7813                                  
  7814                                          ;DB      80H DUP(0) ; Init to 0 to make sure the linker is not fooled
  7815 00002F76 <res 00000080>          	RESB	128
  7816                                  ;STACK   LABEL   WORD
  7817                                  alignb 2
  7818                                  STACK:		; offset 2FF6h
  7819                                  
  7820                                  ;TRANSPACEEND	LABEL   BYTE
  7821                                  TRANSPACEND:
  7822                                  
  7823                                  ;TRANSPACE ENDS
  7824                                  ;	END
  7825                                  
  7826                                  ;ABSOLUTE STACK
  7827                                  
  7828                                  TRANSPACESIZE 	EQU	$-BSS_START
  7829                                  
  7830                                  ;Length of transient in paragraphs
  7831                                  TRNLEN  EQU     (BSS_START+TRANSPACESIZE+15)/16
